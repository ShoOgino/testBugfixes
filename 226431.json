{"path":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7c87c58d71fb9a6f5bc4ae8247339ecbbf67edc","date":1332908462,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      if (qstr == null || qstr.length() == 0)\n        return null;\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new ParseException(\"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15cacbf46c73bd5b0e47b57128be8852cb236160","date":1332942979,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      if (qstr == null || qstr.length() == 0)\n        return null;\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new ParseException(\"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","bugFix":null,"bugIntro":["738199265d7244d0d494cdc76ad36c750d9a1bcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"738199265d7244d0d494cdc76ad36c750d9a1bcd","date":1333253180,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      if (qstr == null || qstr.length() == 0)\n        return null;\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new ParseException(\"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","bugFix":["15cacbf46c73bd5b0e47b57128be8852cb236160"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      if (qstr == null || qstr.length() == 0)\n        return null;\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SyntaxError(\"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      if (qstr == null || qstr.length() == 0)\n        return null;\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new ParseException(\"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      if (qstr == null || qstr.length() == 0)\n        return null;\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SyntaxError(\"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      if (qstr == null || qstr.length() == 0)\n        return null;\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new ParseException(\"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      if (qstr == null || qstr.length() == 0)\n        return null;\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SyntaxError(\"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      if (qstr == null || qstr.length() == 0)\n        return null;\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SyntaxError(\"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      if (qstr == null || qstr.length() == 0)\n        return null;\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SyntaxError(\"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      if (qstr == null || qstr.length() == 0)\n        return null;\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SyntaxError(\"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"637559b0fb4d8b154a84b1af4661cb1b5d9c8415","date":1504740251,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      if (qstr == null || qstr.length() == 0)\n        return null;\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SyntaxError(\"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      if (qstr == null || qstr.length() == 0)\n        return null;\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SyntaxError(\"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      if (qstr == null || qstr.length() == 0)\n        return null;\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SyntaxError(\"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3cdb67100dc016748799a77218aa409478372d79","19275ba31e621f6da1b83bf13af75233876fd3d4"],"637559b0fb4d8b154a84b1af4661cb1b5d9c8415":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"3cdb67100dc016748799a77218aa409478372d79":["738199265d7244d0d494cdc76ad36c750d9a1bcd"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d7c87c58d71fb9a6f5bc4ae8247339ecbbf67edc":["c26f00b574427b55127e869b935845554afde1fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":["738199265d7244d0d494cdc76ad36c750d9a1bcd","3cdb67100dc016748799a77218aa409478372d79"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3cdb67100dc016748799a77218aa409478372d79"],"738199265d7244d0d494cdc76ad36c750d9a1bcd":["15cacbf46c73bd5b0e47b57128be8852cb236160"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["19275ba31e621f6da1b83bf13af75233876fd3d4","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"15cacbf46c73bd5b0e47b57128be8852cb236160":["d7c87c58d71fb9a6f5bc4ae8247339ecbbf67edc"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["19275ba31e621f6da1b83bf13af75233876fd3d4","637559b0fb4d8b154a84b1af4661cb1b5d9c8415"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"637559b0fb4d8b154a84b1af4661cb1b5d9c8415":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"3cdb67100dc016748799a77218aa409478372d79":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["d7c87c58d71fb9a6f5bc4ae8247339ecbbf67edc"],"d7c87c58d71fb9a6f5bc4ae8247339ecbbf67edc":["15cacbf46c73bd5b0e47b57128be8852cb236160"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","637559b0fb4d8b154a84b1af4661cb1b5d9c8415","685bd38810c206c93e9058f3c2cfa9827c086c27","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"738199265d7244d0d494cdc76ad36c750d9a1bcd":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"15cacbf46c73bd5b0e47b57128be8852cb236160":["738199265d7244d0d494cdc76ad36c750d9a1bcd"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","685bd38810c206c93e9058f3c2cfa9827c086c27","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}