{"path":"src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","commits":[{"id":"8626034838b30f3e0a62b18992eb6227c04ec80b","date":1253824556,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"/dev/null","sourceNew":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      e.estimateSize();\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"instanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c127f26529b2b80ae7c59d9fbecd5b0dde25a4e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6de0873c9dcf5c7df6372d9269ec809cd69b58c3","date":1253863664,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      e.estimateSize();\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      e.estimateSize();\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"instanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca27715d4cca932ab45cace873e15590bb6406f4","date":1253876415,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      e.estimateSize();\n      stats.add(\"entry #\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n      stats.add(\"insanity #\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      e.estimateSize();\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b87e897caade1313c01570444b98b1541b0ca00","date":1254032436,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      e.estimateSize();\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      e.estimateSize();\n      stats.add(\"entry #\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n      stats.add(\"insanity #\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b47508602811473220ce736528572eadb1b58769","date":1255981481,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      e.estimateSize();\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.checkSanity(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ca27715d4cca932ab45cace873e15590bb6406f4":["6de0873c9dcf5c7df6372d9269ec809cd69b58c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8626034838b30f3e0a62b18992eb6227c04ec80b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["b47508602811473220ce736528572eadb1b58769"],"b47508602811473220ce736528572eadb1b58769":["6b87e897caade1313c01570444b98b1541b0ca00"],"6de0873c9dcf5c7df6372d9269ec809cd69b58c3":["8626034838b30f3e0a62b18992eb6227c04ec80b"],"6b87e897caade1313c01570444b98b1541b0ca00":["ca27715d4cca932ab45cace873e15590bb6406f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ca27715d4cca932ab45cace873e15590bb6406f4":["6b87e897caade1313c01570444b98b1541b0ca00"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8626034838b30f3e0a62b18992eb6227c04ec80b"],"8626034838b30f3e0a62b18992eb6227c04ec80b":["6de0873c9dcf5c7df6372d9269ec809cd69b58c3"],"6de0873c9dcf5c7df6372d9269ec809cd69b58c3":["ca27715d4cca932ab45cace873e15590bb6406f4"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"b47508602811473220ce736528572eadb1b58769":["ad94625fb8d088209f46650c8097196fec67f00c"],"6b87e897caade1313c01570444b98b1541b0ca00":["b47508602811473220ce736528572eadb1b58769"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}