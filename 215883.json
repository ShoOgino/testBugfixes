{"path":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","commits":[{"id":"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","date":1309476031,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(FunctionQuery,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(FunctionQuery functionQuery, double dboost) throws Exception {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"/dev/null","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"/dev/null","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfd4d352ddf04b37253ad97ce1aad1448253f0f7","date":1310173878,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexSearcher s = new IndexSearcher(dir, true);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexSearcher s = new IndexSearcher(dir, true);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":["2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["382fe3a6ca9745891afebda9b9a57cc158305545"],"382fe3a6ca9745891afebda9b9a57cc158305545":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["817d8435e9135b756f08ce6710ab0baac51bdf88","dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["382fe3a6ca9745891afebda9b9a57cc158305545","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["b89678825b68eccaf09e6ab71675fc0b0af1e099","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"382fe3a6ca9745891afebda9b9a57cc158305545":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}