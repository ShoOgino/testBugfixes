{"path":"src/test/org/apache/lucene/index/TestIndexModifier#testIndexInternal(int).mjava","commits":[{"id":"959f192d46200c65ecff4fa688b244abca230b73","date":1118097808,"type":1,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexModifier#testIndexInternal(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndex#testIndexInternal(int).mjava","sourceNew":"  private void testIndexInternal(int maxWait) throws IOException {\n    boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.getDirectory(indexDir, create);\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","sourceOld":"  private void testIndexInternal(int maxWait) throws IOException {\n    boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.getDirectory(indexDir, create);\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f9abf22470be69ffd1583ddf1cf2a0a275c4152","date":1130187285,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexModifier#testIndexInternal(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexModifier#testIndexInternal(int).mjava","sourceNew":"  private void testIndexInternal(int maxWait) throws IOException {\n    final boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.getDirectory(indexDir, create);\n    IndexThread.id = 0;\n    IndexThread.idStack.clear();\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait, 1);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait, 2);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","sourceOld":"  private void testIndexInternal(int maxWait) throws IOException {\n    boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.getDirectory(indexDir, create);\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexModifier#testIndexInternal(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexModifier#testIndexInternal(int).mjava","sourceNew":"  private void testIndexInternal(int maxWait) throws IOException {\n    final boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.getDirectory(indexDir);\n    IndexThread.id = 0;\n    IndexThread.idStack.clear();\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait, 1);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait, 2);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","sourceOld":"  private void testIndexInternal(int maxWait) throws IOException {\n    final boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.getDirectory(indexDir, create);\n    IndexThread.id = 0;\n    IndexThread.idStack.clear();\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait, 1);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait, 2);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b583d3621fe173e7296abcf62f82fb707c901234","date":1194717060,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexModifier#testIndexInternal(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexModifier#testIndexInternal(int).mjava","sourceNew":"  private void testIndexInternal(int maxWait) throws IOException {\n    final boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.getDirectory(indexDir, null, false);\n    IndexThread.id = 0;\n    IndexThread.idStack.clear();\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait, 1);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait, 2);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","sourceOld":"  private void testIndexInternal(int maxWait) throws IOException {\n    final boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.getDirectory(indexDir);\n    IndexThread.id = 0;\n    IndexThread.idStack.clear();\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait, 1);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait, 2);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015c55424dd37249054283bedc90388bd45358f","date":1197049353,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexModifier#testIndexInternal(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexModifier#testIndexInternal(int).mjava","sourceNew":"  private void testIndexInternal(int maxWait) throws IOException {\n    final boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.getDirectory(indexDir);\n    IndexThread.id = 0;\n    IndexThread.idStack.clear();\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait, 1);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait, 2);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","sourceOld":"  private void testIndexInternal(int maxWait) throws IOException {\n    final boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.getDirectory(indexDir, null, false);\n    IndexThread.id = 0;\n    IndexThread.idStack.clear();\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait, 1);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait, 2);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexModifier#testIndexInternal(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexModifier#testIndexInternal(int).mjava","sourceNew":"  private void testIndexInternal(int maxWait) throws Exception {\n    final boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.getDirectory(indexDir);\n    IndexThread.id = 0;\n    IndexThread.idStack.clear();\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait, 1);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait, 2);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      Thread.sleep(100);\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","sourceOld":"  private void testIndexInternal(int maxWait) throws IOException {\n    final boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.getDirectory(indexDir);\n    IndexThread.id = 0;\n    IndexThread.idStack.clear();\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait, 1);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait, 2);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416d032f85b7ea8efc272f86ba46bc460589aff7","date":1243881250,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexModifier#testIndexInternal(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexModifier#testIndexInternal(int).mjava","sourceNew":"  private void testIndexInternal(int maxWait) throws Exception {\n    final boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.open(indexDir);\n    IndexThread.id = 0;\n    IndexThread.idStack.clear();\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait, 1);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait, 2);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      Thread.sleep(100);\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","sourceOld":"  private void testIndexInternal(int maxWait) throws Exception {\n    final boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.getDirectory(indexDir);\n    IndexThread.id = 0;\n    IndexThread.idStack.clear();\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait, 1);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait, 2);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      Thread.sleep(100);\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestIndexModifier#testIndexInternal(int).mjava","sourceNew":null,"sourceOld":"  private void testIndexInternal(int maxWait) throws Exception {\n    final boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.open(indexDir);\n    IndexThread.id = 0;\n    IndexThread.idStack.clear();\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait, 1);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait, 2);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      Thread.sleep(100);\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestIndexModifier#testIndexInternal(int).mjava","sourceNew":null,"sourceOld":"  private void testIndexInternal(int maxWait) throws Exception {\n    final boolean create = true;\n    //Directory rd = new RAMDirectory();\n    // work on disk to make sure potential lock problems are tested:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"lucenetestindex\");\n    Directory rd = FSDirectory.open(indexDir);\n    IndexThread.id = 0;\n    IndexThread.idStack.clear();\n    IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);\n    IndexThread thread1 = new IndexThread(index, maxWait, 1);\n    thread1.start();\n    IndexThread thread2 = new IndexThread(index, maxWait, 2);\n    thread2.start();\n    while(thread1.isAlive() || thread2.isAlive()) {\n      Thread.sleep(100);\n    }\n    index.optimize();\n    int added = thread1.added + thread2.added;\n    int deleted = thread1.deleted + thread2.deleted;\n    assertEquals(added-deleted, index.docCount());\n    index.close();\n    \n    try {\n      index.close();\n      fail();\n    } catch(IllegalStateException e) {\n      // expected exception\n    }\n    rmDir(indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b583d3621fe173e7296abcf62f82fb707c901234":["66b12ba4967665216eeb706b58d424c51fb3641a"],"959f192d46200c65ecff4fa688b244abca230b73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"66b12ba4967665216eeb706b58d424c51fb3641a":["8f9abf22470be69ffd1583ddf1cf2a0a275c4152"],"a015c55424dd37249054283bedc90388bd45358f":["b583d3621fe173e7296abcf62f82fb707c901234"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["416d032f85b7ea8efc272f86ba46bc460589aff7","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"8f9abf22470be69ffd1583ddf1cf2a0a275c4152":["959f192d46200c65ecff4fa688b244abca230b73"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["a015c55424dd37249054283bedc90388bd45358f"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"b583d3621fe173e7296abcf62f82fb707c901234":["a015c55424dd37249054283bedc90388bd45358f"],"959f192d46200c65ecff4fa688b244abca230b73":["8f9abf22470be69ffd1583ddf1cf2a0a275c4152"],"66b12ba4967665216eeb706b58d424c51fb3641a":["b583d3621fe173e7296abcf62f82fb707c901234"],"a015c55424dd37249054283bedc90388bd45358f":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["959f192d46200c65ecff4fa688b244abca230b73"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8f9abf22470be69ffd1583ddf1cf2a0a275c4152":["66b12ba4967665216eeb706b58d424c51fb3641a"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}