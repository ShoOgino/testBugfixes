{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ExponentialMovingAverageEvaluator#doWork(Object...).mjava","commits":[{"id":"7afec973c6531fa1faec7ab6e5eb7bf22917fd7a","date":1507511027,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ExponentialMovingAverageEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if (!(2 == values.length ||  values.length == 3)){\n      throw new IOException(String.format(Locale.ROOT,\"%s(...) only works with 2 or 3 values but %d were provided\", constructingFactory.getFunctionName(getClass()), values.length));\n    }\n    List<?> observations = (List<?> )values[0];\n    Number window = (Number)values[1];\n    Number alpha;\n    if(2 == values.length){\n      if(!(observations instanceof List<?>)){\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a List\", toExpression(constructingFactory), values[0].getClass().getSimpleName()));\n      }\n      if(!(observations.size() > 1)){\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found list size of %s for the first value, expecting a List of size > 0.\", toExpression(constructingFactory), observations.size()));\n      }\n      if(!(window instanceof Number)){\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number\", toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n      }\n      if (window.doubleValue() >  observations.size()) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found a window size of %s for the second value, the first value has a List size of %s, expecting a window value smaller or equal to the List size\", toExpression(constructingFactory), window.intValue(), observations.size() ));\n      }\n    }\n\n    if(3 == values.length){\n      alpha = (Number) values[2];\n      if(!(alpha instanceof Number)){\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the third value, expecting a Number\", toExpression(constructingFactory), values[2].getClass().getSimpleName()));\n      }\n      if (!(alpha.doubleValue() >= 0 && alpha.doubleValue() <= 1.0)) {\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - out of range, found %s for the third value, expecting a range between 0 and 1.0\",toExpression(constructingFactory), alpha.doubleValue()));\n      }\n    }else {\n         alpha = 2.0/(window.doubleValue() + 1.0);\n    }\n\n    List<Number> sequence = new ArrayList<>();\n    DescriptiveStatistics slider = new DescriptiveStatistics(window.intValue());\n    Number lastValue = 0;\n    for(Object value : observations) {\n      slider.addValue(((Number) value).doubleValue());\n      if (slider.getN() == window.intValue()) {\n        lastValue = slider.getMean();\n        break;\n      }\n    }\n\n    sequence.add(lastValue);\n    int i=0;\n\n    for(Object value : observations) {\n      if(i >= window.intValue()) {\n        Number val = (alpha.doubleValue() * (((Number) value).doubleValue() - lastValue.doubleValue())+lastValue.doubleValue());\n        sequence.add(val);\n        lastValue = val;\n      }\n      ++i;\n    }\n    return sequence;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7afec973c6531fa1faec7ab6e5eb7bf22917fd7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7afec973c6531fa1faec7ab6e5eb7bf22917fd7a"]},"commit2Childs":{"7afec973c6531fa1faec7ab6e5eb7bf22917fd7a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7afec973c6531fa1faec7ab6e5eb7bf22917fd7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}