{"path":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadSize().mjava","commits":[{"id":"1f9ca773178dc09e3e8fb1c66dde5f8dbd6f4644","date":1170990980,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadSize().mjava","pathOld":"/dev/null","sourceNew":"  public void testLoadSize() throws IOException {\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    Document doc;\n    \n    doc = reader.doc(0, new FieldSelector(){\n      public FieldSelectorResult accept(String fieldName) {\n        if (fieldName.equals(DocHelper.TEXT_FIELD_1_KEY) ||\n            fieldName.equals(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY) ||\n            fieldName.equals(DocHelper.LAZY_FIELD_BINARY_KEY))\n          return FieldSelectorResult.SIZE;\n        else if (fieldName.equals(DocHelper.TEXT_FIELD_3_KEY))\n          return FieldSelectorResult.LOAD;\n        else\n          return FieldSelectorResult.NO_LOAD;\n      }\n    });\n    Fieldable f1 = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    Fieldable f3 = doc.getFieldable(DocHelper.TEXT_FIELD_3_KEY);\n    Fieldable fb = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(f1.isBinary());\n    assertTrue(!f3.isBinary());\n    assertTrue(fb.isBinary());\n    assertSizeEquals(2*DocHelper.FIELD_1_TEXT.length(), f1.binaryValue());\n    assertEquals(DocHelper.FIELD_3_TEXT, f3.stringValue());\n    assertSizeEquals(DocHelper.LAZY_FIELD_BINARY_BYTES.length, fb.binaryValue());\n    \n    reader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0","date":1185569419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadSize().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadSize().mjava","sourceNew":"  public void testLoadSize() throws IOException {\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    Document doc;\n    \n    doc = reader.doc(0, new FieldSelector(){\n      public FieldSelectorResult accept(String fieldName) {\n        if (fieldName.equals(DocHelper.TEXT_FIELD_1_KEY) ||\n            fieldName.equals(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY) ||\n            fieldName.equals(DocHelper.LAZY_FIELD_BINARY_KEY))\n          return FieldSelectorResult.SIZE;\n        else if (fieldName.equals(DocHelper.TEXT_FIELD_3_KEY))\n          return FieldSelectorResult.LOAD;\n        else\n          return FieldSelectorResult.NO_LOAD;\n      }\n    });\n    Fieldable f1 = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    Fieldable f3 = doc.getFieldable(DocHelper.TEXT_FIELD_3_KEY);\n    Fieldable fb = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(f1.isBinary());\n    assertTrue(!f3.isBinary());\n    assertTrue(fb.isBinary());\n    assertSizeEquals(2*DocHelper.FIELD_1_TEXT.length(), f1.binaryValue());\n    assertEquals(DocHelper.FIELD_3_TEXT, f3.stringValue());\n    assertSizeEquals(DocHelper.LAZY_FIELD_BINARY_BYTES.length, fb.binaryValue());\n    \n    reader.close();\n  }\n\n","sourceOld":"  public void testLoadSize() throws IOException {\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    Document doc;\n    \n    doc = reader.doc(0, new FieldSelector(){\n      public FieldSelectorResult accept(String fieldName) {\n        if (fieldName.equals(DocHelper.TEXT_FIELD_1_KEY) ||\n            fieldName.equals(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY) ||\n            fieldName.equals(DocHelper.LAZY_FIELD_BINARY_KEY))\n          return FieldSelectorResult.SIZE;\n        else if (fieldName.equals(DocHelper.TEXT_FIELD_3_KEY))\n          return FieldSelectorResult.LOAD;\n        else\n          return FieldSelectorResult.NO_LOAD;\n      }\n    });\n    Fieldable f1 = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    Fieldable f3 = doc.getFieldable(DocHelper.TEXT_FIELD_3_KEY);\n    Fieldable fb = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(f1.isBinary());\n    assertTrue(!f3.isBinary());\n    assertTrue(fb.isBinary());\n    assertSizeEquals(2*DocHelper.FIELD_1_TEXT.length(), f1.binaryValue());\n    assertEquals(DocHelper.FIELD_3_TEXT, f3.stringValue());\n    assertSizeEquals(DocHelper.LAZY_FIELD_BINARY_BYTES.length, fb.binaryValue());\n    \n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadSize().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadSize().mjava","sourceNew":"  public void testLoadSize() throws IOException {\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    Document doc;\n    \n    doc = reader.doc(0, new FieldSelector(){\n      public FieldSelectorResult accept(String fieldName) {\n        if (fieldName.equals(DocHelper.TEXT_FIELD_1_KEY) ||\n            fieldName.equals(DocHelper.LAZY_FIELD_BINARY_KEY))\n          return FieldSelectorResult.SIZE;\n        else if (fieldName.equals(DocHelper.TEXT_FIELD_3_KEY))\n          return FieldSelectorResult.LOAD;\n        else\n          return FieldSelectorResult.NO_LOAD;\n      }\n    });\n    Fieldable f1 = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    Fieldable f3 = doc.getFieldable(DocHelper.TEXT_FIELD_3_KEY);\n    Fieldable fb = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(f1.isBinary());\n    assertTrue(!f3.isBinary());\n    assertTrue(fb.isBinary());\n    assertSizeEquals(2*DocHelper.FIELD_1_TEXT.length(), f1.binaryValue());\n    assertEquals(DocHelper.FIELD_3_TEXT, f3.stringValue());\n    assertSizeEquals(DocHelper.LAZY_FIELD_BINARY_BYTES.length, fb.binaryValue());\n    \n    reader.close();\n  }\n\n","sourceOld":"  public void testLoadSize() throws IOException {\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    Document doc;\n    \n    doc = reader.doc(0, new FieldSelector(){\n      public FieldSelectorResult accept(String fieldName) {\n        if (fieldName.equals(DocHelper.TEXT_FIELD_1_KEY) ||\n            fieldName.equals(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY) ||\n            fieldName.equals(DocHelper.LAZY_FIELD_BINARY_KEY))\n          return FieldSelectorResult.SIZE;\n        else if (fieldName.equals(DocHelper.TEXT_FIELD_3_KEY))\n          return FieldSelectorResult.LOAD;\n        else\n          return FieldSelectorResult.NO_LOAD;\n      }\n    });\n    Fieldable f1 = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    Fieldable f3 = doc.getFieldable(DocHelper.TEXT_FIELD_3_KEY);\n    Fieldable fb = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(f1.isBinary());\n    assertTrue(!f3.isBinary());\n    assertTrue(fb.isBinary());\n    assertSizeEquals(2*DocHelper.FIELD_1_TEXT.length(), f1.binaryValue());\n    assertEquals(DocHelper.FIELD_3_TEXT, f3.stringValue());\n    assertSizeEquals(DocHelper.LAZY_FIELD_BINARY_BYTES.length, fb.binaryValue());\n    \n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f44f07aa147c21735d6c43bafa4fde560d0362e1","date":1255024926,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadSize().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadSize().mjava","sourceNew":"  public void testLoadSize() throws IOException {\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    Document doc;\n    \n    doc = reader.doc(0, new FieldSelector(){\n      public FieldSelectorResult accept(String fieldName) {\n        if (fieldName.equals(DocHelper.TEXT_FIELD_1_KEY) ||\n            fieldName.equals(DocHelper.LAZY_FIELD_BINARY_KEY))\n          return FieldSelectorResult.SIZE;\n        else if (fieldName.equals(DocHelper.TEXT_FIELD_3_KEY))\n          return FieldSelectorResult.LOAD;\n        else\n          return FieldSelectorResult.NO_LOAD;\n      }\n    });\n    Fieldable f1 = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    Fieldable f3 = doc.getFieldable(DocHelper.TEXT_FIELD_3_KEY);\n    Fieldable fb = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(f1.isBinary());\n    assertTrue(!f3.isBinary());\n    assertTrue(fb.isBinary());\n    assertSizeEquals(2*DocHelper.FIELD_1_TEXT.length(), f1.getBinaryValue());\n    assertEquals(DocHelper.FIELD_3_TEXT, f3.stringValue());\n    assertSizeEquals(DocHelper.LAZY_FIELD_BINARY_BYTES.length, fb.getBinaryValue());\n    \n    reader.close();\n  }\n\n","sourceOld":"  public void testLoadSize() throws IOException {\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    Document doc;\n    \n    doc = reader.doc(0, new FieldSelector(){\n      public FieldSelectorResult accept(String fieldName) {\n        if (fieldName.equals(DocHelper.TEXT_FIELD_1_KEY) ||\n            fieldName.equals(DocHelper.LAZY_FIELD_BINARY_KEY))\n          return FieldSelectorResult.SIZE;\n        else if (fieldName.equals(DocHelper.TEXT_FIELD_3_KEY))\n          return FieldSelectorResult.LOAD;\n        else\n          return FieldSelectorResult.NO_LOAD;\n      }\n    });\n    Fieldable f1 = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    Fieldable f3 = doc.getFieldable(DocHelper.TEXT_FIELD_3_KEY);\n    Fieldable fb = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(f1.isBinary());\n    assertTrue(!f3.isBinary());\n    assertTrue(fb.isBinary());\n    assertSizeEquals(2*DocHelper.FIELD_1_TEXT.length(), f1.binaryValue());\n    assertEquals(DocHelper.FIELD_3_TEXT, f3.stringValue());\n    assertSizeEquals(DocHelper.LAZY_FIELD_BINARY_BYTES.length, fb.binaryValue());\n    \n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLoadSize().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadSize().mjava","sourceNew":"  public void testLoadSize() throws IOException {\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    Document doc;\n    \n    doc = reader.doc(0, new FieldSelector(){\n      public FieldSelectorResult accept(String fieldName) {\n        if (fieldName.equals(DocHelper.TEXT_FIELD_1_KEY) ||\n            fieldName.equals(DocHelper.LAZY_FIELD_BINARY_KEY))\n          return FieldSelectorResult.SIZE;\n        else if (fieldName.equals(DocHelper.TEXT_FIELD_3_KEY))\n          return FieldSelectorResult.LOAD;\n        else\n          return FieldSelectorResult.NO_LOAD;\n      }\n    });\n    Fieldable f1 = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    Fieldable f3 = doc.getFieldable(DocHelper.TEXT_FIELD_3_KEY);\n    Fieldable fb = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(f1.isBinary());\n    assertTrue(!f3.isBinary());\n    assertTrue(fb.isBinary());\n    assertSizeEquals(2*DocHelper.FIELD_1_TEXT.length(), f1.getBinaryValue());\n    assertEquals(DocHelper.FIELD_3_TEXT, f3.stringValue());\n    assertSizeEquals(DocHelper.LAZY_FIELD_BINARY_BYTES.length, fb.getBinaryValue());\n    \n    reader.close();\n  }\n\n","sourceOld":"  public void testLoadSize() throws IOException {\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    Document doc;\n    \n    doc = reader.doc(0, new FieldSelector(){\n      public FieldSelectorResult accept(String fieldName) {\n        if (fieldName.equals(DocHelper.TEXT_FIELD_1_KEY) ||\n            fieldName.equals(DocHelper.LAZY_FIELD_BINARY_KEY))\n          return FieldSelectorResult.SIZE;\n        else if (fieldName.equals(DocHelper.TEXT_FIELD_3_KEY))\n          return FieldSelectorResult.LOAD;\n        else\n          return FieldSelectorResult.NO_LOAD;\n      }\n    });\n    Fieldable f1 = doc.getFieldable(DocHelper.TEXT_FIELD_1_KEY);\n    Fieldable f3 = doc.getFieldable(DocHelper.TEXT_FIELD_3_KEY);\n    Fieldable fb = doc.getFieldable(DocHelper.LAZY_FIELD_BINARY_KEY);\n    assertTrue(f1.isBinary());\n    assertTrue(!f3.isBinary());\n    assertTrue(fb.isBinary());\n    assertSizeEquals(2*DocHelper.FIELD_1_TEXT.length(), f1.getBinaryValue());\n    assertEquals(DocHelper.FIELD_3_TEXT, f3.stringValue());\n    assertSizeEquals(DocHelper.LAZY_FIELD_BINARY_BYTES.length, fb.getBinaryValue());\n    \n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["e0c804f7aa477229414a7e12882af490c241f64d"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["1f9ca773178dc09e3e8fb1c66dde5f8dbd6f4644"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f9ca773178dc09e3e8fb1c66dde5f8dbd6f4644":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0c804f7aa477229414a7e12882af490c241f64d":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f44f07aa147c21735d6c43bafa4fde560d0362e1"]},"commit2Childs":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["e0c804f7aa477229414a7e12882af490c241f64d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f9ca773178dc09e3e8fb1c66dde5f8dbd6f4644"],"1f9ca773178dc09e3e8fb1c66dde5f8dbd6f4644":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"e0c804f7aa477229414a7e12882af490c241f64d":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}