{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testSingleHighSurrogate().mjava","commits":[{"id":"9dd42aeb8984bdfef80056722e7c1c239b7e3c07","date":1274826512,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testSingleHighSurrogate().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharArraySet#testSingleHighSurrogate().mjava","sourceNew":"  public void testSingleHighSurrogate() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    String[] upperArr = new String[] { \"ABC\\uD800\", \"ABC\\uD800EfG\",\n        \"\\uD800EfG\", \"\\uD800\\ud801\\udc1cB\" };\n\n    String[] lowerArr = new String[] { \"abc\\uD800\", \"abc\\uD800efg\",\n        \"\\uD800efg\", \"\\uD800\\ud801\\udc44b\" };\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays\n        .asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertTrue(String.format(missing, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS),\n        false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(falsePos, upperArr[i]), set\n          .contains(lowerArr[i]));\n    }\n  }\n\n","sourceOld":"  public void testSingleHighSurrogate() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    String[] upperArr = new String[] { \"ABC\\uD800\", \"ABC\\uD800EfG\",\n        \"\\uD800EfG\", \"\\uD800\\ud801\\udc1cB\" };\n\n    String[] lowerArr = new String[] { \"abc\\uD800\", \"abc\\uD800efg\",\n        \"\\uD800efg\", \"\\uD800\\ud801\\udc44b\" };\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays\n        .asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertTrue(String.format(missing, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS),\n        false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(falsePos, upperArr[i]), set\n          .contains(lowerArr[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testSingleHighSurrogate().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testSingleHighSurrogate().mjava","sourceNew":"  public void testSingleHighSurrogate() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    String[] upperArr = new String[] { \"ABC\\uD800\", \"ABC\\uD800EfG\",\n        \"\\uD800EfG\", \"\\uD800\\ud801\\udc1cB\" };\n\n    String[] lowerArr = new String[] { \"abc\\uD800\", \"abc\\uD800efg\",\n        \"\\uD800efg\", \"\\uD800\\ud801\\udc44b\" };\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays\n        .asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertTrue(String.format(missing, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS),\n        false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(falsePos, upperArr[i]), set\n          .contains(lowerArr[i]));\n    }\n  }\n\n","sourceOld":"  public void testSingleHighSurrogate() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    String[] upperArr = new String[] { \"ABC\\uD800\", \"ABC\\uD800EfG\",\n        \"\\uD800EfG\", \"\\uD800\\ud801\\udc1cB\" };\n\n    String[] lowerArr = new String[] { \"abc\\uD800\", \"abc\\uD800efg\",\n        \"\\uD800efg\", \"\\uD800\\ud801\\udc44b\" };\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays\n        .asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertTrue(String.format(missing, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS),\n        false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(falsePos, upperArr[i]), set\n          .contains(lowerArr[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}