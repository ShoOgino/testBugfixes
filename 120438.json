{"path":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0b8069918917b33f361011899a1af0cdd2d462","date":1310039336,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : 1 + random.nextInt(20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : 1 + random.nextInt(20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : 1 + random.nextInt(20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    int minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    int maxItemsPerBlock = 2*(Math.max(2, minItemsPerBlock-1)) + random.nextInt(100);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : 1 + random.nextInt(20), minItemsPerBlock, maxItemsPerBlock), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : 1 + random.nextInt(20)), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f8d592a5e572553f95dd01f3e6875293829b375","date":1314526287,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    int minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    int maxItemsPerBlock = 2*(Math.max(2, minItemsPerBlock-1)) + random.nextInt(100);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : 1 + random.nextInt(20), minItemsPerBlock, maxItemsPerBlock), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n    // give docvalues non-cfs testcoverage\n    swapCodec(new MockRandomDocValuesCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    int minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    int maxItemsPerBlock = 2*(Math.max(2, minItemsPerBlock-1)) + random.nextInt(100);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : 1 + random.nextInt(20), minItemsPerBlock, maxItemsPerBlock), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37f149c99eae8edb6c2f44fda36f194e0e345565","date":1317419618,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    int minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    int maxItemsPerBlock = 2*(Math.max(2, minItemsPerBlock-1)) + random.nextInt(100);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : 1 + random.nextInt(20), minItemsPerBlock, maxItemsPerBlock), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    int minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    int maxItemsPerBlock = 2*(Math.max(2, minItemsPerBlock-1)) + random.nextInt(100);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : 1 + random.nextInt(20), minItemsPerBlock, maxItemsPerBlock), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n    // give docvalues non-cfs testcoverage\n    swapCodec(new MockRandomDocValuesCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#installTestCodecs(String,CodecProvider).mjava","sourceNew":null,"sourceOld":"  // returns current default codec\n  static Codec installTestCodecs(String codec, CodecProvider cp) {\n    savedDefaultCodec = cp.getDefaultFieldCodec();\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"randomPerField\")) {\n      // lie\n      codec = \"Standard\";\n      codecHasParam = false;\n    } else if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(random);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    cp.setDefaultFieldCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec(), cp);\n    }\n\n    swapCodec(new MockSepCodec(), cp);\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    int minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    int maxItemsPerBlock = 2*(Math.max(2, minItemsPerBlock-1)) + random.nextInt(100);\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : 1 + random.nextInt(20), minItemsPerBlock, maxItemsPerBlock), cp);\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);\n    swapCodec(new MockRandomCodec(random), cp);\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["bc0b8069918917b33f361011899a1af0cdd2d462"],"7b91922b55d15444d554721b352861d028eb8278":["37f149c99eae8edb6c2f44fda36f194e0e345565"],"1291e4568eb7d9463d751627596ef14baf4c1603":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","bc0b8069918917b33f361011899a1af0cdd2d462"],"5f8d592a5e572553f95dd01f3e6875293829b375":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","bc0b8069918917b33f361011899a1af0cdd2d462"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"37f149c99eae8edb6c2f44fda36f194e0e345565":["5f8d592a5e572553f95dd01f3e6875293829b375"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bc0b8069918917b33f361011899a1af0cdd2d462":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["5f8d592a5e572553f95dd01f3e6875293829b375"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"5f8d592a5e572553f95dd01f3e6875293829b375":["37f149c99eae8edb6c2f44fda36f194e0e345565"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"37f149c99eae8edb6c2f44fda36f194e0e345565":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bc0b8069918917b33f361011899a1af0cdd2d462":["60ba444201d2570214b6fcf1d15600dc1a01f548","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","bc0b8069918917b33f361011899a1af0cdd2d462","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}