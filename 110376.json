{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","commits":[{"id":"13591e4b4b5e1616a7627989025ec3b20432357f","date":1506320416,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the cutoff angle for the circle.\n   *@param accuracy is the allowed error value.\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlanes = null;\n      this.eitherBounds = null;\n      this.edgePoints = new GeoPoint[0];\n      this.notableEdgePoints = null;\n    } else if (planetModel.c == planetModel.ab) {\n      // Sphere\n      this.eitherBounds = null;\n      this.circlePlanes = new ArrayList<>(1);\n      // Compute two points on the circle, with the right angle from the center.  We'll use these\n      // to obtain the perpendicular plane to the circle.\n      double upperLat = lat + cutoffAngle;\n      double upperLon = lon;\n      if (upperLat > Math.PI * 0.5) {\n        upperLon += Math.PI;\n        if (upperLon > Math.PI)\n          upperLon -= 2.0 * Math.PI;\n        upperLat = Math.PI - upperLat;\n      }\n      double lowerLat = lat - cutoffAngle;\n      double lowerLon = lon;\n      if (lowerLat < -Math.PI * 0.5) {\n        lowerLon += Math.PI;\n        if (lowerLon > Math.PI)\n          lowerLon -= 2.0 * Math.PI;\n        lowerLat = -Math.PI - lowerLat;\n      }\n      final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n      final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedZPlane(upperPoint, lowerPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      final SidedPlane circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new IllegalArgumentException(\"Couldn't construct circle plane, probably too small?  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      circlePlanes.add(circlePlane);\n      final GeoPoint recomputedIntersectionPoint = circlePlane.getSampleIntersectionPoint(planetModel, normalPlane);\n      if (recomputedIntersectionPoint == null)\n        throw new IllegalArgumentException(\"Couldn't construct intersection point, probably circle too small?  Plane = \"+circlePlane);\n      this.edgePoints = new GeoPoint[]{recomputedIntersectionPoint};\n      this.notableEdgePoints = null;\n    } else {\n      this.circlePlanes = new ArrayList<>();\n      this.notableEdgePoints = new ArrayList<>();\n      this.eitherBounds = new HashMap<>();\n      // We construct approximation planes until we have a low enough error estimate\n      final List<ApproximationSlice> slices = new ArrayList<>(100);\n      // Construct four cardinal points, and then we'll build the first two planes\n      final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n      final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n      final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n      final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n      \n      this.edgePoints = new GeoPoint[]{northPoint};\n      \n      if (planetModel.c > planetModel.ab) {\n        // z can be greater than x or y, so ellipse is longer in height than width\n        slices.add(new ApproximationSlice(center, eastPoint, 0.0, westPoint, Math.PI, northPoint, Math.PI * 0.5));\n        slices.add(new ApproximationSlice(center, westPoint, Math.PI, eastPoint, 0.0, southPoint, Math.PI * 1.5));\n      } else {\n        // z will be less than x or y, so ellipse is shorter than it is tall\n        slices.add(new ApproximationSlice(center, northPoint, Math.PI * 0.5, southPoint, Math.PI * 1.5, eastPoint, 0.0));\n        slices.add(new ApproximationSlice(center, southPoint, Math.PI * 1.5, northPoint, Math.PI * 0.5, westPoint, Math.PI));\n      }\n      \n      // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n      while (slices.size() > 0) {\n        // Peel off a slice from the back\n        final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n        // Assess it to see if it is OK as it is, or needs to be split.\n        // To do this, we need to look at the part of the circle that will have the greatest error.\n        // We will need to compute bearing points for these.\n        final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n        final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n        final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n        final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n        // Is this point on the plane? (that is, is the approximation good enough?)\n        if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n          // Good enough; add it to the list of planes\n          circlePlanes.add(thisSlice.plane);\n          notableEdgePoints.add(new GeoPoint[]{thisSlice.endPoint1, thisSlice.endPoint2});\n        } else {\n          // Split the plane into two, and add it back to the end\n          slices.add(new ApproximationSlice(center,\n            thisSlice.endPoint1, thisSlice.point1Bearing, \n            thisSlice.middlePoint, thisSlice.middlePointBearing, \n            interpPoint1, interpPoint1Bearing));\n          slices.add(new ApproximationSlice(center,\n            thisSlice.middlePoint, thisSlice.middlePointBearing,\n            thisSlice.endPoint2, thisSlice.point2Bearing,\n            interpPoint2, interpPoint2Bearing));\n        }\n      }\n\n      //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n      // Compute bounds\n      for (int i = 0; i < circlePlanes.size(); i++) {\n        final SidedPlane thisPlane = circlePlanes.get(i);\n        final SidedPlane previousPlane = (i == 0)?circlePlanes.get(circlePlanes.size()-1):circlePlanes.get(i-1);\n        final SidedPlane nextPlane = (i == circlePlanes.size()-1)?circlePlanes.get(0):circlePlanes.get(i+1);\n        eitherBounds.put(thisPlane, new EitherBound(previousPlane, nextPlane));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["862088d232b9b7b30d2d9b2b24aa81269df699ae","9c5af811fc387444c4a3b568755b76a85e4bc4fc","cc76ebd337c4abb76bfc84b9b9a0aedde8b02004"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e9eb4df1264e68ff787a31709b506e14e0cf30e","date":1506323209,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the cutoff angle for the circle.\n   *@param accuracy is the allowed error value.\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlanes = null;\n      this.eitherBounds = null;\n      this.edgePoints = new GeoPoint[0];\n      this.notableEdgePoints = null;\n    } else if (planetModel.c == planetModel.ab) {\n      // Sphere\n      this.eitherBounds = null;\n      this.circlePlanes = new ArrayList<>(1);\n      // Compute two points on the circle, with the right angle from the center.  We'll use these\n      // to obtain the perpendicular plane to the circle.\n      double upperLat = lat + cutoffAngle;\n      double upperLon = lon;\n      if (upperLat > Math.PI * 0.5) {\n        upperLon += Math.PI;\n        if (upperLon > Math.PI)\n          upperLon -= 2.0 * Math.PI;\n        upperLat = Math.PI - upperLat;\n      }\n      double lowerLat = lat - cutoffAngle;\n      double lowerLon = lon;\n      if (lowerLat < -Math.PI * 0.5) {\n        lowerLon += Math.PI;\n        if (lowerLon > Math.PI)\n          lowerLon -= 2.0 * Math.PI;\n        lowerLat = -Math.PI - lowerLat;\n      }\n      final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n      final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedZPlane(upperPoint, lowerPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      final SidedPlane circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new IllegalArgumentException(\"Couldn't construct circle plane, probably too small?  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      circlePlanes.add(circlePlane);\n      final GeoPoint recomputedIntersectionPoint = circlePlane.getSampleIntersectionPoint(planetModel, normalPlane);\n      if (recomputedIntersectionPoint == null)\n        throw new IllegalArgumentException(\"Couldn't construct intersection point, probably circle too small?  Plane = \"+circlePlane);\n      this.edgePoints = new GeoPoint[]{recomputedIntersectionPoint};\n      this.notableEdgePoints = null;\n    } else {\n      this.circlePlanes = new ArrayList<>();\n      this.notableEdgePoints = new ArrayList<>();\n      this.eitherBounds = new HashMap<>();\n      // We construct approximation planes until we have a low enough error estimate\n      final List<ApproximationSlice> slices = new ArrayList<>(100);\n      // Construct four cardinal points, and then we'll build the first two planes\n      final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n      final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n      final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n      final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n      \n      this.edgePoints = new GeoPoint[]{northPoint};\n      \n      if (planetModel.c > planetModel.ab) {\n        // z can be greater than x or y, so ellipse is longer in height than width\n        slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n        slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      } else {\n        // z will be less than x or y, so ellipse is shorter than it is tall\n        slices.add(new ApproximationSlice(center, northPoint, Math.PI * 2.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n        slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, 0.0, westPoint, Math.PI * 1.5));\n      }\n      \n      // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n      while (slices.size() > 0) {\n        // Peel off a slice from the back\n        final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n        // Assess it to see if it is OK as it is, or needs to be split.\n        // To do this, we need to look at the part of the circle that will have the greatest error.\n        // We will need to compute bearing points for these.\n        final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n        final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n        final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n        final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n        // Is this point on the plane? (that is, is the approximation good enough?)\n        if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n          // Good enough; add it to the list of planes\n          circlePlanes.add(thisSlice.plane);\n          notableEdgePoints.add(new GeoPoint[]{thisSlice.endPoint1, thisSlice.endPoint2});\n        } else {\n          // Split the plane into two, and add it back to the end\n          slices.add(new ApproximationSlice(center,\n            thisSlice.endPoint1, thisSlice.point1Bearing, \n            thisSlice.middlePoint, thisSlice.middlePointBearing, \n            interpPoint1, interpPoint1Bearing));\n          slices.add(new ApproximationSlice(center,\n            thisSlice.middlePoint, thisSlice.middlePointBearing,\n            thisSlice.endPoint2, thisSlice.point2Bearing,\n            interpPoint2, interpPoint2Bearing));\n        }\n      }\n\n      //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n      // Compute bounds\n      for (int i = 0; i < circlePlanes.size(); i++) {\n        final SidedPlane thisPlane = circlePlanes.get(i);\n        final SidedPlane previousPlane = (i == 0)?circlePlanes.get(circlePlanes.size()-1):circlePlanes.get(i-1);\n        final SidedPlane nextPlane = (i == circlePlanes.size()-1)?circlePlanes.get(0):circlePlanes.get(i+1);\n        eitherBounds.put(thisPlane, new EitherBound(previousPlane, nextPlane));\n      }\n    }\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the cutoff angle for the circle.\n   *@param accuracy is the allowed error value.\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlanes = null;\n      this.eitherBounds = null;\n      this.edgePoints = new GeoPoint[0];\n      this.notableEdgePoints = null;\n    } else if (planetModel.c == planetModel.ab) {\n      // Sphere\n      this.eitherBounds = null;\n      this.circlePlanes = new ArrayList<>(1);\n      // Compute two points on the circle, with the right angle from the center.  We'll use these\n      // to obtain the perpendicular plane to the circle.\n      double upperLat = lat + cutoffAngle;\n      double upperLon = lon;\n      if (upperLat > Math.PI * 0.5) {\n        upperLon += Math.PI;\n        if (upperLon > Math.PI)\n          upperLon -= 2.0 * Math.PI;\n        upperLat = Math.PI - upperLat;\n      }\n      double lowerLat = lat - cutoffAngle;\n      double lowerLon = lon;\n      if (lowerLat < -Math.PI * 0.5) {\n        lowerLon += Math.PI;\n        if (lowerLon > Math.PI)\n          lowerLon -= 2.0 * Math.PI;\n        lowerLat = -Math.PI - lowerLat;\n      }\n      final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n      final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedZPlane(upperPoint, lowerPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      final SidedPlane circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new IllegalArgumentException(\"Couldn't construct circle plane, probably too small?  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      circlePlanes.add(circlePlane);\n      final GeoPoint recomputedIntersectionPoint = circlePlane.getSampleIntersectionPoint(planetModel, normalPlane);\n      if (recomputedIntersectionPoint == null)\n        throw new IllegalArgumentException(\"Couldn't construct intersection point, probably circle too small?  Plane = \"+circlePlane);\n      this.edgePoints = new GeoPoint[]{recomputedIntersectionPoint};\n      this.notableEdgePoints = null;\n    } else {\n      this.circlePlanes = new ArrayList<>();\n      this.notableEdgePoints = new ArrayList<>();\n      this.eitherBounds = new HashMap<>();\n      // We construct approximation planes until we have a low enough error estimate\n      final List<ApproximationSlice> slices = new ArrayList<>(100);\n      // Construct four cardinal points, and then we'll build the first two planes\n      final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n      final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n      final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n      final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n      \n      this.edgePoints = new GeoPoint[]{northPoint};\n      \n      if (planetModel.c > planetModel.ab) {\n        // z can be greater than x or y, so ellipse is longer in height than width\n        slices.add(new ApproximationSlice(center, eastPoint, 0.0, westPoint, Math.PI, northPoint, Math.PI * 0.5));\n        slices.add(new ApproximationSlice(center, westPoint, Math.PI, eastPoint, 0.0, southPoint, Math.PI * 1.5));\n      } else {\n        // z will be less than x or y, so ellipse is shorter than it is tall\n        slices.add(new ApproximationSlice(center, northPoint, Math.PI * 0.5, southPoint, Math.PI * 1.5, eastPoint, 0.0));\n        slices.add(new ApproximationSlice(center, southPoint, Math.PI * 1.5, northPoint, Math.PI * 0.5, westPoint, Math.PI));\n      }\n      \n      // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n      while (slices.size() > 0) {\n        // Peel off a slice from the back\n        final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n        // Assess it to see if it is OK as it is, or needs to be split.\n        // To do this, we need to look at the part of the circle that will have the greatest error.\n        // We will need to compute bearing points for these.\n        final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n        final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n        final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n        final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n        // Is this point on the plane? (that is, is the approximation good enough?)\n        if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n          // Good enough; add it to the list of planes\n          circlePlanes.add(thisSlice.plane);\n          notableEdgePoints.add(new GeoPoint[]{thisSlice.endPoint1, thisSlice.endPoint2});\n        } else {\n          // Split the plane into two, and add it back to the end\n          slices.add(new ApproximationSlice(center,\n            thisSlice.endPoint1, thisSlice.point1Bearing, \n            thisSlice.middlePoint, thisSlice.middlePointBearing, \n            interpPoint1, interpPoint1Bearing));\n          slices.add(new ApproximationSlice(center,\n            thisSlice.middlePoint, thisSlice.middlePointBearing,\n            thisSlice.endPoint2, thisSlice.point2Bearing,\n            interpPoint2, interpPoint2Bearing));\n        }\n      }\n\n      //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n      // Compute bounds\n      for (int i = 0; i < circlePlanes.size(); i++) {\n        final SidedPlane thisPlane = circlePlanes.get(i);\n        final SidedPlane previousPlane = (i == 0)?circlePlanes.get(circlePlanes.size()-1):circlePlanes.get(i-1);\n        final SidedPlane nextPlane = (i == circlePlanes.size()-1)?circlePlanes.get(0):circlePlanes.get(i+1);\n        eitherBounds.put(thisPlane, new EitherBound(previousPlane, nextPlane));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57949146f783e88ab890543a6aaf173c6a34efdb","date":1506410432,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the cutoff angle for the circle.\n   *@param accuracy is the allowed error value.\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlanes = null;\n      this.eitherBounds = null;\n      this.edgePoints = new GeoPoint[0];\n      this.notableEdgePoints = null;\n    } else if (planetModel.c == planetModel.ab) {\n      // Sphere\n      this.eitherBounds = null;\n      this.circlePlanes = new ArrayList<>(1);\n      // Compute two points on the circle, with the right angle from the center.  We'll use these\n      // to obtain the perpendicular plane to the circle.\n      double upperLat = lat + cutoffAngle;\n      double upperLon = lon;\n      if (upperLat > Math.PI * 0.5) {\n        upperLon += Math.PI;\n        if (upperLon > Math.PI)\n          upperLon -= 2.0 * Math.PI;\n        upperLat = Math.PI - upperLat;\n      }\n      double lowerLat = lat - cutoffAngle;\n      double lowerLon = lon;\n      if (lowerLat < -Math.PI * 0.5) {\n        lowerLon += Math.PI;\n        if (lowerLon > Math.PI)\n          lowerLon -= 2.0 * Math.PI;\n        lowerLat = -Math.PI - lowerLat;\n      }\n      final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n      final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedZPlane(upperPoint, lowerPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      final SidedPlane circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new IllegalArgumentException(\"Couldn't construct circle plane, probably too small?  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      circlePlanes.add(circlePlane);\n      final GeoPoint recomputedIntersectionPoint = circlePlane.getSampleIntersectionPoint(planetModel, normalPlane);\n      if (recomputedIntersectionPoint == null)\n        throw new IllegalArgumentException(\"Couldn't construct intersection point, probably circle too small?  Plane = \"+circlePlane);\n      this.edgePoints = new GeoPoint[]{recomputedIntersectionPoint};\n      this.notableEdgePoints = null;\n    } else {\n      this.circlePlanes = new ArrayList<>();\n      // If it turns out that there's only one circle plane, this array will be populated but unused\n      final List<GeoPoint[]> notableEdgePoints = new ArrayList<>();\n      \n      // We construct approximation planes until we have a low enough error estimate\n      final List<ApproximationSlice> slices = new ArrayList<>(100);\n      // Construct four cardinal points, and then we'll build the first two planes\n      final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n      final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n      final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n      final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n      \n      this.edgePoints = new GeoPoint[]{northPoint};\n      \n      if (planetModel.c > planetModel.ab) {\n        // z can be greater than x or y, so ellipse is longer in height than width\n        slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n        slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      } else {\n        // z will be less than x or y, so ellipse is shorter than it is tall\n        slices.add(new ApproximationSlice(center, northPoint, Math.PI * 2.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n        slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, 0.0, westPoint, Math.PI * 1.5));\n      }\n      \n      // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n      while (slices.size() > 0) {\n        // Peel off a slice from the back\n        final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n        // Assess it to see if it is OK as it is, or needs to be split.\n        // To do this, we need to look at the part of the circle that will have the greatest error.\n        // We will need to compute bearing points for these.\n        final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n        final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n        final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n        final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n        // Is this point on the plane? (that is, is the approximation good enough?)\n        if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n          // Good enough; add it to the list of planes, unless it was identical to the previous plane\n          if (circlePlanes.size() == 0 || !circlePlanes.get(circlePlanes.size()-1).isNumericallyIdentical(thisSlice.plane)) {\n            circlePlanes.add(thisSlice.plane);\n            notableEdgePoints.add(new GeoPoint[]{thisSlice.endPoint1, thisSlice.endPoint2});\n          }\n        } else {\n          // Split the plane into two, and add it back to the end\n          slices.add(new ApproximationSlice(center,\n            thisSlice.endPoint1, thisSlice.point1Bearing, \n            thisSlice.middlePoint, thisSlice.middlePointBearing, \n            interpPoint1, interpPoint1Bearing));\n          slices.add(new ApproximationSlice(center,\n            thisSlice.middlePoint, thisSlice.middlePointBearing,\n            thisSlice.endPoint2, thisSlice.point2Bearing,\n            interpPoint2, interpPoint2Bearing));\n        }\n      }\n\n      //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n      // Compute bounds\n      if (circlePlanes.size() == 1) {\n        this.eitherBounds = null;\n        this.notableEdgePoints = null;\n      } else {\n        this.notableEdgePoints = notableEdgePoints;\n        this.eitherBounds = new HashMap<>(circlePlanes.size());\n        for (int i = 0; i < circlePlanes.size(); i++) {\n          final SidedPlane thisPlane = circlePlanes.get(i);\n          final SidedPlane previousPlane = (i == 0)?circlePlanes.get(circlePlanes.size()-1):circlePlanes.get(i-1);\n          final SidedPlane nextPlane = (i == circlePlanes.size()-1)?circlePlanes.get(0):circlePlanes.get(i+1);\n          eitherBounds.put(thisPlane, new EitherBound(previousPlane, nextPlane));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the cutoff angle for the circle.\n   *@param accuracy is the allowed error value.\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlanes = null;\n      this.eitherBounds = null;\n      this.edgePoints = new GeoPoint[0];\n      this.notableEdgePoints = null;\n    } else if (planetModel.c == planetModel.ab) {\n      // Sphere\n      this.eitherBounds = null;\n      this.circlePlanes = new ArrayList<>(1);\n      // Compute two points on the circle, with the right angle from the center.  We'll use these\n      // to obtain the perpendicular plane to the circle.\n      double upperLat = lat + cutoffAngle;\n      double upperLon = lon;\n      if (upperLat > Math.PI * 0.5) {\n        upperLon += Math.PI;\n        if (upperLon > Math.PI)\n          upperLon -= 2.0 * Math.PI;\n        upperLat = Math.PI - upperLat;\n      }\n      double lowerLat = lat - cutoffAngle;\n      double lowerLon = lon;\n      if (lowerLat < -Math.PI * 0.5) {\n        lowerLon += Math.PI;\n        if (lowerLon > Math.PI)\n          lowerLon -= 2.0 * Math.PI;\n        lowerLat = -Math.PI - lowerLat;\n      }\n      final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n      final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedZPlane(upperPoint, lowerPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      final SidedPlane circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new IllegalArgumentException(\"Couldn't construct circle plane, probably too small?  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      circlePlanes.add(circlePlane);\n      final GeoPoint recomputedIntersectionPoint = circlePlane.getSampleIntersectionPoint(planetModel, normalPlane);\n      if (recomputedIntersectionPoint == null)\n        throw new IllegalArgumentException(\"Couldn't construct intersection point, probably circle too small?  Plane = \"+circlePlane);\n      this.edgePoints = new GeoPoint[]{recomputedIntersectionPoint};\n      this.notableEdgePoints = null;\n    } else {\n      this.circlePlanes = new ArrayList<>();\n      this.notableEdgePoints = new ArrayList<>();\n      this.eitherBounds = new HashMap<>();\n      // We construct approximation planes until we have a low enough error estimate\n      final List<ApproximationSlice> slices = new ArrayList<>(100);\n      // Construct four cardinal points, and then we'll build the first two planes\n      final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n      final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n      final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n      final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n      \n      this.edgePoints = new GeoPoint[]{northPoint};\n      \n      if (planetModel.c > planetModel.ab) {\n        // z can be greater than x or y, so ellipse is longer in height than width\n        slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n        slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      } else {\n        // z will be less than x or y, so ellipse is shorter than it is tall\n        slices.add(new ApproximationSlice(center, northPoint, Math.PI * 2.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n        slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, 0.0, westPoint, Math.PI * 1.5));\n      }\n      \n      // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n      while (slices.size() > 0) {\n        // Peel off a slice from the back\n        final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n        // Assess it to see if it is OK as it is, or needs to be split.\n        // To do this, we need to look at the part of the circle that will have the greatest error.\n        // We will need to compute bearing points for these.\n        final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n        final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n        final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n        final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n        // Is this point on the plane? (that is, is the approximation good enough?)\n        if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n          // Good enough; add it to the list of planes\n          circlePlanes.add(thisSlice.plane);\n          notableEdgePoints.add(new GeoPoint[]{thisSlice.endPoint1, thisSlice.endPoint2});\n        } else {\n          // Split the plane into two, and add it back to the end\n          slices.add(new ApproximationSlice(center,\n            thisSlice.endPoint1, thisSlice.point1Bearing, \n            thisSlice.middlePoint, thisSlice.middlePointBearing, \n            interpPoint1, interpPoint1Bearing));\n          slices.add(new ApproximationSlice(center,\n            thisSlice.middlePoint, thisSlice.middlePointBearing,\n            thisSlice.endPoint2, thisSlice.point2Bearing,\n            interpPoint2, interpPoint2Bearing));\n        }\n      }\n\n      //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n      // Compute bounds\n      for (int i = 0; i < circlePlanes.size(); i++) {\n        final SidedPlane thisPlane = circlePlanes.get(i);\n        final SidedPlane previousPlane = (i == 0)?circlePlanes.get(circlePlanes.size()-1):circlePlanes.get(i-1);\n        final SidedPlane nextPlane = (i == circlePlanes.size()-1)?circlePlanes.get(0):circlePlanes.get(i+1);\n        eitherBounds.put(thisPlane, new EitherBound(previousPlane, nextPlane));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2252ea609db951d15af4430bee806a8d09fd8d6d","date":1506501078,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // Since the provide cutoff angle is really a surface distance, we need to use the point-on-bearing even for spheres.\n    final List<SidedPlane> circlePlanes = new ArrayList<>();\n    // If it turns out that there's only one circle plane, this array will be populated but unused\n    final List<GeoPoint[]> notableEdgePoints = new ArrayList<>();\n      \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n      \n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, Math.PI * 2.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, 0.0, westPoint, Math.PI * 1.5));\n    }\n      \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        // Good enough; add it to the list of planes, unless it was identical to the previous plane\n        if (circlePlanes.size() == 0 || !circlePlanes.get(circlePlanes.size()-1).isNumericallyIdentical(thisSlice.plane)) {\n          circlePlanes.add(thisSlice.plane);\n          notableEdgePoints.add(new GeoPoint[]{thisSlice.endPoint1, thisSlice.endPoint2});\n        }\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n\n    //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n    this.edgePoints = new GeoPoint[]{northPoint};      \n    this.circlePlanes = circlePlanes;\n    // Compute bounds\n    if (circlePlanes.size() == 1) {\n      this.eitherBounds = null;\n      this.notableEdgePoints = null;\n    } else {\n      this.notableEdgePoints = notableEdgePoints;\n      this.eitherBounds = new HashMap<>(circlePlanes.size());\n      for (int i = 0; i < circlePlanes.size(); i++) {\n        final SidedPlane thisPlane = circlePlanes.get(i);\n        final SidedPlane previousPlane = (i == 0)?circlePlanes.get(circlePlanes.size()-1):circlePlanes.get(i-1);\n        final SidedPlane nextPlane = (i == circlePlanes.size()-1)?circlePlanes.get(0):circlePlanes.get(i+1);\n        eitherBounds.put(thisPlane, new EitherBound(previousPlane, nextPlane));\n      }\n    }\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the cutoff angle for the circle.\n   *@param accuracy is the allowed error value.\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlanes = null;\n      this.eitherBounds = null;\n      this.edgePoints = new GeoPoint[0];\n      this.notableEdgePoints = null;\n    } else if (planetModel.c == planetModel.ab) {\n      // Sphere\n      this.eitherBounds = null;\n      this.circlePlanes = new ArrayList<>(1);\n      // Compute two points on the circle, with the right angle from the center.  We'll use these\n      // to obtain the perpendicular plane to the circle.\n      double upperLat = lat + cutoffAngle;\n      double upperLon = lon;\n      if (upperLat > Math.PI * 0.5) {\n        upperLon += Math.PI;\n        if (upperLon > Math.PI)\n          upperLon -= 2.0 * Math.PI;\n        upperLat = Math.PI - upperLat;\n      }\n      double lowerLat = lat - cutoffAngle;\n      double lowerLon = lon;\n      if (lowerLat < -Math.PI * 0.5) {\n        lowerLon += Math.PI;\n        if (lowerLon > Math.PI)\n          lowerLon -= 2.0 * Math.PI;\n        lowerLat = -Math.PI - lowerLat;\n      }\n      final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n      final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedZPlane(upperPoint, lowerPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      final SidedPlane circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new IllegalArgumentException(\"Couldn't construct circle plane, probably too small?  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      circlePlanes.add(circlePlane);\n      final GeoPoint recomputedIntersectionPoint = circlePlane.getSampleIntersectionPoint(planetModel, normalPlane);\n      if (recomputedIntersectionPoint == null)\n        throw new IllegalArgumentException(\"Couldn't construct intersection point, probably circle too small?  Plane = \"+circlePlane);\n      this.edgePoints = new GeoPoint[]{recomputedIntersectionPoint};\n      this.notableEdgePoints = null;\n    } else {\n      this.circlePlanes = new ArrayList<>();\n      // If it turns out that there's only one circle plane, this array will be populated but unused\n      final List<GeoPoint[]> notableEdgePoints = new ArrayList<>();\n      \n      // We construct approximation planes until we have a low enough error estimate\n      final List<ApproximationSlice> slices = new ArrayList<>(100);\n      // Construct four cardinal points, and then we'll build the first two planes\n      final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n      final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n      final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n      final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n      \n      this.edgePoints = new GeoPoint[]{northPoint};\n      \n      if (planetModel.c > planetModel.ab) {\n        // z can be greater than x or y, so ellipse is longer in height than width\n        slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n        slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      } else {\n        // z will be less than x or y, so ellipse is shorter than it is tall\n        slices.add(new ApproximationSlice(center, northPoint, Math.PI * 2.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n        slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, 0.0, westPoint, Math.PI * 1.5));\n      }\n      \n      // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n      while (slices.size() > 0) {\n        // Peel off a slice from the back\n        final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n        // Assess it to see if it is OK as it is, or needs to be split.\n        // To do this, we need to look at the part of the circle that will have the greatest error.\n        // We will need to compute bearing points for these.\n        final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n        final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n        final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n        final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n        // Is this point on the plane? (that is, is the approximation good enough?)\n        if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n          // Good enough; add it to the list of planes, unless it was identical to the previous plane\n          if (circlePlanes.size() == 0 || !circlePlanes.get(circlePlanes.size()-1).isNumericallyIdentical(thisSlice.plane)) {\n            circlePlanes.add(thisSlice.plane);\n            notableEdgePoints.add(new GeoPoint[]{thisSlice.endPoint1, thisSlice.endPoint2});\n          }\n        } else {\n          // Split the plane into two, and add it back to the end\n          slices.add(new ApproximationSlice(center,\n            thisSlice.endPoint1, thisSlice.point1Bearing, \n            thisSlice.middlePoint, thisSlice.middlePointBearing, \n            interpPoint1, interpPoint1Bearing));\n          slices.add(new ApproximationSlice(center,\n            thisSlice.middlePoint, thisSlice.middlePointBearing,\n            thisSlice.endPoint2, thisSlice.point2Bearing,\n            interpPoint2, interpPoint2Bearing));\n        }\n      }\n\n      //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n      // Compute bounds\n      if (circlePlanes.size() == 1) {\n        this.eitherBounds = null;\n        this.notableEdgePoints = null;\n      } else {\n        this.notableEdgePoints = notableEdgePoints;\n        this.eitherBounds = new HashMap<>(circlePlanes.size());\n        for (int i = 0; i < circlePlanes.size(); i++) {\n          final SidedPlane thisPlane = circlePlanes.get(i);\n          final SidedPlane previousPlane = (i == 0)?circlePlanes.get(circlePlanes.size()-1):circlePlanes.get(i-1);\n          final SidedPlane nextPlane = (i == circlePlanes.size()-1)?circlePlanes.get(0):circlePlanes.get(i+1);\n          eitherBounds.put(thisPlane, new EitherBound(previousPlane, nextPlane));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["75a9b5446751df93faf9a552cbffb19794a59a89","862088d232b9b7b30d2d9b2b24aa81269df699ae","9c5af811fc387444c4a3b568755b76a85e4bc4fc","cc76ebd337c4abb76bfc84b9b9a0aedde8b02004"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbc601783e295e23f0d0015b9efbdb6f2fed5c0f","date":1506501668,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // Since the provide cutoff angle is really a surface distance, we need to use the point-on-bearing even for spheres.\n    final List<SidedPlane> circlePlanes = new ArrayList<>();\n    // If it turns out that there's only one circle plane, this array will be populated but unused\n    final List<GeoPoint[]> notableEdgePoints = new ArrayList<>();\n      \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n      \n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, Math.PI * 2.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, 0.0, westPoint, Math.PI * 1.5));\n    }\n      \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        // Good enough; add it to the list of planes, unless it was identical to the previous plane\n        if (circlePlanes.size() == 0 || !circlePlanes.get(circlePlanes.size()-1).isNumericallyIdentical(thisSlice.plane)) {\n          circlePlanes.add(thisSlice.plane);\n          notableEdgePoints.add(new GeoPoint[]{thisSlice.endPoint1, thisSlice.endPoint2});\n        }\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n\n    //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n    this.edgePoints = new GeoPoint[]{northPoint};      \n    this.circlePlanes = circlePlanes;\n    // Compute bounds\n    if (circlePlanes.size() == 1) {\n      this.eitherBounds = null;\n      this.notableEdgePoints = null;\n    } else {\n      this.notableEdgePoints = notableEdgePoints;\n      this.eitherBounds = new HashMap<>(circlePlanes.size());\n      for (int i = 0; i < circlePlanes.size(); i++) {\n        final SidedPlane thisPlane = circlePlanes.get(i);\n        final SidedPlane previousPlane = (i == 0)?circlePlanes.get(circlePlanes.size()-1):circlePlanes.get(i-1);\n        final SidedPlane nextPlane = (i == circlePlanes.size()-1)?circlePlanes.get(0):circlePlanes.get(i+1);\n        eitherBounds.put(thisPlane, new EitherBound(previousPlane, nextPlane));\n      }\n    }\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // Since the provide cutoff angle is really a surface distance, we need to use the point-on-bearing even for spheres.\n    final List<SidedPlane> circlePlanes = new ArrayList<>();\n    // If it turns out that there's only one circle plane, this array will be populated but unused\n    final List<GeoPoint[]> notableEdgePoints = new ArrayList<>();\n      \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n      \n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, Math.PI * 2.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, 0.0, westPoint, Math.PI * 1.5));\n    }\n      \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        // Good enough; add it to the list of planes, unless it was identical to the previous plane\n        if (circlePlanes.size() == 0 || !circlePlanes.get(circlePlanes.size()-1).isNumericallyIdentical(thisSlice.plane)) {\n          circlePlanes.add(thisSlice.plane);\n          notableEdgePoints.add(new GeoPoint[]{thisSlice.endPoint1, thisSlice.endPoint2});\n        }\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n\n    //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n    this.edgePoints = new GeoPoint[]{northPoint};      \n    this.circlePlanes = circlePlanes;\n    // Compute bounds\n    if (circlePlanes.size() == 1) {\n      this.eitherBounds = null;\n      this.notableEdgePoints = null;\n    } else {\n      this.notableEdgePoints = notableEdgePoints;\n      this.eitherBounds = new HashMap<>(circlePlanes.size());\n      for (int i = 0; i < circlePlanes.size(); i++) {\n        final SidedPlane thisPlane = circlePlanes.get(i);\n        final SidedPlane previousPlane = (i == 0)?circlePlanes.get(circlePlanes.size()-1):circlePlanes.get(i-1);\n        final SidedPlane nextPlane = (i == circlePlanes.size()-1)?circlePlanes.get(0):circlePlanes.get(i+1);\n        eitherBounds.put(thisPlane, new EitherBound(previousPlane, nextPlane));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // Since the provide cutoff angle is really a surface distance, we need to use the point-on-bearing even for spheres.\n    final List<SidedPlane> circlePlanes = new ArrayList<>();\n    // If it turns out that there's only one circle plane, this array will be populated but unused\n    final List<GeoPoint[]> notableEdgePoints = new ArrayList<>();\n      \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n      \n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, Math.PI * 2.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, 0.0, westPoint, Math.PI * 1.5));\n    }\n      \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        // Good enough; add it to the list of planes, unless it was identical to the previous plane\n        if (circlePlanes.size() == 0 || !circlePlanes.get(circlePlanes.size()-1).isNumericallyIdentical(thisSlice.plane)) {\n          circlePlanes.add(thisSlice.plane);\n          notableEdgePoints.add(new GeoPoint[]{thisSlice.endPoint1, thisSlice.endPoint2});\n        }\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n\n    //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n    this.edgePoints = new GeoPoint[]{northPoint};      \n    this.circlePlanes = circlePlanes;\n    // Compute bounds\n    if (circlePlanes.size() == 1) {\n      this.eitherBounds = null;\n      this.notableEdgePoints = null;\n    } else {\n      this.notableEdgePoints = notableEdgePoints;\n      this.eitherBounds = new HashMap<>(circlePlanes.size());\n      for (int i = 0; i < circlePlanes.size(); i++) {\n        final SidedPlane thisPlane = circlePlanes.get(i);\n        final SidedPlane previousPlane = (i == 0)?circlePlanes.get(circlePlanes.size()-1):circlePlanes.get(i-1);\n        final SidedPlane nextPlane = (i == circlePlanes.size()-1)?circlePlanes.get(0):circlePlanes.get(i+1);\n        eitherBounds.put(thisPlane, new EitherBound(previousPlane, nextPlane));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"862088d232b9b7b30d2d9b2b24aa81269df699ae","date":1509633820,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    // We cannot allow exact circles to be large enough so that planes intersect at greater than 180 degrees.  This guarantees it.\n    if (cutoffAngle > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    \n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // Since the provide cutoff angle is really a surface distance, we need to use the point-on-bearing even for spheres.\n    final List<SidedPlane> circlePlanes = new ArrayList<>();\n    // If it turns out that there's only one circle plane, this array will be populated but unused\n    final List<GeoPoint[]> notableEdgePoints = new ArrayList<>();\n      \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n    \n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, Math.PI * 2.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, 0.0, westPoint, Math.PI * 1.5));\n      edgePoint = northPoint;\n    }\n      \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        // Good enough; add it to the list of planes, unless it was identical to the previous plane\n        if (circlePlanes.size() == 0 || !circlePlanes.get(circlePlanes.size()-1).isNumericallyIdentical(thisSlice.plane)) {\n          circlePlanes.add(thisSlice.plane);\n          notableEdgePoints.add(new GeoPoint[]{thisSlice.endPoint1, thisSlice.endPoint2});\n        }\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n\n    //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n    this.edgePoints = new GeoPoint[]{edgePoint};      \n    this.circlePlanes = circlePlanes;\n    // Compute bounds\n    if (circlePlanes.size() == 1) {\n      this.eitherBounds = null;\n      this.notableEdgePoints = null;\n    } else {\n      this.notableEdgePoints = notableEdgePoints;\n      this.eitherBounds = new HashMap<>(circlePlanes.size());\n      for (int i = 0; i < circlePlanes.size(); i++) {\n        final SidedPlane thisPlane = circlePlanes.get(i);\n        final SidedPlane previousPlane = (i == 0)?circlePlanes.get(circlePlanes.size()-1):circlePlanes.get(i-1);\n        final SidedPlane nextPlane = (i == circlePlanes.size()-1)?circlePlanes.get(0):circlePlanes.get(i+1);\n        eitherBounds.put(thisPlane, new EitherBound(previousPlane, nextPlane));\n      }\n    }\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // Since the provide cutoff angle is really a surface distance, we need to use the point-on-bearing even for spheres.\n    final List<SidedPlane> circlePlanes = new ArrayList<>();\n    // If it turns out that there's only one circle plane, this array will be populated but unused\n    final List<GeoPoint[]> notableEdgePoints = new ArrayList<>();\n      \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n      \n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, Math.PI * 2.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, 0.0, westPoint, Math.PI * 1.5));\n    }\n      \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        // Good enough; add it to the list of planes, unless it was identical to the previous plane\n        if (circlePlanes.size() == 0 || !circlePlanes.get(circlePlanes.size()-1).isNumericallyIdentical(thisSlice.plane)) {\n          circlePlanes.add(thisSlice.plane);\n          notableEdgePoints.add(new GeoPoint[]{thisSlice.endPoint1, thisSlice.endPoint2});\n        }\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n\n    //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n    this.edgePoints = new GeoPoint[]{northPoint};      \n    this.circlePlanes = circlePlanes;\n    // Compute bounds\n    if (circlePlanes.size() == 1) {\n      this.eitherBounds = null;\n      this.notableEdgePoints = null;\n    } else {\n      this.notableEdgePoints = notableEdgePoints;\n      this.eitherBounds = new HashMap<>(circlePlanes.size());\n      for (int i = 0; i < circlePlanes.size(); i++) {\n        final SidedPlane thisPlane = circlePlanes.get(i);\n        final SidedPlane previousPlane = (i == 0)?circlePlanes.get(circlePlanes.size()-1):circlePlanes.get(i-1);\n        final SidedPlane nextPlane = (i == circlePlanes.size()-1)?circlePlanes.get(0):circlePlanes.get(i+1);\n        eitherBounds.put(thisPlane, new EitherBound(previousPlane, nextPlane));\n      }\n    }\n  }\n\n","bugFix":["13591e4b4b5e1616a7627989025ec3b20432357f","2252ea609db951d15af4430bee806a8d09fd8d6d"],"bugIntro":["fc92e5b26b68a4009f0e63747e9b61f1e2da8ac2","9c5af811fc387444c4a3b568755b76a85e4bc4fc","cc76ebd337c4abb76bfc84b9b9a0aedde8b02004"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"990b9bc5bbe516d4b59387c4ca5341eab01c5df1","date":1511258351,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    // We cannot allow exact circles to be large enough so that planes intersect at greater than 180 degrees.  This guarantees it.\n    if (cutoffAngle > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    \n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // Since the provide cutoff angle is really a surface distance, we need to use the point-on-bearing even for spheres.\n    final List<SidedPlane> circlePlanes = new ArrayList<>();\n    // If it turns out that there's only one circle plane, this array will be populated but unused\n    final List<GeoPoint[]> notableEdgePoints = new ArrayList<>();\n      \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n    \n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5));\n      edgePoint = northPoint;\n    }\n      \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        // Good enough; add it to the list of planes, unless it was identical to the previous plane\n        if (circlePlanes.size() == 0 || !circlePlanes.get(circlePlanes.size()-1).isNumericallyIdentical(thisSlice.plane)) {\n          circlePlanes.add(thisSlice.plane);\n          notableEdgePoints.add(new GeoPoint[]{thisSlice.endPoint1, thisSlice.endPoint2});\n        }\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n\n    //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n    this.edgePoints = new GeoPoint[]{edgePoint};      \n    this.circlePlanes = circlePlanes;\n    // Compute bounds\n    if (circlePlanes.size() == 1) {\n      this.eitherBounds = null;\n      this.notableEdgePoints = null;\n    } else {\n      this.notableEdgePoints = notableEdgePoints;\n      this.eitherBounds = new HashMap<>(circlePlanes.size());\n      for (int i = 0; i < circlePlanes.size(); i++) {\n        final SidedPlane thisPlane = circlePlanes.get(i);\n        final SidedPlane previousPlane = (i == 0)?circlePlanes.get(circlePlanes.size()-1):circlePlanes.get(i-1);\n        final SidedPlane nextPlane = (i == circlePlanes.size()-1)?circlePlanes.get(0):circlePlanes.get(i+1);\n        eitherBounds.put(thisPlane, new EitherBound(previousPlane, nextPlane));\n      }\n    }\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    // We cannot allow exact circles to be large enough so that planes intersect at greater than 180 degrees.  This guarantees it.\n    if (cutoffAngle > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    \n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // Since the provide cutoff angle is really a surface distance, we need to use the point-on-bearing even for spheres.\n    final List<SidedPlane> circlePlanes = new ArrayList<>();\n    // If it turns out that there's only one circle plane, this array will be populated but unused\n    final List<GeoPoint[]> notableEdgePoints = new ArrayList<>();\n      \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n    \n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, Math.PI * 2.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, 0.0, westPoint, Math.PI * 1.5));\n      edgePoint = northPoint;\n    }\n      \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        // Good enough; add it to the list of planes, unless it was identical to the previous plane\n        if (circlePlanes.size() == 0 || !circlePlanes.get(circlePlanes.size()-1).isNumericallyIdentical(thisSlice.plane)) {\n          circlePlanes.add(thisSlice.plane);\n          notableEdgePoints.add(new GeoPoint[]{thisSlice.endPoint1, thisSlice.endPoint2});\n        }\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n\n    //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n    this.edgePoints = new GeoPoint[]{edgePoint};      \n    this.circlePlanes = circlePlanes;\n    // Compute bounds\n    if (circlePlanes.size() == 1) {\n      this.eitherBounds = null;\n      this.notableEdgePoints = null;\n    } else {\n      this.notableEdgePoints = notableEdgePoints;\n      this.eitherBounds = new HashMap<>(circlePlanes.size());\n      for (int i = 0; i < circlePlanes.size(); i++) {\n        final SidedPlane thisPlane = circlePlanes.get(i);\n        final SidedPlane previousPlane = (i == 0)?circlePlanes.get(circlePlanes.size()-1):circlePlanes.get(i-1);\n        final SidedPlane nextPlane = (i == circlePlanes.size()-1)?circlePlanes.get(0):circlePlanes.get(i+1);\n        eitherBounds.put(thisPlane, new EitherBound(previousPlane, nextPlane));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9c5af811fc387444c4a3b568755b76a85e4bc4fc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75a9b5446751df93faf9a552cbffb19794a59a89","date":1511305520,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    // We cannot allow exact circles to be large enough so that planes intersect at greater than 180 degrees.  This guarantees it.\n    if (cutoffAngle > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    \n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n    \n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5));\n      edgePoint = northPoint;\n    }\n    //System.out.println(\"Edgepoint = \" + edgePoint);\n    \n    final List<PlaneDescription> activeSlices = new ArrayList<>();\n    \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      \n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        if (activeSlices.size() == 0 || !activeSlices.get(activeSlices.size()-1).plane.isNumericallyIdentical(thisSlice.plane)) {\n          activeSlices.add(new PlaneDescription(thisSlice.plane, thisSlice.endPoint1, thisSlice.endPoint2, thisSlice.middlePoint));\n          //System.out.println(\"Point1 bearing = \"+thisSlice.point1Bearing);\n        } else if (activeSlices.size() > 0) {\n          // Numerically identical plane; create a new slice to replace the one there.\n          final PlaneDescription oldSlice = activeSlices.remove(activeSlices.size()-1);\n          activeSlices.add(new PlaneDescription(thisSlice.plane, oldSlice.endPoint1, thisSlice.endPoint2, thisSlice.endPoint1));\n          //System.out.println(\" new endpoint2 bearing: \"+thisSlice.point2Bearing);\n        }\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n\n    // Since the provide cutoff angle is really a surface distance, we need to use the point-on-bearing even for spheres.\n    final List<SidedPlane> circlePlanes = new ArrayList<>(activeSlices.size());\n    // If it turns out that there's only one circle plane, this array will be populated but unused\n    final List<GeoPoint[]> notableEdgePoints = new ArrayList<>(activeSlices.size());\n    // Back planes\n    final List<Membership> backPlanes = new ArrayList<>(activeSlices.size());\n    \n    // Compute bounding planes and actual circle planes\n    for (int i = 0; i < activeSlices.size(); i++) {\n      final PlaneDescription pd = activeSlices.get(i);\n      // Calculate the backplane\n      final Membership thisPlane = pd.plane;\n      // Go back through all the earlier points until we find one that's not within\n      GeoPoint backArticulationPoint = null;\n      for (int j = 1; j < activeSlices.size(); j++) {\n        int k = i - j;\n        if (k < 0) {\n          k += activeSlices.size();\n        }\n        final GeoPoint thisPoint = activeSlices.get(k).endPoint1;\n        if (!thisPlane.isWithin(thisPoint)) {\n          // Back up a notch\n          k++;\n          if (k >= activeSlices.size()) {\n            k -= activeSlices.size();\n          }\n          backArticulationPoint = activeSlices.get(k).endPoint1;\n          break;\n        }\n      }\n      // Go forward until we find one that's not within\n      GeoPoint forwardArticulationPoint = null;\n      for (int j = 1; j < activeSlices.size(); j++) {\n        int k = i + j;\n        if (k >= activeSlices.size()) {\n          k -= activeSlices.size();\n        }\n        final GeoPoint thisPoint = activeSlices.get(k).endPoint2;\n        if (!thisPlane.isWithin(thisPoint)) {\n          // back up\n          k--;\n          if (k < 0) {\n            k += activeSlices.size();\n          }\n          forwardArticulationPoint = activeSlices.get(k).endPoint2;\n          break;\n        }\n      }\n      \n      final Membership backPlane;\n      if (backArticulationPoint != null && forwardArticulationPoint != null) {\n        // We want a sided plane that goes through both identified articulation points and the center of the world.\n        backPlane = new SidedPlane(pd.onSidePoint, true, backArticulationPoint, forwardArticulationPoint);\n      } else {\n        backPlane = null;\n      }\n      \n      circlePlanes.add(pd.plane);\n      backPlanes.add(backPlane);\n      notableEdgePoints.add(new GeoPoint[]{pd.endPoint1, pd.endPoint2});\n    }\n\n    //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n    this.edgePoints = new GeoPoint[]{edgePoint};      \n    this.circlePlanes = circlePlanes;\n    // Compute bounds\n    if (circlePlanes.size() == 1) {\n      this.backBounds = null;\n      this.eitherBounds = null;\n      this.notableEdgePoints = null;\n    } else {\n      this.notableEdgePoints = notableEdgePoints;\n      this.backBounds = new HashMap<>(circlePlanes.size());\n      this.eitherBounds = new HashMap<>(circlePlanes.size());\n      for (int i = 0; i < circlePlanes.size(); i++) {\n        final SidedPlane thisPlane = circlePlanes.get(i);\n        final SidedPlane previousPlane = (i == 0)?circlePlanes.get(circlePlanes.size()-1):circlePlanes.get(i-1);\n        final SidedPlane nextPlane = (i == circlePlanes.size()-1)?circlePlanes.get(0):circlePlanes.get(i+1);\n        if (backPlanes.get(i) != null) {\n          backBounds.put(thisPlane, backPlanes.get(i));\n        }\n        eitherBounds.put(thisPlane, new EitherBound(previousPlane, nextPlane));\n      }\n    }\n    \n    //System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    // We cannot allow exact circles to be large enough so that planes intersect at greater than 180 degrees.  This guarantees it.\n    if (cutoffAngle > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    \n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // Since the provide cutoff angle is really a surface distance, we need to use the point-on-bearing even for spheres.\n    final List<SidedPlane> circlePlanes = new ArrayList<>();\n    // If it turns out that there's only one circle plane, this array will be populated but unused\n    final List<GeoPoint[]> notableEdgePoints = new ArrayList<>();\n      \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n    \n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5));\n      edgePoint = northPoint;\n    }\n      \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        // Good enough; add it to the list of planes, unless it was identical to the previous plane\n        if (circlePlanes.size() == 0 || !circlePlanes.get(circlePlanes.size()-1).isNumericallyIdentical(thisSlice.plane)) {\n          circlePlanes.add(thisSlice.plane);\n          notableEdgePoints.add(new GeoPoint[]{thisSlice.endPoint1, thisSlice.endPoint2});\n        }\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n\n    //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n    this.edgePoints = new GeoPoint[]{edgePoint};      \n    this.circlePlanes = circlePlanes;\n    // Compute bounds\n    if (circlePlanes.size() == 1) {\n      this.eitherBounds = null;\n      this.notableEdgePoints = null;\n    } else {\n      this.notableEdgePoints = notableEdgePoints;\n      this.eitherBounds = new HashMap<>(circlePlanes.size());\n      for (int i = 0; i < circlePlanes.size(); i++) {\n        final SidedPlane thisPlane = circlePlanes.get(i);\n        final SidedPlane previousPlane = (i == 0)?circlePlanes.get(circlePlanes.size()-1):circlePlanes.get(i-1);\n        final SidedPlane nextPlane = (i == circlePlanes.size()-1)?circlePlanes.get(0):circlePlanes.get(i+1);\n        eitherBounds.put(thisPlane, new EitherBound(previousPlane, nextPlane));\n      }\n    }\n  }\n\n","bugFix":["2252ea609db951d15af4430bee806a8d09fd8d6d"],"bugIntro":["cc76ebd337c4abb76bfc84b9b9a0aedde8b02004"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc76ebd337c4abb76bfc84b9b9a0aedde8b02004","date":1511351479,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    // We cannot allow exact circles to be large enough so that planes intersect at greater than 180 degrees.  This guarantees it.\n    if (cutoffAngle > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    \n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n    \n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5));\n      edgePoint = northPoint;\n    }\n    //System.out.println(\"Edgepoint = \" + edgePoint);\n    \n    final List<PlaneDescription> activeSlices = new ArrayList<>();\n    \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      \n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        if (activeSlices.size() == 0 || !activeSlices.get(activeSlices.size()-1).plane.isNumericallyIdentical(thisSlice.plane)) {\n          activeSlices.add(new PlaneDescription(thisSlice.plane, thisSlice.endPoint1, thisSlice.endPoint2, thisSlice.middlePoint));\n          //System.out.println(\"Point1 bearing = \"+thisSlice.point1Bearing);\n        } else if (activeSlices.size() > 0) {\n          // Numerically identical plane; create a new slice to replace the one there.\n          final PlaneDescription oldSlice = activeSlices.remove(activeSlices.size()-1);\n          activeSlices.add(new PlaneDescription(thisSlice.plane, oldSlice.endPoint1, thisSlice.endPoint2, thisSlice.endPoint1));\n          //System.out.println(\" new endpoint2 bearing: \"+thisSlice.point2Bearing);\n        }\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n\n    // Since the provide cutoff angle is really a surface distance, we need to use the point-on-bearing even for spheres.\n    final List<SidedPlane> circlePlanes = new ArrayList<>(activeSlices.size());\n    // If it turns out that there's only one circle plane, this array will be populated but unused\n    final List<GeoPoint[]> notableEdgePoints = new ArrayList<>(activeSlices.size());\n    // Back planes\n    final Map<Membership, Membership> backPlanes = new HashMap<>(activeSlices.size());\n    // Bounds\n    final Map<Membership, Membership> bounds = new HashMap<>(activeSlices.size());\n    \n    // Compute bounding planes and actual circle planes\n    for (int i = 0; i < activeSlices.size(); i++) {\n      final PlaneDescription pd = activeSlices.get(i);\n      // Calculate the backplane\n      final Membership thisPlane = pd.plane;\n      // Go back through all the earlier points until we find one that's not within\n      GeoPoint backArticulationPoint = null;\n      for (int j = 1; j < activeSlices.size(); j++) {\n        int k = i - j;\n        if (k < 0) {\n          k += activeSlices.size();\n        }\n        final GeoPoint thisPoint = activeSlices.get(k).endPoint1;\n        if (!thisPlane.isWithin(thisPoint)) {\n          // Back up a notch\n          k++;\n          if (k >= activeSlices.size()) {\n            k -= activeSlices.size();\n          }\n          backArticulationPoint = activeSlices.get(k).endPoint1;\n          break;\n        }\n      }\n      // Go forward until we find one that's not within\n      GeoPoint forwardArticulationPoint = null;\n      for (int j = 1; j < activeSlices.size(); j++) {\n        int k = i + j;\n        if (k >= activeSlices.size()) {\n          k -= activeSlices.size();\n        }\n        final GeoPoint thisPoint = activeSlices.get(k).endPoint2;\n        if (!thisPlane.isWithin(thisPoint)) {\n          // back up\n          k--;\n          if (k < 0) {\n            k += activeSlices.size();\n          }\n          forwardArticulationPoint = activeSlices.get(k).endPoint2;\n          break;\n        }\n      }\n      \n      final Membership backPlane;\n      if (backArticulationPoint != null && forwardArticulationPoint != null) {\n        // We want a sided plane that goes through both identified articulation points and the center of the world.\n        backPlane = new SidedPlane(pd.onSidePoint, true, backArticulationPoint, forwardArticulationPoint);\n      } else {\n        backPlane = null;\n      }\n      \n      circlePlanes.add(pd.plane);\n      if (backPlane != null) {\n        backPlanes.put(pd.plane, backPlane);\n      }\n      notableEdgePoints.add(new GeoPoint[]{pd.endPoint1, pd.endPoint2});\n      bounds.put(pd.plane, new EitherBound(new SidedPlane(pd.onSidePoint, pd.endPoint1, center), new SidedPlane(pd.onSidePoint, pd.endPoint2, center)));\n    }\n\n    //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n    this.circlePlanes = circlePlanes;\n    // Compute bounds\n    if (circlePlanes.size() == 1) {\n      this.backBounds = null;\n      this.eitherBounds = null;\n      this.notableEdgePoints = null;\n    } else {\n      this.notableEdgePoints = notableEdgePoints;\n      this.eitherBounds = bounds;\n      this.backBounds = backPlanes;\n    }\n    \n    this.edgePoints = new GeoPoint[]{edgePoint};      \n    //System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    // We cannot allow exact circles to be large enough so that planes intersect at greater than 180 degrees.  This guarantees it.\n    if (cutoffAngle > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    \n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n    \n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5));\n      edgePoint = northPoint;\n    }\n    //System.out.println(\"Edgepoint = \" + edgePoint);\n    \n    final List<PlaneDescription> activeSlices = new ArrayList<>();\n    \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      \n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        if (activeSlices.size() == 0 || !activeSlices.get(activeSlices.size()-1).plane.isNumericallyIdentical(thisSlice.plane)) {\n          activeSlices.add(new PlaneDescription(thisSlice.plane, thisSlice.endPoint1, thisSlice.endPoint2, thisSlice.middlePoint));\n          //System.out.println(\"Point1 bearing = \"+thisSlice.point1Bearing);\n        } else if (activeSlices.size() > 0) {\n          // Numerically identical plane; create a new slice to replace the one there.\n          final PlaneDescription oldSlice = activeSlices.remove(activeSlices.size()-1);\n          activeSlices.add(new PlaneDescription(thisSlice.plane, oldSlice.endPoint1, thisSlice.endPoint2, thisSlice.endPoint1));\n          //System.out.println(\" new endpoint2 bearing: \"+thisSlice.point2Bearing);\n        }\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n\n    // Since the provide cutoff angle is really a surface distance, we need to use the point-on-bearing even for spheres.\n    final List<SidedPlane> circlePlanes = new ArrayList<>(activeSlices.size());\n    // If it turns out that there's only one circle plane, this array will be populated but unused\n    final List<GeoPoint[]> notableEdgePoints = new ArrayList<>(activeSlices.size());\n    // Back planes\n    final List<Membership> backPlanes = new ArrayList<>(activeSlices.size());\n    \n    // Compute bounding planes and actual circle planes\n    for (int i = 0; i < activeSlices.size(); i++) {\n      final PlaneDescription pd = activeSlices.get(i);\n      // Calculate the backplane\n      final Membership thisPlane = pd.plane;\n      // Go back through all the earlier points until we find one that's not within\n      GeoPoint backArticulationPoint = null;\n      for (int j = 1; j < activeSlices.size(); j++) {\n        int k = i - j;\n        if (k < 0) {\n          k += activeSlices.size();\n        }\n        final GeoPoint thisPoint = activeSlices.get(k).endPoint1;\n        if (!thisPlane.isWithin(thisPoint)) {\n          // Back up a notch\n          k++;\n          if (k >= activeSlices.size()) {\n            k -= activeSlices.size();\n          }\n          backArticulationPoint = activeSlices.get(k).endPoint1;\n          break;\n        }\n      }\n      // Go forward until we find one that's not within\n      GeoPoint forwardArticulationPoint = null;\n      for (int j = 1; j < activeSlices.size(); j++) {\n        int k = i + j;\n        if (k >= activeSlices.size()) {\n          k -= activeSlices.size();\n        }\n        final GeoPoint thisPoint = activeSlices.get(k).endPoint2;\n        if (!thisPlane.isWithin(thisPoint)) {\n          // back up\n          k--;\n          if (k < 0) {\n            k += activeSlices.size();\n          }\n          forwardArticulationPoint = activeSlices.get(k).endPoint2;\n          break;\n        }\n      }\n      \n      final Membership backPlane;\n      if (backArticulationPoint != null && forwardArticulationPoint != null) {\n        // We want a sided plane that goes through both identified articulation points and the center of the world.\n        backPlane = new SidedPlane(pd.onSidePoint, true, backArticulationPoint, forwardArticulationPoint);\n      } else {\n        backPlane = null;\n      }\n      \n      circlePlanes.add(pd.plane);\n      backPlanes.add(backPlane);\n      notableEdgePoints.add(new GeoPoint[]{pd.endPoint1, pd.endPoint2});\n    }\n\n    //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n    this.edgePoints = new GeoPoint[]{edgePoint};      \n    this.circlePlanes = circlePlanes;\n    // Compute bounds\n    if (circlePlanes.size() == 1) {\n      this.backBounds = null;\n      this.eitherBounds = null;\n      this.notableEdgePoints = null;\n    } else {\n      this.notableEdgePoints = notableEdgePoints;\n      this.backBounds = new HashMap<>(circlePlanes.size());\n      this.eitherBounds = new HashMap<>(circlePlanes.size());\n      for (int i = 0; i < circlePlanes.size(); i++) {\n        final SidedPlane thisPlane = circlePlanes.get(i);\n        final SidedPlane previousPlane = (i == 0)?circlePlanes.get(circlePlanes.size()-1):circlePlanes.get(i-1);\n        final SidedPlane nextPlane = (i == circlePlanes.size()-1)?circlePlanes.get(0):circlePlanes.get(i+1);\n        if (backPlanes.get(i) != null) {\n          backBounds.put(thisPlane, backPlanes.get(i));\n        }\n        eitherBounds.put(thisPlane, new EitherBound(previousPlane, nextPlane));\n      }\n    }\n    \n    //System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n  }\n\n","bugFix":["75a9b5446751df93faf9a552cbffb19794a59a89","2252ea609db951d15af4430bee806a8d09fd8d6d","13591e4b4b5e1616a7627989025ec3b20432357f","862088d232b9b7b30d2d9b2b24aa81269df699ae"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b2a8c9601eb1ebe3852f392de4a789ff13ac37d","date":1511537841,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    // We cannot allow exact circles to be large enough so that planes intersect at greater than 180 degrees.  This guarantees it.\n    if (cutoffAngle > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    \n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n    \n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5));\n      edgePoint = northPoint;\n    }\n    //System.out.println(\"Edgepoint = \" + edgePoint);\n    \n    final List<PlaneDescription> activeSlices = new ArrayList<>();\n    \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      \n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        if (activeSlices.size() == 0 || !activeSlices.get(activeSlices.size()-1).plane.isNumericallyIdentical(thisSlice.plane)) {\n          activeSlices.add(new PlaneDescription(thisSlice.plane, thisSlice.endPoint1, thisSlice.endPoint2, thisSlice.middlePoint));\n          //System.out.println(\"Point1 bearing = \"+thisSlice.point1Bearing);\n        } else if (activeSlices.size() > 0) {\n          // Numerically identical plane; create a new slice to replace the one there.\n          final PlaneDescription oldSlice = activeSlices.remove(activeSlices.size()-1);\n          activeSlices.add(new PlaneDescription(thisSlice.plane, oldSlice.endPoint1, thisSlice.endPoint2, thisSlice.endPoint1));\n          //System.out.println(\" new endpoint2 bearing: \"+thisSlice.point2Bearing);\n        }\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n\n    // Since the provide cutoff angle is really a surface distance, we need to use the point-on-bearing even for spheres.\n    final List<SidedPlane> circlePlanes = new ArrayList<>(activeSlices.size());\n    // If it turns out that there's only one circle plane, this array will be populated but unused\n    final List<GeoPoint[]> notableEdgePoints = new ArrayList<>(activeSlices.size());\n    // Back planes\n    final Map<Membership, Membership> backPlanes = new HashMap<>(activeSlices.size());\n    // Bounds\n    final Map<Membership, Membership> bounds = new HashMap<>(activeSlices.size());\n    \n    // Compute bounding planes and actual circle planes\n    for (int i = 0; i < activeSlices.size(); i++) {\n      final PlaneDescription pd = activeSlices.get(i);\n      // Calculate the backplane\n      final Membership thisPlane = pd.plane;\n      // Go back through all the earlier points until we find one that's not within\n      GeoPoint backArticulationPoint = null;\n      for (int j = 1; j < activeSlices.size(); j++) {\n        int k = i - j;\n        if (k < 0) {\n          k += activeSlices.size();\n        }\n        final GeoPoint thisPoint = activeSlices.get(k).endPoint1;\n        if (!thisPlane.isWithin(thisPoint)) {\n          // Back up a notch\n          k++;\n          if (k >= activeSlices.size()) {\n            k -= activeSlices.size();\n          }\n          backArticulationPoint = activeSlices.get(k).endPoint1;\n          break;\n        }\n      }\n      // Go forward until we find one that's not within\n      GeoPoint forwardArticulationPoint = null;\n      for (int j = 1; j < activeSlices.size(); j++) {\n        int k = i + j;\n        if (k >= activeSlices.size()) {\n          k -= activeSlices.size();\n        }\n        final GeoPoint thisPoint = activeSlices.get(k).endPoint2;\n        if (!thisPlane.isWithin(thisPoint)) {\n          // back up\n          k--;\n          if (k < 0) {\n            k += activeSlices.size();\n          }\n          forwardArticulationPoint = activeSlices.get(k).endPoint2;\n          break;\n        }\n      }\n      \n      final Membership backPlane;\n      if (backArticulationPoint != null && forwardArticulationPoint != null) {\n        // We want a sided plane that goes through both identified articulation points and the center of the world.\n        backPlane = new SidedPlane(pd.onSidePoint, true, backArticulationPoint, forwardArticulationPoint);\n      } else {\n        backPlane = null;\n      }\n      \n      circlePlanes.add(pd.plane);\n      if (backPlane != null) {\n        backPlanes.put(pd.plane, backPlane);\n      }\n      notableEdgePoints.add(new GeoPoint[]{pd.endPoint1, pd.endPoint2});\n      bounds.put(pd.plane, new EitherBound(new SidedPlane(pd.onSidePoint, pd.endPoint1, center), new SidedPlane(pd.onSidePoint, pd.endPoint2, center)));\n    }\n\n    //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n    this.circlePlanes = circlePlanes;\n    // Compute bounds\n    if (circlePlanes.size() == 1) {\n      this.backBounds = null;\n      this.eitherBounds = null;\n      this.notableEdgePoints = null;\n    } else {\n      this.notableEdgePoints = notableEdgePoints;\n      this.eitherBounds = bounds;\n      this.backBounds = backPlanes;\n    }\n    \n    this.edgePoints = new GeoPoint[]{edgePoint};\n    \n    if (!isWithin(northPoint) || !isWithin(southPoint) || !isWithin(eastPoint) || !isWithin(westPoint)) {\n      throw new IllegalArgumentException(\"Exact circle cannot be constructed this large given the planet model provided\");\n    }\n    //System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    // We cannot allow exact circles to be large enough so that planes intersect at greater than 180 degrees.  This guarantees it.\n    if (cutoffAngle > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    \n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n    \n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5));\n      edgePoint = northPoint;\n    }\n    //System.out.println(\"Edgepoint = \" + edgePoint);\n    \n    final List<PlaneDescription> activeSlices = new ArrayList<>();\n    \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      \n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        if (activeSlices.size() == 0 || !activeSlices.get(activeSlices.size()-1).plane.isNumericallyIdentical(thisSlice.plane)) {\n          activeSlices.add(new PlaneDescription(thisSlice.plane, thisSlice.endPoint1, thisSlice.endPoint2, thisSlice.middlePoint));\n          //System.out.println(\"Point1 bearing = \"+thisSlice.point1Bearing);\n        } else if (activeSlices.size() > 0) {\n          // Numerically identical plane; create a new slice to replace the one there.\n          final PlaneDescription oldSlice = activeSlices.remove(activeSlices.size()-1);\n          activeSlices.add(new PlaneDescription(thisSlice.plane, oldSlice.endPoint1, thisSlice.endPoint2, thisSlice.endPoint1));\n          //System.out.println(\" new endpoint2 bearing: \"+thisSlice.point2Bearing);\n        }\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n\n    // Since the provide cutoff angle is really a surface distance, we need to use the point-on-bearing even for spheres.\n    final List<SidedPlane> circlePlanes = new ArrayList<>(activeSlices.size());\n    // If it turns out that there's only one circle plane, this array will be populated but unused\n    final List<GeoPoint[]> notableEdgePoints = new ArrayList<>(activeSlices.size());\n    // Back planes\n    final Map<Membership, Membership> backPlanes = new HashMap<>(activeSlices.size());\n    // Bounds\n    final Map<Membership, Membership> bounds = new HashMap<>(activeSlices.size());\n    \n    // Compute bounding planes and actual circle planes\n    for (int i = 0; i < activeSlices.size(); i++) {\n      final PlaneDescription pd = activeSlices.get(i);\n      // Calculate the backplane\n      final Membership thisPlane = pd.plane;\n      // Go back through all the earlier points until we find one that's not within\n      GeoPoint backArticulationPoint = null;\n      for (int j = 1; j < activeSlices.size(); j++) {\n        int k = i - j;\n        if (k < 0) {\n          k += activeSlices.size();\n        }\n        final GeoPoint thisPoint = activeSlices.get(k).endPoint1;\n        if (!thisPlane.isWithin(thisPoint)) {\n          // Back up a notch\n          k++;\n          if (k >= activeSlices.size()) {\n            k -= activeSlices.size();\n          }\n          backArticulationPoint = activeSlices.get(k).endPoint1;\n          break;\n        }\n      }\n      // Go forward until we find one that's not within\n      GeoPoint forwardArticulationPoint = null;\n      for (int j = 1; j < activeSlices.size(); j++) {\n        int k = i + j;\n        if (k >= activeSlices.size()) {\n          k -= activeSlices.size();\n        }\n        final GeoPoint thisPoint = activeSlices.get(k).endPoint2;\n        if (!thisPlane.isWithin(thisPoint)) {\n          // back up\n          k--;\n          if (k < 0) {\n            k += activeSlices.size();\n          }\n          forwardArticulationPoint = activeSlices.get(k).endPoint2;\n          break;\n        }\n      }\n      \n      final Membership backPlane;\n      if (backArticulationPoint != null && forwardArticulationPoint != null) {\n        // We want a sided plane that goes through both identified articulation points and the center of the world.\n        backPlane = new SidedPlane(pd.onSidePoint, true, backArticulationPoint, forwardArticulationPoint);\n      } else {\n        backPlane = null;\n      }\n      \n      circlePlanes.add(pd.plane);\n      if (backPlane != null) {\n        backPlanes.put(pd.plane, backPlane);\n      }\n      notableEdgePoints.add(new GeoPoint[]{pd.endPoint1, pd.endPoint2});\n      bounds.put(pd.plane, new EitherBound(new SidedPlane(pd.onSidePoint, pd.endPoint1, center), new SidedPlane(pd.onSidePoint, pd.endPoint2, center)));\n    }\n\n    //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n    this.circlePlanes = circlePlanes;\n    // Compute bounds\n    if (circlePlanes.size() == 1) {\n      this.backBounds = null;\n      this.eitherBounds = null;\n      this.notableEdgePoints = null;\n    } else {\n      this.notableEdgePoints = notableEdgePoints;\n      this.eitherBounds = bounds;\n      this.backBounds = backPlanes;\n    }\n    \n    this.edgePoints = new GeoPoint[]{edgePoint};      \n    //System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7bf4b5a3bafd342986a52780bb27afd41679085","date":1511634572,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    \n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n    \n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5));\n      edgePoint = northPoint;\n    }\n    //System.out.println(\"Edgepoint = \" + edgePoint);\n\n    this.circleSlices = new ArrayList<>();\n    \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      \n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        circleSlices.add(new CircleSlice(thisSlice.plane, thisSlice.endPoint1, thisSlice.endPoint2, center, thisSlice.middlePoint));\n        //assert thisSlice.plane.isWithin(center);\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n    \n    this.edgePoints = new GeoPoint[]{edgePoint};\n\n    //System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    // We cannot allow exact circles to be large enough so that planes intersect at greater than 180 degrees.  This guarantees it.\n    if (cutoffAngle > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    \n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n    \n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5));\n      edgePoint = northPoint;\n    }\n    //System.out.println(\"Edgepoint = \" + edgePoint);\n    \n    final List<PlaneDescription> activeSlices = new ArrayList<>();\n    \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      \n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        if (activeSlices.size() == 0 || !activeSlices.get(activeSlices.size()-1).plane.isNumericallyIdentical(thisSlice.plane)) {\n          activeSlices.add(new PlaneDescription(thisSlice.plane, thisSlice.endPoint1, thisSlice.endPoint2, thisSlice.middlePoint));\n          //System.out.println(\"Point1 bearing = \"+thisSlice.point1Bearing);\n        } else if (activeSlices.size() > 0) {\n          // Numerically identical plane; create a new slice to replace the one there.\n          final PlaneDescription oldSlice = activeSlices.remove(activeSlices.size()-1);\n          activeSlices.add(new PlaneDescription(thisSlice.plane, oldSlice.endPoint1, thisSlice.endPoint2, thisSlice.endPoint1));\n          //System.out.println(\" new endpoint2 bearing: \"+thisSlice.point2Bearing);\n        }\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n\n    // Since the provide cutoff angle is really a surface distance, we need to use the point-on-bearing even for spheres.\n    final List<SidedPlane> circlePlanes = new ArrayList<>(activeSlices.size());\n    // If it turns out that there's only one circle plane, this array will be populated but unused\n    final List<GeoPoint[]> notableEdgePoints = new ArrayList<>(activeSlices.size());\n    // Back planes\n    final Map<Membership, Membership> backPlanes = new HashMap<>(activeSlices.size());\n    // Bounds\n    final Map<Membership, Membership> bounds = new HashMap<>(activeSlices.size());\n    \n    // Compute bounding planes and actual circle planes\n    for (int i = 0; i < activeSlices.size(); i++) {\n      final PlaneDescription pd = activeSlices.get(i);\n      // Calculate the backplane\n      final Membership thisPlane = pd.plane;\n      // Go back through all the earlier points until we find one that's not within\n      GeoPoint backArticulationPoint = null;\n      for (int j = 1; j < activeSlices.size(); j++) {\n        int k = i - j;\n        if (k < 0) {\n          k += activeSlices.size();\n        }\n        final GeoPoint thisPoint = activeSlices.get(k).endPoint1;\n        if (!thisPlane.isWithin(thisPoint)) {\n          // Back up a notch\n          k++;\n          if (k >= activeSlices.size()) {\n            k -= activeSlices.size();\n          }\n          backArticulationPoint = activeSlices.get(k).endPoint1;\n          break;\n        }\n      }\n      // Go forward until we find one that's not within\n      GeoPoint forwardArticulationPoint = null;\n      for (int j = 1; j < activeSlices.size(); j++) {\n        int k = i + j;\n        if (k >= activeSlices.size()) {\n          k -= activeSlices.size();\n        }\n        final GeoPoint thisPoint = activeSlices.get(k).endPoint2;\n        if (!thisPlane.isWithin(thisPoint)) {\n          // back up\n          k--;\n          if (k < 0) {\n            k += activeSlices.size();\n          }\n          forwardArticulationPoint = activeSlices.get(k).endPoint2;\n          break;\n        }\n      }\n      \n      final Membership backPlane;\n      if (backArticulationPoint != null && forwardArticulationPoint != null) {\n        // We want a sided plane that goes through both identified articulation points and the center of the world.\n        backPlane = new SidedPlane(pd.onSidePoint, true, backArticulationPoint, forwardArticulationPoint);\n      } else {\n        backPlane = null;\n      }\n      \n      circlePlanes.add(pd.plane);\n      if (backPlane != null) {\n        backPlanes.put(pd.plane, backPlane);\n      }\n      notableEdgePoints.add(new GeoPoint[]{pd.endPoint1, pd.endPoint2});\n      bounds.put(pd.plane, new EitherBound(new SidedPlane(pd.onSidePoint, pd.endPoint1, center), new SidedPlane(pd.onSidePoint, pd.endPoint2, center)));\n    }\n\n    //System.out.println(\"Number of planes needed: \"+circlePlanes.size());\n      \n    this.circlePlanes = circlePlanes;\n    // Compute bounds\n    if (circlePlanes.size() == 1) {\n      this.backBounds = null;\n      this.eitherBounds = null;\n      this.notableEdgePoints = null;\n    } else {\n      this.notableEdgePoints = notableEdgePoints;\n      this.eitherBounds = bounds;\n      this.backBounds = backPlanes;\n    }\n    \n    this.edgePoints = new GeoPoint[]{edgePoint};\n    \n    if (!isWithin(northPoint) || !isWithin(southPoint) || !isWithin(eastPoint) || !isWithin(westPoint)) {\n      throw new IllegalArgumentException(\"Exact circle cannot be constructed this large given the planet model provided\");\n    }\n    //System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc92e5b26b68a4009f0e63747e9b61f1e2da8ac2","date":1512093110,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    if (planetModel.minimumPoleDistance - cutoffAngle  < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds. It cannot be bigger than \" +  planetModel.minimumPoleDistance + \" for this planet model\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n    \n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5));\n      edgePoint = northPoint;\n    }\n    //System.out.println(\"Edgepoint = \" + edgePoint);\n\n    this.circleSlices = new ArrayList<>();\n    \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      \n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        circleSlices.add(new CircleSlice(thisSlice.plane, thisSlice.endPoint1, thisSlice.endPoint2, center, thisSlice.middlePoint));\n        //assert thisSlice.plane.isWithin(center);\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n    \n    this.edgePoints = new GeoPoint[]{edgePoint};\n\n    //System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    \n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n    \n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5));\n      edgePoint = northPoint;\n    }\n    //System.out.println(\"Edgepoint = \" + edgePoint);\n\n    this.circleSlices = new ArrayList<>();\n    \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      \n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        circleSlices.add(new CircleSlice(thisSlice.plane, thisSlice.endPoint1, thisSlice.endPoint2, center, thisSlice.middlePoint));\n        //assert thisSlice.plane.isWithin(center);\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n    \n    this.edgePoints = new GeoPoint[]{edgePoint};\n\n    //System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n  }\n\n","bugFix":["862088d232b9b7b30d2d9b2b24aa81269df699ae"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c5af811fc387444c4a3b568755b76a85e4bc4fc","date":1512143098,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    if (planetModel.minimumPoleDistance - cutoffAngle  < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds. It cannot be bigger than \" +  planetModel.minimumPoleDistance + \" for this planet model\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n\n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n\n    final boolean mustSplit = cutoffAngle > Math.PI * 0.5;\n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0, mustSplit));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI, mustSplit));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5, mustSplit));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5, mustSplit));\n      edgePoint = northPoint;\n    }\n    //System.out.println(\"Edgepoint = \" + edgePoint);\n\n    this.circleSlices = new ArrayList<>();\n    \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      \n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (!thisSlice.mustSplit && Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        circleSlices.add(new CircleSlice(thisSlice.plane, thisSlice.endPoint1, thisSlice.endPoint2, center, thisSlice.middlePoint));\n        //assert thisSlice.plane.isWithin(center);\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing, false));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing, false));\n      }\n    }\n    \n    this.edgePoints = new GeoPoint[]{edgePoint};\n\n    //System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    if (planetModel.minimumPoleDistance - cutoffAngle  < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds. It cannot be bigger than \" +  planetModel.minimumPoleDistance + \" for this planet model\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n    \n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n    \n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5));\n      edgePoint = northPoint;\n    }\n    //System.out.println(\"Edgepoint = \" + edgePoint);\n\n    this.circleSlices = new ArrayList<>();\n    \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      \n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        circleSlices.add(new CircleSlice(thisSlice.plane, thisSlice.endPoint1, thisSlice.endPoint2, center, thisSlice.middlePoint));\n        //assert thisSlice.plane.isWithin(center);\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing));\n      }\n    }\n    \n    this.edgePoints = new GeoPoint[]{edgePoint};\n\n    //System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n  }\n\n","bugFix":["990b9bc5bbe516d4b59387c4ca5341eab01c5df1","13591e4b4b5e1616a7627989025ec3b20432357f","2252ea609db951d15af4430bee806a8d09fd8d6d","862088d232b9b7b30d2d9b2b24aa81269df699ae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a03d351abb1e487ff1b7feaacc286da105d59a04","date":1512729671,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    if (planetModel.minimumPoleDistance - cutoffAngle  < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds. It cannot be bigger than \" +  planetModel.minimumPoleDistance + \" for this planet model\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n\n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n\n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0, true));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI, true));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5, true));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5, true));\n      edgePoint = northPoint;\n    }\n    //System.out.println(\"Edgepoint = \" + edgePoint);\n\n    this.circleSlices = new ArrayList<>();\n    \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      \n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (!thisSlice.mustSplit && Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        circleSlices.add(new CircleSlice(thisSlice.plane, thisSlice.endPoint1, thisSlice.endPoint2, center, thisSlice.middlePoint));\n        //assert thisSlice.plane.isWithin(center);\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing, false));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing, false));\n      }\n    }\n    \n    this.edgePoints = new GeoPoint[]{edgePoint};\n\n    //System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    if (planetModel.minimumPoleDistance - cutoffAngle  < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds. It cannot be bigger than \" +  planetModel.minimumPoleDistance + \" for this planet model\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n\n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n\n    final boolean mustSplit = cutoffAngle > Math.PI * 0.5;\n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0, mustSplit));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI, mustSplit));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5, mustSplit));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5, mustSplit));\n      edgePoint = northPoint;\n    }\n    //System.out.println(\"Edgepoint = \" + edgePoint);\n\n    this.circleSlices = new ArrayList<>();\n    \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      \n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (!thisSlice.mustSplit && Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        circleSlices.add(new CircleSlice(thisSlice.plane, thisSlice.endPoint1, thisSlice.endPoint2, center, thisSlice.middlePoint));\n        //assert thisSlice.plane.isWithin(center);\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing, false));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing, false));\n      }\n    }\n    \n    this.edgePoints = new GeoPoint[]{edgePoint};\n\n    //System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4eeea55acc3d6772f83fea40b1187f8ce6c20d04","date":1513166986,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param radius is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance). Maximum accuracy is 1e-12.\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double radius, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (radius < 0.0)\n      throw new IllegalArgumentException(\"Radius out of bounds\");\n    if (radius < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Radius cannot be effectively zero\");\n    if (planetModel.minimumPoleDistance - radius < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Radius out of bounds. It cannot be bigger than \" +  planetModel.minimumPoleDistance + \" for this planet model\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.radius = radius;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n\n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, radius, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, radius, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, radius, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, radius, Math.PI * 1.5);\n\n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0, true));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI, true));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5, true));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5, true));\n      edgePoint = northPoint;\n    }\n    //System.out.println(\"Edgepoint = \" + edgePoint);\n\n    this.circleSlices = new ArrayList<>();\n    \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, radius, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, radius, interpPoint2Bearing);\n      \n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (!thisSlice.mustSplit && Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        circleSlices.add(new CircleSlice(thisSlice.plane, thisSlice.endPoint1, thisSlice.endPoint2, center, thisSlice.middlePoint));\n        //assert thisSlice.plane.isWithin(center);\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing, false));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing, false));\n      }\n    }\n    \n    this.edgePoints = new GeoPoint[]{edgePoint};\n\n    //System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance).\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    if (planetModel.minimumPoleDistance - cutoffAngle  < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds. It cannot be bigger than \" +  planetModel.minimumPoleDistance + \" for this planet model\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.cutoffAngle = cutoffAngle;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n\n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, cutoffAngle, Math.PI * 1.5);\n\n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0, true));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI, true));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5, true));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5, true));\n      edgePoint = northPoint;\n    }\n    //System.out.println(\"Edgepoint = \" + edgePoint);\n\n    this.circleSlices = new ArrayList<>();\n    \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, cutoffAngle, interpPoint2Bearing);\n      \n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (!thisSlice.mustSplit && Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        circleSlices.add(new CircleSlice(thisSlice.plane, thisSlice.endPoint1, thisSlice.endPoint2, center, thisSlice.middlePoint));\n        //assert thisSlice.plane.isWithin(center);\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing, false));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing, false));\n      }\n    }\n    \n    this.edgePoints = new GeoPoint[]{edgePoint};\n\n    //System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle#GeoExactCircle(PlanetModel,double,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param radius is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance). Maximum accuracy is 1e-12.\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double radius, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (radius < 0.0)\n      throw new IllegalArgumentException(\"Radius out of bounds\");\n    if (radius < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Radius cannot be effectively zero\");\n    if (planetModel.minimumPoleDistance - radius < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Radius out of bounds. It cannot be bigger than \" +  planetModel.minimumPoleDistance + \" for this planet model\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.radius = radius;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n\n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, radius, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, radius, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, radius, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, radius, Math.PI * 1.5);\n\n    final GeoPoint edgePoint;\n    if (planetModel.zScaling > planetModel.xyScaling) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0, true));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI, true));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5, true));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5, true));\n      edgePoint = northPoint;\n    }\n    //System.out.println(\"Edgepoint = \" + edgePoint);\n\n    this.circleSlices = new ArrayList<>();\n    \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, radius, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, radius, interpPoint2Bearing);\n      \n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (!thisSlice.mustSplit && Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        circleSlices.add(new CircleSlice(thisSlice.plane, thisSlice.endPoint1, thisSlice.endPoint2, center, thisSlice.middlePoint));\n        //assert thisSlice.plane.isWithin(center);\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing, false));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing, false));\n      }\n    }\n    \n    this.edgePoints = new GeoPoint[]{edgePoint};\n\n    //System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param radius is the surface radius for the circle.\n   *@param accuracy is the allowed error value (linear distance). Maximum accuracy is 1e-12.\n   */\n  public GeoExactCircle(final PlanetModel planetModel, final double lat, final double lon, final double radius, final double accuracy) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (radius < 0.0)\n      throw new IllegalArgumentException(\"Radius out of bounds\");\n    if (radius < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Radius cannot be effectively zero\");\n    if (planetModel.minimumPoleDistance - radius < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Radius out of bounds. It cannot be bigger than \" +  planetModel.minimumPoleDistance + \" for this planet model\");\n\n    this.center = new GeoPoint(planetModel, lat, lon);\n    this.radius = radius;\n\n    if (accuracy < Vector.MINIMUM_RESOLUTION) {\n      actualAccuracy = Vector.MINIMUM_RESOLUTION;\n    } else {\n      actualAccuracy = accuracy;\n    }\n\n    // We construct approximation planes until we have a low enough error estimate\n    final List<ApproximationSlice> slices = new ArrayList<>(100);\n    // Construct four cardinal points, and then we'll build the first two planes\n    final GeoPoint northPoint = planetModel.surfacePointOnBearing(center, radius, 0.0);\n    final GeoPoint southPoint = planetModel.surfacePointOnBearing(center, radius, Math.PI);\n    final GeoPoint eastPoint = planetModel.surfacePointOnBearing(center, radius, Math.PI * 0.5);\n    final GeoPoint westPoint = planetModel.surfacePointOnBearing(center, radius, Math.PI * 1.5);\n\n    final GeoPoint edgePoint;\n    if (planetModel.c > planetModel.ab) {\n      // z can be greater than x or y, so ellipse is longer in height than width\n      slices.add(new ApproximationSlice(center, eastPoint, Math.PI * 0.5, westPoint, Math.PI * -0.5, northPoint, 0.0, true));\n      slices.add(new ApproximationSlice(center, westPoint, Math.PI * 1.5, eastPoint, Math.PI * 0.5, southPoint, Math.PI, true));\n      edgePoint = eastPoint;\n    } else {\n      // z will be less than x or y, so ellipse is shorter than it is tall\n      slices.add(new ApproximationSlice(center, northPoint, 0.0, southPoint, Math.PI, eastPoint, Math.PI * 0.5, true));\n      slices.add(new ApproximationSlice(center, southPoint, Math.PI, northPoint, Math.PI * 2.0, westPoint, Math.PI * 1.5, true));\n      edgePoint = northPoint;\n    }\n    //System.out.println(\"Edgepoint = \" + edgePoint);\n\n    this.circleSlices = new ArrayList<>();\n    \n    // Now, iterate over slices until we have converted all of them into safe SidedPlanes.\n    while (slices.size() > 0) {\n      // Peel off a slice from the back\n      final ApproximationSlice thisSlice = slices.remove(slices.size()-1);\n      // Assess it to see if it is OK as it is, or needs to be split.\n      // To do this, we need to look at the part of the circle that will have the greatest error.\n      // We will need to compute bearing points for these.\n      final double interpPoint1Bearing = (thisSlice.point1Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint1 = planetModel.surfacePointOnBearing(center, radius, interpPoint1Bearing);\n      final double interpPoint2Bearing = (thisSlice.point2Bearing + thisSlice.middlePointBearing) * 0.5;\n      final GeoPoint interpPoint2 = planetModel.surfacePointOnBearing(center, radius, interpPoint2Bearing);\n      \n      // Is this point on the plane? (that is, is the approximation good enough?)\n      if (!thisSlice.mustSplit && Math.abs(thisSlice.plane.evaluate(interpPoint1)) < actualAccuracy && Math.abs(thisSlice.plane.evaluate(interpPoint2)) < actualAccuracy) {\n        circleSlices.add(new CircleSlice(thisSlice.plane, thisSlice.endPoint1, thisSlice.endPoint2, center, thisSlice.middlePoint));\n        //assert thisSlice.plane.isWithin(center);\n      } else {\n        // Split the plane into two, and add it back to the end\n        slices.add(new ApproximationSlice(center,\n          thisSlice.endPoint1, thisSlice.point1Bearing, \n          thisSlice.middlePoint, thisSlice.middlePointBearing, \n          interpPoint1, interpPoint1Bearing, false));\n        slices.add(new ApproximationSlice(center,\n          thisSlice.middlePoint, thisSlice.middlePointBearing,\n          thisSlice.endPoint2, thisSlice.point2Bearing,\n          interpPoint2, interpPoint2Bearing, false));\n      }\n    }\n    \n    this.edgePoints = new GeoPoint[]{edgePoint};\n\n    //System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"13591e4b4b5e1616a7627989025ec3b20432357f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e9eb4df1264e68ff787a31709b506e14e0cf30e":["13591e4b4b5e1616a7627989025ec3b20432357f"],"dbc601783e295e23f0d0015b9efbdb6f2fed5c0f":["2252ea609db951d15af4430bee806a8d09fd8d6d"],"2252ea609db951d15af4430bee806a8d09fd8d6d":["57949146f783e88ab890543a6aaf173c6a34efdb"],"57949146f783e88ab890543a6aaf173c6a34efdb":["3e9eb4df1264e68ff787a31709b506e14e0cf30e"],"990b9bc5bbe516d4b59387c4ca5341eab01c5df1":["862088d232b9b7b30d2d9b2b24aa81269df699ae"],"862088d232b9b7b30d2d9b2b24aa81269df699ae":["dbc601783e295e23f0d0015b9efbdb6f2fed5c0f"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["4eeea55acc3d6772f83fea40b1187f8ce6c20d04"],"cc76ebd337c4abb76bfc84b9b9a0aedde8b02004":["75a9b5446751df93faf9a552cbffb19794a59a89"],"e7bf4b5a3bafd342986a52780bb27afd41679085":["4b2a8c9601eb1ebe3852f392de4a789ff13ac37d"],"75a9b5446751df93faf9a552cbffb19794a59a89":["990b9bc5bbe516d4b59387c4ca5341eab01c5df1"],"4b2a8c9601eb1ebe3852f392de4a789ff13ac37d":["cc76ebd337c4abb76bfc84b9b9a0aedde8b02004"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dbc601783e295e23f0d0015b9efbdb6f2fed5c0f"],"fc92e5b26b68a4009f0e63747e9b61f1e2da8ac2":["e7bf4b5a3bafd342986a52780bb27afd41679085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a03d351abb1e487ff1b7feaacc286da105d59a04":["9c5af811fc387444c4a3b568755b76a85e4bc4fc"],"9c5af811fc387444c4a3b568755b76a85e4bc4fc":["fc92e5b26b68a4009f0e63747e9b61f1e2da8ac2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"4eeea55acc3d6772f83fea40b1187f8ce6c20d04":["a03d351abb1e487ff1b7feaacc286da105d59a04"]},"commit2Childs":{"13591e4b4b5e1616a7627989025ec3b20432357f":["3e9eb4df1264e68ff787a31709b506e14e0cf30e"],"3e9eb4df1264e68ff787a31709b506e14e0cf30e":["57949146f783e88ab890543a6aaf173c6a34efdb"],"dbc601783e295e23f0d0015b9efbdb6f2fed5c0f":["862088d232b9b7b30d2d9b2b24aa81269df699ae","6240b74b884c5587f2a4062dd27d6c32bf228889"],"2252ea609db951d15af4430bee806a8d09fd8d6d":["dbc601783e295e23f0d0015b9efbdb6f2fed5c0f"],"57949146f783e88ab890543a6aaf173c6a34efdb":["2252ea609db951d15af4430bee806a8d09fd8d6d"],"990b9bc5bbe516d4b59387c4ca5341eab01c5df1":["75a9b5446751df93faf9a552cbffb19794a59a89"],"862088d232b9b7b30d2d9b2b24aa81269df699ae":["990b9bc5bbe516d4b59387c4ca5341eab01c5df1"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cc76ebd337c4abb76bfc84b9b9a0aedde8b02004":["4b2a8c9601eb1ebe3852f392de4a789ff13ac37d"],"75a9b5446751df93faf9a552cbffb19794a59a89":["cc76ebd337c4abb76bfc84b9b9a0aedde8b02004"],"e7bf4b5a3bafd342986a52780bb27afd41679085":["fc92e5b26b68a4009f0e63747e9b61f1e2da8ac2"],"4b2a8c9601eb1ebe3852f392de4a789ff13ac37d":["e7bf4b5a3bafd342986a52780bb27afd41679085"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"fc92e5b26b68a4009f0e63747e9b61f1e2da8ac2":["9c5af811fc387444c4a3b568755b76a85e4bc4fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["13591e4b4b5e1616a7627989025ec3b20432357f","6240b74b884c5587f2a4062dd27d6c32bf228889"],"a03d351abb1e487ff1b7feaacc286da105d59a04":["4eeea55acc3d6772f83fea40b1187f8ce6c20d04"],"9c5af811fc387444c4a3b568755b76a85e4bc4fc":["a03d351abb1e487ff1b7feaacc286da105d59a04"],"4eeea55acc3d6772f83fea40b1187f8ce6c20d04":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}