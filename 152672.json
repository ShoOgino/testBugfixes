{"path":"solr/core/src/java/org/apache/solr/handler/tagger/XmlOffsetCorrector#XmlOffsetCorrector(String).mjava","commits":[{"id":"e091f281a6e026f8bb17aaf194efd0bbd3a7f549","date":1528221895,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/XmlOffsetCorrector#XmlOffsetCorrector(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initialize based on the document text.\n   * @param docText non-null XML content.\n   * @throws XMLStreamException If there's a problem parsing the XML.\n   */\n  public XmlOffsetCorrector(String docText) throws XMLStreamException {\n    super(docText, false);\n\n    int tagCounter = 0;\n    int thisTag = -1;\n\n    //note: we *could* add a virtual outer tag to guarantee all text is in the context of a tag,\n    // but we shouldn't need to because there is no findable text outside the top element.\n\n    final XMLStreamReader2 xmlStreamReader =\n            (XMLStreamReader2) XML_INPUT_FACTORY.createXMLStreamReader(new StringReader(docText));\n\n    while (xmlStreamReader.hasNext()) {\n      int eventType = xmlStreamReader.next();\n      switch (eventType) {\n        case XMLEvent.START_ELEMENT: {\n          tagInfo.ensureCapacity(tagInfo.size() + 5);\n          final int parentTag = thisTag;\n          final LocationInfo info = xmlStreamReader.getLocationInfo();\n          tagInfo.add(parentTag);\n          tagInfo.add((int) info.getStartingCharOffset(), (int) info.getEndingCharOffset());\n          tagInfo.add(-1, -1);//these 2 will be populated when we get to the close tag\n          thisTag = tagCounter++;\n\n          parentChangeOffsets.add((int) info.getStartingCharOffset());\n          parentChangeIds.add(thisTag);\n          break;\n        }\n        case XMLEvent.END_ELEMENT: {\n          final LocationInfo info = xmlStreamReader.getLocationInfo();\n          tagInfo.set(5 * thisTag + 3, (int) info.getStartingCharOffset());\n          tagInfo.set(5 * thisTag + 4, (int) info.getEndingCharOffset());\n          thisTag = getParentTag(thisTag);\n\n          parentChangeOffsets.add((int) info.getEndingCharOffset());\n          parentChangeIds.add(thisTag);\n          break;\n        }\n        default: //do nothing\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/XmlOffsetCorrector#XmlOffsetCorrector(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initialize based on the document text.\n   * @param docText non-null XML content.\n   * @throws XMLStreamException If there's a problem parsing the XML.\n   */\n  public XmlOffsetCorrector(String docText) throws XMLStreamException {\n    super(docText, false);\n\n    int tagCounter = 0;\n    int thisTag = -1;\n\n    //note: we *could* add a virtual outer tag to guarantee all text is in the context of a tag,\n    // but we shouldn't need to because there is no findable text outside the top element.\n\n    final XMLStreamReader2 xmlStreamReader =\n            (XMLStreamReader2) XML_INPUT_FACTORY.createXMLStreamReader(new StringReader(docText));\n\n    while (xmlStreamReader.hasNext()) {\n      int eventType = xmlStreamReader.next();\n      switch (eventType) {\n        case XMLEvent.START_ELEMENT: {\n          tagInfo.ensureCapacity(tagInfo.size() + 5);\n          final int parentTag = thisTag;\n          final LocationInfo info = xmlStreamReader.getLocationInfo();\n          tagInfo.add(parentTag);\n          tagInfo.add((int) info.getStartingCharOffset(), (int) info.getEndingCharOffset());\n          tagInfo.add(-1, -1);//these 2 will be populated when we get to the close tag\n          thisTag = tagCounter++;\n\n          parentChangeOffsets.add((int) info.getStartingCharOffset());\n          parentChangeIds.add(thisTag);\n          break;\n        }\n        case XMLEvent.END_ELEMENT: {\n          final LocationInfo info = xmlStreamReader.getLocationInfo();\n          tagInfo.set(5 * thisTag + 3, (int) info.getStartingCharOffset());\n          tagInfo.set(5 * thisTag + 4, (int) info.getEndingCharOffset());\n          thisTag = getParentTag(thisTag);\n\n          parentChangeOffsets.add((int) info.getEndingCharOffset());\n          parentChangeIds.add(thisTag);\n          break;\n        }\n        default: //do nothing\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/XmlOffsetCorrector#XmlOffsetCorrector(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initialize based on the document text.\n   * @param docText non-null XML content.\n   * @throws XMLStreamException If there's a problem parsing the XML.\n   */\n  public XmlOffsetCorrector(String docText) throws XMLStreamException {\n    super(docText, false);\n\n    int tagCounter = 0;\n    int thisTag = -1;\n\n    //note: we *could* add a virtual outer tag to guarantee all text is in the context of a tag,\n    // but we shouldn't need to because there is no findable text outside the top element.\n\n    final XMLStreamReader2 xmlStreamReader =\n            (XMLStreamReader2) XML_INPUT_FACTORY.createXMLStreamReader(new StringReader(docText));\n\n    while (xmlStreamReader.hasNext()) {\n      int eventType = xmlStreamReader.next();\n      switch (eventType) {\n        case XMLEvent.START_ELEMENT: {\n          tagInfo.ensureCapacity(tagInfo.size() + 5);\n          final int parentTag = thisTag;\n          final LocationInfo info = xmlStreamReader.getLocationInfo();\n          tagInfo.add(parentTag);\n          tagInfo.add((int) info.getStartingCharOffset(), (int) info.getEndingCharOffset());\n          tagInfo.add(-1, -1);//these 2 will be populated when we get to the close tag\n          thisTag = tagCounter++;\n\n          parentChangeOffsets.add((int) info.getStartingCharOffset());\n          parentChangeIds.add(thisTag);\n          break;\n        }\n        case XMLEvent.END_ELEMENT: {\n          final LocationInfo info = xmlStreamReader.getLocationInfo();\n          tagInfo.set(5 * thisTag + 3, (int) info.getStartingCharOffset());\n          tagInfo.set(5 * thisTag + 4, (int) info.getEndingCharOffset());\n          thisTag = getParentTag(thisTag);\n\n          parentChangeOffsets.add((int) info.getEndingCharOffset());\n          parentChangeIds.add(thisTag);\n          break;\n        }\n        default: //do nothing\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e091f281a6e026f8bb17aaf194efd0bbd3a7f549"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f592209545c71895260367152601e9200399776d":[],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}