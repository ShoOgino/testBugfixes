{"path":"backwards/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(Version,String[],String[],Analyzer).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(Version,String[],String[],Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param matchVersion Lucene version to match; this is passed through to QueryParser.\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(Version matchVersion, String[] queries, String[] fields,\n      Analyzer analyzer) throws ParseException\n  {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(matchVersion, fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return bQuery;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(Version,String[],String[],Analyzer).mjava","pathOld":"backwards/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(Version,String[],String[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param matchVersion Lucene version to match; this is passed through to QueryParser.\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(Version matchVersion, String[] queries, String[] fields,\n      Analyzer analyzer) throws ParseException\n  {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(matchVersion, fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return bQuery;\n  }\n\n","sourceOld":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param matchVersion Lucene version to match; this is passed through to QueryParser.\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(Version matchVersion, String[] queries, String[] fields,\n      Analyzer analyzer) throws ParseException\n  {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(matchVersion, fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return bQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}