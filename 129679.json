{"path":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testGetNumberOfRemainingRecords().mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testGetNumberOfRemainingRecords().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check that the reader is correctly reset to its last position\n   */\n  @Test\n  public void testGetNumberOfRemainingRecords() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplayFinish = new Semaphore(0);\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      this.clearCore();\n\n      int start = 0;\n\n      LinkedList<Long> versions = new LinkedList<>();\n      addDocs(10, start, versions);\n      start += 10;\n      assertU(commit());\n\n      addDocs(10, start, versions);\n      start += 10;\n\n      h.close();\n      logReplayFinish.drainPermits();\n      createCore();\n\n      // At this stage, we have re-opened a capped tlog, and an uncapped tlog.\n      // check that the number of remaining records is correctly computed in these two cases\n\n      CdcrUpdateLog ulog = (CdcrUpdateLog) h.getCore().getUpdateHandler().getUpdateLog();\n      CdcrUpdateLog.CdcrLogReader reader = ulog.newLogReader();\n\n      // wait for the replay to finish\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      // 20 records + 2 commits\n      assertEquals(22, reader.getNumberOfRemainingRecords());\n\n      for (int i = 0; i < 22; i++) {\n        Object o = reader.next();\n        assertNotNull(o);\n        assertEquals(22 - (i + 1), reader.getNumberOfRemainingRecords());\n      }\n      assertNull(reader.next());\n      assertEquals(0, reader.getNumberOfRemainingRecords());\n\n      // It should pick up the new tlog files\n      addDocs(10, start, versions);\n      assertEquals(10, reader.getNumberOfRemainingRecords());\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testGetNumberOfRemainingRecords().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testGetNumberOfRemainingRecords().mjava","sourceNew":"  /**\n   * Check that the reader is correctly reset to its last position\n   */\n  @Test\n  public void testGetNumberOfRemainingRecords() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplayFinish = new Semaphore(0);\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      this.clearCore();\n\n      int start = 0;\n\n      LinkedList<Long> versions = new LinkedList<>();\n      addDocs(10, start, versions);\n      start += 10;\n      assertU(commit());\n\n      addDocs(10, start, versions);\n      start += 10;\n\n      h.close();\n      logReplayFinish.drainPermits();\n      createCore();\n\n      // At this stage, we have re-opened a capped tlog, and an uncapped tlog.\n      // check that the number of remaining records is correctly computed in these two cases\n\n      CdcrUpdateLog ulog = (CdcrUpdateLog) h.getCore().getUpdateHandler().getUpdateLog();\n      CdcrUpdateLog.CdcrLogReader reader = ulog.newLogReader();\n\n      // wait for the replay to finish\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      // 20 records + 2 commits\n      assertEquals(22, reader.getNumberOfRemainingRecords());\n\n      for (int i = 0; i < 22; i++) {\n        Object o = reader.next();\n        assertNotNull(o);\n        assertEquals(22 - (i + 1), reader.getNumberOfRemainingRecords());\n      }\n      assertNull(reader.next());\n      assertEquals(0, reader.getNumberOfRemainingRecords());\n\n      // It should pick up the new tlog files\n      addDocs(10, start, versions);\n      assertEquals(10, reader.getNumberOfRemainingRecords());\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Check that the reader is correctly reset to its last position\n   */\n  @Test\n  public void testGetNumberOfRemainingRecords() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplayFinish = new Semaphore(0);\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      this.clearCore();\n\n      int start = 0;\n\n      LinkedList<Long> versions = new LinkedList<>();\n      addDocs(10, start, versions);\n      start += 10;\n      assertU(commit());\n\n      addDocs(10, start, versions);\n      start += 10;\n\n      h.close();\n      logReplayFinish.drainPermits();\n      createCore();\n\n      // At this stage, we have re-opened a capped tlog, and an uncapped tlog.\n      // check that the number of remaining records is correctly computed in these two cases\n\n      CdcrUpdateLog ulog = (CdcrUpdateLog) h.getCore().getUpdateHandler().getUpdateLog();\n      CdcrUpdateLog.CdcrLogReader reader = ulog.newLogReader();\n\n      // wait for the replay to finish\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      // 20 records + 2 commits\n      assertEquals(22, reader.getNumberOfRemainingRecords());\n\n      for (int i = 0; i < 22; i++) {\n        Object o = reader.next();\n        assertNotNull(o);\n        assertEquals(22 - (i + 1), reader.getNumberOfRemainingRecords());\n      }\n      assertNull(reader.next());\n      assertEquals(0, reader.getNumberOfRemainingRecords());\n\n      // It should pick up the new tlog files\n      addDocs(10, start, versions);\n      assertEquals(10, reader.getNumberOfRemainingRecords());\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1","date":1579200426,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testGetNumberOfRemainingRecords().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testGetNumberOfRemainingRecords().mjava","sourceNew":"  /**\n   * Check that the reader is correctly reset to its last position\n   */\n  @Test\n  public void testGetNumberOfRemainingRecords() throws Exception {\n    try {\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplayFinish = new Semaphore(0);\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      this.clearCore();\n\n      int start = 0;\n\n      LinkedList<Long> versions = new LinkedList<>();\n      addDocs(10, start, versions);\n      start += 10;\n      assertU(commit());\n\n      addDocs(10, start, versions);\n      start += 10;\n\n      h.close();\n      logReplayFinish.drainPermits();\n      createCore();\n\n      // At this stage, we have re-opened a capped tlog, and an uncapped tlog.\n      // check that the number of remaining records is correctly computed in these two cases\n\n      CdcrUpdateLog ulog = (CdcrUpdateLog) h.getCore().getUpdateHandler().getUpdateLog();\n      CdcrUpdateLog.CdcrLogReader reader = ulog.newLogReader();\n\n      // wait for the replay to finish\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      // 20 records + 2 commits\n      assertEquals(22, reader.getNumberOfRemainingRecords());\n\n      for (int i = 0; i < 22; i++) {\n        Object o = reader.next();\n        assertNotNull(o);\n        assertEquals(22 - (i + 1), reader.getNumberOfRemainingRecords());\n      }\n      assertNull(reader.next());\n      assertEquals(0, reader.getNumberOfRemainingRecords());\n\n      // It should pick up the new tlog files\n      addDocs(10, start, versions);\n      assertEquals(10, reader.getNumberOfRemainingRecords());\n    } finally {\n      TestInjection.skipIndexWriterCommitOnClose = false; // reset\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Check that the reader is correctly reset to its last position\n   */\n  @Test\n  public void testGetNumberOfRemainingRecords() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplayFinish = new Semaphore(0);\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      this.clearCore();\n\n      int start = 0;\n\n      LinkedList<Long> versions = new LinkedList<>();\n      addDocs(10, start, versions);\n      start += 10;\n      assertU(commit());\n\n      addDocs(10, start, versions);\n      start += 10;\n\n      h.close();\n      logReplayFinish.drainPermits();\n      createCore();\n\n      // At this stage, we have re-opened a capped tlog, and an uncapped tlog.\n      // check that the number of remaining records is correctly computed in these two cases\n\n      CdcrUpdateLog ulog = (CdcrUpdateLog) h.getCore().getUpdateHandler().getUpdateLog();\n      CdcrUpdateLog.CdcrLogReader reader = ulog.newLogReader();\n\n      // wait for the replay to finish\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      // 20 records + 2 commits\n      assertEquals(22, reader.getNumberOfRemainingRecords());\n\n      for (int i = 0; i < 22; i++) {\n        Object o = reader.next();\n        assertNotNull(o);\n        assertEquals(22 - (i + 1), reader.getNumberOfRemainingRecords());\n      }\n      assertNull(reader.next());\n      assertEquals(0, reader.getNumberOfRemainingRecords());\n\n      // It should pick up the new tlog files\n      addDocs(10, start, versions);\n      assertEquals(10, reader.getNumberOfRemainingRecords());\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/CdcrUpdateLogTest#testGetNumberOfRemainingRecords().mjava","sourceNew":null,"sourceOld":"  /**\n   * Check that the reader is correctly reset to its last position\n   */\n  @Test\n  public void testGetNumberOfRemainingRecords() throws Exception {\n    try {\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplayFinish = new Semaphore(0);\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      this.clearCore();\n\n      int start = 0;\n\n      LinkedList<Long> versions = new LinkedList<>();\n      addDocs(10, start, versions);\n      start += 10;\n      assertU(commit());\n\n      addDocs(10, start, versions);\n      start += 10;\n\n      h.close();\n      logReplayFinish.drainPermits();\n      createCore();\n\n      // At this stage, we have re-opened a capped tlog, and an uncapped tlog.\n      // check that the number of remaining records is correctly computed in these two cases\n\n      CdcrUpdateLog ulog = (CdcrUpdateLog) h.getCore().getUpdateHandler().getUpdateLog();\n      CdcrUpdateLog.CdcrLogReader reader = ulog.newLogReader();\n\n      // wait for the replay to finish\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      // 20 records + 2 commits\n      assertEquals(22, reader.getNumberOfRemainingRecords());\n\n      for (int i = 0; i < 22; i++) {\n        Object o = reader.next();\n        assertNotNull(o);\n        assertEquals(22 - (i + 1), reader.getNumberOfRemainingRecords());\n      }\n      assertNull(reader.next());\n      assertEquals(0, reader.getNumberOfRemainingRecords());\n\n      // It should pick up the new tlog files\n      addDocs(10, start, versions);\n      assertEquals(10, reader.getNumberOfRemainingRecords());\n    } finally {\n      TestInjection.skipIndexWriterCommitOnClose = false; // reset\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["3a0c04b71951333291abc7f317109a6a5957bd28"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"3a0c04b71951333291abc7f317109a6a5957bd28":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["3a0c04b71951333291abc7f317109a6a5957bd28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a0c04b71951333291abc7f317109a6a5957bd28":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}