{"path":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointInSetQueryManyEqualValuesWithBigGap().mjava","commits":[{"id":"96ae115468a08fb03270562a0121761d73c2c8c1","date":1456307437,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointInSetQueryManyEqualValuesWithBigGap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointInSetQueryManyEqualValuesBigGap().mjava","sourceNew":"  public void testPointInSetQueryManyEqualValuesWithBigGap() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    int zeroCount = 0;\n    for(int i=0;i<10000;i++) {\n      int x = 200 * random().nextInt(2);\n      if (x == 0) {\n        zeroCount++;\n      }\n      Document doc = new Document();\n      doc.add(new IntPoint(\"int\", x));\n      doc.add(new LongPoint(\"long\", x));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0, -7)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(IntPoint.newSetQuery(\"int\", 200)));\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 2)));\n\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0, -7)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(LongPoint.newSetQuery(\"long\", 200)));\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 2)));\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPointInSetQueryManyEqualValuesBigGap() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    int zeroCount = 0;\n    for(int i=0;i<10000;i++) {\n      int x = 200 * random().nextInt(2);\n      if (x == 0) {\n        zeroCount++;\n      }\n      Document doc = new Document();\n      doc.add(new IntPoint(\"int\", x));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0, -7)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(IntPoint.newSetQuery(\"int\", 200)));\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 2)));\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a577e4497932469db8eefa9fbecf4cb9265be98","date":1456321690,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointInSetQueryManyEqualValuesWithBigGap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointInSetQueryManyEqualValuesWithBigGap().mjava","sourceNew":"  public void testPointInSetQueryManyEqualValuesWithBigGap() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    int zeroCount = 0;\n    for(int i=0;i<10000;i++) {\n      int x = 200 * random().nextInt(2);\n      if (x == 0) {\n        zeroCount++;\n      }\n      Document doc = new Document();\n      doc.add(new IntPoint(\"int\", x));\n      doc.add(new LongPoint(\"long\", (long) x));\n      doc.add(new FloatPoint(\"float\", (float) x));\n      doc.add(new DoublePoint(\"double\", (double) x));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0, -7)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(IntPoint.newSetQuery(\"int\", 200)));\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 2)));\n\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0, -7)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(LongPoint.newSetQuery(\"long\", 200)));\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 2)));\n\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 0)));\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 0, -7)));\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 200)));\n    assertEquals(0, s.count(FloatPoint.newSetQuery(\"float\", 2)));\n\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 0)));\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 0, -7)));\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 200)));\n    assertEquals(0, s.count(DoublePoint.newSetQuery(\"double\", 2)));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPointInSetQueryManyEqualValuesWithBigGap() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    int zeroCount = 0;\n    for(int i=0;i<10000;i++) {\n      int x = 200 * random().nextInt(2);\n      if (x == 0) {\n        zeroCount++;\n      }\n      Document doc = new Document();\n      doc.add(new IntPoint(\"int\", x));\n      doc.add(new LongPoint(\"long\", x));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0, -7)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(IntPoint.newSetQuery(\"int\", 200)));\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 2)));\n\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0, -7)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(LongPoint.newSetQuery(\"long\", 200)));\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 2)));\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f429037bedccb27766e77f5e772b291a8d1bc97c","date":1456353956,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointInSetQueryManyEqualValuesWithBigGap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointInSetQueryManyEqualValuesWithBigGap().mjava","sourceNew":"  public void testPointInSetQueryManyEqualValuesWithBigGap() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    int zeroCount = 0;\n    for(int i=0;i<10000;i++) {\n      int x = 200 * random().nextInt(2);\n      if (x == 0) {\n        zeroCount++;\n      }\n      Document doc = new Document();\n      doc.add(new IntPoint(\"int\", x));\n      doc.add(new LongPoint(\"long\", (long) x));\n      doc.add(new FloatPoint(\"float\", (float) x));\n      doc.add(new DoublePoint(\"double\", (double) x));\n      doc.add(new BinaryPoint(\"bytes\", new byte[] {(byte) x}));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0, -7)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(IntPoint.newSetQuery(\"int\", 200)));\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 2)));\n\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0, -7)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(LongPoint.newSetQuery(\"long\", 200)));\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 2)));\n\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 0)));\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 0, -7)));\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 200)));\n    assertEquals(0, s.count(FloatPoint.newSetQuery(\"float\", 2)));\n\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 0)));\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 0, -7)));\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 200)));\n    assertEquals(0, s.count(DoublePoint.newSetQuery(\"double\", 2)));\n\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0})));\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0}, new byte[] {-7})));\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {7}, new byte[] {0})));\n    assertEquals(10000-zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {(byte) 200})));\n    assertEquals(0, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {2})));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPointInSetQueryManyEqualValuesWithBigGap() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    int zeroCount = 0;\n    for(int i=0;i<10000;i++) {\n      int x = 200 * random().nextInt(2);\n      if (x == 0) {\n        zeroCount++;\n      }\n      Document doc = new Document();\n      doc.add(new IntPoint(\"int\", x));\n      doc.add(new LongPoint(\"long\", (long) x));\n      doc.add(new FloatPoint(\"float\", (float) x));\n      doc.add(new DoublePoint(\"double\", (double) x));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0, -7)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(IntPoint.newSetQuery(\"int\", 200)));\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 2)));\n\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0, -7)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(LongPoint.newSetQuery(\"long\", 200)));\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 2)));\n\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 0)));\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 0, -7)));\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 200)));\n    assertEquals(0, s.count(FloatPoint.newSetQuery(\"float\", 2)));\n\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 0)));\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 0, -7)));\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 200)));\n    assertEquals(0, s.count(DoublePoint.newSetQuery(\"double\", 2)));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868f63baffb79407d4b49f3c0be8dc4725ffc6e1","date":1456423715,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointInSetQueryManyEqualValuesWithBigGap().mjava","pathOld":"/dev/null","sourceNew":"  public void testPointInSetQueryManyEqualValuesWithBigGap() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    int zeroCount = 0;\n    for(int i=0;i<10000;i++) {\n      int x = 200 * random().nextInt(2);\n      if (x == 0) {\n        zeroCount++;\n      }\n      Document doc = new Document();\n      doc.add(new IntPoint(\"int\", x));\n      doc.add(new LongPoint(\"long\", (long) x));\n      doc.add(new FloatPoint(\"float\", (float) x));\n      doc.add(new DoublePoint(\"double\", (double) x));\n      doc.add(new BinaryPoint(\"bytes\", new byte[] {(byte) x}));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0, -7)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(IntPoint.newSetQuery(\"int\", 200)));\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 2)));\n\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0, -7)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(LongPoint.newSetQuery(\"long\", 200)));\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 2)));\n\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 0)));\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 0, -7)));\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 200)));\n    assertEquals(0, s.count(FloatPoint.newSetQuery(\"float\", 2)));\n\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 0)));\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 0, -7)));\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 200)));\n    assertEquals(0, s.count(DoublePoint.newSetQuery(\"double\", 2)));\n\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0})));\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0}, new byte[] {-7})));\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {7}, new byte[] {0})));\n    assertEquals(10000-zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {(byte) 200})));\n    assertEquals(0, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {2})));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","date":1456936072,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointInSetQueryManyEqualValuesWithBigGap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointInSetQueryManyEqualValuesWithBigGap().mjava","sourceNew":"  public void testPointInSetQueryManyEqualValuesWithBigGap() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    int zeroCount = 0;\n    for(int i=0;i<10000;i++) {\n      int x = 200 * random().nextInt(2);\n      if (x == 0) {\n        zeroCount++;\n      }\n      Document doc = new Document();\n      doc.add(new IntPoint(\"int\", x));\n      doc.add(new LongPoint(\"long\", (long) x));\n      doc.add(new FloatPoint(\"float\", (float) x));\n      doc.add(new DoublePoint(\"double\", (double) x));\n      doc.add(new BinaryPoint(\"bytes\", new byte[] {(byte) x}));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r, false);\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0, -7)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(IntPoint.newSetQuery(\"int\", 200)));\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 2)));\n\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0, -7)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(LongPoint.newSetQuery(\"long\", 200)));\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 2)));\n\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 0)));\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 0, -7)));\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 200)));\n    assertEquals(0, s.count(FloatPoint.newSetQuery(\"float\", 2)));\n\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 0)));\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 0, -7)));\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 200)));\n    assertEquals(0, s.count(DoublePoint.newSetQuery(\"double\", 2)));\n\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0})));\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0}, new byte[] {-7})));\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {7}, new byte[] {0})));\n    assertEquals(10000-zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {(byte) 200})));\n    assertEquals(0, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {2})));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPointInSetQueryManyEqualValuesWithBigGap() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    int zeroCount = 0;\n    for(int i=0;i<10000;i++) {\n      int x = 200 * random().nextInt(2);\n      if (x == 0) {\n        zeroCount++;\n      }\n      Document doc = new Document();\n      doc.add(new IntPoint(\"int\", x));\n      doc.add(new LongPoint(\"long\", (long) x));\n      doc.add(new FloatPoint(\"float\", (float) x));\n      doc.add(new DoublePoint(\"double\", (double) x));\n      doc.add(new BinaryPoint(\"bytes\", new byte[] {(byte) x}));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0, -7)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(IntPoint.newSetQuery(\"int\", 200)));\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 2)));\n\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0, -7)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(LongPoint.newSetQuery(\"long\", 200)));\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 2)));\n\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 0)));\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 0, -7)));\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 200)));\n    assertEquals(0, s.count(FloatPoint.newSetQuery(\"float\", 2)));\n\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 0)));\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 0, -7)));\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 200)));\n    assertEquals(0, s.count(DoublePoint.newSetQuery(\"double\", 2)));\n\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0})));\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0}, new byte[] {-7})));\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {7}, new byte[] {0})));\n    assertEquals(10000-zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {(byte) 200})));\n    assertEquals(0, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {2})));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointInSetQueryManyEqualValuesWithBigGap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointInSetQueryManyEqualValuesWithBigGap().mjava","sourceNew":"  public void testPointInSetQueryManyEqualValuesWithBigGap() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    int zeroCount = 0;\n    for(int i=0;i<10000;i++) {\n      int x = 200 * random().nextInt(2);\n      if (x == 0) {\n        zeroCount++;\n      }\n      Document doc = new Document();\n      doc.add(new IntPoint(\"int\", x));\n      doc.add(new LongPoint(\"long\", (long) x));\n      doc.add(new FloatPoint(\"float\", (float) x));\n      doc.add(new DoublePoint(\"double\", (double) x));\n      doc.add(new BinaryPoint(\"bytes\", new byte[] {(byte) x}));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r, false);\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0, -7)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(IntPoint.newSetQuery(\"int\", 200)));\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 2)));\n\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0, -7)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(LongPoint.newSetQuery(\"long\", 200)));\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 2)));\n\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 0)));\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 0, -7)));\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 200)));\n    assertEquals(0, s.count(FloatPoint.newSetQuery(\"float\", 2)));\n\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 0)));\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 0, -7)));\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 200)));\n    assertEquals(0, s.count(DoublePoint.newSetQuery(\"double\", 2)));\n\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0})));\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0}, new byte[] {-7})));\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {7}, new byte[] {0})));\n    assertEquals(10000-zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {(byte) 200})));\n    assertEquals(0, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {2})));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPointInSetQueryManyEqualValuesWithBigGap() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    int zeroCount = 0;\n    for(int i=0;i<10000;i++) {\n      int x = 200 * random().nextInt(2);\n      if (x == 0) {\n        zeroCount++;\n      }\n      Document doc = new Document();\n      doc.add(new IntPoint(\"int\", x));\n      doc.add(new LongPoint(\"long\", (long) x));\n      doc.add(new FloatPoint(\"float\", (float) x));\n      doc.add(new DoublePoint(\"double\", (double) x));\n      doc.add(new BinaryPoint(\"bytes\", new byte[] {(byte) x}));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 0, -7)));\n    assertEquals(zeroCount, s.count(IntPoint.newSetQuery(\"int\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(IntPoint.newSetQuery(\"int\", 200)));\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 2)));\n\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 0, -7)));\n    assertEquals(zeroCount, s.count(LongPoint.newSetQuery(\"long\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(LongPoint.newSetQuery(\"long\", 200)));\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 2)));\n\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 0)));\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 0, -7)));\n    assertEquals(zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(FloatPoint.newSetQuery(\"float\", 200)));\n    assertEquals(0, s.count(FloatPoint.newSetQuery(\"float\", 2)));\n\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 0)));\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 0, -7)));\n    assertEquals(zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 7, 0)));\n    assertEquals(10000-zeroCount, s.count(DoublePoint.newSetQuery(\"double\", 200)));\n    assertEquals(0, s.count(DoublePoint.newSetQuery(\"double\", 2)));\n\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0})));\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0}, new byte[] {-7})));\n    assertEquals(zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {7}, new byte[] {0})));\n    assertEquals(10000-zeroCount, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {(byte) 200})));\n    assertEquals(0, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {2})));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a577e4497932469db8eefa9fbecf4cb9265be98":["96ae115468a08fb03270562a0121761d73c2c8c1"],"f429037bedccb27766e77f5e772b291a8d1bc97c":["4a577e4497932469db8eefa9fbecf4cb9265be98"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f429037bedccb27766e77f5e772b291a8d1bc97c"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"96ae115468a08fb03270562a0121761d73c2c8c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"4a577e4497932469db8eefa9fbecf4cb9265be98":["f429037bedccb27766e77f5e772b291a8d1bc97c"],"f429037bedccb27766e77f5e772b291a8d1bc97c":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","96ae115468a08fb03270562a0121761d73c2c8c1"],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96ae115468a08fb03270562a0121761d73c2c8c1":["4a577e4497932469db8eefa9fbecf4cb9265be98"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}