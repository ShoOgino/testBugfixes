{"path":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand( optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand( optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand( optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand( optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand( optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","date":1293733647,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand( optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand( optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand( optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f16d28cc015e89676eb4465f05e003f430057587","date":1296442780,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(SolrQueryRequest,UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(SolrQueryRequest,UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(SolrQueryRequest,UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(SolrQueryRequest,UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.softCommit = params.getBool( UpdateParams.SOFT_COMMIT, cmd.softCommit );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(SolrQueryRequest,UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(SolrQueryRequest,UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.softCommit = params.getBool( UpdateParams.SOFT_COMMIT, cmd.softCommit );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(SolrQueryRequest,UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(SolrQueryRequest,UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.softCommit = params.getBool( UpdateParams.SOFT_COMMIT, cmd.softCommit );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(SolrQueryRequest,UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(SolrQueryRequest,UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.softCommit = params.getBool( UpdateParams.SOFT_COMMIT, cmd.softCommit );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(SolrQueryRequest,UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.softCommit = params.getBool( UpdateParams.SOFT_COMMIT, cmd.softCommit );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(SolrQueryRequest,UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.softCommit = params.getBool( UpdateParams.SOFT_COMMIT, cmd.softCommit );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(SolrQueryRequest,UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.softCommit = params.getBool( UpdateParams.SOFT_COMMIT, cmd.softCommit );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(SolrQueryRequest,SolrQueryResponse,boolean).mjava","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(SolrQueryRequest,UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.softCommit = params.getBool( UpdateParams.SOFT_COMMIT, cmd.softCommit );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   * \n   * @deprecated Use {@link #handleCommit(SolrQueryRequest,UpdateRequestProcessor,SolrParams,boolean)}\n   *\n   * @since solr 1.2\n   */\n  @Deprecated\n  public static boolean handleCommit( SolrQueryRequest req, SolrQueryResponse rsp, boolean force ) throws IOException\n  {\n    SolrParams params = req.getParams();\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand(req, optimize );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.softCommit = params.getBool( UpdateParams.SOFT_COMMIT, cmd.softCommit );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      req.getCore().getUpdateHandler().commit( cmd );\n      \n      // Lets wait till after solr1.2 to define consistent output format\n      //if( optimize ) {\n      //  rsp.add( \"optimize\", true );\n      //}\n      //else {\n      //  rsp.add( \"commit\", true );\n      //}\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"f16d28cc015e89676eb4465f05e003f430057587":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"c26f00b574427b55127e869b935845554afde1fa":["7a71a0b2d4be2299a163f60626729852d81a8e02","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f16d28cc015e89676eb4465f05e003f430057587","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["f16d28cc015e89676eb4465f05e003f430057587","7a71a0b2d4be2299a163f60626729852d81a8e02"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["f16d28cc015e89676eb4465f05e003f430057587"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","f16d28cc015e89676eb4465f05e003f430057587"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","f16d28cc015e89676eb4465f05e003f430057587"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"f16d28cc015e89676eb4465f05e003f430057587":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","7a71a0b2d4be2299a163f60626729852d81a8e02","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["70ad682703b8585f5d0a637efec044d57ec05efb","f16d28cc015e89676eb4465f05e003f430057587","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}