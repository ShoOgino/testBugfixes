{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillDownQuery#add(String,char,FacetLabel...).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillDownQuery#add(String,char,FacetLabel...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillDownQuery#add(String,char,CategoryPath...).mjava","sourceNew":"  // nocommit can we remove CatPath here?\n  public void add(String field, char delimChar, FacetLabel... paths) {\n    Query q;\n    if (paths[0].length == 0) {\n      throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n    }\n    String dim = paths[0].components[0];\n    if (drillDownDims.containsKey(dim)) {\n      throw new IllegalArgumentException(\"dimension '\" + dim + \"' was already added\");\n    }\n    if (paths.length == 1) {\n      q = new TermQuery(term(field, delimChar, paths[0]));\n    } else {\n      BooleanQuery bq = new BooleanQuery(true); // disable coord\n      for (FacetLabel cp : paths) {\n        if (cp.length == 0) {\n          throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n        }\n        if (!cp.components[0].equals(dim)) {\n          throw new IllegalArgumentException(\"multiple (OR'd) drill-down paths must be under same dimension; got '\" \n              + dim + \"' and '\" + cp.components[0] + \"'\");\n        }\n        bq.add(new TermQuery(term(field, delimChar, cp)), Occur.SHOULD);\n      }\n      q = bq;\n    }\n\n    add(dim, q);\n  }\n\n","sourceOld":"  // nocommit can we remove CatPath here?\n  public void add(String field, char delimChar, CategoryPath... paths) {\n    Query q;\n    if (paths[0].length == 0) {\n      throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n    }\n    String dim = paths[0].components[0];\n    if (drillDownDims.containsKey(dim)) {\n      throw new IllegalArgumentException(\"dimension '\" + dim + \"' was already added\");\n    }\n    if (paths.length == 1) {\n      q = new TermQuery(term(field, delimChar, paths[0]));\n    } else {\n      BooleanQuery bq = new BooleanQuery(true); // disable coord\n      for (CategoryPath cp : paths) {\n        if (cp.length == 0) {\n          throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n        }\n        if (!cp.components[0].equals(dim)) {\n          throw new IllegalArgumentException(\"multiple (OR'd) drill-down paths must be under same dimension; got '\" \n              + dim + \"' and '\" + cp.components[0] + \"'\");\n        }\n        bq.add(new TermQuery(term(field, delimChar, cp)), Occur.SHOULD);\n      }\n      q = bq;\n    }\n\n    add(dim, q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28ac5cee8abf30398e12bc016a5ce9d441831a63","date":1384691298,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillDownQuery#add(String,char,FacetLabel...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillDownQuery#add(String,char,FacetLabel...).mjava","sourceNew":"  // nocommit can we remove FacetLabel here?\n  public void add(String field, char delimChar, FacetLabel... paths) {\n    Query q;\n    if (paths[0].length == 0) {\n      throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n    }\n    String dim = paths[0].components[0];\n    if (drillDownDims.containsKey(dim)) {\n      throw new IllegalArgumentException(\"dimension '\" + dim + \"' was already added\");\n    }\n    if (paths.length == 1) {\n      q = new TermQuery(term(field, delimChar, paths[0]));\n    } else {\n      BooleanQuery bq = new BooleanQuery(true); // disable coord\n      for (FacetLabel cp : paths) {\n        if (cp.length == 0) {\n          throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n        }\n        if (!cp.components[0].equals(dim)) {\n          throw new IllegalArgumentException(\"multiple (OR'd) drill-down paths must be under same dimension; got '\" \n              + dim + \"' and '\" + cp.components[0] + \"'\");\n        }\n        bq.add(new TermQuery(term(field, delimChar, cp)), Occur.SHOULD);\n      }\n      q = bq;\n    }\n\n    add(dim, q);\n  }\n\n","sourceOld":"  // nocommit can we remove CatPath here?\n  public void add(String field, char delimChar, FacetLabel... paths) {\n    Query q;\n    if (paths[0].length == 0) {\n      throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n    }\n    String dim = paths[0].components[0];\n    if (drillDownDims.containsKey(dim)) {\n      throw new IllegalArgumentException(\"dimension '\" + dim + \"' was already added\");\n    }\n    if (paths.length == 1) {\n      q = new TermQuery(term(field, delimChar, paths[0]));\n    } else {\n      BooleanQuery bq = new BooleanQuery(true); // disable coord\n      for (FacetLabel cp : paths) {\n        if (cp.length == 0) {\n          throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n        }\n        if (!cp.components[0].equals(dim)) {\n          throw new IllegalArgumentException(\"multiple (OR'd) drill-down paths must be under same dimension; got '\" \n              + dim + \"' and '\" + cp.components[0] + \"'\");\n        }\n        bq.add(new TermQuery(term(field, delimChar, cp)), Occur.SHOULD);\n      }\n      q = bq;\n    }\n\n    add(dim, q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fdb15e93058f718a65d564872aadbed5ca78296","date":1384720267,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillDownQuery#add(String,char,FacetLabel...).mjava","sourceNew":null,"sourceOld":"  // nocommit can we remove FacetLabel here?\n  public void add(String field, char delimChar, FacetLabel... paths) {\n    Query q;\n    if (paths[0].length == 0) {\n      throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n    }\n    String dim = paths[0].components[0];\n    if (drillDownDims.containsKey(dim)) {\n      throw new IllegalArgumentException(\"dimension '\" + dim + \"' was already added\");\n    }\n    if (paths.length == 1) {\n      q = new TermQuery(term(field, delimChar, paths[0]));\n    } else {\n      BooleanQuery bq = new BooleanQuery(true); // disable coord\n      for (FacetLabel cp : paths) {\n        if (cp.length == 0) {\n          throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n        }\n        if (!cp.components[0].equals(dim)) {\n          throw new IllegalArgumentException(\"multiple (OR'd) drill-down paths must be under same dimension; got '\" \n              + dim + \"' and '\" + cp.components[0] + \"'\");\n        }\n        bq.add(new TermQuery(term(field, delimChar, cp)), Occur.SHOULD);\n      }\n      q = bq;\n    }\n\n    add(dim, q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"28ac5cee8abf30398e12bc016a5ce9d441831a63":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"9fdb15e93058f718a65d564872aadbed5ca78296":["28ac5cee8abf30398e12bc016a5ce9d441831a63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"28ac5cee8abf30398e12bc016a5ce9d441831a63":["9fdb15e93058f718a65d564872aadbed5ca78296"],"9fdb15e93058f718a65d564872aadbed5ca78296":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["28ac5cee8abf30398e12bc016a5ce9d441831a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9fdb15e93058f718a65d564872aadbed5ca78296","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}