{"path":"lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute#fillBytesRef().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute#fillBytesRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute#fillBytesRef().mjava","sourceNew":"  /** \n   * Updates the bytes {@link #getBytesRef()} to contain this term's\n   * final encoding, and returns its hashcode.\n   * @return the hashcode as defined by {@link BytesRef#hashCode}:\n   * <pre>\n   *  int hash = 0;\n   *  for (int i = termBytes.offset; i &lt; termBytes.offset+termBytes.length; i++) {\n   *    hash = 31*hash + termBytes.bytes[i];\n   *  }\n   * </pre>\n   * Implement this for performance reasons, if your code can calculate\n   * the hash on-the-fly. If this is not the case, just return\n   * {@code termBytes.hashCode()}.\n   */\n  public int fillBytesRef();\n\n","sourceOld":"  /** \n   * Updates the bytes {@link #getBytesRef()} to contain this term's\n   * final encoding, and returns its hashcode.\n   * @return the hashcode as defined by {@link BytesRef#hashCode}:\n   * <pre>\n   *  int hash = 0;\n   *  for (int i = termBytes.offset; i &lt; termBytes.offset+termBytes.length; i++) {\n   *    hash = 31*hash + termBytes.bytes[i];\n   *  }\n   * </pre>\n   * Implement this for performance reasons, if your code can calculate\n   * the hash on-the-fly. If this is not the case, just return\n   * {@code termBytes.hashCode()}.\n   */\n  public int fillBytesRef();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27f7a67b528a360bdc01ea05af57e6459fe42ac0","date":1346299172,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute#fillBytesRef().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute#fillBytesRef().mjava","sourceNew":"  /** \n   * Updates the bytes {@link #getBytesRef()} to contain this term's\n   * final encoding, and returns its hashcode.\n   * @return the hashcode as defined by {@link BytesRef#hashCode}:\n   * <pre class=\"prettyprint\">\n   *  int hash = 0;\n   *  for (int i = termBytes.offset; i &lt; termBytes.offset+termBytes.length; i++) {\n   *    hash = 31*hash + termBytes.bytes[i];\n   *  }\n   * </pre>\n   * Implement this for performance reasons, if your code can calculate\n   * the hash on-the-fly. If this is not the case, just return\n   * {@code termBytes.hashCode()}.\n   */\n  public int fillBytesRef();\n\n","sourceOld":"  /** \n   * Updates the bytes {@link #getBytesRef()} to contain this term's\n   * final encoding, and returns its hashcode.\n   * @return the hashcode as defined by {@link BytesRef#hashCode}:\n   * <pre>\n   *  int hash = 0;\n   *  for (int i = termBytes.offset; i &lt; termBytes.offset+termBytes.length; i++) {\n   *    hash = 31*hash + termBytes.bytes[i];\n   *  }\n   * </pre>\n   * Implement this for performance reasons, if your code can calculate\n   * the hash on-the-fly. If this is not the case, just return\n   * {@code termBytes.hashCode()}.\n   */\n  public int fillBytesRef();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute#fillBytesRef().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute#fillBytesRef().mjava","sourceNew":"  /** \n   * Updates the bytes {@link #getBytesRef()} to contain this term's\n   * final encoding, and returns its hashcode.\n   * @return the hashcode as defined by {@link BytesRef#hashCode}:\n   * <pre class=\"prettyprint\">\n   *  int hash = 0;\n   *  for (int i = termBytes.offset; i &lt; termBytes.offset+termBytes.length; i++) {\n   *    hash = 31*hash + termBytes.bytes[i];\n   *  }\n   * </pre>\n   * Implement this for performance reasons, if your code can calculate\n   * the hash on-the-fly. If this is not the case, just return\n   * {@code termBytes.hashCode()}.\n   */\n  public int fillBytesRef();\n\n","sourceOld":"  /** \n   * Updates the bytes {@link #getBytesRef()} to contain this term's\n   * final encoding, and returns its hashcode.\n   * @return the hashcode as defined by {@link BytesRef#hashCode}:\n   * <pre>\n   *  int hash = 0;\n   *  for (int i = termBytes.offset; i &lt; termBytes.offset+termBytes.length; i++) {\n   *    hash = 31*hash + termBytes.bytes[i];\n   *  }\n   * </pre>\n   * Implement this for performance reasons, if your code can calculate\n   * the hash on-the-fly. If this is not the case, just return\n   * {@code termBytes.hashCode()}.\n   */\n  public int fillBytesRef();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fe9fa09df804ce770f1b667401a7a7647301ed","date":1397554534,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute#fillBytesRef().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute#fillBytesRef().mjava","sourceNew":"  /** \n   * Updates the bytes {@link #getBytesRef()} to contain this term's\n   * final encoding.\n   */\n  public void fillBytesRef();\n\n","sourceOld":"  /** \n   * Updates the bytes {@link #getBytesRef()} to contain this term's\n   * final encoding, and returns its hashcode.\n   * @return the hashcode as defined by {@link BytesRef#hashCode}:\n   * <pre class=\"prettyprint\">\n   *  int hash = 0;\n   *  for (int i = termBytes.offset; i &lt; termBytes.offset+termBytes.length; i++) {\n   *    hash = 31*hash + termBytes.bytes[i];\n   *  }\n   * </pre>\n   * Implement this for performance reasons, if your code can calculate\n   * the hash on-the-fly. If this is not the case, just return\n   * {@code termBytes.hashCode()}.\n   */\n  public int fillBytesRef();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804b857d1066ab5185b3b9101bde41b0b71426ec","date":1435846169,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute#fillBytesRef().mjava","sourceNew":null,"sourceOld":"  /** \n   * Updates the bytes {@link #getBytesRef()} to contain this term's\n   * final encoding.\n   */\n  public void fillBytesRef();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["30fe9fa09df804ce770f1b667401a7a7647301ed"],"30fe9fa09df804ce770f1b667401a7a7647301ed":["27f7a67b528a360bdc01ea05af57e6459fe42ac0"],"27f7a67b528a360bdc01ea05af57e6459fe42ac0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","27f7a67b528a360bdc01ea05af57e6459fe42ac0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804b857d1066ab5185b3b9101bde41b0b71426ec"]},"commit2Childs":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30fe9fa09df804ce770f1b667401a7a7647301ed":["804b857d1066ab5185b3b9101bde41b0b71426ec"],"27f7a67b528a360bdc01ea05af57e6459fe42ac0":["30fe9fa09df804ce770f1b667401a7a7647301ed","05a14b2611ead08655a2b2bdc61632eb31316e57"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["27f7a67b528a360bdc01ea05af57e6459fe42ac0","05a14b2611ead08655a2b2bdc61632eb31316e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}