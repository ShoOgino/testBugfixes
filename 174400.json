{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper.SingleFieldWithOffsetsFilterLeafReader#terms(String).mjava","commits":[{"id":"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571","date":1515642580,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper.SingleFieldWithOffsetsFilterLeafReader#terms(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Terms terms(String field) throws IOException {\n      // ensure the underlying PostingsEnum returns offsets.  It's sad we have to do this to use the SpanCollector.\n      return new FilterTerms(super.terms(fieldName)) {\n        @Override\n        public TermsEnum iterator() throws IOException {\n          return new FilterTermsEnum(in.iterator()) {\n            @Override\n            public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n              return super.postings(reuse, flags | PostingsEnum.OFFSETS);\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper.SingleFieldWithOffsetsFilterLeafReader#terms(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Terms terms(String field) throws IOException {\n      // ensure the underlying PostingsEnum returns offsets.  It's sad we have to do this to use the SpanCollector.\n      return new FilterTerms(super.terms(fieldName)) {\n        @Override\n        public TermsEnum iterator() throws IOException {\n          return new FilterTermsEnum(in.iterator()) {\n            @Override\n            public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n              return super.postings(reuse, flags | PostingsEnum.OFFSETS);\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}