{"path":"lucene/src/java/org/apache/lucene/util/fst/Builder#compileNode(UnCompiledNode[T]).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#compileNode(UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compileNode(UnCompiledNode[T]).mjava","sourceNew":"  private CompiledNode compileNode(UnCompiledNode<T> n) throws IOException {\n\n    final int address;\n    if (dedupHash != null) {\n      if (n.numArcs == 0) {\n        address = fst.addNode(n);\n      } else {\n        address = dedupHash.add(n);\n      }\n    } else {\n      address = fst.addNode(n);\n    }\n    assert address != -2;\n\n    n.clear();\n\n    final CompiledNode fn = new CompiledNode();\n    fn.address = address;\n    return fn;\n  }\n\n","sourceOld":"  private CompiledNode compileNode(UnCompiledNode<T> n) throws IOException {\n\n    final int address;\n    if (dedupHash != null) {\n      if (n.numArcs == 0) {\n        address = fst.addNode(n);\n      } else {\n        address = dedupHash.add(n);\n      }\n    } else {\n      address = fst.addNode(n);\n    }\n    assert address != -2;\n\n    n.clear();\n\n    final CompiledNode fn = new CompiledNode();\n    fn.address = address;\n    return fn;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#compileNode(UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compileNode(UnCompiledNode[T]).mjava","sourceNew":"  private CompiledNode compileNode(UnCompiledNode<T> n) throws IOException {\n\n    final int address;\n    if (dedupHash != null) {\n      if (n.numArcs == 0) {\n        address = fst.addNode(n);\n      } else {\n        address = dedupHash.add(n);\n      }\n    } else {\n      address = fst.addNode(n);\n    }\n    assert address != -2;\n\n    n.clear();\n\n    final CompiledNode fn = new CompiledNode();\n    fn.address = address;\n    return fn;\n  }\n\n","sourceOld":"  private CompiledNode compileNode(UnCompiledNode<T> n) throws IOException {\n\n    final int address;\n    if (dedupHash != null) {\n      if (n.numArcs == 0) {\n        address = fst.addNode(n);\n      } else {\n        address = dedupHash.add(n);\n      }\n    } else {\n      address = fst.addNode(n);\n    }\n    assert address != -2;\n\n    n.clear();\n\n    final CompiledNode fn = new CompiledNode();\n    fn.address = address;\n    return fn;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#compileNode(UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compileNode(UnCompiledNode[T]).mjava","sourceNew":"  private CompiledNode compileNode(UnCompiledNode<T> n) throws IOException {\n\n    final int address;\n    if (dedupHash != null) {\n      if (n.numArcs == 0) {\n        address = fst.addNode(n);\n      } else {\n        address = dedupHash.add(n);\n      }\n    } else {\n      address = fst.addNode(n);\n    }\n    assert address != -2;\n\n    n.clear();\n\n    final CompiledNode fn = new CompiledNode();\n    fn.address = address;\n    return fn;\n  }\n\n","sourceOld":"  private CompiledNode compileNode(UnCompiledNode<T> n) throws IOException {\n\n    final int address;\n    if (dedupHash != null) {\n      if (n.numArcs == 0) {\n        address = fst.addNode(n);\n      } else {\n        address = dedupHash.add(n);\n      }\n    } else {\n      address = fst.addNode(n);\n    }\n    assert address != -2;\n\n    n.clear();\n\n    final CompiledNode fn = new CompiledNode();\n    fn.address = address;\n    return fn;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f2bf10c11daad40c1e46fabd0d414c19a3e605b","date":1310410393,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#compileNode(UnCompiledNode[T],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#compileNode(UnCompiledNode[T]).mjava","sourceNew":"  private CompiledNode compileNode(UnCompiledNode<T> n, int tailLength) throws IOException {\n    final int address;\n    if (dedupHash != null && (doShareNonSingletonNodes || n.numArcs <= 1) && tailLength <= shareMaxTailLength) {\n      if (n.numArcs == 0) {\n        address = fst.addNode(n);\n      } else {\n        address = dedupHash.add(n);\n      }\n    } else {\n      address = fst.addNode(n);\n    }\n    assert address != -2;\n\n    n.clear();\n\n    final CompiledNode fn = new CompiledNode();\n    fn.address = address;\n    return fn;\n  }\n\n","sourceOld":"  private CompiledNode compileNode(UnCompiledNode<T> n) throws IOException {\n\n    final int address;\n    if (dedupHash != null) {\n      if (n.numArcs == 0) {\n        address = fst.addNode(n);\n      } else {\n        address = dedupHash.add(n);\n      }\n    } else {\n      address = fst.addNode(n);\n    }\n    assert address != -2;\n\n    n.clear();\n\n    final CompiledNode fn = new CompiledNode();\n    fn.address = address;\n    return fn;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4f2bf10c11daad40c1e46fabd0d414c19a3e605b"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","4f2bf10c11daad40c1e46fabd0d414c19a3e605b","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}