{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xCodec#files(SegmentInfo,Set[String]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xCodec#files(SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xCodec#files(SegmentInfo,Set[String]).mjava","sourceNew":"  // overrides the default implementation in codec.java to handle CFS without CFE, \n  // shared doc stores, compound doc stores, separate norms, etc\n  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n    } else {\n      postingsFormat().files(info, \"\", files);\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n      fieldInfosFormat().files(info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(info, files);\n      normsFormat().files(info, files);\n    }\n    // never inside CFS\n    liveDocsFormat().files(info, files);\n    normsFormat().separateFiles(info, files);\n    \n    // shared docstores: these guys check the hair\n    if (info.getDocStoreOffset() != -1) {\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n    }\n  }  \n\n","sourceOld":"  // overrides the default implementation in codec.java to handle CFS without CFE, \n  // shared doc stores, compound doc stores, separate norms, etc\n  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n    } else {\n      postingsFormat().files(info, \"\", files);\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n      fieldInfosFormat().files(info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(info, files);\n      normsFormat().files(info, files);\n    }\n    // never inside CFS\n    liveDocsFormat().files(info, files);\n    normsFormat().separateFiles(info, files);\n    \n    // shared docstores: these guys check the hair\n    if (info.getDocStoreOffset() != -1) {\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8d47e5372d86c4c94d92a339505c58b06b3066","date":1335143685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xCodec#files(SegmentInfo,Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xCodec#files(SegmentInfo,Set[String]).mjava","sourceNew":"  // overrides the default implementation in codec.java to handle CFS without CFE, \n  // shared doc stores, compound doc stores, separate norms, etc\n  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n    } else {\n      postingsFormat().files(info, \"\", files);\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n      fieldInfosFormat().files(info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(info, files);\n      normsFormat().files(info, files);\n    }\n    // never inside CFS\n    liveDocsFormat().files(info, files);\n    ((Lucene3xNormsFormat)normsFormat()).separateFiles(info, files);\n    \n    // shared docstores: these guys check the hair\n    if (info.getDocStoreOffset() != -1) {\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n    }\n  }  \n\n","sourceOld":"  // overrides the default implementation in codec.java to handle CFS without CFE, \n  // shared doc stores, compound doc stores, separate norms, etc\n  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n    } else {\n      postingsFormat().files(info, \"\", files);\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n      fieldInfosFormat().files(info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(info, files);\n      normsFormat().files(info, files);\n    }\n    // never inside CFS\n    liveDocsFormat().files(info, files);\n    normsFormat().separateFiles(info, files);\n    \n    // shared docstores: these guys check the hair\n    if (info.getDocStoreOffset() != -1) {\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xCodec#files(SegmentInfo,Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xCodec#files(SegmentInfo,Set[String]).mjava","sourceNew":"  // overrides the default implementation in codec.java to handle CFS without CFE, \n  // shared doc stores, compound doc stores, separate norms, etc\n  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n    } else {\n      postingsFormat().files(info, \"\", files);\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n      fieldInfosFormat().files(info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(info, files);\n      normsFormat().files(info, files);\n    }\n    // never inside CFS\n    liveDocsFormat().files(info, files);\n    ((Lucene3xNormsFormat)normsFormat()).separateFiles(info, files);\n    segmentInfosFormat().files(info, files);\n\n    // shared docstores: these guys check the hair\n    if (info.getDocStoreOffset() != -1) {\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n    }\n  }  \n\n","sourceOld":"  // overrides the default implementation in codec.java to handle CFS without CFE, \n  // shared doc stores, compound doc stores, separate norms, etc\n  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n    } else {\n      postingsFormat().files(info, \"\", files);\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n      fieldInfosFormat().files(info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(info, files);\n      normsFormat().files(info, files);\n    }\n    // never inside CFS\n    liveDocsFormat().files(info, files);\n    ((Lucene3xNormsFormat)normsFormat()).separateFiles(info, files);\n    \n    // shared docstores: these guys check the hair\n    if (info.getDocStoreOffset() != -1) {\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1494abe5dc85557ec2e2772f87660d48f831c3a5","date":1337614370,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xCodec#files(SegmentInfo,Set[String]).mjava","sourceNew":null,"sourceOld":"  // overrides the default implementation in codec.java to handle CFS without CFE, \n  // shared doc stores, compound doc stores, separate norms, etc\n  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n    } else {\n      postingsFormat().files(info, \"\", files);\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n      fieldInfosFormat().files(info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(info, files);\n      normsFormat().files(info, files);\n    }\n    // never inside CFS\n    liveDocsFormat().files(info, files);\n    ((Lucene3xNormsFormat)normsFormat()).separateFiles(info, files);\n    segmentInfosFormat().files(info, files);\n\n    // shared docstores: these guys check the hair\n    if (info.getDocStoreOffset() != -1) {\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xCodec#files(SegmentInfo,Set[String]).mjava","sourceNew":null,"sourceOld":"  // overrides the default implementation in codec.java to handle CFS without CFE, \n  // shared doc stores, compound doc stores, separate norms, etc\n  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile()) {\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n    } else {\n      postingsFormat().files(info, \"\", files);\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n      fieldInfosFormat().files(info, files);\n      // TODO: segmentInfosFormat should be allowed to declare additional files\n      // if it wants, in addition to segments_N\n      docValuesFormat().files(info, files);\n      normsFormat().files(info, files);\n    }\n    // never inside CFS\n    liveDocsFormat().files(info, files);\n    ((Lucene3xNormsFormat)normsFormat()).separateFiles(info, files);\n    \n    // shared docstores: these guys check the hair\n    if (info.getDocStoreOffset() != -1) {\n      storedFieldsFormat().files(info, files);\n      termVectorsFormat().files(info, files);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["4e8d47e5372d86c4c94d92a339505c58b06b3066","1494abe5dc85557ec2e2772f87660d48f831c3a5"],"4356000e349e38c9fb48034695b7c309abd54557":["4e8d47e5372d86c4c94d92a339505c58b06b3066"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e8d47e5372d86c4c94d92a339505c58b06b3066":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["4356000e349e38c9fb48034695b7c309abd54557"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4356000e349e38c9fb48034695b7c309abd54557":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4e8d47e5372d86c4c94d92a339505c58b06b3066"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8d47e5372d86c4c94d92a339505c58b06b3066":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4356000e349e38c9fb48034695b7c309abd54557"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}