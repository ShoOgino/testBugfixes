{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testOnlyDeletesTriggersMergeOnGetReader().mjava","commits":[{"id":"e4f3b0a30c9d521b86f768348f832af93505b4eb","date":1420797674,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testOnlyDeletesTriggersMergeOnGetReader().mjava","pathOld":"/dev/null","sourceNew":"  public void testOnlyDeletesTriggersMergeOnGetReader() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(1);\n    iwc.setMergePolicy(mp);\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<38;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.commit();\n\n    for(int i=0;i<18;i++) {\n      w.deleteDocuments(new Term(\"id\", \"\"+i));\n    }\n\n    // First one triggers, but does not reflect, the merge:\n    DirectoryReader.open(w, true).close();\n    IndexReader r =DirectoryReader.open(w, true);\n    assertEquals(1, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testOnlyDeletesTriggersMergeOnGetReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testOnlyDeletesTriggersMergeOnGetReader().mjava","sourceNew":"  public void testOnlyDeletesTriggersMergeOnGetReader() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(1);\n    iwc.setMergePolicy(mp);\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<38;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.commit();\n\n    for(int i=0;i<18;i++) {\n      w.deleteDocuments(new Term(\"id\", \"\"+i));\n    }\n\n    // First one triggers, but does not reflect, the merge:\n    DirectoryReader.open(w).close();\n    IndexReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOnlyDeletesTriggersMergeOnGetReader() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(1);\n    iwc.setMergePolicy(mp);\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<38;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.commit();\n\n    for(int i=0;i<18;i++) {\n      w.deleteDocuments(new Term(\"id\", \"\"+i));\n    }\n\n    // First one triggers, but does not reflect, the merge:\n    DirectoryReader.open(w, true).close();\n    IndexReader r =DirectoryReader.open(w, true);\n    assertEquals(1, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testOnlyDeletesTriggersMergeOnGetReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testOnlyDeletesTriggersMergeOnGetReader().mjava","sourceNew":"  public void testOnlyDeletesTriggersMergeOnGetReader() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(1);\n    iwc.setMergePolicy(mp);\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<38;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.commit();\n\n    for(int i=0;i<18;i++) {\n      w.deleteDocuments(new Term(\"id\", \"\"+i));\n    }\n\n    // First one triggers, but does not reflect, the merge:\n    System.out.println(\"TEST: now get reader\");\n    DirectoryReader.open(w).close();\n    IndexReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOnlyDeletesTriggersMergeOnGetReader() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(1);\n    iwc.setMergePolicy(mp);\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<38;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.commit();\n\n    for(int i=0;i<18;i++) {\n      w.deleteDocuments(new Term(\"id\", \"\"+i));\n    }\n\n    // First one triggers, but does not reflect, the merge:\n    DirectoryReader.open(w).close();\n    IndexReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testOnlyDeletesTriggersMergeOnGetReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testOnlyDeletesTriggersMergeOnGetReader().mjava","sourceNew":"  public void testOnlyDeletesTriggersMergeOnGetReader() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(1);\n    iwc.setMergePolicy(mp);\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<38;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.commit();\n\n    for(int i=0;i<18;i++) {\n      w.deleteDocuments(new Term(\"id\", \"\"+i));\n    }\n\n    // First one triggers, but does not reflect, the merge:\n    System.out.println(\"TEST: now get reader\");\n    DirectoryReader.open(w).close();\n    IndexReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOnlyDeletesTriggersMergeOnGetReader() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(1);\n    iwc.setMergePolicy(mp);\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<38;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.commit();\n\n    for(int i=0;i<18;i++) {\n      w.deleteDocuments(new Term(\"id\", \"\"+i));\n    }\n\n    // First one triggers, but does not reflect, the merge:\n    DirectoryReader.open(w).close();\n    IndexReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testOnlyDeletesTriggersMergeOnGetReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testOnlyDeletesTriggersMergeOnGetReader().mjava","sourceNew":"  public void testOnlyDeletesTriggersMergeOnGetReader() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(1);\n    iwc.setMergePolicy(mp);\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<38;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.commit();\n\n    for(int i=0;i<18;i++) {\n      w.deleteDocuments(new Term(\"id\", \"\"+i));\n    }\n\n    // First one triggers, but does not reflect, the merge:\n    System.out.println(\"TEST: now get reader\");\n    DirectoryReader.open(w).close();\n    IndexReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOnlyDeletesTriggersMergeOnGetReader() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(1);\n    iwc.setMergePolicy(mp);\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<38;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.commit();\n\n    for(int i=0;i<18;i++) {\n      w.deleteDocuments(new Term(\"id\", \"\"+i));\n    }\n\n    // First one triggers, but does not reflect, the merge:\n    DirectoryReader.open(w).close();\n    IndexReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testOnlyDeletesTriggersMergeOnGetReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testOnlyDeletesTriggersMergeOnGetReader().mjava","sourceNew":"  public void testOnlyDeletesTriggersMergeOnGetReader() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(1);\n    iwc.setMergePolicy(mp);\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<38;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.commit();\n\n    for(int i=0;i<18;i++) {\n      w.deleteDocuments(new Term(\"id\", \"\"+i));\n    }\n\n    // First one triggers, but does not reflect, the merge:\n    if (VERBOSE) {\n      System.out.println(\"TEST: now get reader\");\n    }\n    DirectoryReader.open(w).close();\n    IndexReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOnlyDeletesTriggersMergeOnGetReader() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(1);\n    iwc.setMergePolicy(mp);\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<38;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.commit();\n\n    for(int i=0;i<18;i++) {\n      w.deleteDocuments(new Term(\"id\", \"\"+i));\n    }\n\n    // First one triggers, but does not reflect, the merge:\n    System.out.println(\"TEST: now get reader\");\n    DirectoryReader.open(w).close();\n    IndexReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["28288370235ed02234a64753cdbf0c6ec096304a"],"2a1862266772deb28cdcb7d996b64d2177022687":["e4f3b0a30c9d521b86f768348f832af93505b4eb"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["2a1862266772deb28cdcb7d996b64d2177022687"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4f3b0a30c9d521b86f768348f832af93505b4eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["2a1862266772deb28cdcb7d996b64d2177022687","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["2a1862266772deb28cdcb7d996b64d2177022687","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a1862266772deb28cdcb7d996b64d2177022687":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4f3b0a30c9d521b86f768348f832af93505b4eb"],"e4f3b0a30c9d521b86f768348f832af93505b4eb":["2a1862266772deb28cdcb7d996b64d2177022687"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["264935965977b4a9e2f3920420647072c9c49176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}