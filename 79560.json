{"path":"src/java/org/apache/lucene/util/OpenBitSet#equals(Object).mjava","commits":[{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/OpenBitSet#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  /** returns true if both sets have the same bits set */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof OpenBitSet)) return false;\n    OpenBitSet a;\n    OpenBitSet b = (OpenBitSet)o;\n    // make a the larger set.\n    if (b.wlen > this.wlen) {\n      a = b; b=this;\n    } else {\n      a=this;\n    }\n\n    // check for any set bits out of the range of b\n    for (int i=a.wlen-1; i>=b.wlen; i--) {\n      if (a.bits[i]!=0) return false;\n    }\n\n    for (int i=b.wlen-1; i>=0; i--) {\n      if (a.bits[i] != b.bits[i]) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/OpenBitSet#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/util/OpenBitSet#equals(Object).mjava","sourceNew":"  /** returns true if both sets have the same bits set */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof OpenBitSet)) return false;\n    OpenBitSet a;\n    OpenBitSet b = (OpenBitSet)o;\n    // make a the larger set.\n    if (b.wlen > this.wlen) {\n      a = b; b=this;\n    } else {\n      a=this;\n    }\n\n    // check for any set bits out of the range of b\n    for (int i=a.wlen-1; i>=b.wlen; i--) {\n      if (a.bits[i]!=0) return false;\n    }\n\n    for (int i=b.wlen-1; i>=0; i--) {\n      if (a.bits[i] != b.bits[i]) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** returns true if both sets have the same bits set */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof OpenBitSet)) return false;\n    OpenBitSet a;\n    OpenBitSet b = (OpenBitSet)o;\n    // make a the larger set.\n    if (b.wlen > this.wlen) {\n      a = b; b=this;\n    } else {\n      a=this;\n    }\n\n    // check for any set bits out of the range of b\n    for (int i=a.wlen-1; i>=b.wlen; i--) {\n      if (a.bits[i]!=0) return false;\n    }\n\n    for (int i=b.wlen-1; i>=0; i--) {\n      if (a.bits[i] != b.bits[i]) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/OpenBitSet#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/util/OpenBitSet#equals(Object).mjava","sourceNew":"  /** returns true if both sets have the same bits set */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof OpenBitSet)) return false;\n    OpenBitSet a;\n    OpenBitSet b = (OpenBitSet)o;\n    // make a the larger set.\n    if (b.wlen > this.wlen) {\n      a = b; b=this;\n    } else {\n      a=this;\n    }\n\n    // check for any set bits out of the range of b\n    for (int i=a.wlen-1; i>=b.wlen; i--) {\n      if (a.bits[i]!=0) return false;\n    }\n\n    for (int i=b.wlen-1; i>=0; i--) {\n      if (a.bits[i] != b.bits[i]) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** returns true if both sets have the same bits set */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof OpenBitSet)) return false;\n    OpenBitSet a;\n    OpenBitSet b = (OpenBitSet)o;\n    // make a the larger set.\n    if (b.wlen > this.wlen) {\n      a = b; b=this;\n    } else {\n      a=this;\n    }\n\n    // check for any set bits out of the range of b\n    for (int i=a.wlen-1; i>=b.wlen; i--) {\n      if (a.bits[i]!=0) return false;\n    }\n\n    for (int i=b.wlen-1; i>=0; i--) {\n      if (a.bits[i] != b.bits[i]) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a9e385641d717e641408d8fbbc62be8fc766357":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}