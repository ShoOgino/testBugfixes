{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#endsWithPossessive(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#endsWithPossessive(int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#endsWithPossessive(int).mjava","sourceNew":"  /**\n   * Determines if the text at the given position indicates an English possessive which should be removed\n   *\n   * @param pos Position in the text to check if it indicates an English possessive\n   * @return {@code true} if the text at the position indicates an English posessive, {@code false} otherwise\n   */\n  private boolean endsWithPossessive(int pos) {\n    return (stemEnglishPossessive &&\n            pos > 2 &&\n            text[pos - 2] == '\\'' &&\n            (text[pos - 1] == 's' || text[pos - 1] == 'S') &&\n            isAlpha(charType(text[pos - 3])) &&\n            (pos == endBounds || isSubwordDelim(charType(text[pos]))));\n  }\n\n","sourceOld":"  /**\n   * Determines if the text at the given position indicates an English possessive which should be removed\n   *\n   * @param pos Position in the text to check if it indicates an English possessive\n   * @return {@code true} if the text at the position indicates an English posessive, {@code false} otherwise\n   */\n  private boolean endsWithPossessive(int pos) {\n    return (stemEnglishPossessive &&\n            pos > 2 &&\n            text[pos - 2] == '\\'' &&\n            (text[pos - 1] == 's' || text[pos - 1] == 'S') &&\n            isAlpha(charType(text[pos - 3])) &&\n            (pos == endBounds || isSubwordDelim(charType(text[pos]))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","date":1550036130,"type":3,"author":"Bruno P. Kinoshita","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#endsWithPossessive(int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#endsWithPossessive(int).mjava","sourceNew":"  /**\n   * Determines if the text at the given position indicates an English possessive which should be removed\n   *\n   * @param pos Position in the text to check if it indicates an English possessive\n   * @return {@code true} if the text at the position indicates an English possessive, {@code false} otherwise\n   */\n  private boolean endsWithPossessive(int pos) {\n    return (stemEnglishPossessive &&\n            pos > 2 &&\n            text[pos - 2] == '\\'' &&\n            (text[pos - 1] == 's' || text[pos - 1] == 'S') &&\n            isAlpha(charType(text[pos - 3])) &&\n            (pos == endBounds || isSubwordDelim(charType(text[pos]))));\n  }\n\n","sourceOld":"  /**\n   * Determines if the text at the given position indicates an English possessive which should be removed\n   *\n   * @param pos Position in the text to check if it indicates an English possessive\n   * @return {@code true} if the text at the position indicates an English posessive, {@code false} otherwise\n   */\n  private boolean endsWithPossessive(int pos) {\n    return (stemEnglishPossessive &&\n            pos > 2 &&\n            text[pos - 2] == '\\'' &&\n            (text[pos - 1] == 's' || text[pos - 1] == 'S') &&\n            isAlpha(charType(text[pos - 3])) &&\n            (pos == endBounds || isSubwordDelim(charType(text[pos]))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}