{"path":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    s.close();\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n    s.close();\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    s.close();\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n    s.close();\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    \n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(s.getTopReaderContext());\n      for (int j = 0; j < leaves.length; j++) {\n        AtomicReaderContext leaf = leaves[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(leaf).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(leaf).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(leaf).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    s.close();\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(s.getTopReaderContext());\n    for (int j = 0; j < leaves.length; j++) {\n      AtomicReaderContext leaf = leaves[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(leaf).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(leaf).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n    s.close();\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    s.close();\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(s.getTopReaderContext());\n      for (int j = 0; j < leaves.length; j++) {\n        AtomicReaderContext leaf = leaves[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(leaf).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(leaf).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(leaf).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    s.close();\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(s.getTopReaderContext());\n    for (int j = 0; j < leaves.length; j++) {\n      AtomicReaderContext leaf = leaves[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(leaf).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(leaf).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n    s.close();\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    s.close();\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(s.getTopReaderContext());\n      for (int j = 0; j < leaves.length; j++) {\n        AtomicReaderContext leaf = leaves[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(leaf).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(leaf).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(leaf).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    s.close();\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(s.getTopReaderContext());\n    for (int j = 0; j < leaves.length; j++) {\n      AtomicReaderContext leaf = leaves[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(leaf).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(leaf).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n    s.close();\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n      for (int j = 0; j < readers.length; j++) {\n        IndexReader reader = readers[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(reader).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(reader).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    s.close();\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","date":1309476031,"type":4,"author":"Christopher John Male","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":null,"sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(s.getTopReaderContext());\n      for (int j = 0; j < leaves.length; j++) {\n        AtomicReaderContext leaf = leaves[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(leaf).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(leaf).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(leaf).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    s.close();\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(s.getTopReaderContext());\n    for (int j = 0; j < leaves.length; j++) {\n      AtomicReaderContext leaf = leaves[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(leaf).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(leaf).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":null,"sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(s.getTopReaderContext());\n      for (int j = 0; j < leaves.length; j++) {\n        AtomicReaderContext leaf = leaves[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(leaf).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(leaf).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(leaf).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    s.close();\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(s.getTopReaderContext());\n    for (int j = 0; j < leaves.length; j++) {\n      AtomicReaderContext leaf = leaves[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(leaf).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(leaf).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestCaching(String,FieldScoreQuery.Type).mjava","sourceNew":null,"sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, FieldScoreQuery.Type tp) throws Exception {\n    // prepare expected array types for comparison\n    HashMap<FieldScoreQuery.Type,Object> expectedArrayTypes = new HashMap<FieldScoreQuery.Type,Object>();\n    expectedArrayTypes.put(FieldScoreQuery.Type.BYTE, new byte[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.SHORT, new short[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.INT, new int[0]);\n    expectedArrayTypes.put(FieldScoreQuery.Type.FLOAT, new float[0]);\n    \n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object[] innerArray = new Object[s.getIndexReader().getSequentialSubReaders().length];\n\n    boolean warned = false; // print warning once.\n    for (int i=0; i<10; i++) {\n      FieldScoreQuery q = new FieldScoreQuery(field,tp);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(s.getTopReaderContext());\n      for (int j = 0; j < leaves.length; j++) {\n        AtomicReaderContext leaf = leaves[j];\n        try {\n          if (i == 0) {\n            innerArray[j] = q.valSrc.getValues(leaf).getInnerArray();\n            log(i + \".  compare: \" + innerArray[j].getClass() + \" to \"\n                + expectedArrayTypes.get(tp).getClass());\n            assertEquals(\n                \"field values should be cached in the correct array type!\",\n                innerArray[j].getClass(), expectedArrayTypes.get(tp).getClass());\n          } else {\n            log(i + \".  compare: \" + innerArray[j] + \" to \"\n                + q.valSrc.getValues(leaf).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray[j],\n                q.valSrc.getValues(leaf).getInnerArray());\n          }\n        } catch (UnsupportedOperationException e) {\n          if (!warned) {\n            System.err.println(\"WARNING: \" + testName()\n                + \" cannot fully test values of \" + q);\n            warned = true;\n          }\n        }\n      }\n    }\n    s.close();\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    FieldScoreQuery q = new FieldScoreQuery(field,tp);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(s.getTopReaderContext());\n    for (int j = 0; j < leaves.length; j++) {\n      AtomicReaderContext leaf = leaves[j];\n      try {\n        log(\"compare: \" + innerArray + \" to \"\n            + q.valSrc.getValues(leaf).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(leaf).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c220849f876de24a79f756f65b3eb045db59f63f":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["c220849f876de24a79f756f65b3eb045db59f63f"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["c220849f876de24a79f756f65b3eb045db59f63f","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c220849f876de24a79f756f65b3eb045db59f63f","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c220849f876de24a79f756f65b3eb045db59f63f":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","29ef99d61cda9641b6250bf9567329a6e65f901d","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295","817d8435e9135b756f08ce6710ab0baac51bdf88"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}