{"path":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetFields#addFields(Document,Iterable[CategoryPath]).mjava","commits":[{"id":"7f85b5d5a4e2cc786a3a3e9539c4ed8136a7f5e2","date":1363472247,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetFields#addFields(Document,Iterable[CategoryPath]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addFields(Document doc, Iterable<CategoryPath> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    final Map<CategoryListParams,Iterable<CategoryPath>> categoryLists = createCategoryListMapping(categories);\n    for (Entry<CategoryListParams, Iterable<CategoryPath>> e : categoryLists.entrySet()) {\n\n      CategoryListParams clp = e.getKey();\n      String dvField = clp.field + SortedSetDocValuesReaderState.FACET_FIELD_EXTENSION;\n\n      // Add sorted-set DV fields, one per value:\n      for(CategoryPath cp : e.getValue()) {\n        if (cp.length != 2) {\n          throw new IllegalArgumentException(\"only flat facets (dimension + label) are currently supported; got \" + cp);\n        }\n        doc.add(new SortedSetDocValuesField(dvField, new BytesRef(cp.toString(indexingParams.getFacetDelimChar()))));\n      }\n\n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(clp.field, drillDownStream, drillDownFieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetFields#addFields(Document,Iterable[FacetLabel]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetFields#addFields(Document,Iterable[CategoryPath]).mjava","sourceNew":"  @Override\n  public void addFields(Document doc, Iterable<FacetLabel> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    final Map<CategoryListParams,Iterable<FacetLabel>> categoryLists = createCategoryListMapping(categories);\n    for (Entry<CategoryListParams, Iterable<FacetLabel>> e : categoryLists.entrySet()) {\n\n      CategoryListParams clp = e.getKey();\n      String dvField = clp.field + SortedSetDocValuesReaderState.FACET_FIELD_EXTENSION;\n\n      // Add sorted-set DV fields, one per value:\n      for(FacetLabel cp : e.getValue()) {\n        if (cp.length != 2) {\n          throw new IllegalArgumentException(\"only flat facets (dimension + label) are currently supported; got \" + cp);\n        }\n        doc.add(new SortedSetDocValuesField(dvField, new BytesRef(cp.toString(indexingParams.getFacetDelimChar()))));\n      }\n\n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(clp.field, drillDownStream, drillDownFieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addFields(Document doc, Iterable<CategoryPath> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    final Map<CategoryListParams,Iterable<CategoryPath>> categoryLists = createCategoryListMapping(categories);\n    for (Entry<CategoryListParams, Iterable<CategoryPath>> e : categoryLists.entrySet()) {\n\n      CategoryListParams clp = e.getKey();\n      String dvField = clp.field + SortedSetDocValuesReaderState.FACET_FIELD_EXTENSION;\n\n      // Add sorted-set DV fields, one per value:\n      for(CategoryPath cp : e.getValue()) {\n        if (cp.length != 2) {\n          throw new IllegalArgumentException(\"only flat facets (dimension + label) are currently supported; got \" + cp);\n        }\n        doc.add(new SortedSetDocValuesField(dvField, new BytesRef(cp.toString(indexingParams.getFacetDelimChar()))));\n      }\n\n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(clp.field, drillDownStream, drillDownFieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetFields#addFields(Document,Iterable[CategoryPath]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addFields(Document doc, Iterable<CategoryPath> categories) throws IOException {\n    if (categories == null) {\n      throw new IllegalArgumentException(\"categories should not be null\");\n    }\n\n    final Map<CategoryListParams,Iterable<CategoryPath>> categoryLists = createCategoryListMapping(categories);\n    for (Entry<CategoryListParams, Iterable<CategoryPath>> e : categoryLists.entrySet()) {\n\n      CategoryListParams clp = e.getKey();\n      String dvField = clp.field + SortedSetDocValuesReaderState.FACET_FIELD_EXTENSION;\n\n      // Add sorted-set DV fields, one per value:\n      for(CategoryPath cp : e.getValue()) {\n        if (cp.length != 2) {\n          throw new IllegalArgumentException(\"only flat facets (dimension + label) are currently supported; got \" + cp);\n        }\n        doc.add(new SortedSetDocValuesField(dvField, new BytesRef(cp.toString(indexingParams.getFacetDelimChar()))));\n      }\n\n      // add the drill-down field\n      DrillDownStream drillDownStream = getDrillDownStream(e.getValue());\n      Field drillDown = new Field(clp.field, drillDownStream, drillDownFieldType());\n      doc.add(drillDown);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f85b5d5a4e2cc786a3a3e9539c4ed8136a7f5e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["7f85b5d5a4e2cc786a3a3e9539c4ed8136a7f5e2","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["7f85b5d5a4e2cc786a3a3e9539c4ed8136a7f5e2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f85b5d5a4e2cc786a3a3e9539c4ed8136a7f5e2"],"7f85b5d5a4e2cc786a3a3e9539c4ed8136a7f5e2":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}