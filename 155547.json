{"path":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory,Codec).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory,Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory).mjava","sourceNew":"  private void write(Directory directory, Codec codec) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, codec.getName(), this, IOContext.DEFAULT);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeWhileHandlingException(segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","sourceOld":"  private void write(Directory directory) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this, IOContext.DEFAULT);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeWhileHandlingException(segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"319624eb66a10b717d3e66af448543e7dc5c479d","date":1322741556,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory,Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory,Codec).mjava","sourceNew":"  private void write(Directory directory, Codec codec) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, codec.getName(), this, IOContext.DEFAULT);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeWhileHandlingException(segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void write(Directory directory, Codec codec) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    final String globalFieldMapFile;\n    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {\n      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);\n      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);\n    } else {\n      globalFieldMapFile = null;\n    }\n    \n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, codec.getName(), this, IOContext.DEFAULT);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeWhileHandlingException(segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n        if (globalFieldMapFile != null) { // delete if written here\n          try {\n            // Try not to leave global field map in\n            // the index:\n            directory.deleteFile(globalFieldMapFile);\n          } catch (Throwable t) {\n            // Suppress so we keep throwing the original exception\n          }\n        }\n        pendingMapVersion = -1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write(Directory,Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#write(Directory,Codec).mjava","sourceNew":"  private void write(Directory directory, Codec codec) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, codec.getName(), this, IOContext.DEFAULT);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeWhileHandlingException(segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void write(Directory directory, Codec codec) throws IOException {\n\n    String segmentFileName = getNextSegmentFileName();\n    \n    // Always advance the generation on write:\n    if (generation == -1) {\n      generation = 1;\n    } else {\n      generation++;\n    }\n    \n    IndexOutput segnOutput = null;\n    \n\n    boolean success = false;\n\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      segnOutput = infosWriter.writeInfos(directory, segmentFileName, codec.getName(), this, IOContext.DEFAULT);\n      infosWriter.prepareCommit(segnOutput);\n      pendingSegnOutput = segnOutput;\n      success = true;\n    } finally {\n      if (!success) {\n        // We hit an exception above; try to close the file\n        // but suppress any exception:\n        IOUtils.closeWhileHandlingException(segnOutput);\n        try {\n          // Try not to leave a truncated segments_N file in\n          // the index:\n          directory.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["319624eb66a10b717d3e66af448543e7dc5c479d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"319624eb66a10b717d3e66af448543e7dc5c479d":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["319624eb66a10b717d3e66af448543e7dc5c479d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"319624eb66a10b717d3e66af448543e7dc5c479d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}