{"path":"lucene/core/src/java/org/apache/lucene/document/IntRange#setRangeValues(int[],int[]).mjava","commits":[{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/IntRange#setRangeValues(int[],int[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/IntRangeField#setRangeValues(int[],int[]).mjava","sourceNew":"  /**\n   * Changes the values of the field.\n   * @param min array of min values. (accepts {@code Integer.NEGATIVE_INFINITY})\n   * @param max array of max values. (accepts {@code Integer.POSITIVE_INFINITY})\n   * @throws IllegalArgumentException if {@code min} or {@code max} is invalid\n   */\n  public void setRangeValues(int[] min, int[] max) {\n    checkArgs(min, max);\n    if (min.length*2 != type.pointDimensionCount() || max.length*2 != type.pointDimensionCount()) {\n      throw new IllegalArgumentException(\"field (name=\" + name + \") uses \" + type.pointDimensionCount()/2\n          + \" dimensions; cannot change to (incoming) \" + min.length + \" dimensions\");\n    }\n\n    final byte[] bytes;\n    if (fieldsData == null) {\n      bytes = new byte[BYTES*2*min.length];\n      fieldsData = new BytesRef(bytes);\n    } else {\n      bytes = ((BytesRef)fieldsData).bytes;\n    }\n    verifyAndEncode(min, max, bytes);\n  }\n\n","sourceOld":"  /**\n   * Changes the values of the field.\n   * @param min array of min values. (accepts {@code Integer.NEGATIVE_INFINITY})\n   * @param max array of max values. (accepts {@code Integer.POSITIVE_INFINITY})\n   * @throws IllegalArgumentException if {@code min} or {@code max} is invalid\n   */\n  public void setRangeValues(int[] min, int[] max) {\n    checkArgs(min, max);\n    if (min.length*2 != type.pointDimensionCount() || max.length*2 != type.pointDimensionCount()) {\n      throw new IllegalArgumentException(\"field (name=\" + name + \") uses \" + type.pointDimensionCount()/2\n          + \" dimensions; cannot change to (incoming) \" + min.length + \" dimensions\");\n    }\n\n    final byte[] bytes;\n    if (fieldsData == null) {\n      bytes = new byte[BYTES*2*min.length];\n      fieldsData = new BytesRef(bytes);\n    } else {\n      bytes = ((BytesRef)fieldsData).bytes;\n    }\n    verifyAndEncode(min, max, bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/IntRange#setRangeValues(int[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/IntRange#setRangeValues(int[],int[]).mjava","sourceNew":"  /**\n   * Changes the values of the field.\n   * @param min array of min values. (accepts {@code Integer.NEGATIVE_INFINITY})\n   * @param max array of max values. (accepts {@code Integer.POSITIVE_INFINITY})\n   * @throws IllegalArgumentException if {@code min} or {@code max} is invalid\n   */\n  public void setRangeValues(int[] min, int[] max) {\n    checkArgs(min, max);\n    if (min.length*2 != type.pointDataDimensionCount() || max.length*2 != type.pointDataDimensionCount()) {\n      throw new IllegalArgumentException(\"field (name=\" + name + \") uses \" + type.pointDataDimensionCount()/2\n          + \" dimensions; cannot change to (incoming) \" + min.length + \" dimensions\");\n    }\n\n    final byte[] bytes;\n    if (fieldsData == null) {\n      bytes = new byte[BYTES*2*min.length];\n      fieldsData = new BytesRef(bytes);\n    } else {\n      bytes = ((BytesRef)fieldsData).bytes;\n    }\n    verifyAndEncode(min, max, bytes);\n  }\n\n","sourceOld":"  /**\n   * Changes the values of the field.\n   * @param min array of min values. (accepts {@code Integer.NEGATIVE_INFINITY})\n   * @param max array of max values. (accepts {@code Integer.POSITIVE_INFINITY})\n   * @throws IllegalArgumentException if {@code min} or {@code max} is invalid\n   */\n  public void setRangeValues(int[] min, int[] max) {\n    checkArgs(min, max);\n    if (min.length*2 != type.pointDimensionCount() || max.length*2 != type.pointDimensionCount()) {\n      throw new IllegalArgumentException(\"field (name=\" + name + \") uses \" + type.pointDimensionCount()/2\n          + \" dimensions; cannot change to (incoming) \" + min.length + \" dimensions\");\n    }\n\n    final byte[] bytes;\n    if (fieldsData == null) {\n      bytes = new byte[BYTES*2*min.length];\n      fieldsData = new BytesRef(bytes);\n    } else {\n      bytes = ((BytesRef)fieldsData).bytes;\n    }\n    verifyAndEncode(min, max, bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/IntRange#setRangeValues(int[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/IntRange#setRangeValues(int[],int[]).mjava","sourceNew":"  /**\n   * Changes the values of the field.\n   * @param min array of min values. (accepts {@code Integer.NEGATIVE_INFINITY})\n   * @param max array of max values. (accepts {@code Integer.POSITIVE_INFINITY})\n   * @throws IllegalArgumentException if {@code min} or {@code max} is invalid\n   */\n  public void setRangeValues(int[] min, int[] max) {\n    checkArgs(min, max);\n    if (min.length*2 != type.pointDimensionCount() || max.length*2 != type.pointDimensionCount()) {\n      throw new IllegalArgumentException(\"field (name=\" + name + \") uses \" + type.pointDimensionCount()/2\n          + \" dimensions; cannot change to (incoming) \" + min.length + \" dimensions\");\n    }\n\n    final byte[] bytes;\n    if (fieldsData == null) {\n      bytes = new byte[BYTES*2*min.length];\n      fieldsData = new BytesRef(bytes);\n    } else {\n      bytes = ((BytesRef)fieldsData).bytes;\n    }\n    verifyAndEncode(min, max, bytes);\n  }\n\n","sourceOld":"  /**\n   * Changes the values of the field.\n   * @param min array of min values. (accepts {@code Integer.NEGATIVE_INFINITY})\n   * @param max array of max values. (accepts {@code Integer.POSITIVE_INFINITY})\n   * @throws IllegalArgumentException if {@code min} or {@code max} is invalid\n   */\n  public void setRangeValues(int[] min, int[] max) {\n    checkArgs(min, max);\n    if (min.length*2 != type.pointDataDimensionCount() || max.length*2 != type.pointDataDimensionCount()) {\n      throw new IllegalArgumentException(\"field (name=\" + name + \") uses \" + type.pointDataDimensionCount()/2\n          + \" dimensions; cannot change to (incoming) \" + min.length + \" dimensions\");\n    }\n\n    final byte[] bytes;\n    if (fieldsData == null) {\n      bytes = new byte[BYTES*2*min.length];\n      fieldsData = new BytesRef(bytes);\n    } else {\n      bytes = ((BytesRef)fieldsData).bytes;\n    }\n    verifyAndEncode(min, max, bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["f6652c943595e92c187ee904c382863013eae28f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}