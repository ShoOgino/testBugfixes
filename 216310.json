{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float,float).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float,float).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float,float).mjava","sourceNew":"    /** Apply the computed normalization factor to our subqueries */\n    @Override\n    public void normalize(float norm, float topLevelBoost) {\n      topLevelBoost *= getBoost();  // Incorporate our boost\n      for (Weight wt : weights) {\n        wt.normalize(norm, topLevelBoost);\n      }\n    }\n\n","sourceOld":"    /** Apply the computed normalization factor to our subqueries */\n    @Override\n    public void normalize(float norm, float topLevelBoost) {\n      topLevelBoost *= getBoost();  // Incorporate our boost\n      for (Weight wt : weights) {\n        wt.normalize(norm, topLevelBoost);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float,float).mjava","sourceNew":"    /** Apply the computed normalization factor to our subqueries */\n    @Override\n    public void normalize(float norm, float boost) {\n      this.boost = boost;\n      for (Weight wt : weights) {\n        wt.normalize(norm, boost);\n      }\n    }\n\n","sourceOld":"    /** Apply the computed normalization factor to our subqueries */\n    @Override\n    public void normalize(float norm, float topLevelBoost) {\n      topLevelBoost *= getBoost();  // Incorporate our boost\n      for (Weight wt : weights) {\n        wt.normalize(norm, topLevelBoost);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857","date":1441700656,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float,float).mjava","sourceNew":"    /** Apply the computed normalization factor to our subqueries */\n    @Override\n    public void normalize(float norm, float boost) {\n      for (Weight wt : weights) {\n        wt.normalize(norm, boost);\n      }\n    }\n\n","sourceOld":"    /** Apply the computed normalization factor to our subqueries */\n    @Override\n    public void normalize(float norm, float boost) {\n      this.boost = boost;\n      for (Weight wt : weights) {\n        wt.normalize(norm, boost);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float,float).mjava","sourceNew":null,"sourceOld":"    /** Apply the computed normalization factor to our subqueries */\n    @Override\n    public void normalize(float norm, float boost) {\n      for (Weight wt : weights) {\n        wt.normalize(norm, boost);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#normalize(float,float).mjava","sourceNew":null,"sourceOld":"    /** Apply the computed normalization factor to our subqueries */\n    @Override\n    public void normalize(float norm, float boost) {\n      for (Weight wt : weights) {\n        wt.normalize(norm, boost);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}