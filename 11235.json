{"path":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreamsISO88591().mjava","commits":[{"id":"92009ce6b3696f548a1c7eb9fcf8cab29b541426","date":1375140262,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreamsISO88591().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreamsISO88591() throws Exception\n  {\n    final String getParams = \"qt=%FC&dup=foo&ie=iso-8859-1&dup=%FC\", postParams = \"qt2=%FC&q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(\"US-ASCII\");\n    final String contentType = \"application/x-www-form-urlencoded; charset=iso-8859-1\";\n    \n    // Set up the expected behavior\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn( contentType ).anyTimes();\n    expect(request.getQueryString()).andReturn(getParams).anyTimes();\n    expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n    RawRequestParser raw = new RawRequestParser();\n    FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n    StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n    \n    SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n    \n    assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt2\") );\n    assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"\\u00FC\",\"bar\"}, p.getParams(\"dup\") );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreamsISO88591().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreamsISO88591() throws Exception\n  {\n    final String getParams = \"qt=%FC&dup=foo&ie=iso-8859-1&dup=%FC\", postParams = \"qt2=%FC&q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(\"US-ASCII\");\n    final String contentType = \"application/x-www-form-urlencoded; charset=iso-8859-1\";\n    \n    // Set up the expected behavior\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn( contentType ).anyTimes();\n    expect(request.getQueryString()).andReturn(getParams).anyTimes();\n    expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n    RawRequestParser raw = new RawRequestParser();\n    FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n    StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n    \n    SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n    \n    assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt2\") );\n    assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"\\u00FC\",\"bar\"}, p.getParams(\"dup\") );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreamsISO88591().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreamsISO88591().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreamsISO88591() throws Exception\n  {\n    final String getParams = \"qt=%FC&dup=foo&ie=iso-8859-1&dup=%FC\", postParams = \"qt2=%FC&q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    final String contentType = \"application/x-www-form-urlencoded; charset=iso-8859-1\";\n    \n    // Set up the expected behavior\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn( contentType ).anyTimes();\n    expect(request.getQueryString()).andReturn(getParams).anyTimes();\n    expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n    RawRequestParser raw = new RawRequestParser();\n    FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n    StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n    \n    SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n    \n    assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt2\") );\n    assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"\\u00FC\",\"bar\"}, p.getParams(\"dup\") );\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreamsISO88591() throws Exception\n  {\n    final String getParams = \"qt=%FC&dup=foo&ie=iso-8859-1&dup=%FC\", postParams = \"qt2=%FC&q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(\"US-ASCII\");\n    final String contentType = \"application/x-www-form-urlencoded; charset=iso-8859-1\";\n    \n    // Set up the expected behavior\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn( contentType ).anyTimes();\n    expect(request.getQueryString()).andReturn(getParams).anyTimes();\n    expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n    RawRequestParser raw = new RawRequestParser();\n    FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n    StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n    \n    SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n    \n    assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt2\") );\n    assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"\\u00FC\",\"bar\"}, p.getParams(\"dup\") );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreamsISO88591().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreamsISO88591().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreamsISO88591() throws Exception\n  {\n    final String getParams = \"qt=%FC&dup=foo&ie=iso-8859-1&dup=%FC\", postParams = \"qt2=%FC&q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    final String contentType = \"application/x-www-form-urlencoded; charset=iso-8859-1\";\n    \n    // Set up the expected behavior\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn( contentType ).anyTimes();\n    expect(request.getQueryString()).andReturn(getParams).anyTimes();\n    expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n    RawRequestParser raw = new RawRequestParser();\n    FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n    StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n    \n    SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n    \n    assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt2\") );\n    assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"\\u00FC\",\"bar\"}, p.getParams(\"dup\") );\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreamsISO88591() throws Exception\n  {\n    final String getParams = \"qt=%FC&dup=foo&ie=iso-8859-1&dup=%FC\", postParams = \"qt2=%FC&q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(\"US-ASCII\");\n    final String contentType = \"application/x-www-form-urlencoded; charset=iso-8859-1\";\n    \n    // Set up the expected behavior\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn( contentType ).anyTimes();\n    expect(request.getQueryString()).andReturn(getParams).anyTimes();\n    expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n    RawRequestParser raw = new RawRequestParser();\n    FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n    StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n    \n    SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n    \n    assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt2\") );\n    assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"\\u00FC\",\"bar\"}, p.getParams(\"dup\") );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd","date":1420472758,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreamsISO88591().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreamsISO88591().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreamsISO88591() throws Exception\n  {\n    final String getParams = \"qt=%FC&dup=foo&ie=iso-8859-1&dup=%FC\", postParams = \"qt2=%FC&q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    final String contentType = \"application/x-www-form-urlencoded; charset=iso-8859-1\";\n    \n    // Set up the expected behavior\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn( contentType ).anyTimes();\n    expect(request.getQueryString()).andReturn(getParams).anyTimes();\n    expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(postBytes));\n    replay(request);\n    \n    MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n    RawRequestParser raw = new RawRequestParser();\n    FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n    StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n    \n    SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n    \n    assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt2\") );\n    assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"\\u00FC\",\"bar\"}, p.getParams(\"dup\") );\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreamsISO88591() throws Exception\n  {\n    final String getParams = \"qt=%FC&dup=foo&ie=iso-8859-1&dup=%FC\", postParams = \"qt2=%FC&q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    final String contentType = \"application/x-www-form-urlencoded; charset=iso-8859-1\";\n    \n    // Set up the expected behavior\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn( contentType ).anyTimes();\n    expect(request.getQueryString()).andReturn(getParams).anyTimes();\n    expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(postBytes);\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n    RawRequestParser raw = new RawRequestParser();\n    FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n    StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n    \n    SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n    \n    assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt2\") );\n    assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"\\u00FC\",\"bar\"}, p.getParams(\"dup\") );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d17ec5164debc23076db7fd11d0331f201583b5","date":1426658173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreamsISO88591().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreamsISO88591().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreamsISO88591() throws Exception\n  {\n    final String getParams = \"qt=%FC&dup=foo&ie=iso-8859-1&dup=%FC\", postParams = \"qt2=%FC&q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    final String contentType = \"application/x-www-form-urlencoded; charset=iso-8859-1\";\n    \n    // Set up the expected behavior\n    HttpServletRequest request = getMock(\"/solr/select\", contentType, postBytes.length);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getQueryString()).andReturn(getParams).anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(postBytes));\n    replay(request);\n    \n    MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n    RawRequestParser raw = new RawRequestParser();\n    FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n    StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n    \n    SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n    \n    assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt2\") );\n    assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"\\u00FC\",\"bar\"}, p.getParams(\"dup\") );\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreamsISO88591() throws Exception\n  {\n    final String getParams = \"qt=%FC&dup=foo&ie=iso-8859-1&dup=%FC\", postParams = \"qt2=%FC&q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    final String contentType = \"application/x-www-form-urlencoded; charset=iso-8859-1\";\n    \n    // Set up the expected behavior\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn( contentType ).anyTimes();\n    expect(request.getQueryString()).andReturn(getParams).anyTimes();\n    expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(postBytes));\n    replay(request);\n    \n    MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n    RawRequestParser raw = new RawRequestParser();\n    FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n    StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n    \n    SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n    \n    assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt2\") );\n    assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"\\u00FC\",\"bar\"}, p.getParams(\"dup\") );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreamsISO88591().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreamsISO88591().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreamsISO88591() throws Exception\n  {\n    final String getParams = \"qt=%FC&dup=foo&ie=iso-8859-1&dup=%FC\", postParams = \"qt2=%FC&q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    final String contentType = \"application/x-www-form-urlencoded; charset=iso-8859-1\";\n    \n    // Set up the expected behavior\n    HttpServletRequest request = getMock(\"/solr/select\", contentType, postBytes.length);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getQueryString()).andReturn(getParams).anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(postBytes));\n    replay(request);\n    \n    MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n    RawRequestParser raw = new RawRequestParser();\n    FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n    StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n    \n    SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n    \n    assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt2\") );\n    assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"\\u00FC\",\"bar\"}, p.getParams(\"dup\") );\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreamsISO88591() throws Exception\n  {\n    final String getParams = \"qt=%FC&dup=foo&ie=iso-8859-1&dup=%FC\", postParams = \"qt2=%FC&q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    final String contentType = \"application/x-www-form-urlencoded; charset=iso-8859-1\";\n    \n    // Set up the expected behavior\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn( contentType ).anyTimes();\n    expect(request.getQueryString()).andReturn(getParams).anyTimes();\n    expect(request.getContentLength()).andReturn(postBytes.length).anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(postBytes));\n    replay(request);\n    \n    MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n    RawRequestParser raw = new RawRequestParser();\n    FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n    StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n    \n    SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n    \n    assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt2\") );\n    assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"\\u00FC\",\"bar\"}, p.getParams(\"dup\") );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreamsISO88591().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreamsISO88591().mjava","sourceNew":"  @Test\n  public void testStandardParseParamsAndFillStreamsISO88591() throws Exception\n  {\n    final String getParams = \"qt=%FC&dup=foo&ie=iso-8859-1&dup=%FC\", postParams = \"qt2=%FC&q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    final String contentType = \"application/x-www-form-urlencoded; charset=iso-8859-1\";\n    \n    // Set up the expected behavior\n    HttpServletRequest request = getMock(\"/solr/select\", contentType, postBytes.length);\n    when(request.getMethod()).thenReturn(\"POST\");\n    when(request.getQueryString()).thenReturn(getParams);\n    when(request.getInputStream()).thenReturn(new ByteServletInputStream(postBytes));\n    \n    MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n    RawRequestParser raw = new RawRequestParser();\n    FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n    StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n    \n    SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n    \n    assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt2\") );\n    assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"\\u00FC\",\"bar\"}, p.getParams(\"dup\") );\n\n    verify(request).getInputStream();\n  }\n\n","sourceOld":"  @Test\n  public void testStandardParseParamsAndFillStreamsISO88591() throws Exception\n  {\n    final String getParams = \"qt=%FC&dup=foo&ie=iso-8859-1&dup=%FC\", postParams = \"qt2=%FC&q=hello&d%75p=bar\";\n    final byte[] postBytes = postParams.getBytes(StandardCharsets.US_ASCII);\n    final String contentType = \"application/x-www-form-urlencoded; charset=iso-8859-1\";\n    \n    // Set up the expected behavior\n    HttpServletRequest request = getMock(\"/solr/select\", contentType, postBytes.length);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getQueryString()).andReturn(getParams).anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(postBytes));\n    replay(request);\n    \n    MultipartRequestParser multipart = new MultipartRequestParser( 2048 );\n    RawRequestParser raw = new RawRequestParser();\n    FormDataRequestParser formdata = new FormDataRequestParser( 2048 );\n    StandardRequestParser standard = new StandardRequestParser( multipart, raw, formdata );\n    \n    SolrParams p = standard.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n    \n    assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt\") );\n    assertEquals( \"contentType: \"+contentType, \"\\u00FC\", p.get(\"qt2\") );\n    assertArrayEquals( \"contentType: \"+contentType, new String[]{\"foo\",\"\\u00FC\",\"bar\"}, p.getParams(\"dup\") );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["92009ce6b3696f548a1c7eb9fcf8cab29b541426","7d89d7e4e5101347833eea558851bf4209218619"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d5b778829b5b506ab02023b2f4ba58aef5d7f0fd","0d17ec5164debc23076db7fd11d0331f201583b5"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92009ce6b3696f548a1c7eb9fcf8cab29b541426"],"0d17ec5164debc23076db7fd11d0331f201583b5":["d5b778829b5b506ab02023b2f4ba58aef5d7f0fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92009ce6b3696f548a1c7eb9fcf8cab29b541426":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["0d17ec5164debc23076db7fd11d0331f201583b5"],"7d89d7e4e5101347833eea558851bf4209218619":["92009ce6b3696f548a1c7eb9fcf8cab29b541426"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd":["7d89d7e4e5101347833eea558851bf4209218619"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"0d17ec5164debc23076db7fd11d0331f201583b5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","92009ce6b3696f548a1c7eb9fcf8cab29b541426"],"92009ce6b3696f548a1c7eb9fcf8cab29b541426":["5eb2511ababf862ea11e10761c70ee560cd84510","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","7d89d7e4e5101347833eea558851bf4209218619"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","d5b778829b5b506ab02023b2f4ba58aef5d7f0fd"],"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d17ec5164debc23076db7fd11d0331f201583b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}