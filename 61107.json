{"path":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","commits":[{"id":"630b72110afca0a13a755e07ef8a4d764afb52aa","date":1361202100,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDefaultSliceState() throws Exception {\n    Map<String, DocCollection> collectionStates = new HashMap<String, DocCollection>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<String, Slice>();\n    Map<String, Replica> sliceToProps = new HashMap<String, Replica>();\n    Map<String, Object> props = new HashMap<String, Object>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertEquals(\"Default state not set to active\", Slice.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes);\n\n    assertEquals(\"Default state not set to active\", \"active\", loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","date":1386334715,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","sourceNew":"  @Test\n  public void testDefaultSliceState() throws Exception {\n    Map<String, DocCollection> collectionStates = new HashMap<String, DocCollection>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<String, Slice>();\n    Map<String, Replica> sliceToProps = new HashMap<String, Replica>();\n    Map<String, Object> props = new HashMap<String, Object>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertEquals(\"Default state not set to active\", Slice.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes, null);\n\n    assertEquals(\"Default state not set to active\", \"active\", loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultSliceState() throws Exception {\n    Map<String, DocCollection> collectionStates = new HashMap<String, DocCollection>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<String, Slice>();\n    Map<String, Replica> sliceToProps = new HashMap<String, Replica>();\n    Map<String, Object> props = new HashMap<String, Object>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertEquals(\"Default state not set to active\", Slice.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes);\n\n    assertEquals(\"Default state not set to active\", \"active\", loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c543b4f6989a86c0d59dfe26e92c767b5045603a","date":1386588149,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","sourceNew":"  @Test\n  public void testDefaultSliceState() throws Exception {\n    Map<String, DocCollection> collectionStates = new HashMap<String, DocCollection>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<String, Slice>();\n    Map<String, Replica> sliceToProps = new HashMap<String, Replica>();\n    Map<String, Object> props = new HashMap<String, Object>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertEquals(\"Default state not set to active\", Slice.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ZkStateReader mockZkStateReader = ClusterStateTest.getMockZkStateReader(collectionStates.keySet());\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates, mockZkStateReader);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes, mockZkStateReader);\n\n    assertEquals(\"Default state not set to active\", \"active\", loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultSliceState() throws Exception {\n    Map<String, DocCollection> collectionStates = new HashMap<String, DocCollection>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<String, Slice>();\n    Map<String, Replica> sliceToProps = new HashMap<String, Replica>();\n    Map<String, Object> props = new HashMap<String, Object>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertEquals(\"Default state not set to active\", Slice.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes, null);\n\n    assertEquals(\"Default state not set to active\", \"active\", loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","sourceNew":"  @Test\n  public void testDefaultSliceState() throws Exception {\n    Map<String, DocCollection> collectionStates = new HashMap<String, DocCollection>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<String, Slice>();\n    Map<String, Replica> sliceToProps = new HashMap<String, Replica>();\n    Map<String, Object> props = new HashMap<String, Object>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertEquals(\"Default state not set to active\", Slice.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ZkStateReader mockZkStateReader = ClusterStateTest.getMockZkStateReader(collectionStates.keySet());\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates, mockZkStateReader);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes, mockZkStateReader);\n\n    assertEquals(\"Default state not set to active\", \"active\", loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultSliceState() throws Exception {\n    Map<String, DocCollection> collectionStates = new HashMap<String, DocCollection>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<String, Slice>();\n    Map<String, Replica> sliceToProps = new HashMap<String, Replica>();\n    Map<String, Object> props = new HashMap<String, Object>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertEquals(\"Default state not set to active\", Slice.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(null, bytes, liveNodes);\n\n    assertEquals(\"Default state not set to active\", \"active\", loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","sourceNew":"  @Test\n  public void testDefaultSliceState() throws Exception {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertEquals(\"Default state not set to active\", Slice.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ZkStateReader mockZkStateReader = ClusterStateTest.getMockZkStateReader(collectionStates.keySet());\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates, mockZkStateReader);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes, mockZkStateReader);\n\n    assertEquals(\"Default state not set to active\", \"active\", loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultSliceState() throws Exception {\n    Map<String, DocCollection> collectionStates = new HashMap<String, DocCollection>();\n    Set<String> liveNodes = new HashSet<String>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<String, Slice>();\n    Map<String, Replica> sliceToProps = new HashMap<String, Replica>();\n    Map<String, Object> props = new HashMap<String, Object>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertEquals(\"Default state not set to active\", Slice.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ZkStateReader mockZkStateReader = ClusterStateTest.getMockZkStateReader(collectionStates.keySet());\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates, mockZkStateReader);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes, mockZkStateReader);\n\n    assertEquals(\"Default state not set to active\", \"active\", loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","sourceNew":"  @Test\n  public void testDefaultSliceState() throws Exception {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertEquals(\"Default state not set to active\", Slice.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ZkStateReader mockZkStateReader = ClusterStateTest.getMockZkStateReader(collectionStates.keySet());\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertEquals(\"Default state not set to active\", \"active\", loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultSliceState() throws Exception {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertEquals(\"Default state not set to active\", Slice.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ZkStateReader mockZkStateReader = ClusterStateTest.getMockZkStateReader(collectionStates.keySet());\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates, mockZkStateReader);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes, mockZkStateReader);\n\n    assertEquals(\"Default state not set to active\", \"active\", loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","sourceNew":"  @Test\n  public void testDefaultSliceState() throws Exception {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertEquals(\"Default state not set to active\", Slice.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ZkStateReader mockZkStateReader = ClusterStateTest.getMockZkStateReader(collectionStates.keySet());\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates, mockZkStateReader);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes, mockZkStateReader,null);\n\n    assertEquals(\"Default state not set to active\", \"active\", loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultSliceState() throws Exception {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertEquals(\"Default state not set to active\", Slice.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ZkStateReader mockZkStateReader = ClusterStateTest.getMockZkStateReader(collectionStates.keySet());\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertEquals(\"Default state not set to active\", \"active\", loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","sourceNew":"  @Test\n  public void testDefaultSliceState() throws Exception {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertEquals(\"Default state not set to active\", Slice.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ZkStateReader mockZkStateReader = ClusterStateTest.getMockZkStateReader(collectionStates.keySet());\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertEquals(\"Default state not set to active\", \"active\", loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultSliceState() throws Exception {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertEquals(\"Default state not set to active\", Slice.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ZkStateReader mockZkStateReader = ClusterStateTest.getMockZkStateReader(collectionStates.keySet());\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates, mockZkStateReader);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes, mockZkStateReader,null);\n\n    assertEquals(\"Default state not set to active\", \"active\", loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","date":1427866967,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","sourceNew":"  @Test\n  public void testDefaultSliceState() {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultSliceState() throws Exception {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertEquals(\"Default state not set to active\", Slice.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ZkStateReader mockZkStateReader = ClusterStateTest.getMockZkStateReader(collectionStates.keySet());\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertEquals(\"Default state not set to active\", \"active\", loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","sourceNew":"  @Test\n  public void testDefaultSliceState() {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultSliceState() throws Exception {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertEquals(\"Default state not set to active\", Slice.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ZkStateReader mockZkStateReader = ClusterStateTest.getMockZkStateReader(collectionStates.keySet());\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertEquals(\"Default state not set to active\", \"active\", loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","sourceNew":"  @Test\n  public void testDefaultSliceState() {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultSliceState() {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = ZkStateReader.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","sourceNew":"  @Test\n  public void testDefaultSliceState() {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getState());\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultSliceState() {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","bugFix":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","sourceNew":"  @Test\n  public void testDefaultSliceState() {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getState());\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultSliceState() {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, loadedClusterState.getSlice(\"collection1\", \"shard1\").getState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","sourceNew":"  @Test\n  public void testDefaultSliceState() {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props, \"collection1\", \"shard1\");\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null, \"collection1\");\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getState());\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultSliceState() {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","sourceNew":"  @Test\n  public void testDefaultSliceState() {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props, \"collection1\", \"shard1\");\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null, \"collection1\");\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getState());\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultSliceState() {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props);\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null);\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ea07d22cef2406e950de111f8aa7bc2edb91d56","date":1581094599,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","sourceNew":"  @Test\n  public void testDefaultSliceState() {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"node_name\", \"127.0.0.1:10000_solr\");\n    props.put(\"core\", \"core1\");\n\n    Replica replica = new Replica(\"node1\", props, \"collection1\", \"shard1\");\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null, \"collection1\");\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getState());\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultSliceState() {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n\n    Replica replica = new Replica(\"node1\", props, \"collection1\", \"shard1\");\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null, \"collection1\");\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SliceStateTest#testDefaultSliceState().mjava","sourceNew":"  @Test\n  public void testDefaultSliceState() {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"node_name\", \"127.0.0.1:10000_solr\");\n    props.put(\"core\", \"core1\");\n\n    Replica replica = new Replica(\"node1\", props, \"collection1\", \"shard1\");\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null, \"collection1\");\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.createFromJson(-1, bytes, liveNodes);\n\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getState());\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultSliceState() {\n    Map<String, DocCollection> collectionStates = new HashMap<>();\n    Set<String> liveNodes = new HashSet<>();\n    liveNodes.add(\"node1\");\n\n    Map<String, Slice> slices = new HashMap<>();\n    Map<String, Replica> sliceToProps = new HashMap<>();\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"node_name\", \"127.0.0.1:10000_solr\");\n    props.put(\"core\", \"core1\");\n\n    Replica replica = new Replica(\"node1\", props, \"collection1\", \"shard1\");\n    sliceToProps.put(\"node1\", replica);\n    Slice slice = new Slice(\"shard1\", sliceToProps, null, \"collection1\");\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, slice.getState());\n    slices.put(\"shard1\", slice);\n    collectionStates.put(\"collection1\", new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT));\n\n    ClusterState clusterState = new ClusterState(-1,liveNodes, collectionStates);\n    byte[] bytes = Utils.toJSON(clusterState);\n    ClusterState loadedClusterState = ClusterState.load(-1, bytes, liveNodes);\n\n    assertSame(\"Default state not set to active\", Slice.State.ACTIVE, loadedClusterState.getCollection(\"collection1\").getSlice(\"shard1\").getState());\n  }\n\n","bugFix":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["344b0840364d990b29b97467bfcc766ff8325d11","6681d02f2302c363be938426e68f8dfd090cc1bf"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c543b4f6989a86c0d59dfe26e92c767b5045603a"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["630b72110afca0a13a755e07ef8a4d764afb52aa"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"344b0840364d990b29b97467bfcc766ff8325d11":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["344b0840364d990b29b97467bfcc766ff8325d11"],"630b72110afca0a13a755e07ef8a4d764afb52aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0c924d4069ef5a5bc479a493befe0121aada6896":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401","d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["b693a83132c9e45afcd564fd65a25b60ed80388b","344b0840364d990b29b97467bfcc766ff8325d11"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c543b4f6989a86c0d59dfe26e92c767b5045603a":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["630b72110afca0a13a755e07ef8a4d764afb52aa","c543b4f6989a86c0d59dfe26e92c767b5045603a"],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["c543b4f6989a86c0d59dfe26e92c767b5045603a"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["b693a83132c9e45afcd564fd65a25b60ed80388b","0c924d4069ef5a5bc479a493befe0121aada6896"],"344b0840364d990b29b97467bfcc766ff8325d11":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","0c924d4069ef5a5bc479a493befe0121aada6896"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["344b0840364d990b29b97467bfcc766ff8325d11","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"630b72110afca0a13a755e07ef8a4d764afb52aa":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0c924d4069ef5a5bc479a493befe0121aada6896":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["630b72110afca0a13a755e07ef8a4d764afb52aa"],"c543b4f6989a86c0d59dfe26e92c767b5045603a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","0c924d4069ef5a5bc479a493befe0121aada6896","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}