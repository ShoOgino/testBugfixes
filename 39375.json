{"path":"src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","commits":[{"id":"bde41e22a3a64473aaf8f844f97742d0fcac0189","date":1181000700,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"/dev/null","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    List<Token> input = tokens( \"aaa BBB ccc ddd EEE\" );\n    Map<String,String> args = new HashMap<String, String>();\n\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.setWords( words );\n    \n    List<Token> expect = tokens( \"aaa BBB\" );\n    List<Token> real = getTokens(factory.create( new IterTokenStream(input) ));\n    assertTokEqual( expect, real );\n    \n    // Now force case\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    \n    expect = tokens( \"aaa\" );\n    real = getTokens(factory.create( new IterTokenStream(input) ));\n    assertTokEqual( expect, real );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    List<Token> input = tokens( \"aaa BBB ccc ddd EEE\" );\n    Map<String,String> args = new HashMap<String, String>();\n\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( solrConfig, args );\n    factory.setWords( words );\n    \n    List<Token> expect = tokens( \"aaa BBB\" );\n    List<Token> real = getTokens(factory.create( new IterTokenStream(input) ));\n    assertTokEqual( expect, real );\n    \n    // Now force case\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( solrConfig, args );\n    \n    expect = tokens( \"aaa\" );\n    real = getTokens(factory.create( new IterTokenStream(input) ));\n    assertTokEqual( expect, real );\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    List<Token> input = tokens( \"aaa BBB ccc ddd EEE\" );\n    Map<String,String> args = new HashMap<String, String>();\n\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.setWords( words );\n    \n    List<Token> expect = tokens( \"aaa BBB\" );\n    List<Token> real = getTokens(factory.create( new IterTokenStream(input) ));\n    assertTokEqual( expect, real );\n    \n    // Now force case\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    \n    expect = tokens( \"aaa\" );\n    real = getTokens(factory.create( new IterTokenStream(input) ));\n    assertTokEqual( expect, real );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    List<Token> input = tokens( \"aaa BBB ccc ddd EEE\" );\n    Map<String,String> args = new HashMap<String, String>();\n\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.inform( solrConfig.getResourceLoader() );\n    factory.setWords( words );\n    \n    List<Token> expect = tokens( \"aaa BBB\" );\n    List<Token> real = getTokens(factory.create( new IterTokenStream(input) ));\n    assertTokEqual( expect, real );\n    \n    // Now force case\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    factory.inform( solrConfig.getResourceLoader() );\n    \n    expect = tokens( \"aaa\" );\n    real = getTokens(factory.create( new IterTokenStream(input) ));\n    assertTokEqual( expect, real );\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    List<Token> input = tokens( \"aaa BBB ccc ddd EEE\" );\n    Map<String,String> args = new HashMap<String, String>();\n\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( solrConfig, args );\n    factory.setWords( words );\n    \n    List<Token> expect = tokens( \"aaa BBB\" );\n    List<Token> real = getTokens(factory.create( new IterTokenStream(input) ));\n    assertTokEqual( expect, real );\n    \n    // Now force case\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( solrConfig, args );\n    \n    expect = tokens( \"aaa\" );\n    real = getTokens(factory.create( new IterTokenStream(input) ));\n    assertTokEqual( expect, real );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    Map<String,String> args = new HashMap<String, String>();\n\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.inform( solrConfig.getResourceLoader() );\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    TokenStream stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Test Stopwords (ignoreCase via the setter instead)\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>();\n    factory.init( args );\n    factory.inform( solrConfig.getResourceLoader() );\n    factory.setIgnoreCase(true);\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Now force case\n    args = new HashMap<String, String>();\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    factory.inform( solrConfig.getResourceLoader() );\n    assertFalse(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    List<Token> input = tokens( \"aaa BBB ccc ddd EEE\" );\n    Map<String,String> args = new HashMap<String, String>();\n\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.inform( solrConfig.getResourceLoader() );\n    factory.setWords( words );\n    \n    List<Token> expect = tokens( \"aaa BBB\" );\n    List<Token> real = getTokens(factory.create( new IterTokenStream(input) ));\n    assertTokEqual( expect, real );\n    \n    // Now force case\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    factory.inform( solrConfig.getResourceLoader() );\n    \n    expect = tokens( \"aaa\" );\n    real = getTokens(factory.create( new IterTokenStream(input) ));\n    assertTokEqual( expect, real );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d32aa039d84ab454629ee28b64c63d777b5c9ce3","date":1268237977,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    Map<String,String> args = new HashMap<String, String>();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.inform( loader );\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    TokenStream stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Test Stopwords (ignoreCase via the setter instead)\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>();\n    factory.init( args );\n    factory.inform( loader );\n    factory.setIgnoreCase(true);\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Now force case\n    args = new HashMap<String, String>();\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    factory.inform( loader );\n    assertFalse(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    Map<String,String> args = new HashMap<String, String>();\n\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.inform( solrConfig.getResourceLoader() );\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    TokenStream stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Test Stopwords (ignoreCase via the setter instead)\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>();\n    factory.init( args );\n    factory.inform( solrConfig.getResourceLoader() );\n    factory.setIgnoreCase(true);\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Now force case\n    args = new HashMap<String, String>();\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    factory.inform( solrConfig.getResourceLoader() );\n    assertFalse(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"src/test/org/apache/solr/analysis/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    Map<String,String> args = new HashMap<String, String>();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.inform( loader );\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    TokenStream stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Test Stopwords (ignoreCase via the setter instead)\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>();\n    factory.init( args );\n    factory.inform( loader );\n    factory.setIgnoreCase(true);\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Now force case\n    args = new HashMap<String, String>();\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    factory.inform( loader );\n    assertFalse(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    Map<String,String> args = new HashMap<String, String>();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    \n    // Test Stopwords\n    KeepWordFilterFactory factory = new KeepWordFilterFactory();\n    args.put( \"ignoreCase\", \"true\" );\n    factory.init( args );\n    factory.inform( loader );\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    TokenStream stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Test Stopwords (ignoreCase via the setter instead)\n    factory = new KeepWordFilterFactory();\n    args = new HashMap<String, String>();\n    factory.init( args );\n    factory.inform( loader );\n    factory.setIgnoreCase(true);\n    factory.setWords( words );\n    assertTrue(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n    \n    // Now force case\n    args = new HashMap<String, String>();\n    args.put( \"ignoreCase\", \"false\" );\n    factory.init( args );\n    factory.inform( loader );\n    assertFalse(factory.isIgnoreCase());\n    stream = factory.create(new WhitespaceTokenizer(new StringReader(input)));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["bde41e22a3a64473aaf8f844f97742d0fcac0189"],"d32aa039d84ab454629ee28b64c63d777b5c9ce3":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d32aa039d84ab454629ee28b64c63d777b5c9ce3"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["6d6338c87060be5f66757a94945975f3bbd377a9"],"bde41e22a3a64473aaf8f844f97742d0fcac0189":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"d32aa039d84ab454629ee28b64c63d777b5c9ce3":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["bde41e22a3a64473aaf8f844f97742d0fcac0189"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"bde41e22a3a64473aaf8f844f97742d0fcac0189":["6d6338c87060be5f66757a94945975f3bbd377a9"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["d32aa039d84ab454629ee28b64c63d777b5c9ce3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}