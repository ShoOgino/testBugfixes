{"path":"solr/core/src/java/org/apache/solr/rest/FieldCollectionResource#get().mjava","commits":[{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/FieldCollectionResource#get().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Representation get() {\n    try {\n      // Get all explicitly defined fields from the schema\n      Set<String> fieldNames = new HashSet<String>(getSchema().getFields().keySet());\n\n      final List<SimpleOrderedMap<Object>> fieldCollectionProperties = new ArrayList<SimpleOrderedMap<Object>>(fieldNames.size());\n\n      if (null == getRequestedFields()) {\n        for (String fieldName : fieldNames) {\n          fieldCollectionProperties.add(getFieldProperties(getSchema().getFieldOrNull(fieldName)));\n        }\n      } else {\n        if (0 == getRequestedFields().size()) {\n          String message = \"Empty \" + CommonParams.FL + \" parameter value\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        }\n        for (String field : fieldNames) {\n          if (getRequestedFields().containsKey(field)) {\n            getRequestedFields().put(field, getFieldProperties(getSchema().getFieldOrNull(field)));\n          }\n        }\n        // Use the same order as the fl parameter\n        for (SimpleOrderedMap<Object> fieldProperties : getRequestedFields().values()) {\n          // Should there be some form of error condition\n          // if one or more of the requested fields were not found?\n          if (null != fieldProperties) {\n            fieldCollectionProperties.add(fieldProperties);\n          }\n        }\n      }\n      getSolrResponse().add(SchemaRestApi.FIELDS, fieldCollectionProperties);\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47ade09239358147b3ebd60bed41b957e2f75891","date":1362696078,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/FieldCollectionResource#get().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/FieldCollectionResource#get().mjava","sourceNew":"  @Override\n  public Representation get() {\n    try {\n      final List<SimpleOrderedMap<Object>> props = new ArrayList<SimpleOrderedMap<Object>>();\n      if (null == getRequestedFields()) {\n        SortedSet<String> fieldNames = new TreeSet<String>(getSchema().getFields().keySet());\n        for (String fieldName : fieldNames) {\n          props.add(getFieldProperties(getSchema().getFields().get(fieldName)));\n        }\n      } else {\n        if (0 == getRequestedFields().size()) {\n          String message = \"Empty \" + CommonParams.FL + \" parameter value\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        }\n        // Use the same order as the fl parameter\n        for (String fieldName : getRequestedFields()) {\n          final SchemaField field;\n          if (includeDynamic) {\n            field = getSchema().getFieldOrNull(fieldName);\n          } else {\n            field = getSchema().getFields().get(fieldName);\n          }\n          if (null == field) {\n            log.info(\"Requested field '\" + fieldName + \"' not found.\");\n          } else {\n            props.add(getFieldProperties(field));\n          }\n        }\n      }\n      getSolrResponse().add(SchemaRestApi.FIELDS, props);\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation get() {\n    try {\n      // Get all explicitly defined fields from the schema\n      Set<String> fieldNames = new HashSet<String>(getSchema().getFields().keySet());\n\n      final List<SimpleOrderedMap<Object>> fieldCollectionProperties = new ArrayList<SimpleOrderedMap<Object>>(fieldNames.size());\n\n      if (null == getRequestedFields()) {\n        for (String fieldName : fieldNames) {\n          fieldCollectionProperties.add(getFieldProperties(getSchema().getFieldOrNull(fieldName)));\n        }\n      } else {\n        if (0 == getRequestedFields().size()) {\n          String message = \"Empty \" + CommonParams.FL + \" parameter value\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        }\n        for (String field : fieldNames) {\n          if (getRequestedFields().containsKey(field)) {\n            getRequestedFields().put(field, getFieldProperties(getSchema().getFieldOrNull(field)));\n          }\n        }\n        // Use the same order as the fl parameter\n        for (SimpleOrderedMap<Object> fieldProperties : getRequestedFields().values()) {\n          // Should there be some form of error condition\n          // if one or more of the requested fields were not found?\n          if (null != fieldProperties) {\n            fieldCollectionProperties.add(fieldProperties);\n          }\n        }\n      }\n      getSolrResponse().add(SchemaRestApi.FIELDS, fieldCollectionProperties);\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","date":1364185773,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#get().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/FieldCollectionResource#get().mjava","sourceNew":"  @Override\n  public Representation get() {\n    try {\n      final List<SimpleOrderedMap<Object>> props = new ArrayList<SimpleOrderedMap<Object>>();\n      if (null == getRequestedFields()) {\n        SortedSet<String> fieldNames = new TreeSet<String>(getSchema().getFields().keySet());\n        for (String fieldName : fieldNames) {\n          props.add(getFieldProperties(getSchema().getFields().get(fieldName)));\n        }\n      } else {\n        if (0 == getRequestedFields().size()) {\n          String message = \"Empty \" + CommonParams.FL + \" parameter value\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        }\n        // Use the same order as the fl parameter\n        for (String fieldName : getRequestedFields()) {\n          final SchemaField field;\n          if (includeDynamic) {\n            field = getSchema().getFieldOrNull(fieldName);\n          } else {\n            field = getSchema().getFields().get(fieldName);\n          }\n          if (null == field) {\n            log.info(\"Requested field '\" + fieldName + \"' not found.\");\n          } else {\n            props.add(getFieldProperties(field));\n          }\n        }\n      }\n      getSolrResponse().add(IndexSchema.FIELDS, props);\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation get() {\n    try {\n      final List<SimpleOrderedMap<Object>> props = new ArrayList<SimpleOrderedMap<Object>>();\n      if (null == getRequestedFields()) {\n        SortedSet<String> fieldNames = new TreeSet<String>(getSchema().getFields().keySet());\n        for (String fieldName : fieldNames) {\n          props.add(getFieldProperties(getSchema().getFields().get(fieldName)));\n        }\n      } else {\n        if (0 == getRequestedFields().size()) {\n          String message = \"Empty \" + CommonParams.FL + \" parameter value\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        }\n        // Use the same order as the fl parameter\n        for (String fieldName : getRequestedFields()) {\n          final SchemaField field;\n          if (includeDynamic) {\n            field = getSchema().getFieldOrNull(fieldName);\n          } else {\n            field = getSchema().getFields().get(fieldName);\n          }\n          if (null == field) {\n            log.info(\"Requested field '\" + fieldName + \"' not found.\");\n          } else {\n            props.add(getFieldProperties(field));\n          }\n        }\n      }\n      getSolrResponse().add(SchemaRestApi.FIELDS, props);\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"47ade09239358147b3ebd60bed41b957e2f75891":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["47ade09239358147b3ebd60bed41b957e2f75891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"]},"commit2Childs":{"47ade09239358147b3ebd60bed41b957e2f75891":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["47ade09239358147b3ebd60bed41b957e2f75891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}