{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermState#copyFrom(TermState).mjava","commits":[{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermState#copyFrom(TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermState#copyFrom(TermState).mjava","sourceNew":"  @Override\n  public void copyFrom(TermState _other) {\n    assert _other instanceof BlockTermState : \"can not copy from \" + _other.getClass().getName();\n    BlockTermState other = (BlockTermState) _other;\n    super.copyFrom(_other);\n    docFreq = other.docFreq;\n    totalTermFreq = other.totalTermFreq;\n    termCount = other.termCount;\n    blockFilePointer = other.blockFilePointer;\n\n    // NOTE: don't copy blockTermCount;\n    // it's \"transient\": used only by the \"primary\"\n    // termState, and regenerated on seek by TermState\n  }\n\n","sourceOld":"  @Override\n  public void copyFrom(TermState _other) {\n    assert _other instanceof PrefixCodedTermState : \"can not copy from \" + _other.getClass().getName();\n    PrefixCodedTermState other = (PrefixCodedTermState) _other;\n    super.copyFrom(_other);\n    filePointer = other.filePointer;\n    docFreq = other.docFreq;\n    totalTermFreq = other.totalTermFreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd1bfe3cedf815c14939d170d53031c88eb5c444","date":1295896578,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermState#copyFrom(TermState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void copyFrom(TermState _other) {\n    assert _other instanceof BlockTermState : \"can not copy from \" + _other.getClass().getName();\n    BlockTermState other = (BlockTermState) _other;\n    super.copyFrom(_other);\n    docFreq = other.docFreq;\n    totalTermFreq = other.totalTermFreq;\n    termCount = other.termCount;\n    blockFilePointer = other.blockFilePointer;\n\n    // NOTE: don't copy blockTermCount;\n    // it's \"transient\": used only by the \"primary\"\n    // termState, and regenerated on seek by TermState\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermState#copyFrom(TermState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void copyFrom(TermState _other) {\n    assert _other instanceof BlockTermState : \"can not copy from \" + _other.getClass().getName();\n    BlockTermState other = (BlockTermState) _other;\n    super.copyFrom(_other);\n    docFreq = other.docFreq;\n    totalTermFreq = other.totalTermFreq;\n    termCount = other.termCount;\n    blockFilePointer = other.blockFilePointer;\n\n    // NOTE: don't copy blockTermCount;\n    // it's \"transient\": used only by the \"primary\"\n    // termState, and regenerated on seek by TermState\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermState#copyFrom(TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermState#copyFrom(TermState).mjava","sourceNew":"  @Override\n  public void copyFrom(TermState _other) {\n    assert _other instanceof BlockTermState : \"can not copy from \" + _other.getClass().getName();\n    BlockTermState other = (BlockTermState) _other;\n    super.copyFrom(_other);\n    docFreq = other.docFreq;\n    totalTermFreq = other.totalTermFreq;\n    termBlockOrd = other.termBlockOrd;\n    blockFilePointer = other.blockFilePointer;\n\n    // NOTE: don't copy blockTermCount;\n    // it's \"transient\": used only by the \"primary\"\n    // termState, and regenerated on seek by TermState\n  }\n\n","sourceOld":"  @Override\n  public void copyFrom(TermState _other) {\n    assert _other instanceof BlockTermState : \"can not copy from \" + _other.getClass().getName();\n    BlockTermState other = (BlockTermState) _other;\n    super.copyFrom(_other);\n    docFreq = other.docFreq;\n    totalTermFreq = other.totalTermFreq;\n    termCount = other.termCount;\n    blockFilePointer = other.blockFilePointer;\n\n    // NOTE: don't copy blockTermCount;\n    // it's \"transient\": used only by the \"primary\"\n    // termState, and regenerated on seek by TermState\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTermState#copyFrom(TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermState#copyFrom(TermState).mjava","sourceNew":"  @Override\n  public void copyFrom(TermState _other) {\n    assert _other instanceof BlockTermState : \"can not copy from \" + _other.getClass().getName();\n    BlockTermState other = (BlockTermState) _other;\n    super.copyFrom(_other);\n    docFreq = other.docFreq;\n    totalTermFreq = other.totalTermFreq;\n    termBlockOrd = other.termBlockOrd;\n    blockFilePointer = other.blockFilePointer;\n\n    // NOTE: don't copy blockTermCount;\n    // it's \"transient\": used only by the \"primary\"\n    // termState, and regenerated on seek by TermState\n  }\n\n","sourceOld":"  @Override\n  public void copyFrom(TermState _other) {\n    assert _other instanceof BlockTermState : \"can not copy from \" + _other.getClass().getName();\n    BlockTermState other = (BlockTermState) _other;\n    super.copyFrom(_other);\n    docFreq = other.docFreq;\n    totalTermFreq = other.totalTermFreq;\n    termBlockOrd = other.termBlockOrd;\n    blockFilePointer = other.blockFilePointer;\n\n    // NOTE: don't copy blockTermCount;\n    // it's \"transient\": used only by the \"primary\"\n    // termState, and regenerated on seek by TermState\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"fd1bfe3cedf815c14939d170d53031c88eb5c444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1add9ddc0005b07550d4350720aac22dc9886b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"fd1bfe3cedf815c14939d170d53031c88eb5c444":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd1bfe3cedf815c14939d170d53031c88eb5c444","29ef99d61cda9641b6250bf9567329a6e65f901d","b1add9ddc0005b07550d4350720aac22dc9886b3"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["60ba444201d2570214b6fcf1d15600dc1a01f548","29ef99d61cda9641b6250bf9567329a6e65f901d"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd1bfe3cedf815c14939d170d53031c88eb5c444","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}