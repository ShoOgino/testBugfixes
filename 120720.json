{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#singleEntityNoRows().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#singleEntityNoRows().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void singleEntityNoRows() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadDataConfig(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.documents.get(0).entities.get(0);\n      for (DataConfig.Field field : ent.fields) {\n        field.nameOrColName = field.name = field.column;\n      }\n      MockDataSource.setIterator(\"select * from x\", new ArrayList().iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams();\n      rp.command = \"full-import\";\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.rumCmd(rp, swi, Collections.EMPTY_MAP);\n      Assert.assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(0, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(0, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["78ba4a4cc84cf69e69a7a156d7180ff65606ca93"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10d7742d5e77046179aac47b48b3e254d1621b44","date":1219897795,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#singleEntityNoRows().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#singleEntityNoRows().mjava","sourceNew":"  @Test\n  public void singleEntityNoRows() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadDataConfig(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.documents.get(0).entities.get(0);\n      for (DataConfig.Field field : ent.fields) {\n        field.nameOrColName = field.name = field.column;\n      }\n      MockDataSource.setIterator(\"select * from x\", new ArrayList().iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams();\n      rp.command = \"full-import\";\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi, Collections.EMPTY_MAP);\n      Assert.assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(0, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(0, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void singleEntityNoRows() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadDataConfig(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.documents.get(0).entities.get(0);\n      for (DataConfig.Field field : ent.fields) {\n        field.nameOrColName = field.name = field.column;\n      }\n      MockDataSource.setIterator(\"select * from x\", new ArrayList().iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams();\n      rp.command = \"full-import\";\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.rumCmd(rp, swi, Collections.EMPTY_MAP);\n      Assert.assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(0, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(0, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78ba4a4cc84cf69e69a7a156d7180ff65606ca93","date":1227165581,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#singleEntityNoRows().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#singleEntityNoRows().mjava","sourceNew":"  @Test\n  public void singleEntityNoRows() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadDataConfig(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.documents.get(0).entities.get(0);\n      MockDataSource.setIterator(\"select * from x\", new ArrayList().iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams();\n      rp.command = \"full-import\";\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi, Collections.EMPTY_MAP);\n      Assert.assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(0, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(0, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void singleEntityNoRows() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadDataConfig(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.documents.get(0).entities.get(0);\n      for (DataConfig.Field field : ent.fields) {\n        field.nameOrColName = field.name = field.column;\n      }\n      MockDataSource.setIterator(\"select * from x\", new ArrayList().iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams();\n      rp.command = \"full-import\";\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi, Collections.EMPTY_MAP);\n      Assert.assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(0, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(0, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db6dfac30d1553e9356900c2b76b768139483a62","date":1230619368,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#singleEntityNoRows().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#singleEntityNoRows().mjava","sourceNew":"  @Test\n  public void singleEntityNoRows() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadDataConfig(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      MockDataSource.setIterator(\"select * from x\", new ArrayList().iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams();\n      rp.command = \"full-import\";\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(0, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(0, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void singleEntityNoRows() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadDataConfig(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.documents.get(0).entities.get(0);\n      MockDataSource.setIterator(\"select * from x\", new ArrayList().iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams();\n      rp.command = \"full-import\";\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi, Collections.EMPTY_MAP);\n      Assert.assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(0, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(0, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eef6923572a3e084a010d725e158dfc9e8b8a815","date":1255725256,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#singleEntityNoRows().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#singleEntityNoRows().mjava","sourceNew":"  @Test\n  public void singleEntityNoRows() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadAndInit(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      MockDataSource.setIterator(\"select * from x\", new ArrayList().iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams();\n      rp.command = \"full-import\";\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(0, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(0, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void singleEntityNoRows() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadDataConfig(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      MockDataSource.setIterator(\"select * from x\", new ArrayList().iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams();\n      rp.command = \"full-import\";\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(0, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(0, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#singleEntityNoRows().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#singleEntityNoRows().mjava","sourceNew":"  @Test\n  public void singleEntityNoRows() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadAndInit(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      MockDataSource.setIterator(\"select * from x\", new ArrayList().iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams();\n      rp.command = \"full-import\";\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(0, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(0, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void singleEntityNoRows() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadAndInit(dc_singleEntity);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      MockDataSource.setIterator(\"select * from x\", new ArrayList().iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams();\n      rp.command = \"full-import\";\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.TRUE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.TRUE, swi.commitCalled);\n      Assert.assertEquals(0, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount\n              .get());\n      Assert\n              .assertEquals(0, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.rowsCount\n              .get());\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"78ba4a4cc84cf69e69a7a156d7180ff65606ca93":["10d7742d5e77046179aac47b48b3e254d1621b44"],"10d7742d5e77046179aac47b48b3e254d1621b44":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eef6923572a3e084a010d725e158dfc9e8b8a815":["db6dfac30d1553e9356900c2b76b768139483a62"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["eef6923572a3e084a010d725e158dfc9e8b8a815"],"db6dfac30d1553e9356900c2b76b768139483a62":["78ba4a4cc84cf69e69a7a156d7180ff65606ca93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"78ba4a4cc84cf69e69a7a156d7180ff65606ca93":["db6dfac30d1553e9356900c2b76b768139483a62"],"10d7742d5e77046179aac47b48b3e254d1621b44":["78ba4a4cc84cf69e69a7a156d7180ff65606ca93"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["10d7742d5e77046179aac47b48b3e254d1621b44"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eef6923572a3e084a010d725e158dfc9e8b8a815":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"db6dfac30d1553e9356900c2b76b768139483a62":["eef6923572a3e084a010d725e158dfc9e8b8a815"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}