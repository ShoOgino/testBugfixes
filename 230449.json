{"path":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"4e371e5cc5fa0d900720a4a38ecf0b81ed44a6cd","date":1225474382,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n    context.put(\"response\", response);\n    context.put(\"page\",new PageTool(request,response));\n    template.merge(context, writer);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d3880889286e7f2bc25c74b8be6022d606a0207","date":1226541828,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n    context.put(\"response\", response);\n    context.put(\"page\",new PageTool(request,response));\n    context.put(\"esc\", new EscapeTool());\n    template.merge(context, writer);\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n    context.put(\"response\", response);\n    context.put(\"page\",new PageTool(request,response));\n    template.merge(context, writer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b829eaa611bac9e7e5baf5c6689292966898ed6","date":1227006031,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    // TODO: Make this use the SolrJ API, rather than \"embedded\" Solr API\n    context.put(\"request\", request);    // TODO: inject a SolrRequest instead of a SolrQueryRequest\n    context.put(\"response\", response);  // TODO: inject a SolrResponse instead of a SolrQueryResponse\n    context.put(\"page\",new PageTool(request,response));\n    context.put(\"esc\", new EscapeTool());\n   \n    // create output, optionally wrap it into a json object\n    if (request.getParams().getBool(\"v.json\", false)) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n      writer.write(request.getParams().get(\"v.json\") + \"(\");\n      writer.write(getJSONWrap(stringWriter.toString()));\n      writer.write(')');\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n    context.put(\"response\", response);\n    context.put(\"page\",new PageTool(request,response));\n    context.put(\"esc\", new EscapeTool());\n    template.merge(context, writer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce3430aa3244ced37b3cd7af892695a9735e89f2","date":1227006166,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    // TODO: Make this use the SolrJ API, rather than \"embedded\" Solr API\n    context.put(\"request\", request);    // TODO: inject a SolrRequest instead of a SolrQueryRequest\n    context.put(\"response\", response);  // TODO: inject a SolrResponse instead of a SolrQueryResponse\n    context.put(\"page\",new PageTool(request,response));\n    context.put(\"esc\", new EscapeTool());\n   \n    // create output, optionally wrap it into a json object\n    if (request.getParams().get(\"v.json\") != null) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n      writer.write(request.getParams().get(\"v.json\") + \"(\");\n      writer.write(getJSONWrap(stringWriter.toString()));\n      writer.write(')');\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    // TODO: Make this use the SolrJ API, rather than \"embedded\" Solr API\n    context.put(\"request\", request);    // TODO: inject a SolrRequest instead of a SolrQueryRequest\n    context.put(\"response\", response);  // TODO: inject a SolrResponse instead of a SolrQueryResponse\n    context.put(\"page\",new PageTool(request,response));\n    context.put(\"esc\", new EscapeTool());\n   \n    // create output, optionally wrap it into a json object\n    if (request.getParams().getBool(\"v.json\", false)) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n      writer.write(request.getParams().get(\"v.json\") + \"(\");\n      writer.write(getJSONWrap(stringWriter.toString()));\n      writer.write(')');\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6581f14d0fcaf18564b7604a223ef502482e9d90","date":1229367920,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    SolrResponse rsp = new QueryResponse();\n    rsp.setResponse(new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response));\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"page\",new PageTool(request,response));\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"math\", new MathTool());\n   \n    // TODO: check for v.layout, render to string, then render v.layout's template setting $content in the context\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper !=null);\n    \n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n      \n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n      \n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    // TODO: Make this use the SolrJ API, rather than \"embedded\" Solr API\n    context.put(\"request\", request);    // TODO: inject a SolrRequest instead of a SolrQueryRequest\n    context.put(\"response\", response);  // TODO: inject a SolrResponse instead of a SolrQueryResponse\n    context.put(\"page\",new PageTool(request,response));\n    context.put(\"esc\", new EscapeTool());\n   \n    // create output, optionally wrap it into a json object\n    if (request.getParams().get(\"v.json\") != null) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n      writer.write(request.getParams().get(\"v.json\") + \"(\");\n      writer.write(getJSONWrap(stringWriter.toString()));\n      writer.write(')');\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8105ca702f52264fa7b15342382aac30cae32f1","date":1229419495,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    SolrResponse rsp = new QueryResponse();\n    rsp.setResponse(new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response));\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"page\",new PageTool(request,response));\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"math\", new MathTool());\n   \n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper !=null);\n    \n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n      \n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n      \n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    SolrResponse rsp = new QueryResponse();\n    rsp.setResponse(new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response));\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"page\",new PageTool(request,response));\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"math\", new MathTool());\n   \n    // TODO: check for v.layout, render to string, then render v.layout's template setting $content in the context\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper !=null);\n    \n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n      \n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n      \n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9758eb97cac6dd6632c60691fac2cc43cc859552","date":1229853906,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\",new PageTool(request,response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"math\", new MathTool());\n   \n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper !=null);\n    \n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n      \n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n      \n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    SolrResponse rsp = new QueryResponse();\n    rsp.setResponse(new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response));\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"page\",new PageTool(request,response));\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"math\", new MathTool());\n   \n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper !=null);\n    \n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n      \n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n      \n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8296d592dd83cd4186381cdc4e61f784dfb620ae","date":1235563803,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\",new PageTool(request,response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper !=null);\n    \n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n      \n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n      \n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\",new PageTool(request,response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"math\", new MathTool());\n   \n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper !=null);\n    \n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n      \n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n      \n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65c941e8dcb3bb0ee6b785e349a931111c65e8ff","date":1268850890,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\",new PageTool(request,response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper !=null);\n    \n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n      \n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n      \n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0c840fcaa8a53dc8e038a0f7776c84283637f9","date":1268855982,"type":5,"author":"Yonik Seeley","isMerge":true,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\",new PageTool(request,response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper !=null);\n    \n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n      \n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n      \n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65c941e8dcb3bb0ee6b785e349a931111c65e8ff":["8296d592dd83cd4186381cdc4e61f784dfb620ae"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4e371e5cc5fa0d900720a4a38ecf0b81ed44a6cd":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a8105ca702f52264fa7b15342382aac30cae32f1":["6581f14d0fcaf18564b7604a223ef502482e9d90"],"6581f14d0fcaf18564b7604a223ef502482e9d90":["ce3430aa3244ced37b3cd7af892695a9735e89f2"],"9b829eaa611bac9e7e5baf5c6689292966898ed6":["7d3880889286e7f2bc25c74b8be6022d606a0207"],"fb0c840fcaa8a53dc8e038a0f7776c84283637f9":["8296d592dd83cd4186381cdc4e61f784dfb620ae","65c941e8dcb3bb0ee6b785e349a931111c65e8ff"],"8296d592dd83cd4186381cdc4e61f784dfb620ae":["9758eb97cac6dd6632c60691fac2cc43cc859552"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d3880889286e7f2bc25c74b8be6022d606a0207":["4e371e5cc5fa0d900720a4a38ecf0b81ed44a6cd"],"9758eb97cac6dd6632c60691fac2cc43cc859552":["a8105ca702f52264fa7b15342382aac30cae32f1"],"ce3430aa3244ced37b3cd7af892695a9735e89f2":["9b829eaa611bac9e7e5baf5c6689292966898ed6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"65c941e8dcb3bb0ee6b785e349a931111c65e8ff":["fb0c840fcaa8a53dc8e038a0f7776c84283637f9"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4e371e5cc5fa0d900720a4a38ecf0b81ed44a6cd"],"4e371e5cc5fa0d900720a4a38ecf0b81ed44a6cd":["7d3880889286e7f2bc25c74b8be6022d606a0207"],"a8105ca702f52264fa7b15342382aac30cae32f1":["9758eb97cac6dd6632c60691fac2cc43cc859552"],"6581f14d0fcaf18564b7604a223ef502482e9d90":["a8105ca702f52264fa7b15342382aac30cae32f1"],"9b829eaa611bac9e7e5baf5c6689292966898ed6":["ce3430aa3244ced37b3cd7af892695a9735e89f2"],"fb0c840fcaa8a53dc8e038a0f7776c84283637f9":[],"8296d592dd83cd4186381cdc4e61f784dfb620ae":["65c941e8dcb3bb0ee6b785e349a931111c65e8ff","fb0c840fcaa8a53dc8e038a0f7776c84283637f9"],"7d3880889286e7f2bc25c74b8be6022d606a0207":["9b829eaa611bac9e7e5baf5c6689292966898ed6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ce3430aa3244ced37b3cd7af892695a9735e89f2":["6581f14d0fcaf18564b7604a223ef502482e9d90"],"9758eb97cac6dd6632c60691fac2cc43cc859552":["8296d592dd83cd4186381cdc4e61f784dfb620ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fb0c840fcaa8a53dc8e038a0f7776c84283637f9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}