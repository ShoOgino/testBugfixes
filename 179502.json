{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolverImpl#resolve(String).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolverImpl#resolve(String).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object resolve(String name) {\n    if (name == null)\n      return container;\n    if (\"\".equals(name))\n      return null;\n    String[] parts = DOT_SPLIT.split(name, 0);\n    Map<String, Object> namespace = container;\n    for (int i = 0; i < parts.length; i++) {\n      String thePart = parts[i];\n      if (i == parts.length - 1) {\n        return namespace.get(thePart);\n      }\n      Object temp = namespace.get(thePart);\n      if (temp == null) {\n        return namespace.get(mergeAll(parts, i));\n      } else {\n        if (temp instanceof Map) {\n          namespace = (Map) temp;\n        } else {\n          return null;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dfc8d8c033e2239995c45b976c90c18559da31e","date":1235021328,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolverImpl#resolve(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolverImpl#resolve(String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object resolve(String name) {\n    if (name == null)\n      return container;\n    if (\"\".equals(name))\n      return null;\n    String[] parts = DOT_SPLIT.split(name, 0);\n    CURRENT_VARIABLE_RESOLVER.set(this);\n    try {\n      Map<String, Object> namespace = container;\n      for (int i = 0; i < parts.length; i++) {\n        String thePart = parts[i];\n        if (i == parts.length - 1) {\n          return namespace.get(thePart);\n        }\n        Object temp = namespace.get(thePart);\n        if (temp == null) {\n          return namespace.get(mergeAll(parts, i));\n        } else {\n          if (temp instanceof Map) {\n            namespace = (Map) temp;\n          } else {\n            return null;\n          }\n        }\n      }\n    } finally {\n      CURRENT_VARIABLE_RESOLVER.set(null);\n    }\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object resolve(String name) {\n    if (name == null)\n      return container;\n    if (\"\".equals(name))\n      return null;\n    String[] parts = DOT_SPLIT.split(name, 0);\n    Map<String, Object> namespace = container;\n    for (int i = 0; i < parts.length; i++) {\n      String thePart = parts[i];\n      if (i == parts.length - 1) {\n        return namespace.get(thePart);\n      }\n      Object temp = namespace.get(thePart);\n      if (temp == null) {\n        return namespace.get(mergeAll(parts, i));\n      } else {\n        if (temp instanceof Map) {\n          namespace = (Map) temp;\n        } else {\n          return null;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01f99c7ade0570316e3f00d92f01a830c675e1f3","date":1258543337,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolverImpl#resolve(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolverImpl#resolve(String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object resolve(String name) {\n    if (name == null)\n      return container;\n    if (\"\".equals(name))\n      return null;\n    String[] parts = DOT_SPLIT.split(name, 0);\n    CURRENT_VARIABLE_RESOLVER.set(this);\n    try {\n      Map<String, Object> namespace = container;\n      for (int i = 0; i < parts.length; i++) {\n        String thePart = parts[i];\n        if (i == parts.length - 1) {\n          Object val = namespace.get(thePart);\n          return val == null ? getDefault(name): val ;\n        }\n        Object temp = namespace.get(thePart);\n        if (temp == null) {\n          Object val = namespace.get(mergeAll(parts, i));\n          return val == null ? getDefault(name): val ;\n        } else {\n          if (temp instanceof Map) {\n            namespace = (Map) temp;\n          } else {\n            return getDefault(name);\n          }\n        }\n      }\n    } finally {\n      CURRENT_VARIABLE_RESOLVER.remove();\n    }\n    return getDefault(name);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object resolve(String name) {\n    if (name == null)\n      return container;\n    if (\"\".equals(name))\n      return null;\n    String[] parts = DOT_SPLIT.split(name, 0);\n    CURRENT_VARIABLE_RESOLVER.set(this);\n    try {\n      Map<String, Object> namespace = container;\n      for (int i = 0; i < parts.length; i++) {\n        String thePart = parts[i];\n        if (i == parts.length - 1) {\n          return namespace.get(thePart);\n        }\n        Object temp = namespace.get(thePart);\n        if (temp == null) {\n          return namespace.get(mergeAll(parts, i));\n        } else {\n          if (temp instanceof Map) {\n            namespace = (Map) temp;\n          } else {\n            return null;\n          }\n        }\n      }\n    } finally {\n      CURRENT_VARIABLE_RESOLVER.set(null);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolverImpl#resolve(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/VariableResolverImpl#resolve(String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object resolve(String name) {\n    if (name == null)\n      return container;\n    if (\"\".equals(name))\n      return null;\n    String[] parts = DOT_SPLIT.split(name, 0);\n    CURRENT_VARIABLE_RESOLVER.set(this);\n    try {\n      Map<String, Object> namespace = container;\n      for (int i = 0; i < parts.length; i++) {\n        String thePart = parts[i];\n        if (i == parts.length - 1) {\n          Object val = namespace.get(thePart);\n          return val == null ? getDefault(name): val ;\n        }\n        Object temp = namespace.get(thePart);\n        if (temp == null) {\n          Object val = namespace.get(mergeAll(parts, i));\n          return val == null ? getDefault(name): val ;\n        } else {\n          if (temp instanceof Map) {\n            namespace = (Map) temp;\n          } else {\n            return getDefault(name);\n          }\n        }\n      }\n    } finally {\n      CURRENT_VARIABLE_RESOLVER.remove();\n    }\n    return getDefault(name);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object resolve(String name) {\n    if (name == null)\n      return container;\n    if (\"\".equals(name))\n      return null;\n    String[] parts = DOT_SPLIT.split(name, 0);\n    CURRENT_VARIABLE_RESOLVER.set(this);\n    try {\n      Map<String, Object> namespace = container;\n      for (int i = 0; i < parts.length; i++) {\n        String thePart = parts[i];\n        if (i == parts.length - 1) {\n          Object val = namespace.get(thePart);\n          return val == null ? getDefault(name): val ;\n        }\n        Object temp = namespace.get(thePart);\n        if (temp == null) {\n          Object val = namespace.get(mergeAll(parts, i));\n          return val == null ? getDefault(name): val ;\n        } else {\n          if (temp instanceof Map) {\n            namespace = (Map) temp;\n          } else {\n            return getDefault(name);\n          }\n        }\n      }\n    } finally {\n      CURRENT_VARIABLE_RESOLVER.remove();\n    }\n    return getDefault(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01f99c7ade0570316e3f00d92f01a830c675e1f3":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7dfc8d8c033e2239995c45b976c90c18559da31e":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"ad94625fb8d088209f46650c8097196fec67f00c":["01f99c7ade0570316e3f00d92f01a830c675e1f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"01f99c7ade0570316e3f00d92f01a830c675e1f3":["ad94625fb8d088209f46650c8097196fec67f00c"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dfc8d8c033e2239995c45b976c90c18559da31e":["01f99c7ade0570316e3f00d92f01a830c675e1f3"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}