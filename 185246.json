{"path":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#readLegacyEntries(IndexInput,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#readLegacyEntries(IndexInput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#readLegacyEntries(IndexInput,int).mjava","sourceNew":"  private static Map<String, FileEntry> readLegacyEntries(IndexInput stream,\n      int firstInt) throws CorruptIndexException, IOException {\n    final Map<String,FileEntry> entries = new HashMap<String,FileEntry>();\n    final int count;\n    final boolean stripSegmentName;\n    if (firstInt < CompoundFileWriter.FORMAT_PRE_VERSION) {\n      if (firstInt < CompoundFileWriter.FORMAT_CURRENT) {\n        throw new CorruptIndexException(\"Incompatible format version: \"\n            + firstInt + \" expected \" + CompoundFileWriter.FORMAT_CURRENT + \" (resource: \" + stream + \")\");\n      }\n      // It's a post-3.1 index, read the count.\n      count = stream.readVInt();\n      stripSegmentName = false;\n    } else {\n      count = firstInt;\n      stripSegmentName = true;\n    }\n    \n    // read the directory and init files\n    long streamLength = stream.length();\n    FileEntry entry = null;\n    for (int i=0; i<count; i++) {\n      long offset = stream.readLong();\n      if (offset < 0 || offset > streamLength) {\n        throw new CorruptIndexException(\"Invalid CFS entry offset: \" + offset + \" (resource: \" + stream + \")\");\n      }\n      String id = stream.readString();\n      \n      if (stripSegmentName) {\n        // Fix the id to not include the segment names. This is relevant for\n        // pre-3.1 indexes.\n        id = IndexFileNames.stripSegmentName(id);\n      }\n      \n      if (entry != null) {\n        // set length of the previous entry\n        entry.length = offset - entry.offset;\n      }\n      \n      entry = new FileEntry();\n      entry.offset = offset;\n\n      assert !entries.containsKey(id);\n\n      entries.put(id, entry);\n    }\n    \n    // set the length of the final entry\n    if (entry != null) {\n      entry.length = streamLength - entry.offset;\n    }\n    \n    return entries;\n  }\n\n","sourceOld":"  private static Map<String, FileEntry> readLegacyEntries(IndexInput stream,\n      int firstInt) throws CorruptIndexException, IOException {\n    final Map<String,FileEntry> entries = new HashMap<String,FileEntry>();\n    final int count;\n    final boolean stripSegmentName;\n    if (firstInt < CompoundFileWriter.FORMAT_PRE_VERSION) {\n      if (firstInt < CompoundFileWriter.FORMAT_CURRENT) {\n        throw new CorruptIndexException(\"Incompatible format version: \"\n            + firstInt + \" expected \" + CompoundFileWriter.FORMAT_CURRENT + \" (resource: \" + stream + \")\");\n      }\n      // It's a post-3.1 index, read the count.\n      count = stream.readVInt();\n      stripSegmentName = false;\n    } else {\n      count = firstInt;\n      stripSegmentName = true;\n    }\n    \n    // read the directory and init files\n    long streamLength = stream.length();\n    FileEntry entry = null;\n    for (int i=0; i<count; i++) {\n      long offset = stream.readLong();\n      if (offset < 0 || offset > streamLength) {\n        throw new CorruptIndexException(\"Invalid CFS entry offset: \" + offset + \" (resource: \" + stream + \")\");\n      }\n      String id = stream.readString();\n      \n      if (stripSegmentName) {\n        // Fix the id to not include the segment names. This is relevant for\n        // pre-3.1 indexes.\n        id = IndexFileNames.stripSegmentName(id);\n      }\n      \n      if (entry != null) {\n        // set length of the previous entry\n        entry.length = offset - entry.offset;\n      }\n      \n      entry = new FileEntry();\n      entry.offset = offset;\n\n      assert !entries.containsKey(id);\n\n      entries.put(id, entry);\n    }\n    \n    // set the length of the final entry\n    if (entry != null) {\n      entry.length = streamLength - entry.offset;\n    }\n    \n    return entries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a914aecf1d2ee9c6e6959625e89f2b1b31de7c48","date":1339428391,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#readLegacyEntries(IndexInput,int).mjava","sourceNew":null,"sourceOld":"  private static Map<String, FileEntry> readLegacyEntries(IndexInput stream,\n      int firstInt) throws CorruptIndexException, IOException {\n    final Map<String,FileEntry> entries = new HashMap<String,FileEntry>();\n    final int count;\n    final boolean stripSegmentName;\n    if (firstInt < CompoundFileWriter.FORMAT_PRE_VERSION) {\n      if (firstInt < CompoundFileWriter.FORMAT_CURRENT) {\n        throw new CorruptIndexException(\"Incompatible format version: \"\n            + firstInt + \" expected \" + CompoundFileWriter.FORMAT_CURRENT + \" (resource: \" + stream + \")\");\n      }\n      // It's a post-3.1 index, read the count.\n      count = stream.readVInt();\n      stripSegmentName = false;\n    } else {\n      count = firstInt;\n      stripSegmentName = true;\n    }\n    \n    // read the directory and init files\n    long streamLength = stream.length();\n    FileEntry entry = null;\n    for (int i=0; i<count; i++) {\n      long offset = stream.readLong();\n      if (offset < 0 || offset > streamLength) {\n        throw new CorruptIndexException(\"Invalid CFS entry offset: \" + offset + \" (resource: \" + stream + \")\");\n      }\n      String id = stream.readString();\n      \n      if (stripSegmentName) {\n        // Fix the id to not include the segment names. This is relevant for\n        // pre-3.1 indexes.\n        id = IndexFileNames.stripSegmentName(id);\n      }\n      \n      if (entry != null) {\n        // set length of the previous entry\n        entry.length = offset - entry.offset;\n      }\n      \n      entry = new FileEntry();\n      entry.offset = offset;\n\n      assert !entries.containsKey(id);\n\n      entries.put(id, entry);\n    }\n    \n    // set the length of the final entry\n    if (entry != null) {\n      entry.length = streamLength - entry.offset;\n    }\n    \n    return entries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a914aecf1d2ee9c6e6959625e89f2b1b31de7c48":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a914aecf1d2ee9c6e6959625e89f2b1b31de7c48"]},"commit2Childs":{"a914aecf1d2ee9c6e6959625e89f2b1b31de7c48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a914aecf1d2ee9c6e6959625e89f2b1b31de7c48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}