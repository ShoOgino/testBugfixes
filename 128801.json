{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#HttpClusterStateProvider(List[String],HttpClient).mjava","commits":[{"id":"a64b273d51a6540272668680ece9f8b686ff0004","date":1492404078,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#HttpClusterStateProvider(List[String],HttpClient).mjava","pathOld":"/dev/null","sourceNew":"  public HttpClusterStateProvider(List<String> solrUrls, HttpClient httpClient) throws Exception {\n    this.httpClient = httpClient == null? HttpClientUtil.createClient(null): httpClient;\n    this.clientIsInternal = httpClient == null;\n    for (String solrUrl: solrUrls) {\n      urlScheme = solrUrl.startsWith(\"https\")? \"https\": \"http\";\n      try (SolrClient initialClient = new HttpSolrClient.Builder().withBaseSolrUrl(solrUrl).withHttpClient(httpClient).build()) {\n        Set<String> liveNodes = fetchLiveNodes(initialClient); // throws exception if unable to fetch\n        this.liveNodes = liveNodes;\n        liveNodesTimestamp = System.nanoTime();\n        break;\n      } catch (IOException e) {\n        log.warn(\"Attempt to fetch live_nodes from \" + solrUrl + \" failed.\", e);\n      }\n    }\n\n    if (this.liveNodes == null || this.liveNodes.isEmpty()) {\n      throw new RuntimeException(\"Tried fetching live_nodes using Solr URLs provided, i.e. \" + solrUrls + \". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using a working\"\n          + \" solrUrl or zkUrl.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"095183bbba1ca16181a207a7d4d1c394573aaf39","date":1492465186,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#HttpClusterStateProvider(List[String],HttpClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#HttpClusterStateProvider(List[String],HttpClient).mjava","sourceNew":"  public HttpClusterStateProvider(List<String> solrUrls, HttpClient httpClient) throws Exception {\n    this.httpClient = httpClient == null? HttpClientUtil.createClient(null): httpClient;\n    this.clientIsInternal = httpClient == null;\n    for (String solrUrl: solrUrls) {\n      urlScheme = solrUrl.startsWith(\"https\")? \"https\": \"http\";\n      try (SolrClient initialClient = new HttpSolrClient.Builder().withBaseSolrUrl(solrUrl).withHttpClient(httpClient).build()) {\n        Set<String> liveNodes = fetchLiveNodes(initialClient); // throws exception if unable to fetch\n        this.liveNodes = liveNodes;\n        liveNodesTimestamp = System.nanoTime();\n        break;\n      } catch (IOException e) {\n        log.warn(\"Attempt to fetch live_nodes from \" + solrUrl + \" failed.\", e);\n      }\n    }\n\n    if (this.liveNodes == null || this.liveNodes.isEmpty()) {\n      throw new RuntimeException(\"Tried fetching live_nodes using Solr URLs provided, i.e. \" + solrUrls + \". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n  }\n\n","sourceOld":"  public HttpClusterStateProvider(List<String> solrUrls, HttpClient httpClient) throws Exception {\n    this.httpClient = httpClient == null? HttpClientUtil.createClient(null): httpClient;\n    this.clientIsInternal = httpClient == null;\n    for (String solrUrl: solrUrls) {\n      urlScheme = solrUrl.startsWith(\"https\")? \"https\": \"http\";\n      try (SolrClient initialClient = new HttpSolrClient.Builder().withBaseSolrUrl(solrUrl).withHttpClient(httpClient).build()) {\n        Set<String> liveNodes = fetchLiveNodes(initialClient); // throws exception if unable to fetch\n        this.liveNodes = liveNodes;\n        liveNodesTimestamp = System.nanoTime();\n        break;\n      } catch (IOException e) {\n        log.warn(\"Attempt to fetch live_nodes from \" + solrUrl + \" failed.\", e);\n      }\n    }\n\n    if (this.liveNodes == null || this.liveNodes.isEmpty()) {\n      throw new RuntimeException(\"Tried fetching live_nodes using Solr URLs provided, i.e. \" + solrUrls + \". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using a working\"\n          + \" solrUrl or zkUrl.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#HttpClusterStateProvider(List[String],HttpClient).mjava","pathOld":"/dev/null","sourceNew":"  public HttpClusterStateProvider(List<String> solrUrls, HttpClient httpClient) throws Exception {\n    this.httpClient = httpClient == null? HttpClientUtil.createClient(null): httpClient;\n    this.clientIsInternal = httpClient == null;\n    for (String solrUrl: solrUrls) {\n      urlScheme = solrUrl.startsWith(\"https\")? \"https\": \"http\";\n      try (SolrClient initialClient = new HttpSolrClient.Builder().withBaseSolrUrl(solrUrl).withHttpClient(httpClient).build()) {\n        Set<String> liveNodes = fetchLiveNodes(initialClient); // throws exception if unable to fetch\n        this.liveNodes = liveNodes;\n        liveNodesTimestamp = System.nanoTime();\n        break;\n      } catch (IOException e) {\n        log.warn(\"Attempt to fetch live_nodes from \" + solrUrl + \" failed.\", e);\n      }\n    }\n\n    if (this.liveNodes == null || this.liveNodes.isEmpty()) {\n      throw new RuntimeException(\"Tried fetching live_nodes using Solr URLs provided, i.e. \" + solrUrls + \". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#HttpClusterStateProvider(List[String],HttpClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#HttpClusterStateProvider(List[String],HttpClient).mjava","sourceNew":"  public HttpClusterStateProvider(List<String> solrUrls, HttpClient httpClient) throws Exception {\n    this.httpClient = httpClient == null? HttpClientUtil.createClient(null): httpClient;\n    this.clientIsInternal = httpClient == null;\n    init(solrUrls);\n  }\n\n","sourceOld":"  public HttpClusterStateProvider(List<String> solrUrls, HttpClient httpClient) throws Exception {\n    this.httpClient = httpClient == null? HttpClientUtil.createClient(null): httpClient;\n    this.clientIsInternal = httpClient == null;\n    for (String solrUrl: solrUrls) {\n      urlScheme = solrUrl.startsWith(\"https\")? \"https\": \"http\";\n      try (SolrClient initialClient = new HttpSolrClient.Builder().withBaseSolrUrl(solrUrl).withHttpClient(httpClient).build()) {\n        Set<String> liveNodes = fetchLiveNodes(initialClient); // throws exception if unable to fetch\n        this.liveNodes = liveNodes;\n        liveNodesTimestamp = System.nanoTime();\n        break;\n      } catch (IOException e) {\n        log.warn(\"Attempt to fetch live_nodes from \" + solrUrl + \" failed.\", e);\n      }\n    }\n\n    if (this.liveNodes == null || this.liveNodes.isEmpty()) {\n      throw new RuntimeException(\"Tried fetching live_nodes using Solr URLs provided, i.e. \" + solrUrls + \". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["095183bbba1ca16181a207a7d4d1c394573aaf39"],"a64b273d51a6540272668680ece9f8b686ff0004":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"095183bbba1ca16181a207a7d4d1c394573aaf39":["a64b273d51a6540272668680ece9f8b686ff0004"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a64b273d51a6540272668680ece9f8b686ff0004":["095183bbba1ca16181a207a7d4d1c394573aaf39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a64b273d51a6540272668680ece9f8b686ff0004"],"095183bbba1ca16181a207a7d4d1c394573aaf39":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}