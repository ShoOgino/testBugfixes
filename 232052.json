{"path":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(float,BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(float,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * fired when the max non-competitive boost has changed. this is the hook to\n   * swap in a smarter actualEnum\n   */\n  private void bottomChanged(float boostValue, BytesRef lastTerm)\n      throws IOException {\n    int oldMaxEdits = maxEdits;\n    \n    // as long as the max non-competitive boost is >= the max boost\n    // for some edit distance, keep dropping the max edit distance.\n    while (maxEdits > 0 && boostValue >= calculateMaxBoost(maxEdits))\n      maxEdits--;\n    \n    if (oldMaxEdits != maxEdits) { // the maximum n has changed\n      TermsEnum newEnum = getAutomatonEnum(maxEdits, lastTerm);\n      if (newEnum != null) {\n        setEnum(newEnum);\n      }\n    }\n    // TODO, besides changing linear -> automaton, and swapping in a smaller\n    // automaton, we can also use this information to optimize the linear case\n    // itself: re-init maxDistances so the fast-fail happens for more terms due\n    // to the now stricter constraints.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a4d59223802237d352245759cf541e315aab20a","date":1285686672,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(float,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(float,BytesRef).mjava","sourceNew":"  /**\n   * fired when the max non-competitive boost has changed. this is the hook to\n   * swap in a smarter actualEnum\n   */\n  private void bottomChanged(float boostValue, BytesRef lastTerm)\n      throws IOException {\n    int oldMaxEdits = maxEdits;\n    \n    // as long as the max non-competitive boost is >= the max boost\n    // for some edit distance, keep dropping the max edit distance.\n    while (maxEdits > 0 && boostValue >= calculateMaxBoost(maxEdits))\n      maxEdits--;\n    \n    if (oldMaxEdits != maxEdits) { // the maximum n has changed\n      TermsEnum newEnum = getAutomatonEnum(maxEdits, lastTerm);\n      if (newEnum != null) {\n        setEnum(newEnum);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * fired when the max non-competitive boost has changed. this is the hook to\n   * swap in a smarter actualEnum\n   */\n  private void bottomChanged(float boostValue, BytesRef lastTerm)\n      throws IOException {\n    int oldMaxEdits = maxEdits;\n    \n    // as long as the max non-competitive boost is >= the max boost\n    // for some edit distance, keep dropping the max edit distance.\n    while (maxEdits > 0 && boostValue >= calculateMaxBoost(maxEdits))\n      maxEdits--;\n    \n    if (oldMaxEdits != maxEdits) { // the maximum n has changed\n      TermsEnum newEnum = getAutomatonEnum(maxEdits, lastTerm);\n      if (newEnum != null) {\n        setEnum(newEnum);\n      }\n    }\n    // TODO, besides changing linear -> automaton, and swapping in a smaller\n    // automaton, we can also use this information to optimize the linear case\n    // itself: re-init maxDistances so the fast-fail happens for more terms due\n    // to the now stricter constraints.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33a8b1f99104f4144f210f5d068411c297cd7163","date":1287152748,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(float,BytesRef).mjava","sourceNew":"  /**\n   * fired when the max non-competitive boost has changed. this is the hook to\n   * swap in a smarter actualEnum\n   */\n  private void bottomChanged(BytesRef lastTerm, boolean init)\n      throws IOException {\n    int oldMaxEdits = maxEdits;\n    \n    // true if the last term encountered is lexicographically equal or after the bottom term in the PQ\n    boolean termAfter = bottomTerm == null || (lastTerm != null && termComparator.compare(lastTerm, bottomTerm) >= 0);\n\n    // as long as the max non-competitive boost is >= the max boost\n    // for some edit distance, keep dropping the max edit distance.\n    while (maxEdits > 0 && (termAfter ? bottom >= calculateMaxBoost(maxEdits) : bottom > calculateMaxBoost(maxEdits)))\n      maxEdits--;\n    \n    if (oldMaxEdits != maxEdits || init) { // the maximum n has changed\n      TermsEnum newEnum = getAutomatonEnum(maxEdits, lastTerm);\n      if (newEnum != null) {\n        setEnum(newEnum);\n      } else if (init) {\n        setEnum(new LinearFuzzyTermsEnum());      \n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * fired when the max non-competitive boost has changed. this is the hook to\n   * swap in a smarter actualEnum\n   */\n  private void bottomChanged(float boostValue, BytesRef lastTerm)\n      throws IOException {\n    int oldMaxEdits = maxEdits;\n    \n    // as long as the max non-competitive boost is >= the max boost\n    // for some edit distance, keep dropping the max edit distance.\n    while (maxEdits > 0 && boostValue >= calculateMaxBoost(maxEdits))\n      maxEdits--;\n    \n    if (oldMaxEdits != maxEdits) { // the maximum n has changed\n      TermsEnum newEnum = getAutomatonEnum(maxEdits, lastTerm);\n      if (newEnum != null) {\n        setEnum(newEnum);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(float,BytesRef).mjava","sourceNew":"  /**\n   * fired when the max non-competitive boost has changed. this is the hook to\n   * swap in a smarter actualEnum\n   */\n  private void bottomChanged(BytesRef lastTerm, boolean init)\n      throws IOException {\n    int oldMaxEdits = maxEdits;\n    \n    // true if the last term encountered is lexicographically equal or after the bottom term in the PQ\n    boolean termAfter = bottomTerm == null || (lastTerm != null && termComparator.compare(lastTerm, bottomTerm) >= 0);\n\n    // as long as the max non-competitive boost is >= the max boost\n    // for some edit distance, keep dropping the max edit distance.\n    while (maxEdits > 0 && (termAfter ? bottom >= calculateMaxBoost(maxEdits) : bottom > calculateMaxBoost(maxEdits)))\n      maxEdits--;\n    \n    if (oldMaxEdits != maxEdits || init) { // the maximum n has changed\n      TermsEnum newEnum = getAutomatonEnum(maxEdits, lastTerm);\n      if (newEnum != null) {\n        setEnum(newEnum);\n      } else if (init) {\n        setEnum(new LinearFuzzyTermsEnum());      \n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * fired when the max non-competitive boost has changed. this is the hook to\n   * swap in a smarter actualEnum\n   */\n  private void bottomChanged(float boostValue, BytesRef lastTerm)\n      throws IOException {\n    int oldMaxEdits = maxEdits;\n    \n    // as long as the max non-competitive boost is >= the max boost\n    // for some edit distance, keep dropping the max edit distance.\n    while (maxEdits > 0 && boostValue >= calculateMaxBoost(maxEdits))\n      maxEdits--;\n    \n    if (oldMaxEdits != maxEdits) { // the maximum n has changed\n      TermsEnum newEnum = getAutomatonEnum(maxEdits, lastTerm);\n      if (newEnum != null) {\n        setEnum(newEnum);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(float,BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * fired when the max non-competitive boost has changed. this is the hook to\n   * swap in a smarter actualEnum\n   */\n  private void bottomChanged(float boostValue, BytesRef lastTerm)\n      throws IOException {\n    int oldMaxEdits = maxEdits;\n    \n    // as long as the max non-competitive boost is >= the max boost\n    // for some edit distance, keep dropping the max edit distance.\n    while (maxEdits > 0 && boostValue >= calculateMaxBoost(maxEdits))\n      maxEdits--;\n    \n    if (oldMaxEdits != maxEdits) { // the maximum n has changed\n      TermsEnum newEnum = getAutomatonEnum(maxEdits, lastTerm);\n      if (newEnum != null) {\n        setEnum(newEnum);\n      }\n    }\n    // TODO, besides changing linear -> automaton, and swapping in a smaller\n    // automaton, we can also use this information to optimize the linear case\n    // itself: re-init maxDistances so the fast-fail happens for more terms due\n    // to the now stricter constraints.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33a8b1f99104f4144f210f5d068411c297cd7163":["3a4d59223802237d352245759cf541e315aab20a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a4d59223802237d352245759cf541e315aab20a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","33a8b1f99104f4144f210f5d068411c297cd7163"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3a4d59223802237d352245759cf541e315aab20a","33a8b1f99104f4144f210f5d068411c297cd7163"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["33a8b1f99104f4144f210f5d068411c297cd7163"]},"commit2Childs":{"33a8b1f99104f4144f210f5d068411c297cd7163":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["3a4d59223802237d352245759cf541e315aab20a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a4d59223802237d352245759cf541e315aab20a":["33a8b1f99104f4144f210f5d068411c297cd7163","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}