{"path":"backwards/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity2().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity2().mjava","pathOld":"/dev/null","sourceNew":"  public void testInsanity2() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    String [] strings;\n    byte [] bytes;\n\n    strings = cache.getStrings(readerA, \"theString\");\n    strings = cache.getStrings(readerB, \"theString\");\n    strings = cache.getStrings(readerX, \"theString\");\n\n    // this one is ok\n    bytes = cache.getBytes(readerX, \"theByte\");\n\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.SUBREADER,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 3,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity2().mjava","pathOld":"backwards/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity2().mjava","sourceNew":"  public void testInsanity2() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    String [] strings;\n    byte [] bytes;\n\n    strings = cache.getStrings(readerA, \"theString\");\n    strings = cache.getStrings(readerB, \"theString\");\n    strings = cache.getStrings(readerX, \"theString\");\n\n    // this one is ok\n    bytes = cache.getBytes(readerX, \"theByte\");\n\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.SUBREADER,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 3,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity2() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    String [] strings;\n    byte [] bytes;\n\n    strings = cache.getStrings(readerA, \"theString\");\n    strings = cache.getStrings(readerB, \"theString\");\n    strings = cache.getStrings(readerX, \"theString\");\n\n    // this one is ok\n    bytes = cache.getBytes(readerX, \"theByte\");\n\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.SUBREADER,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 3,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}