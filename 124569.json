{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq(boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq(boolean).mjava","sourceNew":"  private Scorer makeCountingSumScorerSomeReq(boolean disableCoord) throws IOException { // At least one required scorer.\n    if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList<Scorer> allReq = new ArrayList<Scorer>(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(disableCoord, allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            requiredScorers.size() == 1\n            ? new SingleMatchScorer(requiredScorers.get(0))\n            : countingConjunctionSumScorer(disableCoord, requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              disableCoord,\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      optionalScorers.size() == 1\n                        ? new SingleMatchScorer(optionalScorers.get(0))\n                        // require 1 in combined, optional scorer.\n                        : countingDisjunctionSumScorer(optionalScorers, 1));\n      }\n    }\n  }\n\n","sourceOld":"  private Scorer makeCountingSumScorerSomeReq(boolean disableCoord) throws IOException { // At least one required scorer.\n    if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList<Scorer> allReq = new ArrayList<Scorer>(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(disableCoord, allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            requiredScorers.size() == 1\n            ? new SingleMatchScorer(requiredScorers.get(0))\n            : countingConjunctionSumScorer(disableCoord, requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              disableCoord,\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      optionalScorers.size() == 1\n                        ? new SingleMatchScorer(optionalScorers.get(0))\n                        // require 1 in combined, optional scorer.\n                        : countingDisjunctionSumScorer(optionalScorers, 1));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq(boolean).mjava","sourceNew":"  private Scorer makeCountingSumScorerSomeReq(boolean disableCoord) throws IOException { // At least one required scorer.\n    if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList<Scorer> allReq = new ArrayList<>(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(disableCoord, allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            requiredScorers.size() == 1\n            ? new SingleMatchScorer(requiredScorers.get(0))\n            : countingConjunctionSumScorer(disableCoord, requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              disableCoord,\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      optionalScorers.size() == 1\n                        ? new SingleMatchScorer(optionalScorers.get(0))\n                        // require 1 in combined, optional scorer.\n                        : countingDisjunctionSumScorer(optionalScorers, 1));\n      }\n    }\n  }\n\n","sourceOld":"  private Scorer makeCountingSumScorerSomeReq(boolean disableCoord) throws IOException { // At least one required scorer.\n    if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList<Scorer> allReq = new ArrayList<Scorer>(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(disableCoord, allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            requiredScorers.size() == 1\n            ? new SingleMatchScorer(requiredScorers.get(0))\n            : countingConjunctionSumScorer(disableCoord, requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              disableCoord,\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      optionalScorers.size() == 1\n                        ? new SingleMatchScorer(optionalScorers.get(0))\n                        // require 1 in combined, optional scorer.\n                        : countingDisjunctionSumScorer(optionalScorers, 1));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","date":1400613895,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq(boolean).mjava","sourceNew":null,"sourceOld":"  private Scorer makeCountingSumScorerSomeReq(boolean disableCoord) throws IOException { // At least one required scorer.\n    if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList<Scorer> allReq = new ArrayList<>(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(disableCoord, allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            requiredScorers.size() == 1\n            ? new SingleMatchScorer(requiredScorers.get(0))\n            : countingConjunctionSumScorer(disableCoord, requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              disableCoord,\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      optionalScorers.size() == 1\n                        ? new SingleMatchScorer(optionalScorers.get(0))\n                        // require 1 in combined, optional scorer.\n                        : countingDisjunctionSumScorer(optionalScorers, 1));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d","date":1400696679,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq(boolean).mjava","sourceNew":null,"sourceOld":"  private Scorer makeCountingSumScorerSomeReq(boolean disableCoord) throws IOException { // At least one required scorer.\n    if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList<Scorer> allReq = new ArrayList<>(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(disableCoord, allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            requiredScorers.size() == 1\n            ? new SingleMatchScorer(requiredScorers.get(0))\n            : countingConjunctionSumScorer(disableCoord, requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              disableCoord,\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      optionalScorers.size() == 1\n                        ? new SingleMatchScorer(optionalScorers.get(0))\n                        // require 1 in combined, optional scorer.\n                        : countingDisjunctionSumScorer(optionalScorers, 1));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq(boolean).mjava","sourceNew":null,"sourceOld":"  private Scorer makeCountingSumScorerSomeReq(boolean disableCoord) throws IOException { // At least one required scorer.\n    if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList<Scorer> allReq = new ArrayList<>(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(disableCoord, allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            requiredScorers.size() == 1\n            ? new SingleMatchScorer(requiredScorers.get(0))\n            : countingConjunctionSumScorer(disableCoord, requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              disableCoord,\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      optionalScorers.size() == 1\n                        ? new SingleMatchScorer(optionalScorers.get(0))\n                        // require 1 in combined, optional scorer.\n                        : countingDisjunctionSumScorer(optionalScorers, 1));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7605579001505896d48b07160075a5c8b8e128e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","b7605579001505896d48b07160075a5c8b8e128e","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7605579001505896d48b07160075a5c8b8e128e":[],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}