{"path":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testSortingOutput().mjava","commits":[{"id":"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80","date":1532111887,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testSortingOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestExportWriter#testSortingOutput().mjava","sourceNew":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test five sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv desc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test six sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test seven sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test eight sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test nine sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test ten sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n  }\n\n","sourceOld":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19ac23af87640262bab6204be31cd5c245e8b133","date":1532462944,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testSortingOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testSortingOutput().mjava","sourceNew":"  private void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test five sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv desc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test six sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test seven sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test eight sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test nine sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test ten sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n  }\n\n","sourceOld":"  @Test\n  public void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test five sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv desc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test six sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test seven sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test eight sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test nine sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test ten sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4","date":1550862271,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testSortingOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testSortingOutput().mjava","sourceNew":"  private void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test five sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv desc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test six sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test seven sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test eight sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test nine sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test ten sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n\n    // Test sortable text fields:\n    s =  h.query(req(\"q\", \"id:(1 OR 3 OR 8)\", \"qt\", \"/export\", \"fl\", \"sortabledv_m,sortabledv\", \"sort\", \"sortabledv asc\"));\n    assertJsonEquals(s, \"{\\n\" +\n        \"  \\\"responseHeader\\\":{\\\"status\\\":0},\\n\" +\n        \"  \\\"response\\\":{\\n\" +\n        \"    \\\"numFound\\\":3,\\n\" +\n        \"    \\\"docs\\\":[{\\n\" +\n        \"        \\\"sortabledv_m\\\":[\\\"this is some text one_1\\\"\\n\" +\n        \"          ,\\\"this is some text three_1\\\"\\n\" +\n        \"          ,\\\"this is some text two_1\\\"]}\\n\" +\n        \"      ,{\\n\" +\n        \"        \\\"sortabledv\\\":\\\"this is some text_1\\\"}\\n\" +\n        \"      ,{\\n\" +\n        \"        \\\"sortabledv_m\\\":[\\\"this is some text one_2\\\"\\n\" +\n        \"          ,\\\"this is some text three_2\\\"\\n\" +\n        \"          ,\\\"this is some text two_2\\\"],\\n\" +\n        \"        \\\"sortabledv\\\":\\\"this is some text_2\\\"}]}}\");\n  }\n\n","sourceOld":"  private void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test five sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv desc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test six sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test seven sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test eight sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test nine sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test ten sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testSortingOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testSortingOutput().mjava","sourceNew":"  private void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test five sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv desc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test six sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test seven sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test eight sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test nine sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test ten sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n\n    // Test sortable text fields:\n    s =  h.query(req(\"q\", \"id:(1 OR 3 OR 8)\", \"qt\", \"/export\", \"fl\", \"sortabledv_m,sortabledv\", \"sort\", \"sortabledv asc\"));\n    assertJsonEquals(s, \"{\\n\" +\n        \"  \\\"responseHeader\\\":{\\\"status\\\":0},\\n\" +\n        \"  \\\"response\\\":{\\n\" +\n        \"    \\\"numFound\\\":3,\\n\" +\n        \"    \\\"docs\\\":[{\\n\" +\n        \"        \\\"sortabledv_m\\\":[\\\"this is some text one_1\\\"\\n\" +\n        \"          ,\\\"this is some text three_1\\\"\\n\" +\n        \"          ,\\\"this is some text two_1\\\"]}\\n\" +\n        \"      ,{\\n\" +\n        \"        \\\"sortabledv\\\":\\\"this is some text_1\\\"}\\n\" +\n        \"      ,{\\n\" +\n        \"        \\\"sortabledv_m\\\":[\\\"this is some text one_2\\\"\\n\" +\n        \"          ,\\\"this is some text three_2\\\"\\n\" +\n        \"          ,\\\"this is some text two_2\\\"],\\n\" +\n        \"        \\\"sortabledv\\\":\\\"this is some text_2\\\"}]}}\");\n  }\n\n","sourceOld":"  private void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test five sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv desc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test six sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test seven sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test eight sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test nine sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test ten sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f41185456d46fbf1ec09366323d7c6f7e8293f","date":1551985160,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testSortingOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testSortingOutput().mjava","sourceNew":"  private void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test five sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv desc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test six sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test seven sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test eight sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test nine sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test ten sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n\n    // Test sortable text fields:\n    s =  h.query(req(\"q\", \"id:(1 OR 3 OR 8)\", \"qt\", \"/export\", \"fl\", \"sortabledv_m_udvas,sortabledv_udvas\", \"sort\", \"sortabledv_udvas asc\"));\n    assertJsonEquals(s, \"{\\n\" +\n        \"  \\\"responseHeader\\\":{\\\"status\\\":0},\\n\" +\n        \"  \\\"response\\\":{\\n\" +\n        \"    \\\"numFound\\\":3,\\n\" +\n        \"    \\\"docs\\\":[{\\n\" +\n        \"        \\\"sortabledv_m_udvas\\\":[\\\"this is some text one_1\\\"\\n\" +\n        \"          ,\\\"this is some text three_1\\\"\\n\" +\n        \"          ,\\\"this is some text two_1\\\"]}\\n\" +\n        \"      ,{\\n\" +\n        \"        \\\"sortabledv_udvas\\\":\\\"this is some text_1\\\"}\\n\" +\n        \"      ,{\\n\" +\n        \"        \\\"sortabledv_m_udvas\\\":[\\\"this is some text one_2\\\"\\n\" +\n        \"          ,\\\"this is some text three_2\\\"\\n\" +\n        \"          ,\\\"this is some text two_2\\\"],\\n\" +\n        \"        \\\"sortabledv_udvas\\\":\\\"this is some text_2\\\"}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 OR 3 OR 8)\", \"qt\", \"/export\", \"fl\", \"sortabledv_m\", \"sort\", \"sortabledv_udvas asc\"));\n    assertTrue(\"Should have 400 status when exporting sortabledv_m, it does not have useDocValuesAsStored='true'\", s.contains(\"\\\"status\\\":400}\"));\n    assertTrue(\"Should have a cause when exporting sortabledv_m, it does not have useDocValuesAsStored='true'\", s.contains(\"Must have useDocValuesAsStored='true' to be used with export writer\"));\n\n    s =  h.query(req(\"q\", \"id:(1 OR 3 OR 8)\", \"qt\", \"/export\", \"fl\", \"sortabledv\", \"sort\", \"sortabledv_udvas asc\"));\n    assertTrue(\"Should have 400 status when exporting sortabledv, it does not have useDocValuesAsStored='true'\", s.contains(\"\\\"status\\\":400}\"));\n    assertTrue(\"Should have a cause when exporting sortabledv, it does not have useDocValuesAsStored='true'\", s.contains(\"Must have useDocValuesAsStored='true' to be used with export writer\"));\n\n  }\n\n","sourceOld":"  private void testSortingOutput() throws Exception {\n\n    //Test single value DocValue output\n    String s =  h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":1,\\\"stringdv\\\":\\\"hello world\\\",\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test null value string:\n    s = h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"floatdv,intdv,stringdv,longdv,doubledv\", \"sort\", \"intdv asc\"));\n\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv\\\":2.1,\\\"intdv\\\":7,\\\"longdv\\\":323223232323,\\\"doubledv\\\":2344.345}]}}\");\n\n    //Test multiValue docValues output\n    s = h.query(req(\"q\", \"id:1\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"intdv_m\\\":[100,250],\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434],\\\"stringdv_m\\\":[\\\"Everton\\\",\\\"liverpool\\\",\\\"manchester \\\\\\\"city\\\\\\\"\\\"]}]}}\");\n\n    //Test multiValues docValues output with nulls\n    s =  h.query(req(\"q\", \"id:7\", \"qt\", \"/export\", \"fl\", \"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"floatdv_m\\\":[123.321,345.123],\\\"doubledv_m\\\":[3444.222,23232.2],\\\"longdv_m\\\":[343332,43434343434]}]}}\");\n\n    //Test single sort param is working\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    // Test sort on String will null value. Null value should sort last on desc and first on asc.\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":7}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 7)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"stringdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":7},{\\\"intdv\\\":1}]}}\");\n\n\n    //Test multi-sort params\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":2, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test three sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,stringdv desc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test four sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test five sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv desc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test six sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test seven sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv desc,intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test eight sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,intdv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n\n    //Test nine sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    //Test ten sort fields\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"intdv asc,floatdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv asc,intdv desc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":1},{\\\"intdv\\\":2},{\\\"intdv\\\":3}]}}\");\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"floatdv asc,intdv desc,floatdv asc,floatdv desc,floatdv asc,floatdv desc,intdv desc,intdv asc,floatdv desc,floatdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":2},{\\\"intdv\\\":1}]}}\");\n\n    s =  h.query(req(\"q\", \"id:(1 2 3)\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":1},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"intdv:[2 TO 1000]\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":3, \\\"docs\\\":[{\\\"intdv\\\":3},{\\\"intdv\\\":7},{\\\"intdv\\\":2}]}}\");\n\n    s =  h.query(req(\"q\", \"stringdv:blah\", \"qt\", \"/export\", \"fl\", \"intdv\", \"sort\", \"doubledv desc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":0, \\\"docs\\\":[]}}\");\n\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"stringdv\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"stringdv\\\":\\\"chello \\\\\\\"world\\\\\\\"\\\"}]}}\");\n\n    // Test sortable text fields:\n    s =  h.query(req(\"q\", \"id:(1 OR 3 OR 8)\", \"qt\", \"/export\", \"fl\", \"sortabledv_m,sortabledv\", \"sort\", \"sortabledv asc\"));\n    assertJsonEquals(s, \"{\\n\" +\n        \"  \\\"responseHeader\\\":{\\\"status\\\":0},\\n\" +\n        \"  \\\"response\\\":{\\n\" +\n        \"    \\\"numFound\\\":3,\\n\" +\n        \"    \\\"docs\\\":[{\\n\" +\n        \"        \\\"sortabledv_m\\\":[\\\"this is some text one_1\\\"\\n\" +\n        \"          ,\\\"this is some text three_1\\\"\\n\" +\n        \"          ,\\\"this is some text two_1\\\"]}\\n\" +\n        \"      ,{\\n\" +\n        \"        \\\"sortabledv\\\":\\\"this is some text_1\\\"}\\n\" +\n        \"      ,{\\n\" +\n        \"        \\\"sortabledv_m\\\":[\\\"this is some text one_2\\\"\\n\" +\n        \"          ,\\\"this is some text three_2\\\"\\n\" +\n        \"          ,\\\"this is some text two_2\\\"],\\n\" +\n        \"        \\\"sortabledv\\\":\\\"this is some text_2\\\"}]}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4":["19ac23af87640262bab6204be31cd5c245e8b133"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f41185456d46fbf1ec09366323d7c6f7e8293f":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"19ac23af87640262bab6204be31cd5c245e8b133":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["19ac23af87640262bab6204be31cd5c245e8b133","ab3edb4bdcf1695b3c43f8584d7473f9516a34e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74f41185456d46fbf1ec09366323d7c6f7e8293f"]},"commit2Childs":{"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["19ac23af87640262bab6204be31cd5c245e8b133"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"74f41185456d46fbf1ec09366323d7c6f7e8293f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19ac23af87640262bab6204be31cd5c245e8b133":["ab3edb4bdcf1695b3c43f8584d7473f9516a34e4","0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["74f41185456d46fbf1ec09366323d7c6f7e8293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}