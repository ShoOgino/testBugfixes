{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl#GeoPointDistanceQueryImpl(String,TermEncoding,GeoPointDistanceQuery,double,Rectangle).mjava","commits":[{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl#GeoPointDistanceQueryImpl(String,TermEncoding,GeoPointDistanceQuery,double,Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl#GeoPointDistanceQueryImpl(String,TermEncoding,GeoPointDistanceQuery,double,GeoRect).mjava","sourceNew":"  GeoPointDistanceQueryImpl(final String field, final TermEncoding termEncoding, final GeoPointDistanceQuery q,\n                            final double centerLonUnwrapped, final Rectangle bbox) {\n    super(field, termEncoding, bbox.minLat, bbox.maxLat, bbox.minLon, bbox.maxLon);\n    distanceQuery = q;\n    centerLon = centerLonUnwrapped;\n\n    // unless our box is crazy, we can use this bound\n    // to reject edge cases faster in postFilter()\n    if (bbox.maxLon - centerLon < 90 && centerLon - bbox.minLon < 90) {\n      maxPartialDistance = Math.max(SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, distanceQuery.centerLat, bbox.maxLon),\n                                    SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, bbox.maxLat, centerLon));\n    } else {\n      maxPartialDistance = Double.POSITIVE_INFINITY;\n    }\n    axisLat = Rectangle.axisLat(distanceQuery.centerLat, distanceQuery.radiusMeters);\n  }\n\n","sourceOld":"  GeoPointDistanceQueryImpl(final String field, final TermEncoding termEncoding, final GeoPointDistanceQuery q,\n                            final double centerLonUnwrapped, final GeoRect bbox) {\n    super(field, termEncoding, bbox.minLat, bbox.maxLat, bbox.minLon, bbox.maxLon);\n    distanceQuery = q;\n    centerLon = centerLonUnwrapped;\n\n    // unless our box is crazy, we can use this bound\n    // to reject edge cases faster in postFilter()\n    if (bbox.maxLon - centerLon < 90 && centerLon - bbox.minLon < 90) {\n      maxPartialDistance = Math.max(SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, distanceQuery.centerLat, bbox.maxLon),\n                                    SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, bbox.maxLat, centerLon));\n    } else {\n      maxPartialDistance = Double.POSITIVE_INFINITY;\n    }\n    axisLat = GeoRect.axisLat(distanceQuery.centerLat, distanceQuery.radiusMeters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be46ccf1a05985ba9fec84cb8674b607a23d5442","date":1465576866,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl#GeoPointDistanceQueryImpl(String,GeoPointDistanceQuery,double,Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl#GeoPointDistanceQueryImpl(String,TermEncoding,GeoPointDistanceQuery,double,Rectangle).mjava","sourceNew":"  GeoPointDistanceQueryImpl(final String field, final GeoPointDistanceQuery q,\n                            final double centerLonUnwrapped, final Rectangle bbox) {\n    super(field, bbox.minLat, bbox.maxLat, bbox.minLon, bbox.maxLon);\n    distanceQuery = q;\n    centerLon = centerLonUnwrapped;\n\n    // unless our box is crazy, we can use this bound\n    // to reject edge cases faster in postFilter()\n    if (bbox.maxLon - centerLon < 90 && centerLon - bbox.minLon < 90) {\n      maxPartialDistance = Math.max(SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, distanceQuery.centerLat, bbox.maxLon),\n                                    SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, bbox.maxLat, centerLon));\n    } else {\n      maxPartialDistance = Double.POSITIVE_INFINITY;\n    }\n    axisLat = Rectangle.axisLat(distanceQuery.centerLat, distanceQuery.radiusMeters);\n  }\n\n","sourceOld":"  GeoPointDistanceQueryImpl(final String field, final TermEncoding termEncoding, final GeoPointDistanceQuery q,\n                            final double centerLonUnwrapped, final Rectangle bbox) {\n    super(field, termEncoding, bbox.minLat, bbox.maxLat, bbox.minLon, bbox.maxLon);\n    distanceQuery = q;\n    centerLon = centerLonUnwrapped;\n\n    // unless our box is crazy, we can use this bound\n    // to reject edge cases faster in postFilter()\n    if (bbox.maxLon - centerLon < 90 && centerLon - bbox.minLon < 90) {\n      maxPartialDistance = Math.max(SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, distanceQuery.centerLat, bbox.maxLon),\n                                    SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, bbox.maxLat, centerLon));\n    } else {\n      maxPartialDistance = Double.POSITIVE_INFINITY;\n    }\n    axisLat = Rectangle.axisLat(distanceQuery.centerLat, distanceQuery.radiusMeters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl#GeoPointDistanceQueryImpl(String,TermEncoding,GeoPointDistanceQuery,double,Rectangle).mjava","sourceNew":null,"sourceOld":"  GeoPointDistanceQueryImpl(final String field, final TermEncoding termEncoding, final GeoPointDistanceQuery q,\n                            final double centerLonUnwrapped, final Rectangle bbox) {\n    super(field, termEncoding, bbox.minLat, bbox.maxLat, bbox.minLon, bbox.maxLon);\n    distanceQuery = q;\n    centerLon = centerLonUnwrapped;\n\n    // unless our box is crazy, we can use this bound\n    // to reject edge cases faster in postFilter()\n    if (bbox.maxLon - centerLon < 90 && centerLon - bbox.minLon < 90) {\n      maxPartialDistance = Math.max(SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, distanceQuery.centerLat, bbox.maxLon),\n                                    SloppyMath.haversinSortKey(distanceQuery.centerLat, centerLon, bbox.maxLat, centerLon));\n    } else {\n      maxPartialDistance = Double.POSITIVE_INFINITY;\n    }\n    axisLat = Rectangle.axisLat(distanceQuery.centerLat, distanceQuery.radiusMeters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"be46ccf1a05985ba9fec84cb8674b607a23d5442":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","be46ccf1a05985ba9fec84cb8674b607a23d5442"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["be46ccf1a05985ba9fec84cb8674b607a23d5442"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["be46ccf1a05985ba9fec84cb8674b607a23d5442","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"be46ccf1a05985ba9fec84cb8674b607a23d5442":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}