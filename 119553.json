{"path":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#getImpersonatorSettings().mjava","commits":[{"id":"cc3d73ce4049cb1520abaaae57fe8267639bda1d","date":1470181330,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#getImpersonatorSettings().mjava","pathOld":"/dev/null","sourceNew":"  private static Map<String, String> getImpersonatorSettings() throws Exception {\n    Map<String, String> filterProps = new TreeMap<String, String>();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noGroups.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.hosts\", \"1.1.1.1.1.1\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noHosts.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.hosts\", \"127.0.0.1\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.groups\", getUsersFirstGroup());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.groups\", \"__some_bogus_group\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.hosts\", \"*\");\n    return filterProps;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff8c50dd45235d6537b8ea3706823729a4aeed9c","date":1470458081,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#getImpersonatorSettings().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#getImpersonatorSettings().mjava","sourceNew":"  private static Map<String, String> getImpersonatorSettings() throws Exception {\n    Map<String, String> filterProps = new TreeMap<String, String>();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noGroups.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.hosts\", \"1.1.1.1.1.1\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noHosts.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.groups\", \"*\");\n    InetAddress loopback = InetAddress.getLoopbackAddress();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.hosts\",\n        loopback.getCanonicalHostName() + \",\" + loopback.getHostName() + \",\" + loopback.getHostAddress());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.groups\", getUsersFirstGroup());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.groups\", \"__some_bogus_group\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.hosts\", \"*\");\n    return filterProps;\n  }\n\n","sourceOld":"  private static Map<String, String> getImpersonatorSettings() throws Exception {\n    Map<String, String> filterProps = new TreeMap<String, String>();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noGroups.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.hosts\", \"1.1.1.1.1.1\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noHosts.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.hosts\", \"127.0.0.1\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.groups\", getUsersFirstGroup());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.groups\", \"__some_bogus_group\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.hosts\", \"*\");\n    return filterProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#getImpersonatorSettings().mjava","pathOld":"/dev/null","sourceNew":"  private static Map<String, String> getImpersonatorSettings() throws Exception {\n    Map<String, String> filterProps = new TreeMap<String, String>();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noGroups.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.hosts\", \"1.1.1.1.1.1\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noHosts.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.groups\", \"*\");\n    InetAddress loopback = InetAddress.getLoopbackAddress();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.hosts\",\n        loopback.getCanonicalHostName() + \",\" + loopback.getHostName() + \",\" + loopback.getHostAddress());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.groups\", getUsersFirstGroup());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.groups\", \"__some_bogus_group\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.hosts\", \"*\");\n    return filterProps;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#getImpersonatorSettings().mjava","pathOld":"/dev/null","sourceNew":"  private static Map<String, String> getImpersonatorSettings() throws Exception {\n    Map<String, String> filterProps = new TreeMap<String, String>();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noGroups.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.hosts\", \"1.1.1.1.1.1\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noHosts.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.groups\", \"*\");\n    InetAddress loopback = InetAddress.getLoopbackAddress();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.hosts\",\n        loopback.getCanonicalHostName() + \",\" + loopback.getHostName() + \",\" + loopback.getHostAddress());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.groups\", getUsersFirstGroup());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.groups\", \"__some_bogus_group\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.hosts\", \"*\");\n    return filterProps;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc78b7d15e7b8627fa6d1b946da3a39f0225508d","date":1576086705,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#getImpersonatorSettings().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#getImpersonatorSettings().mjava","sourceNew":"  private static Map<String, String> getImpersonatorSettings() throws Exception {\n    Map<String, String> filterProps = new TreeMap<String, String>();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noGroups.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.hosts\", DEAD_HOST_1);\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noHosts.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.groups\", \"*\");\n    InetAddress loopback = InetAddress.getLoopbackAddress();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.hosts\",\n        loopback.getCanonicalHostName() + \",\" + loopback.getHostName() + \",\" + loopback.getHostAddress());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.groups\", getUsersFirstGroup());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.groups\", \"__some_bogus_group\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.hosts\", \"*\");\n    return filterProps;\n  }\n\n","sourceOld":"  private static Map<String, String> getImpersonatorSettings() throws Exception {\n    Map<String, String> filterProps = new TreeMap<String, String>();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noGroups.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.hosts\", \"1.1.1.1.1.1\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noHosts.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.groups\", \"*\");\n    InetAddress loopback = InetAddress.getLoopbackAddress();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.hosts\",\n        loopback.getCanonicalHostName() + \",\" + loopback.getHostName() + \",\" + loopback.getHostAddress());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.groups\", getUsersFirstGroup());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.groups\", \"__some_bogus_group\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.hosts\", \"*\");\n    return filterProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e614eceb81b081076e753ed62268c93c8a2a28e","date":1576119727,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#getImpersonatorSettings().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#getImpersonatorSettings().mjava","sourceNew":"  private static Map<String, String> getImpersonatorSettings() throws Exception {\n    Map<String, String> filterProps = new TreeMap<>();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noGroups.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.hosts\", DEAD_HOST_1);\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noHosts.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.groups\", \"*\");\n    InetAddress loopback = InetAddress.getLoopbackAddress();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.hosts\",\n        loopback.getCanonicalHostName() + \",\" + loopback.getHostName() + \",\" + loopback.getHostAddress());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.groups\", getUsersFirstGroup());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.groups\", \"__some_bogus_group\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.hosts\", \"*\");\n    return filterProps;\n  }\n\n","sourceOld":"  private static Map<String, String> getImpersonatorSettings() throws Exception {\n    Map<String, String> filterProps = new TreeMap<String, String>();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noGroups.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.hosts\", DEAD_HOST_1);\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noHosts.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.groups\", \"*\");\n    InetAddress loopback = InetAddress.getLoopbackAddress();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.hosts\",\n        loopback.getCanonicalHostName() + \",\" + loopback.getHostName() + \",\" + loopback.getHostAddress());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.groups\", getUsersFirstGroup());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.groups\", \"__some_bogus_group\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.hosts\", \"*\");\n    return filterProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#getImpersonatorSettings().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#getImpersonatorSettings().mjava","sourceNew":"  private static Map<String, String> getImpersonatorSettings() throws Exception {\n    Map<String, String> filterProps = new TreeMap<>();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noGroups.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.hosts\", DEAD_HOST_1);\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noHosts.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.groups\", \"*\");\n    InetAddress loopback = InetAddress.getLoopbackAddress();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.hosts\",\n        loopback.getCanonicalHostName() + \",\" + loopback.getHostName() + \",\" + loopback.getHostAddress());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.groups\", getUsersFirstGroup());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.groups\", \"__some_bogus_group\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.hosts\", \"*\");\n    return filterProps;\n  }\n\n","sourceOld":"  private static Map<String, String> getImpersonatorSettings() throws Exception {\n    Map<String, String> filterProps = new TreeMap<String, String>();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noGroups.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostAnyUser.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.hosts\", \"1.1.1.1.1.1\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"wrongHost.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"noHosts.groups\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.groups\", \"*\");\n    InetAddress loopback = InetAddress.getLoopbackAddress();\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"localHostAnyGroup.hosts\",\n        loopback.getCanonicalHostName() + \",\" + loopback.getHostName() + \",\" + loopback.getHostAddress());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.groups\", getUsersFirstGroup());\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"anyHostUsersGroup.hosts\", \"*\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.groups\", \"__some_bogus_group\");\n    filterProps.put(KerberosPlugin.IMPERSONATOR_PREFIX + \"bogusGroup.hosts\", \"*\");\n    return filterProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df724d84dab24a0cc54bec95a8680867adc7f171":["ff8c50dd45235d6537b8ea3706823729a4aeed9c","7e614eceb81b081076e753ed62268c93c8a2a28e"],"7e614eceb81b081076e753ed62268c93c8a2a28e":["bc78b7d15e7b8627fa6d1b946da3a39f0225508d"],"cc3d73ce4049cb1520abaaae57fe8267639bda1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff8c50dd45235d6537b8ea3706823729a4aeed9c":["cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff8c50dd45235d6537b8ea3706823729a4aeed9c"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff8c50dd45235d6537b8ea3706823729a4aeed9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e614eceb81b081076e753ed62268c93c8a2a28e"],"bc78b7d15e7b8627fa6d1b946da3a39f0225508d":["ff8c50dd45235d6537b8ea3706823729a4aeed9c"]},"commit2Childs":{"df724d84dab24a0cc54bec95a8680867adc7f171":[],"7e614eceb81b081076e753ed62268c93c8a2a28e":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cc3d73ce4049cb1520abaaae57fe8267639bda1d":["ff8c50dd45235d6537b8ea3706823729a4aeed9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc3d73ce4049cb1520abaaae57fe8267639bda1d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"ff8c50dd45235d6537b8ea3706823729a4aeed9c":["df724d84dab24a0cc54bec95a8680867adc7f171","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","bc78b7d15e7b8627fa6d1b946da3a39f0225508d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"bc78b7d15e7b8627fa6d1b946da3a39f0225508d":["7e614eceb81b081076e753ed62268c93c8a2a28e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}