{"path":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(boolean,long).mjava","commits":[{"id":"abbfb3ad1f90df8ebf4751c8e72b2756ace50699","date":1190497478,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(boolean,long).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(SolrCore).mjava","sourceNew":"  public SolrRequestParsers( boolean enableRemoteStreams, long uploadLimitKB )\n  {\n    this.enableRemoteStreams = enableRemoteStreams;\n   \n    MultipartRequestParser multi = new MultipartRequestParser( uploadLimitKB );\n    RawRequestParser raw = new RawRequestParser();\n    standard = new StandardRequestParser( multi, raw );\n    \n    // I don't see a need to have this publically configured just yet\n    // adding it is trivial\n    parsers = new HashMap<String, SolrRequestParser>();\n    parsers.put( MULTIPART, multi );\n    parsers.put( RAW, raw );\n    parsers.put( SIMPLE, new SimpleRequestParser() );\n    parsers.put( STANDARD, standard );\n    parsers.put( \"\", standard );\n  }\n\n","sourceOld":"  public SolrRequestParsers( SolrCore core )\n  {\n    this.core = core;\n    Config config = core.getSolrConfig();\n    \n    // Read the configuration\n    long uploadLimitKB = config.getInt( \n        \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", 2000 ); // 2MB default\n    \n    this.enableRemoteStreams = config.getBool( \n        \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n        \n    MultipartRequestParser multi = new MultipartRequestParser( uploadLimitKB );\n    RawRequestParser raw = new RawRequestParser();\n    standard = new StandardRequestParser( multi, raw );\n    \n    // I don't see a need to have this publically configured just yet\n    // adding it is trivial\n    parsers = new HashMap<String, SolrRequestParser>();\n    parsers.put( MULTIPART, multi );\n    parsers.put( RAW, raw );\n    parsers.put( SIMPLE, new SimpleRequestParser() );\n    parsers.put( STANDARD, standard );\n    parsers.put( \"\", standard );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc6ab6902f8f70ae43365947ccf44c25986906d","date":1204603577,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(Config).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(boolean,long).mjava","sourceNew":"  /**\n   * Pass in an xml configuration.  A null configuration will enable\n   * everythign with maximum values.\n   */\n  public SolrRequestParsers( Config globalConfig )\n  {\n    long uploadLimitKB = 1048;  // 2MB default\n    if( globalConfig == null ) {\n      uploadLimitKB = Long.MAX_VALUE; \n      enableRemoteStreams = true;\n      handleSelect = true;\n    }\n    else {\n      uploadLimitKB = globalConfig.getInt( \n          \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", (int)uploadLimitKB );\n      \n      enableRemoteStreams = globalConfig.getBool( \n          \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n  \n      // Let this filter take care of /select?xxx format\n      handleSelect = globalConfig.getBool( \n          \"requestDispatcher/@handleSelect\", handleSelect ); \n    }\n       \n    MultipartRequestParser multi = new MultipartRequestParser( uploadLimitKB );\n    RawRequestParser raw = new RawRequestParser();\n    standard = new StandardRequestParser( multi, raw );\n    \n    // I don't see a need to have this publicly configured just yet\n    // adding it is trivial\n    parsers = new HashMap<String, SolrRequestParser>();\n    parsers.put( MULTIPART, multi );\n    parsers.put( RAW, raw );\n    parsers.put( SIMPLE, new SimpleRequestParser() );\n    parsers.put( STANDARD, standard );\n    parsers.put( \"\", standard );\n  }\n\n","sourceOld":"  public SolrRequestParsers( boolean enableRemoteStreams, long uploadLimitKB )\n  {\n    this.enableRemoteStreams = enableRemoteStreams;\n   \n    MultipartRequestParser multi = new MultipartRequestParser( uploadLimitKB );\n    RawRequestParser raw = new RawRequestParser();\n    standard = new StandardRequestParser( multi, raw );\n    \n    // I don't see a need to have this publically configured just yet\n    // adding it is trivial\n    parsers = new HashMap<String, SolrRequestParser>();\n    parsers.put( MULTIPART, multi );\n    parsers.put( RAW, raw );\n    parsers.put( SIMPLE, new SimpleRequestParser() );\n    parsers.put( STANDARD, standard );\n    parsers.put( \"\", standard );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6dc6ab6902f8f70ae43365947ccf44c25986906d":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6dc6ab6902f8f70ae43365947ccf44c25986906d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}