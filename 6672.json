{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientStateCacheing#testCacheInvalidationOnLeaderChange().mjava","commits":[{"id":"920b078f38927d1129b28d683b5e89228a27edc0","date":1474295383,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientStateCacheing#testCacheInvalidationOnLeaderChange().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCacheInvalidationOnLeaderChange() throws Exception {\n\n    final String collectionName = \"cacheInvalidation\";\n\n    try (CloudSolrClient solrClient = new CloudSolrClient.Builder()\n        .withZkHost(cluster.getZkServer().getZkAddress())\n        .sendDirectUpdatesToShardLeadersOnly()\n        .build()) {\n\n      CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n          .process(solrClient);\n\n      // send one update that will populate the client's cluster state cache\n      new UpdateRequest()\n          .add(id, \"0\", \"a_t\", \"hello1\")\n          .add(id, \"2\", \"a_t\", \"hello2\")\n          .add(id, \"3\", \"a_t\", \"hello2\")\n          .commit(solrClient, collectionName);\n\n      // take down a leader node\n      JettySolrRunner leaderJetty = cluster.getLeaderJetty(collectionName, \"shard1\");\n      leaderJetty.stop();\n\n      // wait for a new leader to be elected\n      solrClient.waitForState(collectionName, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n          (n, c) -> DocCollection.isUpdateable(n, c, 2));\n\n      // send another update - this should still succeed, even though the client's\n      // cached leader will be incorrect\n      new UpdateRequest()\n          .add(id, \"4\", \"a_t\", \"hello1\")\n          .add(id, \"5\", \"a_t\", \"hello2\")\n          .add(id, \"6\", \"a_t\", \"hello2\")\n          .commit(solrClient, collectionName);\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d34a674b360fc9af16fceeb9df37363eceb3484","date":1474378553,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientStateCacheing#testCacheInvalidationOnLeaderChange().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCacheInvalidationOnLeaderChange() throws Exception {\n\n    final String collectionName = \"cacheInvalidation\";\n\n    try (CloudSolrClient solrClient = new CloudSolrClient.Builder()\n        .withZkHost(cluster.getZkServer().getZkAddress())\n        .sendDirectUpdatesToShardLeadersOnly()\n        .build()) {\n\n      CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n          .process(solrClient);\n\n      // send one update that will populate the client's cluster state cache\n      new UpdateRequest()\n          .add(id, \"0\", \"a_t\", \"hello1\")\n          .add(id, \"2\", \"a_t\", \"hello2\")\n          .add(id, \"3\", \"a_t\", \"hello2\")\n          .commit(solrClient, collectionName);\n\n      // take down a leader node\n      JettySolrRunner leaderJetty = cluster.getLeaderJetty(collectionName, \"shard1\");\n      leaderJetty.stop();\n\n      // wait for a new leader to be elected\n      solrClient.waitForState(collectionName, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n          (n, c) -> DocCollection.isUpdateable(n, c, 2));\n\n      // send another update - this should still succeed, even though the client's\n      // cached leader will be incorrect\n      new UpdateRequest()\n          .add(id, \"4\", \"a_t\", \"hello1\")\n          .add(id, \"5\", \"a_t\", \"hello2\")\n          .add(id, \"6\", \"a_t\", \"hello2\")\n          .commit(solrClient, collectionName);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e91774ac3ed0db43b41f92ae954c447e50bdfb","date":1474437614,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientStateCacheing#testCacheInvalidationOnLeaderChange().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCacheInvalidationOnLeaderChange() throws Exception {\n\n    final String collectionName = \"cacheInvalidation\";\n\n    try (CloudSolrClient solrClient = new CloudSolrClient.Builder()\n        .withZkHost(cluster.getZkServer().getZkAddress())\n        .sendDirectUpdatesToShardLeadersOnly()\n        .build()) {\n\n      CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n          .process(solrClient);\n\n      // send one update that will populate the client's cluster state cache\n      new UpdateRequest()\n          .add(id, \"0\", \"a_t\", \"hello1\")\n          .add(id, \"2\", \"a_t\", \"hello2\")\n          .add(id, \"3\", \"a_t\", \"hello2\")\n          .commit(solrClient, collectionName);\n\n      // take down a leader node\n      JettySolrRunner leaderJetty = cluster.getLeaderJetty(collectionName, \"shard1\");\n      leaderJetty.stop();\n\n      // wait for a new leader to be elected\n      solrClient.waitForState(collectionName, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n          (n, c) -> DocCollection.isUpdateable(n, c, 2));\n\n      // send another update - this should still succeed, even though the client's\n      // cached leader will be incorrect\n      new UpdateRequest()\n          .add(id, \"4\", \"a_t\", \"hello1\")\n          .add(id, \"5\", \"a_t\", \"hello2\")\n          .add(id, \"6\", \"a_t\", \"hello2\")\n          .commit(solrClient, collectionName);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e91774ac3ed0db43b41f92ae954c447e50bdfb":["920b078f38927d1129b28d683b5e89228a27edc0","7d34a674b360fc9af16fceeb9df37363eceb3484"],"7d34a674b360fc9af16fceeb9df37363eceb3484":["920b078f38927d1129b28d683b5e89228a27edc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"920b078f38927d1129b28d683b5e89228a27edc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"03e91774ac3ed0db43b41f92ae954c447e50bdfb":[],"7d34a674b360fc9af16fceeb9df37363eceb3484":["03e91774ac3ed0db43b41f92ae954c447e50bdfb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["920b078f38927d1129b28d683b5e89228a27edc0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"920b078f38927d1129b28d683b5e89228a27edc0":["03e91774ac3ed0db43b41f92ae954c447e50bdfb","7d34a674b360fc9af16fceeb9df37363eceb3484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["03e91774ac3ed0db43b41f92ae954c447e50bdfb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}