{"path":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","commits":[{"id":"e5e0fe26a7a1290b0745e3cde32af3b14c36b61c","date":1312222874,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new ReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = (SolrDocument) o;\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","sourceNew":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new ReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = (SolrDocument) o;\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","sourceOld":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new ReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = (SolrDocument) o;\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","sourceNew":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new ReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = (SolrDocument) o;\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","sourceOld":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new ReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = (SolrDocument) o;\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d17ffdbce80d3dce181982a9cd16f4f90bc8619a","date":1357583592,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","sourceNew":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new SolrReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = (SolrDocument) o;\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","sourceOld":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new ReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = (SolrDocument) o;\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","sourceNew":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new SolrReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = (SolrDocument) o;\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","sourceOld":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new ReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = (SolrDocument) o;\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","date":1434467834,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","sourceNew":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new SolrReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = new SolrDocument();\n    for (Map.Entry<String, Object> e : in) {\n      if(r.isWritable(e.getKey())) out.put(e.getKey(),e.getValue());\n\n    }\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","sourceOld":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new SolrReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = (SolrDocument) o;\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a","date":1474893506,"type":4,"author":"Christine Poerschke","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","sourceNew":null,"sourceOld":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new SolrReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = new SolrDocument();\n    for (Map.Entry<String, Object> e : in) {\n      if(r.isWritable(e.getKey())) out.put(e.getKey(),e.getValue());\n\n    }\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","sourceNew":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new SolrReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = new SolrDocument();\n    for (Map.Entry<String, Object> e : in) {\n      if(r.isWritable(e.getKey())) out.put(e.getKey(),e.getValue());\n\n    }\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","sourceOld":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new SolrReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = new SolrDocument();\n    for (Map.Entry<String, Object> e : in) {\n      if(r.isWritable(e.getKey())) out.put(e.getKey(),e.getValue());\n\n    }\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testResolverSolrDocumentPartialFields().mjava","sourceNew":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new SolrReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = new SolrDocument();\n    for (Map.Entry<String, Object> e : in) {\n      if(r.isWritable(e.getKey())) out.put(e.getKey(),e.getValue());\n\n    }\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","sourceOld":"  public void testResolverSolrDocumentPartialFields() throws Exception {\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\",\n                                                \"fl\", \"id,xxx,ddd_s\"); \n    SolrDocument in = new SolrDocument();\n    in.addField(\"id\", 345);\n    in.addField(\"aaa_s\", \"aaa\");\n    in.addField(\"bbb_s\", \"bbb\");\n    in.addField(\"ccc_s\", \"ccc\");\n    in.addField(\"ddd_s\", \"ddd\");\n    in.addField(\"eee_s\", \"eee\");    \n\n    Resolver r = new Resolver(req, new SolrReturnFields(req));\n    Object o = r.resolve(in, new JavaBinCodec());\n\n    assertNotNull(\"obj is null\", o);\n    assertTrue(\"obj is not doc\", o instanceof SolrDocument);\n\n    SolrDocument out = new SolrDocument();\n    for (Map.Entry<String, Object> e : in) {\n      if(r.isWritable(e.getKey())) out.put(e.getKey(),e.getValue());\n\n    }\n    assertTrue(\"id not found\", out.getFieldNames().contains(\"id\"));\n    assertTrue(\"ddd_s not found\", out.getFieldNames().contains(\"ddd_s\"));\n    assertEquals(\"Wrong number of fields found\", \n                 2, out.getFieldNames().size());\n    req.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d9405f486872f1e416304dfe389741f4ee2f8a4d","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","b564b6c464f1c4b1f8e676b2b9b1558c34634b3a"],"e5e0fe26a7a1290b0745e3cde32af3b14c36b61c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["e5e0fe26a7a1290b0745e3cde32af3b14c36b61c"],"f2126b84bd093fa3d921582a109a0ee578c28126":["e5e0fe26a7a1290b0745e3cde32af3b14c36b61c","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e5e0fe26a7a1290b0745e3cde32af3b14c36b61c"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e5e0fe26a7a1290b0745e3cde32af3b14c36b61c":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d17ffdbce80d3dce181982a9cd16f4f90bc8619a","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["b564b6c464f1c4b1f8e676b2b9b1558c34634b3a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f2126b84bd093fa3d921582a109a0ee578c28126","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}