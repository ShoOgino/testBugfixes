{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ceb5bb30e401cb218b31197b1a9aa47e77cda17","date":1336330521,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        boolean omitTF = false;\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n            if (docs == null) { // omit tf\n              omitTF = true;\n              docs = termsEnum.docs(null, null, false);\n            }\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        } else if (omitTF) {\n          // the docsenum won't support freq(), so return 1\n          final DocsEnum delegate = docs;\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int docID() {\n              return delegate.docID();\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return delegate.nextDoc();\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return delegate.advance(target);\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":["15345a5c40a4fa937f1b1b8462ddd6677135378a"],"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        boolean omitTF = false;\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n            if (docs == null) { // omit tf\n              omitTF = true;\n              docs = termsEnum.docs(null, null, false);\n            }\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        } else if (omitTF) {\n          // the docsenum won't support freq(), so return 1\n          final DocsEnum delegate = docs;\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int docID() {\n              return delegate.docID();\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return delegate.nextDoc();\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return delegate.advance(target);\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        boolean omitTF = false;\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n            if (docs == null) { // omit tf\n              omitTF = true;\n              docs = termsEnum.docs(null, null, false);\n            }\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        } else if (omitTF) {\n          // the docsenum won't support freq(), so return 1\n          final DocsEnum delegate = docs;\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int docID() {\n              return delegate.docID();\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return delegate.nextDoc();\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return delegate.advance(target);\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":["15345a5c40a4fa937f1b1b8462ddd6677135378a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        boolean omitTF = false;\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n            if (docs == null) { // omit tf\n              omitTF = true;\n              docs = termsEnum.docs(null, null, false);\n            }\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        } else if (omitTF) {\n          // the docsenum won't support freq(), so return 1\n          final DocsEnum delegate = docs;\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int docID() {\n              return delegate.docID();\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return delegate.nextDoc();\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return delegate.advance(target);\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        boolean omitTF = false;\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n            if (docs == null) { // omit tf\n              omitTF = true;\n              docs = termsEnum.docs(null, null, false);\n            }\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        } else if (omitTF) {\n          // the docsenum won't support freq(), so return 1\n          final DocsEnum delegate = docs;\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int docID() {\n              return delegate.docID();\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return delegate.nextDoc();\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return delegate.advance(target);\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        boolean omitTF = false;\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n            if (docs == null) { // omit tf\n              omitTF = true;\n              docs = termsEnum.docs(null, null, false);\n            }\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        } else if (omitTF) {\n          // the docsenum won't support freq(), so return 1\n          final DocsEnum delegate = docs;\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int docID() {\n              return delegate.docID();\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return delegate.nextDoc();\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return delegate.advance(target);\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        boolean omitTF = false;\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n            if (docs == null) { // omit tf\n              omitTF = true;\n              docs = termsEnum.docs(null, null, false);\n            }\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        } else if (omitTF) {\n          // the docsenum won't support freq(), so return 1\n          final DocsEnum delegate = docs;\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int docID() {\n              return delegate.docID();\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return delegate.nextDoc();\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return delegate.advance(target);\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        boolean omitTF = false;\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n            if (docs == null) { // omit tf\n              omitTF = true;\n              docs = termsEnum.docs(null, null, false);\n            }\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        } else if (omitTF) {\n          // the docsenum won't support freq(), so return 1\n          final DocsEnum delegate = docs;\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int docID() {\n              return delegate.docID();\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return delegate.nextDoc();\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return delegate.advance(target);\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public long cost() {\n              return 0;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes)) {\n            docs = termsEnum.docs(null, null);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public long cost() {\n              return 0;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public long cost() {\n              return 0;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes)) {\n            docs = termsEnum.docs(null, null);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public long cost() {\n              return 0;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes)) {\n            docs = termsEnum.docs(null, null);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public long cost() {\n              return 0;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes)) {\n            docs = termsEnum.docs(null, null);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public long cost() {\n              return 0;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public long cost() {\n              return 0;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(indexedField);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        \n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes)) {\n            docs = termsEnum.docs(null, null);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public long cost() {\n              return 0;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ceb5bb30e401cb218b31197b1a9aa47e77cda17":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["02331260bb246364779cb6f04919ca47900d01bb"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","02331260bb246364779cb6f04919ca47900d01bb"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","02331260bb246364779cb6f04919ca47900d01bb"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"02331260bb246364779cb6f04919ca47900d01bb":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"]},"commit2Childs":{"0ceb5bb30e401cb218b31197b1a9aa47e77cda17":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"02331260bb246364779cb6f04919ca47900d01bb":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}