{"path":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType).mjava","commits":[{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesBaseSortedSource#BytesBaseSortedSource(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long).mjava","sourceNew":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead,ValueType type)\n        throws IOException {\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      this.comp = comp == null ? BytesRef.getUTF8SortedAsUnicodeComparator()\n          : comp;\n      docToOrdIndex = PackedInts.getReader(idxIn);\n      this.type = type;\n\n    }\n\n","sourceOld":"    protected BytesBaseSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead)\n        throws IOException {\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      this.comp = comp == null ? BytesRef.getUTF8SortedAsUnicodeComparator()\n          : comp;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType).mjava","sourceNew":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead,ValueType type)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      docToOrdIndex = PackedInts.getReader(idxIn);\n\n    }\n\n","sourceOld":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead,ValueType type)\n        throws IOException {\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      this.comp = comp == null ? BytesRef.getUTF8SortedAsUnicodeComparator()\n          : comp;\n      docToOrdIndex = PackedInts.getReader(idxIn);\n      this.type = type;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1346e81f172438a4f28d91266cdd03851f94b831","date":1318404834,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType).mjava","sourceNew":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead, ValueType type, boolean hasOffsets)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      ordToOffsetIndex = hasOffsets ? PackedInts.getReader(idxIn) : null; \n      docToOrdIndex = PackedInts.getReader(idxIn);\n\n    }\n\n","sourceOld":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead,ValueType type)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      docToOrdIndex = PackedInts.getReader(idxIn);\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1346e81f172438a4f28d91266cdd03851f94b831":["e128967bca58657bc0039d4bfe631e63e81f1977"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e128967bca58657bc0039d4bfe631e63e81f1977":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1346e81f172438a4f28d91266cdd03851f94b831"]},"commit2Childs":{"1346e81f172438a4f28d91266cdd03851f94b831":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["e128967bca58657bc0039d4bfe631e63e81f1977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"e128967bca58657bc0039d4bfe631e63e81f1977":["1346e81f172438a4f28d91266cdd03851f94b831"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}