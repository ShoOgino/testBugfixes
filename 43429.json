{"path":"src/test/org/apache/lucene/search/TestTermScorer#testExplain().mjava","commits":[{"id":"69ac39b86e913c67b6297d986e0c22daa0d4d365","date":1155936757,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermScorer#testExplain().mjava","pathOld":"/dev/null","sourceNew":"    public void testExplain() throws Exception\n    {\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        assertTrue(\"ts is null and it shouldn't be\", ts != null);\n        Explanation explanation = ts.explain(0);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        assertTrue(\"term frq is not 1\", explanation.getValue() == 1);\n        explanation = ts.explain(1);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        assertTrue(\"term frq is not 0\", explanation.getValue() == 0);\n\n        Term dogsTerm = new Term(FIELD, \"dogs\");\n        termQuery = new TermQuery(dogsTerm);\n        weight = termQuery.weight(indexSearcher);\n\n        ts = new TermScorer(weight, indexReader.termDocs(dogsTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        assertTrue(\"ts is null and it shouldn't be\", ts != null);\n        explanation = ts.explain(1);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        float sqrtTwo = (float)Math.sqrt(2.0f);\n        assertTrue(\"term frq: \" + explanation.getValue() + \" is not the square root of 2\", explanation.getValue() == sqrtTwo);\n\n        explanation = ts.explain(10);//try a doc out of range\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n\n        assertTrue(\"term frq: \" + explanation.getValue() + \" is not 0\", explanation.getValue() == 0);\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermScorer#testExplain().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermScorer#testExplain().mjava","sourceNew":"    public void testExplain() throws Exception\n    {\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        Explanation explanation = ts.explain(0);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        assertTrue(\"term frq is not 1\", explanation.getValue() == 1);\n        explanation = ts.explain(1);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        assertTrue(\"term frq is not 0\", explanation.getValue() == 0);\n\n        Term dogsTerm = new Term(FIELD, \"dogs\");\n        termQuery = new TermQuery(dogsTerm);\n        weight = termQuery.weight(indexSearcher);\n\n        ts = new TermScorer(weight, indexReader.termDocs(dogsTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        explanation = ts.explain(1);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        float sqrtTwo = (float)Math.sqrt(2.0f);\n        assertTrue(\"term frq: \" + explanation.getValue() + \" is not the square root of 2\", explanation.getValue() == sqrtTwo);\n\n        explanation = ts.explain(10);//try a doc out of range\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n\n        assertTrue(\"term frq: \" + explanation.getValue() + \" is not 0\", explanation.getValue() == 0);\n\n    }\n\n","sourceOld":"    public void testExplain() throws Exception\n    {\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        assertTrue(\"ts is null and it shouldn't be\", ts != null);\n        Explanation explanation = ts.explain(0);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        assertTrue(\"term frq is not 1\", explanation.getValue() == 1);\n        explanation = ts.explain(1);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        assertTrue(\"term frq is not 0\", explanation.getValue() == 0);\n\n        Term dogsTerm = new Term(FIELD, \"dogs\");\n        termQuery = new TermQuery(dogsTerm);\n        weight = termQuery.weight(indexSearcher);\n\n        ts = new TermScorer(weight, indexReader.termDocs(dogsTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        assertTrue(\"ts is null and it shouldn't be\", ts != null);\n        explanation = ts.explain(1);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        float sqrtTwo = (float)Math.sqrt(2.0f);\n        assertTrue(\"term frq: \" + explanation.getValue() + \" is not the square root of 2\", explanation.getValue() == sqrtTwo);\n\n        explanation = ts.explain(10);//try a doc out of range\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n\n        assertTrue(\"term frq: \" + explanation.getValue() + \" is not 0\", explanation.getValue() == 0);\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermScorer#testExplain().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermScorer#testExplain().mjava","sourceNew":"    public void testExplain() throws Exception\n    {\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        QueryWeight weight = termQuery.queryWeight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        Explanation explanation = ts.explain(0);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        assertTrue(\"term frq is not 1\", explanation.getValue() == 1);\n        explanation = ts.explain(1);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        assertTrue(\"term frq is not 0\", explanation.getValue() == 0);\n\n        Term dogsTerm = new Term(FIELD, \"dogs\");\n        termQuery = new TermQuery(dogsTerm);\n        weight = termQuery.queryWeight(indexSearcher);\n\n        ts = new TermScorer(weight, indexReader.termDocs(dogsTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        explanation = ts.explain(1);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        float sqrtTwo = (float)Math.sqrt(2.0f);\n        assertTrue(\"term frq: \" + explanation.getValue() + \" is not the square root of 2\", explanation.getValue() == sqrtTwo);\n\n        explanation = ts.explain(10);//try a doc out of range\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n\n        assertTrue(\"term frq: \" + explanation.getValue() + \" is not 0\", explanation.getValue() == 0);\n\n    }\n\n","sourceOld":"    public void testExplain() throws Exception\n    {\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        Explanation explanation = ts.explain(0);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        assertTrue(\"term frq is not 1\", explanation.getValue() == 1);\n        explanation = ts.explain(1);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        assertTrue(\"term frq is not 0\", explanation.getValue() == 0);\n\n        Term dogsTerm = new Term(FIELD, \"dogs\");\n        termQuery = new TermQuery(dogsTerm);\n        weight = termQuery.weight(indexSearcher);\n\n        ts = new TermScorer(weight, indexReader.termDocs(dogsTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        explanation = ts.explain(1);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        float sqrtTwo = (float)Math.sqrt(2.0f);\n        assertTrue(\"term frq: \" + explanation.getValue() + \" is not the square root of 2\", explanation.getValue() == sqrtTwo);\n\n        explanation = ts.explain(10);//try a doc out of range\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n\n        assertTrue(\"term frq: \" + explanation.getValue() + \" is not 0\", explanation.getValue() == 0);\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermScorer#testExplain().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermScorer#testExplain().mjava","sourceNew":"    public void testExplain() throws Exception\n    {\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        Explanation explanation = ts.explain(0);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        assertTrue(\"term frq is not 1\", explanation.getValue() == 1);\n        explanation = ts.explain(1);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        assertTrue(\"term frq is not 0\", explanation.getValue() == 0);\n\n        Term dogsTerm = new Term(FIELD, \"dogs\");\n        termQuery = new TermQuery(dogsTerm);\n        weight = termQuery.weight(indexSearcher);\n\n        ts = new TermScorer(weight, indexReader.termDocs(dogsTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        explanation = ts.explain(1);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        float sqrtTwo = (float)Math.sqrt(2.0f);\n        assertTrue(\"term frq: \" + explanation.getValue() + \" is not the square root of 2\", explanation.getValue() == sqrtTwo);\n\n        explanation = ts.explain(10);//try a doc out of range\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n\n        assertTrue(\"term frq: \" + explanation.getValue() + \" is not 0\", explanation.getValue() == 0);\n\n    }\n\n","sourceOld":"    public void testExplain() throws Exception\n    {\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        QueryWeight weight = termQuery.queryWeight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        Explanation explanation = ts.explain(0);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        assertTrue(\"term frq is not 1\", explanation.getValue() == 1);\n        explanation = ts.explain(1);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        assertTrue(\"term frq is not 0\", explanation.getValue() == 0);\n\n        Term dogsTerm = new Term(FIELD, \"dogs\");\n        termQuery = new TermQuery(dogsTerm);\n        weight = termQuery.queryWeight(indexSearcher);\n\n        ts = new TermScorer(weight, indexReader.termDocs(dogsTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        explanation = ts.explain(1);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        float sqrtTwo = (float)Math.sqrt(2.0f);\n        assertTrue(\"term frq: \" + explanation.getValue() + \" is not the square root of 2\", explanation.getValue() == sqrtTwo);\n\n        explanation = ts.explain(10);//try a doc out of range\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n\n        assertTrue(\"term frq: \" + explanation.getValue() + \" is not 0\", explanation.getValue() == 0);\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestTermScorer#testExplain().mjava","sourceNew":null,"sourceOld":"    public void testExplain() throws Exception\n    {\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        Explanation explanation = ts.explain(0);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        assertTrue(\"term frq is not 1\", explanation.getValue() == 1);\n        explanation = ts.explain(1);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        assertTrue(\"term frq is not 0\", explanation.getValue() == 0);\n\n        Term dogsTerm = new Term(FIELD, \"dogs\");\n        termQuery = new TermQuery(dogsTerm);\n        weight = termQuery.weight(indexSearcher);\n\n        ts = new TermScorer(weight, indexReader.termDocs(dogsTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        explanation = ts.explain(1);\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n        float sqrtTwo = (float)Math.sqrt(2.0f);\n        assertTrue(\"term frq: \" + explanation.getValue() + \" is not the square root of 2\", explanation.getValue() == sqrtTwo);\n\n        explanation = ts.explain(10);//try a doc out of range\n        assertTrue(\"explanation is null and it shouldn't be\", explanation != null);\n        //System.out.println(\"Explanation: \" + explanation.toString());\n        //All this Explain does is return the term frequency\n\n        assertTrue(\"term frq: \" + explanation.getValue() + \" is not 0\", explanation.getValue() == 0);\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["fe941135bdfc28c81e20b4d21422f8726af34925"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["69ac39b86e913c67b6297d986e0c22daa0d4d365"],"69ac39b86e913c67b6297d986e0c22daa0d4d365":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["486cfd5a3f7481938475c113415d896f7a74a4a9"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["052fac7830290bd38a04cddee1a121ee07656b56"],"69ac39b86e913c67b6297d986e0c22daa0d4d365":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69ac39b86e913c67b6297d986e0c22daa0d4d365"],"fe941135bdfc28c81e20b4d21422f8726af34925":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}