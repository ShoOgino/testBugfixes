{"path":"lucene/core/src/test/org/apache/lucene/geo/TestXYRectangle#testRandomCircleToBBox().mjava","commits":[{"id":"78d804863b9cfcd3de609cab59d55462314626aa","date":1583128589,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestXYRectangle#testRandomCircleToBBox().mjava","pathOld":"/dev/null","sourceNew":"  /** make sure that if a point is inside a circle, it is inside of the bbox as well */\n  public void testRandomCircleToBBox() {\n    int iters = atLeast(100);\n    for(int iter= 0;iter < iters; iter++) {\n\n      float centerX = ShapeTestUtil.nextFloat(random());\n      float centerY = ShapeTestUtil.nextFloat(random());\n\n      final float radius;\n      if (random().nextBoolean()) {\n        radius = random().nextFloat() * TestUtil.nextInt(random(), 1, 100000);\n      } else {\n        radius = Math.abs(ShapeTestUtil.nextFloat(random()));\n      }\n\n      XYRectangle bbox = XYRectangle.fromPointDistance(centerX, centerY, radius);\n      Component2D component2D = bbox.toComponent2D();\n\n      int numPointsToTry = 1000;\n      for(int i = 0; i < numPointsToTry; i++) {\n\n        double x;\n        if (random().nextBoolean()) {\n          x = Math.min(Float.MAX_VALUE, centerX + radius + random().nextDouble());\n        } else {\n          x = Math.max(-Float.MAX_VALUE, centerX + radius - random().nextDouble());\n        }\n        double y;\n        if (random().nextBoolean()) {\n          y = Math.min(Float.MAX_VALUE, centerY + radius + random().nextDouble());\n        } else {\n          y = Math.max(-Float.MAX_VALUE, centerY + radius - random().nextDouble());\n        }\n\n        // cartesian says it's within the circle:\n        boolean cartesianSays = component2D.contains(x, y);\n        // BBox says its within the box:\n        boolean bboxSays = x >= bbox.minX && x <= bbox.maxX && y >= bbox.minY && y <= bbox.maxY;\n\n        if (cartesianSays) {\n          if (bboxSays == false) {\n            System.out.println(\"  centerX=\" + centerX + \" centerY=\" + centerY + \" radius=\" + radius);\n            System.out.println(\"  bbox: x=\" + bbox.minX + \" to \" + bbox.maxX + \" y=\" + bbox.minY + \" to \" + bbox.maxY);\n            System.out.println(\"  point: x=\" + x + \" y=\" + y);\n            fail(\"point was within the distance according to cartesian distance, but the bbox doesn't contain it\");\n          }\n        } else {\n          // it's fine if cartesian said it was outside the radius and bbox said it was inside the box\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78d804863b9cfcd3de609cab59d55462314626aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78d804863b9cfcd3de609cab59d55462314626aa"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78d804863b9cfcd3de609cab59d55462314626aa"],"78d804863b9cfcd3de609cab59d55462314626aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}