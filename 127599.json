{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest#test().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest#test().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    NumericPayloadTokenFilter nptf = new NumericPayloadTokenFilter(new WordTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false)), 3, \"D\");\n    boolean seenDogs = false;\n    CharTermAttribute termAtt = nptf.getAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    nptf.reset();\n    while (nptf.incrementToken()) {\n      if (termAtt.toString().equals(\"dogs\")) {\n        seenDogs = true;\n        assertTrue(typeAtt.type() + \" is not equal to \" + \"D\", typeAtt.type().equals(\"D\") == true);\n        assertTrue(\"payloadAtt.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n        byte [] bytes = payloadAtt.getPayload().getData();//safe here to just use the bytes, otherwise we should use offset, length\n        assertTrue(bytes.length + \" does not equal: \" + payloadAtt.getPayload().length(), bytes.length == payloadAtt.getPayload().length());\n        assertTrue(payloadAtt.getPayload().getOffset() + \" does not equal: \" + 0, payloadAtt.getPayload().getOffset() == 0);\n        float pay = PayloadHelper.decodeFloat(bytes);\n        assertTrue(pay + \" does not equal: \" + 3, pay == 3);\n      } else {\n        assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    NumericPayloadTokenFilter nptf = new NumericPayloadTokenFilter(new WordTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false)), 3, \"D\");\n    boolean seenDogs = false;\n    CharTermAttribute termAtt = nptf.getAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    nptf.reset();\n    while (nptf.incrementToken()) {\n      if (termAtt.toString().equals(\"dogs\")) {\n        seenDogs = true;\n        assertTrue(typeAtt.type() + \" is not equal to \" + \"D\", typeAtt.type().equals(\"D\") == true);\n        assertTrue(\"payloadAtt.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n        byte [] bytes = payloadAtt.getPayload().getData();//safe here to just use the bytes, otherwise we should use offset, length\n        assertTrue(bytes.length + \" does not equal: \" + payloadAtt.getPayload().length(), bytes.length == payloadAtt.getPayload().length());\n        assertTrue(payloadAtt.getPayload().getOffset() + \" does not equal: \" + 0, payloadAtt.getPayload().getOffset() == 0);\n        float pay = PayloadHelper.decodeFloat(bytes);\n        assertTrue(pay + \" does not equal: \" + 3, pay == 3);\n      } else {\n        assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    NumericPayloadTokenFilter nptf = new NumericPayloadTokenFilter(new WordTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false)), 3, \"D\");\n    boolean seenDogs = false;\n    CharTermAttribute termAtt = nptf.getAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    nptf.reset();\n    while (nptf.incrementToken()) {\n      if (termAtt.toString().equals(\"dogs\")) {\n        seenDogs = true;\n        assertTrue(typeAtt.type() + \" is not equal to \" + \"D\", typeAtt.type().equals(\"D\") == true);\n        assertTrue(\"payloadAtt.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n        byte [] bytes = payloadAtt.getPayload().bytes;//safe here to just use the bytes, otherwise we should use offset, length\n        assertTrue(bytes.length + \" does not equal: \" + payloadAtt.getPayload().length, bytes.length == payloadAtt.getPayload().length);\n        assertTrue(payloadAtt.getPayload().offset + \" does not equal: \" + 0, payloadAtt.getPayload().offset == 0);\n        float pay = PayloadHelper.decodeFloat(bytes);\n        assertTrue(pay + \" does not equal: \" + 3, pay == 3);\n      } else {\n        assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    NumericPayloadTokenFilter nptf = new NumericPayloadTokenFilter(new WordTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false)), 3, \"D\");\n    boolean seenDogs = false;\n    CharTermAttribute termAtt = nptf.getAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    nptf.reset();\n    while (nptf.incrementToken()) {\n      if (termAtt.toString().equals(\"dogs\")) {\n        seenDogs = true;\n        assertTrue(typeAtt.type() + \" is not equal to \" + \"D\", typeAtt.type().equals(\"D\") == true);\n        assertTrue(\"payloadAtt.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n        byte [] bytes = payloadAtt.getPayload().getData();//safe here to just use the bytes, otherwise we should use offset, length\n        assertTrue(bytes.length + \" does not equal: \" + payloadAtt.getPayload().length(), bytes.length == payloadAtt.getPayload().length());\n        assertTrue(payloadAtt.getPayload().getOffset() + \" does not equal: \" + 0, payloadAtt.getPayload().getOffset() == 0);\n        float pay = PayloadHelper.decodeFloat(bytes);\n        assertTrue(pay + \" does not equal: \" + 3, pay == 3);\n      } else {\n        assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    final MockTokenizer input = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    input.setReader(new StringReader(test));\n    NumericPayloadTokenFilter nptf = new NumericPayloadTokenFilter(new WordTokenFilter(input), 3, \"D\");\n    boolean seenDogs = false;\n    CharTermAttribute termAtt = nptf.getAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    nptf.reset();\n    while (nptf.incrementToken()) {\n      if (termAtt.toString().equals(\"dogs\")) {\n        seenDogs = true;\n        assertTrue(typeAtt.type() + \" is not equal to \" + \"D\", typeAtt.type().equals(\"D\") == true);\n        assertTrue(\"payloadAtt.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n        byte [] bytes = payloadAtt.getPayload().bytes;//safe here to just use the bytes, otherwise we should use offset, length\n        assertTrue(bytes.length + \" does not equal: \" + payloadAtt.getPayload().length, bytes.length == payloadAtt.getPayload().length);\n        assertTrue(payloadAtt.getPayload().offset + \" does not equal: \" + 0, payloadAtt.getPayload().offset == 0);\n        float pay = PayloadHelper.decodeFloat(bytes);\n        assertTrue(pay + \" does not equal: \" + 3, pay == 3);\n      } else {\n        assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    NumericPayloadTokenFilter nptf = new NumericPayloadTokenFilter(new WordTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false)), 3, \"D\");\n    boolean seenDogs = false;\n    CharTermAttribute termAtt = nptf.getAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    nptf.reset();\n    while (nptf.incrementToken()) {\n      if (termAtt.toString().equals(\"dogs\")) {\n        seenDogs = true;\n        assertTrue(typeAtt.type() + \" is not equal to \" + \"D\", typeAtt.type().equals(\"D\") == true);\n        assertTrue(\"payloadAtt.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n        byte [] bytes = payloadAtt.getPayload().bytes;//safe here to just use the bytes, otherwise we should use offset, length\n        assertTrue(bytes.length + \" does not equal: \" + payloadAtt.getPayload().length, bytes.length == payloadAtt.getPayload().length);\n        assertTrue(payloadAtt.getPayload().offset + \" does not equal: \" + 0, payloadAtt.getPayload().offset == 0);\n        float pay = PayloadHelper.decodeFloat(bytes);\n        assertTrue(pay + \" does not equal: \" + 3, pay == 3);\n      } else {\n        assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}