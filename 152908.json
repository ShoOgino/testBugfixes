{"path":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(reader);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36a4a25c2f02edc0c96bc51a298c45b1764e662d","date":1399923529,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocTermOrds(AtomicReader,String,BytesRef).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field, BytesRef prefix) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, prefix), false);\n    return dto.iterator(reader);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36a4a25c2f02edc0c96bc51a298c45b1764e662d":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"36a4a25c2f02edc0c96bc51a298c45b1764e662d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["36a4a25c2f02edc0c96bc51a298c45b1764e662d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["36a4a25c2f02edc0c96bc51a298c45b1764e662d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}