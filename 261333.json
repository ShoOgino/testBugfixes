{"path":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","commits":[{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicIndexReader).mjava","sourceNew":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  a {@link FixedBitSet}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return DocIdSet.EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","sourceOld":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  a {@link FixedBitSet}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicIndexReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return DocIdSet.EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,IndexReader).mjava","sourceNew":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  a {@link FixedBitSet}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return DocIdSet.EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","sourceOld":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  a {@link FixedBitSet}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, IndexReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return DocIdSet.EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#docIdSetToCache(DocIdSet,AtomicReader).mjava","sourceNew":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  a {@link FixedBitSet}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return DocIdSet.EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","sourceOld":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  a {@link FixedBitSet}.\n   */\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, AtomicReader reader) throws IOException {\n    if (docIdSet == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return DocIdSet.EMPTY_DOCIDSET;\n    } else if (docIdSet.isCacheable()) {\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return DocIdSet.EMPTY_DOCIDSET;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return bits;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da6d5ac19a80d65b1e864251f155d30960353b7e","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}