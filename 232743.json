{"path":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(Reader,String).mjava","commits":[{"id":"ae46d105c94ea6ceb5201189bf9611bdef91b1b4","date":1310997409,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(Reader,String).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(Reader).mjava","sourceNew":"  /**\n   * Convenience routine to make it easy to return the most interesting words in a document.\n   * More advanced users will call {@link #retrieveTerms(Reader, String) retrieveTerms()} directly.\n   *\n   * @param r the source document\n   * @param fieldName field passed to analyzer to use when analyzing the content\n   * @return the most interesting words in the document\n   * @see #retrieveTerms(java.io.Reader)\n   * @see #setMaxQueryTerms\n   */\n  public String[] retrieveInterestingTerms(Reader r, String fieldName) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(r, fieldName);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","sourceOld":"  /**\n   * Convenience routine to make it easy to return the most interesting words in a document.\n   * More advanced users will call {@link #retrieveTerms(java.io.Reader) retrieveTerms()} directly.\n   *\n   * @param r the source document\n   * @return the most interesting words in the document\n   * @see #retrieveTerms(java.io.Reader)\n   * @see #setMaxQueryTerms\n   */\n  public String[] retrieveInterestingTerms(Reader r) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(r);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8243520ae771d3127a521834a905f61f80a046a","date":1310998510,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(Reader,String).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(Reader,String).mjava","sourceNew":"  /**\n   * Convenience routine to make it easy to return the most interesting words in a document.\n   * More advanced users will call {@link #retrieveTerms(Reader, String) retrieveTerms()} directly.\n   *\n   * @param r the source document\n   * @param fieldName field passed to analyzer to use when analyzing the content\n   * @return the most interesting words in the document\n   * @see #retrieveTerms(java.io.Reader, String)\n   * @see #setMaxQueryTerms\n   */\n  public String[] retrieveInterestingTerms(Reader r, String fieldName) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(r, fieldName);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","sourceOld":"  /**\n   * Convenience routine to make it easy to return the most interesting words in a document.\n   * More advanced users will call {@link #retrieveTerms(Reader, String) retrieveTerms()} directly.\n   *\n   * @param r the source document\n   * @param fieldName field passed to analyzer to use when analyzing the content\n   * @return the most interesting words in the document\n   * @see #retrieveTerms(java.io.Reader)\n   * @see #setMaxQueryTerms\n   */\n  public String[] retrieveInterestingTerms(Reader r, String fieldName) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(r, fieldName);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(Reader,String).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(Reader,String).mjava","sourceNew":"  /**\n   * Convenience routine to make it easy to return the most interesting words in a document.\n   * More advanced users will call {@link #retrieveTerms(Reader, String) retrieveTerms()} directly.\n   *\n   * @param r the source document\n   * @param fieldName field passed to analyzer to use when analyzing the content\n   * @return the most interesting words in the document\n   * @see #retrieveTerms(java.io.Reader, String)\n   * @see #setMaxQueryTerms\n   */\n  public String[] retrieveInterestingTerms(Reader r, String fieldName) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(r, fieldName);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","sourceOld":"  /**\n   * Convenience routine to make it easy to return the most interesting words in a document.\n   * More advanced users will call {@link #retrieveTerms(Reader, String) retrieveTerms()} directly.\n   *\n   * @param r the source document\n   * @param fieldName field passed to analyzer to use when analyzing the content\n   * @return the most interesting words in the document\n   * @see #retrieveTerms(java.io.Reader, String)\n   * @see #setMaxQueryTerms\n   */\n  public String[] retrieveInterestingTerms(Reader r, String fieldName) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(r, fieldName);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d8243520ae771d3127a521834a905f61f80a046a":["ae46d105c94ea6ceb5201189bf9611bdef91b1b4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d8243520ae771d3127a521834a905f61f80a046a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae46d105c94ea6ceb5201189bf9611bdef91b1b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"d8243520ae771d3127a521834a905f61f80a046a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae46d105c94ea6ceb5201189bf9611bdef91b1b4"],"ae46d105c94ea6ceb5201189bf9611bdef91b1b4":["d8243520ae771d3127a521834a905f61f80a046a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}