{"path":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","commits":[{"id":"c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68","date":1434369345,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPortRule() throws Exception {\n    String rulesColl = \"portRuleColl\";\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    String port = \"-1\";\n    Matcher hostAndPortMatcher = Pattern.compile(\"(?:https?://)?([^:]+):(\\\\d+)\").matcher(baseUrl);\n    if (hostAndPortMatcher.find()) {\n      port = hostAndPortMatcher.group(2);\n    }\n    try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setShards(\"shard1\");\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setReplicationFactor(2);\n      create.setRule(\"port:\" + port);\n      create.setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(1, list.size());\n    assertEquals(port, ((Map) list.get(0)).get(\"port\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","sourceNew":"  @Test\n  public void testPortRule() throws Exception {\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String port = Integer.toString(jetty.getLocalPort());\n\n    String rulesColl = \"portRuleColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"port:\" + port)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(1, list.size());\n    assertEquals(port, ((Map) list.get(0)).get(\"port\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n  }\n\n","sourceOld":"  @Test\n  public void testPortRule() throws Exception {\n    String rulesColl = \"portRuleColl\";\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    String port = \"-1\";\n    Matcher hostAndPortMatcher = Pattern.compile(\"(?:https?://)?([^:]+):(\\\\d+)\").matcher(baseUrl);\n    if (hostAndPortMatcher.find()) {\n      port = hostAndPortMatcher.group(2);\n    }\n    try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setShards(\"shard1\");\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setReplicationFactor(2);\n      create.setRule(\"port:\" + port);\n      create.setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(1, list.size());\n    assertEquals(port, ((Map) list.get(0)).get(\"port\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","sourceNew":"  @Test\n  public void testPortRule() throws Exception {\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String port = Integer.toString(jetty.getLocalPort());\n\n    String rulesColl = \"portRuleColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"port:\" + port)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(1, list.size());\n    assertEquals(port, ((Map) list.get(0)).get(\"port\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n  }\n\n","sourceOld":"  @Test\n  public void testPortRule() throws Exception {\n    String rulesColl = \"portRuleColl\";\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    String port = \"-1\";\n    Matcher hostAndPortMatcher = Pattern.compile(\"(?:https?://)?([^:]+):(\\\\d+)\").matcher(baseUrl);\n    if (hostAndPortMatcher.find()) {\n      port = hostAndPortMatcher.group(2);\n    }\n    try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setShards(\"shard1\");\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setReplicationFactor(2);\n      create.setRule(\"port:\" + port);\n      create.setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(1, list.size());\n    assertEquals(port, ((Map) list.get(0)).get(\"port\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"432ec497284686a1567bffcc0c843a8b9eaae57b","date":1475677162,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","sourceNew":"  @Test\n  public void testPortRule() throws Exception {\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String port = Integer.toString(jetty.getLocalPort());\n\n    String rulesColl = \"portRuleColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"port:\" + port)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(1, list.size());\n    assertEquals(port, ((Map) list.get(0)).get(\"port\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.deleteCollection(rulesColl).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testPortRule() throws Exception {\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String port = Integer.toString(jetty.getLocalPort());\n\n    String rulesColl = \"portRuleColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"port:\" + port)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(1, list.size());\n    assertEquals(port, ((Map) list.get(0)).get(\"port\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82ac6146556cfb813fae76783544007fc3aaa34d","date":1476790432,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","sourceNew":"  @Test\n  public void testPortRule() throws Exception {\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String port = Integer.toString(jetty.getLocalPort());\n\n    String rulesColl = \"portRuleColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"port:\" + port)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(1, list.size());\n    assertEquals(port, ((Map) list.get(0)).get(\"port\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPortRule() throws Exception {\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String port = Integer.toString(jetty.getLocalPort());\n\n    String rulesColl = \"portRuleColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"port:\" + port)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(1, list.size());\n    assertEquals(port, ((Map) list.get(0)).get(\"port\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.deleteCollection(rulesColl).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","sourceNew":"  @Test\n  public void testPortRule() throws Exception {\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String port = Integer.toString(jetty.getLocalPort());\n\n    String rulesColl = \"portRuleColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"port:\" + port)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(1, list.size());\n    assertEquals(port, ((Map) list.get(0)).get(\"port\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPortRule() throws Exception {\n    String rulesColl = \"portRuleColl\";\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    String port = \"-1\";\n    Matcher hostAndPortMatcher = Pattern.compile(\"(?:https?://)?([^:]+):(\\\\d+)\").matcher(baseUrl);\n    if (hostAndPortMatcher.find()) {\n      port = hostAndPortMatcher.group(2);\n    }\n    try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setShards(\"shard1\");\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setReplicationFactor(2);\n      create.setRule(\"port:\" + port);\n      create.setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(1, list.size());\n    assertEquals(port, ((Map) list.get(0)).get(\"port\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eade42881b2b73694a2b065cce4d6367a1870676","date":1564191666,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","sourceNew":"  @Test\n  public void testPortRule() throws Exception {\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String port = Integer.toString(jetty.getLocalPort());\n\n    String rulesColl = \"portRuleColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"port:\" + port)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Collection should have followed port rule w/ImplicitSnitch, not cluster policy\",\n                 rulesColl, (liveNodes, rulesCollection) -> {\n                   // first sanity check that the collection exists & the rules/snitch are listed\n                   if (null == rulesCollection) {\n                     return false;\n                   } else {\n                     List list = (List) rulesCollection.get(\"rule\");\n                     if (null == list || 1 != list.size()) {\n                       return false;\n                     }\n                     if (! port.equals(((Map) list.get(0)).get(\"port\"))) {\n                       return false;\n                     }\n                     list = (List) rulesCollection.get(\"snitch\");\n                     if (null == list || 1 != list.size()) {\n                       return false;\n                     }\n                     if (! \"ImplicitSnitch\".equals(((Map)list.get(0)).get(\"class\"))) {\n                       return false;\n                     }\n                   }\n                   if (2 != rulesCollection.getReplicas().size()) {\n                     return false;\n                   }\n                   // now sanity check that the rules were *obeyed*\n                   return rulesCollection.getReplicas().stream().allMatch\n                     (replica -> (replica.getNodeName().contains(port) &&\n                                  replica.isActive(liveNodes)));\n                 });\n  }\n\n","sourceOld":"  @Test\n  public void testPortRule() throws Exception {\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String port = Integer.toString(jetty.getLocalPort());\n\n    String rulesColl = \"portRuleColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"port:\" + port)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(1, list.size());\n    assertEquals(port, ((Map) list.get(0)).get(\"port\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","sourceNew":"  @Test\n  public void testPortRule() throws Exception {\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String port = Integer.toString(jetty.getLocalPort());\n\n    String rulesColl = \"portRuleColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"port:\" + port)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Collection should have followed port rule w/ImplicitSnitch, not cluster policy\",\n                 rulesColl, (liveNodes, rulesCollection) -> {\n                   // first sanity check that the collection exists & the rules/snitch are listed\n                   if (null == rulesCollection) {\n                     return false;\n                   } else {\n                     List list = (List) rulesCollection.get(\"rule\");\n                     if (null == list || 1 != list.size()) {\n                       return false;\n                     }\n                     if (! port.equals(((Map) list.get(0)).get(\"port\"))) {\n                       return false;\n                     }\n                     list = (List) rulesCollection.get(\"snitch\");\n                     if (null == list || 1 != list.size()) {\n                       return false;\n                     }\n                     if (! \"ImplicitSnitch\".equals(((Map)list.get(0)).get(\"class\"))) {\n                       return false;\n                     }\n                   }\n                   if (2 != rulesCollection.getReplicas().size()) {\n                     return false;\n                   }\n                   // now sanity check that the rules were *obeyed*\n                   return rulesCollection.getReplicas().stream().allMatch\n                     (replica -> (replica.getNodeName().contains(port) &&\n                                  replica.isActive(liveNodes)));\n                 });\n  }\n\n","sourceOld":"  @Test\n  public void testPortRule() throws Exception {\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String port = Integer.toString(jetty.getLocalPort());\n\n    String rulesColl = \"portRuleColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"port:\" + port)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(1, list.size());\n    assertEquals(port, ((Map) list.get(0)).get(\"port\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testPortRule().mjava","sourceNew":"  @Test\n  public void testPortRule() throws Exception {\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String port = Integer.toString(jetty.getLocalPort());\n\n    String rulesColl = \"portRuleColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"port:\" + port)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Collection should have followed port rule w/ImplicitSnitch, not cluster policy\",\n                 rulesColl, (liveNodes, rulesCollection) -> {\n                   // first sanity check that the collection exists & the rules/snitch are listed\n                   if (null == rulesCollection) {\n                     return false;\n                   } else {\n                     @SuppressWarnings({\"rawtypes\"})\n                     List list = (List) rulesCollection.get(\"rule\");\n                     if (null == list || 1 != list.size()) {\n                       return false;\n                     }\n                     if (! port.equals(((Map) list.get(0)).get(\"port\"))) {\n                       return false;\n                     }\n                     list = (List) rulesCollection.get(\"snitch\");\n                     if (null == list || 1 != list.size()) {\n                       return false;\n                     }\n                     if (! \"ImplicitSnitch\".equals(((Map)list.get(0)).get(\"class\"))) {\n                       return false;\n                     }\n                   }\n                   if (2 != rulesCollection.getReplicas().size()) {\n                     return false;\n                   }\n                   // now sanity check that the rules were *obeyed*\n                   return rulesCollection.getReplicas().stream().allMatch\n                     (replica -> (replica.getNodeName().contains(port) &&\n                                  replica.isActive(liveNodes)));\n                 });\n  }\n\n","sourceOld":"  @Test\n  public void testPortRule() throws Exception {\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String port = Integer.toString(jetty.getLocalPort());\n\n    String rulesColl = \"portRuleColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"port:\" + port)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Collection should have followed port rule w/ImplicitSnitch, not cluster policy\",\n                 rulesColl, (liveNodes, rulesCollection) -> {\n                   // first sanity check that the collection exists & the rules/snitch are listed\n                   if (null == rulesCollection) {\n                     return false;\n                   } else {\n                     List list = (List) rulesCollection.get(\"rule\");\n                     if (null == list || 1 != list.size()) {\n                       return false;\n                     }\n                     if (! port.equals(((Map) list.get(0)).get(\"port\"))) {\n                       return false;\n                     }\n                     list = (List) rulesCollection.get(\"snitch\");\n                     if (null == list || 1 != list.size()) {\n                       return false;\n                     }\n                     if (! \"ImplicitSnitch\".equals(((Map)list.get(0)).get(\"class\"))) {\n                       return false;\n                     }\n                   }\n                   if (2 != rulesCollection.getReplicas().size()) {\n                     return false;\n                   }\n                   // now sanity check that the rules were *obeyed*\n                   return rulesCollection.getReplicas().stream().allMatch\n                     (replica -> (replica.getNodeName().contains(port) &&\n                                  replica.isActive(liveNodes)));\n                 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["eade42881b2b73694a2b065cce4d6367a1870676"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"432ec497284686a1567bffcc0c843a8b9eaae57b":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"82ac6146556cfb813fae76783544007fc3aaa34d":["432ec497284686a1567bffcc0c843a8b9eaae57b"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68"],"f8061ddd97f3352007d927dae445884a6f3d857b":["82ac6146556cfb813fae76783544007fc3aaa34d","eade42881b2b73694a2b065cce4d6367a1870676"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68","82ac6146556cfb813fae76783544007fc3aaa34d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"eade42881b2b73694a2b065cce4d6367a1870676":["82ac6146556cfb813fae76783544007fc3aaa34d"]},"commit2Childs":{"c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68":["1967bed916cc89da82a1c2085f27976da6d08cbd","5a02c54923e5f4de08097fa9028e09e8cf5caa82","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["432ec497284686a1567bffcc0c843a8b9eaae57b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68"],"432ec497284686a1567bffcc0c843a8b9eaae57b":["82ac6146556cfb813fae76783544007fc3aaa34d"],"82ac6146556cfb813fae76783544007fc3aaa34d":["f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","eade42881b2b73694a2b065cce4d6367a1870676"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"eade42881b2b73694a2b065cce4d6367a1870676":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}