{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#nextDoc().mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      while (true) {\n\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          freq = freqBuffer[docBufferUpto];\n          docBufferUpto++;\n          return doc;\n        }\n        docBufferUpto++;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      while (true) {\n\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          freq = freqBuffer[docBufferUpto];\n          docBufferUpto++;\n          return doc;\n        }\n        docBufferUpto++;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      accum += docDeltaBuffer[docBufferUpto];\n      docUpto++;\n\n      doc = accum;\n      freq = freqBuffer[docBufferUpto];\n      docBufferUpto++;\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      while (true) {\n\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          doc = accum;\n          freq = freqBuffer[docBufferUpto];\n          docBufferUpto++;\n          return doc;\n        }\n        docBufferUpto++;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9089237f2fb93105f12a1135e60257f4cf8ed41","date":1562086738,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs(); // we don't need to load freqs for now (will be loaded later if necessary)\n      }\n\n      accum += docDeltaBuffer[docBufferUpto];\n      docUpto++;\n\n      doc = accum;\n      docBufferUpto++;\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      accum += docDeltaBuffer[docBufferUpto];\n      docUpto++;\n\n      doc = accum;\n      freq = freqBuffer[docBufferUpto];\n      docBufferUpto++;\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs(); // we don't need to load freqs for now (will be loaded later if necessary)\n      }\n\n      accum += docDeltaBuffer[docBufferUpto];\n      docUpto++;\n\n      doc = accum;\n      docBufferUpto++;\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs(); // we don't need to load freqs for now (will be loaded later if necessary)\n      }\n\n      accum += docDeltaBuffer[docBufferUpto];\n      docUpto++;\n\n      doc = accum;\n      docBufferUpto++;\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a9089237f2fb93105f12a1135e60257f4cf8ed41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9089237f2fb93105f12a1135e60257f4cf8ed41":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["a9089237f2fb93105f12a1135e60257f4cf8ed41"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a9089237f2fb93105f12a1135e60257f4cf8ed41":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}