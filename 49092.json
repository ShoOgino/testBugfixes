{"path":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#asInts2D(int,int,int[]).mjava","commits":[{"id":"59d82b0be40ecfcc2c94c776b324e0903a62b844","date":1423535462,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#asInts2D(int,int,int[]).mjava","pathOld":"/dev/null","sourceNew":"  static List<List<Integer>> asInts2D(final int columns, final int rows, final int[] counts) {\n    //Returns a view versus returning a copy. This saves memory.\n    //The data is oriented naturally for human/developer viewing: one row at a time top-down\n    return new AbstractList<List<Integer>>() {\n      @Override\n      public List<Integer> get(final int rowIdx) {//top-down remember; the heatmap.counts is bottom up\n        //check if all zeroes and return null if so\n        boolean hasNonZero = false;\n        int y = rows - rowIdx - 1;//flip direction for 'y'\n        for (int c = 0; c < columns; c++) {\n          if (counts[c * rows + y] > 0) {\n            hasNonZero = true;\n            break;\n          }\n        }\n        if (!hasNonZero) {\n          return null;\n        }\n\n        return new AbstractList<Integer>() {\n          @Override\n          public Integer get(int columnIdx) {\n            return counts[columnIdx * rows + y];\n          }\n\n          @Override\n          public int size() {\n            return columns;\n          }\n        };\n      }\n\n      @Override\n      public int size() {\n        return rows;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ab027bdfe663227636ccbeda13ae82add302939","date":1529980633,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#asInts2D(int,int,int[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#asInts2D(int,int,int[]).mjava","sourceNew":"  @VisibleForTesting\n  static List<List<Integer>> asInts2D(final int columns, final int rows, final int[] counts) {\n    //Returns a view versus returning a copy. This saves memory.\n    //The data is oriented naturally for human/developer viewing: one row at a time top-down\n    return new AbstractList<List<Integer>>() {\n      @Override\n      public List<Integer> get(final int rowIdx) {//top-down remember; the heatmap.counts is bottom up\n        //check if all zeroes and return null if so\n        boolean hasNonZero = false;\n        int y = rows - rowIdx - 1;//flip direction for 'y'\n        for (int c = 0; c < columns; c++) {\n          if (counts[c * rows + y] > 0) {\n            hasNonZero = true;\n            break;\n          }\n        }\n        if (!hasNonZero) {\n          return null;\n        }\n\n        return new AbstractList<Integer>() {\n          @Override\n          public Integer get(int columnIdx) {\n            return counts[columnIdx * rows + y];\n          }\n\n          @Override\n          public int size() {\n            return columns;\n          }\n        };\n      }\n\n      @Override\n      public int size() {\n        return rows;\n      }\n    };\n  }\n\n","sourceOld":"  static List<List<Integer>> asInts2D(final int columns, final int rows, final int[] counts) {\n    //Returns a view versus returning a copy. This saves memory.\n    //The data is oriented naturally for human/developer viewing: one row at a time top-down\n    return new AbstractList<List<Integer>>() {\n      @Override\n      public List<Integer> get(final int rowIdx) {//top-down remember; the heatmap.counts is bottom up\n        //check if all zeroes and return null if so\n        boolean hasNonZero = false;\n        int y = rows - rowIdx - 1;//flip direction for 'y'\n        for (int c = 0; c < columns; c++) {\n          if (counts[c * rows + y] > 0) {\n            hasNonZero = true;\n            break;\n          }\n        }\n        if (!hasNonZero) {\n          return null;\n        }\n\n        return new AbstractList<Integer>() {\n          @Override\n          public Integer get(int columnIdx) {\n            return counts[columnIdx * rows + y];\n          }\n\n          @Override\n          public int size() {\n            return columns;\n          }\n        };\n      }\n\n      @Override\n      public int size() {\n        return rows;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#asInts2D(int,int,int[]).mjava","sourceNew":null,"sourceOld":"  static List<List<Integer>> asInts2D(final int columns, final int rows, final int[] counts) {\n    //Returns a view versus returning a copy. This saves memory.\n    //The data is oriented naturally for human/developer viewing: one row at a time top-down\n    return new AbstractList<List<Integer>>() {\n      @Override\n      public List<Integer> get(final int rowIdx) {//top-down remember; the heatmap.counts is bottom up\n        //check if all zeroes and return null if so\n        boolean hasNonZero = false;\n        int y = rows - rowIdx - 1;//flip direction for 'y'\n        for (int c = 0; c < columns; c++) {\n          if (counts[c * rows + y] > 0) {\n            hasNonZero = true;\n            break;\n          }\n        }\n        if (!hasNonZero) {\n          return null;\n        }\n\n        return new AbstractList<Integer>() {\n          @Override\n          public Integer get(int columnIdx) {\n            return counts[columnIdx * rows + y];\n          }\n\n          @Override\n          public int size() {\n            return columns;\n          }\n        };\n      }\n\n      @Override\n      public int size() {\n        return rows;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#asInts2D(int,int,int[]).mjava","sourceNew":null,"sourceOld":"  static List<List<Integer>> asInts2D(final int columns, final int rows, final int[] counts) {\n    //Returns a view versus returning a copy. This saves memory.\n    //The data is oriented naturally for human/developer viewing: one row at a time top-down\n    return new AbstractList<List<Integer>>() {\n      @Override\n      public List<Integer> get(final int rowIdx) {//top-down remember; the heatmap.counts is bottom up\n        //check if all zeroes and return null if so\n        boolean hasNonZero = false;\n        int y = rows - rowIdx - 1;//flip direction for 'y'\n        for (int c = 0; c < columns; c++) {\n          if (counts[c * rows + y] > 0) {\n            hasNonZero = true;\n            break;\n          }\n        }\n        if (!hasNonZero) {\n          return null;\n        }\n\n        return new AbstractList<Integer>() {\n          @Override\n          public Integer get(int columnIdx) {\n            return counts[columnIdx * rows + y];\n          }\n\n          @Override\n          public int size() {\n            return columns;\n          }\n        };\n      }\n\n      @Override\n      public int size() {\n        return rows;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ab027bdfe663227636ccbeda13ae82add302939":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"59d82b0be40ecfcc2c94c776b324e0903a62b844":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["59d82b0be40ecfcc2c94c776b324e0903a62b844","2ab027bdfe663227636ccbeda13ae82add302939"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ab027bdfe663227636ccbeda13ae82add302939"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["59d82b0be40ecfcc2c94c776b324e0903a62b844","2ab027bdfe663227636ccbeda13ae82add302939"]},"commit2Childs":{"2ab027bdfe663227636ccbeda13ae82add302939":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"59d82b0be40ecfcc2c94c776b324e0903a62b844":["2ab027bdfe663227636ccbeda13ae82add302939","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}