{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","commits":[{"id":"2b9812246deee2216de0db0ea556e1ff163f5793","date":1333820236,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","pathOld":"/dev/null","sourceNew":"    private CharFilterSpec newCharFilterChain(Random random, Reader reader) {\n      CharFilterSpec spec = new CharFilterSpec();\n      spec.reader = reader;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(3);\n      for (int i = 0; i < numFilters; i++) {\n        boolean success = false;\n        while (!success) {\n          try {\n            // TODO: also look for other variants and handle them special\n            int idx = random.nextInt(charfilters.length);\n            try {\n              Constructor c = charfilters[idx].getConstructor(Reader.class);\n              spec.reader = (Reader) c.newInstance(spec.reader);\n            } catch (NoSuchMethodException e) {\n              Constructor c = charfilters[idx].getConstructor(CharStream.class);\n              spec.reader = (Reader) c.newInstance(CharReader.get(spec.reader));\n            }\n\n            if (descr.length() > 0) {\n              descr.append(\",\");\n            }\n            descr.append(charfilters[idx].toString());\n            success = true;\n          } catch (Exception e) {\n            // ignore\n          }\n        }\n      }\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a75004531a9cdf4ad1c7a295d1c822057af45b87","date":1333836028,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","sourceNew":"    private CharFilterSpec newCharFilterChain(Random random, Reader reader) {\n      CharFilterSpec spec = new CharFilterSpec();\n      spec.reader = reader;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(3);\n      for (int i = 0; i < numFilters; i++) {\n        boolean success = false;\n        while (!success) {\n          try {\n            // TODO: also look for other variants and handle them special\n            int idx = random.nextInt(charfilters.size());\n            try {\n              Constructor<? extends CharStream> c = charfilters.get(idx).getConstructor(Reader.class);\n              spec.reader = c.newInstance(spec.reader);\n            } catch (NoSuchMethodException e) {\n              Constructor<? extends CharStream> c = charfilters.get(idx).getConstructor(CharStream.class);\n              spec.reader = c.newInstance(CharReader.get(spec.reader));\n            }\n\n            if (descr.length() > 0) {\n              descr.append(\",\");\n            }\n            descr.append(charfilters.get(idx).toString());\n            success = true;\n          } catch (Exception e) {\n            // ignore\n          }\n        }\n      }\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private CharFilterSpec newCharFilterChain(Random random, Reader reader) {\n      CharFilterSpec spec = new CharFilterSpec();\n      spec.reader = reader;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(3);\n      for (int i = 0; i < numFilters; i++) {\n        boolean success = false;\n        while (!success) {\n          try {\n            // TODO: also look for other variants and handle them special\n            int idx = random.nextInt(charfilters.length);\n            try {\n              Constructor c = charfilters[idx].getConstructor(Reader.class);\n              spec.reader = (Reader) c.newInstance(spec.reader);\n            } catch (NoSuchMethodException e) {\n              Constructor c = charfilters[idx].getConstructor(CharStream.class);\n              spec.reader = (Reader) c.newInstance(CharReader.get(spec.reader));\n            }\n\n            if (descr.length() > 0) {\n              descr.append(\",\");\n            }\n            descr.append(charfilters[idx].toString());\n            success = true;\n          } catch (Exception e) {\n            // ignore\n          }\n        }\n      }\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa21364c8e74ab479dea39504ea448ac68e8708e","date":1333922163,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","sourceNew":"    private CharFilterSpec newCharFilterChain(Random random, Reader reader) {\n      CharFilterSpec spec = new CharFilterSpec();\n      spec.reader = reader;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(3);\n      for (int i = 0; i < numFilters; i++) {\n        boolean success = false;\n        while (!success) {\n          try {\n            // TODO: also look for other variants and handle them special\n            int idx = random.nextInt(charfilters.size());\n            try {\n              Constructor<? extends Reader> c = charfilters.get(idx).getConstructor(Reader.class);\n              spec.reader = c.newInstance(spec.reader);\n            } catch (NoSuchMethodException e) {\n              Constructor<? extends CharStream> c = charfilters.get(idx).getConstructor(CharStream.class);\n              spec.reader = c.newInstance(CharReader.get(spec.reader));\n            }\n\n            if (descr.length() > 0) {\n              descr.append(\",\");\n            }\n            descr.append(charfilters.get(idx).toString());\n            success = true;\n          } catch (Exception e) {\n            // ignore\n          }\n        }\n      }\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private CharFilterSpec newCharFilterChain(Random random, Reader reader) {\n      CharFilterSpec spec = new CharFilterSpec();\n      spec.reader = reader;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(3);\n      for (int i = 0; i < numFilters; i++) {\n        boolean success = false;\n        while (!success) {\n          try {\n            // TODO: also look for other variants and handle them special\n            int idx = random.nextInt(charfilters.size());\n            try {\n              Constructor<? extends CharStream> c = charfilters.get(idx).getConstructor(Reader.class);\n              spec.reader = c.newInstance(spec.reader);\n            } catch (NoSuchMethodException e) {\n              Constructor<? extends CharStream> c = charfilters.get(idx).getConstructor(CharStream.class);\n              spec.reader = c.newInstance(CharReader.get(spec.reader));\n            }\n\n            if (descr.length() > 0) {\n              descr.append(\",\");\n            }\n            descr.append(charfilters.get(idx).toString());\n            success = true;\n          } catch (Exception e) {\n            // ignore\n          }\n        }\n      }\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ed5319c68d61a6c355cc408f6b17abdcddf467fd","date":1333923008,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","sourceNew":"    private CharFilterSpec newCharFilterChain(Random random, Reader reader) {\n      CharFilterSpec spec = new CharFilterSpec();\n      spec.reader = reader;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(3);\n      for (int i = 0; i < numFilters; i++) {\n        boolean success = false;\n        while (!success) {\n          try {\n            // TODO: also look for other variants and handle them special\n            int idx = random.nextInt(charfilters.size());\n            try {\n              Constructor<? extends CharStream> c = charfilters.get(idx).getConstructor(Reader.class);\n              spec.reader = c.newInstance(spec.reader);\n            } catch (NoSuchMethodException e) {\n              Constructor<? extends CharStream> c = charfilters.get(idx).getConstructor(CharStream.class);\n              spec.reader = c.newInstance(CharReader.get(spec.reader));\n            }\n\n            if (descr.length() > 0) {\n              descr.append(\",\");\n            }\n            descr.append(charfilters.get(idx).toString());\n            success = true;\n          } catch (Exception e) {\n            // ignore\n          }\n        }\n      }\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private CharFilterSpec newCharFilterChain(Random random, Reader reader) {\n      CharFilterSpec spec = new CharFilterSpec();\n      spec.reader = reader;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(3);\n      for (int i = 0; i < numFilters; i++) {\n        boolean success = false;\n        while (!success) {\n          try {\n            // TODO: also look for other variants and handle them special\n            int idx = random.nextInt(charfilters.size());\n            try {\n              Constructor<? extends Reader> c = charfilters.get(idx).getConstructor(Reader.class);\n              spec.reader = c.newInstance(spec.reader);\n            } catch (NoSuchMethodException e) {\n              Constructor<? extends CharStream> c = charfilters.get(idx).getConstructor(CharStream.class);\n              spec.reader = c.newInstance(CharReader.get(spec.reader));\n            }\n\n            if (descr.length() > 0) {\n              descr.append(\",\");\n            }\n            descr.append(charfilters.get(idx).toString());\n            success = true;\n          } catch (Exception e) {\n            // ignore\n          }\n        }\n      }\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a92b21feea3b1b4d7ad5a06439333c4f757318f","date":1333977928,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","sourceNew":"    private CharFilterSpec newCharFilterChain(Random random, Reader reader) {\n      CharFilterSpec spec = new CharFilterSpec();\n      spec.reader = reader;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(3);\n      for (int i = 0; i < numFilters; i++) {\n        boolean success = false;\n        while (!success) {\n          try {\n            final Constructor<? extends CharStream> ctor = charfilters.get(random.nextInt(charfilters.size()));\n            final Object args[] = newCharFilterArgs(random, spec.reader, ctor.getParameterTypes());\n            spec.reader = ctor.newInstance(args);\n\n            if (descr.length() > 0) {\n              descr.append(\",\");\n            }\n            descr.append(ctor.getDeclaringClass().getName());\n            descr.append(\"(\" + Arrays.toString(args) + \")\");\n            success = true;\n          } catch (InvocationTargetException ite) {\n            final Throwable cause = ite.getCause();\n            if (cause instanceof IllegalArgumentException ||\n                cause instanceof UnsupportedOperationException) {\n              // thats ok, ignore\n              if (VERBOSE) {\n                System.err.println(\"Ignoring IAE/UOE from ctor:\");\n                cause.printStackTrace(System.err);\n              }\n            } else {\n              Rethrow.rethrow(cause);\n            }\n          } catch (IllegalAccessException iae) {\n            Rethrow.rethrow(iae);\n          } catch (InstantiationException ie) {\n            Rethrow.rethrow(ie);\n          }\n        }\n      }\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private CharFilterSpec newCharFilterChain(Random random, Reader reader) {\n      CharFilterSpec spec = new CharFilterSpec();\n      spec.reader = reader;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(3);\n      for (int i = 0; i < numFilters; i++) {\n        boolean success = false;\n        while (!success) {\n          try {\n            // TODO: also look for other variants and handle them special\n            int idx = random.nextInt(charfilters.size());\n            try {\n              Constructor<? extends CharStream> c = charfilters.get(idx).getConstructor(Reader.class);\n              spec.reader = c.newInstance(spec.reader);\n            } catch (NoSuchMethodException e) {\n              Constructor<? extends CharStream> c = charfilters.get(idx).getConstructor(CharStream.class);\n              spec.reader = c.newInstance(CharReader.get(spec.reader));\n            }\n\n            if (descr.length() > 0) {\n              descr.append(\",\");\n            }\n            descr.append(charfilters.get(idx).toString());\n            success = true;\n          } catch (Exception e) {\n            // ignore\n          }\n        }\n      }\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1f4dc85b409fc5f00183c0cafb53ab47621e5eb","date":1333990334,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","sourceNew":"    private CharFilterSpec newCharFilterChain(Random random, Reader reader) {\n      CharFilterSpec spec = new CharFilterSpec();\n      spec.reader = reader;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(3);\n      for (int i = 0; i < numFilters; i++) {\n        boolean success = false;\n        while (!success) {\n          final Constructor<? extends CharStream> ctor = charfilters.get(random.nextInt(charfilters.size()));\n          final Object args[] = newCharFilterArgs(random, spec.reader, ctor.getParameterTypes());\n          reader = createComponent(ctor, args, descr);\n          if (reader != null) {\n            success = true;\n            spec.reader = reader;\n          }\n        }\n      }\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private CharFilterSpec newCharFilterChain(Random random, Reader reader) {\n      CharFilterSpec spec = new CharFilterSpec();\n      spec.reader = reader;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(3);\n      for (int i = 0; i < numFilters; i++) {\n        boolean success = false;\n        while (!success) {\n          try {\n            final Constructor<? extends CharStream> ctor = charfilters.get(random.nextInt(charfilters.size()));\n            final Object args[] = newCharFilterArgs(random, spec.reader, ctor.getParameterTypes());\n            spec.reader = ctor.newInstance(args);\n\n            if (descr.length() > 0) {\n              descr.append(\",\");\n            }\n            descr.append(ctor.getDeclaringClass().getName());\n            descr.append(\"(\" + Arrays.toString(args) + \")\");\n            success = true;\n          } catch (InvocationTargetException ite) {\n            final Throwable cause = ite.getCause();\n            if (cause instanceof IllegalArgumentException ||\n                cause instanceof UnsupportedOperationException) {\n              // thats ok, ignore\n              if (VERBOSE) {\n                System.err.println(\"Ignoring IAE/UOE from ctor:\");\n                cause.printStackTrace(System.err);\n              }\n            } else {\n              Rethrow.rethrow(cause);\n            }\n          } catch (IllegalAccessException iae) {\n            Rethrow.rethrow(iae);\n          } catch (InstantiationException ie) {\n            Rethrow.rethrow(ie);\n          }\n        }\n      }\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66c70960e9f3c71ba43a0a8a00c4caded28d4dd5","date":1333990595,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","sourceNew":"    private CharFilterSpec newCharFilterChain(Random random, Reader reader) {\n      CharFilterSpec spec = new CharFilterSpec();\n      spec.reader = reader;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(3);\n      for (int i = 0; i < numFilters; i++) {\n        while (true) {\n          final Constructor<? extends CharStream> ctor = charfilters.get(random.nextInt(charfilters.size()));\n          final Object args[] = newCharFilterArgs(random, spec.reader, ctor.getParameterTypes());\n          reader = createComponent(ctor, args, descr);\n          if (reader != null) {\n            spec.reader = reader;\n            break;\n          }\n        }\n      }\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private CharFilterSpec newCharFilterChain(Random random, Reader reader) {\n      CharFilterSpec spec = new CharFilterSpec();\n      spec.reader = reader;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(3);\n      for (int i = 0; i < numFilters; i++) {\n        boolean success = false;\n        while (!success) {\n          final Constructor<? extends CharStream> ctor = charfilters.get(random.nextInt(charfilters.size()));\n          final Object args[] = newCharFilterArgs(random, spec.reader, ctor.getParameterTypes());\n          reader = createComponent(ctor, args, descr);\n          if (reader != null) {\n            success = true;\n            spec.reader = reader;\n          }\n        }\n      }\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","sourceNew":"    private CharFilterSpec newCharFilterChain(Random random, Reader reader) {\n      CharFilterSpec spec = new CharFilterSpec();\n      spec.reader = reader;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(3);\n      for (int i = 0; i < numFilters; i++) {\n        while (true) {\n          final Constructor<? extends CharStream> ctor = charfilters.get(random.nextInt(charfilters.size()));\n          final Object args[] = newCharFilterArgs(random, spec.reader, ctor.getParameterTypes());\n          reader = createComponent(ctor, args, descr);\n          if (reader != null) {\n            spec.reader = reader;\n            break;\n          }\n        }\n      }\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private CharFilterSpec newCharFilterChain(Random random, Reader reader) {\n      CharFilterSpec spec = new CharFilterSpec();\n      spec.reader = reader;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(3);\n      for (int i = 0; i < numFilters; i++) {\n        boolean success = false;\n        while (!success) {\n          try {\n            // TODO: also look for other variants and handle them special\n            int idx = random.nextInt(charfilters.size());\n            try {\n              Constructor<? extends CharStream> c = charfilters.get(idx).getConstructor(Reader.class);\n              spec.reader = c.newInstance(spec.reader);\n            } catch (NoSuchMethodException e) {\n              Constructor<? extends CharStream> c = charfilters.get(idx).getConstructor(CharStream.class);\n              spec.reader = c.newInstance(CharReader.get(spec.reader));\n            }\n\n            if (descr.length() > 0) {\n              descr.append(\",\");\n            }\n            descr.append(charfilters.get(idx).toString());\n            success = true;\n          } catch (Exception e) {\n            // ignore\n          }\n        }\n      }\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":["ed5319c68d61a6c355cc408f6b17abdcddf467fd","a75004531a9cdf4ad1c7a295d1c822057af45b87","2b9812246deee2216de0db0ea556e1ff163f5793"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newCharFilterChain(Random,Reader).mjava","sourceNew":"    private CharFilterSpec newCharFilterChain(Random random, Reader reader) {\n      CharFilterSpec spec = new CharFilterSpec();\n      spec.reader = reader;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(3);\n      for (int i = 0; i < numFilters; i++) {\n        while (true) {\n          final Constructor<? extends CharStream> ctor = charfilters.get(random.nextInt(charfilters.size()));\n          final Object args[] = newCharFilterArgs(random, spec.reader, ctor.getParameterTypes());\n          reader = createComponent(ctor, args, descr);\n          if (reader != null) {\n            spec.reader = reader;\n            break;\n          }\n        }\n      }\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private CharFilterSpec newCharFilterChain(Random random, Reader reader) {\n      CharFilterSpec spec = new CharFilterSpec();\n      spec.reader = reader;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(3);\n      for (int i = 0; i < numFilters; i++) {\n        while (true) {\n          final Constructor<? extends CharStream> ctor = charfilters.get(random.nextInt(charfilters.size()));\n          final Object args[] = newCharFilterArgs(random, spec.reader, ctor.getParameterTypes());\n          reader = createComponent(ctor, args, descr);\n          if (reader != null) {\n            spec.reader = reader;\n            break;\n          }\n        }\n      }\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"d1f4dc85b409fc5f00183c0cafb53ab47621e5eb":["5a92b21feea3b1b4d7ad5a06439333c4f757318f"],"a75004531a9cdf4ad1c7a295d1c822057af45b87":["2b9812246deee2216de0db0ea556e1ff163f5793"],"66c70960e9f3c71ba43a0a8a00c4caded28d4dd5":["d1f4dc85b409fc5f00183c0cafb53ab47621e5eb"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["ed5319c68d61a6c355cc408f6b17abdcddf467fd","66c70960e9f3c71ba43a0a8a00c4caded28d4dd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ed5319c68d61a6c355cc408f6b17abdcddf467fd":["fa21364c8e74ab479dea39504ea448ac68e8708e"],"2b9812246deee2216de0db0ea556e1ff163f5793":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fa21364c8e74ab479dea39504ea448ac68e8708e":["a75004531a9cdf4ad1c7a295d1c822057af45b87"],"5a92b21feea3b1b4d7ad5a06439333c4f757318f":["ed5319c68d61a6c355cc408f6b17abdcddf467fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1f4dc85b409fc5f00183c0cafb53ab47621e5eb":["66c70960e9f3c71ba43a0a8a00c4caded28d4dd5"],"a75004531a9cdf4ad1c7a295d1c822057af45b87":["fa21364c8e74ab479dea39504ea448ac68e8708e"],"66c70960e9f3c71ba43a0a8a00c4caded28d4dd5":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2b9812246deee2216de0db0ea556e1ff163f5793"],"ed5319c68d61a6c355cc408f6b17abdcddf467fd":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","5a92b21feea3b1b4d7ad5a06439333c4f757318f"],"2b9812246deee2216de0db0ea556e1ff163f5793":["a75004531a9cdf4ad1c7a295d1c822057af45b87"],"5a92b21feea3b1b4d7ad5a06439333c4f757318f":["d1f4dc85b409fc5f00183c0cafb53ab47621e5eb"],"fa21364c8e74ab479dea39504ea448ac68e8708e":["ed5319c68d61a6c355cc408f6b17abdcddf467fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}