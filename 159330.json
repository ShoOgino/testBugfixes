{"path":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(newRandom(),\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(newRandom(),\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(newField(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = newField(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(newField(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = newField(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(newField(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = newField(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(newField(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = newField(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(newField(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = newField(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(newField(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = newField(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(new Field(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = new Field(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(newField(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = newField(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(newField(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = newField(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(newField(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = newField(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(newField(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = newField(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(newField(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = newField(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(newField(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = newField(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(newField(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = newField(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(newField(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = newField(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(newField(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = newField(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setIndexOptions(IndexOptions.DOCS_ONLY);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should not be set for f1\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should be set for f2\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(newField(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = newField(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertFalse(\"omitTermFreqAndPositions field bit should not be set for f1\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertTrue(\"omitTermFreqAndPositions field bit should be set for f2\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    doc.add(newField(\"f1\", \"v1\", customType));\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 has no TF\n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field f = newField(\"f2\", \"v1\", customType3);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", customType2));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should not be set for f1\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should be set for f2\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    doc.add(newField(\"f1\", \"v1\", Store.NO, Index.ANALYZED_NO_NORMS));\n    doc.add(newField(\"f1\", \"v2\", Store.YES, Index.NO));\n    // f2 has no TF\n    Field f = newField(\"f2\", \"v1\", Store.NO, Index.ANALYZED);\n    f.setIndexOptions(IndexOptions.DOCS_ONLY);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", Store.YES, Index.NO));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should not be set for f1\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should be set for f2\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    doc.add(newField(\"f1\", \"v1\", customType));\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 has no TF\n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field f = newField(\"f2\", \"v1\", customType3);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", customType2));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.forceMerge(1); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should not be set for f1\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should be set for f2\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    doc.add(newField(\"f1\", \"v1\", customType));\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 has no TF\n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field f = newField(\"f2\", \"v1\", customType3);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", customType2));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.optimize(); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should not be set for f1\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should be set for f2\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    doc.add(newField(\"f1\", \"v1\", customType));\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 has no TF\n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field f = newField(\"f2\", \"v1\", customType3);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", customType2));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.forceMerge(1); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should not be set for f1\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should be set for f2\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    doc.add(newField(\"f1\", \"v1\", customType));\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 has no TF\n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field f = newField(\"f2\", \"v1\", customType3);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", customType2));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.forceMerge(1); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should not be set for f1\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should be set for f2\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    doc.add(newField(\"f1\", \"v1\", customType));\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 has no TF\n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field f = newField(\"f2\", \"v1\", customType3);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", customType2));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.forceMerge(1); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should not be set for f1\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should be set for f2\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    doc.add(newField(\"f1\", \"v1\", customType));\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 has no TF\n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field f = newField(\"f2\", \"v1\", customType3);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", customType2));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.forceMerge(1); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should not be set for f1\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should be set for f2\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    doc.add(newField(\"f1\", \"v1\", customType));\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 has no TF\n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field f = newField(\"f2\", \"v1\", customType3);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", customType2));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.forceMerge(1); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should not be set for f1\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should be set for f2\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    doc.add(newField(\"f1\", \"v1\", customType));\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 has no TF\n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field f = newField(\"f2\", \"v1\", customType3);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", customType2));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.forceMerge(1); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should not be set for f1\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should be set for f2\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    doc.add(newField(\"f1\", \"v1\", customType));\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 has no TF\n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field f = newField(\"f2\", \"v1\", customType3);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", customType2));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.forceMerge(1); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    FieldInfos fi = reader.getFieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should not be set for f1\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should be set for f2\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    doc.add(newField(\"f1\", \"v1\", customType));\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 has no TF\n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field f = newField(\"f2\", \"v1\", customType3);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", customType2));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.forceMerge(1); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    FieldInfos fi = reader.fieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should not be set for f1\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should be set for f2\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testLUCENE_1590().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    doc.add(newField(\"f1\", \"v1\", customType));\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 has no TF\n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field f = newField(\"f2\", \"v1\", customType3);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", customType2));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.forceMerge(1); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    FieldInfos fi = reader.getFieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should not be set for f1\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should be set for f2\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, one indexed\n   * the other stored only. The omitNorms and omitTermFreqAndPositions setting\n   * of the stored field should not affect the indexed one (LUCENE-1590)\n   */\n  public void testLUCENE_1590() throws Exception {\n    Document doc = new Document();\n    // f1 has no norms\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    doc.add(newField(\"f1\", \"v1\", customType));\n    doc.add(newField(\"f1\", \"v2\", customType2));\n    // f2 has no TF\n    FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n    customType3.setIndexOptions(IndexOptions.DOCS_ONLY);\n    Field f = newField(\"f2\", \"v1\", customType3);\n    doc.add(f);\n    doc.add(newField(\"f2\", \"v2\", customType2));\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(doc);\n    writer.forceMerge(1); // be sure to have a single segment\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    FieldInfos fi = reader.getFieldInfos();\n    // f1\n    assertFalse(\"f1 should have no norms\", reader.hasNorms(\"f1\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should not be set for f1\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    // f2\n    assertTrue(\"f2 should have norms\", reader.hasNorms(\"f2\"));\n    assertEquals(\"omitTermFreqAndPositions field bit should be set for f2\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}