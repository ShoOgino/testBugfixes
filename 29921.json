{"path":"lucene/src/test-framework/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f504eb84bde3aa0d1d67d3b08172306897f39a9","date":1298592942,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n      Assert.assertTrue(\"Explanation of [[\"+d+\"]] for #\"+ doc + \n                        \" does not indicate match: \" + exp.toString(), \n                        exp.isMatch());\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfd60688653855da1a42cd89a1df4e6738ac079","date":1298618289,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n      Assert.assertTrue(\"Explanation of [[\"+d+\"]] for #\"+ doc + \n                        \" does not indicate match: \" + exp.toString(), \n                        exp.isMatch());\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n      Assert.assertTrue(\"Explanation of [[\"+d+\"]] for #\"+ doc + \n                        \" does not indicate match: \" + exp.toString(), \n                        exp.isMatch());\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/CheckHits.ExplanationAsserter#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n      Assert.assertTrue(\"Explanation of [[\"+d+\"]] for #\"+ doc + \n                        \" does not indicate match: \" + exp.toString(), \n                        exp.isMatch());\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      Explanation exp = null;\n      doc = doc + base;\n      try {\n        exp = s.explain(q, doc);\n      } catch (IOException e) {\n        throw new RuntimeException\n          (\"exception in hitcollector of [[\"+d+\"]] for #\"+doc, e);\n      }\n      \n      Assert.assertNotNull(\"Explanation of [[\"+d+\"]] for #\"+doc+\" is null\", exp);\n      verifyExplanation(d,doc,scorer.score(),deep,exp);\n      Assert.assertTrue(\"Explanation of [[\"+d+\"]] for #\"+ doc + \n                        \" does not indicate match: \" + exp.toString(), \n                        exp.isMatch());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["9f504eb84bde3aa0d1d67d3b08172306897f39a9"],"9f504eb84bde3aa0d1d67d3b08172306897f39a9":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","9f504eb84bde3aa0d1d67d3b08172306897f39a9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfd60688653855da1a42cd89a1df4e6738ac079":["bde51b089eb7f86171eb3406e38a274743f9b7ac","9f504eb84bde3aa0d1d67d3b08172306897f39a9"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9f504eb84bde3aa0d1d67d3b08172306897f39a9":["7b91922b55d15444d554721b352861d028eb8278","d619839baa8ce5503e496b94a9e42ad6f079293f","2dfd60688653855da1a42cd89a1df4e6738ac079"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"2dfd60688653855da1a42cd89a1df4e6738ac079":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["2dfd60688653855da1a42cd89a1df4e6738ac079"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["9f504eb84bde3aa0d1d67d3b08172306897f39a9","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d619839baa8ce5503e496b94a9e42ad6f079293f","2dfd60688653855da1a42cd89a1df4e6738ac079","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}