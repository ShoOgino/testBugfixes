{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#createRangeList().mjava","commits":[{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#createRangeList().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#createRangeList().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void createRangeList() throws IOException {\n\n    rangeList = new ArrayList<>();\n    otherList = new ArrayList<>(3);\n\n    Comparable low = start;\n    Comparable loop_end = this.end;\n\n    if (ranges != null) {\n      rangeList.addAll(parseRanges(ranges));\n      return;\n    }\n\n    while (low.compareTo(end) < 0) {\n      Comparable high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = loop_end;\n        } else {\n          loop_end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high);\n      }\n\n      boolean incLower = (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n          (include.contains(FacetParams.FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n      boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n          (include.contains(FacetParams.FacetRangeInclude.EDGE) && 0 == high.compareTo(end)));\n\n      Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n      rangeList.add( range );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetParams.FacetRangeOther.NONE) ) {\n      final boolean all = freq.others.contains(FacetParams.FacetRangeOther.ALL);\n\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BEFORE)) {\n        otherList.add( buildBeforeRange() );\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.AFTER)) {\n        actual_end = loop_end;\n        otherList.add( buildAfterRange() );\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BETWEEN)) {\n        actual_end = loop_end;\n        otherList.add( buildBetweenRange() );\n      }\n    }\n    // if we're not a shard request, or this is a hardend:true situation, then actual_end isn't needed\n    if (freq.hardend || (! fcontext.isShard())) {\n      actual_end = null;\n    }\n  }\n\n","sourceOld":"  private void createRangeList() throws IOException {\n\n    rangeList = new ArrayList<>();\n    otherList = new ArrayList<>(3);\n\n    Comparable low = start;\n    Comparable loop_end = this.end;\n\n    if (ranges != null) {\n      rangeList.addAll(parseRanges(ranges));\n      return;\n    }\n\n    while (low.compareTo(end) < 0) {\n      Comparable high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = loop_end;\n        } else {\n          loop_end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high);\n      }\n\n      boolean incLower = (include.contains(FacetRangeInclude.LOWER) ||\n          (include.contains(FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n      boolean incUpper = (include.contains(FacetRangeInclude.UPPER) ||\n          (include.contains(FacetRangeInclude.EDGE) && 0 == high.compareTo(end)));\n\n      Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n      rangeList.add( range );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetRangeOther.NONE) ) {\n      final boolean all = freq.others.contains(FacetRangeOther.ALL);\n\n      if (all || freq.others.contains(FacetRangeOther.BEFORE)) {\n        otherList.add( buildBeforeRange() );\n      }\n      if (all || freq.others.contains(FacetRangeOther.AFTER)) {\n        actual_end = loop_end;\n        otherList.add( buildAfterRange() );\n      }\n      if (all || freq.others.contains(FacetRangeOther.BETWEEN)) {\n        actual_end = loop_end;\n        otherList.add( buildBetweenRange() );\n      }\n    }\n    // if we're not a shard request, or this is a hardend:true situation, then actual_end isn't needed\n    if (freq.hardend || (! fcontext.isShard())) {\n      actual_end = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}