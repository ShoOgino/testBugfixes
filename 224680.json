{"path":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#getDirectory(Path).mjava","commits":[{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#getDirectory(Path).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#getDirectory(Path).mjava","sourceNew":"  @Override\n  protected Directory getDirectory(Path path) throws IOException {\n    final MockDirectoryWrapper dir;\n    if (random().nextBoolean()) {\n      dir = newMockDirectory();\n    } else {\n      dir = newMockFSDirectory(path);\n    }\n    dir.setEnableVirusScanner(false); // test manipulates filesystem directly\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory getDirectory(Path path) throws IOException {\n    final Directory dir;\n    if (random().nextBoolean()) {\n      dir = newDirectory();\n    } else {\n      dir = newFSDirectory(path);\n    }\n    if (dir instanceof MockDirectoryWrapper) {\n      // test manipulates directory directly\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#getDirectory(Path).mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#getDirectory(Path).mjava","sourceNew":"  @Override\n  protected Directory getDirectory(Path path) throws IOException {\n    final MockDirectoryWrapper dir;\n    if (random().nextBoolean()) {\n      dir = newMockDirectory();\n    } else {\n      dir = newMockFSDirectory(path);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory getDirectory(Path path) throws IOException {\n    final MockDirectoryWrapper dir;\n    if (random().nextBoolean()) {\n      dir = newMockDirectory();\n    } else {\n      dir = newMockFSDirectory(path);\n    }\n    dir.setEnableVirusScanner(false); // test manipulates filesystem directly\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#getDirectory(Path).mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#getDirectory(Path).mjava","sourceNew":"  @Override\n  protected Directory getDirectory(Path path) throws IOException {\n    final MockDirectoryWrapper dir;\n    if (random().nextBoolean()) {\n      dir = newMockDirectory();\n    } else {\n      dir = newMockFSDirectory(path);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory getDirectory(Path path) throws IOException {\n    final MockDirectoryWrapper dir;\n    if (random().nextBoolean()) {\n      dir = newMockDirectory();\n    } else {\n      dir = newMockFSDirectory(path);\n    }\n    dir.setEnableVirusScanner(false); // test manipulates filesystem directly\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#getDirectory(Path).mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#getDirectory(Path).mjava","sourceNew":"  @Override\n  protected Directory getDirectory(Path path) throws IOException {\n    final MockDirectoryWrapper dir;\n    if (random().nextBoolean()) {\n      dir = newMockDirectory();\n    } else {\n      dir = newMockFSDirectory(path);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory getDirectory(Path path) throws IOException {\n    final MockDirectoryWrapper dir;\n    if (random().nextBoolean()) {\n      dir = newMockDirectory();\n    } else {\n      dir = newMockFSDirectory(path);\n    }\n    dir.setEnableVirusScanner(false); // test manipulates filesystem directly\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#getDirectory(Path).mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#getDirectory(Path).mjava","sourceNew":"  @Override\n  protected Directory getDirectory(Path path) throws IOException {\n    final MockDirectoryWrapper dir;\n    if (random().nextBoolean()) {\n      dir = newMockDirectory();\n    } else {\n      dir = newMockFSDirectory(path);\n    }\n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory getDirectory(Path path) throws IOException {\n    final MockDirectoryWrapper dir;\n    if (random().nextBoolean()) {\n      dir = newMockDirectory();\n    } else {\n      dir = newMockFSDirectory(path);\n    }\n    dir.setEnableVirusScanner(false); // test manipulates filesystem directly\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a207d19eac354d649c3f0e2cce070017c78125e":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","b470f36a9372c97283360b1304eacbde22df6c0d"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}