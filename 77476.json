{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","sourceNew":"  /**\n   * Task tearDown work that should not be measured for that specific task. By\n   * default it does nothing, but tasks can implement this, moving work from\n   * {@link #doLogic()} to this method. Only the work done in {@link #doLogic()}\n   * is measured for this task. Notice that higher level (sequence) tasks\n   * containing this task would then measure larger time than the sum of their\n   * contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(\"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","sourceOld":"  /**\n   * Task tearDown work that should not be measured for that specific task. By\n   * default it does nothing, but tasks can implement this, moving work from\n   * {@link #doLogic()} to this method. Only the work done in {@link #doLogic()}\n   * is measured for this task. Notice that higher level (sequence) tasks\n   * containing this task would then measure larger time than the sum of their\n   * contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(\"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","date":1341673943,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","sourceNew":"  /**\n   * Task tearDown work that should not be measured for that specific task. By\n   * default it does nothing, but tasks can implement this, moving work from\n   * {@link #doLogic()} to this method. Only the work done in {@link #doLogic()}\n   * is measured for this task. Notice that higher level (sequence) tasks\n   * containing this task would then measure larger time than the sum of their\n   * contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(Locale.ROOT, \"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","sourceOld":"  /**\n   * Task tearDown work that should not be measured for that specific task. By\n   * default it does nothing, but tasks can implement this, moving work from\n   * {@link #doLogic()} to this method. Only the work done in {@link #doLogic()}\n   * is measured for this task. Notice that higher level (sequence) tasks\n   * containing this task would then measure larger time than the sum of their\n   * contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(\"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","sourceNew":"  /**\n   * Task tearDown work that should not be measured for that specific task. By\n   * default it does nothing, but tasks can implement this, moving work from\n   * {@link #doLogic()} to this method. Only the work done in {@link #doLogic()}\n   * is measured for this task. Notice that higher level (sequence) tasks\n   * containing this task would then measure larger time than the sum of their\n   * contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(Locale.ROOT, \"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","sourceOld":"  /**\n   * Task tearDown work that should not be measured for that specific task. By\n   * default it does nothing, but tasks can implement this, moving work from\n   * {@link #doLogic()} to this method. Only the work done in {@link #doLogic()}\n   * is measured for this task. Notice that higher level (sequence) tasks\n   * containing this task would then measure larger time than the sum of their\n   * contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(\"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","sourceNew":"  /**\n   * Task tearDown work that should not be measured for that specific task. By\n   * default it does nothing, but tasks can implement this, moving work from\n   * {@link #doLogic()} to this method. Only the work done in {@link #doLogic()}\n   * is measured for this task. Notice that higher level (sequence) tasks\n   * containing this task would then measure larger time than the sum of their\n   * contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(Locale.ROOT, \"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","sourceOld":"  /**\n   * Task tearDown work that should not be measured for that specific task. By\n   * default it does nothing, but tasks can implement this, moving work from\n   * {@link #doLogic()} to this method. Only the work done in {@link #doLogic()}\n   * is measured for this task. Notice that higher level (sequence) tasks\n   * containing this task would then measure larger time than the sum of their\n   * contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(\"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","sourceNew":"  /**\n   * Task tearDown work that should not be measured for that specific task. By\n   * default it does nothing, but tasks can implement this, moving work from\n   * {@link #doLogic()} to this method. Only the work done in {@link #doLogic()}\n   * is measured for this task. Notice that higher level (sequence) tasks\n   * containing this task would then measure larger time than the sum of their\n   * contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(Locale.ROOT, \"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","sourceOld":"  /**\n   * Task tearDown work that should not be measured for that specific task. By\n   * default it does nothing, but tasks can implement this, moving work from\n   * {@link #doLogic()} to this method. Only the work done in {@link #doLogic()}\n   * is measured for this task. Notice that higher level (sequence) tasks\n   * containing this task would then measure larger time than the sum of their\n   * contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(\"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}