{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":"  /**\n   *\n   * @param name name of the condition\n   * @param val value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Double.class) {\n      Double num = parseDouble(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (Double.compare(num, (Double) info.min) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (Double.compare(num, (Double) info.max) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == Long.class) {\n      Long num = parseLong(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","sourceOld":"  /**\n   *\n   * @param name name of the condition\n   * @param val value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Double.class) {\n      Double num = parseDouble(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (Double.compare(num, (Double) info.min) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (Double.compare(num, (Double) info.max) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == Long.class) {\n      Long num = parseLong(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Double.class) {\n      Double num = parseDouble(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (Double.compare(num, (Double) info.min) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (Double.compare(num, (Double) info.max) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == Long.class) {\n      Long num = parseLong(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","sourceOld":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Double.class) {\n      Double num = parseDouble(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (Double.compare(num, (Double) info.min) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (Double.compare(num, (Double) info.max) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == Long.class) {\n      Long num = parseLong(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *\n   * @param name name of the condition\n   * @param val value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Double.class) {\n      Double num = parseDouble(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (Double.compare(num, (Double) info.min) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (Double.compare(num, (Double) info.max) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == Long.class) {\n      Long num = parseLong(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7811b56f2d9e37eb839450d346535c87f1f504c2","date":1502459873,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object  validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = getValidator(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","sourceOld":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Double.class) {\n      Double num = parseDouble(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (Double.compare(num, (Double) info.min) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (Double.compare(num, (Double) info.max) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == Long.class) {\n      Long num = parseLong(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object  validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = getValidator(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","sourceOld":"  /**\n   *\n   * @param name name of the condition\n   * @param val value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Double.class) {\n      Double num = parseDouble(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (Double.compare(num, (Double) info.min) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (Double.compare(num, (Double) info.max) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == Long.class) {\n      Long num = parseLong(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object  validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = getValidator(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","sourceOld":"  /**\n   *\n   * @param name name of the condition\n   * @param val value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    if (info.type == Double.class) {\n      Double num = parseDouble(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (Double.compare(num, (Double) info.min) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (Double.compare(num, (Double) info.max) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == Long.class) {\n      Long num = parseLong(name, val);\n      if (isRuleVal) {\n        if (info.min != null)\n          if (num < info.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + info.min);\n        if (info.max != null)\n          if (num > info.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + info.max);\n      }\n      return num;\n    } else if (info.type == String.class) {\n      if (isRuleVal && info.vals != null && !info.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(info.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object  validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    Suggestion.ConditionType info = Suggestion.getTagType(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","sourceOld":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object  validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ValidateInfo info = getValidator(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object  validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ConditionType info = Suggestion.getTagType(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","sourceOld":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object  validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    Suggestion.ConditionType info = Suggestion.getTagType(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object  validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    Suggestion.ConditionType info = Suggestion.getTagType(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","sourceOld":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object  validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ConditionType info = Suggestion.getTagType(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object  validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ConditionType info = Suggestion.getTagType(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","sourceOld":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object  validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    Suggestion.ConditionType info = Suggestion.getTagType(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object  validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ConditionType info = Suggestion.getTagType(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","sourceOld":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object  validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    Suggestion.ConditionType info = Suggestion.getTagType(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object  validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    Type info = VariableBase.getTagType(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","sourceOld":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object  validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    ConditionType info = Suggestion.getTagType(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    Type info = VariableBase.getTagType(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","sourceOld":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object  validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    Type info = VariableBase.getTagType(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    Type info = VariableBase.getTagType(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","sourceOld":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object  validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    Type info = VariableBase.getTagType(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#validate(String,Object,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param name      name of the condition\n   * @param val       value of the condition\n   * @param isRuleVal is this provided in the rule\n   * @return actual validated value\n   */\n  public static Object validate(String name, Object val, boolean isRuleVal) {\n    if (val == null) return null;\n    Type info = VariableBase.getTagType(name);\n    if (info == null) throw new RuntimeException(\"Unknown type :\" + name);\n    return info.validate(name, val, isRuleVal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","7811b56f2d9e37eb839450d346535c87f1f504c2"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"78231225260fb5b3bf9920f203d71477d5501c65":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1bbcda32e5cd37ef61ea1190bacd080308e22070","8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"7811b56f2d9e37eb839450d346535c87f1f504c2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["427edb17549d4bb82462a16eec4ee0533d12d5b7","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","427edb17549d4bb82462a16eec4ee0533d12d5b7"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"7811b56f2d9e37eb839450d346535c87f1f504c2":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["3f504512a03d978990cbff30db0522b354e846db","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["78231225260fb5b3bf9920f203d71477d5501c65","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"98f11c416d30e556e0004a9a84960702d12d35b1":["7811b56f2d9e37eb839450d346535c87f1f504c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}