{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#closableCompressorInputStream(String,InputStream).mjava","commits":[{"id":"e13cbdcbf4f1d6970554a8496fbb1d9a92f23c3c","date":1300880334,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#closableCompressorInputStream(String,InputStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wrap the compressor input stream so that calling close will also close\n   * the underlying stream - workaround for CommonsCompress bug (COMPRESS-127). \n   */\n  private InputStream closableCompressorInputStream(String type, final InputStream is) throws CompressorException {\n    final InputStream delegee = csFactory.createCompressorInputStream(type, is);\n    if (!type.equals(CompressorStreamFactory.GZIP)) {\n    \treturn delegee; //compressor bug affects only gzip\n    }\n    return new InputStream() {\n\t\t\t@Override\tpublic int read() throws IOException { return delegee.read();\t}\n\t\t\t@Override\tpublic int read(byte[] b) throws IOException { return delegee.read(b);\t}\n\t\t\t@Override\tpublic int available() throws IOException {\treturn delegee.available();\t}\n\t\t\t@Override\tpublic synchronized void mark(int readlimit) { delegee.mark(readlimit);\t}\n\t\t\t@Override\tpublic boolean markSupported() { return delegee.markSupported(); }\n\t\t\t@Override\tpublic int read(byte[] b, int off, int len) throws IOException { return delegee.read(b, off, len); }\n\t\t\t@Override\tpublic synchronized void reset() throws IOException {\tdelegee.reset(); }\n\t\t\t@Override\tpublic long skip(long n) throws IOException {\treturn delegee.skip(n);\t}\n\t\t\t@Override\t\n\t\t\tpublic void close() throws IOException { \n\t\t\t\tdelegee.close();\n\t\t\t\tis.close();\n\t\t\t}\n    };\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2944372726ed00fc05229687367002194c6c81","date":1300969333,"type":5,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StreamUtils#closableCompressorInputStream(Type,InputStream).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#closableCompressorInputStream(String,InputStream).mjava","sourceNew":"  /**\n   * Wrap the compressor input stream so that calling close will also close\n   * the underlying stream - workaround for CommonsCompress bug (COMPRESS-127). \n   */\n  private static InputStream closableCompressorInputStream(Type type, final InputStream is) throws CompressorException {\n    final InputStream delegee = new CompressorStreamFactory().createCompressorInputStream(type.csfType, is);\n    if (!Type.GZIP.equals(type)) {\n      return delegee; //compressor bug affects only gzip\n    }\n    return new InputStream() {\n\t\t\t@Override\tpublic int read() throws IOException { return delegee.read();\t}\n\t\t\t@Override\tpublic int read(byte[] b) throws IOException { return delegee.read(b);\t}\n\t\t\t@Override\tpublic int available() throws IOException {\treturn delegee.available();\t}\n\t\t\t@Override\tpublic synchronized void mark(int readlimit) { delegee.mark(readlimit);\t}\n\t\t\t@Override\tpublic boolean markSupported() { return delegee.markSupported(); }\n\t\t\t@Override\tpublic int read(byte[] b, int off, int len) throws IOException { return delegee.read(b, off, len); }\n\t\t\t@Override\tpublic synchronized void reset() throws IOException {\tdelegee.reset(); }\n\t\t\t@Override\tpublic long skip(long n) throws IOException {\treturn delegee.skip(n);\t}\n\t\t\t@Override\t\n\t\t\tpublic void close() throws IOException { \n\t\t\t\tdelegee.close();\n\t\t\t\tis.close();\n\t\t\t}\n    };\n\t}\n\n","sourceOld":"  /**\n   * Wrap the compressor input stream so that calling close will also close\n   * the underlying stream - workaround for CommonsCompress bug (COMPRESS-127). \n   */\n  private InputStream closableCompressorInputStream(String type, final InputStream is) throws CompressorException {\n    final InputStream delegee = csFactory.createCompressorInputStream(type, is);\n    if (!type.equals(CompressorStreamFactory.GZIP)) {\n    \treturn delegee; //compressor bug affects only gzip\n    }\n    return new InputStream() {\n\t\t\t@Override\tpublic int read() throws IOException { return delegee.read();\t}\n\t\t\t@Override\tpublic int read(byte[] b) throws IOException { return delegee.read(b);\t}\n\t\t\t@Override\tpublic int available() throws IOException {\treturn delegee.available();\t}\n\t\t\t@Override\tpublic synchronized void mark(int readlimit) { delegee.mark(readlimit);\t}\n\t\t\t@Override\tpublic boolean markSupported() { return delegee.markSupported(); }\n\t\t\t@Override\tpublic int read(byte[] b, int off, int len) throws IOException { return delegee.read(b, off, len); }\n\t\t\t@Override\tpublic synchronized void reset() throws IOException {\tdelegee.reset(); }\n\t\t\t@Override\tpublic long skip(long n) throws IOException {\treturn delegee.skip(n);\t}\n\t\t\t@Override\t\n\t\t\tpublic void close() throws IOException { \n\t\t\t\tdelegee.close();\n\t\t\t\tis.close();\n\t\t\t}\n    };\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e13cbdcbf4f1d6970554a8496fbb1d9a92f23c3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e2944372726ed00fc05229687367002194c6c81"],"6e2944372726ed00fc05229687367002194c6c81":["e13cbdcbf4f1d6970554a8496fbb1d9a92f23c3c"]},"commit2Childs":{"e13cbdcbf4f1d6970554a8496fbb1d9a92f23c3c":["6e2944372726ed00fc05229687367002194c6c81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e13cbdcbf4f1d6970554a8496fbb1d9a92f23c3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6e2944372726ed00fc05229687367002194c6c81":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}