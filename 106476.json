{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitMixedReplicaTypes().mjava","commits":[{"id":"685af99397b6da31116a2cac747ed255d217d080","date":1530038134,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitMixedReplicaTypes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSplitMixedReplicaTypes() throws Exception {\n    waitForThingsToLevelOut(15);\n    String collectionName = \"testSplitMixedReplicaTypes\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2, 2, 2);\n    create.setMaxShardsPerNode(5); // some high number so we can create replicas without hindrance\n    create.process(cloudClient);\n    waitForRecoveriesToFinish(collectionName, false);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n    splitShard.setShardName(SHARD1);\n    splitShard.process(cloudClient);\n    waitForThingsToLevelOut(15);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    log.info(\"coll: \" + coll);\n\n    // verify the original shard\n    verifyShard(coll, SHARD1, Slice.State.INACTIVE, 2, 2, 2);\n    // verify new sub-shards\n    verifyShard(coll, SHARD1_0, Slice.State.ACTIVE, 2, 2, 2);\n    verifyShard(coll, SHARD1_1, Slice.State.ACTIVE, 2, 2, 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitMixedReplicaTypes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSplitMixedReplicaTypes() throws Exception {\n    waitForThingsToLevelOut(15);\n    String collectionName = \"testSplitMixedReplicaTypes\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2, 2, 2);\n    create.setMaxShardsPerNode(5); // some high number so we can create replicas without hindrance\n    create.process(cloudClient);\n    waitForRecoveriesToFinish(collectionName, false);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n    splitShard.setShardName(SHARD1);\n    splitShard.process(cloudClient);\n    waitForThingsToLevelOut(15);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    log.info(\"coll: \" + coll);\n\n    // verify the original shard\n    verifyShard(coll, SHARD1, Slice.State.INACTIVE, 2, 2, 2);\n    // verify new sub-shards\n    verifyShard(coll, SHARD1_0, Slice.State.ACTIVE, 2, 2, 2);\n    verifyShard(coll, SHARD1_1, Slice.State.ACTIVE, 2, 2, 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitMixedReplicaTypes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSplitMixedReplicaTypes() throws Exception {\n    waitForThingsToLevelOut(15);\n    String collectionName = \"testSplitMixedReplicaTypes\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2, 2, 2);\n    create.setMaxShardsPerNode(5); // some high number so we can create replicas without hindrance\n    create.process(cloudClient);\n    waitForRecoveriesToFinish(collectionName, false);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n    splitShard.setShardName(SHARD1);\n    splitShard.process(cloudClient);\n    waitForThingsToLevelOut(15);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    log.info(\"coll: \" + coll);\n\n    // verify the original shard\n    verifyShard(coll, SHARD1, Slice.State.INACTIVE, 2, 2, 2);\n    // verify new sub-shards\n    verifyShard(coll, SHARD1_0, Slice.State.ACTIVE, 2, 2, 2);\n    verifyShard(coll, SHARD1_1, Slice.State.ACTIVE, 2, 2, 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20c968c14aace7cf49843bf2c1fafc7fd3845659","date":1533133859,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitMixedReplicaTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitMixedReplicaTypes().mjava","sourceNew":"  @Test\n  public void testSplitMixedReplicaTypes() throws Exception {\n    doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod.REWRITE);\n  }\n\n","sourceOld":"  @Test\n  public void testSplitMixedReplicaTypes() throws Exception {\n    waitForThingsToLevelOut(15);\n    String collectionName = \"testSplitMixedReplicaTypes\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2, 2, 2);\n    create.setMaxShardsPerNode(5); // some high number so we can create replicas without hindrance\n    create.process(cloudClient);\n    waitForRecoveriesToFinish(collectionName, false);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n    splitShard.setShardName(SHARD1);\n    splitShard.process(cloudClient);\n    waitForThingsToLevelOut(15);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    log.info(\"coll: \" + coll);\n\n    // verify the original shard\n    verifyShard(coll, SHARD1, Slice.State.INACTIVE, 2, 2, 2);\n    // verify new sub-shards\n    verifyShard(coll, SHARD1_0, Slice.State.ACTIVE, 2, 2, 2);\n    verifyShard(coll, SHARD1_1, Slice.State.ACTIVE, 2, 2, 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14076e7b40405aa1f08702d8df762d08b5d44f70","date":1537071979,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitMixedReplicaTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitMixedReplicaTypes().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testSplitMixedReplicaTypes() throws Exception {\n    doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod.REWRITE);\n  }\n\n","sourceOld":"  @Test\n  public void testSplitMixedReplicaTypes() throws Exception {\n    doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod.REWRITE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitMixedReplicaTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitMixedReplicaTypes().mjava","sourceNew":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testSplitMixedReplicaTypes() throws Exception {\n    doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod.REWRITE);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testSplitMixedReplicaTypes() throws Exception {\n    doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod.REWRITE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","685af99397b6da31116a2cac747ed255d217d080"],"685af99397b6da31116a2cac747ed255d217d080":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["14076e7b40405aa1f08702d8df762d08b5d44f70"],"14076e7b40405aa1f08702d8df762d08b5d44f70":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["685af99397b6da31116a2cac747ed255d217d080"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","685af99397b6da31116a2cac747ed255d217d080"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"685af99397b6da31116a2cac747ed255d217d080":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","20c968c14aace7cf49843bf2c1fafc7fd3845659","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","685af99397b6da31116a2cac747ed255d217d080","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"14076e7b40405aa1f08702d8df762d08b5d44f70":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["14076e7b40405aa1f08702d8df762d08b5d44f70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}