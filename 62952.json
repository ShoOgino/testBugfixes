{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getBinary(FieldInfo).mjava","commits":[{"id":"d7a738ebbf9537051521dcc7e49f69208f91e2fc","date":1358194026,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.number);\n    if (bytes.minLength == bytes.maxLength) {\n      return getFixedBinary(field, bytes);\n    } else {\n      return getVariableBinary(field, bytes);\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.number);\n    if (bytes.minLength == bytes.maxLength) {\n      return getFixedBinary(field, bytes);\n    } else {\n      return getVariableBinary(field, bytes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.number);\n    if (bytes.minLength == bytes.maxLength) {\n      return getFixedBinary(field, bytes);\n    } else {\n      return getVariableBinary(field, bytes);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad01348544f9eb6ee985c300245013a75addfc6","date":1376095061,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.number);\n    switch(bytes.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        return getFixedBinary(field, bytes);\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        return getVariableBinary(field, bytes);\n      case BINARY_PREFIX_COMPRESSED:\n        return getCompressedBinary(field, bytes);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.number);\n    if (bytes.minLength == bytes.maxLength) {\n      return getFixedBinary(field, bytes);\n    } else {\n      return getVariableBinary(field, bytes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.number);\n    switch(bytes.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        return getFixedBinary(field, bytes);\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        return getVariableBinary(field, bytes);\n      case BINARY_PREFIX_COMPRESSED:\n        return getCompressedBinary(field, bytes);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.number);\n    if (bytes.minLength == bytes.maxLength) {\n      return getFixedBinary(field, bytes);\n    } else {\n      return getVariableBinary(field, bytes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.number);\n    if (bytes.minLength == bytes.maxLength) {\n      return getFixedBinary(field, bytes);\n    } else {\n      return getVariableBinary(field, bytes);\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.number);\n    switch(bytes.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        return getFixedBinary(field, bytes);\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        return getVariableBinary(field, bytes);\n      case BINARY_PREFIX_COMPRESSED:\n        return getCompressedBinary(field, bytes);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a7bf5332d569e3d07c4b248462f5d212e26e9af","date":1376929683,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.number);\n    if (bytes.minLength == bytes.maxLength) {\n      return getFixedBinary(field, bytes);\n    } else {\n      return getVariableBinary(field, bytes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.number);\n    switch(bytes.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        return getFixedBinary(field, bytes);\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        return getVariableBinary(field, bytes);\n      case BINARY_PREFIX_COMPRESSED:\n        return getCompressedBinary(field, bytes);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.number);\n    switch(bytes.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        return getFixedBinary(field, bytes);\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        return getVariableBinary(field, bytes);\n      case BINARY_PREFIX_COMPRESSED:\n        return getCompressedBinary(field, bytes);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":5,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.number);\n    switch(bytes.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        return getFixedBinary(field, bytes);\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        return getVariableBinary(field, bytes);\n      case BINARY_PREFIX_COMPRESSED:\n        return getCompressedBinary(field, bytes);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry bytes = binaries.get(field.number);\n    switch(bytes.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        return getFixedBinary(field, bytes);\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        return getVariableBinary(field, bytes);\n      case BINARY_PREFIX_COMPRESSED:\n        return getCompressedBinary(field, bytes);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["0ad01348544f9eb6ee985c300245013a75addfc6"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["11a746437bc5c0a0b3df0337ed249c387c812871"],"0ad01348544f9eb6ee985c300245013a75addfc6":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["0ad01348544f9eb6ee985c300245013a75addfc6","1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","0ad01348544f9eb6ee985c300245013a75addfc6"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"0ad01348544f9eb6ee985c300245013a75addfc6":["11a746437bc5c0a0b3df0337ed249c387c812871","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}