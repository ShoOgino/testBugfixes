{"path":"lucene/core/src/java/org/apache/lucene/search/HitQueue#HitQueue(int,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/HitQueue#HitQueue(int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/HitQueue#HitQueue(int,boolean).mjava","sourceNew":"  /**\n   * Creates a new instance with <code>size</code> elements. If\n   * <code>prePopulate</code> is set to true, the queue will pre-populate itself\n   * with sentinel objects and set its {@link #size()} to <code>size</code>. In\n   * that case, you should not rely on {@link #size()} to get the number of\n   * actual elements that were added to the queue, but keep track yourself.<br>\n   * <b>NOTE:</b> in case <code>prePopulate</code> is true, you should pop\n   * elements from the queue using the following code example:\n   * \n   * <pre>\n   * PriorityQueue pq = new HitQueue(10, true); // pre-populate.\n   * ScoreDoc top = pq.top();\n   * \n   * // Add/Update one element.\n   * top.score = 1.0f;\n   * top.doc = 0;\n   * top = (ScoreDoc) pq.updateTop();\n   * int totalHits = 1;\n   * \n   * // Now pop only the elements that were *truly* inserted.\n   * // First, pop all the sentinel elements (there are pq.size() - totalHits).\n   * for (int i = pq.size() - totalHits; i &gt; 0; i--) pq.pop();\n   * \n   * // Now pop the truly added elements.\n   * ScoreDoc[] results = new ScoreDoc[totalHits];\n   * for (int i = totalHits - 1; i &gt;= 0; i--) {\n   *   results[i] = (ScoreDoc) pq.pop();\n   * }\n   * </pre>\n   * \n   * <p><b>NOTE</b>: This class pre-allocate a full array of\n   * length <code>size</code>.\n   * \n   * @param size\n   *          the requested size of this queue.\n   * @param prePopulate\n   *          specifies whether to pre-populate the queue with sentinel values.\n   * @see #getSentinelObject()\n   */\n  HitQueue(int size, boolean prePopulate) {\n    super(size, prePopulate);\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance with <code>size</code> elements. If\n   * <code>prePopulate</code> is set to true, the queue will pre-populate itself\n   * with sentinel objects and set its {@link #size()} to <code>size</code>. In\n   * that case, you should not rely on {@link #size()} to get the number of\n   * actual elements that were added to the queue, but keep track yourself.<br>\n   * <b>NOTE:</b> in case <code>prePopulate</code> is true, you should pop\n   * elements from the queue using the following code example:\n   * \n   * <pre>\n   * PriorityQueue pq = new HitQueue(10, true); // pre-populate.\n   * ScoreDoc top = pq.top();\n   * \n   * // Add/Update one element.\n   * top.score = 1.0f;\n   * top.doc = 0;\n   * top = (ScoreDoc) pq.updateTop();\n   * int totalHits = 1;\n   * \n   * // Now pop only the elements that were *truly* inserted.\n   * // First, pop all the sentinel elements (there are pq.size() - totalHits).\n   * for (int i = pq.size() - totalHits; i &gt; 0; i--) pq.pop();\n   * \n   * // Now pop the truly added elements.\n   * ScoreDoc[] results = new ScoreDoc[totalHits];\n   * for (int i = totalHits - 1; i &gt;= 0; i--) {\n   *   results[i] = (ScoreDoc) pq.pop();\n   * }\n   * </pre>\n   * \n   * <p><b>NOTE</b>: This class pre-allocate a full array of\n   * length <code>size</code>.\n   * \n   * @param size\n   *          the requested size of this queue.\n   * @param prePopulate\n   *          specifies whether to pre-populate the queue with sentinel values.\n   * @see #getSentinelObject()\n   */\n  HitQueue(int size, boolean prePopulate) {\n    super(size, prePopulate);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8471c0f357621e859602d44e1af230581b739319","date":1347468766,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/HitQueue#HitQueue(int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/HitQueue#HitQueue(int,boolean).mjava","sourceNew":"  /**\n   * Creates a new instance with <code>size</code> elements. If\n   * <code>prePopulate</code> is set to true, the queue will pre-populate itself\n   * with sentinel objects and set its {@link #size()} to <code>size</code>. In\n   * that case, you should not rely on {@link #size()} to get the number of\n   * actual elements that were added to the queue, but keep track yourself.<br>\n   * <b>NOTE:</b> in case <code>prePopulate</code> is true, you should pop\n   * elements from the queue using the following code example:\n   * \n   * <pre class=\"prettyprint\">\n   * PriorityQueue&lt;ScoreDoc&gt; pq = new HitQueue(10, true); // pre-populate.\n   * ScoreDoc top = pq.top();\n   * \n   * // Add/Update one element.\n   * top.score = 1.0f;\n   * top.doc = 0;\n   * top = (ScoreDoc) pq.updateTop();\n   * int totalHits = 1;\n   * \n   * // Now pop only the elements that were *truly* inserted.\n   * // First, pop all the sentinel elements (there are pq.size() - totalHits).\n   * for (int i = pq.size() - totalHits; i &gt; 0; i--) pq.pop();\n   * \n   * // Now pop the truly added elements.\n   * ScoreDoc[] results = new ScoreDoc[totalHits];\n   * for (int i = totalHits - 1; i &gt;= 0; i--) {\n   *   results[i] = (ScoreDoc) pq.pop();\n   * }\n   * </pre>\n   * \n   * <p><b>NOTE</b>: This class pre-allocate a full array of\n   * length <code>size</code>.\n   * \n   * @param size\n   *          the requested size of this queue.\n   * @param prePopulate\n   *          specifies whether to pre-populate the queue with sentinel values.\n   * @see #getSentinelObject()\n   */\n  HitQueue(int size, boolean prePopulate) {\n    super(size, prePopulate);\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance with <code>size</code> elements. If\n   * <code>prePopulate</code> is set to true, the queue will pre-populate itself\n   * with sentinel objects and set its {@link #size()} to <code>size</code>. In\n   * that case, you should not rely on {@link #size()} to get the number of\n   * actual elements that were added to the queue, but keep track yourself.<br>\n   * <b>NOTE:</b> in case <code>prePopulate</code> is true, you should pop\n   * elements from the queue using the following code example:\n   * \n   * <pre>\n   * PriorityQueue pq = new HitQueue(10, true); // pre-populate.\n   * ScoreDoc top = pq.top();\n   * \n   * // Add/Update one element.\n   * top.score = 1.0f;\n   * top.doc = 0;\n   * top = (ScoreDoc) pq.updateTop();\n   * int totalHits = 1;\n   * \n   * // Now pop only the elements that were *truly* inserted.\n   * // First, pop all the sentinel elements (there are pq.size() - totalHits).\n   * for (int i = pq.size() - totalHits; i &gt; 0; i--) pq.pop();\n   * \n   * // Now pop the truly added elements.\n   * ScoreDoc[] results = new ScoreDoc[totalHits];\n   * for (int i = totalHits - 1; i &gt;= 0; i--) {\n   *   results[i] = (ScoreDoc) pq.pop();\n   * }\n   * </pre>\n   * \n   * <p><b>NOTE</b>: This class pre-allocate a full array of\n   * length <code>size</code>.\n   * \n   * @param size\n   *          the requested size of this queue.\n   * @param prePopulate\n   *          specifies whether to pre-populate the queue with sentinel values.\n   * @see #getSentinelObject()\n   */\n  HitQueue(int size, boolean prePopulate) {\n    super(size, prePopulate);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a01c2b1a66c8ed2fb15d4cbdc6d024d91a2047f","date":1532682688,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/HitQueue#HitQueue(int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/HitQueue#HitQueue(int,boolean).mjava","sourceNew":"  /**\n   * Creates a new instance with <code>size</code> elements. If\n   * <code>prePopulate</code> is set to true, the queue will pre-populate itself\n   * with sentinel objects and set its {@link #size()} to <code>size</code>. In\n   * that case, you should not rely on {@link #size()} to get the number of\n   * actual elements that were added to the queue, but keep track yourself.<br>\n   * <b>NOTE:</b> in case <code>prePopulate</code> is true, you should pop\n   * elements from the queue using the following code example:\n   * \n   * <pre class=\"prettyprint\">\n   * PriorityQueue&lt;ScoreDoc&gt; pq = new HitQueue(10, true); // pre-populate.\n   * ScoreDoc top = pq.top();\n   * \n   * // Add/Update one element.\n   * top.score = 1.0f;\n   * top.doc = 0;\n   * top = (ScoreDoc) pq.updateTop();\n   * int totalHits = 1;\n   * \n   * // Now pop only the elements that were *truly* inserted.\n   * // First, pop all the sentinel elements (there are pq.size() - totalHits).\n   * for (int i = pq.size() - totalHits; i &gt; 0; i--) pq.pop();\n   * \n   * // Now pop the truly added elements.\n   * ScoreDoc[] results = new ScoreDoc[totalHits];\n   * for (int i = totalHits - 1; i &gt;= 0; i--) {\n   *   results[i] = (ScoreDoc) pq.pop();\n   * }\n   * </pre>\n   * \n   * <p><b>NOTE</b>: This class pre-allocate a full array of\n   * length <code>size</code>.\n   * \n   * @param size\n   *          the requested size of this queue.\n   * @param prePopulate\n   *          specifies whether to pre-populate the queue with sentinel values.\n   */\n  HitQueue(int size, boolean prePopulate) {\n    super(size, () -> {\n      if (prePopulate) {\n        // Always set the doc Id to MAX_VALUE so that it won't be favored by\n        // lessThan. This generally should not happen since if score is not NEG_INF,\n        // TopScoreDocCollector will always add the object to the queue.\n        return new ScoreDoc(Integer.MAX_VALUE, Float.NEGATIVE_INFINITY);\n      } else {\n        return null;\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance with <code>size</code> elements. If\n   * <code>prePopulate</code> is set to true, the queue will pre-populate itself\n   * with sentinel objects and set its {@link #size()} to <code>size</code>. In\n   * that case, you should not rely on {@link #size()} to get the number of\n   * actual elements that were added to the queue, but keep track yourself.<br>\n   * <b>NOTE:</b> in case <code>prePopulate</code> is true, you should pop\n   * elements from the queue using the following code example:\n   * \n   * <pre class=\"prettyprint\">\n   * PriorityQueue&lt;ScoreDoc&gt; pq = new HitQueue(10, true); // pre-populate.\n   * ScoreDoc top = pq.top();\n   * \n   * // Add/Update one element.\n   * top.score = 1.0f;\n   * top.doc = 0;\n   * top = (ScoreDoc) pq.updateTop();\n   * int totalHits = 1;\n   * \n   * // Now pop only the elements that were *truly* inserted.\n   * // First, pop all the sentinel elements (there are pq.size() - totalHits).\n   * for (int i = pq.size() - totalHits; i &gt; 0; i--) pq.pop();\n   * \n   * // Now pop the truly added elements.\n   * ScoreDoc[] results = new ScoreDoc[totalHits];\n   * for (int i = totalHits - 1; i &gt;= 0; i--) {\n   *   results[i] = (ScoreDoc) pq.pop();\n   * }\n   * </pre>\n   * \n   * <p><b>NOTE</b>: This class pre-allocate a full array of\n   * length <code>size</code>.\n   * \n   * @param size\n   *          the requested size of this queue.\n   * @param prePopulate\n   *          specifies whether to pre-populate the queue with sentinel values.\n   * @see #getSentinelObject()\n   */\n  HitQueue(int size, boolean prePopulate) {\n    super(size, prePopulate);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8471c0f357621e859602d44e1af230581b739319":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6a01c2b1a66c8ed2fb15d4cbdc6d024d91a2047f":["8471c0f357621e859602d44e1af230581b739319"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a01c2b1a66c8ed2fb15d4cbdc6d024d91a2047f"]},"commit2Childs":{"8471c0f357621e859602d44e1af230581b739319":["6a01c2b1a66c8ed2fb15d4cbdc6d024d91a2047f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8471c0f357621e859602d44e1af230581b739319"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6a01c2b1a66c8ed2fb15d4cbdc6d024d91a2047f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}