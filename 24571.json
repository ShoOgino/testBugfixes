{"path":"lucene/src/java/org/apache/lucene/util/CollectionUtil#[T]_quickSort(List[T],Comparator[#-super-T]).mjava","commits":[{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/CollectionUtil#[T]_quickSort(List[T],Comparator[#-super-T]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sorts the given random access {@link List} using the {@link Comparator}.\n   * The list must implement {@link RandomAccess}. This method uses the quick sort\n   * algorithm, but falls back to insertion sort for small lists.\n   * @throws IllegalArgumentException if list is e.g. a linked list without random access.\n   */\n  public static <T> void quickSort(List<T> list, Comparator<? super T> comp) {\n    getSorter(list, comp).quickSort(0, list.size()-1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/CollectionUtil#[T]_quickSort(List[T],Comparator[#-super-T]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sorts the given random access {@link List} using the {@link Comparator}.\n   * The list must implement {@link RandomAccess}. This method uses the quick sort\n   * algorithm, but falls back to insertion sort for small lists.\n   * @throws IllegalArgumentException if list is e.g. a linked list without random access.\n   */\n  public static <T> void quickSort(List<T> list, Comparator<? super T> comp) {\n    getSorter(list, comp).quickSort(0, list.size()-1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/CollectionUtil#[T]_quickSort(List[T],Comparator[#-super-T]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sorts the given random access {@link List} using the {@link Comparator}.\n   * The list must implement {@link RandomAccess}. This method uses the quick sort\n   * algorithm, but falls back to insertion sort for small lists.\n   * @throws IllegalArgumentException if list is e.g. a linked list without random access.\n   */\n  public static <T> void quickSort(List<T> list, Comparator<? super T> comp) {\n    getSorter(list, comp).quickSort(0, list.size()-1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20bec0dc801c18dfd87add05a02af34d5f2177b4","date":1301137613,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/CollectionUtil#[T]_quickSort(List[T],Comparator[#-super-T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CollectionUtil#[T]_quickSort(List[T],Comparator[#-super-T]).mjava","sourceNew":"  /**\n   * Sorts the given random access {@link List} using the {@link Comparator}.\n   * The list must implement {@link RandomAccess}. This method uses the quick sort\n   * algorithm, but falls back to insertion sort for small lists.\n   * @throws IllegalArgumentException if list is e.g. a linked list without random access.\n   */\n  public static <T> void quickSort(List<T> list, Comparator<? super T> comp) {\n    final int size = list.size();\n    if (size <= 1) return;\n    getSorter(list, comp).quickSort(0, size-1);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given random access {@link List} using the {@link Comparator}.\n   * The list must implement {@link RandomAccess}. This method uses the quick sort\n   * algorithm, but falls back to insertion sort for small lists.\n   * @throws IllegalArgumentException if list is e.g. a linked list without random access.\n   */\n  public static <T> void quickSort(List<T> list, Comparator<? super T> comp) {\n    getSorter(list, comp).quickSort(0, list.size()-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/CollectionUtil#[T]_quickSort(List[T],Comparator[#-super-T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CollectionUtil#[T]_quickSort(List[T],Comparator[#-super-T]).mjava","sourceNew":"  /**\n   * Sorts the given random access {@link List} using the {@link Comparator}.\n   * The list must implement {@link RandomAccess}. This method uses the quick sort\n   * algorithm, but falls back to insertion sort for small lists.\n   * @throws IllegalArgumentException if list is e.g. a linked list without random access.\n   */\n  public static <T> void quickSort(List<T> list, Comparator<? super T> comp) {\n    final int size = list.size();\n    if (size <= 1) return;\n    getSorter(list, comp).quickSort(0, size-1);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given random access {@link List} using the {@link Comparator}.\n   * The list must implement {@link RandomAccess}. This method uses the quick sort\n   * algorithm, but falls back to insertion sort for small lists.\n   * @throws IllegalArgumentException if list is e.g. a linked list without random access.\n   */\n  public static <T> void quickSort(List<T> list, Comparator<? super T> comp) {\n    getSorter(list, comp).quickSort(0, list.size()-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/CollectionUtil#[T]_quickSort(List[T],Comparator[#-super-T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CollectionUtil#[T]_quickSort(List[T],Comparator[#-super-T]).mjava","sourceNew":"  /**\n   * Sorts the given random access {@link List} using the {@link Comparator}.\n   * The list must implement {@link RandomAccess}. This method uses the quick sort\n   * algorithm, but falls back to insertion sort for small lists.\n   * @throws IllegalArgumentException if list is e.g. a linked list without random access.\n   */\n  public static <T> void quickSort(List<T> list, Comparator<? super T> comp) {\n    final int size = list.size();\n    if (size <= 1) return;\n    getSorter(list, comp).quickSort(0, size-1);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given random access {@link List} using the {@link Comparator}.\n   * The list must implement {@link RandomAccess}. This method uses the quick sort\n   * algorithm, but falls back to insertion sort for small lists.\n   * @throws IllegalArgumentException if list is e.g. a linked list without random access.\n   */\n  public static <T> void quickSort(List<T> list, Comparator<? super T> comp) {\n    getSorter(list, comp).quickSort(0, list.size()-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CollectionUtil#[T]_quickSort(List[T],Comparator[#-super-T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CollectionUtil#[T]_quickSort(List[T],Comparator[#-super-T]).mjava","sourceNew":"  /**\n   * Sorts the given random access {@link List} using the {@link Comparator}.\n   * The list must implement {@link RandomAccess}. This method uses the quick sort\n   * algorithm, but falls back to insertion sort for small lists.\n   * @throws IllegalArgumentException if list is e.g. a linked list without random access.\n   */\n  public static <T> void quickSort(List<T> list, Comparator<? super T> comp) {\n    final int size = list.size();\n    if (size <= 1) return;\n    getSorter(list, comp).quickSort(0, size-1);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given random access {@link List} using the {@link Comparator}.\n   * The list must implement {@link RandomAccess}. This method uses the quick sort\n   * algorithm, but falls back to insertion sort for small lists.\n   * @throws IllegalArgumentException if list is e.g. a linked list without random access.\n   */\n  public static <T> void quickSort(List<T> list, Comparator<? super T> comp) {\n    final int size = list.size();\n    if (size <= 1) return;\n    getSorter(list, comp).quickSort(0, size-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","20bec0dc801c18dfd87add05a02af34d5f2177b4"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","20bec0dc801c18dfd87add05a02af34d5f2177b4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["20bec0dc801c18dfd87add05a02af34d5f2177b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20bec0dc801c18dfd87add05a02af34d5f2177b4":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["20bec0dc801c18dfd87add05a02af34d5f2177b4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"20bec0dc801c18dfd87add05a02af34d5f2177b4":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}