{"path":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      if (scoreMode.needsScores() == false) {\n        return match.createWeight(searcher, scoreMode, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, scoreMode, boost);\n      final Weight contextWeight = searcher.createWeight(context, ScoreMode.COMPLETE_NO_SCORES, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n            @Override\n            public float maxScore() {\n              float maxScore = matchScorer.maxScore();\n              if (boost > 1) {\n                maxScore *= boost;\n              }\n              return maxScore;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return matchWeight.isCacheable(ctx) && contextWeight.isCacheable(ctx);\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores, boost);\n      final Weight contextWeight = searcher.createWeight(context, false, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return matchWeight.isCacheable(ctx) && contextWeight.isCacheable(ctx);\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      if (scoreMode.needsScores() == false) {\n        return match.createWeight(searcher, scoreMode, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, scoreMode, boost);\n      final Weight contextWeight = searcher.createWeight(context, ScoreMode.COMPLETE_NO_SCORES, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n            @Override\n            public float maxScore() {\n              float maxScore = matchScorer.maxScore();\n              if (boost > 1) {\n                maxScore *= boost;\n              }\n              return maxScore;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return matchWeight.isCacheable(ctx) && contextWeight.isCacheable(ctx);\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores, boost);\n      final Weight contextWeight = searcher.createWeight(context, false, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return matchWeight.isCacheable(ctx) && contextWeight.isCacheable(ctx);\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82662cae660e76ded4de1e9b451633e523d83e1","date":1513619223,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      if (scoreMode.needsScores() == false) {\n        return match.createWeight(searcher, scoreMode, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, scoreMode, boost);\n      final Weight contextWeight = searcher.createWeight(context, ScoreMode.COMPLETE_NO_SCORES, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n            @Override\n            public float maxScore() {\n              float maxScore = matchScorer.maxScore();\n              if (boost > 1) {\n                maxScore *= boost;\n              }\n              return maxScore;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return matchWeight.isCacheable(ctx) && contextWeight.isCacheable(ctx);\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a82662cae660e76ded4de1e9b451633e523d83e1":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a82662cae660e76ded4de1e9b451633e523d83e1"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a82662cae660e76ded4de1e9b451633e523d83e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a82662cae660e76ded4de1e9b451633e523d83e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}