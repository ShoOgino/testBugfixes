{"path":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}