{"path":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#createCollectionWithRetry(String,String,int,int,int).mjava","commits":[{"id":"615bf5b56d95ed8c9bf06a402db6c817d6bff21a","date":1509492118,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#createCollectionWithRetry(String,String,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  void createCollectionWithRetry(String testCollectionName, String config, int numShards, int replicationFactor, int maxShardsPerNode) throws IOException, SolrServerException, InterruptedException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n    if (resp.getResponse().get(\"failure\") != null) {\n      Thread.sleep(5000); // let system settle down. This should be very rare.\n\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n\n      resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#createCollectionWithRetry(String,String,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#createCollectionWithRetry(String,String,int,int,int).mjava","sourceNew":"  void createCollectionWithRetry(String testCollectionName, String config, int numShards, int replicationFactor, int maxShardsPerNode) throws IOException, SolrServerException, InterruptedException, TimeoutException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n    if (resp.getResponse().get(\"failure\") != null) {\n      Thread.sleep(5000); // let system settle down. This should be very rare.\n\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n\n      resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","sourceOld":"  void createCollectionWithRetry(String testCollectionName, String config, int numShards, int replicationFactor, int maxShardsPerNode) throws IOException, SolrServerException, InterruptedException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n    if (resp.getResponse().get(\"failure\") != null) {\n      Thread.sleep(5000); // let system settle down. This should be very rare.\n\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n\n      resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","bugFix":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#createCollectionWithRetry(String,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#createCollectionWithRetry(String,String,int,int,int).mjava","sourceNew":"  void createCollectionWithRetry(String testCollectionName, String config, int numShards, int replicationFactor) throws IOException, SolrServerException, InterruptedException, TimeoutException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor);\n\n    if (resp.getResponse().get(\"failure\") != null) {\n      Thread.sleep(5000); // let system settle down. This should be very rare.\n\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n\n      resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","sourceOld":"  void createCollectionWithRetry(String testCollectionName, String config, int numShards, int replicationFactor, int maxShardsPerNode) throws IOException, SolrServerException, InterruptedException, TimeoutException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n    if (resp.getResponse().get(\"failure\") != null) {\n      Thread.sleep(5000); // let system settle down. This should be very rare.\n\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n\n      resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}