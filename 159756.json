{"path":"lucene/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","commits":[{"id":"13ad74d2400faab706507f11a36b36e28a6c0058","date":1284177017,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/ChainingCollectorTest#testCollector().mjava","sourceNew":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null, 0);\n    c.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = new ChainingCollector(dcs);\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null, 0);\n    c.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null, 0);\n    c.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","sourceNew":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null);\n    c.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null, 0);\n    c.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","sourceNew":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null);\n    c.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null, 0);\n    c.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","sourceNew":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null);\n    c.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null, 0);\n    c.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/MultiCollectorTest#testCollector().mjava","sourceNew":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null);\n    c.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollector() throws Exception {\n    // Tests that the collector delegates calls to input collectors properly.\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    DummyCollector[] dcs = new DummyCollector[] { new DummyCollector(), new DummyCollector() };\n    Collector c = MultiCollector.wrap(dcs);\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null);\n    c.setScorer(null);\n\n    for (DummyCollector dc : dcs) {\n      assertTrue(dc.acceptsDocsOutOfOrderCalled);\n      assertTrue(dc.collectCalled);\n      assertTrue(dc.setNextReaderCalled);\n      assertTrue(dc.setScorerCalled);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"13ad74d2400faab706507f11a36b36e28a6c0058":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"323f871ffe96b871d8c534a614be60751bb023c2":["13ad74d2400faab706507f11a36b36e28a6c0058"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["323f871ffe96b871d8c534a614be60751bb023c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["13ad74d2400faab706507f11a36b36e28a6c0058","323f871ffe96b871d8c534a614be60751bb023c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","13ad74d2400faab706507f11a36b36e28a6c0058"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","323f871ffe96b871d8c534a614be60751bb023c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"13ad74d2400faab706507f11a36b36e28a6c0058":["323f871ffe96b871d8c534a614be60751bb023c2","29ef99d61cda9641b6250bf9567329a6e65f901d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"323f871ffe96b871d8c534a614be60751bb023c2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["13ad74d2400faab706507f11a36b36e28a6c0058","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}