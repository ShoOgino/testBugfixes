{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSearchRate().mjava","commits":[{"id":"1cc58dbf9573e66a3054c7c372862b8e5a77a9da","date":1504796681,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSearchRate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    // create an empty node\n    cluster.startJettySolrRunner();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSearchRate\",\n        \"conf\",1, 1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSearchRate\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // generate some dummy traffic\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(\"testSearchRate\", query);\n    }\n\n    assertTrue(\"Trigger was not fired\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected ADDREPLICA action after exceeding searchRate\", ADDREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e412fed1b23292038553fbe85fe61cd7aa8472","date":1505751927,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSearchRate().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    // create an empty node\n    cluster.startJettySolrRunner();\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSearchRate\",\n        \"conf\",1, 1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSearchRate\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // generate some dummy traffic\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(\"testSearchRate\", query);\n    }\n\n    assertTrue(\"Trigger was not fired\", triggerFiredLatch.await(10, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected ADDREPLICA action after exceeding searchRate\", ADDREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cc58dbf9573e66a3054c7c372862b8e5a77a9da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4e412fed1b23292038553fbe85fe61cd7aa8472":["1cc58dbf9573e66a3054c7c372862b8e5a77a9da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1cc58dbf9573e66a3054c7c372862b8e5a77a9da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1cc58dbf9573e66a3054c7c372862b8e5a77a9da":["a4e412fed1b23292038553fbe85fe61cd7aa8472"],"a4e412fed1b23292038553fbe85fe61cd7aa8472":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a4e412fed1b23292038553fbe85fe61cd7aa8472","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}