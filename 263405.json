{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","commits":[{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getReaderForField(String).mjava","sourceNew":"  private AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(tokenStream);\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, tokenStream);\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","sourceOld":"  private IndexReader getReaderForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(tokenStream);\n      cachedTokenStream = true;\n    }\n    IndexReader reader = readers.get(field);\n    if (reader == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, tokenStream);\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      reader = searcher.getIndexReader();\n      readers.put(field, reader);\n    }\n\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getReaderForField(String).mjava","sourceNew":"  private AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(tokenStream);\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, tokenStream);\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","sourceOld":"  private IndexReader getReaderForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(tokenStream);\n      cachedTokenStream = true;\n    }\n    IndexReader reader = readers.get(field);\n    if (reader == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, tokenStream);\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      reader = searcher.getIndexReader();\n      readers.put(field, reader);\n    }\n\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","pathOld":"/dev/null","sourceNew":"  private AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(tokenStream);\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, tokenStream);\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c45bbf26db88631f7a389cbff0f4eab70f55ec64","date":1303271007,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","sourceNew":"  private AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","sourceOld":"  private AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(tokenStream);\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, tokenStream);\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","bugFix":["c8323d210478d76a02372693d254b69aac614689"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","sourceNew":"  private AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","sourceOld":"  private AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(tokenStream);\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, tokenStream);\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","sourceNew":"  private AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","sourceOld":"  private AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(tokenStream);\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, tokenStream);\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","sourceNew":"  private AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","sourceOld":"  private AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(tokenStream);\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, tokenStream);\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a00afb46b1a8a7ee8772ebbd41076442006ce5e4","date":1325512163,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","sourceNew":"  protected AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","sourceOld":"  private AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","sourceNew":"  protected AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","sourceOld":"  protected AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a00afb46b1a8a7ee8772ebbd41076442006ce5e4"],"c45bbf26db88631f7a389cbff0f4eab70f55ec64":["c8323d210478d76a02372693d254b69aac614689"],"c8323d210478d76a02372693d254b69aac614689":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c8323d210478d76a02372693d254b69aac614689","c45bbf26db88631f7a389cbff0f4eab70f55ec64"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8323d210478d76a02372693d254b69aac614689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","c45bbf26db88631f7a389cbff0f4eab70f55ec64"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","c45bbf26db88631f7a389cbff0f4eab70f55ec64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a00afb46b1a8a7ee8772ebbd41076442006ce5e4":["c45bbf26db88631f7a389cbff0f4eab70f55ec64"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8323d210478d76a02372693d254b69aac614689"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c45bbf26db88631f7a389cbff0f4eab70f55ec64":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a00afb46b1a8a7ee8772ebbd41076442006ce5e4"],"c8323d210478d76a02372693d254b69aac614689":["c45bbf26db88631f7a389cbff0f4eab70f55ec64","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8323d210478d76a02372693d254b69aac614689","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"a00afb46b1a8a7ee8772ebbd41076442006ce5e4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}