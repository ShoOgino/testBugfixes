{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2047784e704fe141e0ff36affac8a7cb6c7bbec","date":1295352100,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    iwConf.setMaxFieldLength(config.get(\"max.field.length\",OpenIndexTask.DEFAULT_MAX_FIELD_LENGTH));\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      } else if(iwConf.getMergePolicy() instanceof TieredMergePolicy) {\n        TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) iwConf.getMergePolicy();\n        tieredMergePolicy.setUseCompoundFile(isCompound);\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      } else if(iwConf.getMergePolicy() instanceof TieredMergePolicy) {\n        TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) iwConf.getMergePolicy();\n        tieredMergePolicy.setUseCompoundFile(isCompound);\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      } else if(iwConf.getMergePolicy() instanceof TieredMergePolicy) {\n        TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) iwConf.getMergePolicy();\n        tieredMergePolicy.setUseCompoundFile(isCompound);\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      } else if(iwConf.getMergePolicy() instanceof TieredMergePolicy) {\n        TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) iwConf.getMergePolicy();\n        tieredMergePolicy.setUseCompoundFile(isCompound);\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        Codec.setDefault(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      } else if(iwConf.getMergePolicy() instanceof TieredMergePolicy) {\n        TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) iwConf.getMergePolicy();\n        tieredMergePolicy.setUseCompoundFile(isCompound);\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      CodecProvider.getDefault().setDefaultFieldCodec(defaultCodec);\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      } else if(iwConf.getMergePolicy() instanceof TieredMergePolicy) {\n        TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) iwConf.getMergePolicy();\n        tieredMergePolicy.setUseCompoundFile(isCompound);\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":["940b22e035cbfe47ac8c00a900a61a724c2140e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask#createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit).mjava","sourceNew":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        Codec.setDefault(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      } else if(iwConf.getMergePolicy() instanceof TieredMergePolicy) {\n        TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) iwConf.getMergePolicy();\n        tieredMergePolicy.setUseCompoundFile(isCompound);\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","sourceOld":"  public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {\n    Version version = Version.valueOf(config.get(\"writer.version\", Version.LUCENE_40.toString()));\n    IndexWriterConfig iwConf = new IndexWriterConfig(version, runData.getAnalyzer());\n    iwConf.setOpenMode(mode);\n    IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);\n    iwConf.setIndexDeletionPolicy(indexDeletionPolicy);\n    if(commit != null)\n      iwConf.setIndexCommit(commit);\n    \n\n    final String mergeScheduler = config.get(\"merge.scheduler\",\n                                             \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {\n      iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);\n    } else {\n      try {\n        iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergeScheduler + \"' as merge scheduler\", e);\n      }\n      \n      if (mergeScheduler.equals(\"org.apache.lucene.index.ConcurrentMergeScheduler\")) {\n        ConcurrentMergeScheduler cms = (ConcurrentMergeScheduler) iwConf.getMergeScheduler();\n        int v = config.get(\"concurrent.merge.scheduler.max.thread.count\", -1);\n        if (v != -1) {\n          cms.setMaxThreadCount(v);\n        }\n        v = config.get(\"concurrent.merge.scheduler.max.merge.count\", -1);\n        if (v != -1) {\n          cms.setMaxMergeCount(v);\n        }\n      }\n    }\n\n    final String defaultCodec = config.get(\"default.codec\", null);\n    if (defaultCodec != null) {\n      try {\n        Class<? extends Codec> clazz = Class.forName(defaultCodec).asSubclass(Codec.class);\n        Codec.setDefault(clazz.newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Couldn't instantiate Codec: \" + defaultCodec, e);\n      }\n    }\n\n    final String mergePolicy = config.get(\"merge.policy\",\n                                          \"org.apache.lucene.index.LogByteSizeMergePolicy\");\n    boolean isCompound = config.get(\"compound\", true);\n    if (mergePolicy.equals(NoMergePolicy.class.getName())) {\n      iwConf.setMergePolicy(isCompound ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      try {\n        iwConf.setMergePolicy(Class.forName(mergePolicy).asSubclass(MergePolicy.class).newInstance());\n      } catch (Exception e) {\n        throw new RuntimeException(\"unable to instantiate class '\" + mergePolicy + \"' as merge policy\", e);\n      }\n      if(iwConf.getMergePolicy() instanceof LogMergePolicy) {\n        LogMergePolicy logMergePolicy = (LogMergePolicy) iwConf.getMergePolicy();\n        logMergePolicy.setUseCompoundFile(isCompound);\n        logMergePolicy.setMergeFactor(config.get(\"merge.factor\",OpenIndexTask.DEFAULT_MERGE_PFACTOR));\n      } else if(iwConf.getMergePolicy() instanceof TieredMergePolicy) {\n        TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) iwConf.getMergePolicy();\n        tieredMergePolicy.setUseCompoundFile(isCompound);\n      }\n    }\n    final double ramBuffer = config.get(\"ram.flush.mb\",OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    final int maxBuffered = config.get(\"max.buffered\",OpenIndexTask.DEFAULT_MAX_BUFFERED);\n    if (maxBuffered == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n      iwConf.setMaxBufferedDocs(maxBuffered);\n    } else {\n      iwConf.setMaxBufferedDocs(maxBuffered);\n      iwConf.setRAMBufferSizeMB(ramBuffer);\n    }\n    \n    return iwConf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","01e5948db9a07144112d2f08f28ca2e3cd880348"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","c2047784e704fe141e0ff36affac8a7cb6c7bbec"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["c2047784e704fe141e0ff36affac8a7cb6c7bbec"],"7b91922b55d15444d554721b352861d028eb8278":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7b91922b55d15444d554721b352861d028eb8278"],"c2047784e704fe141e0ff36affac8a7cb6c7bbec":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c2047784e704fe141e0ff36affac8a7cb6c7bbec","01e5948db9a07144112d2f08f28ca2e3cd880348"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","c2047784e704fe141e0ff36affac8a7cb6c7bbec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"45669a651c970812a680841b97a77cce06af559f":["e79a6d080bdd5b2a8f56342cf571b5476de04180","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["45669a651c970812a680841b97a77cce06af559f"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7b91922b55d15444d554721b352861d028eb8278","a3776dccca01c11e7046323cfad46a3b4a471233","45669a651c970812a680841b97a77cce06af559f"],"7b91922b55d15444d554721b352861d028eb8278":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","c2047784e704fe141e0ff36affac8a7cb6c7bbec","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c2047784e704fe141e0ff36affac8a7cb6c7bbec":["e79a6d080bdd5b2a8f56342cf571b5476de04180","01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}