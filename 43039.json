{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Collector).mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(AtomicReaderContext[] leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (int i = 0; i < leaves.length; i++) { // search each subreader\n      collector.setNextReader(leaves[i]);\n      Scorer scorer = weight.scorer(leaves[i], !collector.acceptsDocsOutOfOrder(), true, leaves[i].reader.getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param filter\n   *          if non-null, used to permit documents to be collected.\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(AtomicReaderContext[] leaves, Weight weight, Filter filter, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    if (filter == null) {\n      for (int i = 0; i < leaves.length; i++) { // search each subreader\n        collector.setNextReader(leaves[i]);\n        Scorer scorer = weight.scorer(leaves[i], !collector.acceptsDocsOutOfOrder(), true, leaves[i].reader.getLiveDocs());\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < leaves.length; i++) { // search each subreader\n        collector.setNextReader(leaves[i]);\n        searchWithFilter(leaves[i], weight, filter, collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(AtomicReaderContext[] leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (int i = 0; i < leaves.length; i++) { // search each subreader\n      collector.setNextReader(leaves[i]);\n      Scorer scorer = weight.scorer(leaves[i], !collector.acceptsDocsOutOfOrder(), true, leaves[i].reader().getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(AtomicReaderContext[] leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (int i = 0; i < leaves.length; i++) { // search each subreader\n      collector.setNextReader(leaves[i]);\n      Scorer scorer = weight.scorer(leaves[i], !collector.acceptsDocsOutOfOrder(), true, leaves[i].reader.getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(AtomicReaderContext[] leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (int i = 0; i < leaves.length; i++) { // search each subreader\n      collector.setNextReader(leaves[i]);\n      Scorer scorer = weight.scorer(leaves[i], !collector.acceptsDocsOutOfOrder(), true, leaves[i].reader().getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(AtomicReaderContext[] leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (int i = 0; i < leaves.length; i++) { // search each subreader\n      collector.setNextReader(leaves[i]);\n      Scorer scorer = weight.scorer(leaves[i], !collector.acceptsDocsOutOfOrder(), true, leaves[i].reader.getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(AtomicReaderContext[] leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (int i = 0; i < leaves.length; i++) { // search each subreader\n      collector.setNextReader(leaves[i]);\n      Scorer scorer = weight.scorer(leaves[i], !collector.acceptsDocsOutOfOrder(), true, leaves[i].reader().getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(AtomicReaderContext[] leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (int i = 0; i < leaves.length; i++) { // search each subreader\n      collector.setNextReader(leaves[i]);\n      Scorer scorer = weight.scorer(leaves[i], !collector.acceptsDocsOutOfOrder(), true, leaves[i].reader().getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["6620df8541b174097b1133a4fc370adb2e570524"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6620df8541b174097b1133a4fc370adb2e570524","6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}