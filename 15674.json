{"path":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#checkRules(Map[String,Object],int,Map[String,Object]).mjava","commits":[{"id":"239a1d4a10c03638628b6aa312f3c64ed9db72d2","date":1450681874,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#checkRules(Map[String,Object],int,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkRules(Map<String, Object> values, int expected, Map<String ,Object> permissions) {\n    AuthorizationContext context = new MockAuthorizationContext(values);\n    RuleBasedAuthorizationPlugin plugin = new RuleBasedAuthorizationPlugin();\n    plugin.init(permissions);\n    AuthorizationResponse authResp = plugin.authorize(context);\n    assertEquals(expected, authResp.statusCode);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#checkRules(Map[String,Object],int,Map[String,Object]).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#checkRules(Map[String,Object],int,Map[String,Object]).mjava","sourceNew":"  private void checkRules(Map<String, Object> values, int expected, Map<String ,Object> permissions) {\n    AuthorizationContext context = new MockAuthorizationContext(values);\n    try (RuleBasedAuthorizationPlugin plugin = new RuleBasedAuthorizationPlugin()) {\n      plugin.init(permissions);\n      AuthorizationResponse authResp = plugin.authorize(context);\n      assertEquals(expected, authResp.statusCode);\n    } catch (IOException e) {\n      ; // swallow error, otherwise a you have to add a _lot_ of exceptions to methods.\n    }\n  }\n\n","sourceOld":"  private void checkRules(Map<String, Object> values, int expected, Map<String ,Object> permissions) {\n    AuthorizationContext context = new MockAuthorizationContext(values);\n    RuleBasedAuthorizationPlugin plugin = new RuleBasedAuthorizationPlugin();\n    plugin.init(permissions);\n    AuthorizationResponse authResp = plugin.authorize(context);\n    assertEquals(expected, authResp.statusCode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8076096f334b0665d0a69a63ee98ac09baad402b","date":1589405373,"type":5,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BaseTestRuleBasedAuthorizationPlugin#checkRules(Map[String,Object],int,Map[String,Object]).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestRuleBasedAuthorizationPlugin#checkRules(Map[String,Object],int,Map[String,Object]).mjava","sourceNew":"  void checkRules(Map<String, Object> values, int expected, Map<String, Object> permissions) {\n    AuthorizationContext context = getMockContext(values);\n    try (RuleBasedAuthorizationPluginBase plugin = createPlugin()) {\n      plugin.init(permissions);\n      AuthorizationResponse authResp = plugin.authorize(context);\n      assertEquals(expected, authResp.statusCode);\n    } catch (IOException e) {\n      ; // swallow error, otherwise a you have to add a _lot_ of exceptions to methods.\n    }\n  }\n\n","sourceOld":"  private void checkRules(Map<String, Object> values, int expected, Map<String ,Object> permissions) {\n    AuthorizationContext context = new MockAuthorizationContext(values);\n    try (RuleBasedAuthorizationPlugin plugin = new RuleBasedAuthorizationPlugin()) {\n      plugin.init(permissions);\n      AuthorizationResponse authResp = plugin.authorize(context);\n      assertEquals(expected, authResp.statusCode);\n    } catch (IOException e) {\n      ; // swallow error, otherwise a you have to add a _lot_ of exceptions to methods.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8076096f334b0665d0a69a63ee98ac09baad402b":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["239a1d4a10c03638628b6aa312f3c64ed9db72d2"],"239a1d4a10c03638628b6aa312f3c64ed9db72d2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8076096f334b0665d0a69a63ee98ac09baad402b"]},"commit2Childs":{"8076096f334b0665d0a69a63ee98ac09baad402b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["239a1d4a10c03638628b6aa312f3c64ed9db72d2"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["8076096f334b0665d0a69a63ee98ac09baad402b"],"239a1d4a10c03638628b6aa312f3c64ed9db72d2":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}