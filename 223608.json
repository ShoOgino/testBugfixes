{"path":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs) throws IOException {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      final StringWriter sw = new StringWriter();\n      \n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, sw);\n        filesPosted++;\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","sourceNew":null,"sourceOld":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs) throws IOException {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      final StringWriter sw = new StringWriter();\n      \n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, sw);\n        filesPosted++;\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","pathOld":"src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","sourceNew":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs) throws IOException {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      final StringWriter sw = new StringWriter();\n      \n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, sw);\n        filesPosted++;\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs) throws IOException {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      final StringWriter sw = new StringWriter();\n      \n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, sw);\n        filesPosted++;\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs) throws IOException {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      final StringWriter sw = new StringWriter();\n      \n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, sw);\n        filesPosted++;\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8217c9a654e7f643e319942262bcf8806545fc98","date":1297114772,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int,OutputStream).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","sourceNew":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs, OutputStream out) {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, out);\n        filesPosted++;\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs) throws IOException {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      final StringWriter sw = new StringWriter();\n      \n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, sw);\n        filesPosted++;\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","sourceNew":null,"sourceOld":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs) throws IOException {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      final StringWriter sw = new StringWriter();\n      \n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, sw);\n        filesPosted++;\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int,OutputStream).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","sourceNew":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs, OutputStream out) {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, out);\n        filesPosted++;\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs) throws IOException {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      final StringWriter sw = new StringWriter();\n      \n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, sw);\n        filesPosted++;\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8217c9a654e7f643e319942262bcf8806545fc98":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","8217c9a654e7f643e319942262bcf8806545fc98"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1da8d55113b689b06716246649de6f62430f15c0","8217c9a654e7f643e319942262bcf8806545fc98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8217c9a654e7f643e319942262bcf8806545fc98"]},"commit2Childs":{"8217c9a654e7f643e319942262bcf8806545fc98":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["8217c9a654e7f643e319942262bcf8806545fc98","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}