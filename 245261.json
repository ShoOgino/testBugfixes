{"path":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogBulkScorer#score(Collector,int).mjava","commits":[{"id":"a5794e5c995c57444b154b01a9f3c837cd530a77","date":1394190201,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogBulkScorer#score(Collector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogTopScorer#score(Collector,int).mjava","sourceNew":"    @Override\n    public boolean score(Collector collector, int maxDoc) throws IOException {\n      // the normalization trick already applies the boost of this query,\n      // so we can use the wrapped scorer directly:\n      collector.setScorer(scorer);\n      int primDoc, secDoc;\n      if (primary.docID() == -1) {\n        primDoc = primary.nextDoc();\n        secDoc = secondary.advance(primDoc);\n      } else {\n        primDoc = primary.docID();\n        secDoc = secondary.docID();\n      }\n      for (;;) {\n        if (primDoc == secDoc) {\n          // Check if scorer has exhausted, only before collecting.\n          if (primDoc >= maxDoc) {\n            return primDoc < Scorer.NO_MORE_DOCS;\n          }\n          collector.collect(primDoc);\n          primDoc = primary.nextDoc();\n          secDoc = secondary.advance(primDoc);\n        } else if (secDoc > primDoc) {\n          primDoc = primary.advance(secDoc);\n        } else {\n          secDoc = secondary.advance(primDoc);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean score(Collector collector, int maxDoc) throws IOException {\n      // the normalization trick already applies the boost of this query,\n      // so we can use the wrapped scorer directly:\n      collector.setScorer(scorer);\n      int primDoc, secDoc;\n      if (primary.docID() == -1) {\n        primDoc = primary.nextDoc();\n        secDoc = secondary.advance(primDoc);\n      } else {\n        primDoc = primary.docID();\n        secDoc = secondary.docID();\n      }\n      for (;;) {\n        if (primDoc == secDoc) {\n          // Check if scorer has exhausted, only before collecting.\n          if (primDoc >= maxDoc) {\n            return primDoc < Scorer.NO_MORE_DOCS;\n          }\n          collector.collect(primDoc);\n          primDoc = primary.nextDoc();\n          secDoc = secondary.advance(primDoc);\n        } else if (secDoc > primDoc) {\n          primDoc = primary.advance(secDoc);\n        } else {\n          secDoc = secondary.advance(primDoc);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c307d500c43658a83e788edf36022a20fa30c15b","date":1394481241,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogBulkScorer#score(Collector,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public boolean score(Collector collector, int maxDoc) throws IOException {\n      // the normalization trick already applies the boost of this query,\n      // so we can use the wrapped scorer directly:\n      collector.setScorer(scorer);\n      int primDoc, secDoc;\n      if (primary.docID() == -1) {\n        primDoc = primary.nextDoc();\n        secDoc = secondary.advance(primDoc);\n      } else {\n        primDoc = primary.docID();\n        secDoc = secondary.docID();\n      }\n      for (;;) {\n        if (primDoc == secDoc) {\n          // Check if scorer has exhausted, only before collecting.\n          if (primDoc >= maxDoc) {\n            return primDoc < Scorer.NO_MORE_DOCS;\n          }\n          collector.collect(primDoc);\n          primDoc = primary.nextDoc();\n          secDoc = secondary.advance(primDoc);\n        } else if (secDoc > primDoc) {\n          primDoc = primary.advance(secDoc);\n        } else {\n          secDoc = secondary.advance(primDoc);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c307d500c43658a83e788edf36022a20fa30c15b":["a5794e5c995c57444b154b01a9f3c837cd530a77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5794e5c995c57444b154b01a9f3c837cd530a77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c307d500c43658a83e788edf36022a20fa30c15b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5794e5c995c57444b154b01a9f3c837cd530a77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5794e5c995c57444b154b01a9f3c837cd530a77":["c307d500c43658a83e788edf36022a20fa30c15b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c307d500c43658a83e788edf36022a20fa30c15b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}