{"path":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeXmlAdapter#transformSimilarity(Document,Map[String,#],String).mjava","commits":[{"id":"9a4cf8d543027e3357024f7005523976bd6a0dfc","date":1434743090,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeXmlAdapter#transformSimilarity(Document,Map[String,#],String).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected static Element transformSimilarity(Document doc, Map<String,?> json, String jsonFieldName) {\n    Object jsonField = json.get(jsonFieldName);\n    if (jsonField == null)\n      return null; // it's ok for this field to not exist in the JSON map\n\n    if (!(jsonField instanceof Map))\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid fieldType definition! Expected JSON object for \"+\n          jsonFieldName+\" not a \"+jsonField.getClass().getName());\n\n    Element similarity = doc.createElement(\"similarity\");\n    appendAttrs(similarity, (Map<String,?>)jsonField);\n    return similarity;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad771c8c8bc422816c3459d9d0776c2f54a4de80"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"64396eddf11b3a487fb2668a9be8fa573dd73f89","date":1489809659,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeXmlAdapter#transformSimilarity(Document,Map[String,#],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeXmlAdapter#transformSimilarity(Document,Map[String,#],String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected static Element transformSimilarity(Document doc, Map<String,?> json, String jsonFieldName) {\n    Object jsonField = json.get(jsonFieldName);\n    if (jsonField == null)\n      return null; // it's ok for this field to not exist in the JSON map\n\n    if (!(jsonField instanceof Map))\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid fieldType definition! Expected JSON object for \"+\n          jsonFieldName+\" not a \"+jsonField.getClass().getName());\n\n    Element similarity = doc.createElement(\"similarity\");\n    Map<String,?> config = (Map<String,?>)jsonField;\n    similarity.setAttribute(SimilarityFactory.CLASS_NAME, (String)config.remove(SimilarityFactory.CLASS_NAME));\n    for (Map.Entry<String,?> entry : config.entrySet()) {\n      Object val = entry.getValue();\n      if (val != null) {\n        Element child = doc.createElement(classToXmlTag(val.getClass()));\n        child.setAttribute(CommonParams.NAME, entry.getKey());\n        child.setTextContent(entry.getValue().toString());\n        similarity.appendChild(child);\n      }\n    }\n    return similarity;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected static Element transformSimilarity(Document doc, Map<String,?> json, String jsonFieldName) {\n    Object jsonField = json.get(jsonFieldName);\n    if (jsonField == null)\n      return null; // it's ok for this field to not exist in the JSON map\n\n    if (!(jsonField instanceof Map))\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid fieldType definition! Expected JSON object for \"+\n          jsonFieldName+\" not a \"+jsonField.getClass().getName());\n\n    Element similarity = doc.createElement(\"similarity\");\n    appendAttrs(similarity, (Map<String,?>)jsonField);\n    return similarity;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad771c8c8bc422816c3459d9d0776c2f54a4de80","date":1490280011,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeXmlAdapter#transformSimilarity(Document,Map[String,#],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeXmlAdapter#transformSimilarity(Document,Map[String,#],String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected static Element transformSimilarity(Document doc, Map<String,?> json, String jsonFieldName) {\n    Object jsonField = json.get(jsonFieldName);\n    if (jsonField == null)\n      return null; // it's ok for this field to not exist in the JSON map\n\n    if (!(jsonField instanceof Map))\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid fieldType definition! Expected JSON object for \"+\n          jsonFieldName+\" not a \"+jsonField.getClass().getName());\n\n    Element similarity = doc.createElement(\"similarity\");\n    Map<String,?> config = (Map<String,?>)jsonField;\n    similarity.setAttribute(SimilarityFactory.CLASS_NAME, (String)config.remove(SimilarityFactory.CLASS_NAME));\n    for (Map.Entry<String,?> entry : config.entrySet()) {\n      Object val = entry.getValue();\n      if (val != null) {\n        Element child = doc.createElement(classToXmlTag(val.getClass()));\n        child.setAttribute(CommonParams.NAME, entry.getKey());\n        child.setTextContent(entry.getValue().toString());\n        similarity.appendChild(child);\n      }\n    }\n    return similarity;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected static Element transformSimilarity(Document doc, Map<String,?> json, String jsonFieldName) {\n    Object jsonField = json.get(jsonFieldName);\n    if (jsonField == null)\n      return null; // it's ok for this field to not exist in the JSON map\n\n    if (!(jsonField instanceof Map))\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid fieldType definition! Expected JSON object for \"+\n          jsonFieldName+\" not a \"+jsonField.getClass().getName());\n\n    Element similarity = doc.createElement(\"similarity\");\n    appendAttrs(similarity, (Map<String,?>)jsonField);\n    return similarity;\n  }\n\n","bugFix":["9a4cf8d543027e3357024f7005523976bd6a0dfc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64396eddf11b3a487fb2668a9be8fa573dd73f89":["9a4cf8d543027e3357024f7005523976bd6a0dfc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9a4cf8d543027e3357024f7005523976bd6a0dfc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad771c8c8bc422816c3459d9d0776c2f54a4de80":["9a4cf8d543027e3357024f7005523976bd6a0dfc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64396eddf11b3a487fb2668a9be8fa573dd73f89"]},"commit2Childs":{"64396eddf11b3a487fb2668a9be8fa573dd73f89":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a4cf8d543027e3357024f7005523976bd6a0dfc"],"9a4cf8d543027e3357024f7005523976bd6a0dfc":["64396eddf11b3a487fb2668a9be8fa573dd73f89","ad771c8c8bc422816c3459d9d0776c2f54a4de80"],"ad771c8c8bc422816c3459d9d0776c2f54a4de80":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad771c8c8bc422816c3459d9d0776c2f54a4de80","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}