{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#WordDelimiterIterator(byte[],boolean,boolean,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#WordDelimiterIterator(byte[],boolean,boolean,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#WordDelimiterIterator(byte[],boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Create a new WordDelimiterIterator operating with the supplied rules.\n   * \n   * @param charTypeTable table containing character types\n   * @param splitOnCaseChange if true, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param splitOnNumerics if true, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive if true, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   */\n  WordDelimiterIterator(byte[] charTypeTable, boolean splitOnCaseChange, boolean splitOnNumerics, boolean stemEnglishPossessive) {\n    this.charTypeTable = charTypeTable;\n    this.splitOnCaseChange = splitOnCaseChange;\n    this.splitOnNumerics = splitOnNumerics;\n    this.stemEnglishPossessive = stemEnglishPossessive;\n  }\n\n","sourceOld":"  /**\n   * Create a new WordDelimiterIterator operating with the supplied rules.\n   * \n   * @param charTypeTable table containing character types\n   * @param splitOnCaseChange if true, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param splitOnNumerics if true, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive if true, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   */\n  WordDelimiterIterator(byte[] charTypeTable, boolean splitOnCaseChange, boolean splitOnNumerics, boolean stemEnglishPossessive) {\n    this.charTypeTable = charTypeTable;\n    this.splitOnCaseChange = splitOnCaseChange;\n    this.splitOnNumerics = splitOnNumerics;\n    this.stemEnglishPossessive = stemEnglishPossessive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#WordDelimiterIterator(byte[],boolean,boolean,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#WordDelimiterIterator(byte[],boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Create a new WordDelimiterIterator operating with the supplied rules.\n   * \n   * @param charTypeTable table containing character types\n   * @param splitOnCaseChange if true, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param splitOnNumerics if true, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive if true, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" =&gt; \"O\", \"Neil\"\n   */\n  WordDelimiterIterator(byte[] charTypeTable, boolean splitOnCaseChange, boolean splitOnNumerics, boolean stemEnglishPossessive) {\n    this.charTypeTable = charTypeTable;\n    this.splitOnCaseChange = splitOnCaseChange;\n    this.splitOnNumerics = splitOnNumerics;\n    this.stemEnglishPossessive = stemEnglishPossessive;\n  }\n\n","sourceOld":"  /**\n   * Create a new WordDelimiterIterator operating with the supplied rules.\n   * \n   * @param charTypeTable table containing character types\n   * @param splitOnCaseChange if true, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param splitOnNumerics if true, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive if true, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   */\n  WordDelimiterIterator(byte[] charTypeTable, boolean splitOnCaseChange, boolean splitOnNumerics, boolean stemEnglishPossessive) {\n    this.charTypeTable = charTypeTable;\n    this.splitOnCaseChange = splitOnCaseChange;\n    this.splitOnNumerics = splitOnNumerics;\n    this.stemEnglishPossessive = stemEnglishPossessive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"098528909bb70948871fd7ed865fafb87ed73964","date":1484667487,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#WordDelimiterIterator(byte[],boolean,boolean,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#WordDelimiterIterator(byte[],boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Create a new WordDelimiterIterator operating with the supplied rules.\n   * \n   * @param charTypeTable table containing character types\n   * @param splitOnCaseChange if true, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regardless)\n   * @param splitOnNumerics if true, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive if true, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" =&gt; \"O\", \"Neil\"\n   */\n  WordDelimiterIterator(byte[] charTypeTable, boolean splitOnCaseChange, boolean splitOnNumerics, boolean stemEnglishPossessive) {\n    this.charTypeTable = charTypeTable;\n    this.splitOnCaseChange = splitOnCaseChange;\n    this.splitOnNumerics = splitOnNumerics;\n    this.stemEnglishPossessive = stemEnglishPossessive;\n  }\n\n","sourceOld":"  /**\n   * Create a new WordDelimiterIterator operating with the supplied rules.\n   * \n   * @param charTypeTable table containing character types\n   * @param splitOnCaseChange if true, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param splitOnNumerics if true, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive if true, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" =&gt; \"O\", \"Neil\"\n   */\n  WordDelimiterIterator(byte[] charTypeTable, boolean splitOnCaseChange, boolean splitOnNumerics, boolean stemEnglishPossessive) {\n    this.charTypeTable = charTypeTable;\n    this.splitOnCaseChange = splitOnCaseChange;\n    this.splitOnNumerics = splitOnNumerics;\n    this.stemEnglishPossessive = stemEnglishPossessive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#WordDelimiterIterator(byte[],boolean,boolean,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#WordDelimiterIterator(byte[],boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Create a new WordDelimiterIterator operating with the supplied rules.\n   * \n   * @param charTypeTable table containing character types\n   * @param splitOnCaseChange if true, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regardless)\n   * @param splitOnNumerics if true, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive if true, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" =&gt; \"O\", \"Neil\"\n   */\n  WordDelimiterIterator(byte[] charTypeTable, boolean splitOnCaseChange, boolean splitOnNumerics, boolean stemEnglishPossessive) {\n    this.charTypeTable = charTypeTable;\n    this.splitOnCaseChange = splitOnCaseChange;\n    this.splitOnNumerics = splitOnNumerics;\n    this.stemEnglishPossessive = stemEnglishPossessive;\n  }\n\n","sourceOld":"  /**\n   * Create a new WordDelimiterIterator operating with the supplied rules.\n   * \n   * @param charTypeTable table containing character types\n   * @param splitOnCaseChange if true, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param splitOnNumerics if true, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive if true, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" =&gt; \"O\", \"Neil\"\n   */\n  WordDelimiterIterator(byte[] charTypeTable, boolean splitOnCaseChange, boolean splitOnNumerics, boolean stemEnglishPossessive) {\n    this.charTypeTable = charTypeTable;\n    this.splitOnCaseChange = splitOnCaseChange;\n    this.splitOnNumerics = splitOnNumerics;\n    this.stemEnglishPossessive = stemEnglishPossessive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"098528909bb70948871fd7ed865fafb87ed73964":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["098528909bb70948871fd7ed865fafb87ed73964"],"302d34f2c66e8d489ee13078305c330cbf67b226":["b1eb427f2c6beed80d1724555fc1db003ccf3030","098528909bb70948871fd7ed865fafb87ed73964"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["098528909bb70948871fd7ed865fafb87ed73964","302d34f2c66e8d489ee13078305c330cbf67b226"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"098528909bb70948871fd7ed865fafb87ed73964":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}