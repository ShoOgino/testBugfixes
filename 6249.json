{"path":"lucene/src/java/org/apache/lucene/util/CharsRef.UTF16SortedAsUTF8Comparator#compare(CharsRef,CharsRef).mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/CharsRef.UTF16SortedAsUTF8Comparator#compare(CharsRef,CharsRef).mjava","pathOld":"/dev/null","sourceNew":"    public int compare(CharsRef a, CharsRef b) {\n      if (a == b)\n        return 0;\n\n      final char[] aChars = a.chars;\n      int aUpto = a.offset;\n      final char[] bChars = b.chars;\n      int bUpto = b.offset;\n\n      final int aStop = aUpto + Math.min(a.length, b.length);\n\n      while (aUpto < aStop) {\n        char aChar = aChars[aUpto++];\n        char bChar = bChars[bUpto++];\n        if (aChar != bChar) {\n          // http://icu-project.org/docs/papers/utf16_code_point_order.html\n          \n          /* aChar != bChar, fix up each one if they're both in or above the surrogate range, then compare them */\n          if (aChar >= 0xd800 && bChar >= 0xd800) {\n            if (aChar >= 0xe000) {\n              aChar -= 0x800;\n            } else {\n              aChar += 0x2000;\n            }\n            \n            if (bChar >= 0xe000) {\n              bChar -= 0x800;\n            } else {\n              bChar += 0x2000;\n            }\n          }\n          \n          /* now aChar and bChar are in code point order */\n          return (int)aChar - (int)bChar; /* int must be 32 bits wide */\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CharsRef.UTF16SortedAsUTF8Comparator#compare(CharsRef,CharsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CharsRef.UTF16SortedAsUTF8Comparator#compare(CharsRef,CharsRef).mjava","sourceNew":"    public int compare(CharsRef a, CharsRef b) {\n      if (a == b)\n        return 0;\n\n      final char[] aChars = a.chars;\n      int aUpto = a.offset;\n      final char[] bChars = b.chars;\n      int bUpto = b.offset;\n\n      final int aStop = aUpto + Math.min(a.length, b.length);\n\n      while (aUpto < aStop) {\n        char aChar = aChars[aUpto++];\n        char bChar = bChars[bUpto++];\n        if (aChar != bChar) {\n          // http://icu-project.org/docs/papers/utf16_code_point_order.html\n          \n          /* aChar != bChar, fix up each one if they're both in or above the surrogate range, then compare them */\n          if (aChar >= 0xd800 && bChar >= 0xd800) {\n            if (aChar >= 0xe000) {\n              aChar -= 0x800;\n            } else {\n              aChar += 0x2000;\n            }\n            \n            if (bChar >= 0xe000) {\n              bChar -= 0x800;\n            } else {\n              bChar += 0x2000;\n            }\n          }\n          \n          /* now aChar and bChar are in code point order */\n          return (int)aChar - (int)bChar; /* int must be 32 bits wide */\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","sourceOld":"    public int compare(CharsRef a, CharsRef b) {\n      if (a == b)\n        return 0;\n\n      final char[] aChars = a.chars;\n      int aUpto = a.offset;\n      final char[] bChars = b.chars;\n      int bUpto = b.offset;\n\n      final int aStop = aUpto + Math.min(a.length, b.length);\n\n      while (aUpto < aStop) {\n        char aChar = aChars[aUpto++];\n        char bChar = bChars[bUpto++];\n        if (aChar != bChar) {\n          // http://icu-project.org/docs/papers/utf16_code_point_order.html\n          \n          /* aChar != bChar, fix up each one if they're both in or above the surrogate range, then compare them */\n          if (aChar >= 0xd800 && bChar >= 0xd800) {\n            if (aChar >= 0xe000) {\n              aChar -= 0x800;\n            } else {\n              aChar += 0x2000;\n            }\n            \n            if (bChar >= 0xe000) {\n              bChar -= 0x800;\n            } else {\n              bChar += 0x2000;\n            }\n          }\n          \n          /* now aChar and bChar are in code point order */\n          return (int)aChar - (int)bChar; /* int must be 32 bits wide */\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}