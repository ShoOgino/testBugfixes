{"path":"src/test/org/apache/solr/analysis/TestSynonymFilter#testOverlap().mjava","commits":[{"id":"0d3072fffb39e4aa50fce38815821919b35fc194","date":1138579199,"type":0,"author":"Yoav Shapira","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymFilter#testOverlap().mjava","pathOld":"/dev/null","sourceNew":"  public void testOverlap() throws IOException {\r\n    SynonymMap map = new SynonymMap();\r\n\r\n    boolean orig = false;\r\n    boolean merge = true;\r\n    map.add(strings(\"qwe\"), tokens(\"qq/ww/ee\"), orig, merge);\r\n    map.add(strings(\"qwe\"), tokens(\"xx\"), orig, merge);\r\n    map.add(strings(\"qwe\"), tokens(\"yy\"), orig, merge);\r\n    map.add(strings(\"qwe\"), tokens(\"zz\"), orig, merge);\r\n    assertTokEqual(getTokList(map,\"$\",false), tokens(\"$\"));\r\n    assertTokEqual(getTokList(map,\"qwe\",false), tokens(\"qq/ww/ee/xx/yy/zz\"));\r\n\r\n    // test merging within the map\r\n\r\n    map.add(strings(\"a\"), tokens(\"a5,5 a8,3 a10,2\"), orig, merge);\r\n    map.add(strings(\"a\"), tokens(\"a3,3 a7,4 a9,2 a11,2 a111,100\"), orig, merge);\r\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a3 a5,2 a7,2 a8 a9 a10 a11 a111,100\"));\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c1781d63ce2d5e979c8b3f35682b60a86f5df553"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1781d63ce2d5e979c8b3f35682b60a86f5df553","date":1153254917,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymFilter#testOverlap().mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#testOverlap().mjava","sourceNew":"  public void testOverlap() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"qwe\"), tokens(\"qq/ww/ee\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"xx\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"yy\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"zz\"), orig, merge);\n    assertTokEqual(getTokList(map,\"$\",false), tokens(\"$\"));\n    assertTokEqual(getTokList(map,\"qwe\",false), tokens(\"qq/ww/ee/xx/yy/zz\"));\n\n    // test merging within the map\n\n    map.add(strings(\"a\"), tokens(\"a5,5 a8,3 a10,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3 a7,4 a9,2 a11,2 a111,100\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a3 a5,2 a7,2 a8 a9 a10 a11 a111,100\"));\n  }\n\n","sourceOld":"  public void testOverlap() throws IOException {\r\n    SynonymMap map = new SynonymMap();\r\n\r\n    boolean orig = false;\r\n    boolean merge = true;\r\n    map.add(strings(\"qwe\"), tokens(\"qq/ww/ee\"), orig, merge);\r\n    map.add(strings(\"qwe\"), tokens(\"xx\"), orig, merge);\r\n    map.add(strings(\"qwe\"), tokens(\"yy\"), orig, merge);\r\n    map.add(strings(\"qwe\"), tokens(\"zz\"), orig, merge);\r\n    assertTokEqual(getTokList(map,\"$\",false), tokens(\"$\"));\r\n    assertTokEqual(getTokList(map,\"qwe\",false), tokens(\"qq/ww/ee/xx/yy/zz\"));\r\n\r\n    // test merging within the map\r\n\r\n    map.add(strings(\"a\"), tokens(\"a5,5 a8,3 a10,2\"), orig, merge);\r\n    map.add(strings(\"a\"), tokens(\"a3,3 a7,4 a9,2 a11,2 a111,100\"), orig, merge);\r\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a3 a5,2 a7,2 a8 a9 a10 a11 a111,100\"));\r\n  }\r\n\n","bugFix":["0d3072fffb39e4aa50fce38815821919b35fc194"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymFilter#testOverlap().mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#testOverlap().mjava","sourceNew":"  public void testOverlap() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"qwe\"), tokens(\"qq/ww/ee\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"xx\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"yy\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"zz\"), orig, merge);\n    assertTokenizesTo(map, \"$\", new String[] { \"$\" });\n    assertTokenizesTo(map, \"qwe\",\n        new String[] { \"qq\", \"ww\", \"ee\", \"xx\", \"yy\", \"zz\" },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n\n    // test merging within the map\n\n    map.add(strings(\"a\"), tokens(\"a5,5 a8,3 a10,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3 a7,4 a9,2 a11,2 a111,100\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"a5\", \"a7\", \"a8\", \"a9\", \"a10\", \"a11\", \"a111\" },\n        new int[] { 1, 2, 2, 1, 1, 1, 1, 100 });\n  }\n\n","sourceOld":"  public void testOverlap() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"qwe\"), tokens(\"qq/ww/ee\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"xx\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"yy\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"zz\"), orig, merge);\n    assertTokEqual(getTokList(map,\"$\",false), tokens(\"$\"));\n    assertTokEqual(getTokList(map,\"qwe\",false), tokens(\"qq/ww/ee/xx/yy/zz\"));\n\n    // test merging within the map\n\n    map.add(strings(\"a\"), tokens(\"a5,5 a8,3 a10,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3 a7,4 a9,2 a11,2 a111,100\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a3 a5,2 a7,2 a8 a9 a10 a11 a111,100\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#testOverlap().mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#testOverlap().mjava","sourceNew":"  public void testOverlap() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"qwe\"), tokens(\"qq/ww/ee\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"xx\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"yy\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"zz\"), orig, merge);\n    assertTokenizesTo(map, \"$\", new String[] { \"$\" });\n    assertTokenizesTo(map, \"qwe\",\n        new String[] { \"qq\", \"ww\", \"ee\", \"xx\", \"yy\", \"zz\" },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n\n    // test merging within the map\n\n    map.add(strings(\"a\"), tokens(\"a5,5 a8,3 a10,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3 a7,4 a9,2 a11,2 a111,100\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"a5\", \"a7\", \"a8\", \"a9\", \"a10\", \"a11\", \"a111\" },\n        new int[] { 1, 2, 2, 1, 1, 1, 1, 100 });\n  }\n\n","sourceOld":"  public void testOverlap() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"qwe\"), tokens(\"qq/ww/ee\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"xx\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"yy\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"zz\"), orig, merge);\n    assertTokenizesTo(map, \"$\", new String[] { \"$\" });\n    assertTokenizesTo(map, \"qwe\",\n        new String[] { \"qq\", \"ww\", \"ee\", \"xx\", \"yy\", \"zz\" },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n\n    // test merging within the map\n\n    map.add(strings(\"a\"), tokens(\"a5,5 a8,3 a10,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3 a7,4 a9,2 a11,2 a111,100\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"a5\", \"a7\", \"a8\", \"a9\", \"a10\", \"a11\", \"a111\" },\n        new int[] { 1, 2, 2, 1, 1, 1, 1, 100 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"c1781d63ce2d5e979c8b3f35682b60a86f5df553":["0d3072fffb39e4aa50fce38815821919b35fc194"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["c1781d63ce2d5e979c8b3f35682b60a86f5df553"],"0d3072fffb39e4aa50fce38815821919b35fc194":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0d3072fffb39e4aa50fce38815821919b35fc194"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c1781d63ce2d5e979c8b3f35682b60a86f5df553":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["ad94625fb8d088209f46650c8097196fec67f00c"],"0d3072fffb39e4aa50fce38815821919b35fc194":["c1781d63ce2d5e979c8b3f35682b60a86f5df553"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}