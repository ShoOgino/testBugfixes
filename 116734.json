{"path":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","commits":[{"id":"36c824914fabbfc6693498179c7b3ccc56faa3e1","date":1163805820,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.list();\n\n    /*\n    for(int i=0;i<files.length;i++) {\n      System.out.println(i + \": \" + files[i]);\n    }\n    */\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.s0\", \"_2_2.s0\");\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.s0\", \"_2_2.f0\");\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.s0\", \"_1_1.s0\");\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.s0\", \"_1_1.f0\");\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_a\", \"segments\");\n    copyFile(dir, \"segments_a\", \"segments_2\");\n\n    String[] filesPre = dir.list();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.close();\n\n    String[] files2 = dir.list();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d54c7739bfe85d68f0352823cd70c10c619fad38","d54c7739bfe85d68f0352823cd70c10c619fad38"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c86a85bad36cce1f63303b1e515590eec6e1b9","date":1164109784,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#_testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void _testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.list();\n\n    /*\n    for(int i=0;i<files.length;i++) {\n      System.out.println(i + \": \" + files[i]);\n    }\n    */\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.s0\", \"_2_2.s0\");\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.s0\", \"_2_2.f0\");\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.s0\", \"_1_1.s0\");\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.s0\", \"_1_1.f0\");\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_a\", \"segments\");\n    copyFile(dir, \"segments_a\", \"segments_2\");\n\n    String[] filesPre = dir.list();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.close();\n\n    String[] files2 = dir.list();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.list();\n\n    /*\n    for(int i=0;i<files.length;i++) {\n      System.out.println(i + \": \" + files[i]);\n    }\n    */\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.s0\", \"_2_2.s0\");\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.s0\", \"_2_2.f0\");\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.s0\", \"_1_1.s0\");\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.s0\", \"_1_1.f0\");\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_a\", \"segments\");\n    copyFile(dir, \"segments_a\", \"segments_2\");\n\n    String[] filesPre = dir.list();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.close();\n\n    String[] files2 = dir.list();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dae2e3479e918a138a16fa9ff2c269113eaa15a8","date":1164214891,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#_testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.list();\n\n    /*\n    for(int i=0;i<files.length;i++) {\n      System.out.println(i + \": \" + files[i]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(int i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_a\", \"segments\");\n    copyFile(dir, \"segments_a\", \"segments_2\");\n\n    String[] filesPre = dir.list();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.close();\n\n    String[] files2 = dir.list();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","sourceOld":"  public void _testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.list();\n\n    /*\n    for(int i=0;i<files.length;i++) {\n      System.out.println(i + \": \" + files[i]);\n    }\n    */\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.s0\", \"_2_2.s0\");\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.s0\", \"_2_2.f0\");\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.s0\", \"_1_1.s0\");\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.s0\", \"_1_1.f0\");\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_a\", \"segments\");\n    copyFile(dir, \"segments_a\", \"segments_2\");\n\n    String[] filesPre = dir.list();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.close();\n\n    String[] files2 = dir.list();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da0ce5f4b07366fc8a697347439179a273c8fcff","date":1164215220,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.list();\n\n    /*\n    for(int i=0;i<files.length;i++) {\n      System.out.println(i + \": \" + files[i]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(int i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_a\", \"segments\");\n    copyFile(dir, \"segments_a\", \"segments_2\");\n\n    String[] filesPre = dir.list();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.close();\n\n    String[] files2 = dir.list();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.list();\n\n    /*\n    for(int i=0;i<files.length;i++) {\n      System.out.println(i + \": \" + files[i]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(int i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_a\", \"segments\");\n    copyFile(dir, \"segments_a\", \"segments_2\");\n\n    String[] filesPre = dir.list();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.close();\n\n    String[] files2 = dir.list();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eeefd99c477417e5c7c574228461ebafe92469d4","date":1166460329,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.list();\n\n    /*\n    for(int i=0;i<files.length;i++) {\n      System.out.println(i + \": \" + files[i]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_a\", \"segments\");\n    copyFile(dir, \"segments_a\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.list();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.close();\n\n    String[] files2 = dir.list();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.list();\n\n    /*\n    for(int i=0;i<files.length;i++) {\n      System.out.println(i + \": \" + files[i]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(int i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_a\", \"segments\");\n    copyFile(dir, \"segments_a\", \"segments_2\");\n\n    String[] filesPre = dir.list();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.close();\n\n    String[] files2 = dir.list();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.list();\n\n    /*\n    for(int i=0;i<files.length;i++) {\n      System.out.println(i + \": \" + files[i]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_a\", \"segments\");\n    copyFile(dir, \"segments_a\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.list();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.close();\n\n    String[] files2 = dir.list();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.list();\n\n    /*\n    for(int i=0;i<files.length;i++) {\n      System.out.println(i + \": \" + files[i]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_a\", \"segments\");\n    copyFile(dir, \"segments_a\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.list();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.close();\n\n    String[] files2 = dir.list();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.list();\n\n    /*\n    for(int i=0;i<files.length;i++) {\n      System.out.println(i + \": \" + files[i]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_a\", \"segments\");\n    copyFile(dir, \"segments_a\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.list();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.list();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.list();\n\n    /*\n    for(int i=0;i<files.length;i++) {\n      System.out.println(i + \": \" + files[i]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_a\", \"segments\");\n    copyFile(dir, \"segments_a\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.list();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.close();\n\n    String[] files2 = dir.list();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.list();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.list();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.list();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.list();\n\n    /*\n    for(int i=0;i<files.length;i++) {\n      System.out.println(i + \": \" + files[i]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_a\", \"segments\");\n    copyFile(dir, \"segments_a\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.list();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.list();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d54c7739bfe85d68f0352823cd70c10c619fad38","date":1228496593,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.list();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.list();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.list();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","bugFix":["36c824914fabbfc6693498179c7b3ccc56faa3e1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n\n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set<String> dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set<String> dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set<String> dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set<String> dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set<String> dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10));\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set<String> dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set<String> dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set<String> dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10));\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set<String> dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set<String> dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    writer.setUseCompoundFile(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set<String> dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexFileDeleter#testDeleteLeftoverFiles().mjava","sourceNew":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set<String> dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","sourceOld":"  public void testDeleteLeftoverFiles() throws IOException {\n\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    int i;\n    for(i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    for(;i<45;i++) {\n      addDoc(writer, i);\n    }\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now, artificially create an extra .del file & extra\n    // .s0 file:\n    String[] files = dir.listAll();\n\n    /*\n    for(int j=0;j<files.length;j++) {\n      System.out.println(j + \": \" + files[j]);\n    }\n    */\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    String normSuffix = \"s\" + contentFieldIndex;\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that actually has a separate norms file\n    // already, using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_2_2.f\" + contentFieldIndex);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.\" + normSuffix);\n\n    // Create a bogus separate norms file for a\n    // segment/field that does not have a separate norms\n    // file already using the \"not compound file\" extension:\n    copyFile(dir, \"_2_1.\" + normSuffix, \"_1_1.f\" + contentFieldIndex);\n\n    // Create a bogus separate del file for a\n    // segment that already has a separate del file: \n    copyFile(dir, \"_0_1.del\", \"_0_2.del\");\n\n    // Create a bogus separate del file for a\n    // segment that does not yet have a separate del file:\n    copyFile(dir, \"_0_1.del\", \"_1_1.del\");\n\n    // Create a bogus separate del file for a\n    // non-existent segment:\n    copyFile(dir, \"_0_1.del\", \"_188_1.del\");\n\n    // Create a bogus segment file:\n    copyFile(dir, \"_0.cfs\", \"_188.cfs\");\n\n    // Create a bogus fnm file when the CFS already exists:\n    copyFile(dir, \"_0.cfs\", \"_0.fnm\");\n\n    // Create a deletable file:\n    copyFile(dir, \"_0.cfs\", \"deletable\");\n\n    // Create some old segments file:\n    copyFile(dir, \"segments_3\", \"segments\");\n    copyFile(dir, \"segments_3\", \"segments_2\");\n\n    // Create a bogus cfs file shadowing a non-cfs segment:\n    copyFile(dir, \"_2.cfs\", \"_3.cfs\");\n\n    String[] filesPre = dir.listAll();\n\n    // Open & close a writer: it should delete the above 4\n    // files and nothing more:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.close();\n\n    String[] files2 = dir.listAll();\n    dir.close();\n\n    Arrays.sort(files);\n    Arrays.sort(files2);\n    \n    Set<String> dif = difFiles(files, files2);\n    \n    if (!Arrays.equals(files, files2)) {\n      fail(\"IndexFileDeleter failed to delete unreferenced extra files: should have deleted \" + (filesPre.length-files.length) + \" files but only deleted \" + (filesPre.length - files2.length) + \"; expected files:\\n    \" + asString(files) + \"\\n  actual files:\\n    \" + asString(files2)+\"\\ndif: \"+dif);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da0ce5f4b07366fc8a697347439179a273c8fcff":["dae2e3479e918a138a16fa9ff2c269113eaa15a8"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["c4ff8864209d2e972cb4393600c26082f9a6533d","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["0a046c0c310bc77931fc8441bd920053b607dd14"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["eeefd99c477417e5c7c574228461ebafe92469d4"],"d54c7739bfe85d68f0352823cd70c10c619fad38":["e82780afe6097066eb5befb86e9432f077667e3d"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"eeefd99c477417e5c7c574228461ebafe92469d4":["da0ce5f4b07366fc8a697347439179a273c8fcff"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"36c824914fabbfc6693498179c7b3ccc56faa3e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dae2e3479e918a138a16fa9ff2c269113eaa15a8":["30c86a85bad36cce1f63303b1e515590eec6e1b9"],"30c86a85bad36cce1f63303b1e515590eec6e1b9":["36c824914fabbfc6693498179c7b3ccc56faa3e1"],"e82780afe6097066eb5befb86e9432f077667e3d":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"da0ce5f4b07366fc8a697347439179a273c8fcff":["eeefd99c477417e5c7c574228461ebafe92469d4"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["e82780afe6097066eb5befb86e9432f077667e3d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"d54c7739bfe85d68f0352823cd70c10c619fad38":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"eeefd99c477417e5c7c574228461ebafe92469d4":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"36c824914fabbfc6693498179c7b3ccc56faa3e1":["30c86a85bad36cce1f63303b1e515590eec6e1b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36c824914fabbfc6693498179c7b3ccc56faa3e1"],"dae2e3479e918a138a16fa9ff2c269113eaa15a8":["da0ce5f4b07366fc8a697347439179a273c8fcff"],"30c86a85bad36cce1f63303b1e515590eec6e1b9":["dae2e3479e918a138a16fa9ff2c269113eaa15a8"],"e82780afe6097066eb5befb86e9432f077667e3d":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}