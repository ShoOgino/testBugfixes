{"path":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testD().mjava","commits":[{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testD().mjava","pathOld":"/dev/null","sourceNew":"  /** Correctness test for the D DFR model (basic model only). */\n  public void testD() throws IOException {\n    SimilarityBase sim = new DFRSimilarity(new BasicModelD(), new AfterEffect.NoAfterEffect(), new Normalization.NoNormalization());\n    double totalTermFreqNorm = TOTAL_TERM_FREQ + FREQ;\n    double p = 1.0 / (NUMBER_OF_DOCUMENTS + 1);                // 0.009900990099\n    double phi = FREQ / totalTermFreqNorm;                       // 0.09090909090909091\n    double D = phi * SimilarityBase.log2(phi / p) +            // 0.17884523239871358\n              (1 - phi) * SimilarityBase.log2((1 - phi) / (1 - p));\n    float gold = (float)(totalTermFreqNorm * D + 0.5 * SimilarityBase.log2(\n                 1 + 2 * Math.PI * FREQ * (1 - phi)));         // 16.449575\n    correctnessTestCore(sim, gold);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c5c06a413042e52dc241808ed12b0a1324acaffd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5c06a413042e52dc241808ed12b0a1324acaffd","date":1315790003,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testD().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testD().mjava","sourceNew":"  /** Correctness test for the D DFR model (basic model only). */\n  public void testD() throws IOException {\n    SimilarityBase sim = new DFRSimilarity(new BasicModelD(), new AfterEffect.NoAfterEffect(), new Normalization.NoNormalization());\n    double totalTermFreqNorm = TOTAL_TERM_FREQ + FREQ + 1;\n    double p = 1.0 / (NUMBER_OF_DOCUMENTS + 1);                // 0.009900990099009901\n    double phi = FREQ / totalTermFreqNorm;                       // 0.08974358974358974\n    double D = phi * SimilarityBase.log2(phi / p) +            // 0.17498542370019005\n              (1 - phi) * SimilarityBase.log2((1 - phi) / (1 - p));\n    float gold = (float)(totalTermFreqNorm * D + 0.5 * SimilarityBase.log2(\n                 1 + 2 * Math.PI * FREQ * (1 - phi)));         // 16.328257\n    correctnessTestCore(sim, gold);\n  }\n\n","sourceOld":"  /** Correctness test for the D DFR model (basic model only). */\n  public void testD() throws IOException {\n    SimilarityBase sim = new DFRSimilarity(new BasicModelD(), new AfterEffect.NoAfterEffect(), new Normalization.NoNormalization());\n    double totalTermFreqNorm = TOTAL_TERM_FREQ + FREQ;\n    double p = 1.0 / (NUMBER_OF_DOCUMENTS + 1);                // 0.009900990099\n    double phi = FREQ / totalTermFreqNorm;                       // 0.09090909090909091\n    double D = phi * SimilarityBase.log2(phi / p) +            // 0.17884523239871358\n              (1 - phi) * SimilarityBase.log2((1 - phi) / (1 - p));\n    float gold = (float)(totalTermFreqNorm * D + 0.5 * SimilarityBase.log2(\n                 1 + 2 * Math.PI * FREQ * (1 - phi)));         // 16.449575\n    correctnessTestCore(sim, gold);\n  }\n\n","bugFix":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testD().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testD().mjava","sourceNew":"  /** Correctness test for the D DFR model (basic model only). */\n  public void testD() throws IOException {\n    SimilarityBase sim = new DFRSimilarity(new BasicModelD(), new AfterEffect.NoAfterEffect(), new Normalization.NoNormalization());\n    double totalTermFreqNorm = TOTAL_TERM_FREQ + FREQ + 1;\n    double p = 1.0 / (NUMBER_OF_DOCUMENTS + 1);                // 0.009900990099009901\n    double phi = FREQ / totalTermFreqNorm;                       // 0.08974358974358974\n    double D = phi * SimilarityBase.log2(phi / p) +            // 0.17498542370019005\n              (1 - phi) * SimilarityBase.log2((1 - phi) / (1 - p));\n    float gold = (float)(totalTermFreqNorm * D + 0.5 * SimilarityBase.log2(\n                 1 + 2 * Math.PI * FREQ * (1 - phi)));         // 16.328257\n    correctnessTestCore(sim, gold);\n  }\n\n","sourceOld":"  /** Correctness test for the D DFR model (basic model only). */\n  public void testD() throws IOException {\n    SimilarityBase sim = new DFRSimilarity(new BasicModelD(), new AfterEffect.NoAfterEffect(), new Normalization.NoNormalization());\n    double totalTermFreqNorm = TOTAL_TERM_FREQ + FREQ + 1;\n    double p = 1.0 / (NUMBER_OF_DOCUMENTS + 1);                // 0.009900990099009901\n    double phi = FREQ / totalTermFreqNorm;                       // 0.08974358974358974\n    double D = phi * SimilarityBase.log2(phi / p) +            // 0.17498542370019005\n              (1 - phi) * SimilarityBase.log2((1 - phi) / (1 - p));\n    float gold = (float)(totalTermFreqNorm * D + 0.5 * SimilarityBase.log2(\n                 1 + 2 * Math.PI * FREQ * (1 - phi)));         // 16.328257\n    correctnessTestCore(sim, gold);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c5c06a413042e52dc241808ed12b0a1324acaffd"],"c5c06a413042e52dc241808ed12b0a1324acaffd":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c5c06a413042e52dc241808ed12b0a1324acaffd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["c5c06a413042e52dc241808ed12b0a1324acaffd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}