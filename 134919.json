{"path":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","commits":[{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * By default QueryParser uses {@link org.apache.lucene.search.MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it\n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score\n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * By default QueryParser uses {@link org.apache.lucene.search.MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it\n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score\n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default QueryParser uses {@link org.apache.lucene.search.MultiTermQuery#CONSTANT_SCORE_FILTER_REWRITE}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it\n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score\n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","sourceOld":"  /**\n   * By default QueryParser uses {@link org.apache.lucene.search.MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it\n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score\n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default QueryParser uses {@link org.apache.lucene.search.MultiTermQuery#CONSTANT_SCORE_FILTER_REWRITE}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it\n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score\n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","sourceOld":"  /**\n   * By default QueryParser uses {@link org.apache.lucene.search.MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it\n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score\n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default QueryParser uses {@link org.apache.lucene.search.MultiTermQuery#CONSTANT_SCORE_REWRITE}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it\n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score\n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","sourceOld":"  /**\n   * By default QueryParser uses {@link org.apache.lucene.search.MultiTermQuery#CONSTANT_SCORE_FILTER_REWRITE}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it\n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score\n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default QueryParser uses {@link org.apache.lucene.search.MultiTermQuery#CONSTANT_SCORE_REWRITE}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it\n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score\n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","sourceOld":"  /**\n   * By default QueryParser uses {@link org.apache.lucene.search.MultiTermQuery#CONSTANT_SCORE_FILTER_REWRITE}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it\n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score\n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","2713584a660051cd646423be682771e3bbd99985"],"2713584a660051cd646423be682771e3bbd99985":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"3cdb67100dc016748799a77218aa409478372d79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb67100dc016748799a77218aa409478372d79"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["3cdb67100dc016748799a77218aa409478372d79","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["3cdb67100dc016748799a77218aa409478372d79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","407687e67faf6e1f02a211ca078d8e3eed631027","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}