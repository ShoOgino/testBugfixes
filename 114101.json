{"path":"solr/src/java/org/apache/solr/util/BCDUtils#base10toBase10kSortableInt(char[],int,int,char[],int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/BCDUtils#base10toBase10kSortableInt(char[],int,int,char[],int).mjava","pathOld":"/dev/null","sourceNew":"  public static int base10toBase10kSortableInt(char[] arr, int start, int end,\n                                               char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n    --end;  // position end pointer *on* the last char\n\n    // read signs and leading zeros\n    while (start <= end) {\n      char val = arr[start];\n      if (val=='-') neg=!neg;\n      else if (val>='1' && val<='9') break;\n      start++;\n    }\n\n    // eat whitespace on RHS?\n    outer: while (start <= end) {\n      switch(arr[end]) {\n        case ' ': // fallthrough\n        case '\\t': // fallthrough\n        case '\\n': // fallthrough\n        case '\\r': end--; break;\n        default: break outer;\n      }\n    }\n\n    int exp=0;\n\n    /******************************************************\n     * remove RHS zero normalization since it only helps 1 in 100\n     * numbers and complicates both encoding and decoding.\n\n    // remove pairs of zeros on the RHS and keep track of\n    // the count.\n    while (start <= end) {\n      char val = arr[end];\n\n      if (val=='0' && start <= end) {\n        val=arr[end-1];\n        if (val=='0') {\n          hundreds++;\n          end-=2;\n          continue;\n        }\n      }\n\n      break;\n    }\n    *************************************************************/\n\n\n    // now start at the end and work our way forward\n    // encoding two base 10 digits into 1 base 100 digit\n    while (start <= end) {\n      int val = arr[end--] - '0';          // ones\n      if (start <= end) {\n        val += (arr[end--] - '0')*10;      // tens\n        if (start <= end) {\n          val += (arr[end--] - '0')*100;    // hundreds\n          if (start <= end) {\n            val += (arr[end--] - '0')*1000;  // thousands\n          }\n        }\n      }\n      out[--wpos] = neg ? (char)(9999-val) : (char)val;\n    }\n\n\n    /****** FUTURE: not needed for this implementation of exponent combined with sign\n    // normalize all zeros to positive values\n    if (wpos==outend) neg=false;\n    ******/\n\n    // adjust exponent by the number of base 100 chars written\n    exp += outend - wpos;\n\n    // write the exponent and sign combined\n    out[--wpos] = neg ? (char)(ZERO_EXPONENT - exp) : (char)(ZERO_EXPONENT + exp);\n\n    return outend-wpos;  // the length of the base100 int\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/BCDUtils#base10toBase10kSortableInt(char[],int,int,char[],int).mjava","sourceNew":null,"sourceOld":"  public static int base10toBase10kSortableInt(char[] arr, int start, int end,\n                                               char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n    --end;  // position end pointer *on* the last char\n\n    // read signs and leading zeros\n    while (start <= end) {\n      char val = arr[start];\n      if (val=='-') neg=!neg;\n      else if (val>='1' && val<='9') break;\n      start++;\n    }\n\n    // eat whitespace on RHS?\n    outer: while (start <= end) {\n      switch(arr[end]) {\n        case ' ': // fallthrough\n        case '\\t': // fallthrough\n        case '\\n': // fallthrough\n        case '\\r': end--; break;\n        default: break outer;\n      }\n    }\n\n    int exp=0;\n\n    /******************************************************\n     * remove RHS zero normalization since it only helps 1 in 100\n     * numbers and complicates both encoding and decoding.\n\n    // remove pairs of zeros on the RHS and keep track of\n    // the count.\n    while (start <= end) {\n      char val = arr[end];\n\n      if (val=='0' && start <= end) {\n        val=arr[end-1];\n        if (val=='0') {\n          hundreds++;\n          end-=2;\n          continue;\n        }\n      }\n\n      break;\n    }\n    *************************************************************/\n\n\n    // now start at the end and work our way forward\n    // encoding two base 10 digits into 1 base 100 digit\n    while (start <= end) {\n      int val = arr[end--] - '0';          // ones\n      if (start <= end) {\n        val += (arr[end--] - '0')*10;      // tens\n        if (start <= end) {\n          val += (arr[end--] - '0')*100;    // hundreds\n          if (start <= end) {\n            val += (arr[end--] - '0')*1000;  // thousands\n          }\n        }\n      }\n      out[--wpos] = neg ? (char)(9999-val) : (char)val;\n    }\n\n\n    /****** FUTURE: not needed for this implementation of exponent combined with sign\n    // normalize all zeros to positive values\n    if (wpos==outend) neg=false;\n    ******/\n\n    // adjust exponent by the number of base 100 chars written\n    exp += outend - wpos;\n\n    // write the exponent and sign combined\n    out[--wpos] = neg ? (char)(ZERO_EXPONENT - exp) : (char)(ZERO_EXPONENT + exp);\n\n    return outend-wpos;  // the length of the base100 int\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/BCDUtils#base10toBase10kSortableInt(char[],int,int,char[],int).mjava","pathOld":"src/java/org/apache/solr/util/BCDUtils#base10toBase10kSortableInt(char[],int,int,char[],int).mjava","sourceNew":"  public static int base10toBase10kSortableInt(char[] arr, int start, int end,\n                                               char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n    --end;  // position end pointer *on* the last char\n\n    // read signs and leading zeros\n    while (start <= end) {\n      char val = arr[start];\n      if (val=='-') neg=!neg;\n      else if (val>='1' && val<='9') break;\n      start++;\n    }\n\n    // eat whitespace on RHS?\n    outer: while (start <= end) {\n      switch(arr[end]) {\n        case ' ': // fallthrough\n        case '\\t': // fallthrough\n        case '\\n': // fallthrough\n        case '\\r': end--; break;\n        default: break outer;\n      }\n    }\n\n    int exp=0;\n\n    /******************************************************\n     * remove RHS zero normalization since it only helps 1 in 100\n     * numbers and complicates both encoding and decoding.\n\n    // remove pairs of zeros on the RHS and keep track of\n    // the count.\n    while (start <= end) {\n      char val = arr[end];\n\n      if (val=='0' && start <= end) {\n        val=arr[end-1];\n        if (val=='0') {\n          hundreds++;\n          end-=2;\n          continue;\n        }\n      }\n\n      break;\n    }\n    *************************************************************/\n\n\n    // now start at the end and work our way forward\n    // encoding two base 10 digits into 1 base 100 digit\n    while (start <= end) {\n      int val = arr[end--] - '0';          // ones\n      if (start <= end) {\n        val += (arr[end--] - '0')*10;      // tens\n        if (start <= end) {\n          val += (arr[end--] - '0')*100;    // hundreds\n          if (start <= end) {\n            val += (arr[end--] - '0')*1000;  // thousands\n          }\n        }\n      }\n      out[--wpos] = neg ? (char)(9999-val) : (char)val;\n    }\n\n\n    /****** FUTURE: not needed for this implementation of exponent combined with sign\n    // normalize all zeros to positive values\n    if (wpos==outend) neg=false;\n    ******/\n\n    // adjust exponent by the number of base 100 chars written\n    exp += outend - wpos;\n\n    // write the exponent and sign combined\n    out[--wpos] = neg ? (char)(ZERO_EXPONENT - exp) : (char)(ZERO_EXPONENT + exp);\n\n    return outend-wpos;  // the length of the base100 int\n  }\n\n","sourceOld":"  public static int base10toBase10kSortableInt(char[] arr, int start, int end,\n                                               char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n    --end;  // position end pointer *on* the last char\n\n    // read signs and leading zeros\n    while (start <= end) {\n      char val = arr[start];\n      if (val=='-') neg=!neg;\n      else if (val>='1' && val<='9') break;\n      start++;\n    }\n\n    // eat whitespace on RHS?\n    outer: while (start <= end) {\n      switch(arr[end]) {\n        case ' ': // fallthrough\n        case '\\t': // fallthrough\n        case '\\n': // fallthrough\n        case '\\r': end--; break;\n        default: break outer;\n      }\n    }\n\n    int exp=0;\n\n    /******************************************************\n     * remove RHS zero normalization since it only helps 1 in 100\n     * numbers and complicates both encoding and decoding.\n\n    // remove pairs of zeros on the RHS and keep track of\n    // the count.\n    while (start <= end) {\n      char val = arr[end];\n\n      if (val=='0' && start <= end) {\n        val=arr[end-1];\n        if (val=='0') {\n          hundreds++;\n          end-=2;\n          continue;\n        }\n      }\n\n      break;\n    }\n    *************************************************************/\n\n\n    // now start at the end and work our way forward\n    // encoding two base 10 digits into 1 base 100 digit\n    while (start <= end) {\n      int val = arr[end--] - '0';          // ones\n      if (start <= end) {\n        val += (arr[end--] - '0')*10;      // tens\n        if (start <= end) {\n          val += (arr[end--] - '0')*100;    // hundreds\n          if (start <= end) {\n            val += (arr[end--] - '0')*1000;  // thousands\n          }\n        }\n      }\n      out[--wpos] = neg ? (char)(9999-val) : (char)val;\n    }\n\n\n    /****** FUTURE: not needed for this implementation of exponent combined with sign\n    // normalize all zeros to positive values\n    if (wpos==outend) neg=false;\n    ******/\n\n    // adjust exponent by the number of base 100 chars written\n    exp += outend - wpos;\n\n    // write the exponent and sign combined\n    out[--wpos] = neg ? (char)(ZERO_EXPONENT - exp) : (char)(ZERO_EXPONENT + exp);\n\n    return outend-wpos;  // the length of the base100 int\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/BCDUtils#base10toBase10kSortableInt(char[],int,int,char[],int).mjava","pathOld":"/dev/null","sourceNew":"  public static int base10toBase10kSortableInt(char[] arr, int start, int end,\n                                               char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n    --end;  // position end pointer *on* the last char\n\n    // read signs and leading zeros\n    while (start <= end) {\n      char val = arr[start];\n      if (val=='-') neg=!neg;\n      else if (val>='1' && val<='9') break;\n      start++;\n    }\n\n    // eat whitespace on RHS?\n    outer: while (start <= end) {\n      switch(arr[end]) {\n        case ' ': // fallthrough\n        case '\\t': // fallthrough\n        case '\\n': // fallthrough\n        case '\\r': end--; break;\n        default: break outer;\n      }\n    }\n\n    int exp=0;\n\n    /******************************************************\n     * remove RHS zero normalization since it only helps 1 in 100\n     * numbers and complicates both encoding and decoding.\n\n    // remove pairs of zeros on the RHS and keep track of\n    // the count.\n    while (start <= end) {\n      char val = arr[end];\n\n      if (val=='0' && start <= end) {\n        val=arr[end-1];\n        if (val=='0') {\n          hundreds++;\n          end-=2;\n          continue;\n        }\n      }\n\n      break;\n    }\n    *************************************************************/\n\n\n    // now start at the end and work our way forward\n    // encoding two base 10 digits into 1 base 100 digit\n    while (start <= end) {\n      int val = arr[end--] - '0';          // ones\n      if (start <= end) {\n        val += (arr[end--] - '0')*10;      // tens\n        if (start <= end) {\n          val += (arr[end--] - '0')*100;    // hundreds\n          if (start <= end) {\n            val += (arr[end--] - '0')*1000;  // thousands\n          }\n        }\n      }\n      out[--wpos] = neg ? (char)(9999-val) : (char)val;\n    }\n\n\n    /****** FUTURE: not needed for this implementation of exponent combined with sign\n    // normalize all zeros to positive values\n    if (wpos==outend) neg=false;\n    ******/\n\n    // adjust exponent by the number of base 100 chars written\n    exp += outend - wpos;\n\n    // write the exponent and sign combined\n    out[--wpos] = neg ? (char)(ZERO_EXPONENT - exp) : (char)(ZERO_EXPONENT + exp);\n\n    return outend-wpos;  // the length of the base100 int\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/BCDUtils#base10toBase10kSortableInt(char[],int,int,char[],int).mjava","pathOld":"solr/src/java/org/apache/solr/util/BCDUtils#base10toBase10kSortableInt(char[],int,int,char[],int).mjava","sourceNew":"  public static int base10toBase10kSortableInt(char[] arr, int start, int end,\n                                               char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n    --end;  // position end pointer *on* the last char\n\n    // read signs and leading zeros\n    while (start <= end) {\n      char val = arr[start];\n      if (val=='-') neg=!neg;\n      else if (val>='1' && val<='9') break;\n      start++;\n    }\n\n    // eat whitespace on RHS?\n    outer: while (start <= end) {\n      switch(arr[end]) {\n        case ' ': // fallthrough\n        case '\\t': // fallthrough\n        case '\\n': // fallthrough\n        case '\\r': end--; break;\n        default: break outer;\n      }\n    }\n\n    int exp=0;\n\n    /******************************************************\n     * remove RHS zero normalization since it only helps 1 in 100\n     * numbers and complicates both encoding and decoding.\n\n    // remove pairs of zeros on the RHS and keep track of\n    // the count.\n    while (start <= end) {\n      char val = arr[end];\n\n      if (val=='0' && start <= end) {\n        val=arr[end-1];\n        if (val=='0') {\n          hundreds++;\n          end-=2;\n          continue;\n        }\n      }\n\n      break;\n    }\n    *************************************************************/\n\n\n    // now start at the end and work our way forward\n    // encoding two base 10 digits into 1 base 100 digit\n    while (start <= end) {\n      int val = arr[end--] - '0';          // ones\n      if (start <= end) {\n        val += (arr[end--] - '0')*10;      // tens\n        if (start <= end) {\n          val += (arr[end--] - '0')*100;    // hundreds\n          if (start <= end) {\n            val += (arr[end--] - '0')*1000;  // thousands\n          }\n        }\n      }\n      out[--wpos] = neg ? (char)(9999-val) : (char)val;\n    }\n\n\n    /****** FUTURE: not needed for this implementation of exponent combined with sign\n    // normalize all zeros to positive values\n    if (wpos==outend) neg=false;\n    ******/\n\n    // adjust exponent by the number of base 100 chars written\n    exp += outend - wpos;\n\n    // write the exponent and sign combined\n    out[--wpos] = neg ? (char)(ZERO_EXPONENT - exp) : (char)(ZERO_EXPONENT + exp);\n\n    return outend-wpos;  // the length of the base100 int\n  }\n\n","sourceOld":"  public static int base10toBase10kSortableInt(char[] arr, int start, int end,\n                                               char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n    --end;  // position end pointer *on* the last char\n\n    // read signs and leading zeros\n    while (start <= end) {\n      char val = arr[start];\n      if (val=='-') neg=!neg;\n      else if (val>='1' && val<='9') break;\n      start++;\n    }\n\n    // eat whitespace on RHS?\n    outer: while (start <= end) {\n      switch(arr[end]) {\n        case ' ': // fallthrough\n        case '\\t': // fallthrough\n        case '\\n': // fallthrough\n        case '\\r': end--; break;\n        default: break outer;\n      }\n    }\n\n    int exp=0;\n\n    /******************************************************\n     * remove RHS zero normalization since it only helps 1 in 100\n     * numbers and complicates both encoding and decoding.\n\n    // remove pairs of zeros on the RHS and keep track of\n    // the count.\n    while (start <= end) {\n      char val = arr[end];\n\n      if (val=='0' && start <= end) {\n        val=arr[end-1];\n        if (val=='0') {\n          hundreds++;\n          end-=2;\n          continue;\n        }\n      }\n\n      break;\n    }\n    *************************************************************/\n\n\n    // now start at the end and work our way forward\n    // encoding two base 10 digits into 1 base 100 digit\n    while (start <= end) {\n      int val = arr[end--] - '0';          // ones\n      if (start <= end) {\n        val += (arr[end--] - '0')*10;      // tens\n        if (start <= end) {\n          val += (arr[end--] - '0')*100;    // hundreds\n          if (start <= end) {\n            val += (arr[end--] - '0')*1000;  // thousands\n          }\n        }\n      }\n      out[--wpos] = neg ? (char)(9999-val) : (char)val;\n    }\n\n\n    /****** FUTURE: not needed for this implementation of exponent combined with sign\n    // normalize all zeros to positive values\n    if (wpos==outend) neg=false;\n    ******/\n\n    // adjust exponent by the number of base 100 chars written\n    exp += outend - wpos;\n\n    // write the exponent and sign combined\n    out[--wpos] = neg ? (char)(ZERO_EXPONENT - exp) : (char)(ZERO_EXPONENT + exp);\n\n    return outend-wpos;  // the length of the base100 int\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/BCDUtils#base10toBase10kSortableInt(char[],int,int,char[],int).mjava","pathOld":"solr/src/java/org/apache/solr/util/BCDUtils#base10toBase10kSortableInt(char[],int,int,char[],int).mjava","sourceNew":"  public static int base10toBase10kSortableInt(char[] arr, int start, int end,\n                                               char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n    --end;  // position end pointer *on* the last char\n\n    // read signs and leading zeros\n    while (start <= end) {\n      char val = arr[start];\n      if (val=='-') neg=!neg;\n      else if (val>='1' && val<='9') break;\n      start++;\n    }\n\n    // eat whitespace on RHS?\n    outer: while (start <= end) {\n      switch(arr[end]) {\n        case ' ': // fallthrough\n        case '\\t': // fallthrough\n        case '\\n': // fallthrough\n        case '\\r': end--; break;\n        default: break outer;\n      }\n    }\n\n    int exp=0;\n\n    /******************************************************\n     * remove RHS zero normalization since it only helps 1 in 100\n     * numbers and complicates both encoding and decoding.\n\n    // remove pairs of zeros on the RHS and keep track of\n    // the count.\n    while (start <= end) {\n      char val = arr[end];\n\n      if (val=='0' && start <= end) {\n        val=arr[end-1];\n        if (val=='0') {\n          hundreds++;\n          end-=2;\n          continue;\n        }\n      }\n\n      break;\n    }\n    *************************************************************/\n\n\n    // now start at the end and work our way forward\n    // encoding two base 10 digits into 1 base 100 digit\n    while (start <= end) {\n      int val = arr[end--] - '0';          // ones\n      if (start <= end) {\n        val += (arr[end--] - '0')*10;      // tens\n        if (start <= end) {\n          val += (arr[end--] - '0')*100;    // hundreds\n          if (start <= end) {\n            val += (arr[end--] - '0')*1000;  // thousands\n          }\n        }\n      }\n      out[--wpos] = neg ? (char)(9999-val) : (char)val;\n    }\n\n\n    /****** FUTURE: not needed for this implementation of exponent combined with sign\n    // normalize all zeros to positive values\n    if (wpos==outend) neg=false;\n    ******/\n\n    // adjust exponent by the number of base 100 chars written\n    exp += outend - wpos;\n\n    // write the exponent and sign combined\n    out[--wpos] = neg ? (char)(ZERO_EXPONENT - exp) : (char)(ZERO_EXPONENT + exp);\n\n    return outend-wpos;  // the length of the base100 int\n  }\n\n","sourceOld":"  public static int base10toBase10kSortableInt(char[] arr, int start, int end,\n                                               char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n    --end;  // position end pointer *on* the last char\n\n    // read signs and leading zeros\n    while (start <= end) {\n      char val = arr[start];\n      if (val=='-') neg=!neg;\n      else if (val>='1' && val<='9') break;\n      start++;\n    }\n\n    // eat whitespace on RHS?\n    outer: while (start <= end) {\n      switch(arr[end]) {\n        case ' ': // fallthrough\n        case '\\t': // fallthrough\n        case '\\n': // fallthrough\n        case '\\r': end--; break;\n        default: break outer;\n      }\n    }\n\n    int exp=0;\n\n    /******************************************************\n     * remove RHS zero normalization since it only helps 1 in 100\n     * numbers and complicates both encoding and decoding.\n\n    // remove pairs of zeros on the RHS and keep track of\n    // the count.\n    while (start <= end) {\n      char val = arr[end];\n\n      if (val=='0' && start <= end) {\n        val=arr[end-1];\n        if (val=='0') {\n          hundreds++;\n          end-=2;\n          continue;\n        }\n      }\n\n      break;\n    }\n    *************************************************************/\n\n\n    // now start at the end and work our way forward\n    // encoding two base 10 digits into 1 base 100 digit\n    while (start <= end) {\n      int val = arr[end--] - '0';          // ones\n      if (start <= end) {\n        val += (arr[end--] - '0')*10;      // tens\n        if (start <= end) {\n          val += (arr[end--] - '0')*100;    // hundreds\n          if (start <= end) {\n            val += (arr[end--] - '0')*1000;  // thousands\n          }\n        }\n      }\n      out[--wpos] = neg ? (char)(9999-val) : (char)val;\n    }\n\n\n    /****** FUTURE: not needed for this implementation of exponent combined with sign\n    // normalize all zeros to positive values\n    if (wpos==outend) neg=false;\n    ******/\n\n    // adjust exponent by the number of base 100 chars written\n    exp += outend - wpos;\n\n    // write the exponent and sign combined\n    out[--wpos] = neg ? (char)(ZERO_EXPONENT - exp) : (char)(ZERO_EXPONENT + exp);\n\n    return outend-wpos;  // the length of the base100 int\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/BCDUtils#base10toBase10kSortableInt(char[],int,int,char[],int).mjava","pathOld":"solr/src/java/org/apache/solr/util/BCDUtils#base10toBase10kSortableInt(char[],int,int,char[],int).mjava","sourceNew":"  public static int base10toBase10kSortableInt(char[] arr, int start, int end,\n                                               char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n    --end;  // position end pointer *on* the last char\n\n    // read signs and leading zeros\n    while (start <= end) {\n      char val = arr[start];\n      if (val=='-') neg=!neg;\n      else if (val>='1' && val<='9') break;\n      start++;\n    }\n\n    // eat whitespace on RHS?\n    outer: while (start <= end) {\n      switch(arr[end]) {\n        case ' ': // fallthrough\n        case '\\t': // fallthrough\n        case '\\n': // fallthrough\n        case '\\r': end--; break;\n        default: break outer;\n      }\n    }\n\n    int exp=0;\n\n    /******************************************************\n     * remove RHS zero normalization since it only helps 1 in 100\n     * numbers and complicates both encoding and decoding.\n\n    // remove pairs of zeros on the RHS and keep track of\n    // the count.\n    while (start <= end) {\n      char val = arr[end];\n\n      if (val=='0' && start <= end) {\n        val=arr[end-1];\n        if (val=='0') {\n          hundreds++;\n          end-=2;\n          continue;\n        }\n      }\n\n      break;\n    }\n    *************************************************************/\n\n\n    // now start at the end and work our way forward\n    // encoding two base 10 digits into 1 base 100 digit\n    while (start <= end) {\n      int val = arr[end--] - '0';          // ones\n      if (start <= end) {\n        val += (arr[end--] - '0')*10;      // tens\n        if (start <= end) {\n          val += (arr[end--] - '0')*100;    // hundreds\n          if (start <= end) {\n            val += (arr[end--] - '0')*1000;  // thousands\n          }\n        }\n      }\n      out[--wpos] = neg ? (char)(9999-val) : (char)val;\n    }\n\n\n    /****** FUTURE: not needed for this implementation of exponent combined with sign\n    // normalize all zeros to positive values\n    if (wpos==outend) neg=false;\n    ******/\n\n    // adjust exponent by the number of base 100 chars written\n    exp += outend - wpos;\n\n    // write the exponent and sign combined\n    out[--wpos] = neg ? (char)(ZERO_EXPONENT - exp) : (char)(ZERO_EXPONENT + exp);\n\n    return outend-wpos;  // the length of the base100 int\n  }\n\n","sourceOld":"  public static int base10toBase10kSortableInt(char[] arr, int start, int end,\n                                               char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n    --end;  // position end pointer *on* the last char\n\n    // read signs and leading zeros\n    while (start <= end) {\n      char val = arr[start];\n      if (val=='-') neg=!neg;\n      else if (val>='1' && val<='9') break;\n      start++;\n    }\n\n    // eat whitespace on RHS?\n    outer: while (start <= end) {\n      switch(arr[end]) {\n        case ' ': // fallthrough\n        case '\\t': // fallthrough\n        case '\\n': // fallthrough\n        case '\\r': end--; break;\n        default: break outer;\n      }\n    }\n\n    int exp=0;\n\n    /******************************************************\n     * remove RHS zero normalization since it only helps 1 in 100\n     * numbers and complicates both encoding and decoding.\n\n    // remove pairs of zeros on the RHS and keep track of\n    // the count.\n    while (start <= end) {\n      char val = arr[end];\n\n      if (val=='0' && start <= end) {\n        val=arr[end-1];\n        if (val=='0') {\n          hundreds++;\n          end-=2;\n          continue;\n        }\n      }\n\n      break;\n    }\n    *************************************************************/\n\n\n    // now start at the end and work our way forward\n    // encoding two base 10 digits into 1 base 100 digit\n    while (start <= end) {\n      int val = arr[end--] - '0';          // ones\n      if (start <= end) {\n        val += (arr[end--] - '0')*10;      // tens\n        if (start <= end) {\n          val += (arr[end--] - '0')*100;    // hundreds\n          if (start <= end) {\n            val += (arr[end--] - '0')*1000;  // thousands\n          }\n        }\n      }\n      out[--wpos] = neg ? (char)(9999-val) : (char)val;\n    }\n\n\n    /****** FUTURE: not needed for this implementation of exponent combined with sign\n    // normalize all zeros to positive values\n    if (wpos==outend) neg=false;\n    ******/\n\n    // adjust exponent by the number of base 100 chars written\n    exp += outend - wpos;\n\n    // write the exponent and sign combined\n    out[--wpos] = neg ? (char)(ZERO_EXPONENT - exp) : (char)(ZERO_EXPONENT + exp);\n\n    return outend-wpos;  // the length of the base100 int\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}