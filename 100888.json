{"path":"lucene/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","pathOld":"src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","sourceNew":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"TermAttribute must be the first attribute\", TermAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final TermAttribute termAtt2 = clone.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n    \n    // test copy back\n    termAtt2.setTermBuffer(\"OtherTerm\");\n    typeAtt2.setType(\"OtherType\");\n    clone.copyTo(src);\n    assertEquals(\"TermAttribute of original must now contain updated term\", \"OtherTerm\", termAtt.term());\n    assertEquals(\"TypeAttribute of original must now contain updated type\", \"OtherType\", typeAtt.type());\n    // verify again:\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","sourceOld":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"TermAttribute must be the first attribute\", TermAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final TermAttribute termAtt2 = clone.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n    \n    // test copy back\n    termAtt2.setTermBuffer(\"OtherTerm\");\n    typeAtt2.setType(\"OtherType\");\n    clone.copyTo(src);\n    assertEquals(\"TermAttribute of original must now contain updated term\", \"OtherTerm\", termAtt.term());\n    assertEquals(\"TypeAttribute of original must now contain updated type\", \"OtherType\", typeAtt.type());\n    // verify again:\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","sourceNew":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final FlagsAttribute flagsAtt = src.addAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    flagsAtt.setFlags(1234);\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"FlagsAttribute must be the first attribute\", FlagsAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final FlagsAttribute flagsAtt2 = clone.getAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n    \n    // test copy back\n    flagsAtt2.setFlags(4711);\n    typeAtt2.setType(\"OtherType\");\n    clone.copyTo(src);\n    assertEquals(\"FlagsAttribute of original must now contain updated term\", 4711, flagsAtt.getFlags());\n    assertEquals(\"TypeAttribute of original must now contain updated type\", \"OtherType\", typeAtt.type());\n    // verify again:\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","sourceOld":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"TermAttribute must be the first attribute\", TermAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final TermAttribute termAtt2 = clone.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n    \n    // test copy back\n    termAtt2.setTermBuffer(\"OtherTerm\");\n    typeAtt2.setType(\"OtherType\");\n    clone.copyTo(src);\n    assertEquals(\"TermAttribute of original must now contain updated term\", \"OtherTerm\", termAtt.term());\n    assertEquals(\"TypeAttribute of original must now contain updated type\", \"OtherType\", typeAtt.type());\n    // verify again:\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","sourceNew":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final FlagsAttribute flagsAtt = src.addAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    flagsAtt.setFlags(1234);\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"FlagsAttribute must be the first attribute\", FlagsAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final FlagsAttribute flagsAtt2 = clone.getAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n    \n    // test copy back\n    flagsAtt2.setFlags(4711);\n    typeAtt2.setType(\"OtherType\");\n    clone.copyTo(src);\n    assertEquals(\"FlagsAttribute of original must now contain updated term\", 4711, flagsAtt.getFlags());\n    assertEquals(\"TypeAttribute of original must now contain updated type\", \"OtherType\", typeAtt.type());\n    // verify again:\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","sourceOld":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final FlagsAttribute flagsAtt = src.addAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    flagsAtt.setFlags(1234);\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"FlagsAttribute must be the first attribute\", FlagsAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final FlagsAttribute flagsAtt2 = clone.getAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n    \n    // test copy back\n    flagsAtt2.setFlags(4711);\n    typeAtt2.setType(\"OtherType\");\n    clone.copyTo(src);\n    assertEquals(\"FlagsAttribute of original must now contain updated term\", 4711, flagsAtt.getFlags());\n    assertEquals(\"TypeAttribute of original must now contain updated type\", \"OtherType\", typeAtt.type());\n    // verify again:\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}