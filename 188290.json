{"path":"lucene/core/src/test/org/apache/lucene/util/TestNamedSPILoader#testBogusLookup().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNamedSPILoader#testBogusLookup().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNamedSPILoader#testBogusLookup().mjava","sourceNew":"  // we want an exception if its not found.\n  public void testBogusLookup() {\n    try {\n      Codec codec = Codec.forName(\"dskfdskfsdfksdfdsf\");\n      fail();\n    } catch (IllegalArgumentException expected) {}\n  }\n\n","sourceOld":"  // we want an exception if its not found.\n  public void testBogusLookup() {\n    try {\n      Codec codec = Codec.forName(\"dskfdskfsdfksdfdsf\");\n      fail();\n    } catch (IllegalArgumentException expected) {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNamedSPILoader#testBogusLookup().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNamedSPILoader#testBogusLookup().mjava","sourceNew":"  // we want an exception if its not found.\n  public void testBogusLookup() {\n    try {\n      Codec.forName(\"dskfdskfsdfksdfdsf\");\n      fail();\n    } catch (IllegalArgumentException expected) {}\n  }\n\n","sourceOld":"  // we want an exception if its not found.\n  public void testBogusLookup() {\n    try {\n      Codec codec = Codec.forName(\"dskfdskfsdfksdfdsf\");\n      fail();\n    } catch (IllegalArgumentException expected) {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNamedSPILoader#testBogusLookup().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNamedSPILoader#testBogusLookup().mjava","sourceNew":"  // we want an exception if it's not found.\n  public void testBogusLookup() {\n    try {\n      Codec.forName(\"dskfdskfsdfksdfdsf\");\n      fail();\n    } catch (IllegalArgumentException expected) {}\n  }\n\n","sourceOld":"  // we want an exception if its not found.\n  public void testBogusLookup() {\n    try {\n      Codec.forName(\"dskfdskfsdfksdfdsf\");\n      fail();\n    } catch (IllegalArgumentException expected) {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNamedSPILoader#testBogusLookup().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNamedSPILoader#testBogusLookup().mjava","sourceNew":"  // we want an exception if it's not found.\n  public void testBogusLookup() {\n    expectThrows(IllegalArgumentException.class, () -> {\n      Codec.forName(\"dskfdskfsdfksdfdsf\");\n    });\n  }\n\n","sourceOld":"  // we want an exception if it's not found.\n  public void testBogusLookup() {\n    try {\n      Codec.forName(\"dskfdskfsdfksdfdsf\");\n      fail();\n    } catch (IllegalArgumentException expected) {}\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["8435160e9702b19398118ddf76b61c846612b6a4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"8435160e9702b19398118ddf76b61c846612b6a4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["05fe562aa248790944d43cdd478f512572835ba0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8435160e9702b19398118ddf76b61c846612b6a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8435160e9702b19398118ddf76b61c846612b6a4":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}