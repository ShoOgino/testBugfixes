{"path":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#sort(boolean).mjava","commits":[{"id":"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96","date":1433340999,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#sort(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private LatLonWriter sort(boolean lon) throws IOException {\n    if (heapWriter != null) {\n\n      assert pointCount < Integer.MAX_VALUE;\n\n      // All buffered points are still in heap\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          int docID = heapWriter.docIDs[i];\n          heapWriter.docIDs[i] = heapWriter.docIDs[j];\n          heapWriter.docIDs[j] = docID;\n\n          long ord = heapWriter.ords[i];\n          heapWriter.ords[i] = heapWriter.ords[j];\n          heapWriter.ords[j] = ord;\n\n          int latEnc = heapWriter.latEncs[i];\n          heapWriter.latEncs[i] = heapWriter.latEncs[j];\n          heapWriter.latEncs[j] = latEnc;\n\n          int lonEnc = heapWriter.lonEncs[i];\n          heapWriter.lonEncs[i] = heapWriter.lonEncs[j];\n          heapWriter.lonEncs[j] = lonEnc;\n        }\n\n        @Override\n        protected int compare(int i, int j) {\n          int cmp;\n          if (lon) {\n            cmp = Integer.compare(heapWriter.lonEncs[i], heapWriter.lonEncs[j]);\n          } else {\n            cmp = Integer.compare(heapWriter.latEncs[i], heapWriter.latEncs[j]);\n          }\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(heapWriter.docIDs[i], heapWriter.docIDs[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(heapWriter.ords[i], heapWriter.ords[j]);\n        }\n      }.sort(0, (int) pointCount);\n\n      HeapLatLonWriter sorted = new HeapLatLonWriter((int) pointCount);\n      for(int i=0;i<pointCount;i++) {\n        sorted.append(heapWriter.latEncs[i],\n                      heapWriter.lonEncs[i],\n                      heapWriter.ords[i],\n                      heapWriter.docIDs[i]);\n      }\n\n      return sorted;\n    } else {\n\n      // Offline sort:\n      assert tempDir != null;\n\n      final ByteArrayDataInput reader = new ByteArrayDataInput();\n      Comparator<BytesRef> cmp = new Comparator<BytesRef>() {\n        private final ByteArrayDataInput readerB = new ByteArrayDataInput();\n\n        @Override\n        public int compare(BytesRef a, BytesRef b) {\n          reader.reset(a.bytes, a.offset, a.length);\n          final int latAEnc = reader.readInt();\n          final int lonAEnc = reader.readInt();\n          final int docIDA = reader.readVInt();\n          final long ordA = reader.readVLong();\n\n          reader.reset(b.bytes, b.offset, b.length);\n          final int latBEnc = reader.readInt();\n          final int lonBEnc = reader.readInt();\n          final int docIDB = reader.readVInt();\n          final long ordB = reader.readVLong();\n\n          int cmp;\n          if (lon) {\n            cmp = Integer.compare(lonAEnc, lonBEnc);\n          } else {\n            cmp = Integer.compare(latAEnc, latBEnc);\n          }\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(docIDA, docIDB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(ordA, ordB);\n        }\n      };\n\n      Path sorted = tempDir.resolve(\"sorted\");\n      boolean success = false;\n      try {\n        OfflineSorter latSorter = new OfflineSorter(cmp, OfflineSorter.BufferSize.automatic(), tempDir, OfflineSorter.MAX_TEMPFILES);\n        latSorter.sort(tempInput, sorted);\n        LatLonWriter writer = convertToFixedWidth(sorted);\n        success = true;\n        return writer;\n      } finally {\n        if (success) {\n          IOUtils.rm(sorted);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorted);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f558588ddbab152a12681d16572d483aa59616b","date":1439595052,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#sort(boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#sort(boolean).mjava","sourceNew":"  private LatLonWriter sort(boolean lon) throws IOException {\n    if (heapWriter != null) {\n\n      assert pointCount < Integer.MAX_VALUE;\n\n      // All buffered points are still in heap\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          int docID = heapWriter.docIDs[i];\n          heapWriter.docIDs[i] = heapWriter.docIDs[j];\n          heapWriter.docIDs[j] = docID;\n\n          long ord = heapWriter.ords[i];\n          heapWriter.ords[i] = heapWriter.ords[j];\n          heapWriter.ords[j] = ord;\n\n          int latEnc = heapWriter.latEncs[i];\n          heapWriter.latEncs[i] = heapWriter.latEncs[j];\n          heapWriter.latEncs[j] = latEnc;\n\n          int lonEnc = heapWriter.lonEncs[i];\n          heapWriter.lonEncs[i] = heapWriter.lonEncs[j];\n          heapWriter.lonEncs[j] = lonEnc;\n        }\n\n        @Override\n        protected int compare(int i, int j) {\n          int cmp;\n          if (lon) {\n            cmp = Integer.compare(heapWriter.lonEncs[i], heapWriter.lonEncs[j]);\n          } else {\n            cmp = Integer.compare(heapWriter.latEncs[i], heapWriter.latEncs[j]);\n          }\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(heapWriter.docIDs[i], heapWriter.docIDs[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(heapWriter.ords[i], heapWriter.ords[j]);\n        }\n      }.sort(0, (int) pointCount);\n\n      HeapLatLonWriter sorted = new HeapLatLonWriter((int) pointCount);\n      for(int i=0;i<pointCount;i++) {\n        sorted.append(heapWriter.latEncs[i],\n                      heapWriter.lonEncs[i],\n                      heapWriter.ords[i],\n                      heapWriter.docIDs[i]);\n      }\n      sorted.close();\n\n      return sorted;\n    } else {\n\n      // Offline sort:\n      assert tempDir != null;\n\n      final ByteArrayDataInput reader = new ByteArrayDataInput();\n      Comparator<BytesRef> cmp = new Comparator<BytesRef>() {\n        private final ByteArrayDataInput readerB = new ByteArrayDataInput();\n\n        @Override\n        public int compare(BytesRef a, BytesRef b) {\n          reader.reset(a.bytes, a.offset, a.length);\n          final int latAEnc = reader.readInt();\n          final int lonAEnc = reader.readInt();\n          final int docIDA = reader.readVInt();\n          final long ordA = reader.readVLong();\n\n          reader.reset(b.bytes, b.offset, b.length);\n          final int latBEnc = reader.readInt();\n          final int lonBEnc = reader.readInt();\n          final int docIDB = reader.readVInt();\n          final long ordB = reader.readVLong();\n\n          int cmp;\n          if (lon) {\n            cmp = Integer.compare(lonAEnc, lonBEnc);\n          } else {\n            cmp = Integer.compare(latAEnc, latBEnc);\n          }\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(docIDA, docIDB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(ordA, ordB);\n        }\n      };\n\n      Path sorted = tempDir.resolve(\"sorted\");\n      boolean success = false;\n      try {\n        OfflineSorter latSorter = new OfflineSorter(cmp, OfflineSorter.BufferSize.automatic(), tempDir, OfflineSorter.MAX_TEMPFILES);\n        latSorter.sort(tempInput, sorted);\n        LatLonWriter writer = convertToFixedWidth(sorted);\n        success = true;\n        return writer;\n      } finally {\n        if (success) {\n          IOUtils.rm(sorted);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorted);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private LatLonWriter sort(boolean lon) throws IOException {\n    if (heapWriter != null) {\n\n      assert pointCount < Integer.MAX_VALUE;\n\n      // All buffered points are still in heap\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          int docID = heapWriter.docIDs[i];\n          heapWriter.docIDs[i] = heapWriter.docIDs[j];\n          heapWriter.docIDs[j] = docID;\n\n          long ord = heapWriter.ords[i];\n          heapWriter.ords[i] = heapWriter.ords[j];\n          heapWriter.ords[j] = ord;\n\n          int latEnc = heapWriter.latEncs[i];\n          heapWriter.latEncs[i] = heapWriter.latEncs[j];\n          heapWriter.latEncs[j] = latEnc;\n\n          int lonEnc = heapWriter.lonEncs[i];\n          heapWriter.lonEncs[i] = heapWriter.lonEncs[j];\n          heapWriter.lonEncs[j] = lonEnc;\n        }\n\n        @Override\n        protected int compare(int i, int j) {\n          int cmp;\n          if (lon) {\n            cmp = Integer.compare(heapWriter.lonEncs[i], heapWriter.lonEncs[j]);\n          } else {\n            cmp = Integer.compare(heapWriter.latEncs[i], heapWriter.latEncs[j]);\n          }\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(heapWriter.docIDs[i], heapWriter.docIDs[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(heapWriter.ords[i], heapWriter.ords[j]);\n        }\n      }.sort(0, (int) pointCount);\n\n      HeapLatLonWriter sorted = new HeapLatLonWriter((int) pointCount);\n      for(int i=0;i<pointCount;i++) {\n        sorted.append(heapWriter.latEncs[i],\n                      heapWriter.lonEncs[i],\n                      heapWriter.ords[i],\n                      heapWriter.docIDs[i]);\n      }\n\n      return sorted;\n    } else {\n\n      // Offline sort:\n      assert tempDir != null;\n\n      final ByteArrayDataInput reader = new ByteArrayDataInput();\n      Comparator<BytesRef> cmp = new Comparator<BytesRef>() {\n        private final ByteArrayDataInput readerB = new ByteArrayDataInput();\n\n        @Override\n        public int compare(BytesRef a, BytesRef b) {\n          reader.reset(a.bytes, a.offset, a.length);\n          final int latAEnc = reader.readInt();\n          final int lonAEnc = reader.readInt();\n          final int docIDA = reader.readVInt();\n          final long ordA = reader.readVLong();\n\n          reader.reset(b.bytes, b.offset, b.length);\n          final int latBEnc = reader.readInt();\n          final int lonBEnc = reader.readInt();\n          final int docIDB = reader.readVInt();\n          final long ordB = reader.readVLong();\n\n          int cmp;\n          if (lon) {\n            cmp = Integer.compare(lonAEnc, lonBEnc);\n          } else {\n            cmp = Integer.compare(latAEnc, latBEnc);\n          }\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(docIDA, docIDB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(ordA, ordB);\n        }\n      };\n\n      Path sorted = tempDir.resolve(\"sorted\");\n      boolean success = false;\n      try {\n        OfflineSorter latSorter = new OfflineSorter(cmp, OfflineSorter.BufferSize.automatic(), tempDir, OfflineSorter.MAX_TEMPFILES);\n        latSorter.sort(tempInput, sorted);\n        LatLonWriter writer = convertToFixedWidth(sorted);\n        success = true;\n        return writer;\n      } finally {\n        if (success) {\n          IOUtils.rm(sorted);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorted);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2","date":1443129829,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#sort(boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#sort(boolean).mjava","sourceNew":"  private LatLonWriter sort(boolean lon) throws IOException {\n    if (heapWriter != null) {\n\n      assert pointCount < Integer.MAX_VALUE;\n\n      // All buffered points are still in heap\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          int docID = heapWriter.docIDs[i];\n          heapWriter.docIDs[i] = heapWriter.docIDs[j];\n          heapWriter.docIDs[j] = docID;\n\n          long ord = heapWriter.ords[i];\n          heapWriter.ords[i] = heapWriter.ords[j];\n          heapWriter.ords[j] = ord;\n\n          int latEnc = heapWriter.latEncs[i];\n          heapWriter.latEncs[i] = heapWriter.latEncs[j];\n          heapWriter.latEncs[j] = latEnc;\n\n          int lonEnc = heapWriter.lonEncs[i];\n          heapWriter.lonEncs[i] = heapWriter.lonEncs[j];\n          heapWriter.lonEncs[j] = lonEnc;\n        }\n\n        @Override\n        protected int compare(int i, int j) {\n          int cmp;\n          if (lon) {\n            cmp = Integer.compare(heapWriter.lonEncs[i], heapWriter.lonEncs[j]);\n          } else {\n            cmp = Integer.compare(heapWriter.latEncs[i], heapWriter.latEncs[j]);\n          }\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(heapWriter.docIDs[i], heapWriter.docIDs[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(heapWriter.ords[i], heapWriter.ords[j]);\n        }\n      }.sort(0, (int) pointCount);\n\n      HeapLatLonWriter sorted = new HeapLatLonWriter((int) pointCount);\n      for(int i=0;i<pointCount;i++) {\n        sorted.append(heapWriter.latEncs[i],\n                      heapWriter.lonEncs[i],\n                      heapWriter.ords[i],\n                      heapWriter.docIDs[i]);\n      }\n      sorted.close();\n\n      return sorted;\n    } else {\n\n      // Offline sort:\n      assert tempInput != null;\n\n      final ByteArrayDataInput reader = new ByteArrayDataInput();\n      Comparator<BytesRef> cmp = new Comparator<BytesRef>() {\n        private final ByteArrayDataInput readerB = new ByteArrayDataInput();\n\n        @Override\n        public int compare(BytesRef a, BytesRef b) {\n          reader.reset(a.bytes, a.offset, a.length);\n          final int latAEnc = reader.readInt();\n          final int lonAEnc = reader.readInt();\n          final int docIDA = reader.readVInt();\n          final long ordA = reader.readVLong();\n\n          reader.reset(b.bytes, b.offset, b.length);\n          final int latBEnc = reader.readInt();\n          final int lonBEnc = reader.readInt();\n          final int docIDB = reader.readVInt();\n          final long ordB = reader.readVLong();\n\n          int cmp;\n          if (lon) {\n            cmp = Integer.compare(lonAEnc, lonBEnc);\n          } else {\n            cmp = Integer.compare(latAEnc, latBEnc);\n          }\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(docIDA, docIDB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(ordA, ordB);\n        }\n      };\n\n      Path sorted = Files.createTempFile(OfflineSorter.getDefaultTempDir(), \"sorted\", \"\");\n      boolean success = false;\n      \n      try {\n        OfflineSorter latSorter = new OfflineSorter(cmp);\n        latSorter.sort(tempInput, sorted);\n        LatLonWriter writer = convertToFixedWidth(sorted);\n        success = true;\n        return writer;\n      } finally {\n        if (success) {\n          IOUtils.rm(sorted);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorted);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private LatLonWriter sort(boolean lon) throws IOException {\n    if (heapWriter != null) {\n\n      assert pointCount < Integer.MAX_VALUE;\n\n      // All buffered points are still in heap\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          int docID = heapWriter.docIDs[i];\n          heapWriter.docIDs[i] = heapWriter.docIDs[j];\n          heapWriter.docIDs[j] = docID;\n\n          long ord = heapWriter.ords[i];\n          heapWriter.ords[i] = heapWriter.ords[j];\n          heapWriter.ords[j] = ord;\n\n          int latEnc = heapWriter.latEncs[i];\n          heapWriter.latEncs[i] = heapWriter.latEncs[j];\n          heapWriter.latEncs[j] = latEnc;\n\n          int lonEnc = heapWriter.lonEncs[i];\n          heapWriter.lonEncs[i] = heapWriter.lonEncs[j];\n          heapWriter.lonEncs[j] = lonEnc;\n        }\n\n        @Override\n        protected int compare(int i, int j) {\n          int cmp;\n          if (lon) {\n            cmp = Integer.compare(heapWriter.lonEncs[i], heapWriter.lonEncs[j]);\n          } else {\n            cmp = Integer.compare(heapWriter.latEncs[i], heapWriter.latEncs[j]);\n          }\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(heapWriter.docIDs[i], heapWriter.docIDs[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(heapWriter.ords[i], heapWriter.ords[j]);\n        }\n      }.sort(0, (int) pointCount);\n\n      HeapLatLonWriter sorted = new HeapLatLonWriter((int) pointCount);\n      for(int i=0;i<pointCount;i++) {\n        sorted.append(heapWriter.latEncs[i],\n                      heapWriter.lonEncs[i],\n                      heapWriter.ords[i],\n                      heapWriter.docIDs[i]);\n      }\n      sorted.close();\n\n      return sorted;\n    } else {\n\n      // Offline sort:\n      assert tempDir != null;\n\n      final ByteArrayDataInput reader = new ByteArrayDataInput();\n      Comparator<BytesRef> cmp = new Comparator<BytesRef>() {\n        private final ByteArrayDataInput readerB = new ByteArrayDataInput();\n\n        @Override\n        public int compare(BytesRef a, BytesRef b) {\n          reader.reset(a.bytes, a.offset, a.length);\n          final int latAEnc = reader.readInt();\n          final int lonAEnc = reader.readInt();\n          final int docIDA = reader.readVInt();\n          final long ordA = reader.readVLong();\n\n          reader.reset(b.bytes, b.offset, b.length);\n          final int latBEnc = reader.readInt();\n          final int lonBEnc = reader.readInt();\n          final int docIDB = reader.readVInt();\n          final long ordB = reader.readVLong();\n\n          int cmp;\n          if (lon) {\n            cmp = Integer.compare(lonAEnc, lonBEnc);\n          } else {\n            cmp = Integer.compare(latAEnc, latBEnc);\n          }\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(docIDA, docIDB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(ordA, ordB);\n        }\n      };\n\n      Path sorted = tempDir.resolve(\"sorted\");\n      boolean success = false;\n      try {\n        OfflineSorter latSorter = new OfflineSorter(cmp, OfflineSorter.BufferSize.automatic(), tempDir, OfflineSorter.MAX_TEMPFILES);\n        latSorter.sort(tempInput, sorted);\n        LatLonWriter writer = convertToFixedWidth(sorted);\n        success = true;\n        return writer;\n      } finally {\n        if (success) {\n          IOUtils.rm(sorted);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorted);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#sort(boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#sort(boolean).mjava","sourceNew":"  private LatLonWriter sort(boolean lon) throws IOException {\n    if (heapWriter != null) {\n      // All buffered points are still in heap\n\n      assert pointCount < Integer.MAX_VALUE;\n\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          int docID = heapWriter.docIDs[i];\n          heapWriter.docIDs[i] = heapWriter.docIDs[j];\n          heapWriter.docIDs[j] = docID;\n\n          long ord = heapWriter.ords[i];\n          heapWriter.ords[i] = heapWriter.ords[j];\n          heapWriter.ords[j] = ord;\n\n          int latEnc = heapWriter.latEncs[i];\n          heapWriter.latEncs[i] = heapWriter.latEncs[j];\n          heapWriter.latEncs[j] = latEnc;\n\n          int lonEnc = heapWriter.lonEncs[i];\n          heapWriter.lonEncs[i] = heapWriter.lonEncs[j];\n          heapWriter.lonEncs[j] = lonEnc;\n        }\n\n        @Override\n        protected int compare(int i, int j) {\n          int cmp;\n          if (lon) {\n            cmp = Integer.compare(heapWriter.lonEncs[i], heapWriter.lonEncs[j]);\n          } else {\n            cmp = Integer.compare(heapWriter.latEncs[i], heapWriter.latEncs[j]);\n          }\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(heapWriter.docIDs[i], heapWriter.docIDs[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(heapWriter.ords[i], heapWriter.ords[j]);\n        }\n      }.sort(0, (int) pointCount);\n\n      HeapLatLonWriter sorted = new HeapLatLonWriter((int) pointCount);\n      for(int i=0;i<pointCount;i++) {\n        sorted.append(heapWriter.latEncs[i],\n                      heapWriter.lonEncs[i],\n                      heapWriter.ords[i],\n                      heapWriter.docIDs[i]);\n      }\n      sorted.close();\n\n      return sorted;\n    } else {\n\n      // Offline sort:\n      assert tempInput != null;\n\n      final ByteArrayDataInput reader = new ByteArrayDataInput();\n      Comparator<BytesRef> cmp = new Comparator<BytesRef>() {\n        private final ByteArrayDataInput readerB = new ByteArrayDataInput();\n\n        @Override\n        public int compare(BytesRef a, BytesRef b) {\n          reader.reset(a.bytes, a.offset, a.length);\n          final int latAEnc = reader.readInt();\n          final int lonAEnc = reader.readInt();\n          final int docIDA = reader.readVInt();\n          final long ordA = reader.readVLong();\n\n          reader.reset(b.bytes, b.offset, b.length);\n          final int latBEnc = reader.readInt();\n          final int lonBEnc = reader.readInt();\n          final int docIDB = reader.readVInt();\n          final long ordB = reader.readVLong();\n\n          int cmp;\n          if (lon) {\n            cmp = Integer.compare(lonAEnc, lonBEnc);\n          } else {\n            cmp = Integer.compare(latAEnc, latBEnc);\n          }\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(docIDA, docIDB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(ordA, ordB);\n        }\n      };\n\n      \n      boolean success = false;\n      OfflineSorter sorter = new OfflineSorter(tempDir, tempFileNamePrefix, cmp);\n      String sortedFileName = sorter.sort(tempInput.getName());\n      try {\n        LatLonWriter writer = convertToFixedWidth(sortedFileName);\n        success = true;\n        return writer;\n      } finally {\n        if (success) {\n          tempDir.deleteFile(sortedFileName);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(tempDir, sortedFileName);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private LatLonWriter sort(boolean lon) throws IOException {\n    if (heapWriter != null) {\n\n      assert pointCount < Integer.MAX_VALUE;\n\n      // All buffered points are still in heap\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          int docID = heapWriter.docIDs[i];\n          heapWriter.docIDs[i] = heapWriter.docIDs[j];\n          heapWriter.docIDs[j] = docID;\n\n          long ord = heapWriter.ords[i];\n          heapWriter.ords[i] = heapWriter.ords[j];\n          heapWriter.ords[j] = ord;\n\n          int latEnc = heapWriter.latEncs[i];\n          heapWriter.latEncs[i] = heapWriter.latEncs[j];\n          heapWriter.latEncs[j] = latEnc;\n\n          int lonEnc = heapWriter.lonEncs[i];\n          heapWriter.lonEncs[i] = heapWriter.lonEncs[j];\n          heapWriter.lonEncs[j] = lonEnc;\n        }\n\n        @Override\n        protected int compare(int i, int j) {\n          int cmp;\n          if (lon) {\n            cmp = Integer.compare(heapWriter.lonEncs[i], heapWriter.lonEncs[j]);\n          } else {\n            cmp = Integer.compare(heapWriter.latEncs[i], heapWriter.latEncs[j]);\n          }\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(heapWriter.docIDs[i], heapWriter.docIDs[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(heapWriter.ords[i], heapWriter.ords[j]);\n        }\n      }.sort(0, (int) pointCount);\n\n      HeapLatLonWriter sorted = new HeapLatLonWriter((int) pointCount);\n      for(int i=0;i<pointCount;i++) {\n        sorted.append(heapWriter.latEncs[i],\n                      heapWriter.lonEncs[i],\n                      heapWriter.ords[i],\n                      heapWriter.docIDs[i]);\n      }\n      sorted.close();\n\n      return sorted;\n    } else {\n\n      // Offline sort:\n      assert tempInput != null;\n\n      final ByteArrayDataInput reader = new ByteArrayDataInput();\n      Comparator<BytesRef> cmp = new Comparator<BytesRef>() {\n        private final ByteArrayDataInput readerB = new ByteArrayDataInput();\n\n        @Override\n        public int compare(BytesRef a, BytesRef b) {\n          reader.reset(a.bytes, a.offset, a.length);\n          final int latAEnc = reader.readInt();\n          final int lonAEnc = reader.readInt();\n          final int docIDA = reader.readVInt();\n          final long ordA = reader.readVLong();\n\n          reader.reset(b.bytes, b.offset, b.length);\n          final int latBEnc = reader.readInt();\n          final int lonBEnc = reader.readInt();\n          final int docIDB = reader.readVInt();\n          final long ordB = reader.readVLong();\n\n          int cmp;\n          if (lon) {\n            cmp = Integer.compare(lonAEnc, lonBEnc);\n          } else {\n            cmp = Integer.compare(latAEnc, latBEnc);\n          }\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(docIDA, docIDB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(ordA, ordB);\n        }\n      };\n\n      Path sorted = Files.createTempFile(OfflineSorter.getDefaultTempDir(), \"sorted\", \"\");\n      boolean success = false;\n      \n      try {\n        OfflineSorter latSorter = new OfflineSorter(cmp);\n        latSorter.sort(tempInput, sorted);\n        LatLonWriter writer = convertToFixedWidth(sorted);\n        success = true;\n        return writer;\n      } finally {\n        if (success) {\n          IOUtils.rm(sorted);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorted);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#sort(boolean).mjava","sourceNew":null,"sourceOld":"  private LatLonWriter sort(boolean lon) throws IOException {\n    if (heapWriter != null) {\n      // All buffered points are still in heap\n\n      assert pointCount < Integer.MAX_VALUE;\n\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          int docID = heapWriter.docIDs[i];\n          heapWriter.docIDs[i] = heapWriter.docIDs[j];\n          heapWriter.docIDs[j] = docID;\n\n          long ord = heapWriter.ords[i];\n          heapWriter.ords[i] = heapWriter.ords[j];\n          heapWriter.ords[j] = ord;\n\n          int latEnc = heapWriter.latEncs[i];\n          heapWriter.latEncs[i] = heapWriter.latEncs[j];\n          heapWriter.latEncs[j] = latEnc;\n\n          int lonEnc = heapWriter.lonEncs[i];\n          heapWriter.lonEncs[i] = heapWriter.lonEncs[j];\n          heapWriter.lonEncs[j] = lonEnc;\n        }\n\n        @Override\n        protected int compare(int i, int j) {\n          int cmp;\n          if (lon) {\n            cmp = Integer.compare(heapWriter.lonEncs[i], heapWriter.lonEncs[j]);\n          } else {\n            cmp = Integer.compare(heapWriter.latEncs[i], heapWriter.latEncs[j]);\n          }\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(heapWriter.docIDs[i], heapWriter.docIDs[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(heapWriter.ords[i], heapWriter.ords[j]);\n        }\n      }.sort(0, (int) pointCount);\n\n      HeapLatLonWriter sorted = new HeapLatLonWriter((int) pointCount);\n      for(int i=0;i<pointCount;i++) {\n        sorted.append(heapWriter.latEncs[i],\n                      heapWriter.lonEncs[i],\n                      heapWriter.ords[i],\n                      heapWriter.docIDs[i]);\n      }\n      sorted.close();\n\n      return sorted;\n    } else {\n\n      // Offline sort:\n      assert tempInput != null;\n\n      final ByteArrayDataInput reader = new ByteArrayDataInput();\n      Comparator<BytesRef> cmp = new Comparator<BytesRef>() {\n        private final ByteArrayDataInput readerB = new ByteArrayDataInput();\n\n        @Override\n        public int compare(BytesRef a, BytesRef b) {\n          reader.reset(a.bytes, a.offset, a.length);\n          final int latAEnc = reader.readInt();\n          final int lonAEnc = reader.readInt();\n          final int docIDA = reader.readVInt();\n          final long ordA = reader.readVLong();\n\n          reader.reset(b.bytes, b.offset, b.length);\n          final int latBEnc = reader.readInt();\n          final int lonBEnc = reader.readInt();\n          final int docIDB = reader.readVInt();\n          final long ordB = reader.readVLong();\n\n          int cmp;\n          if (lon) {\n            cmp = Integer.compare(lonAEnc, lonBEnc);\n          } else {\n            cmp = Integer.compare(latAEnc, latBEnc);\n          }\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(docIDA, docIDB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(ordA, ordB);\n        }\n      };\n\n      \n      boolean success = false;\n      OfflineSorter sorter = new OfflineSorter(tempDir, tempFileNamePrefix, cmp);\n      String sortedFileName = sorter.sort(tempInput.getName());\n      try {\n        LatLonWriter writer = convertToFixedWidth(sortedFileName);\n        success = true;\n        return writer;\n      } finally {\n        if (success) {\n          tempDir.deleteFile(sortedFileName);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(tempDir, sortedFileName);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["4f558588ddbab152a12681d16572d483aa59616b"],"4f558588ddbab152a12681d16572d483aa59616b":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"4f558588ddbab152a12681d16572d483aa59616b":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["4f558588ddbab152a12681d16572d483aa59616b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}