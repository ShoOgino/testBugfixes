{"path":"lucene/src/java/org/apache/lucene/search/NGramPhraseQuery#rewrite(IndexReader).mjava","commits":[{"id":"51f379cdd57cfa9bb352cbd1a0baedf4fec32a8c","date":1316005300,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NGramPhraseQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if(getSlop() != 0) return super.rewrite(reader);\n    \n    // check whether optimizable or not\n    if(n < 2 || // non-overlap n-gram cannot be optimized\n        getTerms().length < 3)  // too short to optimize\n      return super.rewrite(reader);\n\n    // check all posIncrement is 1\n    // if not, cannot optimize\n    int[] positions = getPositions();\n    Term[] terms = getTerms();\n    int prevPosition = positions[0];\n    for(int i = 1; i < positions.length; i++){\n      int pos = positions[i];\n      if(prevPosition + 1 != pos) return super.rewrite(reader);\n      prevPosition = pos;\n    }\n\n    // now create the new optimized phrase query for n-gram\n    PhraseQuery optimized = new PhraseQuery();\n    int pos = 0;\n    final int lastPos = terms.length - 1;\n    for(int i = 0; i < terms.length; i++){\n      if(pos % n == 0 || pos >= lastPos){\n        optimized.add(terms[i], positions[i]);\n      }\n      pos++;\n    }\n    \n    return optimized;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NGramPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if(getSlop() != 0) return super.rewrite(reader);\n    \n    // check whether optimizable or not\n    if(n < 2 || // non-overlap n-gram cannot be optimized\n        getTerms().length < 3)  // too short to optimize\n      return super.rewrite(reader);\n\n    // check all posIncrement is 1\n    // if not, cannot optimize\n    int[] positions = getPositions();\n    Term[] terms = getTerms();\n    int prevPosition = positions[0];\n    for(int i = 1; i < positions.length; i++){\n      int pos = positions[i];\n      if(prevPosition + 1 != pos) return super.rewrite(reader);\n      prevPosition = pos;\n    }\n\n    // now create the new optimized phrase query for n-gram\n    PhraseQuery optimized = new PhraseQuery();\n    int pos = 0;\n    final int lastPos = terms.length - 1;\n    for(int i = 0; i < terms.length; i++){\n      if(pos % n == 0 || pos >= lastPos){\n        optimized.add(terms[i], positions[i]);\n      }\n      pos++;\n    }\n    \n    return optimized;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if(getSlop() != 0) return super.rewrite(reader);\n    \n    // check whether optimizable or not\n    if(n < 2 || // non-overlap n-gram cannot be optimized\n        getTerms().length < 3)  // too short to optimize\n      return super.rewrite(reader);\n\n    // check all posIncrement is 1\n    // if not, cannot optimize\n    int[] positions = getPositions();\n    Term[] terms = getTerms();\n    int prevPosition = positions[0];\n    for(int i = 1; i < positions.length; i++){\n      int pos = positions[i];\n      if(prevPosition + 1 != pos) return super.rewrite(reader);\n      prevPosition = pos;\n    }\n\n    // now create the new optimized phrase query for n-gram\n    PhraseQuery optimized = new PhraseQuery();\n    int pos = 0;\n    final int lastPos = terms.length - 1;\n    for(int i = 0; i < terms.length; i++){\n      if(pos % n == 0 || pos >= lastPos){\n        optimized.add(terms[i], positions[i]);\n      }\n      pos++;\n    }\n    \n    return optimized;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["51f379cdd57cfa9bb352cbd1a0baedf4fec32a8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f379cdd57cfa9bb352cbd1a0baedf4fec32a8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f379cdd57cfa9bb352cbd1a0baedf4fec32a8c"],"51f379cdd57cfa9bb352cbd1a0baedf4fec32a8c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}