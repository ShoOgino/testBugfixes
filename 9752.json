{"path":"lucene/contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery#rewrite(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery#rewrite(IndexReader).mjava","pathOld":"contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    RegexQuery orig = new RegexQuery(term);\n    orig.setRegexImplementation(regexImpl);\n    orig.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    BooleanQuery bq = (BooleanQuery) orig.rewrite(reader);\n\n    BooleanClause[] clauses = bq.getClauses();\n    SpanQuery[] sqs = new SpanQuery[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      BooleanClause clause = clauses[i];\n\n      // Clauses from RegexQuery.rewrite are always TermQuery's\n      TermQuery tq = (TermQuery) clause.getQuery();\n\n      sqs[i] = new SpanTermQuery(tq.getTerm());\n      sqs[i].setBoost(tq.getBoost());\n    }\n\n    SpanOrQuery query = new SpanOrQuery(sqs);\n    query.setBoost(orig.getBoost());\n\n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    RegexQuery orig = new RegexQuery(term);\n    orig.setRegexImplementation(regexImpl);\n    orig.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    BooleanQuery bq = (BooleanQuery) orig.rewrite(reader);\n\n    BooleanClause[] clauses = bq.getClauses();\n    SpanQuery[] sqs = new SpanQuery[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      BooleanClause clause = clauses[i];\n\n      // Clauses from RegexQuery.rewrite are always TermQuery's\n      TermQuery tq = (TermQuery) clause.getQuery();\n\n      sqs[i] = new SpanTermQuery(tq.getTerm());\n      sqs[i].setBoost(tq.getBoost());\n    }\n\n    SpanOrQuery query = new SpanOrQuery(sqs);\n    query.setBoost(orig.getBoost());\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/regex/SpanRegexQuery#rewrite(IndexReader).mjava","pathOld":"lucene/contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    RegexQuery orig = new RegexQuery(term);\n    orig.setRegexImplementation(regexImpl);\n    orig.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    BooleanQuery bq = (BooleanQuery) orig.rewrite(reader);\n\n    BooleanClause[] clauses = bq.getClauses();\n    SpanQuery[] sqs = new SpanQuery[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      BooleanClause clause = clauses[i];\n\n      // Clauses from RegexQuery.rewrite are always TermQuery's\n      TermQuery tq = (TermQuery) clause.getQuery();\n\n      sqs[i] = new SpanTermQuery(tq.getTerm());\n      sqs[i].setBoost(tq.getBoost());\n    }\n\n    SpanOrQuery query = new SpanOrQuery(sqs);\n    query.setBoost(orig.getBoost());\n\n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    RegexQuery orig = new RegexQuery(term);\n    orig.setRegexImplementation(regexImpl);\n    orig.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    BooleanQuery bq = (BooleanQuery) orig.rewrite(reader);\n\n    BooleanClause[] clauses = bq.getClauses();\n    SpanQuery[] sqs = new SpanQuery[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      BooleanClause clause = clauses[i];\n\n      // Clauses from RegexQuery.rewrite are always TermQuery's\n      TermQuery tq = (TermQuery) clause.getQuery();\n\n      sqs[i] = new SpanTermQuery(tq.getTerm());\n      sqs[i].setBoost(tq.getBoost());\n    }\n\n    SpanOrQuery query = new SpanOrQuery(sqs);\n    query.setBoost(orig.getBoost());\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}