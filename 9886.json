{"path":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"2070bf73ffa1039a505000f99ea245884ff19e11","date":1177653367,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader) );\n\n    Integer docID = params.getInt( DOC_ID );\n    if( docID == null && params.get( ID ) != null ) {\n      // Look for somethign with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docID = searcher.getFirstMatch( t );\n      if( docID < 0 ) {\n        throw new SolrException( 404, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docID != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docID );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( 404, \"Can't find document: \"+docID );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docID, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docID\", docID );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n      Set<String> fields = null;\n      if( params.get( SolrParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( SolrParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"key\", getFieldFlagsKey() );\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"890ae3a3dee75140a9b592175a15164c7b95f8ed","date":1177740357,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for somethign with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( 404, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( 404, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n      Set<String> fields = null;\n      if( params.get( SolrParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( SolrParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"key\", getFieldFlagsKey() );\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader) );\n\n    Integer docID = params.getInt( DOC_ID );\n    if( docID == null && params.get( ID ) != null ) {\n      // Look for somethign with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docID = searcher.getFirstMatch( t );\n      if( docID < 0 ) {\n        throw new SolrException( 404, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docID != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docID );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( 404, \"Can't find document: \"+docID );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docID, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docID\", docID );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n      Set<String> fields = null;\n      if( params.get( SolrParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( SolrParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"key\", getFieldFlagsKey() );\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6511cb621c585259d6a1f2da408bad8c636c7035","date":1177826927,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for somethign with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( 404, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( 404, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n      Set<String> fields = null;\n      if( params.get( SolrParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( SolrParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful informaion\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for somethign with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( 404, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( 404, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n      Set<String> fields = null;\n      if( params.get( SolrParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( SolrParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"key\", getFieldFlagsKey() );\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6186528b0f02523edb52eedacff0c24ce5b8ea1f","date":1177955872,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( 404, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( 404, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n      Set<String> fields = null;\n      if( params.get( SolrParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( SolrParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for somethign with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( 404, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( 404, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n      Set<String> fields = null;\n      if( params.get( SolrParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( SolrParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful informaion\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a3ba66d289fab97b1bad9db1f4be6bf42977499","date":1180032380,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( 404, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( 404, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( SolrParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( SolrParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( 404, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( 404, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n      Set<String> fields = null;\n      if( params.get( SolrParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( SolrParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( SolrParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( SolrParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( 404, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( 404, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( SolrParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( SolrParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01107497284e8a65a9327219966150d26367e9c","date":1182448404,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( SolrParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( SolrParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( SolrParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( SolrParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( SolrParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( SolrParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b909e7d84d56c113538485360000872547c3cfd","date":1219961929,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea6404328413e5baef3771fcb95475356c339454","date":1246540822,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6186528b0f02523edb52eedacff0c24ce5b8ea1f":["6511cb621c585259d6a1f2da408bad8c636c7035"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2070bf73ffa1039a505000f99ea245884ff19e11":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ea6404328413e5baef3771fcb95475356c339454":["8b909e7d84d56c113538485360000872547c3cfd"],"6a3ba66d289fab97b1bad9db1f4be6bf42977499":["6186528b0f02523edb52eedacff0c24ce5b8ea1f"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["6a3ba66d289fab97b1bad9db1f4be6bf42977499"],"6511cb621c585259d6a1f2da408bad8c636c7035":["890ae3a3dee75140a9b592175a15164c7b95f8ed"],"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["c01107497284e8a65a9327219966150d26367e9c"],"8b909e7d84d56c113538485360000872547c3cfd":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ea6404328413e5baef3771fcb95475356c339454"],"c01107497284e8a65a9327219966150d26367e9c":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"890ae3a3dee75140a9b592175a15164c7b95f8ed":["2070bf73ffa1039a505000f99ea245884ff19e11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6186528b0f02523edb52eedacff0c24ce5b8ea1f":["6a3ba66d289fab97b1bad9db1f4be6bf42977499"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2070bf73ffa1039a505000f99ea245884ff19e11"],"2070bf73ffa1039a505000f99ea245884ff19e11":["890ae3a3dee75140a9b592175a15164c7b95f8ed"],"ea6404328413e5baef3771fcb95475356c339454":["ad94625fb8d088209f46650c8097196fec67f00c"],"6a3ba66d289fab97b1bad9db1f4be6bf42977499":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["c01107497284e8a65a9327219966150d26367e9c"],"6511cb621c585259d6a1f2da408bad8c636c7035":["6186528b0f02523edb52eedacff0c24ce5b8ea1f"],"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["8b909e7d84d56c113538485360000872547c3cfd"],"8b909e7d84d56c113538485360000872547c3cfd":["ea6404328413e5baef3771fcb95475356c339454"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"890ae3a3dee75140a9b592175a15164c7b95f8ed":["6511cb621c585259d6a1f2da408bad8c636c7035"],"c01107497284e8a65a9327219966150d26367e9c":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}