{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrServer,Replica,String).mjava","commits":[{"id":"40dce2b6d4360eb09fa16fb6c40a18b25507ed73","date":1383035822,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrServer,Replica,String).mjava","pathOld":"/dev/null","sourceNew":"  protected void removeAndWaitForReplicaGone(String COLL_NAME, CloudSolrServer client, Replica replica, String shard) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME,\n     \"action\", DELETEREPLICA,\n    \"shard\",shard,\n    \"replica\",replica.getName());\n    SolrParams params = new MapSolrParams( m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    long endAt = System.currentTimeMillis()+3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while(System.currentTimeMillis() < endAt){\n      testcoll = getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if(success) {\n        log.info(\"replica cleaned up {}/{} core {}\",shard+\"/\"+replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cd548b14f1051e707393e77329f80c5e89f69919"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd548b14f1051e707393e77329f80c5e89f69919","date":1385226862,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrServer,Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrServer,Replica,String).mjava","sourceNew":"  protected void removeAndWaitForReplicaGone(String COLL_NAME,\n      CloudSolrServer client, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA, \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrServer().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","sourceOld":"  protected void removeAndWaitForReplicaGone(String COLL_NAME, CloudSolrServer client, Replica replica, String shard) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME,\n     \"action\", DELETEREPLICA,\n    \"shard\",shard,\n    \"replica\",replica.getName());\n    SolrParams params = new MapSolrParams( m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    long endAt = System.currentTimeMillis()+3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while(System.currentTimeMillis() < endAt){\n      testcoll = getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if(success) {\n        log.info(\"replica cleaned up {}/{} core {}\",shard+\"/\"+replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrServer,Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrServer,Replica,String).mjava","sourceNew":"  protected void removeAndWaitForReplicaGone(String COLL_NAME,\n      CloudSolrServer client, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA, \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrServer().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","sourceOld":"  protected void removeAndWaitForReplicaGone(String COLL_NAME, CloudSolrServer client, Replica replica, String shard) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME,\n     \"action\", DELETEREPLICA,\n    \"shard\",shard,\n    \"replica\",replica.getName());\n    SolrParams params = new MapSolrParams( m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    long endAt = System.currentTimeMillis()+3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while(System.currentTimeMillis() < endAt){\n      testcoll = getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if(success) {\n        log.info(\"replica cleaned up {}/{} core {}\",shard+\"/\"+replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrServer,Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrServer,Replica,String).mjava","sourceNew":"  protected void removeAndWaitForReplicaGone(String COLL_NAME,\n      CloudSolrServer client, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrServer().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","sourceOld":"  protected void removeAndWaitForReplicaGone(String COLL_NAME,\n      CloudSolrServer client, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA, \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrServer().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrClient,Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#removeAndWaitForReplicaGone(String,CloudSolrServer,Replica,String).mjava","sourceNew":"  protected void removeAndWaitForReplicaGone(String COLL_NAME,\n      CloudSolrClient client, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrClient().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","sourceOld":"  protected void removeAndWaitForReplicaGone(String COLL_NAME,\n      CloudSolrServer client, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrServer().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      success = testcoll.getSlice(shard).getReplica(replica.getName()) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":null,"bugIntro":["8d15cb78bf74f65bc452a5d236bb15ab40dedf7e"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73","cd548b14f1051e707393e77329f80c5e89f69919"],"bafca15d8e408346a67f4282ad1143b88023893b":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"cd548b14f1051e707393e77329f80c5e89f69919":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["cd548b14f1051e707393e77329f80c5e89f69919"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd548b14f1051e707393e77329f80c5e89f69919"],"cd548b14f1051e707393e77329f80c5e89f69919":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","30c688f7052130cef7bd419c85e3c5be214f7b9e"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}