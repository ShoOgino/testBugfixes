{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getFiniteStrings(Automaton,int).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getFiniteStrings(Automaton,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getFiniteStrings(LightAutomaton,int).mjava","sourceNew":"  /** Returns the set of accepted strings, up to at most\n   *  <code>limit</code> strings. If more than <code>limit</code> \n   *  strings are accepted, the first limit strings found are returned. If <code>limit</code> == -1, then \n   *  the limit is infinite.  If the {@link Automaton} has\n   *  cycles then this method might throw {@code\n   *  IllegalArgumentException} but that is not guaranteed\n   *  when the limit is set. */\n  public static Set<IntsRef> getFiniteStrings(Automaton a, int limit) {\n    Set<IntsRef> results = new HashSet<>();\n\n    if (limit == -1 || limit > 0) {\n      // OK\n    } else {\n      throw new IllegalArgumentException(\"limit must be -1 (which means no limit), or > 0; got: \" + limit);\n    }\n\n    if (a.isAccept(0)) {\n      // Special case the empty string, as usual:\n      results.add(new IntsRef());\n    }\n\n    if (a.getNumTransitions(0) > 0 && (limit == -1 || results.size() < limit)) {\n\n      int numStates = a.getNumStates();\n\n      // Tracks which states are in the current path, for\n      // cycle detection:\n      BitSet pathStates = new BitSet(numStates);\n\n      // Stack to hold our current state in the\n      // recursion/iteration:\n      PathNode[] nodes = new PathNode[4];\n\n      pathStates.set(0);\n      PathNode root = getNode(nodes, 0);\n      root.resetState(a, 0);\n\n      IntsRef string = new IntsRef(1);\n      string.length = 1;\n\n      while (string.length > 0) {\n\n        PathNode node = nodes[string.length-1];\n\n        // Get next label leaving the current node:\n        int label = node.nextLabel(a);\n\n        if (label != -1) {\n          string.ints[string.length-1] = label;\n\n          if (a.isAccept(node.to)) {\n            // This transition leads to an accept state,\n            // so we save the current string:\n            results.add(IntsRef.deepCopyOf(string));\n            if (results.size() == limit) {\n              break;\n            }\n          }\n\n          if (a.getNumTransitions(node.to) != 0) {\n            // Now recurse: the destination of this transition has\n            // outgoing transitions:\n            if (pathStates.get(node.to)) {\n              throw new IllegalArgumentException(\"automaton has cycles\");\n            }\n            pathStates.set(node.to);\n\n            // Push node onto stack:\n            if (nodes.length == string.length) {\n              PathNode[] newNodes = new PathNode[ArrayUtil.oversize(nodes.length+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(nodes, 0, newNodes, 0, nodes.length);\n              nodes = newNodes;\n            }\n            getNode(nodes, string.length).resetState(a, node.to);\n            string.length++;\n            string.grow(string.length);\n          }\n        } else {\n          // No more transitions leaving this state,\n          // pop/return back to previous state:\n          assert pathStates.get(node.state);\n          pathStates.clear(node.state);\n          string.length--;\n        }\n      }\n    }\n\n    return results;\n  }\n\n","sourceOld":"  /** Returns the set of accepted strings, up to at most\n   *  <code>limit</code> strings. If more than <code>limit</code> \n   *  strings are accepted, the first limit strings found are returned. If <code>limit</code> == -1, then \n   *  the limit is infinite.  If the {@link Automaton} has\n   *  cycles then this method might throw {@code\n   *  IllegalArgumentException} but that is not guaranteed\n   *  when the limit is set. */\n  public static Set<IntsRef> getFiniteStrings(LightAutomaton a, int limit) {\n    Set<IntsRef> results = new HashSet<>();\n\n    if (limit == -1 || limit > 0) {\n      // OK\n    } else {\n      throw new IllegalArgumentException(\"limit must be -1 (which means no limit), or > 0; got: \" + limit);\n    }\n\n    if (a.isAccept(0)) {\n      // Special case the empty string, as usual:\n      results.add(new IntsRef());\n    }\n\n    if (a.getNumTransitions(0) > 0 && (limit == -1 || results.size() < limit)) {\n\n      int numStates = a.getNumStates();\n\n      // Tracks which states are in the current path, for\n      // cycle detection:\n      BitSet pathStates = new BitSet(numStates);\n\n      // Stack to hold our current state in the\n      // recursion/iteration:\n      LightPathNode[] nodes = new LightPathNode[4];\n\n      pathStates.set(0);\n      LightPathNode root = getNode(nodes, 0);\n      root.resetState(a, 0);\n\n      IntsRef string = new IntsRef(1);\n      string.length = 1;\n\n      while (string.length > 0) {\n\n        LightPathNode node = nodes[string.length-1];\n\n        // Get next label leaving the current node:\n        int label = node.nextLabel(a);\n\n        if (label != -1) {\n          string.ints[string.length-1] = label;\n\n          if (a.isAccept(node.to)) {\n            // This transition leads to an accept state,\n            // so we save the current string:\n            results.add(IntsRef.deepCopyOf(string));\n            if (results.size() == limit) {\n              break;\n            }\n          }\n\n          if (a.getNumTransitions(node.to) != 0) {\n            // Now recurse: the destination of this transition has\n            // outgoing transitions:\n            if (pathStates.get(node.to)) {\n              throw new IllegalArgumentException(\"automaton has cycles\");\n            }\n            pathStates.set(node.to);\n\n            // Push node onto stack:\n            if (nodes.length == string.length) {\n              LightPathNode[] newNodes = new LightPathNode[ArrayUtil.oversize(nodes.length+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(nodes, 0, newNodes, 0, nodes.length);\n              nodes = newNodes;\n            }\n            getNode(nodes, string.length).resetState(a, node.to);\n            string.length++;\n            string.grow(string.length);\n          }\n        } else {\n          // No more transitions leaving this state,\n          // pop/return back to previous state:\n          assert pathStates.get(node.state);\n          pathStates.clear(node.state);\n          string.length--;\n        }\n      }\n    }\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getFiniteStrings(Automaton,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the set of accepted strings, up to at most\n   *  <code>limit</code> strings. If more than <code>limit</code> \n   *  strings are accepted, the first limit strings found are returned. If <code>limit</code> == -1, then \n   *  the limit is infinite.  If the {@link Automaton} has\n   *  cycles then this method might throw {@code\n   *  IllegalArgumentException} but that is not guaranteed\n   *  when the limit is set. */\n  public static Set<IntsRef> getFiniteStrings(Automaton a, int limit) {\n    Set<IntsRef> results = new HashSet<>();\n\n    if (limit == -1 || limit > 0) {\n      // OK\n    } else {\n      throw new IllegalArgumentException(\"limit must be -1 (which means no limit), or > 0; got: \" + limit);\n    }\n\n    if (a.isAccept(0)) {\n      // Special case the empty string, as usual:\n      results.add(new IntsRef());\n    }\n\n    if (a.getNumTransitions(0) > 0 && (limit == -1 || results.size() < limit)) {\n\n      int numStates = a.getNumStates();\n\n      // Tracks which states are in the current path, for\n      // cycle detection:\n      BitSet pathStates = new BitSet(numStates);\n\n      // Stack to hold our current state in the\n      // recursion/iteration:\n      PathNode[] nodes = new PathNode[4];\n\n      pathStates.set(0);\n      PathNode root = getNode(nodes, 0);\n      root.resetState(a, 0);\n\n      IntsRef string = new IntsRef(1);\n      string.length = 1;\n\n      while (string.length > 0) {\n\n        PathNode node = nodes[string.length-1];\n\n        // Get next label leaving the current node:\n        int label = node.nextLabel(a);\n\n        if (label != -1) {\n          string.ints[string.length-1] = label;\n\n          if (a.isAccept(node.to)) {\n            // This transition leads to an accept state,\n            // so we save the current string:\n            results.add(IntsRef.deepCopyOf(string));\n            if (results.size() == limit) {\n              break;\n            }\n          }\n\n          if (a.getNumTransitions(node.to) != 0) {\n            // Now recurse: the destination of this transition has\n            // outgoing transitions:\n            if (pathStates.get(node.to)) {\n              throw new IllegalArgumentException(\"automaton has cycles\");\n            }\n            pathStates.set(node.to);\n\n            // Push node onto stack:\n            if (nodes.length == string.length) {\n              PathNode[] newNodes = new PathNode[ArrayUtil.oversize(nodes.length+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(nodes, 0, newNodes, 0, nodes.length);\n              nodes = newNodes;\n            }\n            getNode(nodes, string.length).resetState(a, node.to);\n            string.length++;\n            string.grow(string.length);\n          }\n        } else {\n          // No more transitions leaving this state,\n          // pop/return back to previous state:\n          assert pathStates.get(node.state);\n          pathStates.clear(node.state);\n          string.length--;\n        }\n      }\n    }\n\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getFiniteStrings(Automaton,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getFiniteStrings(Automaton,int).mjava","sourceNew":"  /** Returns the set of accepted strings, up to at most\n   *  <code>limit</code> strings. If more than <code>limit</code> \n   *  strings are accepted, the first limit strings found are returned. If <code>limit</code> == -1, then \n   *  the limit is infinite.  If the {@link Automaton} has\n   *  cycles then this method might throw {@code\n   *  IllegalArgumentException} but that is not guaranteed\n   *  when the limit is set. */\n  public static Set<IntsRef> getFiniteStrings(Automaton a, int limit) {\n    Set<IntsRef> results = new HashSet<>();\n\n    if (limit == -1 || limit > 0) {\n      // OK\n    } else {\n      throw new IllegalArgumentException(\"limit must be -1 (which means no limit), or > 0; got: \" + limit);\n    }\n\n    if (a.isAccept(0)) {\n      // Special case the empty string, as usual:\n      results.add(new IntsRef());\n    }\n\n    if (a.getNumTransitions(0) > 0 && (limit == -1 || results.size() < limit)) {\n\n      int numStates = a.getNumStates();\n\n      // Tracks which states are in the current path, for\n      // cycle detection:\n      BitSet pathStates = new BitSet(numStates);\n\n      // Stack to hold our current state in the\n      // recursion/iteration:\n      PathNode[] nodes = new PathNode[4];\n\n      pathStates.set(0);\n      PathNode root = getNode(nodes, 0);\n      root.resetState(a, 0);\n\n      IntsRefBuilder string = new IntsRefBuilder();\n      string.append(0);\n\n      while (string.length() > 0) {\n\n        PathNode node = nodes[string.length()-1];\n\n        // Get next label leaving the current node:\n        int label = node.nextLabel(a);\n\n        if (label != -1) {\n          string.setIntAt(string.length()-1, label);\n\n          if (a.isAccept(node.to)) {\n            // This transition leads to an accept state,\n            // so we save the current string:\n            results.add(string.toIntsRef());\n            if (results.size() == limit) {\n              break;\n            }\n          }\n\n          if (a.getNumTransitions(node.to) != 0) {\n            // Now recurse: the destination of this transition has\n            // outgoing transitions:\n            if (pathStates.get(node.to)) {\n              throw new IllegalArgumentException(\"automaton has cycles\");\n            }\n            pathStates.set(node.to);\n\n            // Push node onto stack:\n            if (nodes.length == string.length()) {\n              PathNode[] newNodes = new PathNode[ArrayUtil.oversize(nodes.length+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(nodes, 0, newNodes, 0, nodes.length);\n              nodes = newNodes;\n            }\n            getNode(nodes, string.length()).resetState(a, node.to);\n            string.setLength(string.length() + 1);\n            string.grow(string.length());\n          }\n        } else {\n          // No more transitions leaving this state,\n          // pop/return back to previous state:\n          assert pathStates.get(node.state);\n          pathStates.clear(node.state);\n          string.setLength(string.length() - 1);\n        }\n      }\n    }\n\n    return results;\n  }\n\n","sourceOld":"  /** Returns the set of accepted strings, up to at most\n   *  <code>limit</code> strings. If more than <code>limit</code> \n   *  strings are accepted, the first limit strings found are returned. If <code>limit</code> == -1, then \n   *  the limit is infinite.  If the {@link Automaton} has\n   *  cycles then this method might throw {@code\n   *  IllegalArgumentException} but that is not guaranteed\n   *  when the limit is set. */\n  public static Set<IntsRef> getFiniteStrings(Automaton a, int limit) {\n    Set<IntsRef> results = new HashSet<>();\n\n    if (limit == -1 || limit > 0) {\n      // OK\n    } else {\n      throw new IllegalArgumentException(\"limit must be -1 (which means no limit), or > 0; got: \" + limit);\n    }\n\n    if (a.isAccept(0)) {\n      // Special case the empty string, as usual:\n      results.add(new IntsRef());\n    }\n\n    if (a.getNumTransitions(0) > 0 && (limit == -1 || results.size() < limit)) {\n\n      int numStates = a.getNumStates();\n\n      // Tracks which states are in the current path, for\n      // cycle detection:\n      BitSet pathStates = new BitSet(numStates);\n\n      // Stack to hold our current state in the\n      // recursion/iteration:\n      PathNode[] nodes = new PathNode[4];\n\n      pathStates.set(0);\n      PathNode root = getNode(nodes, 0);\n      root.resetState(a, 0);\n\n      IntsRef string = new IntsRef(1);\n      string.length = 1;\n\n      while (string.length > 0) {\n\n        PathNode node = nodes[string.length-1];\n\n        // Get next label leaving the current node:\n        int label = node.nextLabel(a);\n\n        if (label != -1) {\n          string.ints[string.length-1] = label;\n\n          if (a.isAccept(node.to)) {\n            // This transition leads to an accept state,\n            // so we save the current string:\n            results.add(IntsRef.deepCopyOf(string));\n            if (results.size() == limit) {\n              break;\n            }\n          }\n\n          if (a.getNumTransitions(node.to) != 0) {\n            // Now recurse: the destination of this transition has\n            // outgoing transitions:\n            if (pathStates.get(node.to)) {\n              throw new IllegalArgumentException(\"automaton has cycles\");\n            }\n            pathStates.set(node.to);\n\n            // Push node onto stack:\n            if (nodes.length == string.length) {\n              PathNode[] newNodes = new PathNode[ArrayUtil.oversize(nodes.length+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(nodes, 0, newNodes, 0, nodes.length);\n              nodes = newNodes;\n            }\n            getNode(nodes, string.length).resetState(a, node.to);\n            string.length++;\n            string.grow(string.length);\n          }\n        } else {\n          // No more transitions leaving this state,\n          // pop/return back to previous state:\n          assert pathStates.get(node.state);\n          pathStates.clear(node.state);\n          string.length--;\n        }\n      }\n    }\n\n    return results;\n  }\n\n","bugFix":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35fa550f45857d99d3d6d743420ee54b4d0c37f8","date":1436039255,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getFiniteStrings(Automaton,int).mjava","sourceNew":null,"sourceOld":"  /** Returns the set of accepted strings, up to at most\n   *  <code>limit</code> strings. If more than <code>limit</code> \n   *  strings are accepted, the first limit strings found are returned. If <code>limit</code> == -1, then \n   *  the limit is infinite.  If the {@link Automaton} has\n   *  cycles then this method might throw {@code\n   *  IllegalArgumentException} but that is not guaranteed\n   *  when the limit is set. */\n  public static Set<IntsRef> getFiniteStrings(Automaton a, int limit) {\n    Set<IntsRef> results = new HashSet<>();\n\n    if (limit == -1 || limit > 0) {\n      // OK\n    } else {\n      throw new IllegalArgumentException(\"limit must be -1 (which means no limit), or > 0; got: \" + limit);\n    }\n\n    if (a.isAccept(0)) {\n      // Special case the empty string, as usual:\n      results.add(new IntsRef());\n    }\n\n    if (a.getNumTransitions(0) > 0 && (limit == -1 || results.size() < limit)) {\n\n      int numStates = a.getNumStates();\n\n      // Tracks which states are in the current path, for\n      // cycle detection:\n      BitSet pathStates = new BitSet(numStates);\n\n      // Stack to hold our current state in the\n      // recursion/iteration:\n      PathNode[] nodes = new PathNode[4];\n\n      pathStates.set(0);\n      PathNode root = getNode(nodes, 0);\n      root.resetState(a, 0);\n\n      IntsRefBuilder string = new IntsRefBuilder();\n      string.append(0);\n\n      while (string.length() > 0) {\n\n        PathNode node = nodes[string.length()-1];\n\n        // Get next label leaving the current node:\n        int label = node.nextLabel(a);\n\n        if (label != -1) {\n          string.setIntAt(string.length()-1, label);\n\n          if (a.isAccept(node.to)) {\n            // This transition leads to an accept state,\n            // so we save the current string:\n            results.add(string.toIntsRef());\n            if (results.size() == limit) {\n              break;\n            }\n          }\n\n          if (a.getNumTransitions(node.to) != 0) {\n            // Now recurse: the destination of this transition has\n            // outgoing transitions:\n            if (pathStates.get(node.to)) {\n              throw new IllegalArgumentException(\"automaton has cycles\");\n            }\n            pathStates.set(node.to);\n\n            // Push node onto stack:\n            if (nodes.length == string.length()) {\n              PathNode[] newNodes = new PathNode[ArrayUtil.oversize(nodes.length+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(nodes, 0, newNodes, 0, nodes.length);\n              nodes = newNodes;\n            }\n            getNode(nodes, string.length()).resetState(a, node.to);\n            string.setLength(string.length() + 1);\n            string.grow(string.length());\n          }\n        } else {\n          // No more transitions leaving this state,\n          // pop/return back to previous state:\n          assert pathStates.get(node.state);\n          pathStates.clear(node.state);\n          string.setLength(string.length() - 1);\n        }\n      }\n    }\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"]},"commit2Childs":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"],"5c84485629d80d203608e8975a1139de9933cc38":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}