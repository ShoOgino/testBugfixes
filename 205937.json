{"path":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapRunner#MorphlineMapRunner(Configuration,DocumentLoader,String).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapRunner#MorphlineMapRunner(Configuration,DocumentLoader,String).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/morphline/MorphlineMapRunner#MorphlineMapRunner(Configuration,DocumentLoader,String).mjava","sourceNew":"  public MorphlineMapRunner(Configuration configuration, DocumentLoader loader, String solrHomeDir) throws IOException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"CWD is {}\", new File(\".\").getCanonicalPath());\n      TreeMap map = new TreeMap();\n      for (Map.Entry<String,String> entry : configuration) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      LOG.trace(\"Configuration:\\n{}\", Joiner.on(\"\\n\").join(map.entrySet()));\n    }\n    \n    FaultTolerance faultTolerance = new FaultTolerance(\n        configuration.getBoolean(FaultTolerance.IS_PRODUCTION_MODE, false), \n        configuration.getBoolean(FaultTolerance.IS_IGNORING_RECOVERABLE_EXCEPTIONS, false),\n        configuration.get(FaultTolerance.RECOVERABLE_EXCEPTION_CLASSES, SolrServerException.class.getName())        \n        );\n    \n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(new MetricRegistry())\n      .build();\n\n    class MySolrLocator extends SolrLocator { // trick to access protected ctor\n      public MySolrLocator(MorphlineContext ctx) {\n        super(ctx);\n      }\n    }\n\n    SolrLocator locator = new MySolrLocator(morphlineContext);\n    locator.setSolrHomeDir(solrHomeDir);\n    schema = locator.getIndexSchema();\n\n    // rebuild context, now with schema\n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setIndexSchema(schema)\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(morphlineContext.getMetricRegistry())\n      .build();\n\n    String morphlineFile = configuration.get(MORPHLINE_FILE_PARAM);\n    String morphlineId = configuration.get(MORPHLINE_ID_PARAM);\n    if (morphlineFile == null || morphlineFile.trim().length() == 0) {\n      throw new MorphlineCompilationException(\"Missing parameter: \" + MORPHLINE_FILE_PARAM, null);\n    }\n    Map morphlineVariables = new HashMap();\n    for (Map.Entry<String, String> entry : configuration) {\n      String variablePrefix = MORPHLINE_VARIABLE_PARAM + \".\";\n      if (entry.getKey().startsWith(variablePrefix)) {\n        morphlineVariables.put(entry.getKey().substring(variablePrefix.length()), entry.getValue());\n      }\n    }\n    Config override = ConfigFactory.parseMap(morphlineVariables);\n    morphline = new Compiler().compile(new File(morphlineFile), morphlineId, morphlineContext, null, override);\n    morphlineFileAndId = morphlineFile + \"@\" + morphlineId;\n    \n    disableFileOpen = configuration.getBoolean(DISABLE_FILE_OPEN, false);\n    LOG.debug(\"disableFileOpen: {}\", disableFileOpen);\n        \n    commandLineMorphlineHeaders = new HashMap();\n    for (Map.Entry<String,String> entry : configuration) {     \n      if (entry.getKey().startsWith(MORPHLINE_FIELD_PREFIX)) {\n        commandLineMorphlineHeaders.put(entry.getKey().substring(MORPHLINE_FIELD_PREFIX.length()), entry.getValue());\n      }\n    }\n    LOG.debug(\"Headers, including MIME types, passed by force from the CLI to morphline: {}\", commandLineMorphlineHeaders);\n\n    String metricName = MetricRegistry.name(Utils.getShortClassName(getClass()), Metrics.ELAPSED_TIME);\n    this.elapsedTime = morphlineContext.getMetricRegistry().timer(metricName);\n    Notifications.notifyBeginTransaction(morphline);\n  }\n\n","sourceOld":"  public MorphlineMapRunner(Configuration configuration, DocumentLoader loader, String solrHomeDir) throws IOException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"CWD is {}\", new File(\".\").getCanonicalPath());\n      TreeMap map = new TreeMap();\n      for (Map.Entry<String,String> entry : configuration) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      LOG.trace(\"Configuration:\\n{}\", Joiner.on(\"\\n\").join(map.entrySet()));\n    }\n    \n    FaultTolerance faultTolerance = new FaultTolerance(\n        configuration.getBoolean(FaultTolerance.IS_PRODUCTION_MODE, false), \n        configuration.getBoolean(FaultTolerance.IS_IGNORING_RECOVERABLE_EXCEPTIONS, false),\n        configuration.get(FaultTolerance.RECOVERABLE_EXCEPTION_CLASSES, SolrServerException.class.getName())        \n        );\n    \n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(new MetricRegistry())\n      .build();\n\n    class MySolrLocator extends SolrLocator { // trick to access protected ctor\n      public MySolrLocator(MorphlineContext ctx) {\n        super(ctx);\n      }\n    }\n\n    SolrLocator locator = new MySolrLocator(morphlineContext);\n    locator.setSolrHomeDir(solrHomeDir);\n    schema = locator.getIndexSchema();\n\n    // rebuild context, now with schema\n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setIndexSchema(schema)\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(morphlineContext.getMetricRegistry())\n      .build();\n\n    String morphlineFile = configuration.get(MORPHLINE_FILE_PARAM);\n    String morphlineId = configuration.get(MORPHLINE_ID_PARAM);\n    if (morphlineFile == null || morphlineFile.trim().length() == 0) {\n      throw new MorphlineCompilationException(\"Missing parameter: \" + MORPHLINE_FILE_PARAM, null);\n    }\n    Map morphlineVariables = new HashMap();\n    for (Map.Entry<String, String> entry : configuration) {\n      String variablePrefix = MORPHLINE_VARIABLE_PARAM + \".\";\n      if (entry.getKey().startsWith(variablePrefix)) {\n        morphlineVariables.put(entry.getKey().substring(variablePrefix.length()), entry.getValue());\n      }\n    }\n    Config override = ConfigFactory.parseMap(morphlineVariables);\n    morphline = new Compiler().compile(new File(morphlineFile), morphlineId, morphlineContext, null, override);\n    morphlineFileAndId = morphlineFile + \"@\" + morphlineId;\n    \n    disableFileOpen = configuration.getBoolean(DISABLE_FILE_OPEN, false);\n    LOG.debug(\"disableFileOpen: {}\", disableFileOpen);\n        \n    commandLineMorphlineHeaders = new HashMap();\n    for (Map.Entry<String,String> entry : configuration) {     \n      if (entry.getKey().startsWith(MORPHLINE_FIELD_PREFIX)) {\n        commandLineMorphlineHeaders.put(entry.getKey().substring(MORPHLINE_FIELD_PREFIX.length()), entry.getValue());\n      }\n    }\n    LOG.debug(\"Headers, including MIME types, passed by force from the CLI to morphline: {}\", commandLineMorphlineHeaders);\n\n    String metricName = MetricRegistry.name(Utils.getShortClassName(getClass()), Metrics.ELAPSED_TIME);\n    this.elapsedTime = morphlineContext.getMetricRegistry().timer(metricName);\n    Notifications.notifyBeginTransaction(morphline);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapRunner#MorphlineMapRunner(Configuration,DocumentLoader,String).mjava","pathOld":"/dev/null","sourceNew":"  public MorphlineMapRunner(Configuration configuration, DocumentLoader loader, String solrHomeDir) throws IOException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"CWD is {}\", new File(\".\").getCanonicalPath());\n      TreeMap map = new TreeMap();\n      for (Map.Entry<String,String> entry : configuration) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      LOG.trace(\"Configuration:\\n{}\", Joiner.on(\"\\n\").join(map.entrySet()));\n    }\n    \n    FaultTolerance faultTolerance = new FaultTolerance(\n        configuration.getBoolean(FaultTolerance.IS_PRODUCTION_MODE, false), \n        configuration.getBoolean(FaultTolerance.IS_IGNORING_RECOVERABLE_EXCEPTIONS, false),\n        configuration.get(FaultTolerance.RECOVERABLE_EXCEPTION_CLASSES, SolrServerException.class.getName())        \n        );\n    \n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(new MetricRegistry())\n      .build();\n\n    class MySolrLocator extends SolrLocator { // trick to access protected ctor\n      public MySolrLocator(MorphlineContext ctx) {\n        super(ctx);\n      }\n    }\n\n    SolrLocator locator = new MySolrLocator(morphlineContext);\n    locator.setSolrHomeDir(solrHomeDir);\n    schema = locator.getIndexSchema();\n\n    // rebuild context, now with schema\n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setIndexSchema(schema)\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(morphlineContext.getMetricRegistry())\n      .build();\n\n    String morphlineFile = configuration.get(MORPHLINE_FILE_PARAM);\n    String morphlineId = configuration.get(MORPHLINE_ID_PARAM);\n    if (morphlineFile == null || morphlineFile.trim().length() == 0) {\n      throw new MorphlineCompilationException(\"Missing parameter: \" + MORPHLINE_FILE_PARAM, null);\n    }\n    Map morphlineVariables = new HashMap();\n    for (Map.Entry<String, String> entry : configuration) {\n      String variablePrefix = MORPHLINE_VARIABLE_PARAM + \".\";\n      if (entry.getKey().startsWith(variablePrefix)) {\n        morphlineVariables.put(entry.getKey().substring(variablePrefix.length()), entry.getValue());\n      }\n    }\n    Config override = ConfigFactory.parseMap(morphlineVariables);\n    morphline = new Compiler().compile(new File(morphlineFile), morphlineId, morphlineContext, null, override);\n    morphlineFileAndId = morphlineFile + \"@\" + morphlineId;\n    \n    disableFileOpen = configuration.getBoolean(DISABLE_FILE_OPEN, false);\n    LOG.debug(\"disableFileOpen: {}\", disableFileOpen);\n        \n    commandLineMorphlineHeaders = new HashMap();\n    for (Map.Entry<String,String> entry : configuration) {     \n      if (entry.getKey().startsWith(MORPHLINE_FIELD_PREFIX)) {\n        commandLineMorphlineHeaders.put(entry.getKey().substring(MORPHLINE_FIELD_PREFIX.length()), entry.getValue());\n      }\n    }\n    LOG.debug(\"Headers, including MIME types, passed by force from the CLI to morphline: {}\", commandLineMorphlineHeaders);\n\n    String metricName = MetricRegistry.name(Utils.getShortClassName(getClass()), Metrics.ELAPSED_TIME);\n    this.elapsedTime = morphlineContext.getMetricRegistry().timer(metricName);\n    Notifications.notifyBeginTransaction(morphline);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapRunner#MorphlineMapRunner(Configuration,DocumentLoader,String).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapRunner#MorphlineMapRunner(Configuration,DocumentLoader,String).mjava","sourceNew":"  public MorphlineMapRunner(Configuration configuration, DocumentLoader loader, String solrHomeDir) throws IOException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"CWD is {}\", new File(\".\").getCanonicalPath());\n      TreeMap map = new TreeMap();\n      for (Map.Entry<String,String> entry : configuration) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      LOG.trace(\"Configuration:\\n\" +\n          map.entrySet().stream().map(Object::toString).collect(Collectors.joining(\"\\n\")));\n    }\n    \n    FaultTolerance faultTolerance = new FaultTolerance(\n        configuration.getBoolean(FaultTolerance.IS_PRODUCTION_MODE, false), \n        configuration.getBoolean(FaultTolerance.IS_IGNORING_RECOVERABLE_EXCEPTIONS, false),\n        configuration.get(FaultTolerance.RECOVERABLE_EXCEPTION_CLASSES, SolrServerException.class.getName())        \n        );\n    \n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(new MetricRegistry())\n      .build();\n\n    class MySolrLocator extends SolrLocator { // trick to access protected ctor\n      public MySolrLocator(MorphlineContext ctx) {\n        super(ctx);\n      }\n    }\n\n    SolrLocator locator = new MySolrLocator(morphlineContext);\n    locator.setSolrHomeDir(solrHomeDir);\n    schema = locator.getIndexSchema();\n\n    // rebuild context, now with schema\n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setIndexSchema(schema)\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(morphlineContext.getMetricRegistry())\n      .build();\n\n    String morphlineFile = configuration.get(MORPHLINE_FILE_PARAM);\n    String morphlineId = configuration.get(MORPHLINE_ID_PARAM);\n    if (morphlineFile == null || morphlineFile.trim().length() == 0) {\n      throw new MorphlineCompilationException(\"Missing parameter: \" + MORPHLINE_FILE_PARAM, null);\n    }\n    Map morphlineVariables = new HashMap();\n    for (Map.Entry<String, String> entry : configuration) {\n      String variablePrefix = MORPHLINE_VARIABLE_PARAM + \".\";\n      if (entry.getKey().startsWith(variablePrefix)) {\n        morphlineVariables.put(entry.getKey().substring(variablePrefix.length()), entry.getValue());\n      }\n    }\n    Config override = ConfigFactory.parseMap(morphlineVariables);\n    morphline = new Compiler().compile(new File(morphlineFile), morphlineId, morphlineContext, null, override);\n    morphlineFileAndId = morphlineFile + \"@\" + morphlineId;\n    \n    disableFileOpen = configuration.getBoolean(DISABLE_FILE_OPEN, false);\n    LOG.debug(\"disableFileOpen: {}\", disableFileOpen);\n        \n    commandLineMorphlineHeaders = new HashMap();\n    for (Map.Entry<String,String> entry : configuration) {     \n      if (entry.getKey().startsWith(MORPHLINE_FIELD_PREFIX)) {\n        commandLineMorphlineHeaders.put(entry.getKey().substring(MORPHLINE_FIELD_PREFIX.length()), entry.getValue());\n      }\n    }\n    LOG.debug(\"Headers, including MIME types, passed by force from the CLI to morphline: {}\", commandLineMorphlineHeaders);\n\n    String metricName = MetricRegistry.name(Utils.getShortClassName(getClass()), Metrics.ELAPSED_TIME);\n    this.elapsedTime = morphlineContext.getMetricRegistry().timer(metricName);\n    Notifications.notifyBeginTransaction(morphline);\n  }\n\n","sourceOld":"  public MorphlineMapRunner(Configuration configuration, DocumentLoader loader, String solrHomeDir) throws IOException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"CWD is {}\", new File(\".\").getCanonicalPath());\n      TreeMap map = new TreeMap();\n      for (Map.Entry<String,String> entry : configuration) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      LOG.trace(\"Configuration:\\n{}\", Joiner.on(\"\\n\").join(map.entrySet()));\n    }\n    \n    FaultTolerance faultTolerance = new FaultTolerance(\n        configuration.getBoolean(FaultTolerance.IS_PRODUCTION_MODE, false), \n        configuration.getBoolean(FaultTolerance.IS_IGNORING_RECOVERABLE_EXCEPTIONS, false),\n        configuration.get(FaultTolerance.RECOVERABLE_EXCEPTION_CLASSES, SolrServerException.class.getName())        \n        );\n    \n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(new MetricRegistry())\n      .build();\n\n    class MySolrLocator extends SolrLocator { // trick to access protected ctor\n      public MySolrLocator(MorphlineContext ctx) {\n        super(ctx);\n      }\n    }\n\n    SolrLocator locator = new MySolrLocator(morphlineContext);\n    locator.setSolrHomeDir(solrHomeDir);\n    schema = locator.getIndexSchema();\n\n    // rebuild context, now with schema\n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setIndexSchema(schema)\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(morphlineContext.getMetricRegistry())\n      .build();\n\n    String morphlineFile = configuration.get(MORPHLINE_FILE_PARAM);\n    String morphlineId = configuration.get(MORPHLINE_ID_PARAM);\n    if (morphlineFile == null || morphlineFile.trim().length() == 0) {\n      throw new MorphlineCompilationException(\"Missing parameter: \" + MORPHLINE_FILE_PARAM, null);\n    }\n    Map morphlineVariables = new HashMap();\n    for (Map.Entry<String, String> entry : configuration) {\n      String variablePrefix = MORPHLINE_VARIABLE_PARAM + \".\";\n      if (entry.getKey().startsWith(variablePrefix)) {\n        morphlineVariables.put(entry.getKey().substring(variablePrefix.length()), entry.getValue());\n      }\n    }\n    Config override = ConfigFactory.parseMap(morphlineVariables);\n    morphline = new Compiler().compile(new File(morphlineFile), morphlineId, morphlineContext, null, override);\n    morphlineFileAndId = morphlineFile + \"@\" + morphlineId;\n    \n    disableFileOpen = configuration.getBoolean(DISABLE_FILE_OPEN, false);\n    LOG.debug(\"disableFileOpen: {}\", disableFileOpen);\n        \n    commandLineMorphlineHeaders = new HashMap();\n    for (Map.Entry<String,String> entry : configuration) {     \n      if (entry.getKey().startsWith(MORPHLINE_FIELD_PREFIX)) {\n        commandLineMorphlineHeaders.put(entry.getKey().substring(MORPHLINE_FIELD_PREFIX.length()), entry.getValue());\n      }\n    }\n    LOG.debug(\"Headers, including MIME types, passed by force from the CLI to morphline: {}\", commandLineMorphlineHeaders);\n\n    String metricName = MetricRegistry.name(Utils.getShortClassName(getClass()), Metrics.ELAPSED_TIME);\n    this.elapsedTime = morphlineContext.getMetricRegistry().timer(metricName);\n    Notifications.notifyBeginTransaction(morphline);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapRunner#MorphlineMapRunner(Configuration,DocumentLoader,String).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapRunner#MorphlineMapRunner(Configuration,DocumentLoader,String).mjava","sourceNew":"  public MorphlineMapRunner(Configuration configuration, DocumentLoader loader, String solrHomeDir) throws IOException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"CWD is {}\", new File(\".\").getCanonicalPath());\n      TreeMap map = new TreeMap();\n      for (Map.Entry<String,String> entry : configuration) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      LOG.trace(\"Configuration:\\n\" +\n          map.entrySet().stream().map(Object::toString).collect(Collectors.joining(\"\\n\")));\n    }\n    \n    FaultTolerance faultTolerance = new FaultTolerance(\n        configuration.getBoolean(FaultTolerance.IS_PRODUCTION_MODE, false), \n        configuration.getBoolean(FaultTolerance.IS_IGNORING_RECOVERABLE_EXCEPTIONS, false),\n        configuration.get(FaultTolerance.RECOVERABLE_EXCEPTION_CLASSES, SolrServerException.class.getName())        \n        );\n    \n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(new MetricRegistry())\n      .build();\n\n    class MySolrLocator extends SolrLocator { // trick to access protected ctor\n      public MySolrLocator(MorphlineContext ctx) {\n        super(ctx);\n      }\n    }\n\n    SolrLocator locator = new MySolrLocator(morphlineContext);\n    locator.setSolrHomeDir(solrHomeDir);\n    schema = locator.getIndexSchema();\n\n    // rebuild context, now with schema\n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setIndexSchema(schema)\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(morphlineContext.getMetricRegistry())\n      .build();\n\n    String morphlineFile = configuration.get(MORPHLINE_FILE_PARAM);\n    String morphlineId = configuration.get(MORPHLINE_ID_PARAM);\n    if (morphlineFile == null || morphlineFile.trim().length() == 0) {\n      throw new MorphlineCompilationException(\"Missing parameter: \" + MORPHLINE_FILE_PARAM, null);\n    }\n    Map morphlineVariables = new HashMap();\n    for (Map.Entry<String, String> entry : configuration) {\n      String variablePrefix = MORPHLINE_VARIABLE_PARAM + \".\";\n      if (entry.getKey().startsWith(variablePrefix)) {\n        morphlineVariables.put(entry.getKey().substring(variablePrefix.length()), entry.getValue());\n      }\n    }\n    Config override = ConfigFactory.parseMap(morphlineVariables);\n    morphline = new Compiler().compile(new File(morphlineFile), morphlineId, morphlineContext, null, override);\n    morphlineFileAndId = morphlineFile + \"@\" + morphlineId;\n    \n    disableFileOpen = configuration.getBoolean(DISABLE_FILE_OPEN, false);\n    LOG.debug(\"disableFileOpen: {}\", disableFileOpen);\n        \n    commandLineMorphlineHeaders = new HashMap();\n    for (Map.Entry<String,String> entry : configuration) {     \n      if (entry.getKey().startsWith(MORPHLINE_FIELD_PREFIX)) {\n        commandLineMorphlineHeaders.put(entry.getKey().substring(MORPHLINE_FIELD_PREFIX.length()), entry.getValue());\n      }\n    }\n    LOG.debug(\"Headers, including MIME types, passed by force from the CLI to morphline: {}\", commandLineMorphlineHeaders);\n\n    String metricName = MetricRegistry.name(Utils.getShortClassName(getClass()), Metrics.ELAPSED_TIME);\n    this.elapsedTime = morphlineContext.getMetricRegistry().timer(metricName);\n    Notifications.notifyBeginTransaction(morphline);\n  }\n\n","sourceOld":"  public MorphlineMapRunner(Configuration configuration, DocumentLoader loader, String solrHomeDir) throws IOException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"CWD is {}\", new File(\".\").getCanonicalPath());\n      TreeMap map = new TreeMap();\n      for (Map.Entry<String,String> entry : configuration) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      LOG.trace(\"Configuration:\\n{}\", Joiner.on(\"\\n\").join(map.entrySet()));\n    }\n    \n    FaultTolerance faultTolerance = new FaultTolerance(\n        configuration.getBoolean(FaultTolerance.IS_PRODUCTION_MODE, false), \n        configuration.getBoolean(FaultTolerance.IS_IGNORING_RECOVERABLE_EXCEPTIONS, false),\n        configuration.get(FaultTolerance.RECOVERABLE_EXCEPTION_CLASSES, SolrServerException.class.getName())        \n        );\n    \n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(new MetricRegistry())\n      .build();\n\n    class MySolrLocator extends SolrLocator { // trick to access protected ctor\n      public MySolrLocator(MorphlineContext ctx) {\n        super(ctx);\n      }\n    }\n\n    SolrLocator locator = new MySolrLocator(morphlineContext);\n    locator.setSolrHomeDir(solrHomeDir);\n    schema = locator.getIndexSchema();\n\n    // rebuild context, now with schema\n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setIndexSchema(schema)\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(morphlineContext.getMetricRegistry())\n      .build();\n\n    String morphlineFile = configuration.get(MORPHLINE_FILE_PARAM);\n    String morphlineId = configuration.get(MORPHLINE_ID_PARAM);\n    if (morphlineFile == null || morphlineFile.trim().length() == 0) {\n      throw new MorphlineCompilationException(\"Missing parameter: \" + MORPHLINE_FILE_PARAM, null);\n    }\n    Map morphlineVariables = new HashMap();\n    for (Map.Entry<String, String> entry : configuration) {\n      String variablePrefix = MORPHLINE_VARIABLE_PARAM + \".\";\n      if (entry.getKey().startsWith(variablePrefix)) {\n        morphlineVariables.put(entry.getKey().substring(variablePrefix.length()), entry.getValue());\n      }\n    }\n    Config override = ConfigFactory.parseMap(morphlineVariables);\n    morphline = new Compiler().compile(new File(morphlineFile), morphlineId, morphlineContext, null, override);\n    morphlineFileAndId = morphlineFile + \"@\" + morphlineId;\n    \n    disableFileOpen = configuration.getBoolean(DISABLE_FILE_OPEN, false);\n    LOG.debug(\"disableFileOpen: {}\", disableFileOpen);\n        \n    commandLineMorphlineHeaders = new HashMap();\n    for (Map.Entry<String,String> entry : configuration) {     \n      if (entry.getKey().startsWith(MORPHLINE_FIELD_PREFIX)) {\n        commandLineMorphlineHeaders.put(entry.getKey().substring(MORPHLINE_FIELD_PREFIX.length()), entry.getValue());\n      }\n    }\n    LOG.debug(\"Headers, including MIME types, passed by force from the CLI to morphline: {}\", commandLineMorphlineHeaders);\n\n    String metricName = MetricRegistry.name(Utils.getShortClassName(getClass()), Metrics.ELAPSED_TIME);\n    this.elapsedTime = morphlineContext.getMetricRegistry().timer(metricName);\n    Notifications.notifyBeginTransaction(morphline);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapRunner#MorphlineMapRunner(Configuration,DocumentLoader,String).mjava","sourceNew":null,"sourceOld":"  public MorphlineMapRunner(Configuration configuration, DocumentLoader loader, String solrHomeDir) throws IOException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"CWD is {}\", new File(\".\").getCanonicalPath());\n      TreeMap map = new TreeMap();\n      for (Map.Entry<String,String> entry : configuration) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      LOG.trace(\"Configuration:\\n\" +\n          map.entrySet().stream().map(Object::toString).collect(Collectors.joining(\"\\n\")));\n    }\n    \n    FaultTolerance faultTolerance = new FaultTolerance(\n        configuration.getBoolean(FaultTolerance.IS_PRODUCTION_MODE, false), \n        configuration.getBoolean(FaultTolerance.IS_IGNORING_RECOVERABLE_EXCEPTIONS, false),\n        configuration.get(FaultTolerance.RECOVERABLE_EXCEPTION_CLASSES, SolrServerException.class.getName())        \n        );\n    \n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(new MetricRegistry())\n      .build();\n\n    class MySolrLocator extends SolrLocator { // trick to access protected ctor\n      public MySolrLocator(MorphlineContext ctx) {\n        super(ctx);\n      }\n    }\n\n    SolrLocator locator = new MySolrLocator(morphlineContext);\n    locator.setSolrHomeDir(solrHomeDir);\n    schema = locator.getIndexSchema();\n\n    // rebuild context, now with schema\n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setIndexSchema(schema)\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(morphlineContext.getMetricRegistry())\n      .build();\n\n    String morphlineFile = configuration.get(MORPHLINE_FILE_PARAM);\n    String morphlineId = configuration.get(MORPHLINE_ID_PARAM);\n    if (morphlineFile == null || morphlineFile.trim().length() == 0) {\n      throw new MorphlineCompilationException(\"Missing parameter: \" + MORPHLINE_FILE_PARAM, null);\n    }\n    Map morphlineVariables = new HashMap();\n    for (Map.Entry<String, String> entry : configuration) {\n      String variablePrefix = MORPHLINE_VARIABLE_PARAM + \".\";\n      if (entry.getKey().startsWith(variablePrefix)) {\n        morphlineVariables.put(entry.getKey().substring(variablePrefix.length()), entry.getValue());\n      }\n    }\n    Config override = ConfigFactory.parseMap(morphlineVariables);\n    morphline = new Compiler().compile(new File(morphlineFile), morphlineId, morphlineContext, null, override);\n    morphlineFileAndId = morphlineFile + \"@\" + morphlineId;\n    \n    disableFileOpen = configuration.getBoolean(DISABLE_FILE_OPEN, false);\n    LOG.debug(\"disableFileOpen: {}\", disableFileOpen);\n        \n    commandLineMorphlineHeaders = new HashMap();\n    for (Map.Entry<String,String> entry : configuration) {     \n      if (entry.getKey().startsWith(MORPHLINE_FIELD_PREFIX)) {\n        commandLineMorphlineHeaders.put(entry.getKey().substring(MORPHLINE_FIELD_PREFIX.length()), entry.getValue());\n      }\n    }\n    LOG.debug(\"Headers, including MIME types, passed by force from the CLI to morphline: {}\", commandLineMorphlineHeaders);\n\n    String metricName = MetricRegistry.name(Utils.getShortClassName(getClass()), Metrics.ELAPSED_TIME);\n    this.elapsedTime = morphlineContext.getMetricRegistry().timer(metricName);\n    Notifications.notifyBeginTransaction(morphline);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/morphline/MorphlineMapRunner#MorphlineMapRunner(Configuration,DocumentLoader,String).mjava","sourceNew":null,"sourceOld":"  public MorphlineMapRunner(Configuration configuration, DocumentLoader loader, String solrHomeDir) throws IOException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"CWD is {}\", new File(\".\").getCanonicalPath());\n      TreeMap map = new TreeMap();\n      for (Map.Entry<String,String> entry : configuration) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      LOG.trace(\"Configuration:\\n\" +\n          map.entrySet().stream().map(Object::toString).collect(Collectors.joining(\"\\n\")));\n    }\n    \n    FaultTolerance faultTolerance = new FaultTolerance(\n        configuration.getBoolean(FaultTolerance.IS_PRODUCTION_MODE, false), \n        configuration.getBoolean(FaultTolerance.IS_IGNORING_RECOVERABLE_EXCEPTIONS, false),\n        configuration.get(FaultTolerance.RECOVERABLE_EXCEPTION_CLASSES, SolrServerException.class.getName())        \n        );\n    \n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(new MetricRegistry())\n      .build();\n\n    class MySolrLocator extends SolrLocator { // trick to access protected ctor\n      public MySolrLocator(MorphlineContext ctx) {\n        super(ctx);\n      }\n    }\n\n    SolrLocator locator = new MySolrLocator(morphlineContext);\n    locator.setSolrHomeDir(solrHomeDir);\n    schema = locator.getIndexSchema();\n\n    // rebuild context, now with schema\n    morphlineContext = new SolrMorphlineContext.Builder()\n      .setIndexSchema(schema)\n      .setDocumentLoader(loader)\n      .setExceptionHandler(faultTolerance)\n      .setMetricRegistry(morphlineContext.getMetricRegistry())\n      .build();\n\n    String morphlineFile = configuration.get(MORPHLINE_FILE_PARAM);\n    String morphlineId = configuration.get(MORPHLINE_ID_PARAM);\n    if (morphlineFile == null || morphlineFile.trim().length() == 0) {\n      throw new MorphlineCompilationException(\"Missing parameter: \" + MORPHLINE_FILE_PARAM, null);\n    }\n    Map morphlineVariables = new HashMap();\n    for (Map.Entry<String, String> entry : configuration) {\n      String variablePrefix = MORPHLINE_VARIABLE_PARAM + \".\";\n      if (entry.getKey().startsWith(variablePrefix)) {\n        morphlineVariables.put(entry.getKey().substring(variablePrefix.length()), entry.getValue());\n      }\n    }\n    Config override = ConfigFactory.parseMap(morphlineVariables);\n    morphline = new Compiler().compile(new File(morphlineFile), morphlineId, morphlineContext, null, override);\n    morphlineFileAndId = morphlineFile + \"@\" + morphlineId;\n    \n    disableFileOpen = configuration.getBoolean(DISABLE_FILE_OPEN, false);\n    LOG.debug(\"disableFileOpen: {}\", disableFileOpen);\n        \n    commandLineMorphlineHeaders = new HashMap();\n    for (Map.Entry<String,String> entry : configuration) {     \n      if (entry.getKey().startsWith(MORPHLINE_FIELD_PREFIX)) {\n        commandLineMorphlineHeaders.put(entry.getKey().substring(MORPHLINE_FIELD_PREFIX.length()), entry.getValue());\n      }\n    }\n    LOG.debug(\"Headers, including MIME types, passed by force from the CLI to morphline: {}\", commandLineMorphlineHeaders);\n\n    String metricName = MetricRegistry.name(Utils.getShortClassName(getClass()), Metrics.ELAPSED_TIME);\n    this.elapsedTime = morphlineContext.getMetricRegistry().timer(metricName);\n    Notifications.notifyBeginTransaction(morphline);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"320888923ec13b91f53082558f01f4c9960dd226":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","74f45af4339b0daf7a95c820ab88c1aea74fbce0","320888923ec13b91f53082558f01f4c9960dd226"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["12109b652e9210b8d58fca47f6c4a725d058a58e","320888923ec13b91f53082558f01f4c9960dd226","fe1c4aa9af769a38e878f608070f672efbeac27f"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"320888923ec13b91f53082558f01f4c9960dd226":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","320888923ec13b91f53082558f01f4c9960dd226","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}