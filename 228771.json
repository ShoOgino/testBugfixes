{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyValue[CurrencyField]#parse(String,String).mjava","commits":[{"id":"c2635332d49f7c5a0b484950462a01775512628e","date":1331332806,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyValue[CurrencyField]#parse(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a new currency value by parsing the specific input.\n   * <p/>\n   * Currency values are expected to be in the format &lt;amount&gt;,&lt;currency code&gt;,\n   * for example, \"500,USD\" would represent 5 U.S. Dollars.\n   * <p/>\n   * If no currency code is specified, the default is assumed.\n   *\n   * @param externalVal The value to parse.\n   * @param defaultCurrency The default currency.\n   * @return The parsed CurrencyValue.\n   */\n  public static CurrencyValue parse(String externalVal, String defaultCurrency) {\n    String amount = externalVal;\n    String code = defaultCurrency;\n\n    if (externalVal.contains(\",\")) {\n      String[] amountAndCode = externalVal.split(\",\");\n      amount = amountAndCode[0];\n      code = amountAndCode[1];\n    }\n\n    Currency currency = java.util.Currency.getInstance(code);\n\n    if (currency == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + code);\n    }\n\n    try {\n      double value = Double.parseDouble(amount);\n      long currencyValue = Math.round(value * Math.pow(10.0, currency.getDefaultFractionDigits()));\n\n      return new CurrencyValue(currencyValue, code);\n    } catch (NumberFormatException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["12dafe10e13e4a09ad16f617b6c5013460fd7c58"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyValue[CurrencyField]#parse(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a new currency value by parsing the specific input.\n   * <p/>\n   * Currency values are expected to be in the format &lt;amount&gt;,&lt;currency code&gt;,\n   * for example, \"500,USD\" would represent 5 U.S. Dollars.\n   * <p/>\n   * If no currency code is specified, the default is assumed.\n   *\n   * @param externalVal The value to parse.\n   * @param defaultCurrency The default currency.\n   * @return The parsed CurrencyValue.\n   */\n  public static CurrencyValue parse(String externalVal, String defaultCurrency) {\n    String amount = externalVal;\n    String code = defaultCurrency;\n\n    if (externalVal.contains(\",\")) {\n      String[] amountAndCode = externalVal.split(\",\");\n      amount = amountAndCode[0];\n      code = amountAndCode[1];\n    }\n\n    Currency currency = java.util.Currency.getInstance(code);\n\n    if (currency == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + code);\n    }\n\n    try {\n      double value = Double.parseDouble(amount);\n      long currencyValue = Math.round(value * Math.pow(10.0, currency.getDefaultFractionDigits()));\n\n      return new CurrencyValue(currencyValue, code);\n    } catch (NumberFormatException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"065a346f4fa5753b5f30aa6604c804696389d793","date":1348531407,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyValue[CurrencyField]#parse(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyValue[CurrencyField]#parse(String,String).mjava","sourceNew":"  /**\n   * Constructs a new currency value by parsing the specific input.\n   * <p/>\n   * Currency values are expected to be in the format &lt;amount&gt;,&lt;currency code&gt;,\n   * for example, \"500,USD\" would represent 5 U.S. Dollars.\n   * <p/>\n   * If no currency code is specified, the default is assumed.\n   *\n   * @param externalVal The value to parse.\n   * @param defaultCurrency The default currency.\n   * @return The parsed CurrencyValue.\n   */\n  public static CurrencyValue parse(String externalVal, String defaultCurrency) {\n    if (externalVal == null) {\n      return null;\n    }\n    String amount = externalVal;\n    String code = defaultCurrency;\n\n    if (externalVal.contains(\",\")) {\n      String[] amountAndCode = externalVal.split(\",\");\n      amount = amountAndCode[0];\n      code = amountAndCode[1];\n    }\n\n    if (amount.equals(\"*\")) {\n      return null;\n    }\n    \n    Currency currency = java.util.Currency.getInstance(code);\n\n    if (currency == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + code);\n    }\n\n    try {\n      double value = Double.parseDouble(amount);\n      long currencyValue = Math.round(value * Math.pow(10.0, currency.getDefaultFractionDigits()));\n\n      return new CurrencyValue(currencyValue, code);\n    } catch (NumberFormatException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new currency value by parsing the specific input.\n   * <p/>\n   * Currency values are expected to be in the format &lt;amount&gt;,&lt;currency code&gt;,\n   * for example, \"500,USD\" would represent 5 U.S. Dollars.\n   * <p/>\n   * If no currency code is specified, the default is assumed.\n   *\n   * @param externalVal The value to parse.\n   * @param defaultCurrency The default currency.\n   * @return The parsed CurrencyValue.\n   */\n  public static CurrencyValue parse(String externalVal, String defaultCurrency) {\n    String amount = externalVal;\n    String code = defaultCurrency;\n\n    if (externalVal.contains(\",\")) {\n      String[] amountAndCode = externalVal.split(\",\");\n      amount = amountAndCode[0];\n      code = amountAndCode[1];\n    }\n\n    Currency currency = java.util.Currency.getInstance(code);\n\n    if (currency == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + code);\n    }\n\n    try {\n      double value = Double.parseDouble(amount);\n      long currencyValue = Math.round(value * Math.pow(10.0, currency.getDefaultFractionDigits()));\n\n      return new CurrencyValue(currencyValue, code);\n    } catch (NumberFormatException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12dafe10e13e4a09ad16f617b6c5013460fd7c58","date":1362255003,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyValue[CurrencyField]#parse(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyValue[CurrencyField]#parse(String,String).mjava","sourceNew":"  /**\n   * Constructs a new currency value by parsing the specific input.\n   * <p/>\n   * Currency values are expected to be in the format &lt;amount&gt;,&lt;currency code&gt;,\n   * for example, \"500,USD\" would represent 5 U.S. Dollars.\n   * <p/>\n   * If no currency code is specified, the default is assumed.\n   *\n   * @param externalVal The value to parse.\n   * @param defaultCurrency The default currency.\n   * @return The parsed CurrencyValue.\n   */\n  public static CurrencyValue parse(String externalVal, String defaultCurrency) {\n    if (externalVal == null) {\n      return null;\n    }\n    String amount = externalVal;\n    String code = defaultCurrency;\n\n    if (externalVal.contains(\",\")) {\n      String[] amountAndCode = externalVal.split(\",\");\n      amount = amountAndCode[0];\n      code = amountAndCode[1];\n    }\n\n    if (amount.equals(\"*\")) {\n      return null;\n    }\n    \n    Currency currency = CurrencyField.getCurrency(code);\n\n    if (currency == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Currency code not supported by this JVM: \" + code);\n    }\n\n    try {\n      double value = Double.parseDouble(amount);\n      long currencyValue = Math.round(value * Math.pow(10.0, currency.getDefaultFractionDigits()));\n\n      return new CurrencyValue(currencyValue, code);\n    } catch (NumberFormatException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new currency value by parsing the specific input.\n   * <p/>\n   * Currency values are expected to be in the format &lt;amount&gt;,&lt;currency code&gt;,\n   * for example, \"500,USD\" would represent 5 U.S. Dollars.\n   * <p/>\n   * If no currency code is specified, the default is assumed.\n   *\n   * @param externalVal The value to parse.\n   * @param defaultCurrency The default currency.\n   * @return The parsed CurrencyValue.\n   */\n  public static CurrencyValue parse(String externalVal, String defaultCurrency) {\n    if (externalVal == null) {\n      return null;\n    }\n    String amount = externalVal;\n    String code = defaultCurrency;\n\n    if (externalVal.contains(\",\")) {\n      String[] amountAndCode = externalVal.split(\",\");\n      amount = amountAndCode[0];\n      code = amountAndCode[1];\n    }\n\n    if (amount.equals(\"*\")) {\n      return null;\n    }\n    \n    Currency currency = java.util.Currency.getInstance(code);\n\n    if (currency == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + code);\n    }\n\n    try {\n      double value = Double.parseDouble(amount);\n      long currencyValue = Math.round(value * Math.pow(10.0, currency.getDefaultFractionDigits()));\n\n      return new CurrencyValue(currencyValue, code);\n    } catch (NumberFormatException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":["c2635332d49f7c5a0b484950462a01775512628e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyValue[CurrencyField]#parse(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs a new currency value by parsing the specific input.\n   * <p/>\n   * Currency values are expected to be in the format &lt;amount&gt;,&lt;currency code&gt;,\n   * for example, \"500,USD\" would represent 5 U.S. Dollars.\n   * <p/>\n   * If no currency code is specified, the default is assumed.\n   *\n   * @param externalVal The value to parse.\n   * @param defaultCurrency The default currency.\n   * @return The parsed CurrencyValue.\n   */\n  public static CurrencyValue parse(String externalVal, String defaultCurrency) {\n    if (externalVal == null) {\n      return null;\n    }\n    String amount = externalVal;\n    String code = defaultCurrency;\n\n    if (externalVal.contains(\",\")) {\n      String[] amountAndCode = externalVal.split(\",\");\n      amount = amountAndCode[0];\n      code = amountAndCode[1];\n    }\n\n    if (amount.equals(\"*\")) {\n      return null;\n    }\n    \n    Currency currency = CurrencyField.getCurrency(code);\n\n    if (currency == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Currency code not supported by this JVM: \" + code);\n    }\n\n    try {\n      double value = Double.parseDouble(amount);\n      long currencyValue = Math.round(value * Math.pow(10.0, currency.getDefaultFractionDigits()));\n\n      return new CurrencyValue(currencyValue, code);\n    } catch (NumberFormatException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyValue[CurrencyField]#parse(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs a new currency value by parsing the specific input.\n   * <p/>\n   * Currency values are expected to be in the format &lt;amount&gt;,&lt;currency code&gt;,\n   * for example, \"500,USD\" would represent 5 U.S. Dollars.\n   * <p/>\n   * If no currency code is specified, the default is assumed.\n   *\n   * @param externalVal The value to parse.\n   * @param defaultCurrency The default currency.\n   * @return The parsed CurrencyValue.\n   */\n  public static CurrencyValue parse(String externalVal, String defaultCurrency) {\n    if (externalVal == null) {\n      return null;\n    }\n    String amount = externalVal;\n    String code = defaultCurrency;\n\n    if (externalVal.contains(\",\")) {\n      String[] amountAndCode = externalVal.split(\",\");\n      amount = amountAndCode[0];\n      code = amountAndCode[1];\n    }\n\n    if (amount.equals(\"*\")) {\n      return null;\n    }\n    \n    Currency currency = CurrencyField.getCurrency(code);\n\n    if (currency == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Currency code not supported by this JVM: \" + code);\n    }\n\n    try {\n      double value = Double.parseDouble(amount);\n      long currencyValue = Math.round(value * Math.pow(10.0, currency.getDefaultFractionDigits()));\n\n      return new CurrencyValue(currencyValue, code);\n    } catch (NumberFormatException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyValue[CurrencyField]#parse(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs a new currency value by parsing the specific input.\n   * <p/>\n   * Currency values are expected to be in the format &lt;amount&gt;,&lt;currency code&gt;,\n   * for example, \"500,USD\" would represent 5 U.S. Dollars.\n   * <p/>\n   * If no currency code is specified, the default is assumed.\n   *\n   * @param externalVal The value to parse.\n   * @param defaultCurrency The default currency.\n   * @return The parsed CurrencyValue.\n   */\n  public static CurrencyValue parse(String externalVal, String defaultCurrency) {\n    if (externalVal == null) {\n      return null;\n    }\n    String amount = externalVal;\n    String code = defaultCurrency;\n\n    if (externalVal.contains(\",\")) {\n      String[] amountAndCode = externalVal.split(\",\");\n      amount = amountAndCode[0];\n      code = amountAndCode[1];\n    }\n\n    if (amount.equals(\"*\")) {\n      return null;\n    }\n    \n    Currency currency = CurrencyField.getCurrency(code);\n\n    if (currency == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Currency code not supported by this JVM: \" + code);\n    }\n\n    try {\n      double value = Double.parseDouble(amount);\n      long currencyValue = Math.round(value * Math.pow(10.0, currency.getDefaultFractionDigits()));\n\n      return new CurrencyValue(currencyValue, code);\n    } catch (NumberFormatException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2635332d49f7c5a0b484950462a01775512628e"],"c2635332d49f7c5a0b484950462a01775512628e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12dafe10e13e4a09ad16f617b6c5013460fd7c58":["065a346f4fa5753b5f30aa6604c804696389d793"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["12dafe10e13e4a09ad16f617b6c5013460fd7c58","f107636c2cc82350a2607d774c092da5b73152e5"],"065a346f4fa5753b5f30aa6604c804696389d793":["c2635332d49f7c5a0b484950462a01775512628e"],"28288370235ed02234a64753cdbf0c6ec096304a":["12dafe10e13e4a09ad16f617b6c5013460fd7c58","f107636c2cc82350a2607d774c092da5b73152e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"f107636c2cc82350a2607d774c092da5b73152e5":["12dafe10e13e4a09ad16f617b6c5013460fd7c58"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","c2635332d49f7c5a0b484950462a01775512628e"],"c2635332d49f7c5a0b484950462a01775512628e":["38e3b736c7ca086d61b7dbb841c905ee115490da","065a346f4fa5753b5f30aa6604c804696389d793"],"12dafe10e13e4a09ad16f617b6c5013460fd7c58":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"065a346f4fa5753b5f30aa6604c804696389d793":["12dafe10e13e4a09ad16f617b6c5013460fd7c58"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}