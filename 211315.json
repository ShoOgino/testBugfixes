{"path":"src/apps/SolarTest/src/SolrTest#validate(String,String,char[]).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/apps/SolarTest/src/SolrTest#validate(String,String,char[]).mjava","pathOld":"/dev/null","sourceNew":"  private void validate(String req, String test, char[] resp) {\n    if (test==null || test.length()==0) return;\n    Document document=null;\n    try {\n      // the resp[] contains a declaration that it is UTF-8, so we\n      // need to change it to that for the XML parser.\n\n      document = builder.parse(new ByteArrayInputStream(new String(resp).getBytes(\"UTF-8\")));\n      // document = builder.parse(new String(resp));\n    } catch (Exception e) {\n      System.out.println(\"ERROR parsing '\" + new String(resp) + \"'\");\n      throw new RuntimeException(e);\n    }\n\n      String[] tests = test.split(\"%\");\n      for (String xp : tests) {\n        Boolean bool=false;\n        xp=xp.trim();\n        try {\n           bool = (Boolean) xpath.evaluate(xp, document, XPathConstants.BOOLEAN);\n        } catch (Exception e) {\n          System.out.println(\"##################ERROR EVALUATING XPATH '\" + xp + \"'\");\n          throw new RuntimeException(e);\n        }\n        if (!bool) {\n          System.out.println(\"##################ERROR\");\n          System.out.println(\"req=\"+req);\n          System.out.println(\"xp=\"+xp);\n          throw new RuntimeException(\"test failed.\");\n        }\n      }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd1be603b11b775ddafa5c4992cf204880586294","date":1139350157,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/apps/SolrTest/src/SolrTest#validate(String,String,char[]).mjava","pathOld":"src/apps/SolarTest/src/SolrTest#validate(String,String,char[]).mjava","sourceNew":"  private void validate(String req, String test, char[] resp) {\n    if (test==null || test.length()==0) return;\n    Document document=null;\n    try {\n      // the resp[] contains a declaration that it is UTF-8, so we\n      // need to change it to that for the XML parser.\n\n      document = builder.parse(new ByteArrayInputStream(new String(resp).getBytes(\"UTF-8\")));\n      // document = builder.parse(new String(resp));\n    } catch (Exception e) {\n      System.out.println(\"ERROR parsing '\" + new String(resp) + \"'\");\n      throw new RuntimeException(e);\n    }\n\n      String[] tests = test.split(\"%\");\n      for (String xp : tests) {\n        Boolean bool=false;\n        xp=xp.trim();\n        try {\n           bool = (Boolean) xpath.evaluate(xp, document, XPathConstants.BOOLEAN);\n        } catch (Exception e) {\n          System.out.println(\"##################ERROR EVALUATING XPATH '\" + xp + \"'\");\n          throw new RuntimeException(e);\n        }\n        if (!bool) {\n          System.out.println(\"##################ERROR\");\n          System.out.println(\"req=\"+req);\n          System.out.println(\"xp=\"+xp);\n          throw new RuntimeException(\"test failed.\");\n        }\n      }\n\n  }\n\n","sourceOld":"  private void validate(String req, String test, char[] resp) {\n    if (test==null || test.length()==0) return;\n    Document document=null;\n    try {\n      // the resp[] contains a declaration that it is UTF-8, so we\n      // need to change it to that for the XML parser.\n\n      document = builder.parse(new ByteArrayInputStream(new String(resp).getBytes(\"UTF-8\")));\n      // document = builder.parse(new String(resp));\n    } catch (Exception e) {\n      System.out.println(\"ERROR parsing '\" + new String(resp) + \"'\");\n      throw new RuntimeException(e);\n    }\n\n      String[] tests = test.split(\"%\");\n      for (String xp : tests) {\n        Boolean bool=false;\n        xp=xp.trim();\n        try {\n           bool = (Boolean) xpath.evaluate(xp, document, XPathConstants.BOOLEAN);\n        } catch (Exception e) {\n          System.out.println(\"##################ERROR EVALUATING XPATH '\" + xp + \"'\");\n          throw new RuntimeException(e);\n        }\n        if (!bool) {\n          System.out.println(\"##################ERROR\");\n          System.out.println(\"req=\"+req);\n          System.out.println(\"xp=\"+xp);\n          throw new RuntimeException(\"test failed.\");\n        }\n      }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fd1be603b11b775ddafa5c4992cf204880586294":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fd1be603b11b775ddafa5c4992cf204880586294":[],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["fd1be603b11b775ddafa5c4992cf204880586294"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd1be603b11b775ddafa5c4992cf204880586294","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}