{"path":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,File,SortedMap[ServletHolder,String],SortedMap[Class,String],SSLConfig).mjava","commits":[{"id":"ccd5879f653e621285dee30b556303244d9ec4a3","date":1421795206,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,File,SortedMap[ServletHolder,String],SortedMap[Class,String],SSLConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * \"Mini\" SolrCloud cluster to be used for testing\n   * @param numServers number of Solr servers to start\n   * @param hostContext context path of Solr servers used by Jetty\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param extraServlets Extra servlets to be started by Jetty\n   * @param extraRequestFilters extra filters to be started by Jetty\n   * @param sslConfig SSL configuration\n   */\n  public MiniSolrCloudCluster(int numServers, String hostContext, File baseDir, File solrXml,\n      SortedMap<ServletHolder, String> extraServlets,\n      SortedMap<Class, String> extraRequestFilters,\n      SSLConfig sslConfig) throws Exception {\n    testDir = baseDir;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    jettys = new LinkedList<JettySolrRunner>();\n    for (int i = 0; i < numServers; ++i) {\n      if (sslConfig == null) {\n        startJettySolrRunner(hostContext, extraServlets, extraRequestFilters);\n      } else {\n        startJettySolrRunner(hostContext, extraServlets, extraRequestFilters, sslConfig);\n      }\n    }\n    \n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c66158bb16e902a21272772f1b911f04b1a55abb","date":1424959524,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,File,SortedMap[ServletHolder,String],SortedMap[Class,String],SSLConfig).mjava","sourceNew":"  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig) throws Exception {\n\n    this.testDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    jettys = new LinkedList<>();\n    for (int i = 0; i < numServers; ++i) {\n      startJettySolrRunner(jettyConfig);\n    }\n    \n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  /**\n   * \"Mini\" SolrCloud cluster to be used for testing\n   * @param numServers number of Solr servers to start\n   * @param hostContext context path of Solr servers used by Jetty\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param extraServlets Extra servlets to be started by Jetty\n   * @param extraRequestFilters extra filters to be started by Jetty\n   * @param sslConfig SSL configuration\n   */\n  public MiniSolrCloudCluster(int numServers, String hostContext, File baseDir, File solrXml,\n      SortedMap<ServletHolder, String> extraServlets,\n      SortedMap<Class, String> extraRequestFilters,\n      SSLConfig sslConfig) throws Exception {\n    testDir = baseDir;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    jettys = new LinkedList<JettySolrRunner>();\n    for (int i = 0; i < numServers; ++i) {\n      if (sslConfig == null) {\n        startJettySolrRunner(hostContext, extraServlets, extraRequestFilters);\n      } else {\n        startJettySolrRunner(hostContext, extraServlets, extraRequestFilters, sslConfig);\n      }\n    }\n    \n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,File,SortedMap[ServletHolder,String],SortedMap[Class,String],SSLConfig).mjava","sourceNew":null,"sourceOld":"  /**\n   * \"Mini\" SolrCloud cluster to be used for testing\n   * @param numServers number of Solr servers to start\n   * @param hostContext context path of Solr servers used by Jetty\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param extraServlets Extra servlets to be started by Jetty\n   * @param extraRequestFilters extra filters to be started by Jetty\n   * @param sslConfig SSL configuration\n   */\n  public MiniSolrCloudCluster(int numServers, String hostContext, File baseDir, File solrXml,\n      SortedMap<ServletHolder, String> extraServlets,\n      SortedMap<Class, String> extraRequestFilters,\n      SSLConfig sslConfig) throws Exception {\n    testDir = baseDir;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    jettys = new LinkedList<JettySolrRunner>();\n    for (int i = 0; i < numServers; ++i) {\n      if (sslConfig == null) {\n        startJettySolrRunner(hostContext, extraServlets, extraRequestFilters);\n      } else {\n        startJettySolrRunner(hostContext, extraServlets, extraRequestFilters, sslConfig);\n      }\n    }\n    \n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ccd5879f653e621285dee30b556303244d9ec4a3","c66158bb16e902a21272772f1b911f04b1a55abb"],"ccd5879f653e621285dee30b556303244d9ec4a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c66158bb16e902a21272772f1b911f04b1a55abb"],"c66158bb16e902a21272772f1b911f04b1a55abb":["ccd5879f653e621285dee30b556303244d9ec4a3"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"ccd5879f653e621285dee30b556303244d9ec4a3":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c66158bb16e902a21272772f1b911f04b1a55abb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccd5879f653e621285dee30b556303244d9ec4a3"],"c66158bb16e902a21272772f1b911f04b1a55abb":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}