{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testPoints().mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testPoints().mjava","pathOld":"/dev/null","sourceNew":"  public void testPoints() throws Exception {\n    for(LeafReaderContext ctx : sortedReader.leaves()) {\n      final LeafReader reader = ctx.reader();\n      PointValues values = reader.getPointValues();\n      values.intersect(DIMENSIONAL_FIELD,\n                       new IntersectVisitor() {\n                         @Override\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValues) throws IOException {\n                           int id = Integer.parseInt(reader.document(docID).get(ID_FIELD));\n                           assertEquals(id, NumericUtils.sortableBytesToInt(packedValues, 0));\n                         }\n\n                         @Override\n                         public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                       });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ff25cb7bb787cbe9d05740c89a527ddd2617c16","date":1462702859,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testPoints().mjava","sourceNew":null,"sourceOld":"  public void testPoints() throws Exception {\n    for(LeafReaderContext ctx : sortedReader.leaves()) {\n      final LeafReader reader = ctx.reader();\n      PointValues values = reader.getPointValues();\n      values.intersect(DIMENSIONAL_FIELD,\n                       new IntersectVisitor() {\n                         @Override\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValues) throws IOException {\n                           int id = Integer.parseInt(reader.document(docID).get(ID_FIELD));\n                           assertEquals(id, NumericUtils.sortableBytesToInt(packedValues, 0));\n                         }\n\n                         @Override\n                         public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                       });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ff25cb7bb787cbe9d05740c89a527ddd2617c16":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["4ff25cb7bb787cbe9d05740c89a527ddd2617c16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ff25cb7bb787cbe9d05740c89a527ddd2617c16":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ff25cb7bb787cbe9d05740c89a527ddd2617c16","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}