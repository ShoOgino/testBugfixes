{"path":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,LockFactory,boolean).mjava","commits":[{"id":"b583d3621fe173e7296abcf62f82fb707c901234","date":1194717060,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,LockFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the directory instance for the named location.\n   * @param file the path to the directory.\n   * @param lockFactory instance of {@link LockFactory} providing the\n   *        locking implementation.  If null, the default\n   *        {@link SimpleFSLockFactory} is used.\n   * @param doSync if true (the default), sync() is called\n   *        on all file descriptors before close().  This\n   *        improves the likelihood that the index will\n   *        remain consistent when the OS or machine crashes\n   *        or the power cord is pulled.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, LockFactory lockFactory, boolean doSync)\n    throws IOException\n  {\n    file = new File(file.getCanonicalPath());\n\n    if (file.exists() && !file.isDirectory())\n      throw new IOException(file + \" not a directory\");\n\n    if (!file.exists())\n      if (!file.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + file);\n\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString(), e);\n        }\n        dir.init(file, lockFactory, doSync);\n        DIRECTORIES.put(file, dir);\n      } else {\n        // Catch the case where a Directory is pulled from the cache, but has a\n        // different LockFactory instance.\n        if (lockFactory != null && lockFactory != dir.getLockFactory()) {\n          throw new IOException(\"Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\");\n        }\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015c55424dd37249054283bedc90388bd45358f","date":1197049353,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,LockFactory,boolean).mjava","sourceNew":null,"sourceOld":"  /** Returns the directory instance for the named location.\n   * @param file the path to the directory.\n   * @param lockFactory instance of {@link LockFactory} providing the\n   *        locking implementation.  If null, the default\n   *        {@link SimpleFSLockFactory} is used.\n   * @param doSync if true (the default), sync() is called\n   *        on all file descriptors before close().  This\n   *        improves the likelihood that the index will\n   *        remain consistent when the OS or machine crashes\n   *        or the power cord is pulled.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, LockFactory lockFactory, boolean doSync)\n    throws IOException\n  {\n    file = new File(file.getCanonicalPath());\n\n    if (file.exists() && !file.isDirectory())\n      throw new IOException(file + \" not a directory\");\n\n    if (!file.exists())\n      if (!file.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + file);\n\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString(), e);\n        }\n        dir.init(file, lockFactory, doSync);\n        DIRECTORIES.put(file, dir);\n      } else {\n        // Catch the case where a Directory is pulled from the cache, but has a\n        // different LockFactory instance.\n        if (lockFactory != null && lockFactory != dir.getLockFactory()) {\n          throw new IOException(\"Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\");\n        }\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b583d3621fe173e7296abcf62f82fb707c901234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a015c55424dd37249054283bedc90388bd45358f":["b583d3621fe173e7296abcf62f82fb707c901234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a015c55424dd37249054283bedc90388bd45358f"]},"commit2Childs":{"b583d3621fe173e7296abcf62f82fb707c901234":["a015c55424dd37249054283bedc90388bd45358f"],"a015c55424dd37249054283bedc90388bd45358f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b583d3621fe173e7296abcf62f82fb707c901234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}