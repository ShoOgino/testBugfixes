{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/Lucene3xFields.PreTermsEnum#setNewSuffixStart(BytesRef,BytesRef).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/Lucene3xFields.PreTermsEnum#setNewSuffixStart(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#setNewSuffixStart(BytesRef,BytesRef).mjava","sourceNew":"    private void setNewSuffixStart(BytesRef br1, BytesRef br2) {\n      final int limit = Math.min(br1.length, br2.length);\n      int lastStart = 0;\n      for(int i=0;i<limit;i++) {\n        if ((br1.bytes[br1.offset+i] & 0xc0) == 0xc0 || (br1.bytes[br1.offset+i] & 0x80) == 0) {\n          lastStart = i;\n        }\n        if (br1.bytes[br1.offset+i] != br2.bytes[br2.offset+i]) {\n          newSuffixStart = lastStart;\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n          }\n          return;\n        }\n      }\n      newSuffixStart = limit;\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n      }\n    }\n\n","sourceOld":"    private void setNewSuffixStart(BytesRef br1, BytesRef br2) {\n      final int limit = Math.min(br1.length, br2.length);\n      int lastStart = 0;\n      for(int i=0;i<limit;i++) {\n        if ((br1.bytes[br1.offset+i] & 0xc0) == 0xc0 || (br1.bytes[br1.offset+i] & 0x80) == 0) {\n          lastStart = i;\n        }\n        if (br1.bytes[br1.offset+i] != br2.bytes[br2.offset+i]) {\n          newSuffixStart = lastStart;\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n          }\n          return;\n        }\n      }\n      newSuffixStart = limit;\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.PreTermsEnum#setNewSuffixStart(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/Lucene3xFields.PreTermsEnum#setNewSuffixStart(BytesRef,BytesRef).mjava","sourceNew":"    private void setNewSuffixStart(BytesRef br1, BytesRef br2) {\n      final int limit = Math.min(br1.length, br2.length);\n      int lastStart = 0;\n      for(int i=0;i<limit;i++) {\n        if ((br1.bytes[br1.offset+i] & 0xc0) == 0xc0 || (br1.bytes[br1.offset+i] & 0x80) == 0) {\n          lastStart = i;\n        }\n        if (br1.bytes[br1.offset+i] != br2.bytes[br2.offset+i]) {\n          newSuffixStart = lastStart;\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n          }\n          return;\n        }\n      }\n      newSuffixStart = limit;\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n      }\n    }\n\n","sourceOld":"    private void setNewSuffixStart(BytesRef br1, BytesRef br2) {\n      final int limit = Math.min(br1.length, br2.length);\n      int lastStart = 0;\n      for(int i=0;i<limit;i++) {\n        if ((br1.bytes[br1.offset+i] & 0xc0) == 0xc0 || (br1.bytes[br1.offset+i] & 0x80) == 0) {\n          lastStart = i;\n        }\n        if (br1.bytes[br1.offset+i] != br2.bytes[br2.offset+i]) {\n          newSuffixStart = lastStart;\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n          }\n          return;\n        }\n      }\n      newSuffixStart = limit;\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}