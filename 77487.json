{"path":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","commits":[{"id":"c8fda790e002fff32e201cbd0f7bed4c2b333a64","date":1309401082,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"06584e6e98d592b34e1329b384182f368d2025e8":["c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["06584e6e98d592b34e1329b384182f368d2025e8","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8fda790e002fff32e201cbd0f7bed4c2b333a64","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}