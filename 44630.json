{"path":"solr/core/src/java/org/apache/solr/util/DOMUtil#getText(Node).mjava","commits":[{"id":"e6a2315ba749856e5787b2ad962fa124bc3ed121","date":1334194349,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DOMUtil#getText(Node).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#getText(Node).mjava","sourceNew":"  /**\n   * Drop in replacement for Node.getTextContent().\n   *\n   * <p>\n   * This method is provided to support the same functionality as\n   * Node.getTextContent() but in a way that is DOM Level 2 compatible.\n   * </p>\n   *\n   * @see <a href=\"http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-textContent\">DOM Object Model Core</a>\n   */\n  public static String getText(Node nd) {\n\n    short type = nd.getNodeType();\n\n    // for most node types, we can defer to the recursive helper method,\n    // but when asked for the text of these types, we must return null\n    // (Not the empty string)\n    switch (type) {\n\n    case Node.DOCUMENT_NODE: /* fall through */\n    case Node.DOCUMENT_TYPE_NODE: /* fall through */\n    case Node.NOTATION_NODE: /* fall through */\n      return null;\n    }\n\n    StringBuilder sb = new StringBuilder();\n    getText(nd, sb);\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Drop in replacement for Node.getTextContent().\n   *\n   * <p>\n   * This method is provided to support the same functionality as\n   * Node.getTextContent() but in a way that is DOM Level 2 compatible.\n   * </p>\n   *\n   * @see <a href=\"http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-textContent\">DOM Object Model Core</a>\n   */\n  public static String getText(Node nd) {\n\n    short type = nd.getNodeType();\n\n    // for most node types, we can defer to the recursive helper method,\n    // but when asked for the text of these types, we must return null\n    // (Not the empty string)\n    switch (type) {\n\n    case Node.DOCUMENT_NODE: /* fall through */\n    case Node.DOCUMENT_TYPE_NODE: /* fall through */\n    case Node.NOTATION_NODE: /* fall through */\n      return null;\n    }\n\n    StringBuilder sb = new StringBuilder();\n    getText(nd, sb);\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23a18981fcc2648fd6e83e9e84e8fa023eb0484b","date":1602334330,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#getText(Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DOMUtil#getText(Node).mjava","sourceNew":"  /**\n   * Drop in replacement for Node.getTextContent().\n   *\n   * <p>\n   * This method is provided to support the same functionality as\n   * Node.getTextContent() but in a way that is DOM Level 2 compatible.\n   * </p>\n   *\n   * @see <a href=\"http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-textContent\">DOM Object Model Core</a>\n   */\n  public static String getText(Node nd) {\n\n    short type = nd.getNodeType();\n\n    // for most node types, we can defer to the recursive helper method,\n    // but when asked for the text of these types, we must return null\n    // (Not the empty string)\n    switch (type) {\n\n    case Node.DOCUMENT_NODE: /* fall through */\n    case Node.DOCUMENT_TYPE_NODE: /* fall through */\n    case Node.NOTATION_NODE: /* fall through */\n      return null;\n    }\n\n    StringBuilder sb = new StringBuilder();\n    getText(nd, sb);\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Drop in replacement for Node.getTextContent().\n   *\n   * <p>\n   * This method is provided to support the same functionality as\n   * Node.getTextContent() but in a way that is DOM Level 2 compatible.\n   * </p>\n   *\n   * @see <a href=\"http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-textContent\">DOM Object Model Core</a>\n   */\n  public static String getText(Node nd) {\n\n    short type = nd.getNodeType();\n\n    // for most node types, we can defer to the recursive helper method,\n    // but when asked for the text of these types, we must return null\n    // (Not the empty string)\n    switch (type) {\n\n    case Node.DOCUMENT_NODE: /* fall through */\n    case Node.DOCUMENT_TYPE_NODE: /* fall through */\n    case Node.NOTATION_NODE: /* fall through */\n      return null;\n    }\n\n    StringBuilder sb = new StringBuilder();\n    getText(nd, sb);\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23a18981fcc2648fd6e83e9e84e8fa023eb0484b":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23a18981fcc2648fd6e83e9e84e8fa023eb0484b"]},"commit2Childs":{"23a18981fcc2648fd6e83e9e84e8fa023eb0484b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["23a18981fcc2648fd6e83e9e84e8fa023eb0484b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}