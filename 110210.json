{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#findCommonPrefix(OfflinePointWriter,long,long,int,int).mjava","commits":[{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":1,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#findCommonPrefix(OfflinePointWriter,long,long,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#findCommonPrefix(OfflinePointWriter,long,long,int).mjava","sourceNew":"  private int findCommonPrefix(OfflinePointWriter points, long from, long to, int dim, int dimCommonPrefix) throws IOException{\n    //find common prefix\n    byte[] commonPrefix = new byte[bytesSorted];\n    int commonPrefixPosition = bytesSorted;\n    try (OfflinePointReader reader = points.getReader(from, to - from, offlineBuffer)) {\n      assert commonPrefixPosition > dimCommonPrefix;\n      reader.next();\n      reader.packedValueWithDocId(bytesRef1);\n      // copy dimension\n      System.arraycopy(bytesRef1.bytes, bytesRef1.offset + dim * bytesPerDim, commonPrefix, 0, bytesPerDim);\n      // copy docID\n      System.arraycopy(bytesRef1.bytes, bytesRef1.offset + packedBytesLength, commonPrefix, bytesPerDim, Integer.BYTES);\n      for (long i = from + 1; i< to; i++) {\n        reader.next();\n        reader.packedValueWithDocId(bytesRef1);\n        int startIndex =  (dimCommonPrefix > bytesPerDim) ? bytesPerDim : dimCommonPrefix;\n        int endIndex  = (commonPrefixPosition > bytesPerDim) ? bytesPerDim :  commonPrefixPosition;\n        int j = FutureArrays.mismatch(commonPrefix, startIndex, endIndex, bytesRef1.bytes, bytesRef1.offset + dim * bytesPerDim + startIndex, bytesRef1.offset + dim * bytesPerDim + endIndex);\n        if (j == 0) {\n          commonPrefixPosition = dimCommonPrefix;\n          break;\n        } else if (j == -1) {\n          if (commonPrefixPosition > bytesPerDim) {\n            //tie-break on docID\n            int k = FutureArrays.mismatch(commonPrefix, bytesPerDim, commonPrefixPosition, bytesRef1.bytes, bytesRef1.offset + packedBytesLength, bytesRef1.offset + packedBytesLength + commonPrefixPosition - bytesPerDim);\n            if (k != -1) {\n              commonPrefixPosition = bytesPerDim + k;\n            }\n          }\n        } else {\n          commonPrefixPosition = dimCommonPrefix + j;\n        }\n      }\n    }\n\n    //build histogram up to the common prefix\n    for (int i = 0; i < commonPrefixPosition; i++) {\n      partitionBucket[i] = commonPrefix[i] & 0xff;\n      histogram[i][partitionBucket[i]] = to - from;\n    }\n    return commonPrefixPosition;\n  }\n\n","sourceOld":"  private int findCommonPrefix(OfflinePointWriter points, long from, long to, int dim) throws IOException{\n    //find common prefix\n    byte[] commonPrefix = new byte[bytesSorted];\n    int commonPrefixPosition = bytesSorted;\n    try (OfflinePointReader reader = points.getReader(from, to - from, offlineBuffer)) {\n      reader.next();\n      reader.packedValueWithDocId(bytesRef1);\n      // copy dimension\n      System.arraycopy(bytesRef1.bytes, bytesRef1.offset + dim * bytesPerDim, commonPrefix, 0, bytesPerDim);\n      // copy docID\n      System.arraycopy(bytesRef1.bytes, bytesRef1.offset + packedBytesLength, commonPrefix, bytesPerDim, Integer.BYTES);\n      for (long i = from + 1; i< to; i++) {\n        reader.next();\n        reader.packedValueWithDocId(bytesRef1);\n        int startIndex =  dim * bytesPerDim;\n        int endIndex  = (commonPrefixPosition > bytesPerDim) ? startIndex + bytesPerDim :  startIndex + commonPrefixPosition;\n        int j = FutureArrays.mismatch(commonPrefix, 0, endIndex - startIndex, bytesRef1.bytes, bytesRef1.offset + startIndex, bytesRef1.offset + endIndex);\n        if (j == 0) {\n          return 0;\n        } else if (j == -1) {\n          if (commonPrefixPosition > bytesPerDim) {\n            //tie-break on docID\n            int k = FutureArrays.mismatch(commonPrefix, bytesPerDim, commonPrefixPosition, bytesRef1.bytes, bytesRef1.offset + packedBytesLength, bytesRef1.offset + packedBytesLength + commonPrefixPosition - bytesPerDim );\n            if (k != -1) {\n              commonPrefixPosition = bytesPerDim + k;\n            }\n          }\n        } else {\n          commonPrefixPosition = j;\n        }\n      }\n    }\n\n    //build histogram up to the common prefix\n    for (int i = 0; i < commonPrefixPosition; i++) {\n      partitionBucket[i] = commonPrefix[i] & 0xff;\n      histogram[i][partitionBucket[i]] = to - from;\n    }\n    return commonPrefixPosition;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":4,"author":"iverase","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#findCommonPrefix(OfflinePointWriter,long,long,int,int).mjava","sourceNew":null,"sourceOld":"  private int findCommonPrefix(OfflinePointWriter points, long from, long to, int dim, int dimCommonPrefix) throws IOException{\n    //find common prefix\n    byte[] commonPrefix = new byte[bytesSorted];\n    int commonPrefixPosition = bytesSorted;\n    try (OfflinePointReader reader = points.getReader(from, to - from, offlineBuffer)) {\n      assert commonPrefixPosition > dimCommonPrefix;\n      reader.next();\n      reader.packedValueWithDocId(bytesRef1);\n      // copy dimension\n      System.arraycopy(bytesRef1.bytes, bytesRef1.offset + dim * bytesPerDim, commonPrefix, 0, bytesPerDim);\n      // copy docID\n      System.arraycopy(bytesRef1.bytes, bytesRef1.offset + packedBytesLength, commonPrefix, bytesPerDim, Integer.BYTES);\n      for (long i = from + 1; i< to; i++) {\n        reader.next();\n        reader.packedValueWithDocId(bytesRef1);\n        int startIndex =  (dimCommonPrefix > bytesPerDim) ? bytesPerDim : dimCommonPrefix;\n        int endIndex  = (commonPrefixPosition > bytesPerDim) ? bytesPerDim :  commonPrefixPosition;\n        int j = FutureArrays.mismatch(commonPrefix, startIndex, endIndex, bytesRef1.bytes, bytesRef1.offset + dim * bytesPerDim + startIndex, bytesRef1.offset + dim * bytesPerDim + endIndex);\n        if (j == 0) {\n          commonPrefixPosition = dimCommonPrefix;\n          break;\n        } else if (j == -1) {\n          if (commonPrefixPosition > bytesPerDim) {\n            //tie-break on docID\n            int k = FutureArrays.mismatch(commonPrefix, bytesPerDim, commonPrefixPosition, bytesRef1.bytes, bytesRef1.offset + packedBytesLength, bytesRef1.offset + packedBytesLength + commonPrefixPosition - bytesPerDim);\n            if (k != -1) {\n              commonPrefixPosition = bytesPerDim + k;\n            }\n          }\n        } else {\n          commonPrefixPosition = dimCommonPrefix + j;\n        }\n      }\n    }\n\n    //build histogram up to the common prefix\n    for (int i = 0; i < commonPrefixPosition; i++) {\n      partitionBucket[i] = commonPrefix[i] & 0xff;\n      histogram[i][partitionBucket[i]] = to - from;\n    }\n    return commonPrefixPosition;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2344a1c769566d8c85cffcacc5e55153fa54b86":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2344a1c769566d8c85cffcacc5e55153fa54b86"]},"commit2Childs":{"c2344a1c769566d8c85cffcacc5e55153fa54b86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}