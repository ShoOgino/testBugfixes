{"path":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery.EncodedRectangle#edgeIntersectsBox(int,int,int,int,int,int,int,int).mjava","commits":[{"id":"56c42be8d779573d0c86ba775117e17360dbf5a6","date":1583217404,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery.EncodedRectangle#edgeIntersectsBox(int,int,int,int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * returns true if the edge (defined by (ax, ay) (bx, by)) intersects the query\n     */\n    private static boolean edgeIntersectsBox(int ax, int ay, int bx, int by,\n                                             int minX, int maxX, int minY, int maxY) {\n      // shortcut: if edge is a point (occurs w/ Line shapes); simply check bbox w/ point\n      if (ax == bx && ay == by) {\n        return Rectangle.containsPoint(ay, ax, minY, maxY, minX, maxX);\n      }\n\n      // shortcut: check if either of the end points fall inside the box\n      if (bboxContainsPoint(ax, ay, minX, maxX, minY, maxY) ||\n          bboxContainsPoint(bx, by, minX, maxX, minY, maxY)) {\n        return true;\n      }\n\n      // shortcut: check bboxes of edges are disjoint\n      if (boxesAreDisjoint(Math.min(ax, bx), Math.max(ax, bx), Math.min(ay, by), Math.max(ay, by),\n          minX, maxX, minY, maxY)) {\n        return false;\n      }\n\n      // top\n      if (orient(ax, ay, bx, by, minX, maxY) * orient(ax, ay, bx, by, maxX, maxY) <= 0 &&\n          orient(minX, maxY, maxX, maxY, ax, ay) * orient(minX, maxY, maxX, maxY, bx, by) <= 0) {\n        return true;\n      }\n\n      // right\n      if (orient(ax, ay, bx, by, maxX, maxY) * orient(ax, ay, bx, by, maxX, minY) <= 0 &&\n          orient(maxX, maxY, maxX, minY, ax, ay) * orient(maxX, maxY, maxX, minY, bx, by) <= 0) {\n        return true;\n      }\n\n      // bottom\n      if (orient(ax, ay, bx, by, maxX, minY) * orient(ax, ay, bx, by, minX, minY) <= 0 &&\n          orient(maxX, minY, minX, minY, ax, ay) * orient(maxX, minY, minX, minY, bx, by) <= 0) {\n        return true;\n      }\n\n      // left\n      if (orient(ax, ay, bx, by, minX, minY) * orient(ax, ay, bx, by, minX, maxY) <= 0 &&\n          orient(minX, minY, minX, maxY, ax, ay) * orient(minX, minY, minX, maxY, bx, by) <= 0) {\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery.EncodedRectangle#edgeIntersectsBox(int,int,int,int,int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery.EncodedRectangle#edgeIntersectsBox(int,int,int,int,int,int,int,int).mjava","sourceNew":"    /**\n     * returns true if the edge (defined by (aX, aY) (bX, bY)) intersects the box\n     */\n    private static boolean edgeIntersectsBox(int aX, int aY, int bX, int bY,\n                                             int minX, int maxX, int minY, int maxY) {\n      if (Math.max(aX, bX) < minX || Math.min(aX, bX) > maxX || Math.min(aY, bY) > maxY || Math.max(aY, bY) < minY) {\n        return false;\n      }\n      return GeoUtils.lineCrossesLineWithBoundary(aX, aY, bX, bY, minX, maxY,  maxX, maxY) || // top\n             GeoUtils.lineCrossesLineWithBoundary(aX, aY, bX, bY, maxX, maxY,  maxX, minY) || // bottom\n             GeoUtils.lineCrossesLineWithBoundary(aX, aY, bX, bY, maxX, minY,  minX, minY) || // left\n             GeoUtils.lineCrossesLineWithBoundary(aX, aY, bX, bY, minX, minY,  minX, maxY);   // right\n    }\n\n","sourceOld":"    /**\n     * returns true if the edge (defined by (ax, ay) (bx, by)) intersects the query\n     */\n    private static boolean edgeIntersectsBox(int ax, int ay, int bx, int by,\n                                             int minX, int maxX, int minY, int maxY) {\n      // shortcut: if edge is a point (occurs w/ Line shapes); simply check bbox w/ point\n      if (ax == bx && ay == by) {\n        return Rectangle.containsPoint(ay, ax, minY, maxY, minX, maxX);\n      }\n\n      // shortcut: check if either of the end points fall inside the box\n      if (bboxContainsPoint(ax, ay, minX, maxX, minY, maxY) ||\n          bboxContainsPoint(bx, by, minX, maxX, minY, maxY)) {\n        return true;\n      }\n\n      // shortcut: check bboxes of edges are disjoint\n      if (boxesAreDisjoint(Math.min(ax, bx), Math.max(ax, bx), Math.min(ay, by), Math.max(ay, by),\n          minX, maxX, minY, maxY)) {\n        return false;\n      }\n\n      // top\n      if (orient(ax, ay, bx, by, minX, maxY) * orient(ax, ay, bx, by, maxX, maxY) <= 0 &&\n          orient(minX, maxY, maxX, maxY, ax, ay) * orient(minX, maxY, maxX, maxY, bx, by) <= 0) {\n        return true;\n      }\n\n      // right\n      if (orient(ax, ay, bx, by, maxX, maxY) * orient(ax, ay, bx, by, maxX, minY) <= 0 &&\n          orient(maxX, maxY, maxX, minY, ax, ay) * orient(maxX, maxY, maxX, minY, bx, by) <= 0) {\n        return true;\n      }\n\n      // bottom\n      if (orient(ax, ay, bx, by, maxX, minY) * orient(ax, ay, bx, by, minX, minY) <= 0 &&\n          orient(maxX, minY, minX, minY, ax, ay) * orient(maxX, minY, minX, minY, bx, by) <= 0) {\n        return true;\n      }\n\n      // left\n      if (orient(ax, ay, bx, by, minX, minY) * orient(ax, ay, bx, by, minX, maxY) <= 0 &&\n          orient(minX, minY, minX, maxY, ax, ay) * orient(minX, minY, minX, maxY, bx, by) <= 0) {\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c568a1e2a5125c2245150eebb030a81baa158b31":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["c568a1e2a5125c2245150eebb030a81baa158b31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}