{"path":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState#postingEquals(String,char[],int,int).mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState#postingEquals(String,char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    /** Test whether the text for current Posting p equals\n     *  current tokenText. */\n    boolean postingEquals(final String tokenString, final char[] tokenText,\n                          final int tokenTextLen, final int tokenTextOffset) {\n\n      final char[] text = charPool.buffers[p.textStart >> CHAR_BLOCK_SHIFT];\n      assert text != null;\n      int pos = p.textStart & CHAR_BLOCK_MASK;\n\n      if (tokenText == null) {\n        // Compare to String\n        for(int i=0;i<tokenTextLen;i++)\n          if (tokenString.charAt(i) != text[pos++])\n            return false;\n        return text[pos] == 0xffff;\n      } else {\n        int tokenPos = tokenTextOffset;\n        final int stopAt = tokenTextLen+tokenPos;\n        for(;tokenPos<stopAt;pos++,tokenPos++)\n          if (tokenText[tokenPos] != text[pos])\n            return false;\n        return 0xffff == text[pos];\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6864413dbc0c12104c978c05456f3da1d45adb03","date":1186770873,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState#postingEquals(String,char[],int,int).mjava","sourceNew":null,"sourceOld":"    /** Test whether the text for current Posting p equals\n     *  current tokenText. */\n    boolean postingEquals(final String tokenString, final char[] tokenText,\n                          final int tokenTextLen, final int tokenTextOffset) {\n\n      final char[] text = charPool.buffers[p.textStart >> CHAR_BLOCK_SHIFT];\n      assert text != null;\n      int pos = p.textStart & CHAR_BLOCK_MASK;\n\n      if (tokenText == null) {\n        // Compare to String\n        for(int i=0;i<tokenTextLen;i++)\n          if (tokenString.charAt(i) != text[pos++])\n            return false;\n        return text[pos] == 0xffff;\n      } else {\n        int tokenPos = tokenTextOffset;\n        final int stopAt = tokenTextLen+tokenPos;\n        for(;tokenPos<stopAt;pos++,tokenPos++)\n          if (tokenText[tokenPos] != text[pos])\n            return false;\n        return 0xffff == text[pos];\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6864413dbc0c12104c978c05456f3da1d45adb03":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6864413dbc0c12104c978c05456f3da1d45adb03"]},"commit2Childs":{"6864413dbc0c12104c978c05456f3da1d45adb03":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["6864413dbc0c12104c978c05456f3da1d45adb03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}