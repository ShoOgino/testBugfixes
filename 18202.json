{"path":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testDeeplyNestedURPSanity().mjava","commits":[{"id":"0734346f2ba692d6dbf402faa9e19f958bbd0fc2","date":1531277981,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testDeeplyNestedURPSanity().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeeplyNestedURPSanity() throws Exception {\n    SolrInputDocument docHierarchy = sdoc(\"id\", \"1\", \"children\", sdocs(sdoc(\"id\", \"2\", \"name_s\", \"Yaz\"),\n        sdoc(\"id\", \"3\", \"name_s\", \"Jazz\", \"grandChild\", sdoc(\"id\", \"4\", \"name_s\", \"Gaz\"))), \"lonelyChild\", sdoc(\"id\", \"5\", \"name_s\", \"Loner\"));\n    UpdateRequestProcessor nestedUpdate = new NestedUpdateProcessorFactory().getInstance(req(), null, null);\n    AddUpdateCommand cmd = new AddUpdateCommand(req());\n    cmd.solrDoc = docHierarchy;\n    nestedUpdate.processAdd(cmd);\n    cmd.clear();\n\n    List children = (List) docHierarchy.get(\"children\").getValues();\n\n    SolrInputDocument firstChild = (SolrInputDocument) children.get(0);\n    assertEquals(\"SolrInputDocument(fields: [id=2, name_s=Yaz, _NEST_PATH_=children#0, _NEST_PARENT_=1])\", firstChild.toString());\n\n    SolrInputDocument secondChild = (SolrInputDocument) children.get(1);\n    assertEquals(\"SolrInputDocument(fields: [id=3, name_s=Jazz, grandChild=SolrInputDocument(fields: [id=4, name_s=Gaz, _NEST_PATH_=children#1/grandChild#, _NEST_PARENT_=3]), _NEST_PATH_=children#1, _NEST_PARENT_=1])\", secondChild.toString());\n\n    SolrInputDocument grandChild = (SolrInputDocument)((SolrInputDocument) children.get(1)).get(\"grandChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=4, name_s=Gaz, _NEST_PATH_=children#1/grandChild#, _NEST_PARENT_=3])\", grandChild.toString());\n\n    SolrInputDocument singularChild = (SolrInputDocument) docHierarchy.get(\"lonelyChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=5, name_s=Loner, _NEST_PATH_=lonelyChild#, _NEST_PARENT_=1])\", singularChild.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dd6236a915578561d5adcb54c2194721766e9e4","date":1531536673,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testDeeplyNestedURPSanity().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testDeeplyNestedURPSanity().mjava","sourceNew":"  @Test\n  public void testDeeplyNestedURPSanity() throws Exception {\n    SolrInputDocument docHierarchy = sdoc(\"id\", \"1\", \"children\", sdocs(sdoc(\"id\", \"2\", \"name_s\", \"Yaz\"),\n        sdoc(\"id\", \"3\", \"name_s\", \"Jazz\", \"grandChild\", sdoc(\"id\", \"4\", \"name_s\", \"Gaz\"))), \"lonelyChild\", sdoc(\"id\", \"5\", \"name_s\", \"Loner\"));\n    UpdateRequestProcessor nestedUpdate = new NestedUpdateProcessorFactory().getInstance(req(), null, null);\n    AddUpdateCommand cmd = new AddUpdateCommand(req());\n    cmd.solrDoc = docHierarchy;\n    nestedUpdate.processAdd(cmd);\n    cmd.clear();\n\n    List children = (List) docHierarchy.get(\"children\").getValues();\n\n    SolrInputDocument firstChild = (SolrInputDocument) children.get(0);\n    assertEquals(\"SolrInputDocument(fields: [id=2, name_s=Yaz, _nest_path_=children#0, _nest_parent_=1])\", firstChild.toString());\n\n    SolrInputDocument secondChild = (SolrInputDocument) children.get(1);\n    assertEquals(\"SolrInputDocument(fields: [id=3, name_s=Jazz, grandChild=SolrInputDocument(fields: [id=4, name_s=Gaz, _nest_path_=children#1/grandChild#, _nest_parent_=3]), _nest_path_=children#1, _nest_parent_=1])\", secondChild.toString());\n\n    SolrInputDocument grandChild = (SolrInputDocument)((SolrInputDocument) children.get(1)).get(\"grandChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=4, name_s=Gaz, _nest_path_=children#1/grandChild#, _nest_parent_=3])\", grandChild.toString());\n\n    SolrInputDocument singularChild = (SolrInputDocument) docHierarchy.get(\"lonelyChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=5, name_s=Loner, _nest_path_=lonelyChild#, _nest_parent_=1])\", singularChild.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testDeeplyNestedURPSanity() throws Exception {\n    SolrInputDocument docHierarchy = sdoc(\"id\", \"1\", \"children\", sdocs(sdoc(\"id\", \"2\", \"name_s\", \"Yaz\"),\n        sdoc(\"id\", \"3\", \"name_s\", \"Jazz\", \"grandChild\", sdoc(\"id\", \"4\", \"name_s\", \"Gaz\"))), \"lonelyChild\", sdoc(\"id\", \"5\", \"name_s\", \"Loner\"));\n    UpdateRequestProcessor nestedUpdate = new NestedUpdateProcessorFactory().getInstance(req(), null, null);\n    AddUpdateCommand cmd = new AddUpdateCommand(req());\n    cmd.solrDoc = docHierarchy;\n    nestedUpdate.processAdd(cmd);\n    cmd.clear();\n\n    List children = (List) docHierarchy.get(\"children\").getValues();\n\n    SolrInputDocument firstChild = (SolrInputDocument) children.get(0);\n    assertEquals(\"SolrInputDocument(fields: [id=2, name_s=Yaz, _NEST_PATH_=children#0, _NEST_PARENT_=1])\", firstChild.toString());\n\n    SolrInputDocument secondChild = (SolrInputDocument) children.get(1);\n    assertEquals(\"SolrInputDocument(fields: [id=3, name_s=Jazz, grandChild=SolrInputDocument(fields: [id=4, name_s=Gaz, _NEST_PATH_=children#1/grandChild#, _NEST_PARENT_=3]), _NEST_PATH_=children#1, _NEST_PARENT_=1])\", secondChild.toString());\n\n    SolrInputDocument grandChild = (SolrInputDocument)((SolrInputDocument) children.get(1)).get(\"grandChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=4, name_s=Gaz, _NEST_PATH_=children#1/grandChild#, _NEST_PARENT_=3])\", grandChild.toString());\n\n    SolrInputDocument singularChild = (SolrInputDocument) docHierarchy.get(\"lonelyChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=5, name_s=Loner, _NEST_PATH_=lonelyChild#, _NEST_PARENT_=1])\", singularChild.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testDeeplyNestedURPSanity().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeeplyNestedURPSanity() throws Exception {\n    SolrInputDocument docHierarchy = sdoc(\"id\", \"1\", \"children\", sdocs(sdoc(\"id\", \"2\", \"name_s\", \"Yaz\"),\n        sdoc(\"id\", \"3\", \"name_s\", \"Jazz\", \"grandChild\", sdoc(\"id\", \"4\", \"name_s\", \"Gaz\"))), \"lonelyChild\", sdoc(\"id\", \"5\", \"name_s\", \"Loner\"));\n    UpdateRequestProcessor nestedUpdate = new NestedUpdateProcessorFactory().getInstance(req(), null, null);\n    AddUpdateCommand cmd = new AddUpdateCommand(req());\n    cmd.solrDoc = docHierarchy;\n    nestedUpdate.processAdd(cmd);\n    cmd.clear();\n\n    List children = (List) docHierarchy.get(\"children\").getValues();\n\n    SolrInputDocument firstChild = (SolrInputDocument) children.get(0);\n    assertEquals(\"SolrInputDocument(fields: [id=2, name_s=Yaz, _nest_path_=children#0, _nest_parent_=1])\", firstChild.toString());\n\n    SolrInputDocument secondChild = (SolrInputDocument) children.get(1);\n    assertEquals(\"SolrInputDocument(fields: [id=3, name_s=Jazz, grandChild=SolrInputDocument(fields: [id=4, name_s=Gaz, _nest_path_=children#1/grandChild#, _nest_parent_=3]), _nest_path_=children#1, _nest_parent_=1])\", secondChild.toString());\n\n    SolrInputDocument grandChild = (SolrInputDocument)((SolrInputDocument) children.get(1)).get(\"grandChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=4, name_s=Gaz, _nest_path_=children#1/grandChild#, _nest_parent_=3])\", grandChild.toString());\n\n    SolrInputDocument singularChild = (SolrInputDocument) docHierarchy.get(\"lonelyChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=5, name_s=Loner, _nest_path_=lonelyChild#, _nest_parent_=1])\", singularChild.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testDeeplyNestedURPSanity().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeeplyNestedURPSanity() throws Exception {\n    SolrInputDocument docHierarchy = sdoc(\"id\", \"1\", \"children\", sdocs(sdoc(\"id\", \"2\", \"name_s\", \"Yaz\"),\n        sdoc(\"id\", \"3\", \"name_s\", \"Jazz\", \"grandChild\", sdoc(\"id\", \"4\", \"name_s\", \"Gaz\"))), \"lonelyChild\", sdoc(\"id\", \"5\", \"name_s\", \"Loner\"));\n    UpdateRequestProcessor nestedUpdate = new NestedUpdateProcessorFactory().getInstance(req(), null, null);\n    AddUpdateCommand cmd = new AddUpdateCommand(req());\n    cmd.solrDoc = docHierarchy;\n    nestedUpdate.processAdd(cmd);\n    cmd.clear();\n\n    List children = (List) docHierarchy.get(\"children\").getValues();\n\n    SolrInputDocument firstChild = (SolrInputDocument) children.get(0);\n    assertEquals(\"SolrInputDocument(fields: [id=2, name_s=Yaz, _nest_path_=children#0, _nest_parent_=1])\", firstChild.toString());\n\n    SolrInputDocument secondChild = (SolrInputDocument) children.get(1);\n    assertEquals(\"SolrInputDocument(fields: [id=3, name_s=Jazz, grandChild=SolrInputDocument(fields: [id=4, name_s=Gaz, _nest_path_=children#1/grandChild#, _nest_parent_=3]), _nest_path_=children#1, _nest_parent_=1])\", secondChild.toString());\n\n    SolrInputDocument grandChild = (SolrInputDocument)((SolrInputDocument) children.get(1)).get(\"grandChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=4, name_s=Gaz, _nest_path_=children#1/grandChild#, _nest_parent_=3])\", grandChild.toString());\n\n    SolrInputDocument singularChild = (SolrInputDocument) docHierarchy.get(\"lonelyChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=5, name_s=Loner, _nest_path_=lonelyChild#, _nest_parent_=1])\", singularChild.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da0c9170fd1c418b47b9a76a0447c60b1b99e5f","date":1548699906,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testDeeplyNestedURPSanity().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testDeeplyNestedURPSanity().mjava","sourceNew":"  @Test\n  public void testDeeplyNestedURPSanity() throws Exception {\n    SolrInputDocument docHierarchy = sdoc(\"id\", \"1\", \"children\", sdocs(sdoc(\"id\", \"2\", \"name_s\", \"Yaz\"),\n        sdoc(\"id\", \"3\", \"name_s\", \"Jazz\", \"grandChild\", sdoc(\"id\", \"4\", \"name_s\", \"Gaz\"))), \"lonelyChild\", sdoc(\"id\", \"5\", \"name_s\", \"Loner\"));\n    UpdateRequestProcessor nestedUpdate = new NestedUpdateProcessorFactory().getInstance(req(), null, null);\n    AddUpdateCommand cmd = new AddUpdateCommand(req());\n    cmd.solrDoc = docHierarchy;\n    nestedUpdate.processAdd(cmd);\n    cmd.clear();\n\n    List children = (List) docHierarchy.get(\"children\").getValues();\n\n    SolrInputDocument firstChild = (SolrInputDocument) children.get(0);\n    assertEquals(\"SolrInputDocument(fields: [id=2, name_s=Yaz, _nest_path_=/children#0, _nest_parent_=1])\", firstChild.toString());\n\n    SolrInputDocument secondChild = (SolrInputDocument) children.get(1);\n    assertEquals(\"SolrInputDocument(fields: [id=3, name_s=Jazz, grandChild=SolrInputDocument(fields: [id=4, name_s=Gaz, _nest_path_=/children#1/grandChild#, _nest_parent_=3]), _nest_path_=/children#1, _nest_parent_=1])\", secondChild.toString());\n\n    SolrInputDocument grandChild = (SolrInputDocument)((SolrInputDocument) children.get(1)).get(\"grandChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=4, name_s=Gaz, _nest_path_=/children#1/grandChild#, _nest_parent_=3])\", grandChild.toString());\n\n    SolrInputDocument singularChild = (SolrInputDocument) docHierarchy.get(\"lonelyChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=5, name_s=Loner, _nest_path_=/lonelyChild#, _nest_parent_=1])\", singularChild.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testDeeplyNestedURPSanity() throws Exception {\n    SolrInputDocument docHierarchy = sdoc(\"id\", \"1\", \"children\", sdocs(sdoc(\"id\", \"2\", \"name_s\", \"Yaz\"),\n        sdoc(\"id\", \"3\", \"name_s\", \"Jazz\", \"grandChild\", sdoc(\"id\", \"4\", \"name_s\", \"Gaz\"))), \"lonelyChild\", sdoc(\"id\", \"5\", \"name_s\", \"Loner\"));\n    UpdateRequestProcessor nestedUpdate = new NestedUpdateProcessorFactory().getInstance(req(), null, null);\n    AddUpdateCommand cmd = new AddUpdateCommand(req());\n    cmd.solrDoc = docHierarchy;\n    nestedUpdate.processAdd(cmd);\n    cmd.clear();\n\n    List children = (List) docHierarchy.get(\"children\").getValues();\n\n    SolrInputDocument firstChild = (SolrInputDocument) children.get(0);\n    assertEquals(\"SolrInputDocument(fields: [id=2, name_s=Yaz, _nest_path_=children#0, _nest_parent_=1])\", firstChild.toString());\n\n    SolrInputDocument secondChild = (SolrInputDocument) children.get(1);\n    assertEquals(\"SolrInputDocument(fields: [id=3, name_s=Jazz, grandChild=SolrInputDocument(fields: [id=4, name_s=Gaz, _nest_path_=children#1/grandChild#, _nest_parent_=3]), _nest_path_=children#1, _nest_parent_=1])\", secondChild.toString());\n\n    SolrInputDocument grandChild = (SolrInputDocument)((SolrInputDocument) children.get(1)).get(\"grandChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=4, name_s=Gaz, _nest_path_=children#1/grandChild#, _nest_parent_=3])\", grandChild.toString());\n\n    SolrInputDocument singularChild = (SolrInputDocument) docHierarchy.get(\"lonelyChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=5, name_s=Loner, _nest_path_=lonelyChild#, _nest_parent_=1])\", singularChild.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testDeeplyNestedURPSanity().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testDeeplyNestedURPSanity().mjava","sourceNew":"  @Test\n  public void testDeeplyNestedURPSanity() throws Exception {\n    SolrInputDocument docHierarchy = sdoc(\"id\", \"1\", \"children\", sdocs(sdoc(\"id\", \"2\", \"name_s\", \"Yaz\"),\n        sdoc(\"id\", \"3\", \"name_s\", \"Jazz\", \"grandChild\", sdoc(\"id\", \"4\", \"name_s\", \"Gaz\"))), \"lonelyChild\", sdoc(\"id\", \"5\", \"name_s\", \"Loner\"));\n    UpdateRequestProcessor nestedUpdate = new NestedUpdateProcessorFactory().getInstance(req(), null, null);\n    AddUpdateCommand cmd = new AddUpdateCommand(req());\n    cmd.solrDoc = docHierarchy;\n    nestedUpdate.processAdd(cmd);\n    cmd.clear();\n\n    @SuppressWarnings({\"rawtypes\"})\n    List children = (List) docHierarchy.get(\"children\").getValues();\n\n    SolrInputDocument firstChild = (SolrInputDocument) children.get(0);\n    assertEquals(\"SolrInputDocument(fields: [id=2, name_s=Yaz, _nest_path_=/children#0, _nest_parent_=1])\", firstChild.toString());\n\n    SolrInputDocument secondChild = (SolrInputDocument) children.get(1);\n    assertEquals(\"SolrInputDocument(fields: [id=3, name_s=Jazz, grandChild=SolrInputDocument(fields: [id=4, name_s=Gaz, _nest_path_=/children#1/grandChild#, _nest_parent_=3]), _nest_path_=/children#1, _nest_parent_=1])\", secondChild.toString());\n\n    SolrInputDocument grandChild = (SolrInputDocument)((SolrInputDocument) children.get(1)).get(\"grandChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=4, name_s=Gaz, _nest_path_=/children#1/grandChild#, _nest_parent_=3])\", grandChild.toString());\n\n    SolrInputDocument singularChild = (SolrInputDocument) docHierarchy.get(\"lonelyChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=5, name_s=Loner, _nest_path_=/lonelyChild#, _nest_parent_=1])\", singularChild.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testDeeplyNestedURPSanity() throws Exception {\n    SolrInputDocument docHierarchy = sdoc(\"id\", \"1\", \"children\", sdocs(sdoc(\"id\", \"2\", \"name_s\", \"Yaz\"),\n        sdoc(\"id\", \"3\", \"name_s\", \"Jazz\", \"grandChild\", sdoc(\"id\", \"4\", \"name_s\", \"Gaz\"))), \"lonelyChild\", sdoc(\"id\", \"5\", \"name_s\", \"Loner\"));\n    UpdateRequestProcessor nestedUpdate = new NestedUpdateProcessorFactory().getInstance(req(), null, null);\n    AddUpdateCommand cmd = new AddUpdateCommand(req());\n    cmd.solrDoc = docHierarchy;\n    nestedUpdate.processAdd(cmd);\n    cmd.clear();\n\n    List children = (List) docHierarchy.get(\"children\").getValues();\n\n    SolrInputDocument firstChild = (SolrInputDocument) children.get(0);\n    assertEquals(\"SolrInputDocument(fields: [id=2, name_s=Yaz, _nest_path_=/children#0, _nest_parent_=1])\", firstChild.toString());\n\n    SolrInputDocument secondChild = (SolrInputDocument) children.get(1);\n    assertEquals(\"SolrInputDocument(fields: [id=3, name_s=Jazz, grandChild=SolrInputDocument(fields: [id=4, name_s=Gaz, _nest_path_=/children#1/grandChild#, _nest_parent_=3]), _nest_path_=/children#1, _nest_parent_=1])\", secondChild.toString());\n\n    SolrInputDocument grandChild = (SolrInputDocument)((SolrInputDocument) children.get(1)).get(\"grandChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=4, name_s=Gaz, _nest_path_=/children#1/grandChild#, _nest_parent_=3])\", grandChild.toString());\n\n    SolrInputDocument singularChild = (SolrInputDocument) docHierarchy.get(\"lonelyChild\").getValue();\n    assertEquals(\"SolrInputDocument(fields: [id=5, name_s=Loner, _nest_path_=/lonelyChild#, _nest_parent_=1])\", singularChild.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8da0c9170fd1c418b47b9a76a0447c60b1b99e5f":["8dd6236a915578561d5adcb54c2194721766e9e4"],"8dd6236a915578561d5adcb54c2194721766e9e4":["0734346f2ba692d6dbf402faa9e19f958bbd0fc2"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8dd6236a915578561d5adcb54c2194721766e9e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0734346f2ba692d6dbf402faa9e19f958bbd0fc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["8da0c9170fd1c418b47b9a76a0447c60b1b99e5f"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8dd6236a915578561d5adcb54c2194721766e9e4"]},"commit2Childs":{"8da0c9170fd1c418b47b9a76a0447c60b1b99e5f":["e98520789adb1d5ad05afb4956eca0944a929688"],"8dd6236a915578561d5adcb54c2194721766e9e4":["8da0c9170fd1c418b47b9a76a0447c60b1b99e5f","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0734346f2ba692d6dbf402faa9e19f958bbd0fc2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0734346f2ba692d6dbf402faa9e19f958bbd0fc2":["8dd6236a915578561d5adcb54c2194721766e9e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}