{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery.IntervalWeight#explain(LeafReaderContext,int).mjava","commits":[{"id":"361b1afc99f68598c73d37074aec089c9c951586","date":1522744632,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery.IntervalWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      IntervalScorer scorer = (IntervalScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          return scorer.explain(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"]\");\n        }\n      }\n      return Explanation.noMatch(\"no matching intervals\");\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"362cb5d910af28f1dadaddc4c7670d7d166b23c2","date":1547647156,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery.IntervalWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery.IntervalWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      IntervalScorer scorer = (IntervalScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          return scoreFunction.explain(intervalsSource.toString(), boost, freq);\n        }\n      }\n      return Explanation.noMatch(\"no matching intervals\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      IntervalScorer scorer = (IntervalScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          return scorer.explain(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"]\");\n        }\n      }\n      return Explanation.noMatch(\"no matching intervals\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/IntervalQuery.IntervalWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery.IntervalWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      IntervalScorer scorer = (IntervalScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          return scoreFunction.explain(intervalsSource.toString(), boost, freq);\n        }\n      }\n      return Explanation.noMatch(\"no matching intervals\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      IntervalScorer scorer = (IntervalScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          return scoreFunction.explain(intervalsSource.toString(), boost, freq);\n        }\n      }\n      return Explanation.noMatch(\"no matching intervals\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["362cb5d910af28f1dadaddc4c7670d7d166b23c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"362cb5d910af28f1dadaddc4c7670d7d166b23c2":["361b1afc99f68598c73d37074aec089c9c951586"],"361b1afc99f68598c73d37074aec089c9c951586":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["361b1afc99f68598c73d37074aec089c9c951586"],"362cb5d910af28f1dadaddc4c7670d7d166b23c2":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"361b1afc99f68598c73d37074aec089c9c951586":["362cb5d910af28f1dadaddc4c7670d7d166b23c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}