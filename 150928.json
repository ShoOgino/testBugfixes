{"path":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,int).mjava","pathOld":"src/java/org/apache/lucene/store/MMapDirectory#openInput(String,int).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, int bufferSize) throws IOException {\n    ensureOpen();\n    File f =  new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return (raf.length() <= maxBBuf)\n             ? (IndexInput) new MMapIndexInput(raf)\n             : (IndexInput) new MultiMMapIndexInput(raf, maxBBuf);\n    } finally {\n      raf.close();\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, int bufferSize) throws IOException {\n    ensureOpen();\n    File f =  new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return (raf.length() <= maxBBuf)\n             ? (IndexInput) new MMapIndexInput(raf)\n             : (IndexInput) new MultiMMapIndexInput(raf, maxBBuf);\n    } finally {\n      raf.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4b4e97a5e8ab5b96cc56c561131d720c756756b","date":1269362401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,int).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, int bufferSize) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return (raf.length() <= maxBBuf)\n             ? (IndexInput) new MMapIndexInput(raf)\n             : (IndexInput) new MultiMMapIndexInput(raf, maxBBuf);\n    } finally {\n      raf.close();\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, int bufferSize) throws IOException {\n    ensureOpen();\n    File f =  new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return (raf.length() <= maxBBuf)\n             ? (IndexInput) new MMapIndexInput(raf)\n             : (IndexInput) new MultiMMapIndexInput(raf, maxBBuf);\n    } finally {\n      raf.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68b4c6c95719e3020e407649a20b68538649beeb","date":1308055822,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,int).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, int bufferSize) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return new MMapIndexInput(raf, chunkSizePower);\n    } finally {\n      raf.close();\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, int bufferSize) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return (raf.length() <= maxBBuf)\n             ? (IndexInput) new MMapIndexInput(raf)\n             : (IndexInput) new MultiMMapIndexInput(raf, maxBBuf);\n    } finally {\n      raf.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,int).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, int bufferSize) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return new MMapIndexInput(raf, chunkSizePower);\n    } finally {\n      raf.close();\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, int bufferSize) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return (raf.length() <= maxBBuf)\n             ? (IndexInput) new MMapIndexInput(raf)\n             : (IndexInput) new MultiMMapIndexInput(raf, maxBBuf);\n    } finally {\n      raf.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,int).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return new MMapIndexInput(raf, chunkSizePower);\n    } finally {\n      raf.close();\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, int bufferSize) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return new MMapIndexInput(raf, chunkSizePower);\n    } finally {\n      raf.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,int).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, int bufferSize) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return new MMapIndexInput(raf, 0, raf.length(), chunkSizePower);\n    } finally {\n      raf.close();\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, int bufferSize) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return new MMapIndexInput(raf, chunkSizePower);\n    } finally {\n      raf.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,int).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, int bufferSize) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return new MMapIndexInput(raf, 0, raf.length(), chunkSizePower);\n    } finally {\n      raf.close();\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, int bufferSize) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return new MMapIndexInput(raf, chunkSizePower);\n    } finally {\n      raf.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,int).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return new MMapIndexInput(raf, 0, raf.length(), chunkSizePower);\n    } finally {\n      raf.close();\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, int bufferSize) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return new MMapIndexInput(raf, 0, raf.length(), chunkSizePower);\n    } finally {\n      raf.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory#openInput(String,int).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return new MMapIndexInput(raf, 0, raf.length(), chunkSizePower);\n    } finally {\n      raf.close();\n    }\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, int bufferSize) throws IOException {\n    ensureOpen();\n    File f = new File(getDirectory(), name);\n    RandomAccessFile raf = new RandomAccessFile(f, \"r\");\n    try {\n      return new MMapIndexInput(raf, 0, raf.length(), chunkSizePower);\n    } finally {\n      raf.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"68b4c6c95719e3020e407649a20b68538649beeb":["e4b4e97a5e8ab5b96cc56c561131d720c756756b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["68b4c6c95719e3020e407649a20b68538649beeb"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["68b4c6c95719e3020e407649a20b68538649beeb"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["2553b00f699380c64959ccb27991289aae87be2e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["0aab6e810b4b0d3743d6a048be0602801f4b3920","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"2553b00f699380c64959ccb27991289aae87be2e":["9ed208afa1e7aa98899ddb1dedfddedddf898253","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["e4b4e97a5e8ab5b96cc56c561131d720c756756b","68b4c6c95719e3020e407649a20b68538649beeb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"e4b4e97a5e8ab5b96cc56c561131d720c756756b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"68b4c6c95719e3020e407649a20b68538649beeb":["0aab6e810b4b0d3743d6a048be0602801f4b3920","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["ddc4c914be86e34b54f70023f45a60fa7f04e929","2553b00f699380c64959ccb27991289aae87be2e"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["2553b00f699380c64959ccb27991289aae87be2e"],"e4b4e97a5e8ab5b96cc56c561131d720c756756b":["68b4c6c95719e3020e407649a20b68538649beeb","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e4b4e97a5e8ab5b96cc56c561131d720c756756b"]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}