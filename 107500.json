{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,boolean).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,boolean).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,boolean).mjava","sourceNew":"  /**\n   * Return a boolean property.\n   * If the property contain \":\", e.g. \"true.true.false\", it is interpreted\n   * as array of booleans. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned.\n   *\n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public boolean get(String name, boolean dflt) {\n    // use value by round if already parsed\n    boolean vals[] = (boolean[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name, \"\" + dflt);\n    if (sval.indexOf(\":\") < 0) {\n      return Boolean.valueOf(sval).booleanValue();\n    }\n    // first time this prop is extracted by round \n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0, k);\n    sval = sval.substring(k + 1);\n    colForValByRound.put(name, colName);\n    vals = propToBooleanArray(sval);\n    valByRound.put(name, vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","sourceOld":"  /**\n   * Return a boolean property.\n   * If the property contain \":\", e.g. \"true.true.false\", it is interpreted\n   * as array of booleans. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned.\n   *\n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public boolean get(String name, boolean dflt) {\n    // use value by round if already parsed\n    boolean vals[] = (boolean[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name, \"\" + dflt);\n    if (sval.indexOf(\":\") < 0) {\n      return Boolean.valueOf(sval).booleanValue();\n    }\n    // first time this prop is extracted by round \n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0, k);\n    sval = sval.substring(k + 1);\n    colForValByRound.put(name, colName);\n    vals = propToBooleanArray(sval);\n    valByRound.put(name, vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,boolean).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,boolean).mjava","sourceNew":"  /**\n   * Return a boolean property.\n   * If the property contain \":\", e.g. \"true.true.false\", it is interpreted\n   * as array of booleans. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned.\n   *\n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public boolean get(String name, boolean dflt) {\n    // use value by round if already parsed\n    boolean vals[] = (boolean[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name, \"\" + dflt);\n    if (sval.indexOf(\":\") < 0) {\n      return Boolean.valueOf(sval).booleanValue();\n    }\n    // first time this prop is extracted by round \n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0, k);\n    sval = sval.substring(k + 1);\n    colForValByRound.put(name, colName);\n    vals = propToBooleanArray(sval);\n    valByRound.put(name, vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","sourceOld":"  /**\n   * Return a boolean property.\n   * If the property contain \":\", e.g. \"true.true.false\", it is interpreted\n   * as array of booleans. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned.\n   *\n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public boolean get(String name, boolean dflt) {\n    // use value by round if already parsed\n    boolean vals[] = (boolean[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name, \"\" + dflt);\n    if (sval.indexOf(\":\") < 0) {\n      return Boolean.valueOf(sval).booleanValue();\n    }\n    // first time this prop is extracted by round \n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0, k);\n    sval = sval.substring(k + 1);\n    colForValByRound.put(name, colName);\n    vals = propToBooleanArray(sval);\n    valByRound.put(name, vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,boolean).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,boolean).mjava","sourceNew":"  /**\n   * Return a boolean property.\n   * If the property contain \":\", e.g. \"true.true.false\", it is interpreted\n   * as array of booleans. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned.\n   *\n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public boolean get(String name, boolean dflt) {\n    // use value by round if already parsed\n    boolean vals[] = (boolean[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name, \"\" + dflt);\n    if (sval.indexOf(\":\") < 0) {\n      return Boolean.valueOf(sval).booleanValue();\n    }\n    // first time this prop is extracted by round \n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0, k);\n    sval = sval.substring(k + 1);\n    colForValByRound.put(name, colName);\n    vals = propToBooleanArray(sval);\n    valByRound.put(name, vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","sourceOld":"  /**\n   * Return a boolean property.\n   * If the property contain \":\", e.g. \"true.true.false\", it is interpreted\n   * as array of booleans. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned.\n   *\n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public boolean get(String name, boolean dflt) {\n    // use value by round if already parsed\n    boolean vals[] = (boolean[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name, \"\" + dflt);\n    if (sval.indexOf(\":\") < 0) {\n      return Boolean.valueOf(sval).booleanValue();\n    }\n    // first time this prop is extracted by round \n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0, k);\n    sval = sval.substring(k + 1);\n    colForValByRound.put(name, colName);\n    vals = propToBooleanArray(sval);\n    valByRound.put(name, vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,boolean).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,boolean).mjava","sourceNew":"  /**\n   * Return a boolean property.\n   * If the property contain \":\", e.g. \"true.true.false\", it is interpreted\n   * as array of booleans. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned.\n   *\n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public boolean get(String name, boolean dflt) {\n    // use value by round if already parsed\n    boolean vals[] = (boolean[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name, \"\" + dflt);\n    if (sval.indexOf(\":\") < 0) {\n      return Boolean.valueOf(sval).booleanValue();\n    }\n    // first time this prop is extracted by round \n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0, k);\n    sval = sval.substring(k + 1);\n    colForValByRound.put(name, colName);\n    vals = propToBooleanArray(sval);\n    valByRound.put(name, vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","sourceOld":"  /**\n   * Return a boolean property.\n   * If the property contain \":\", e.g. \"true.true.false\", it is interpreted\n   * as array of booleans. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned.\n   *\n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public boolean get(String name, boolean dflt) {\n    // use value by round if already parsed\n    boolean vals[] = (boolean[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name, \"\" + dflt);\n    if (sval.indexOf(\":\") < 0) {\n      return Boolean.valueOf(sval).booleanValue();\n    }\n    // first time this prop is extracted by round \n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0, k);\n    sval = sval.substring(k + 1);\n    colForValByRound.put(name, colName);\n    vals = propToBooleanArray(sval);\n    valByRound.put(name, vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","b89678825b68eccaf09e6ab71675fc0b0af1e099","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}