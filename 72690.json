{"path":"solr/core/src/java/org/apache/solr/core/SolrConfig#convertHeapOptionStyleConfigStringToBytes(String).mjava","commits":[{"id":"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd","date":1525384847,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#convertHeapOptionStyleConfigStringToBytes(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Converts a Java heap option-like config string to bytes. Valid suffixes are: 'k', 'm', 'g'\n   * (case insensitive). If there is no suffix, the default unit is bytes.\n   * For example, 50k = 50KB, 20m = 20MB, 4g = 4GB, 300 = 300 bytes\n   * @param configStr the config setting to parse\n   * @return the size, in bytes. -1 if the given config string is empty\n   */\n  protected static long convertHeapOptionStyleConfigStringToBytes(String configStr) {\n    if (configStr.isEmpty()) {\n      return -1;\n    }\n    long multiplier = 1;\n    String numericValueStr = configStr;\n    char suffix = Character.toLowerCase(configStr.charAt(configStr.length() - 1));\n    if (Character.isLetter(suffix)) {\n      if (suffix == 'k') {\n        multiplier = FileUtils.ONE_KB;\n      }\n      else if (suffix == 'm') {\n        multiplier = FileUtils.ONE_MB;\n      }\n      else if (suffix == 'g') {\n        multiplier = FileUtils.ONE_GB;\n      } else {\n        throw new RuntimeException(\"Invalid suffix. Valid suffixes are 'k' (KB), 'm' (MB), 'g' (G). \"\n            + \"No suffix means the amount is in bytes. \");\n      }\n      numericValueStr = configStr.substring(0, configStr.length() - 1);\n    }\n    try {\n      return Long.parseLong(numericValueStr) * multiplier;\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Invalid format. The config setting should be a long with an \"\n          + \"optional letter suffix. Valid suffixes are 'k' (KB), 'm' (MB), 'g' (G). \"\n          + \"No suffix means the amount is in bytes.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d07d6c279b65daaca32ee033fa06e4d7e85e0dd"]},"commit2Childs":{"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d07d6c279b65daaca32ee033fa06e4d7e85e0dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}