{"path":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource().mjava","commits":[{"id":"897d47a3d78c0956b96658436566279d040b95b9","date":1447761616,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource() throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource() throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    if (this.type.isPointField() && !hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Point fields can't use FieldCache. Use docValues=true for field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource() throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource() throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    if (this.type.isPointField() && !hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Point fields can't use FieldCache. Use docValues=true for field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource() throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79900e89f08cc17c4bcf49789dd61a2236ee7840","date":1492541915,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource() throws SolrException {\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    if (! hasDocValues() ) {\n      if ( ! ( indexed() && null != this.type.getUninversionType(this) ) ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"can not use FieldCache on a field w/o docValues unless it is indexed and supports Uninversion: \" \n                                + getName());\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource() throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    if (this.type.isPointField() && !hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Point fields can't use FieldCache. Use docValues=true for field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":["f7e2c5596ef3fbb03572368a66afb40a500404ab","46dc9ac8b3e748407baaef82453138ff3974480c","73bb5a57dc75b54a39494f99986599cae7dff417"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource() throws SolrException {\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    if (! hasDocValues() ) {\n      if ( ! ( indexed() && null != this.type.getUninversionType(this) ) ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"can not use FieldCache on a field w/o docValues unless it is indexed and supports Uninversion: \" \n                                + getName());\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource() throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    if (this.type.isPointField() && !hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"Point fields can't use FieldCache. Use docValues=true for field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e","date":1541777404,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible for a field\n   * that may be used to get a {@link org.apache.lucene.queries.function.valuesource.FieldCacheSource},\n   * throwing an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource() throws SolrException {\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    if (! hasDocValues() ) {\n      if ( ! ( indexed() && isUninvertible() && null != this.type.getUninversionType(this) ) ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"can not use FieldCache on a field w/o docValues unless it is indexed uninvertible=true and the type supports Uninversion: \" \n                                + getName());\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource() throws SolrException {\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    if (! hasDocValues() ) {\n      if ( ! ( indexed() && null != this.type.getUninversionType(this) ) ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"can not use FieldCache on a field w/o docValues unless it is indexed and supports Uninversion: \" \n                                + getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["46dc9ac8b3e748407baaef82453138ff3974480c"],"46dc9ac8b3e748407baaef82453138ff3974480c":["897d47a3d78c0956b96658436566279d040b95b9"],"897d47a3d78c0956b96658436566279d040b95b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["46dc9ac8b3e748407baaef82453138ff3974480c"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["897d47a3d78c0956b96658436566279d040b95b9","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"46dc9ac8b3e748407baaef82453138ff3974480c":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","79900e89f08cc17c4bcf49789dd61a2236ee7840","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"897d47a3d78c0956b96658436566279d040b95b9":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["897d47a3d78c0956b96658436566279d040b95b9"],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}