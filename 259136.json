{"path":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],Type[],int,int).mjava","commits":[{"id":"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18","date":1339188570,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],Type[],int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],int,int).mjava","sourceNew":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, Type[] sourceTypes, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final Field valField;\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: add docs \" + offset + \"-\" + (offset+num) + \" valType=\" + valueType);\n    }\n\n    switch(valueType) {\n    case VAR_INTS:\n      valField = new PackedLongDocValuesField(\"promote\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      valField = new ByteDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      valField = new ShortDocValuesField(\"promote\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      valField = new IntDocValuesField(\"promote\", 0);\n      break;\n    case FIXED_INTS_64:\n      valField = new LongDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FLOAT_32:\n      valField = new FloatDocValuesField(\"promote\", 0f);\n      break;\n    case FLOAT_64:\n      valField = new DoubleDocValuesField(\"promote\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + valueType);\n    }\n\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      sourceTypes[i] = valueType;\n      switch (valueType) {\n      case VAR_INTS:\n        // TODO: can we do nextLong()?\n        values[i] = random().nextInt();\n        valField.setLongValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        // TODO: negatives too?\n        values[i] = random().nextInt(Short.MAX_VALUE);\n        valField.setShortValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random().nextInt();\n        valField.setIntValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random().nextLong();\n        valField.setLongValue(values[i]);\n        break;\n      case FLOAT_64:\n        final double nextDouble = random().nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setDoubleValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random().nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloatValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setByteValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random().nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setBytesValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random().nextBoolean()) {\n          values[i] = random().nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random().nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setBytesValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  doc \" + i + \" has val=\" + valField);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random().nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final Field valField;\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: add docs \" + offset + \"-\" + (offset+num) + \" valType=\" + valueType);\n    }\n\n    switch(valueType) {\n    case VAR_INTS:\n      valField = new PackedLongDocValuesField(\"promote\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      valField = new ByteDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      valField = new ShortDocValuesField(\"promote\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      valField = new IntDocValuesField(\"promote\", 0);\n      break;\n    case FIXED_INTS_64:\n      valField = new LongDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FLOAT_32:\n      valField = new FloatDocValuesField(\"promote\", 0f);\n      break;\n    case FLOAT_64:\n      valField = new DoubleDocValuesField(\"promote\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + valueType);\n    }\n\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        // TODO: can we do nextLong()?\n        values[i] = random().nextInt();\n        valField.setLongValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        // TODO: negatives too?\n        values[i] = random().nextInt(Short.MAX_VALUE);\n        valField.setShortValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random().nextInt();\n        valField.setIntValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random().nextLong();\n        valField.setLongValue(values[i]);\n        break;\n      case FLOAT_64:\n        final double nextDouble = random().nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setDoubleValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random().nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloatValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setByteValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random().nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setBytesValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random().nextBoolean()) {\n          values[i] = random().nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random().nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setBytesValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  doc \" + i + \" has val=\" + valField);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random().nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],Type[],int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],Type[],int,int).mjava","sourceNew":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, Type[] sourceTypes, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final Field valField;\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: add docs \" + offset + \"-\" + (offset+num) + \" valType=\" + valueType);\n    }\n\n    switch(valueType) {\n    case VAR_INTS:\n      valField = new PackedLongDocValuesField(\"promote\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      valField = new ByteDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      valField = new ShortDocValuesField(\"promote\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      valField = new IntDocValuesField(\"promote\", 0);\n      break;\n    case FIXED_INTS_64:\n      valField = new LongDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FLOAT_32:\n      valField = new FloatDocValuesField(\"promote\", 0f);\n      break;\n    case FLOAT_64:\n      valField = new DoubleDocValuesField(\"promote\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + valueType);\n    }\n\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(\"id\", i + \"\", Field.Store.YES));\n      sourceTypes[i] = valueType;\n      switch (valueType) {\n      case VAR_INTS:\n        // TODO: can we do nextLong()?\n        values[i] = random().nextInt();\n        valField.setLongValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        // TODO: negatives too?\n        values[i] = random().nextInt(Short.MAX_VALUE);\n        valField.setShortValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random().nextInt();\n        valField.setIntValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random().nextLong();\n        valField.setLongValue(values[i]);\n        break;\n      case FLOAT_64:\n        final double nextDouble = random().nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setDoubleValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random().nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloatValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setByteValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random().nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setBytesValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random().nextBoolean()) {\n          values[i] = random().nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random().nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setBytesValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  doc \" + i + \" has val=\" + valField);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random().nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, Type[] sourceTypes, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final Field valField;\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: add docs \" + offset + \"-\" + (offset+num) + \" valType=\" + valueType);\n    }\n\n    switch(valueType) {\n    case VAR_INTS:\n      valField = new PackedLongDocValuesField(\"promote\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      valField = new ByteDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      valField = new ShortDocValuesField(\"promote\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      valField = new IntDocValuesField(\"promote\", 0);\n      break;\n    case FIXED_INTS_64:\n      valField = new LongDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FLOAT_32:\n      valField = new FloatDocValuesField(\"promote\", 0f);\n      break;\n    case FLOAT_64:\n      valField = new DoubleDocValuesField(\"promote\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + valueType);\n    }\n\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      sourceTypes[i] = valueType;\n      switch (valueType) {\n      case VAR_INTS:\n        // TODO: can we do nextLong()?\n        values[i] = random().nextInt();\n        valField.setLongValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        // TODO: negatives too?\n        values[i] = random().nextInt(Short.MAX_VALUE);\n        valField.setShortValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random().nextInt();\n        valField.setIntValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random().nextLong();\n        valField.setLongValue(values[i]);\n        break;\n      case FLOAT_64:\n        final double nextDouble = random().nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setDoubleValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random().nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloatValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setByteValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random().nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setBytesValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random().nextBoolean()) {\n          values[i] = random().nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random().nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setBytesValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  doc \" + i + \" has val=\" + valField);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random().nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],Type[],int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],Type[],int,int).mjava","sourceNew":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, Type[] sourceTypes, int offset, int num)\n      throws IOException {\n    final Field valField;\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: add docs \" + offset + \"-\" + (offset+num) + \" valType=\" + valueType);\n    }\n\n    switch(valueType) {\n    case VAR_INTS:\n      valField = new PackedLongDocValuesField(\"promote\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      valField = new ByteDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      valField = new ShortDocValuesField(\"promote\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      valField = new IntDocValuesField(\"promote\", 0);\n      break;\n    case FIXED_INTS_64:\n      valField = new LongDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FLOAT_32:\n      valField = new FloatDocValuesField(\"promote\", 0f);\n      break;\n    case FLOAT_64:\n      valField = new DoubleDocValuesField(\"promote\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + valueType);\n    }\n\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(\"id\", i + \"\", Field.Store.YES));\n      sourceTypes[i] = valueType;\n      switch (valueType) {\n      case VAR_INTS:\n        // TODO: can we do nextLong()?\n        values[i] = random().nextInt();\n        valField.setLongValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        // TODO: negatives too?\n        values[i] = random().nextInt(Short.MAX_VALUE);\n        valField.setShortValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random().nextInt();\n        valField.setIntValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random().nextLong();\n        valField.setLongValue(values[i]);\n        break;\n      case FLOAT_64:\n        final double nextDouble = random().nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setDoubleValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random().nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloatValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setByteValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random().nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setBytesValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random().nextBoolean()) {\n          values[i] = random().nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random().nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setBytesValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  doc \" + i + \" has val=\" + valField);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random().nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, Type[] sourceTypes, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final Field valField;\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: add docs \" + offset + \"-\" + (offset+num) + \" valType=\" + valueType);\n    }\n\n    switch(valueType) {\n    case VAR_INTS:\n      valField = new PackedLongDocValuesField(\"promote\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      valField = new ByteDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      valField = new ShortDocValuesField(\"promote\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      valField = new IntDocValuesField(\"promote\", 0);\n      break;\n    case FIXED_INTS_64:\n      valField = new LongDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FLOAT_32:\n      valField = new FloatDocValuesField(\"promote\", 0f);\n      break;\n    case FLOAT_64:\n      valField = new DoubleDocValuesField(\"promote\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + valueType);\n    }\n\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(\"id\", i + \"\", Field.Store.YES));\n      sourceTypes[i] = valueType;\n      switch (valueType) {\n      case VAR_INTS:\n        // TODO: can we do nextLong()?\n        values[i] = random().nextInt();\n        valField.setLongValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        // TODO: negatives too?\n        values[i] = random().nextInt(Short.MAX_VALUE);\n        valField.setShortValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random().nextInt();\n        valField.setIntValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random().nextLong();\n        valField.setLongValue(values[i]);\n        break;\n      case FLOAT_64:\n        final double nextDouble = random().nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setDoubleValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random().nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloatValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setByteValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random().nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setBytesValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random().nextBoolean()) {\n          values[i] = random().nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random().nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setBytesValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  doc \" + i + \" has val=\" + valField);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random().nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],Type[],int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],Type[],int,int).mjava","sourceNew":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, Type[] sourceTypes, int offset, int num)\n      throws IOException {\n    final Field valField;\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: add docs \" + offset + \"-\" + (offset+num) + \" valType=\" + valueType);\n    }\n\n    switch(valueType) {\n    case VAR_INTS:\n      valField = new PackedLongDocValuesField(\"promote\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      valField = new ByteDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      valField = new ShortDocValuesField(\"promote\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      valField = new IntDocValuesField(\"promote\", 0);\n      break;\n    case FIXED_INTS_64:\n      valField = new LongDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FLOAT_32:\n      valField = new FloatDocValuesField(\"promote\", 0f);\n      break;\n    case FLOAT_64:\n      valField = new DoubleDocValuesField(\"promote\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + valueType);\n    }\n\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(\"id\", i + \"\", Field.Store.YES));\n      sourceTypes[i] = valueType;\n      switch (valueType) {\n      case VAR_INTS:\n        // TODO: can we do nextLong()?\n        values[i] = random().nextInt();\n        valField.setLongValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        // TODO: negatives too?\n        values[i] = random().nextInt(Short.MAX_VALUE);\n        valField.setShortValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random().nextInt();\n        valField.setIntValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random().nextLong();\n        valField.setLongValue(values[i]);\n        break;\n      case FLOAT_64:\n        final double nextDouble = random().nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setDoubleValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random().nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloatValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setByteValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random().nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setBytesValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random().nextBoolean()) {\n          values[i] = random().nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random().nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setBytesValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  doc \" + i + \" has val=\" + valField);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random().nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, Type[] sourceTypes, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final Field valField;\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: add docs \" + offset + \"-\" + (offset+num) + \" valType=\" + valueType);\n    }\n\n    switch(valueType) {\n    case VAR_INTS:\n      valField = new PackedLongDocValuesField(\"promote\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      valField = new ByteDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      valField = new ShortDocValuesField(\"promote\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      valField = new IntDocValuesField(\"promote\", 0);\n      break;\n    case FIXED_INTS_64:\n      valField = new LongDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FLOAT_32:\n      valField = new FloatDocValuesField(\"promote\", 0f);\n      break;\n    case FLOAT_64:\n      valField = new DoubleDocValuesField(\"promote\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + valueType);\n    }\n\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(\"id\", i + \"\", Field.Store.YES));\n      sourceTypes[i] = valueType;\n      switch (valueType) {\n      case VAR_INTS:\n        // TODO: can we do nextLong()?\n        values[i] = random().nextInt();\n        valField.setLongValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        // TODO: negatives too?\n        values[i] = random().nextInt(Short.MAX_VALUE);\n        valField.setShortValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random().nextInt();\n        valField.setIntValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random().nextLong();\n        valField.setLongValue(values[i]);\n        break;\n      case FLOAT_64:\n        final double nextDouble = random().nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setDoubleValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random().nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloatValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setByteValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random().nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setBytesValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random().nextBoolean()) {\n          values[i] = random().nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random().nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setBytesValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  doc \" + i + \" has val=\" + valField);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random().nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],Type[],int,int).mjava","sourceNew":null,"sourceOld":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, Type[] sourceTypes, int offset, int num)\n      throws IOException {\n    final Field valField;\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: add docs \" + offset + \"-\" + (offset+num) + \" valType=\" + valueType);\n    }\n\n    switch(valueType) {\n    case VAR_INTS:\n      valField = new PackedLongDocValuesField(\"promote\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      valField = new ByteDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      valField = new ShortDocValuesField(\"promote\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      valField = new IntDocValuesField(\"promote\", 0);\n      break;\n    case FIXED_INTS_64:\n      valField = new LongDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FLOAT_32:\n      valField = new FloatDocValuesField(\"promote\", 0f);\n      break;\n    case FLOAT_64:\n      valField = new DoubleDocValuesField(\"promote\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + valueType);\n    }\n\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(\"id\", i + \"\", Field.Store.YES));\n      sourceTypes[i] = valueType;\n      switch (valueType) {\n      case VAR_INTS:\n        // TODO: can we do nextLong()?\n        values[i] = random().nextInt();\n        valField.setLongValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        // TODO: negatives too?\n        values[i] = random().nextInt(Short.MAX_VALUE);\n        valField.setShortValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random().nextInt();\n        valField.setIntValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random().nextLong();\n        valField.setLongValue(values[i]);\n        break;\n      case FLOAT_64:\n        final double nextDouble = random().nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setDoubleValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random().nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloatValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setByteValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random().nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setBytesValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random().nextBoolean()) {\n          values[i] = random().nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random().nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setBytesValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  doc \" + i + \" has val=\" + valField);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random().nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],Type[],int,int).mjava","sourceNew":null,"sourceOld":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, Type[] sourceTypes, int offset, int num)\n      throws IOException {\n    final Field valField;\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: add docs \" + offset + \"-\" + (offset+num) + \" valType=\" + valueType);\n    }\n\n    switch(valueType) {\n    case VAR_INTS:\n      valField = new PackedLongDocValuesField(\"promote\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      valField = new ByteDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      valField = new ShortDocValuesField(\"promote\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      valField = new IntDocValuesField(\"promote\", 0);\n      break;\n    case FIXED_INTS_64:\n      valField = new LongDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FLOAT_32:\n      valField = new FloatDocValuesField(\"promote\", 0f);\n      break;\n    case FLOAT_64:\n      valField = new DoubleDocValuesField(\"promote\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + valueType);\n    }\n\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(\"id\", i + \"\", Field.Store.YES));\n      sourceTypes[i] = valueType;\n      switch (valueType) {\n      case VAR_INTS:\n        // TODO: can we do nextLong()?\n        values[i] = random().nextInt();\n        valField.setLongValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        // TODO: negatives too?\n        values[i] = random().nextInt(Short.MAX_VALUE);\n        valField.setShortValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random().nextInt();\n        valField.setIntValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random().nextLong();\n        valField.setLongValue(values[i]);\n        break;\n      case FLOAT_64:\n        final double nextDouble = random().nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setDoubleValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random().nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloatValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setByteValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random().nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setBytesValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random().nextBoolean()) {\n          values[i] = random().nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random().nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setBytesValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  doc \" + i + \" has val=\" + valField);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random().nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","6e2893fd5349134af382d33ccc3d84840394c6c1"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["04f07771a2a7dd3a395700665ed839c3dae2def2","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d4d69c535930b5cce125cff868d40f6373dc27d4","6e2893fd5349134af382d33ccc3d84840394c6c1","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}