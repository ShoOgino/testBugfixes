{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],long,boolean).mjava","commits":[{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],long,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],long).mjava","sourceNew":"    private <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n      for (long i = 0; i < expectedSize; i++) {\n        boolean hasNext = iterator.hasNext();\n        assert hasNext;\n        T v = iterator.next();\n        assert allowNull || v != null;\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n      assert !iterator.hasNext();\n      try {\n        iterator.next();\n        throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n      } catch (NoSuchElementException expected) {\n        // ok\n      }\n    }\n\n","sourceOld":"    private <T> void checkIterator(Iterator<T> iterator, long expectedSize) {\n      for (long i = 0; i < expectedSize; i++) {\n        boolean hasNext = iterator.hasNext();\n        assert hasNext;\n        T v = iterator.next();\n        assert v != null;\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n      assert !iterator.hasNext();\n      try {\n        iterator.next();\n        throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n      } catch (NoSuchElementException expected) {\n        // ok\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12774649e77a6efccc3502c735c2893b52af6d6","date":1376964312,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],long,boolean).mjava","sourceNew":null,"sourceOld":"    private <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n      for (long i = 0; i < expectedSize; i++) {\n        boolean hasNext = iterator.hasNext();\n        assert hasNext;\n        T v = iterator.next();\n        assert allowNull || v != null;\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n      assert !iterator.hasNext();\n      try {\n        iterator.next();\n        throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n      } catch (NoSuchElementException expected) {\n        // ok\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d12774649e77a6efccc3502c735c2893b52af6d6":["9faa42f41b6adb98daf009cf99a4ee239189e469"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["d12774649e77a6efccc3502c735c2893b52af6d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9faa42f41b6adb98daf009cf99a4ee239189e469","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d12774649e77a6efccc3502c735c2893b52af6d6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d12774649e77a6efccc3502c735c2893b52af6d6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}