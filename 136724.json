{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","commits":[{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(ContentStream).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay ) throws IOException {\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case SET_PROPERTY:\n          overlay = applySetProp(op, overlay);\n          break;\n        case UNSET_PROPERTY:\n          overlay = applyUnset(op, overlay);\n          break;\n        case SET_USER_PROPERTY:\n          overlay = applySetUserProp(op, overlay);\n          break;\n        case UNSET_USER_PROPERTY:\n          overlay = applyUnsetUserProp(op, overlay);\n          break;\n      }\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS,errs);\n      return;\n    }\n\n    SolrResourceLoader loader = req.getCore().getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkController.persistConfigResourceToZooKeeper(loader,overlay.getZnodeVersion(),\n          ConfigOverlay.RESOURCE_NAME,overlay.toByteArray(),true);\n\n    } else {\n      SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n      req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n    }\n\n  }\n\n","sourceOld":"    private void handleCommands( ContentStream stream) throws IOException {\n    ConfigOverlay overlay = req.getCore().getSolrConfig().getOverlay();\n    List<CommandOperation> ops = CommandOperation.parse(stream.getReader());\n    for (CommandOperation op : ops) {\n      if(SET_PROPERTY.equals( op.name) ){\n        overlay = applySetProp(op, overlay);\n      }else if(UNSET_PROPERTY.equals(op.name)){\n        overlay = applyUnset(op,overlay);\n      }else if(SET_USER_PROPERTY.equals(op.name)){\n        overlay = applySetUserProp(op ,overlay);\n      }else if(UNSET_USER_PROPERTY.equals(op.name)){\n        overlay = applyUnsetUserProp(op, overlay);\n      }\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS,errs);\n      return;\n    }\n\n    SolrResourceLoader loader = req.getCore().getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkController.persistConfigResourceToZooKeeper(loader,overlay.getZnodeVersion(),\n          ConfigOverlay.RESOURCE_NAME,overlay.toByteArray(),true);\n\n      String collectionName = req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName();\n      Map map = ZkNodeProps.makeMap(CoreAdminParams.ACTION, CollectionParams.CollectionAction.RELOAD.toString() ,\n          CollectionParams.NAME, collectionName);\n\n      SolrQueryRequest  solrQueryRequest = new LocalSolrQueryRequest(req.getCore(), new MapSolrParams(map));\n      SolrQueryResponse tmpResp = new SolrQueryResponse();\n      try {\n        //doing a collection reload\n        req.getCore().getCoreDescriptor().getCoreContainer().getCollectionsHandler().handleRequestBody(solrQueryRequest,tmpResp);\n      } catch (Exception e) {\n        String msg = MessageFormat.format(\"Unable to reload collection {0}\", collectionName);\n        log.error(msg);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n      }\n\n    } else {\n      SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n      req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5","date":1417094182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay ) throws IOException {\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case SET_PROPERTY:\n          overlay = applySetProp(op, overlay);\n          break;\n        case UNSET_PROPERTY:\n          overlay = applyUnset(op, overlay);\n          break;\n        case SET_USER_PROPERTY:\n          overlay = applySetUserProp(op, overlay);\n          break;\n        case UNSET_USER_PROPERTY:\n          overlay = applyUnsetUserProp(op, overlay);\n          break;\n        case UPDATE_REQHANDLER:\n        case CREATE_REQHANDLER:\n          overlay = applyRequestHandler(op, overlay);\n          break;\n        case DELETE_REQHANDLER:\n          overlay = applyDeleteHandler(op,overlay);\n          break;\n      }\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS,errs);\n      return;\n    }\n\n    SolrResourceLoader loader = req.getCore().getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkController.persistConfigResourceToZooKeeper(loader,overlay.getZnodeVersion(),\n          ConfigOverlay.RESOURCE_NAME,overlay.toByteArray(),true);\n\n    } else {\n      SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n      req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n    }\n\n  }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay ) throws IOException {\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case SET_PROPERTY:\n          overlay = applySetProp(op, overlay);\n          break;\n        case UNSET_PROPERTY:\n          overlay = applyUnset(op, overlay);\n          break;\n        case SET_USER_PROPERTY:\n          overlay = applySetUserProp(op, overlay);\n          break;\n        case UNSET_USER_PROPERTY:\n          overlay = applyUnsetUserProp(op, overlay);\n          break;\n      }\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS,errs);\n      return;\n    }\n\n    SolrResourceLoader loader = req.getCore().getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkController.persistConfigResourceToZooKeeper(loader,overlay.getZnodeVersion(),\n          ConfigOverlay.RESOURCE_NAME,overlay.toByteArray(),true);\n\n    } else {\n      SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n      req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45a5f13e4e6b3c60912dc0911227739fe2f371c2","date":1420449490,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay ) throws IOException {\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case SET_PROPERTY:\n          overlay = applySetProp(op, overlay);\n          break;\n        case UNSET_PROPERTY:\n          overlay = applyUnset(op, overlay);\n          break;\n        case SET_USER_PROPERTY:\n          overlay = applySetUserProp(op, overlay);\n          break;\n        case UNSET_USER_PROPERTY:\n          overlay = applyUnsetUserProp(op, overlay);\n          break;\n        case UPDATE_REQHANDLER:\n        case CREATE_REQHANDLER:\n          overlay = applyRequestHandler(op, overlay);\n          break;\n        case DELETE_REQHANDLER:\n          overlay = applyDeleteHandler(op,overlay);\n          break;\n      }\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS,errs);\n      return;\n    }\n\n    SolrResourceLoader loader = req.getCore().getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader,overlay.getZnodeVersion(),\n          ConfigOverlay.RESOURCE_NAME,overlay.toByteArray(),true);\n\n    } else {\n      SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n      req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n    }\n\n  }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay ) throws IOException {\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case SET_PROPERTY:\n          overlay = applySetProp(op, overlay);\n          break;\n        case UNSET_PROPERTY:\n          overlay = applyUnset(op, overlay);\n          break;\n        case SET_USER_PROPERTY:\n          overlay = applySetUserProp(op, overlay);\n          break;\n        case UNSET_USER_PROPERTY:\n          overlay = applyUnsetUserProp(op, overlay);\n          break;\n        case UPDATE_REQHANDLER:\n        case CREATE_REQHANDLER:\n          overlay = applyRequestHandler(op, overlay);\n          break;\n        case DELETE_REQHANDLER:\n          overlay = applyDeleteHandler(op,overlay);\n          break;\n      }\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS,errs);\n      return;\n    }\n\n    SolrResourceLoader loader = req.getCore().getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkController.persistConfigResourceToZooKeeper(loader,overlay.getZnodeVersion(),\n          ConfigOverlay.RESOURCE_NAME,overlay.toByteArray(),true);\n\n    } else {\n      SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n      req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1","date":1423220905,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay ) throws IOException {\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case SET_PROPERTY:\n          overlay = applySetProp(op, overlay);\n          break;\n        case UNSET_PROPERTY:\n          overlay = applyUnset(op, overlay);\n          break;\n        case SET_USER_PROPERTY:\n          overlay = applySetUserProp(op, overlay);\n          break;\n        case UNSET_USER_PROPERTY:\n          overlay = applyUnsetUserProp(op, overlay);\n          break;\n        default: {\n          List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n          if (pcs.size() != 2) {\n            op.addError(MessageFormat.format(\"Unknown operation ''{0}'' \", op.name));\n          } else {\n            String prefix = pcs.get(0);\n            String name = pcs.get(1);\n            if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n              SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n              if (\"delete\".equals(prefix)) {\n                overlay = deleteNamedComponent(op, overlay, info.tag);\n              } else {\n                overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\"));\n              }\n            } else {\n              op.addError(MessageFormat.format(\"Unknown operation ''{0}'' \", op.name));\n            }\n          }\n        }\n      }\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS,errs);\n      return;\n    }\n\n    SolrResourceLoader loader = req.getCore().getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader,overlay.getZnodeVersion(),\n          ConfigOverlay.RESOURCE_NAME,overlay.toByteArray(),true);\n\n    } else {\n      SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n      req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n    }\n\n  }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay ) throws IOException {\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case SET_PROPERTY:\n          overlay = applySetProp(op, overlay);\n          break;\n        case UNSET_PROPERTY:\n          overlay = applyUnset(op, overlay);\n          break;\n        case SET_USER_PROPERTY:\n          overlay = applySetUserProp(op, overlay);\n          break;\n        case UNSET_USER_PROPERTY:\n          overlay = applyUnsetUserProp(op, overlay);\n          break;\n        case UPDATE_REQHANDLER:\n        case CREATE_REQHANDLER:\n          overlay = applyRequestHandler(op, overlay);\n          break;\n        case DELETE_REQHANDLER:\n          overlay = applyDeleteHandler(op,overlay);\n          break;\n      }\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS,errs);\n      return;\n    }\n\n    SolrResourceLoader loader = req.getCore().getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader,overlay.getZnodeVersion(),\n          ConfigOverlay.RESOURCE_NAME,overlay.toByteArray(),true);\n\n    } else {\n      SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n      req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be214850f18c80408bcfafd463ec155ab0515aee","date":1423651203,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(MessageFormat.format(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.tag);\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\"));\n                }\n              } else {\n                op.addError(MessageFormat.format(\"Unknown operation ''{0}'' \", op.name));\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n\n        log.info(\"Executed config commands successfully and persited to ZK {}\", ops);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay ) throws IOException {\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case SET_PROPERTY:\n          overlay = applySetProp(op, overlay);\n          break;\n        case UNSET_PROPERTY:\n          overlay = applyUnset(op, overlay);\n          break;\n        case SET_USER_PROPERTY:\n          overlay = applySetUserProp(op, overlay);\n          break;\n        case UNSET_USER_PROPERTY:\n          overlay = applyUnsetUserProp(op, overlay);\n          break;\n        default: {\n          List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n          if (pcs.size() != 2) {\n            op.addError(MessageFormat.format(\"Unknown operation ''{0}'' \", op.name));\n          } else {\n            String prefix = pcs.get(0);\n            String name = pcs.get(1);\n            if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n              SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n              if (\"delete\".equals(prefix)) {\n                overlay = deleteNamedComponent(op, overlay, info.tag);\n              } else {\n                overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\"));\n              }\n            } else {\n              op.addError(MessageFormat.format(\"Unknown operation ''{0}'' \", op.name));\n            }\n          }\n        }\n      }\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS,errs);\n      return;\n    }\n\n    SolrResourceLoader loader = req.getCore().getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader,overlay.getZnodeVersion(),\n          ConfigOverlay.RESOURCE_NAME,overlay.toByteArray(),true);\n\n    } else {\n      SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n      req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["5fb8cae56bd31a827317dd604b1169743f9475f2","5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(MessageFormat.format(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.tag);\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.addError(MessageFormat.format(\"Unknown operation ''{0}'' \", op.name));\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n\n        log.info(\"Executed config commands successfully and persited to ZK {}\", ops);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(MessageFormat.format(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.tag);\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\"));\n                }\n              } else {\n                op.addError(MessageFormat.format(\"Unknown operation ''{0}'' \", op.name));\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n\n        log.info(\"Executed config commands successfully and persited to ZK {}\", ops);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9bdb19206b4aeab66b9fb393c53969f44bdd48be","date":1426629125,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(StrUtils.formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.tag);\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.addError(StrUtils.formatString(\"Unknown operation ''{0}'' \", op.name));\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n\n        log.info(\"Executed config commands successfully and persited to ZK {}\", ops);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(MessageFormat.format(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.tag);\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.addError(MessageFormat.format(\"Unknown operation ''{0}'' \", op.name));\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n\n        log.info(\"Executed config commands successfully and persited to ZK {}\", ops);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n\n        log.info(\"Executed config commands successfully and persited to ZK {}\", ops);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(StrUtils.formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.tag);\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.addError(StrUtils.formatString(\"Unknown operation ''{0}'' \", op.name));\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n\n        log.info(\"Executed config commands successfully and persited to ZK {}\", ops);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n\n        log.info(\"Executed config commands successfully and persited to ZK {}\", ops);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(MessageFormat.format(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.tag);\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\"));\n                }\n              } else {\n                op.addError(MessageFormat.format(\"Unknown operation ''{0}'' \", op.name));\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n\n        log.info(\"Executed config commands successfully and persited to ZK {}\", ops);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"389d072b64597cdcf75c2d536aaec3e8afe3393f","date":1427818698,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands. errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n\n        log.info(\"Executed config commands successfully and persited to ZK {}\", ops);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":["5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands. errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n\n        log.info(\"Executed config commands successfully and persited to ZK {}\", ops);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands. errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands. errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands. errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands. errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands. errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands. errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5842a4edb3c2199b36886989b39d0da46b6f2e7b","date":1529637673,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands. errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":["389d072b64597cdcf75c2d536aaec3e8afe3393f","be214850f18c80408bcfafd463ec155ab0515aee"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands. errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.info(\"Failed to run commands. errors are {}\", StrUtils.join(errs, ','));\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fb8cae56bd31a827317dd604b1169743f9475f2","date":1571413113,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persisted to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persited to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":["be214850f18c80408bcfafd463ec155ab0515aee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.error(\"ERROR:\" + Utils.toJSONString(errs));\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.debug(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persisted to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.info(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persisted to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.error(\"ERROR:{}\", Utils.toJSONString(errs));\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.debug(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persisted to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.error(\"ERROR:\" + Utils.toJSONString(errs));\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.debug(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persisted to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      @SuppressWarnings({\"rawtypes\"})\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.error(\"ERROR:{}\", Utils.toJSONString(errs));\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.debug(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persisted to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.error(\"ERROR:{}\", Utils.toJSONString(errs));\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.debug(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persisted to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e225693f479462798cae64c4d4350c1df6632f41","date":1598082835,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      @SuppressWarnings({\"rawtypes\"})\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.error(\"ERROR:{}\", Utils.toJSONString(errs));\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.debug(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName(), req.getCore().uniqueId);\n        log.info(\"Executed config commands successfully and persisted to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\"})\n    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      @SuppressWarnings({\"rawtypes\"})\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.error(\"ERROR:{}\", Utils.toJSONString(errs));\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.debug(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName());\n        log.info(\"Executed config commands successfully and persisted to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fc1087854af39c9b439f47d913fd3ac1d85ac5c","date":1599523122,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      @SuppressWarnings({\"rawtypes\"})\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.error(\"ERROR:{}\", Utils.toJSONString(errs));\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.debug(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName(), req.getCore().uniqueId, false);\n        log.info(\"Executed config commands successfully and persisted to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\"})\n    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      @SuppressWarnings({\"rawtypes\"})\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.error(\"ERROR:{}\", Utils.toJSONString(errs));\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.debug(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName(), req.getCore().uniqueId);\n        log.info(\"Executed config commands successfully and persisted to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"938fe8fd4d30ae70161827366f67c2382985e446","date":1600050178,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      @SuppressWarnings({\"rawtypes\"})\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.error(\"ERROR:{}\", Utils.toJSONString(errs));\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.debug(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName(), req.getCore().uniqueId);\n        log.info(\"Executed config commands successfully and persisted to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\"})\n    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      @SuppressWarnings({\"rawtypes\"})\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.error(\"ERROR:{}\", Utils.toJSONString(errs));\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.debug(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName(), req.getCore().uniqueId, false);\n        log.info(\"Executed config commands successfully and persisted to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e451e492cce54699988e2ce0aea55e3ff170cb0","date":1600305561,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      @SuppressWarnings({\"rawtypes\"})\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.error(\"ERROR:{}\", Utils.toJSONString(errs));\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.debug(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName(), req.getCore().uniqueId, false);\n        log.info(\"Executed config commands successfully and persisted to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\"})\n    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      @SuppressWarnings({\"rawtypes\"})\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.error(\"ERROR:{}\", Utils.toJSONString(errs));\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.debug(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName(), req.getCore().uniqueId);\n        log.info(\"Executed config commands successfully and persisted to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"818e98f73e60a2284311c913586399fdb0bd90e2","date":1601357867,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      @SuppressWarnings({\"rawtypes\"})\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.error(\"ERROR:{}\", Utils.toJSONString(errs));\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.debug(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName(), req.getCore().uniqueId);\n        log.info(\"Executed config commands successfully and persisted to File System {}\", ops);\n      }\n\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\"})\n    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay) throws IOException {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET_PROPERTY:\n            overlay = applySetProp(op, overlay);\n            break;\n          case UNSET_PROPERTY:\n            overlay = applyUnset(op, overlay);\n            break;\n          case SET_USER_PROPERTY:\n            overlay = applySetUserProp(op, overlay);\n            break;\n          case UNSET_USER_PROPERTY:\n            overlay = applyUnsetUserProp(op, overlay);\n            break;\n          default: {\n            List<String> pcs = StrUtils.splitSmart(op.name.toLowerCase(Locale.ROOT), '-');\n            if (pcs.size() != 2) {\n              op.addError(formatString(\"Unknown operation ''{0}'' \", op.name));\n            } else {\n              String prefix = pcs.get(0);\n              String name = pcs.get(1);\n              if (cmdPrefixes.contains(prefix) && namedPlugins.containsKey(name)) {\n                SolrConfig.SolrPluginInfo info = namedPlugins.get(name);\n                if (\"delete\".equals(prefix)) {\n                  overlay = deleteNamedComponent(op, overlay, info.getCleanTag());\n                } else {\n                  overlay = updateNamedPlugin(info, op, overlay, prefix.equals(\"create\") || prefix.equals(\"add\"));\n                }\n              } else {\n                op.unknownOperation();\n              }\n            }\n          }\n        }\n      }\n      @SuppressWarnings({\"rawtypes\"})\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        log.error(\"ERROR:{}\", Utils.toJSONString(errs));\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing commands\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        int latestVersion = ZkController.persistConfigResourceToZooKeeper((ZkSolrResourceLoader) loader, overlay.getZnodeVersion(),\n            ConfigOverlay.RESOURCE_NAME, overlay.toByteArray(), true);\n        log.debug(\"Executed config commands successfully and persisted to ZK {}\", ops);\n        waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n            req.getCore().getCoreContainer().getZkController(),\n            ConfigOverlay.NAME,\n            latestVersion, 30);\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n        req.getCore().getCoreContainer().reload(req.getCore().getName(), req.getCore().uniqueId, false);\n        log.info(\"Executed config commands successfully and persisted to File System {}\", ops);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bdcb86c29922edae9a14852e636303bc52df094":["389d072b64597cdcf75c2d536aaec3e8afe3393f"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["6bdcb86c29922edae9a14852e636303bc52df094"],"1fc1087854af39c9b439f47d913fd3ac1d85ac5c":["e225693f479462798cae64c4d4350c1df6632f41"],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"be214850f18c80408bcfafd463ec155ab0515aee":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"45a5f13e4e6b3c60912dc0911227739fe2f371c2":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["be214850f18c80408bcfafd463ec155ab0515aee","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["5fb8cae56bd31a827317dd604b1169743f9475f2"],"5fb8cae56bd31a827317dd604b1169743f9475f2":["c44cc06c26e456fe9c215072b79fce30babe3975"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5842a4edb3c2199b36886989b39d0da46b6f2e7b":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1":["45a5f13e4e6b3c60912dc0911227739fe2f371c2"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["be214850f18c80408bcfafd463ec155ab0515aee"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"fab172655716b96f7e42376116235017a922de3a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","389d072b64597cdcf75c2d536aaec3e8afe3393f"],"0e451e492cce54699988e2ce0aea55e3ff170cb0":["938fe8fd4d30ae70161827366f67c2382985e446"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"389d072b64597cdcf75c2d536aaec3e8afe3393f":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"818e98f73e60a2284311c913586399fdb0bd90e2":["0e451e492cce54699988e2ce0aea55e3ff170cb0"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["6bdcb86c29922edae9a14852e636303bc52df094"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"e225693f479462798cae64c4d4350c1df6632f41":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"938fe8fd4d30ae70161827366f67c2382985e446":["1fc1087854af39c9b439f47d913fd3ac1d85ac5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["818e98f73e60a2284311c913586399fdb0bd90e2"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fb50877dc038c021eba3a70999fd1f6ed85001c1","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"6bdcb86c29922edae9a14852e636303bc52df094":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"1fc1087854af39c9b439f47d913fd3ac1d85ac5c":["938fe8fd4d30ae70161827366f67c2382985e446"],"c44cc06c26e456fe9c215072b79fce30babe3975":["5fb8cae56bd31a827317dd604b1169743f9475f2","b0b597c65628ca9e73913a07e81691f8229bae35"],"be214850f18c80408bcfafd463ec155ab0515aee":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","389d072b64597cdcf75c2d536aaec3e8afe3393f"],"45a5f13e4e6b3c60912dc0911227739fe2f371c2":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fab172655716b96f7e42376116235017a922de3a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"5fb8cae56bd31a827317dd604b1169743f9475f2":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"5842a4edb3c2199b36886989b39d0da46b6f2e7b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","fb50877dc038c021eba3a70999fd1f6ed85001c1"],"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1":["be214850f18c80408bcfafd463ec155ab0515aee"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["45a5f13e4e6b3c60912dc0911227739fe2f371c2"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"fab172655716b96f7e42376116235017a922de3a":[],"0e451e492cce54699988e2ce0aea55e3ff170cb0":["818e98f73e60a2284311c913586399fdb0bd90e2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"389d072b64597cdcf75c2d536aaec3e8afe3393f":["6bdcb86c29922edae9a14852e636303bc52df094","fab172655716b96f7e42376116235017a922de3a"],"818e98f73e60a2284311c913586399fdb0bd90e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","5842a4edb3c2199b36886989b39d0da46b6f2e7b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["e225693f479462798cae64c4d4350c1df6632f41"],"e225693f479462798cae64c4d4350c1df6632f41":["1fc1087854af39c9b439f47d913fd3ac1d85ac5c"],"938fe8fd4d30ae70161827366f67c2382985e446":["0e451e492cce54699988e2ce0aea55e3ff170cb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fab172655716b96f7e42376116235017a922de3a","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}