{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudConsistency#testOutOfSyncReplicasCannotBecomeLeader(boolean).mjava","commits":[{"id":"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94","date":1520143025,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudConsistency#testOutOfSyncReplicasCannotBecomeLeader(boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void testOutOfSyncReplicasCannotBecomeLeader(boolean onRestart) throws Exception {\n    final String collectionName = \"outOfSyncReplicasCannotBecomeLeader-\"+onRestart;\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n\n    addDocs(collectionName, 3, 1);\n\n    final Replica oldLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n    assertEquals(cluster.getJettySolrRunner(0).getNodeName(), oldLeader.getNodeName());\n\n    if (onRestart) {\n      addDocToWhenOtherReplicasAreDown(collectionName, oldLeader, 4);\n    } else {\n      addDocWhenOtherReplicasAreNetworkPartitioned(collectionName, oldLeader, 4);\n    }\n\n    assertDocsExistInAllReplicas(getCollectionState(collectionName).getReplicas(), collectionName, 1, 4);\n\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudConsistency#testOutOfSyncReplicasCannotBecomeLeader(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudConsistency#testOutOfSyncReplicasCannotBecomeLeader(boolean).mjava","sourceNew":"  public void testOutOfSyncReplicasCannotBecomeLeader(boolean onRestart) throws Exception {\n    final String collectionName = \"outOfSyncReplicasCannotBecomeLeader-\"+onRestart;\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 1, 3);\n    \n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n\n    addDocs(collectionName, 3, 1);\n\n    final Replica oldLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n    assertEquals(cluster.getJettySolrRunner(0).getNodeName(), oldLeader.getNodeName());\n\n    if (onRestart) {\n      addDocToWhenOtherReplicasAreDown(collectionName, oldLeader, 4);\n    } else {\n      addDocWhenOtherReplicasAreNetworkPartitioned(collectionName, oldLeader, 4);\n    }\n\n    assertDocsExistInAllReplicas(getCollectionState(collectionName).getReplicas(), collectionName, 1, 4);\n\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  public void testOutOfSyncReplicasCannotBecomeLeader(boolean onRestart) throws Exception {\n    final String collectionName = \"outOfSyncReplicasCannotBecomeLeader-\"+onRestart;\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n\n    addDocs(collectionName, 3, 1);\n\n    final Replica oldLeader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n    assertEquals(cluster.getJettySolrRunner(0).getNodeName(), oldLeader.getNodeName());\n\n    if (onRestart) {\n      addDocToWhenOtherReplicasAreDown(collectionName, oldLeader, 4);\n    } else {\n      addDocWhenOtherReplicasAreNetworkPartitioned(collectionName, oldLeader, 4);\n    }\n\n    assertDocsExistInAllReplicas(getCollectionState(collectionName).getReplicas(), collectionName, 1, 4);\n\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}