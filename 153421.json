{"path":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"/dev/null","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *  \n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would \n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\");\n      \n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\");\n\n      merge(\"one\", \"two\", \"merge\", false);\n      printSegment(out, \"merge\");\n\n      merge(\"one\", \"two\", \"merge2\", false);\n      printSegment(out, \"merge2\");\n\n      merge(\"merge\", \"merge2\", \"merge3\", false);\n      printSegment(out, \"merge3\");\n\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      System.out.println(multiFileOutput);\n      \n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n      \n      directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\");\n      \n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\");\n\n      merge(\"one\", \"two\", \"merge\", true);\n      printSegment(out, \"merge\");\n\n      merge(\"one\", \"two\", \"merge2\", true);\n      printSegment(out, \"merge2\");\n\n      merge(\"merge\", \"merge2\", \"merge3\", true);\n      printSegment(out, \"merge3\");\n\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d06343967a29132f5d782f74e8d0988400278a02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96","date":1066874526,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\");\n\n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\");\n\n      merge(\"one\", \"two\", \"merge\", false);\n      printSegment(out, \"merge\");\n\n      merge(\"one\", \"two\", \"merge2\", false);\n      printSegment(out, \"merge2\");\n\n      merge(\"merge\", \"merge2\", \"merge3\", false);\n      printSegment(out, \"merge3\");\n\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\");\n\n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\");\n\n      merge(\"one\", \"two\", \"merge\", true);\n      printSegment(out, \"merge\");\n\n      merge(\"one\", \"two\", \"merge2\", true);\n      printSegment(out, \"merge2\");\n\n      merge(\"merge\", \"merge2\", \"merge3\", true);\n      printSegment(out, \"merge3\");\n\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *  \n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would \n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\");\n      \n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\");\n\n      merge(\"one\", \"two\", \"merge\", false);\n      printSegment(out, \"merge\");\n\n      merge(\"one\", \"two\", \"merge2\", false);\n      printSegment(out, \"merge2\");\n\n      merge(\"merge\", \"merge2\", \"merge3\", false);\n      printSegment(out, \"merge3\");\n\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      System.out.println(multiFileOutput);\n      \n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n      \n      directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\");\n      \n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\");\n\n      merge(\"one\", \"two\", \"merge\", true);\n      printSegment(out, \"merge\");\n\n      merge(\"one\", \"two\", \"merge2\", true);\n      printSegment(out, \"merge2\");\n\n      merge(\"merge\", \"merge2\", \"merge3\", true);\n      printSegment(out, \"merge3\");\n\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07199b50babd5f7f62e5b72acb4ed751e799de1a","date":1066875648,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\");\n\n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\");\n\n      merge(\"one\", \"two\", \"merge\", false);\n      printSegment(out, \"merge\");\n\n      merge(\"one\", \"two\", \"merge2\", false);\n      printSegment(out, \"merge2\");\n\n      merge(\"merge\", \"merge2\", \"merge3\", false);\n      printSegment(out, \"merge3\");\n\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\");\n\n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\");\n\n      merge(\"one\", \"two\", \"merge\", true);\n      printSegment(out, \"merge\");\n\n      merge(\"one\", \"two\", \"merge2\", true);\n      printSegment(out, \"merge2\");\n\n      merge(\"merge\", \"merge2\", \"merge3\", true);\n      printSegment(out, \"merge3\");\n\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\");\n\n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\");\n\n      merge(\"one\", \"two\", \"merge\", false);\n      printSegment(out, \"merge\");\n\n      merge(\"one\", \"two\", \"merge2\", false);\n      printSegment(out, \"merge2\");\n\n      merge(\"merge\", \"merge2\", \"merge3\", false);\n      printSegment(out, \"merge3\");\n\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\");\n\n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\");\n\n      merge(\"one\", \"two\", \"merge\", true);\n      printSegment(out, \"merge\");\n\n      merge(\"one\", \"two\", \"merge2\", true);\n      printSegment(out, \"merge2\");\n\n      merge(\"merge\", \"merge2\", \"merge3\", true);\n      printSegment(out, \"merge3\");\n\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0c193c73d0dbc36f15189e21e3f1c5c3613fe11","date":1168445193,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\");\n\n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\");\n\n      merge(\"one\", 1, \"two\", 1, \"merge\", false);\n      printSegment(out, \"merge\");\n\n      merge(\"one\", 1, \"two\", 1, \"merge2\", false);\n      printSegment(out, \"merge2\");\n\n      merge(\"merge\", 2, \"merge2\", 2, \"merge3\", false);\n      printSegment(out, \"merge3\");\n\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\");\n\n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\");\n\n      merge(\"one\", 1, \"two\", 1, \"merge\", true);\n      printSegment(out, \"merge\");\n\n      merge(\"one\", 1, \"two\", 1, \"merge2\", true);\n      printSegment(out, \"merge2\");\n\n      merge(\"merge\", 2, \"merge2\", 2, \"merge3\", true);\n      printSegment(out, \"merge3\");\n\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\");\n\n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\");\n\n      merge(\"one\", \"two\", \"merge\", false);\n      printSegment(out, \"merge\");\n\n      merge(\"one\", \"two\", \"merge2\", false);\n      printSegment(out, \"merge2\");\n\n      merge(\"merge\", \"merge2\", \"merge3\", false);\n      printSegment(out, \"merge3\");\n\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\");\n\n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\");\n\n      merge(\"one\", \"two\", \"merge\", true);\n      printSegment(out, \"merge\");\n\n      merge(\"one\", \"two\", \"merge2\", true);\n      printSegment(out, \"merge2\");\n\n      merge(\"merge\", \"merge2\", \"merge3\", true);\n      printSegment(out, \"merge3\");\n\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fcf637fee66c296142fb5989e338efc018320655","date":1168455996,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\", 1);\n\n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\", 1);\n\n      merge(\"one\", 1, \"two\", 1, \"merge\", false);\n      printSegment(out, \"merge\", 2);\n\n      merge(\"one\", 1, \"two\", 1, \"merge2\", false);\n      printSegment(out, \"merge2\", 2);\n\n      merge(\"merge\", 2, \"merge2\", 2, \"merge3\", false);\n      printSegment(out, \"merge3\", 4);\n\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\", 1);\n\n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\", 1);\n\n      merge(\"one\", 1, \"two\", 1, \"merge\", true);\n      printSegment(out, \"merge\", 2);\n\n      merge(\"one\", 1, \"two\", 1, \"merge2\", true);\n      printSegment(out, \"merge2\", 2);\n\n      merge(\"merge\", 2, \"merge2\", 2, \"merge3\", true);\n      printSegment(out, \"merge3\", 4);\n\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\");\n\n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\");\n\n      merge(\"one\", 1, \"two\", 1, \"merge\", false);\n      printSegment(out, \"merge\");\n\n      merge(\"one\", 1, \"two\", 1, \"merge2\", false);\n      printSegment(out, \"merge2\");\n\n      merge(\"merge\", 2, \"merge2\", 2, \"merge3\", false);\n      printSegment(out, \"merge3\");\n\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\");\n\n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\");\n\n      merge(\"one\", 1, \"two\", 1, \"merge\", true);\n      printSegment(out, \"merge\");\n\n      merge(\"one\", 1, \"two\", 1, \"merge2\", true);\n      printSegment(out, \"merge2\");\n\n      merge(\"merge\", 2, \"merge2\", 2, \"merge3\", true);\n      printSegment(out, \"merge3\");\n\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a5cfde941b2f8208d739344fef3821381885618","date":1168979092,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      SegmentInfo si1 = indexDoc(\"one\", \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, si2);\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      si1 = indexDoc(\"one\", \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, si2);\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\", 1);\n\n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\", 1);\n\n      merge(\"one\", 1, \"two\", 1, \"merge\", false);\n      printSegment(out, \"merge\", 2);\n\n      merge(\"one\", 1, \"two\", 1, \"merge2\", false);\n      printSegment(out, \"merge2\", 2);\n\n      merge(\"merge\", 2, \"merge2\", 2, \"merge3\", false);\n      printSegment(out, \"merge3\", 4);\n\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      indexDoc(\"one\", \"test.txt\");\n      printSegment(out, \"one\", 1);\n\n      indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, \"two\", 1);\n\n      merge(\"one\", 1, \"two\", 1, \"merge\", true);\n      printSegment(out, \"merge\", 2);\n\n      merge(\"one\", 1, \"two\", 1, \"merge2\", true);\n      printSegment(out, \"merge2\", 2);\n\n      merge(\"merge\", 2, \"merge2\", 2, \"merge3\", true);\n      printSegment(out, \"merge3\", 4);\n\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0","date":1185569419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.getDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n      directory.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.getDirectory(indexDir);\n      writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n      directory.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      SegmentInfo si1 = indexDoc(\"one\", \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, si2);\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.getDirectory(indexDir, true);\n      directory.close();\n\n      si1 = indexDoc(\"one\", \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(\"two\", \"test2.txt\");\n      printSegment(out, si2);\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":["d0bf957228b21d5093ca182ac6e90ce6da3eab00"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.getDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n      directory.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.getDirectory(indexDir);\n      writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n      directory.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.getDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n      directory.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.getDirectory(indexDir);\n      writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n      directory.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0bf957228b21d5093ca182ac6e90ce6da3eab00","date":1215682064,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.getDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.getDirectory(indexDir);\n      writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.getDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n      directory.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.getDirectory(indexDir);\n      writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n      directory.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.getDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.getDirectory(indexDir);\n      writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fcf637fee66c296142fb5989e338efc018320655":["a0c193c73d0dbc36f15189e21e3f1c5c3613fe11"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["8a5cfde941b2f8208d739344fef3821381885618"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"07199b50babd5f7f62e5b72acb4ed751e799de1a":["2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"8a5cfde941b2f8208d739344fef3821381885618":["fcf637fee66c296142fb5989e338efc018320655"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["d0bf957228b21d5093ca182ac6e90ce6da3eab00"],"a0c193c73d0dbc36f15189e21e3f1c5c3613fe11":["07199b50babd5f7f62e5b72acb4ed751e799de1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0bf957228b21d5093ca182ac6e90ce6da3eab00":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"fcf637fee66c296142fb5989e338efc018320655":["8a5cfde941b2f8208d739344fef3821381885618"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"07199b50babd5f7f62e5b72acb4ed751e799de1a":["a0c193c73d0dbc36f15189e21e3f1c5c3613fe11"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["d0bf957228b21d5093ca182ac6e90ce6da3eab00"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8a5cfde941b2f8208d739344fef3821381885618":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0c193c73d0dbc36f15189e21e3f1c5c3613fe11":["fcf637fee66c296142fb5989e338efc018320655"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"d0bf957228b21d5093ca182ac6e90ce6da3eab00":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96":["07199b50babd5f7f62e5b72acb4ed751e799de1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}