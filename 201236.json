{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator#testTerms().mjava","commits":[{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator#testTerms().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestTermFreqPayloadIterator#testTerms().mjava","sourceNew":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>(comparator);\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>(comparator);\n    Input[] unsorted = new Input[num];\n    Input[] unsortedWithoutPayload = new Input[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      unsorted[i] = new Input(key, value, payload);\n      unsortedWithoutPayload[i] = new Input(key, value);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    InputIterator wrapper = new SortedInputIterator(new InputArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      assertEquals(entry.getValue().getValue(), wrapper.payload());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper with payloads\n    wrapper = new UnsortedInputIterator(new InputArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    InputIterator wrapperWithoutPayload = new SortedInputIterator(new InputArrayIterator(unsortedWithoutPayload), comparator);\n    Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n    while (expectedWithoutPayload.hasNext()) {\n      Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n      assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n      assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n      assertNull(wrapperWithoutPayload.payload());\n    }\n    assertNull(wrapperWithoutPayload.next());\n    \n    // test the unsorted iterator wrapper without payloads\n    wrapperWithoutPayload = new UnsortedInputIterator(new InputArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","sourceOld":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>(comparator);\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>(comparator);\n    TermFreqPayload[] unsorted = new TermFreqPayload[num];\n    TermFreqPayload[] unsortedWithoutPayload = new TermFreqPayload[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      unsorted[i] = new TermFreqPayload(key, value, payload);\n      unsortedWithoutPayload[i] = new TermFreqPayload(key, value);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    TermFreqPayloadIterator wrapper = new SortedTermFreqPayloadIteratorWrapper(new TermFreqPayloadArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      assertEquals(entry.getValue().getValue(), wrapper.payload());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper with payloads\n    wrapper = new UnsortedTermFreqPayloadIteratorWrapper(new TermFreqPayloadArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    TermFreqPayloadIterator wrapperWithoutPayload = new SortedTermFreqPayloadIteratorWrapper(new TermFreqPayloadArrayIterator(unsortedWithoutPayload), comparator);\n    Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n    while (expectedWithoutPayload.hasNext()) {\n      Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n      assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n      assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n      assertNull(wrapperWithoutPayload.payload());\n    }\n    assertNull(wrapperWithoutPayload.next());\n    \n    // test the unsorted iterator wrapper without payloads\n    wrapperWithoutPayload = new UnsortedTermFreqPayloadIteratorWrapper(new TermFreqPayloadArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator#testTerms().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator#testTerms().mjava","sourceNew":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>(comparator);\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>(comparator);\n    Input[] unsorted = new Input[num];\n    Input[] unsortedWithoutPayload = new Input[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      do {\n        key = new BytesRef(TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      unsorted[i] = new Input(key, value, payload);\n      unsortedWithoutPayload[i] = new Input(key, value);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    InputIterator wrapper = new SortedInputIterator(new InputArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      assertEquals(entry.getValue().getValue(), wrapper.payload());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper with payloads\n    wrapper = new UnsortedInputIterator(new InputArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    InputIterator wrapperWithoutPayload = new SortedInputIterator(new InputArrayIterator(unsortedWithoutPayload), comparator);\n    Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n    while (expectedWithoutPayload.hasNext()) {\n      Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n      assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n      assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n      assertNull(wrapperWithoutPayload.payload());\n    }\n    assertNull(wrapperWithoutPayload.next());\n    \n    // test the unsorted iterator wrapper without payloads\n    wrapperWithoutPayload = new UnsortedInputIterator(new InputArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","sourceOld":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>(comparator);\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>(comparator);\n    Input[] unsorted = new Input[num];\n    Input[] unsortedWithoutPayload = new Input[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      do {\n        key = new BytesRef(_TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(_TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      unsorted[i] = new Input(key, value, payload);\n      unsortedWithoutPayload[i] = new Input(key, value);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    InputIterator wrapper = new SortedInputIterator(new InputArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      assertEquals(entry.getValue().getValue(), wrapper.payload());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper with payloads\n    wrapper = new UnsortedInputIterator(new InputArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    InputIterator wrapperWithoutPayload = new SortedInputIterator(new InputArrayIterator(unsortedWithoutPayload), comparator);\n    Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n    while (expectedWithoutPayload.hasNext()) {\n      Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n      assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n      assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n      assertNull(wrapperWithoutPayload.payload());\n    }\n    assertNull(wrapperWithoutPayload.next());\n    \n    // test the unsorted iterator wrapper without payloads\n    wrapperWithoutPayload = new UnsortedInputIterator(new InputArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","date":1395588343,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator#testTerms().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator#testTerms().mjava","sourceNew":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>(comparator);\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>(comparator);\n    TreeMap<BytesRef, SimpleEntry<Long, Set<BytesRef>>> sortedWithContext = new TreeMap<>(comparator);\n    Input[] unsorted = new Input[num];\n    Input[] unsortedWithoutPayload = new Input[num];\n    Input[] unsortedWithContexts = new Input[num];\n    Set<BytesRef> ctxs;\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      ctxs = new HashSet<>();\n      do {\n        key = new BytesRef(TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(TestUtil.randomUnicodeString(random));\n        for(int j = 0; j < atLeast(2); j++) {\n          ctxs.add(new BytesRef(TestUtil.randomUnicodeString(random)));\n        }\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      sortedWithContext.put(key, new SimpleEntry<>(value, ctxs));\n      unsorted[i] = new Input(key, value, payload);\n      unsortedWithoutPayload[i] = new Input(key, value);\n      unsortedWithContexts[i] = new Input(key, value, ctxs);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    InputIterator wrapper = new SortedInputIterator(new InputArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      assertEquals(entry.getValue().getValue(), wrapper.payload());\n    }\n    assertNull(wrapper.next());\n    \n    // test the sorted iterator wrapper with contexts\n    wrapper = new SortedInputIterator(new InputArrayIterator(unsortedWithContexts), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>>> actualEntries = sortedWithContext.entrySet().iterator();\n    while (actualEntries.hasNext()) {\n      Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>> entry = actualEntries.next();\n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      Set<BytesRef> actualCtxs = entry.getValue().getValue();\n      assertEquals(actualCtxs, wrapper.contexts());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper with payloads\n    wrapper = new UnsortedInputIterator(new InputArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    InputIterator wrapperWithoutPayload = new SortedInputIterator(new InputArrayIterator(unsortedWithoutPayload), comparator);\n    Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n    while (expectedWithoutPayload.hasNext()) {\n      Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n      assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n      assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n      assertNull(wrapperWithoutPayload.payload());\n    }\n    assertNull(wrapperWithoutPayload.next());\n    \n    // test the unsorted iterator wrapper without payloads\n    wrapperWithoutPayload = new UnsortedInputIterator(new InputArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","sourceOld":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>(comparator);\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>(comparator);\n    Input[] unsorted = new Input[num];\n    Input[] unsortedWithoutPayload = new Input[num];\n\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      do {\n        key = new BytesRef(TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(TestUtil.randomUnicodeString(random));\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      unsorted[i] = new Input(key, value, payload);\n      unsortedWithoutPayload[i] = new Input(key, value);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    InputIterator wrapper = new SortedInputIterator(new InputArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      assertEquals(entry.getValue().getValue(), wrapper.payload());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper with payloads\n    wrapper = new UnsortedInputIterator(new InputArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    InputIterator wrapperWithoutPayload = new SortedInputIterator(new InputArrayIterator(unsortedWithoutPayload), comparator);\n    Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n    while (expectedWithoutPayload.hasNext()) {\n      Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n      assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n      assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n      assertNull(wrapperWithoutPayload.payload());\n    }\n    assertNull(wrapperWithoutPayload.next());\n    \n    // test the unsorted iterator wrapper without payloads\n    wrapperWithoutPayload = new UnsortedInputIterator(new InputArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c800a7949e97c8f516697a05d0d9439650e82ab","date":1395954040,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator#testTerms().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator#testTerms().mjava","sourceNew":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>(comparator);\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>(comparator);\n    TreeMap<BytesRef, SimpleEntry<Long, Set<BytesRef>>> sortedWithContext = new TreeMap<>(comparator);\n    TreeMap<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>> sortedWithPayloadAndContext = new TreeMap<>(comparator);\n    Input[] unsorted = new Input[num];\n    Input[] unsortedWithoutPayload = new Input[num];\n    Input[] unsortedWithContexts = new Input[num];\n    Input[] unsortedWithPayloadAndContext = new Input[num];\n    Set<BytesRef> ctxs;\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      ctxs = new HashSet<>();\n      do {\n        key = new BytesRef(TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(TestUtil.randomUnicodeString(random));\n        for(int j = 0; j < atLeast(2); j++) {\n          ctxs.add(new BytesRef(TestUtil.randomUnicodeString(random)));\n        }\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      sortedWithContext.put(key, new SimpleEntry<>(value, ctxs));\n      sortedWithPayloadAndContext.put(key, new SimpleEntry<>(value, new SimpleEntry<>(payload, ctxs)));\n      unsorted[i] = new Input(key, value, payload);\n      unsortedWithoutPayload[i] = new Input(key, value);\n      unsortedWithContexts[i] = new Input(key, value, ctxs);\n      unsortedWithPayloadAndContext[i] = new Input(key, value, payload, ctxs);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    InputIterator wrapper = new SortedInputIterator(new InputArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      assertEquals(entry.getValue().getValue(), wrapper.payload());\n    }\n    assertNull(wrapper.next());\n    \n    // test the sorted iterator wrapper with contexts\n    wrapper = new SortedInputIterator(new InputArrayIterator(unsortedWithContexts), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>>> actualEntries = sortedWithContext.entrySet().iterator();\n    while (actualEntries.hasNext()) {\n      Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>> entry = actualEntries.next();\n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      Set<BytesRef> actualCtxs = entry.getValue().getValue();\n      assertEquals(actualCtxs, wrapper.contexts());\n    }\n    assertNull(wrapper.next());\n    \n    // test the sorted iterator wrapper with contexts and payload\n    wrapper = new SortedInputIterator(new InputArrayIterator(unsortedWithPayloadAndContext), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>>> expectedPayloadContextEntries = sortedWithPayloadAndContext.entrySet().iterator();\n    while (expectedPayloadContextEntries.hasNext()) {\n      Map.Entry<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>> entry = expectedPayloadContextEntries.next();\n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      Set<BytesRef> actualCtxs = entry.getValue().getValue().getValue();\n      assertEquals(actualCtxs, wrapper.contexts());\n      BytesRef actualPayload = entry.getValue().getValue().getKey();\n      assertEquals(actualPayload, wrapper.payload());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper with payloads\n    wrapper = new UnsortedInputIterator(new InputArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    InputIterator wrapperWithoutPayload = new SortedInputIterator(new InputArrayIterator(unsortedWithoutPayload), comparator);\n    Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n    while (expectedWithoutPayload.hasNext()) {\n      Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n      assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n      assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n      assertNull(wrapperWithoutPayload.payload());\n    }\n    assertNull(wrapperWithoutPayload.next());\n    \n    // test the unsorted iterator wrapper without payloads\n    wrapperWithoutPayload = new UnsortedInputIterator(new InputArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","sourceOld":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>(comparator);\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>(comparator);\n    TreeMap<BytesRef, SimpleEntry<Long, Set<BytesRef>>> sortedWithContext = new TreeMap<>(comparator);\n    Input[] unsorted = new Input[num];\n    Input[] unsortedWithoutPayload = new Input[num];\n    Input[] unsortedWithContexts = new Input[num];\n    Set<BytesRef> ctxs;\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      ctxs = new HashSet<>();\n      do {\n        key = new BytesRef(TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(TestUtil.randomUnicodeString(random));\n        for(int j = 0; j < atLeast(2); j++) {\n          ctxs.add(new BytesRef(TestUtil.randomUnicodeString(random)));\n        }\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      sortedWithContext.put(key, new SimpleEntry<>(value, ctxs));\n      unsorted[i] = new Input(key, value, payload);\n      unsortedWithoutPayload[i] = new Input(key, value);\n      unsortedWithContexts[i] = new Input(key, value, ctxs);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    InputIterator wrapper = new SortedInputIterator(new InputArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      assertEquals(entry.getValue().getValue(), wrapper.payload());\n    }\n    assertNull(wrapper.next());\n    \n    // test the sorted iterator wrapper with contexts\n    wrapper = new SortedInputIterator(new InputArrayIterator(unsortedWithContexts), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>>> actualEntries = sortedWithContext.entrySet().iterator();\n    while (actualEntries.hasNext()) {\n      Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>> entry = actualEntries.next();\n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      Set<BytesRef> actualCtxs = entry.getValue().getValue();\n      assertEquals(actualCtxs, wrapper.contexts());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper with payloads\n    wrapper = new UnsortedInputIterator(new InputArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    InputIterator wrapperWithoutPayload = new SortedInputIterator(new InputArrayIterator(unsortedWithoutPayload), comparator);\n    Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n    while (expectedWithoutPayload.hasNext()) {\n      Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n      assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n      assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n      assertNull(wrapperWithoutPayload.payload());\n    }\n    assertNull(wrapperWithoutPayload.next());\n    \n    // test the unsorted iterator wrapper without payloads\n    wrapperWithoutPayload = new UnsortedInputIterator(new InputArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator#testTerms().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator#testTerms().mjava","sourceNew":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>(comparator);\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>(comparator);\n    TreeMap<BytesRef, SimpleEntry<Long, Set<BytesRef>>> sortedWithContext = new TreeMap<>(comparator);\n    TreeMap<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>> sortedWithPayloadAndContext = new TreeMap<>(comparator);\n    Input[] unsorted = new Input[num];\n    Input[] unsortedWithoutPayload = new Input[num];\n    Input[] unsortedWithContexts = new Input[num];\n    Input[] unsortedWithPayloadAndContext = new Input[num];\n    Set<BytesRef> ctxs;\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      ctxs = new HashSet<>();\n      do {\n        key = new BytesRef(TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(TestUtil.randomUnicodeString(random));\n        for(int j = 0; j < atLeast(2); j++) {\n          ctxs.add(new BytesRef(TestUtil.randomUnicodeString(random)));\n        }\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      sortedWithContext.put(key, new SimpleEntry<>(value, ctxs));\n      sortedWithPayloadAndContext.put(key, new SimpleEntry<>(value, new SimpleEntry<>(payload, ctxs)));\n      unsorted[i] = new Input(key, value, payload);\n      unsortedWithoutPayload[i] = new Input(key, value);\n      unsortedWithContexts[i] = new Input(key, value, ctxs);\n      unsortedWithPayloadAndContext[i] = new Input(key, value, payload, ctxs);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    InputIterator wrapper = new SortedInputIterator(new InputArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      assertEquals(entry.getValue().getValue(), wrapper.payload());\n    }\n    assertNull(wrapper.next());\n    \n    // test the sorted iterator wrapper with contexts\n    wrapper = new SortedInputIterator(new InputArrayIterator(unsortedWithContexts), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>>> actualEntries = sortedWithContext.entrySet().iterator();\n    while (actualEntries.hasNext()) {\n      Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>> entry = actualEntries.next();\n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      Set<BytesRef> actualCtxs = entry.getValue().getValue();\n      assertEquals(actualCtxs, wrapper.contexts());\n    }\n    assertNull(wrapper.next());\n    \n    // test the sorted iterator wrapper with contexts and payload\n    wrapper = new SortedInputIterator(new InputArrayIterator(unsortedWithPayloadAndContext), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>>> expectedPayloadContextEntries = sortedWithPayloadAndContext.entrySet().iterator();\n    while (expectedPayloadContextEntries.hasNext()) {\n      Map.Entry<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>> entry = expectedPayloadContextEntries.next();\n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      Set<BytesRef> actualCtxs = entry.getValue().getValue().getValue();\n      assertEquals(actualCtxs, wrapper.contexts());\n      BytesRef actualPayload = entry.getValue().getValue().getKey();\n      assertEquals(actualPayload, wrapper.payload());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper with payloads\n    wrapper = new UnsortedInputIterator(new InputArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    InputIterator wrapperWithoutPayload = new SortedInputIterator(new InputArrayIterator(unsortedWithoutPayload), comparator);\n    Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n    while (expectedWithoutPayload.hasNext()) {\n      Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n      assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n      assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n      assertNull(wrapperWithoutPayload.payload());\n    }\n    assertNull(wrapperWithoutPayload.next());\n    \n    // test the unsorted iterator wrapper without payloads\n    wrapperWithoutPayload = new UnsortedInputIterator(new InputArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","sourceOld":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>(comparator);\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>(comparator);\n    TreeMap<BytesRef, SimpleEntry<Long, Set<BytesRef>>> sortedWithContext = new TreeMap<>(comparator);\n    Input[] unsorted = new Input[num];\n    Input[] unsortedWithoutPayload = new Input[num];\n    Input[] unsortedWithContexts = new Input[num];\n    Set<BytesRef> ctxs;\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      ctxs = new HashSet<>();\n      do {\n        key = new BytesRef(TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(TestUtil.randomUnicodeString(random));\n        for(int j = 0; j < atLeast(2); j++) {\n          ctxs.add(new BytesRef(TestUtil.randomUnicodeString(random)));\n        }\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      sortedWithContext.put(key, new SimpleEntry<>(value, ctxs));\n      unsorted[i] = new Input(key, value, payload);\n      unsortedWithoutPayload[i] = new Input(key, value);\n      unsortedWithContexts[i] = new Input(key, value, ctxs);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    InputIterator wrapper = new SortedInputIterator(new InputArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      assertEquals(entry.getValue().getValue(), wrapper.payload());\n    }\n    assertNull(wrapper.next());\n    \n    // test the sorted iterator wrapper with contexts\n    wrapper = new SortedInputIterator(new InputArrayIterator(unsortedWithContexts), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>>> actualEntries = sortedWithContext.entrySet().iterator();\n    while (actualEntries.hasNext()) {\n      Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>> entry = actualEntries.next();\n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      Set<BytesRef> actualCtxs = entry.getValue().getValue();\n      assertEquals(actualCtxs, wrapper.contexts());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper with payloads\n    wrapper = new UnsortedInputIterator(new InputArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    InputIterator wrapperWithoutPayload = new SortedInputIterator(new InputArrayIterator(unsortedWithoutPayload), comparator);\n    Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n    while (expectedWithoutPayload.hasNext()) {\n      Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n      assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n      assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n      assertNull(wrapperWithoutPayload.payload());\n    }\n    assertNull(wrapperWithoutPayload.next());\n    \n    // test the unsorted iterator wrapper without payloads\n    wrapperWithoutPayload = new UnsortedInputIterator(new InputArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator#testTerms().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator#testTerms().mjava","sourceNew":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>(comparator);\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>(comparator);\n    TreeMap<BytesRef, SimpleEntry<Long, Set<BytesRef>>> sortedWithContext = new TreeMap<>(comparator);\n    TreeMap<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>> sortedWithPayloadAndContext = new TreeMap<>(comparator);\n    Input[] unsorted = new Input[num];\n    Input[] unsortedWithoutPayload = new Input[num];\n    Input[] unsortedWithContexts = new Input[num];\n    Input[] unsortedWithPayloadAndContext = new Input[num];\n    Set<BytesRef> ctxs;\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      ctxs = new HashSet<>();\n      do {\n        key = new BytesRef(TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(TestUtil.randomUnicodeString(random));\n        for(int j = 0; j < atLeast(2); j++) {\n          ctxs.add(new BytesRef(TestUtil.randomUnicodeString(random)));\n        }\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      sortedWithContext.put(key, new SimpleEntry<>(value, ctxs));\n      sortedWithPayloadAndContext.put(key, new SimpleEntry<>(value, new SimpleEntry<>(payload, ctxs)));\n      unsorted[i] = new Input(key, value, payload);\n      unsortedWithoutPayload[i] = new Input(key, value);\n      unsortedWithContexts[i] = new Input(key, value, ctxs);\n      unsortedWithPayloadAndContext[i] = new Input(key, value, payload, ctxs);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapper = new SortedInputIterator(tempDir, \"sorted\", new InputArrayIterator(unsorted), comparator);\n      Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n      while (expected.hasNext()) {\n        Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n        assertEquals(entry.getKey(), wrapper.next());\n        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n        assertEquals(entry.getValue().getValue(), wrapper.payload());\n      }\n      assertNull(wrapper.next());\n    }\n    \n    // test the sorted iterator wrapper with contexts\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapper = new SortedInputIterator(tempDir, \"sorted\", new InputArrayIterator(unsortedWithContexts), comparator);\n      Iterator<Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>>> actualEntries = sortedWithContext.entrySet().iterator();\n      while (actualEntries.hasNext()) {\n        Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>> entry = actualEntries.next();\n        assertEquals(entry.getKey(), wrapper.next());\n        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n        Set<BytesRef> actualCtxs = entry.getValue().getValue();\n        assertEquals(actualCtxs, wrapper.contexts());\n      }\n      assertNull(wrapper.next());\n    }\n\n    // test the sorted iterator wrapper with contexts and payload\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapper = new SortedInputIterator(tempDir, \"sorter\", new InputArrayIterator(unsortedWithPayloadAndContext), comparator);\n      Iterator<Map.Entry<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>>> expectedPayloadContextEntries = sortedWithPayloadAndContext.entrySet().iterator();\n      while (expectedPayloadContextEntries.hasNext()) {\n        Map.Entry<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>> entry = expectedPayloadContextEntries.next();\n        assertEquals(entry.getKey(), wrapper.next());\n        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n        Set<BytesRef> actualCtxs = entry.getValue().getValue().getValue();\n        assertEquals(actualCtxs, wrapper.contexts());\n        BytesRef actualPayload = entry.getValue().getValue().getKey();\n        assertEquals(actualPayload, wrapper.payload());\n      }\n      assertNull(wrapper.next());\n    }\n\n    // test the unsorted iterator wrapper with payloads\n    InputIterator wrapper = new UnsortedInputIterator(new InputArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapperWithoutPayload = new SortedInputIterator(tempDir, \"sorted\", new InputArrayIterator(unsortedWithoutPayload), comparator);\n      Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n      while (expectedWithoutPayload.hasNext()) {\n        Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n        assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n        assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n        assertNull(wrapperWithoutPayload.payload());\n      }\n      assertNull(wrapperWithoutPayload.next());\n    }\n    \n    // test the unsorted iterator wrapper without payloads\n    InputIterator wrapperWithoutPayload = new UnsortedInputIterator(new InputArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","sourceOld":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>(comparator);\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>(comparator);\n    TreeMap<BytesRef, SimpleEntry<Long, Set<BytesRef>>> sortedWithContext = new TreeMap<>(comparator);\n    TreeMap<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>> sortedWithPayloadAndContext = new TreeMap<>(comparator);\n    Input[] unsorted = new Input[num];\n    Input[] unsortedWithoutPayload = new Input[num];\n    Input[] unsortedWithContexts = new Input[num];\n    Input[] unsortedWithPayloadAndContext = new Input[num];\n    Set<BytesRef> ctxs;\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      ctxs = new HashSet<>();\n      do {\n        key = new BytesRef(TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(TestUtil.randomUnicodeString(random));\n        for(int j = 0; j < atLeast(2); j++) {\n          ctxs.add(new BytesRef(TestUtil.randomUnicodeString(random)));\n        }\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      sortedWithContext.put(key, new SimpleEntry<>(value, ctxs));\n      sortedWithPayloadAndContext.put(key, new SimpleEntry<>(value, new SimpleEntry<>(payload, ctxs)));\n      unsorted[i] = new Input(key, value, payload);\n      unsortedWithoutPayload[i] = new Input(key, value);\n      unsortedWithContexts[i] = new Input(key, value, ctxs);\n      unsortedWithPayloadAndContext[i] = new Input(key, value, payload, ctxs);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    InputIterator wrapper = new SortedInputIterator(new InputArrayIterator(unsorted), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n    while (expected.hasNext()) {\n      Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      assertEquals(entry.getValue().getValue(), wrapper.payload());\n    }\n    assertNull(wrapper.next());\n    \n    // test the sorted iterator wrapper with contexts\n    wrapper = new SortedInputIterator(new InputArrayIterator(unsortedWithContexts), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>>> actualEntries = sortedWithContext.entrySet().iterator();\n    while (actualEntries.hasNext()) {\n      Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>> entry = actualEntries.next();\n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      Set<BytesRef> actualCtxs = entry.getValue().getValue();\n      assertEquals(actualCtxs, wrapper.contexts());\n    }\n    assertNull(wrapper.next());\n    \n    // test the sorted iterator wrapper with contexts and payload\n    wrapper = new SortedInputIterator(new InputArrayIterator(unsortedWithPayloadAndContext), comparator);\n    Iterator<Map.Entry<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>>> expectedPayloadContextEntries = sortedWithPayloadAndContext.entrySet().iterator();\n    while (expectedPayloadContextEntries.hasNext()) {\n      Map.Entry<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>> entry = expectedPayloadContextEntries.next();\n      assertEquals(entry.getKey(), wrapper.next());\n      assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n      Set<BytesRef> actualCtxs = entry.getValue().getValue().getValue();\n      assertEquals(actualCtxs, wrapper.contexts());\n      BytesRef actualPayload = entry.getValue().getValue().getKey();\n      assertEquals(actualPayload, wrapper.payload());\n    }\n    assertNull(wrapper.next());\n    \n    // test the unsorted iterator wrapper with payloads\n    wrapper = new UnsortedInputIterator(new InputArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    InputIterator wrapperWithoutPayload = new SortedInputIterator(new InputArrayIterator(unsortedWithoutPayload), comparator);\n    Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n    while (expectedWithoutPayload.hasNext()) {\n      Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n      assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n      assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n      assertNull(wrapperWithoutPayload.payload());\n    }\n    assertNull(wrapperWithoutPayload.next());\n    \n    // test the unsorted iterator wrapper without payloads\n    wrapperWithoutPayload = new UnsortedInputIterator(new InputArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b51ee14e04858fe1f47f241ac29486de23b215b5","date":1456734355,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator#testTerms().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator#testTerms().mjava","sourceNew":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>();\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>();\n    TreeMap<BytesRef, SimpleEntry<Long, Set<BytesRef>>> sortedWithContext = new TreeMap<>();\n    TreeMap<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>> sortedWithPayloadAndContext = new TreeMap<>();\n    Input[] unsorted = new Input[num];\n    Input[] unsortedWithoutPayload = new Input[num];\n    Input[] unsortedWithContexts = new Input[num];\n    Input[] unsortedWithPayloadAndContext = new Input[num];\n    Set<BytesRef> ctxs;\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      ctxs = new HashSet<>();\n      do {\n        key = new BytesRef(TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(TestUtil.randomUnicodeString(random));\n        for(int j = 0; j < atLeast(2); j++) {\n          ctxs.add(new BytesRef(TestUtil.randomUnicodeString(random)));\n        }\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      sortedWithContext.put(key, new SimpleEntry<>(value, ctxs));\n      sortedWithPayloadAndContext.put(key, new SimpleEntry<>(value, new SimpleEntry<>(payload, ctxs)));\n      unsorted[i] = new Input(key, value, payload);\n      unsortedWithoutPayload[i] = new Input(key, value);\n      unsortedWithContexts[i] = new Input(key, value, ctxs);\n      unsortedWithPayloadAndContext[i] = new Input(key, value, payload, ctxs);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapper = new SortedInputIterator(tempDir, \"sorted\", new InputArrayIterator(unsorted));\n      Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n      while (expected.hasNext()) {\n        Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n        assertEquals(entry.getKey(), wrapper.next());\n        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n        assertEquals(entry.getValue().getValue(), wrapper.payload());\n      }\n      assertNull(wrapper.next());\n    }\n    \n    // test the sorted iterator wrapper with contexts\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapper = new SortedInputIterator(tempDir, \"sorted\", new InputArrayIterator(unsortedWithContexts));\n      Iterator<Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>>> actualEntries = sortedWithContext.entrySet().iterator();\n      while (actualEntries.hasNext()) {\n        Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>> entry = actualEntries.next();\n        assertEquals(entry.getKey(), wrapper.next());\n        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n        Set<BytesRef> actualCtxs = entry.getValue().getValue();\n        assertEquals(actualCtxs, wrapper.contexts());\n      }\n      assertNull(wrapper.next());\n    }\n\n    // test the sorted iterator wrapper with contexts and payload\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapper = new SortedInputIterator(tempDir, \"sorter\", new InputArrayIterator(unsortedWithPayloadAndContext));\n      Iterator<Map.Entry<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>>> expectedPayloadContextEntries = sortedWithPayloadAndContext.entrySet().iterator();\n      while (expectedPayloadContextEntries.hasNext()) {\n        Map.Entry<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>> entry = expectedPayloadContextEntries.next();\n        assertEquals(entry.getKey(), wrapper.next());\n        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n        Set<BytesRef> actualCtxs = entry.getValue().getValue().getValue();\n        assertEquals(actualCtxs, wrapper.contexts());\n        BytesRef actualPayload = entry.getValue().getValue().getKey();\n        assertEquals(actualPayload, wrapper.payload());\n      }\n      assertNull(wrapper.next());\n    }\n\n    // test the unsorted iterator wrapper with payloads\n    InputIterator wrapper = new UnsortedInputIterator(new InputArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapperWithoutPayload = new SortedInputIterator(tempDir, \"sorted\", new InputArrayIterator(unsortedWithoutPayload));\n      Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n      while (expectedWithoutPayload.hasNext()) {\n        Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n        assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n        assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n        assertNull(wrapperWithoutPayload.payload());\n      }\n      assertNull(wrapperWithoutPayload.next());\n    }\n    \n    // test the unsorted iterator wrapper without payloads\n    InputIterator wrapperWithoutPayload = new UnsortedInputIterator(new InputArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","sourceOld":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>(comparator);\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>(comparator);\n    TreeMap<BytesRef, SimpleEntry<Long, Set<BytesRef>>> sortedWithContext = new TreeMap<>(comparator);\n    TreeMap<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>> sortedWithPayloadAndContext = new TreeMap<>(comparator);\n    Input[] unsorted = new Input[num];\n    Input[] unsortedWithoutPayload = new Input[num];\n    Input[] unsortedWithContexts = new Input[num];\n    Input[] unsortedWithPayloadAndContext = new Input[num];\n    Set<BytesRef> ctxs;\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      ctxs = new HashSet<>();\n      do {\n        key = new BytesRef(TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(TestUtil.randomUnicodeString(random));\n        for(int j = 0; j < atLeast(2); j++) {\n          ctxs.add(new BytesRef(TestUtil.randomUnicodeString(random)));\n        }\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      sortedWithContext.put(key, new SimpleEntry<>(value, ctxs));\n      sortedWithPayloadAndContext.put(key, new SimpleEntry<>(value, new SimpleEntry<>(payload, ctxs)));\n      unsorted[i] = new Input(key, value, payload);\n      unsortedWithoutPayload[i] = new Input(key, value);\n      unsortedWithContexts[i] = new Input(key, value, ctxs);\n      unsortedWithPayloadAndContext[i] = new Input(key, value, payload, ctxs);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapper = new SortedInputIterator(tempDir, \"sorted\", new InputArrayIterator(unsorted), comparator);\n      Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n      while (expected.hasNext()) {\n        Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n        assertEquals(entry.getKey(), wrapper.next());\n        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n        assertEquals(entry.getValue().getValue(), wrapper.payload());\n      }\n      assertNull(wrapper.next());\n    }\n    \n    // test the sorted iterator wrapper with contexts\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapper = new SortedInputIterator(tempDir, \"sorted\", new InputArrayIterator(unsortedWithContexts), comparator);\n      Iterator<Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>>> actualEntries = sortedWithContext.entrySet().iterator();\n      while (actualEntries.hasNext()) {\n        Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>> entry = actualEntries.next();\n        assertEquals(entry.getKey(), wrapper.next());\n        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n        Set<BytesRef> actualCtxs = entry.getValue().getValue();\n        assertEquals(actualCtxs, wrapper.contexts());\n      }\n      assertNull(wrapper.next());\n    }\n\n    // test the sorted iterator wrapper with contexts and payload\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapper = new SortedInputIterator(tempDir, \"sorter\", new InputArrayIterator(unsortedWithPayloadAndContext), comparator);\n      Iterator<Map.Entry<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>>> expectedPayloadContextEntries = sortedWithPayloadAndContext.entrySet().iterator();\n      while (expectedPayloadContextEntries.hasNext()) {\n        Map.Entry<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>> entry = expectedPayloadContextEntries.next();\n        assertEquals(entry.getKey(), wrapper.next());\n        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n        Set<BytesRef> actualCtxs = entry.getValue().getValue().getValue();\n        assertEquals(actualCtxs, wrapper.contexts());\n        BytesRef actualPayload = entry.getValue().getValue().getKey();\n        assertEquals(actualPayload, wrapper.payload());\n      }\n      assertNull(wrapper.next());\n    }\n\n    // test the unsorted iterator wrapper with payloads\n    InputIterator wrapper = new UnsortedInputIterator(new InputArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapperWithoutPayload = new SortedInputIterator(tempDir, \"sorted\", new InputArrayIterator(unsortedWithoutPayload), comparator);\n      Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n      while (expectedWithoutPayload.hasNext()) {\n        Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n        assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n        assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n        assertNull(wrapperWithoutPayload.payload());\n      }\n      assertNull(wrapperWithoutPayload.next());\n    }\n    \n    // test the unsorted iterator wrapper without payloads\n    InputIterator wrapperWithoutPayload = new UnsortedInputIterator(new InputArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator#testTerms().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestInputIterator#testTerms().mjava","sourceNew":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>();\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>();\n    TreeMap<BytesRef, SimpleEntry<Long, Set<BytesRef>>> sortedWithContext = new TreeMap<>();\n    TreeMap<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>> sortedWithPayloadAndContext = new TreeMap<>();\n    Input[] unsorted = new Input[num];\n    Input[] unsortedWithoutPayload = new Input[num];\n    Input[] unsortedWithContexts = new Input[num];\n    Input[] unsortedWithPayloadAndContext = new Input[num];\n    Set<BytesRef> ctxs;\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      ctxs = new HashSet<>();\n      do {\n        key = new BytesRef(TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(TestUtil.randomUnicodeString(random));\n        for(int j = 0; j < atLeast(2); j++) {\n          ctxs.add(new BytesRef(TestUtil.randomUnicodeString(random)));\n        }\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      sortedWithContext.put(key, new SimpleEntry<>(value, ctxs));\n      sortedWithPayloadAndContext.put(key, new SimpleEntry<>(value, new SimpleEntry<>(payload, ctxs)));\n      unsorted[i] = new Input(key, value, payload);\n      unsortedWithoutPayload[i] = new Input(key, value);\n      unsortedWithContexts[i] = new Input(key, value, ctxs);\n      unsortedWithPayloadAndContext[i] = new Input(key, value, payload, ctxs);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapper = new SortedInputIterator(tempDir, \"sorted\", new InputArrayIterator(unsorted));\n      Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n      while (expected.hasNext()) {\n        Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n        assertEquals(entry.getKey(), wrapper.next());\n        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n        assertEquals(entry.getValue().getValue(), wrapper.payload());\n      }\n      assertNull(wrapper.next());\n    }\n    \n    // test the sorted iterator wrapper with contexts\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapper = new SortedInputIterator(tempDir, \"sorted\", new InputArrayIterator(unsortedWithContexts));\n      Iterator<Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>>> actualEntries = sortedWithContext.entrySet().iterator();\n      while (actualEntries.hasNext()) {\n        Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>> entry = actualEntries.next();\n        assertEquals(entry.getKey(), wrapper.next());\n        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n        Set<BytesRef> actualCtxs = entry.getValue().getValue();\n        assertEquals(actualCtxs, wrapper.contexts());\n      }\n      assertNull(wrapper.next());\n    }\n\n    // test the sorted iterator wrapper with contexts and payload\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapper = new SortedInputIterator(tempDir, \"sorter\", new InputArrayIterator(unsortedWithPayloadAndContext));\n      Iterator<Map.Entry<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>>> expectedPayloadContextEntries = sortedWithPayloadAndContext.entrySet().iterator();\n      while (expectedPayloadContextEntries.hasNext()) {\n        Map.Entry<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>> entry = expectedPayloadContextEntries.next();\n        assertEquals(entry.getKey(), wrapper.next());\n        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n        Set<BytesRef> actualCtxs = entry.getValue().getValue().getValue();\n        assertEquals(actualCtxs, wrapper.contexts());\n        BytesRef actualPayload = entry.getValue().getValue().getKey();\n        assertEquals(actualPayload, wrapper.payload());\n      }\n      assertNull(wrapper.next());\n    }\n\n    // test the unsorted iterator wrapper with payloads\n    InputIterator wrapper = new UnsortedInputIterator(new InputArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapperWithoutPayload = new SortedInputIterator(tempDir, \"sorted\", new InputArrayIterator(unsortedWithoutPayload));\n      Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n      while (expectedWithoutPayload.hasNext()) {\n        Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n        assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n        assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n        assertNull(wrapperWithoutPayload.payload());\n      }\n      assertNull(wrapperWithoutPayload.next());\n    }\n    \n    // test the unsorted iterator wrapper without payloads\n    InputIterator wrapperWithoutPayload = new UnsortedInputIterator(new InputArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","sourceOld":"  public void testTerms() throws Exception {\n    Random random = random();\n    int num = atLeast(10000);\n    \n    Comparator<BytesRef> comparator = random.nextBoolean() ? BytesRef.getUTF8SortedAsUnicodeComparator() : BytesRef.getUTF8SortedAsUTF16Comparator();\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> sorted = new TreeMap<>(comparator);\n    TreeMap<BytesRef, Long> sortedWithoutPayload = new TreeMap<>(comparator);\n    TreeMap<BytesRef, SimpleEntry<Long, Set<BytesRef>>> sortedWithContext = new TreeMap<>(comparator);\n    TreeMap<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>> sortedWithPayloadAndContext = new TreeMap<>(comparator);\n    Input[] unsorted = new Input[num];\n    Input[] unsortedWithoutPayload = new Input[num];\n    Input[] unsortedWithContexts = new Input[num];\n    Input[] unsortedWithPayloadAndContext = new Input[num];\n    Set<BytesRef> ctxs;\n    for (int i = 0; i < num; i++) {\n      BytesRef key;\n      BytesRef payload;\n      ctxs = new HashSet<>();\n      do {\n        key = new BytesRef(TestUtil.randomUnicodeString(random));\n        payload = new BytesRef(TestUtil.randomUnicodeString(random));\n        for(int j = 0; j < atLeast(2); j++) {\n          ctxs.add(new BytesRef(TestUtil.randomUnicodeString(random)));\n        }\n      } while (sorted.containsKey(key));\n      long value = random.nextLong();\n      sortedWithoutPayload.put(key, value);\n      sorted.put(key, new SimpleEntry<>(value, payload));\n      sortedWithContext.put(key, new SimpleEntry<>(value, ctxs));\n      sortedWithPayloadAndContext.put(key, new SimpleEntry<>(value, new SimpleEntry<>(payload, ctxs)));\n      unsorted[i] = new Input(key, value, payload);\n      unsortedWithoutPayload[i] = new Input(key, value);\n      unsortedWithContexts[i] = new Input(key, value, ctxs);\n      unsortedWithPayloadAndContext[i] = new Input(key, value, payload, ctxs);\n    }\n    \n    // test the sorted iterator wrapper with payloads\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapper = new SortedInputIterator(tempDir, \"sorted\", new InputArrayIterator(unsorted), comparator);\n      Iterator<Map.Entry<BytesRef, SimpleEntry<Long, BytesRef>>> expected = sorted.entrySet().iterator();\n      while (expected.hasNext()) {\n        Map.Entry<BytesRef,SimpleEntry<Long, BytesRef>> entry = expected.next();\n      \n        assertEquals(entry.getKey(), wrapper.next());\n        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n        assertEquals(entry.getValue().getValue(), wrapper.payload());\n      }\n      assertNull(wrapper.next());\n    }\n    \n    // test the sorted iterator wrapper with contexts\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapper = new SortedInputIterator(tempDir, \"sorted\", new InputArrayIterator(unsortedWithContexts), comparator);\n      Iterator<Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>>> actualEntries = sortedWithContext.entrySet().iterator();\n      while (actualEntries.hasNext()) {\n        Map.Entry<BytesRef, SimpleEntry<Long, Set<BytesRef>>> entry = actualEntries.next();\n        assertEquals(entry.getKey(), wrapper.next());\n        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n        Set<BytesRef> actualCtxs = entry.getValue().getValue();\n        assertEquals(actualCtxs, wrapper.contexts());\n      }\n      assertNull(wrapper.next());\n    }\n\n    // test the sorted iterator wrapper with contexts and payload\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapper = new SortedInputIterator(tempDir, \"sorter\", new InputArrayIterator(unsortedWithPayloadAndContext), comparator);\n      Iterator<Map.Entry<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>>> expectedPayloadContextEntries = sortedWithPayloadAndContext.entrySet().iterator();\n      while (expectedPayloadContextEntries.hasNext()) {\n        Map.Entry<BytesRef, SimpleEntry<Long, SimpleEntry<BytesRef, Set<BytesRef>>>> entry = expectedPayloadContextEntries.next();\n        assertEquals(entry.getKey(), wrapper.next());\n        assertEquals(entry.getValue().getKey().longValue(), wrapper.weight());\n        Set<BytesRef> actualCtxs = entry.getValue().getValue().getValue();\n        assertEquals(actualCtxs, wrapper.contexts());\n        BytesRef actualPayload = entry.getValue().getValue().getKey();\n        assertEquals(actualPayload, wrapper.payload());\n      }\n      assertNull(wrapper.next());\n    }\n\n    // test the unsorted iterator wrapper with payloads\n    InputIterator wrapper = new UnsortedInputIterator(new InputArrayIterator(unsorted));\n    TreeMap<BytesRef, SimpleEntry<Long, BytesRef>> actual = new TreeMap<>();\n    BytesRef key;\n    while ((key = wrapper.next()) != null) {\n      long value = wrapper.weight();\n      BytesRef payload = wrapper.payload();\n      actual.put(BytesRef.deepCopyOf(key), new SimpleEntry<>(value, BytesRef.deepCopyOf(payload)));\n    }\n    assertEquals(sorted, actual);\n\n    // test the sorted iterator wrapper without payloads\n    try (Directory tempDir = getDirectory()) {\n      InputIterator wrapperWithoutPayload = new SortedInputIterator(tempDir, \"sorted\", new InputArrayIterator(unsortedWithoutPayload), comparator);\n      Iterator<Map.Entry<BytesRef, Long>> expectedWithoutPayload = sortedWithoutPayload.entrySet().iterator();\n      while (expectedWithoutPayload.hasNext()) {\n        Map.Entry<BytesRef, Long> entry = expectedWithoutPayload.next();\n      \n        assertEquals(entry.getKey(), wrapperWithoutPayload.next());\n        assertEquals(entry.getValue().longValue(), wrapperWithoutPayload.weight());\n        assertNull(wrapperWithoutPayload.payload());\n      }\n      assertNull(wrapperWithoutPayload.next());\n    }\n    \n    // test the unsorted iterator wrapper without payloads\n    InputIterator wrapperWithoutPayload = new UnsortedInputIterator(new InputArrayIterator(unsortedWithoutPayload));\n    TreeMap<BytesRef, Long> actualWithoutPayload = new TreeMap<>();\n    while ((key = wrapperWithoutPayload.next()) != null) {\n      long value = wrapperWithoutPayload.weight();\n      assertNull(wrapperWithoutPayload.payload());\n      actualWithoutPayload.put(BytesRef.deepCopyOf(key), value);\n    }\n    assertEquals(sortedWithoutPayload, actualWithoutPayload);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","9c800a7949e97c8f516697a05d0d9439650e82ab"],"af2638813028b254a88b418ebeafb541afb49653":["867e3d9153fb761456b54a9dcce566e1545c5ef6","b51ee14e04858fe1f47f241ac29486de23b215b5"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["6613659748fe4411a7dcf85266e55db1f95f7315"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6613659748fe4411a7dcf85266e55db1f95f7315":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c800a7949e97c8f516697a05d0d9439650e82ab":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["9c800a7949e97c8f516697a05d0d9439650e82ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["af2638813028b254a88b418ebeafb541afb49653"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["5eb2511ababf862ea11e10761c70ee560cd84510","9c800a7949e97c8f516697a05d0d9439650e82ab"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"9c800a7949e97c8f516697a05d0d9439650e82ab":["5eb2511ababf862ea11e10761c70ee560cd84510","867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["af2638813028b254a88b418ebeafb541afb49653","b51ee14e04858fe1f47f241ac29486de23b215b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}