{"path":"solr/core/src/test/org/apache/solr/CursorPagingTest#buildRandomQuery().mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#buildRandomQuery().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Generates a random query using the fields populated by \n   * {@link #buildRandomDocument}.  Queries will typically be fairly simple, but \n   * won't be so trivial that the scores are completely constant.\n   */\n  public static String buildRandomQuery() {\n    List<String> numericFields = Arrays.asList(\"int\",\"long\",\"float\",\"double\");\n    Collections.shuffle(numericFields, random());\n    if (random().nextBoolean()) {\n      // simple function query across one field.\n      return \"{!func}\" + numericFields.get(0);\n    } else {\n      // several SHOULD clauses on range queries\n      int low = _TestUtil.nextInt(random(),-2379,2);\n      int high = _TestUtil.nextInt(random(),4,5713);\n      return \n        numericFields.get(0) + \":[* TO 0] \" +\n        numericFields.get(1) + \":[0 TO *] \" +\n        numericFields.get(2) + \":[\" + low + \" TO \" + high + \"]\";\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#buildRandomQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#buildRandomQuery().mjava","sourceNew":"  /**\n   * Generates a random query using the fields populated by \n   * {@link #buildRandomDocument}.  Queries will typically be fairly simple, but \n   * won't be so trivial that the scores are completely constant.\n   */\n  public static String buildRandomQuery() {\n    List<String> numericFields = Arrays.asList(\"int\",\"long\",\"float\",\"double\");\n    Collections.shuffle(numericFields, random());\n    if (random().nextBoolean()) {\n      // simple function query across one field.\n      return \"{!func}\" + numericFields.get(0);\n    } else {\n      // several SHOULD clauses on range queries\n      int low = TestUtil.nextInt(random(), -2379, 2);\n      int high = TestUtil.nextInt(random(), 4, 5713);\n      return \n        numericFields.get(0) + \":[* TO 0] \" +\n        numericFields.get(1) + \":[0 TO *] \" +\n        numericFields.get(2) + \":[\" + low + \" TO \" + high + \"]\";\n    }\n  }\n\n","sourceOld":"  /**\n   * Generates a random query using the fields populated by \n   * {@link #buildRandomDocument}.  Queries will typically be fairly simple, but \n   * won't be so trivial that the scores are completely constant.\n   */\n  public static String buildRandomQuery() {\n    List<String> numericFields = Arrays.asList(\"int\",\"long\",\"float\",\"double\");\n    Collections.shuffle(numericFields, random());\n    if (random().nextBoolean()) {\n      // simple function query across one field.\n      return \"{!func}\" + numericFields.get(0);\n    } else {\n      // several SHOULD clauses on range queries\n      int low = _TestUtil.nextInt(random(),-2379,2);\n      int high = _TestUtil.nextInt(random(),4,5713);\n      return \n        numericFields.get(0) + \":[* TO 0] \" +\n        numericFields.get(1) + \":[0 TO *] \" +\n        numericFields.get(2) + \":[\" + low + \" TO \" + high + \"]\";\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}