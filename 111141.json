{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrClient,Path).mjava","commits":[{"id":"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6","date":1423132645,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrClient,Path).mjava","pathOld":"/dev/null","sourceNew":"  private void checkForBackupSuccess(HttpSolrClient client, Path location) throws InterruptedException, IOException {\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus(client);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n    ArrayList<Path> files = Lists.newArrayList(Files.newDirectoryStream(location, \"snapshot*\").iterator());\n\n    assertEquals(Arrays.asList(files).toString(), 1, files.size());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9d32699b9d6d5982ddfd5f25843ae42adf37c22c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d32699b9d6d5982ddfd5f25843ae42adf37c22c","date":1424850267,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrClient,Path).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrClient,Path).mjava","sourceNew":"  private void checkForBackupSuccess(HttpSolrClient client, Path location) throws InterruptedException, IOException {\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus(client);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(location, \"snapshot*\")) {\n      ArrayList<Path> files = Lists.newArrayList(stream.iterator());\n      assertEquals(Arrays.asList(files).toString(), 1, files.size());\n    }\n\n  }\n\n","sourceOld":"  private void checkForBackupSuccess(HttpSolrClient client, Path location) throws InterruptedException, IOException {\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus(client);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n    ArrayList<Path> files = Lists.newArrayList(Files.newDirectoryStream(location, \"snapshot*\").iterator());\n\n    assertEquals(Arrays.asList(files).toString(), 1, files.size());\n\n  }\n\n","bugFix":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrClient,Path).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrClient,Path).mjava","sourceNew":"  private void checkForBackupSuccess(HttpSolrClient client, Path location) throws InterruptedException, IOException {\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus(client);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(location, \"snapshot*\")) {\n      ArrayList<Path> files = Lists.newArrayList(stream.iterator());\n      assertEquals(Arrays.asList(files).toString(), 1, files.size());\n    }\n\n  }\n\n","sourceOld":"  private void checkForBackupSuccess(HttpSolrClient client, Path location) throws InterruptedException, IOException {\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus(client);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n    ArrayList<Path> files = Lists.newArrayList(Files.newDirectoryStream(location, \"snapshot*\").iterator());\n\n    assertEquals(Arrays.asList(files).toString(), 1, files.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrClient,Path).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrClient,Path).mjava","sourceNew":"  private void checkForBackupSuccess(HttpSolrClient client, Path location) throws InterruptedException, IOException {\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus(client, DEFAULT_TEST_COLLECTION_NAME);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(location, \"snapshot*\")) {\n      ArrayList<Path> files = Lists.newArrayList(stream.iterator());\n      assertEquals(Arrays.asList(files).toString(), 1, files.size());\n    }\n\n  }\n\n","sourceOld":"  private void checkForBackupSuccess(HttpSolrClient client, Path location) throws InterruptedException, IOException {\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus(client);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(location, \"snapshot*\")) {\n      ArrayList<Path> files = Lists.newArrayList(stream.iterator());\n      assertEquals(Arrays.asList(files).toString(), 1, files.size());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrClient,Path).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrClient,Path).mjava","sourceNew":"  private void checkForBackupSuccess(HttpSolrClient client, Path location) throws InterruptedException, IOException {\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus(client, DEFAULT_TEST_COLLECTION_NAME);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(location, \"snapshot*\")) {\n      ArrayList<Path> files = Lists.newArrayList(stream.iterator());\n      assertEquals(Arrays.asList(files).toString(), 1, files.size());\n    }\n\n  }\n\n","sourceOld":"  private void checkForBackupSuccess(HttpSolrClient client, Path location) throws InterruptedException, IOException {\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus(client);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(location, \"snapshot*\")) {\n      ArrayList<Path> files = Lists.newArrayList(stream.iterator());\n      assertEquals(Arrays.asList(files).toString(), 1, files.size());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec54bd926c45854b5a1599685b0f7d2bfbfe177f","date":1573838246,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrClient,Path).mjava","sourceNew":null,"sourceOld":"  private void checkForBackupSuccess(HttpSolrClient client, Path location) throws InterruptedException, IOException {\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus(client, DEFAULT_TEST_COLLECTION_NAME);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(location, \"snapshot*\")) {\n      ArrayList<Path> files = Lists.newArrayList(stream.iterator());\n      assertEquals(Arrays.asList(files).toString(), 1, files.size());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6","9d32699b9d6d5982ddfd5f25843ae42adf37c22c"],"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["9d32699b9d6d5982ddfd5f25843ae42adf37c22c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d32699b9d6d5982ddfd5f25843ae42adf37c22c":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9d32699b9d6d5982ddfd5f25843ae42adf37c22c","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6"],"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9d32699b9d6d5982ddfd5f25843ae42adf37c22c"],"9d32699b9d6d5982ddfd5f25843ae42adf37c22c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}