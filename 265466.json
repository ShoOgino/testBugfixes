{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#concavePolygonHoles(PlanetModel,GeoPolygon,Constraints,Constraints).mjava","commits":[{"id":"1fe6c223f93a8e9b72644987025e2057fdd99a76","date":1511522755,"type":1,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#concavePolygonHoles(PlanetModel,GeoPolygon,Constraints,Constraints).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#concavePolygonHoles(PlanetModel,Constraints,Constraints).mjava","sourceNew":"  /**\n   * Method that returns a random list if concave GeoPolygons under given constraints. Method\n   * use to generate convex holes. Note that constraints for points and holes are different,\n   *\n   * @param planetModel The planet model.\n   * @param polygon The polygon where the holes are within.\n   * @param holeConstraints The given constraints that a hole must comply.\n   * @param pointConstraints The given constraints that a point must comply.\n   * @return The random generated GeoPolygon.\n   */\n  private List<GeoPolygon> concavePolygonHoles(PlanetModel planetModel,\n                                               GeoPolygon polygon,\n                                               Constraints holeConstraints,\n                                               Constraints pointConstraints) {\n    int iterations =0;\n    int holesCount = random().nextInt(3) + 1;\n    List<GeoPolygon> holes = new ArrayList<>();\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      int vertexCount = random().nextInt(3) + 3;\n      List<GeoPoint> geoPoints = points(vertexCount, planetModel, pointConstraints);\n      if (geoPoints.size() < 3){\n        continue;\n      }\n      geoPoints = orderPoints(geoPoints);\n      GeoPolygon inversePolygon  = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints);\n      //The convex polygon must be within\n      if (inversePolygon == null || polygon.getRelationship(inversePolygon) != GeoArea.WITHIN) {\n        continue;\n      }\n      //make it concave\n      Collections.reverse(geoPoints);\n      try {\n        GeoPolygon hole = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints);\n        if (!holeConstraints.valid(hole) || isConvex(planetModel, hole)) {\n          continue;\n        }\n        holes.add(hole);\n        if (holes.size() == holesCount){\n          return holes;\n        }\n        pointConstraints.put(hole, GeoArea.DISJOINT);\n      } catch (IllegalArgumentException e) {\n        continue;\n      }\n    }\n    return holes;\n  }\n\n","sourceOld":"  /**\n   * Method that returns a random list if concave GeoPolygons under given constraints. Method\n   * use to generate convex holes. Note that constraints for points and holes are different,\n   *\n   * @param planetModel The planet model.\n   * @param holeConstraints The given constraints that a hole must comply.\n   * @param pointConstraints The given constraints that a point must comply.\n   * @return The random generated GeoPolygon.\n   */\n  private List<GeoPolygon> concavePolygonHoles(PlanetModel planetModel,\n                                               Constraints holeConstraints,\n                                               Constraints pointConstraints) {\n    int iterations =0;\n    int holesCount = random().nextInt(3) + 1;\n    List<GeoPolygon> holes = new ArrayList<>();\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      int vertexCount = random().nextInt(3) + 3;\n      List<GeoPoint> geoPoints = points(vertexCount, planetModel, pointConstraints);\n      geoPoints = orderPoints(geoPoints);\n      Collections.reverse(geoPoints);\n      try {\n        GeoPolygon hole = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints);\n        if (!holeConstraints.valid(hole) || isConvex(planetModel, hole)) {\n          continue;\n        }\n        holes.add(hole);\n        if (holes.size() == holesCount){\n          return holes;\n        }\n        pointConstraints.put(hole, GeoArea.DISJOINT);\n      } catch (IllegalArgumentException e) {\n        continue;\n      }\n    }\n    return holes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1fe6c223f93a8e9b72644987025e2057fdd99a76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1fe6c223f93a8e9b72644987025e2057fdd99a76"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1fe6c223f93a8e9b72644987025e2057fdd99a76"],"1fe6c223f93a8e9b72644987025e2057fdd99a76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}