{"path":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","pathOld":"solr/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","sourceNew":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  @Test\n  public void testDynamicCopy() \n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    \n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","sourceOld":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  @Test\n  public void testDynamicCopy() \n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    \n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","pathOld":"solr/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","sourceNew":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  @Test\n  public void testDynamicCopy() \n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    \n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","sourceOld":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  @Test\n  public void testDynamicCopy() \n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    \n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","pathOld":"solr/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","sourceNew":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  @Test\n  public void testDynamicCopy() \n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    \n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","sourceOld":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  @Test\n  public void testDynamicCopy() \n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    \n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","sourceNew":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  @Test\n  public void testDynamicCopy()\n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","sourceOld":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  @Test\n  public void testDynamicCopy() \n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    \n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","sourceNew":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  @Test\n  public void testDynamicCopy()\n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","sourceOld":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  @Test\n  public void testDynamicCopy()\n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","sourceNew":"  /**\n   * This test assumes the schema includes:\n   * &lt;dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/&gt;\n   * &lt;dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/&gt;\n   */\n  @Test\n  public void testDynamicCopy()\n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","sourceOld":"  /**\n   * This test assumes the schema includes:\n   * <dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   * <dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n   */\n  @Test\n  public void testDynamicCopy()\n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","bugFix":["80da508d266be0277931540f4d8f7905b54e7432"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","sourceNew":"  /**\n   * This test assumes the schema includes:\n   * &lt;dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/&gt;\n   * &lt;dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/&gt;\n   */\n  @Test\n  public void testDynamicCopy()\n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","sourceOld":"  /**\n   * This test assumes the schema includes:\n   * &lt;dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/&gt;\n   * &lt;dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/&gt;\n   */\n  @Test\n  public void testDynamicCopy()\n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","sourceNew":"  /**\n   * This test assumes the schema includes:\n   * &lt;dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/&gt;\n   * &lt;dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/&gt;\n   */\n  @Test\n  public void testDynamicCopy()\n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","sourceOld":"  /**\n   * This test assumes the schema includes:\n   * &lt;dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/&gt;\n   * &lt;dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/&gt;\n   */\n  @Test\n  public void testDynamicCopy()\n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testDynamicCopy().mjava","sourceNew":"  /**\n   * This test assumes the schema includes:\n   * &lt;dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/&gt;\n   * &lt;dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/&gt;\n   */\n  @Test\n  public void testDynamicCopy()\n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","sourceOld":"  /**\n   * This test assumes the schema includes:\n   * &lt;dynamicField name=\"dynamic_*\" type=\"string\" indexed=\"true\" stored=\"true\"/&gt;\n   * &lt;dynamicField name=\"*_dynamic\" type=\"string\" indexed=\"true\" stored=\"true\"/&gt;\n   */\n  @Test\n  public void testDynamicCopy()\n  {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"aaa_dynamic\", \"aaa\"));\n    assertU(commit());\n\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n\n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"aaa_dynamic:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic source\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n\n    args = new HashMap<>();\n    args.put( CommonParams.Q, \"dynamic_aaa:aaa\" );\n    args.put( \"indent\", \"true\" );\n    req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"dynamic destination\", req\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            );\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2f49143da0a5d278a72f741432047fcfa6da996e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"2f49143da0a5d278a72f741432047fcfa6da996e":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"28288370235ed02234a64753cdbf0c6ec096304a":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["2f49143da0a5d278a72f741432047fcfa6da996e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2f49143da0a5d278a72f741432047fcfa6da996e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}