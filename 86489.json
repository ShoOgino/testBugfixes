{"path":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","pathOld":"modules/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<String>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","sourceOld":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<String>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<String>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","sourceOld":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<String>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<String>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","sourceOld":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<String>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<String>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","sourceOld":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<String>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<String>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","sourceOld":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<String>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","sourceOld":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<String>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), StandardCharsets.US_ASCII));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","sourceOld":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), StandardCharsets.US_ASCII));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","sourceOld":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8","date":1528751370,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private void getIANARootZoneDatabase() throws IOException {\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    try (BufferedReader reader = new BufferedReader(new InputStreamReader\n        (connection.getInputStream(), StandardCharsets.US_ASCII))) {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          // System.out.println(\"Found: \" + matcher.group(1).toLowerCase(Locale.ROOT));\n          processedTLDsLongestFirst.put(matcher.group(1).toLowerCase(Locale.ROOT), Boolean.FALSE);\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            // System.out.println(\"Found: \" + matcher.group(1).toLowerCase(Locale.ROOT));\n            processedTLDsLongestFirst.put(matcher.group(1).toLowerCase(Locale.ROOT), Boolean.FALSE);\n          }\n        }\n      }\n    }\n    System.out.println(\"Found \" + processedTLDsLongestFirst.size() + \" TLDs in IANA Root Zone Database at \" + tldFileURL);\n  }\n\n","sourceOld":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), StandardCharsets.US_ASCII));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private void getIANARootZoneDatabase() throws IOException {\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    try (BufferedReader reader = new BufferedReader(new InputStreamReader\n        (connection.getInputStream(), StandardCharsets.US_ASCII))) {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          // System.out.println(\"Found: \" + matcher.group(1).toLowerCase(Locale.ROOT));\n          processedTLDsLongestFirst.put(matcher.group(1).toLowerCase(Locale.ROOT), Boolean.FALSE);\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            // System.out.println(\"Found: \" + matcher.group(1).toLowerCase(Locale.ROOT));\n            processedTLDsLongestFirst.put(matcher.group(1).toLowerCase(Locale.ROOT), Boolean.FALSE);\n          }\n        }\n      }\n    }\n    System.out.println(\"Found \" + processedTLDsLongestFirst.size() + \" TLDs in IANA Root Zone Database at \" + tldFileURL);\n  }\n\n","sourceOld":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), StandardCharsets.US_ASCII));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","pathOld":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private void getIANARootZoneDatabase() throws IOException {\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    try (BufferedReader reader = new BufferedReader(new InputStreamReader\n        (connection.getInputStream(), StandardCharsets.US_ASCII))) {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          // System.out.println(\"Found: \" + matcher.group(1).toLowerCase(Locale.ROOT));\n          processedTLDsLongestFirst.put(matcher.group(1).toLowerCase(Locale.ROOT), Boolean.FALSE);\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            // System.out.println(\"Found: \" + matcher.group(1).toLowerCase(Locale.ROOT));\n            processedTLDsLongestFirst.put(matcher.group(1).toLowerCase(Locale.ROOT), Boolean.FALSE);\n          }\n        }\n      }\n    }\n    System.out.println(\"Found \" + processedTLDsLongestFirst.size() + \" TLDs in IANA Root Zone Database at \" + tldFileURL);\n  }\n\n","sourceOld":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), StandardCharsets.US_ASCII));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.ROOT));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8":["7d89d7e4e5101347833eea558851bf4209218619"],"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7d89d7e4e5101347833eea558851bf4209218619"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2acf500f78aa12b92e371fd89c719291986b6b90"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"7d89d7e4e5101347833eea558851bf4209218619":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["7d89d7e4e5101347833eea558851bf4209218619","2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["7d89d7e4e5101347833eea558851bf4209218619","2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8"]},"commit2Childs":{"2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7d89d7e4e5101347833eea558851bf4209218619":["2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8","5eb2511ababf862ea11e10761c70ee560cd84510","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","46d8ada1fff8d18cb197c38c7983225162599948","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}