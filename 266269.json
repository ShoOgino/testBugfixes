{"path":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntConversionAndOrdering().mjava","commits":[{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntConversionAndOrdering().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntConversionAndOrdering().mjava","sourceNew":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRefBuilder act = new BytesRefBuilder();\n    BytesRefBuilder last = new BytesRefBuilder();\n    for (int i=-100000; i<100000; i++) {\n      LegacyNumericUtils.intToPrefixCodedBytes(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, LegacyNumericUtils.prefixCodedToInt(act.get()));\n      // next step\n      last.copyBytes(act.get());\n    }\n  }\n\n","sourceOld":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRefBuilder act = new BytesRefBuilder();\n    BytesRefBuilder last = new BytesRefBuilder();\n    for (int i=-100000; i<100000; i++) {\n      NumericUtils.intToPrefixCodedBytes(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, NumericUtils.prefixCodedToInt(act.get()));\n      // next step\n      last.copyBytes(act.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","date":1455407361,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntConversionAndOrdering().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntConversionAndOrdering().mjava","sourceNew":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRefBuilder act = new BytesRefBuilder();\n    BytesRefBuilder last = new BytesRefBuilder();\n    for (int i=-100000; i<100000; i++) {\n      LegacyNumericUtils.intToPrefixCoded(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, LegacyNumericUtils.prefixCodedToInt(act.get()));\n      // next step\n      last.copyBytes(act.get());\n    }\n  }\n\n","sourceOld":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRefBuilder act = new BytesRefBuilder();\n    BytesRefBuilder last = new BytesRefBuilder();\n    for (int i=-100000; i<100000; i++) {\n      LegacyNumericUtils.intToPrefixCodedBytes(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, LegacyNumericUtils.prefixCodedToInt(act.get()));\n      // next step\n      last.copyBytes(act.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testIntConversionAndOrdering().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntConversionAndOrdering().mjava","sourceNew":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRefBuilder act = new BytesRefBuilder();\n    BytesRefBuilder last = new BytesRefBuilder();\n    for (int i=-100000; i<100000; i++) {\n      LegacyNumericUtils.intToPrefixCoded(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, LegacyNumericUtils.prefixCodedToInt(act.get()));\n      // next step\n      last.copyBytes(act.get());\n    }\n  }\n\n","sourceOld":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRefBuilder act = new BytesRefBuilder();\n    BytesRefBuilder last = new BytesRefBuilder();\n    for (int i=-100000; i<100000; i++) {\n      LegacyNumericUtils.intToPrefixCoded(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, LegacyNumericUtils.prefixCodedToInt(act.get()));\n      // next step\n      last.copyBytes(act.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testIntConversionAndOrdering().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntConversionAndOrdering().mjava","sourceNew":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRefBuilder act = new BytesRefBuilder();\n    BytesRefBuilder last = new BytesRefBuilder();\n    for (int i=-100000; i<100000; i++) {\n      LegacyNumericUtils.intToPrefixCoded(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, LegacyNumericUtils.prefixCodedToInt(act.get()));\n      // next step\n      last.copyBytes(act.get());\n    }\n  }\n\n","sourceOld":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRefBuilder act = new BytesRefBuilder();\n    BytesRefBuilder last = new BytesRefBuilder();\n    for (int i=-100000; i<100000; i++) {\n      LegacyNumericUtils.intToPrefixCoded(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, LegacyNumericUtils.prefixCodedToInt(act.get()));\n      // next step\n      last.copyBytes(act.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testIntConversionAndOrdering().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntConversionAndOrdering().mjava","sourceNew":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRefBuilder act = new BytesRefBuilder();\n    BytesRefBuilder last = new BytesRefBuilder();\n    for (int i=-100000; i<100000; i++) {\n      LegacyNumericUtils.intToPrefixCoded(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, LegacyNumericUtils.prefixCodedToInt(act.get()));\n      // next step\n      last.copyBytes(act.get());\n    }\n  }\n\n","sourceOld":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRefBuilder act = new BytesRefBuilder();\n    BytesRefBuilder last = new BytesRefBuilder();\n    for (int i=-100000; i<100000; i++) {\n      LegacyNumericUtils.intToPrefixCoded(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, LegacyNumericUtils.prefixCodedToInt(act.get()));\n      // next step\n      last.copyBytes(act.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testIntConversionAndOrdering().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntConversionAndOrdering().mjava","sourceNew":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRefBuilder act = new BytesRefBuilder();\n    BytesRefBuilder last = new BytesRefBuilder();\n    for (int i=-100000; i<100000; i++) {\n      LegacyNumericUtils.intToPrefixCoded(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, LegacyNumericUtils.prefixCodedToInt(act.get()));\n      // next step\n      last.copyBytes(act.get());\n    }\n  }\n\n","sourceOld":"  public void testIntConversionAndOrdering() throws Exception {\n    // generate a series of encoded ints, each numerical one bigger than the one before\n    BytesRefBuilder act = new BytesRefBuilder();\n    BytesRefBuilder last = new BytesRefBuilder();\n    for (int i=-100000; i<100000; i++) {\n      LegacyNumericUtils.intToPrefixCoded(i, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same int\", i, LegacyNumericUtils.prefixCodedToInt(act.get()));\n      // next step\n      last.copyBytes(act.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770342641f7b505eaa8dccdc666158bff2419109"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}