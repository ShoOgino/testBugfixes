{"path":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#ensureCapacity(long).mjava","commits":[{"id":"747628bb19a950ac2141b16756bdce9a47e94cc2","date":1338661284,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#ensureCapacity(long).mjava","pathOld":"/dev/null","sourceNew":"  private void ensureCapacity(long value) {\n    assert value >= 0;\n    if (value <= currentMaxValue) {\n      return;\n    }\n    final int bitsRequired = PackedInts.bitsRequired(value);\n    final int valueCount = size();\n    PackedInts.Mutable next = PackedInts.getMutable(valueCount, bitsRequired, acceptableOverheadRatio);\n    PackedInts.copy(current, 0, next, 0, valueCount, PackedInts.DEFAULT_BUFFER_SIZE);\n    current = next;\n    currentMaxValue = PackedInts.maxValue(current.getBitsPerValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#ensureCapacity(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#ensureCapacity(long).mjava","sourceNew":"  private void ensureCapacity(long value) {\n    if ((value & currentMask) == value) {\n      return;\n    }\n    final int bitsRequired = value < 0 ? 64 : PackedInts.bitsRequired(value);\n    assert bitsRequired > current.getBitsPerValue();\n    final int valueCount = size();\n    PackedInts.Mutable next = PackedInts.getMutable(valueCount, bitsRequired, acceptableOverheadRatio);\n    PackedInts.copy(current, 0, next, 0, valueCount, PackedInts.DEFAULT_BUFFER_SIZE);\n    current = next;\n    currentMask = mask(current.getBitsPerValue());\n  }\n\n","sourceOld":"  private void ensureCapacity(long value) {\n    assert value >= 0;\n    if (value <= currentMaxValue) {\n      return;\n    }\n    final int bitsRequired = PackedInts.bitsRequired(value);\n    final int valueCount = size();\n    PackedInts.Mutable next = PackedInts.getMutable(valueCount, bitsRequired, acceptableOverheadRatio);\n    PackedInts.copy(current, 0, next, 0, valueCount, PackedInts.DEFAULT_BUFFER_SIZE);\n    current = next;\n    currentMaxValue = PackedInts.maxValue(current.getBitsPerValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#ensureCapacity(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#ensureCapacity(long).mjava","sourceNew":"  private void ensureCapacity(long value) {\n    if ((value & currentMask) == value) {\n      return;\n    }\n    final int bitsRequired = value < 0 ? 64 : PackedInts.bitsRequired(value);\n    assert bitsRequired > current.getBitsPerValue();\n    final int valueCount = size();\n    PackedInts.Mutable next = PackedInts.getMutable(valueCount, bitsRequired, acceptableOverheadRatio);\n    PackedInts.copy(current, 0, next, 0, valueCount, PackedInts.DEFAULT_BUFFER_SIZE);\n    current = next;\n    currentMask = mask(current.getBitsPerValue());\n  }\n\n","sourceOld":"  private void ensureCapacity(long value) {\n    assert value >= 0;\n    if (value <= currentMaxValue) {\n      return;\n    }\n    final int bitsRequired = PackedInts.bitsRequired(value);\n    final int valueCount = size();\n    PackedInts.Mutable next = PackedInts.getMutable(valueCount, bitsRequired, acceptableOverheadRatio);\n    PackedInts.copy(current, 0, next, 0, valueCount, PackedInts.DEFAULT_BUFFER_SIZE);\n    current = next;\n    currentMaxValue = PackedInts.maxValue(current.getBitsPerValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff0cb4eabd8bb5c27d3a284e18c812a89958a66","date":1402928522,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#ensureCapacity(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#ensureCapacity(long).mjava","sourceNew":"  private void ensureCapacity(long value) {\n    if ((value & currentMask) == value) {\n      return;\n    }\n    final int bitsRequired = PackedInts.unsignedBitsRequired(value);\n    assert bitsRequired > current.getBitsPerValue();\n    final int valueCount = size();\n    PackedInts.Mutable next = PackedInts.getMutable(valueCount, bitsRequired, acceptableOverheadRatio);\n    PackedInts.copy(current, 0, next, 0, valueCount, PackedInts.DEFAULT_BUFFER_SIZE);\n    current = next;\n    currentMask = mask(current.getBitsPerValue());\n  }\n\n","sourceOld":"  private void ensureCapacity(long value) {\n    if ((value & currentMask) == value) {\n      return;\n    }\n    final int bitsRequired = value < 0 ? 64 : PackedInts.bitsRequired(value);\n    assert bitsRequired > current.getBitsPerValue();\n    final int valueCount = size();\n    PackedInts.Mutable next = PackedInts.getMutable(valueCount, bitsRequired, acceptableOverheadRatio);\n    PackedInts.copy(current, 0, next, 0, valueCount, PackedInts.DEFAULT_BUFFER_SIZE);\n    current = next;\n    currentMask = mask(current.getBitsPerValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#ensureCapacity(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#ensureCapacity(long).mjava","sourceNew":"  private void ensureCapacity(long value) {\n    if ((value & currentMask) == value) {\n      return;\n    }\n    final int bitsRequired = PackedInts.unsignedBitsRequired(value);\n    assert bitsRequired > current.getBitsPerValue();\n    final int valueCount = size();\n    PackedInts.Mutable next = PackedInts.getMutable(valueCount, bitsRequired, acceptableOverheadRatio);\n    PackedInts.copy(current, 0, next, 0, valueCount, PackedInts.DEFAULT_BUFFER_SIZE);\n    current = next;\n    currentMask = mask(current.getBitsPerValue());\n  }\n\n","sourceOld":"  private void ensureCapacity(long value) {\n    if ((value & currentMask) == value) {\n      return;\n    }\n    final int bitsRequired = value < 0 ? 64 : PackedInts.bitsRequired(value);\n    assert bitsRequired > current.getBitsPerValue();\n    final int valueCount = size();\n    PackedInts.Mutable next = PackedInts.getMutable(valueCount, bitsRequired, acceptableOverheadRatio);\n    PackedInts.copy(current, 0, next, 0, valueCount, PackedInts.DEFAULT_BUFFER_SIZE);\n    current = next;\n    currentMask = mask(current.getBitsPerValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["747628bb19a950ac2141b16756bdce9a47e94cc2","59a0020b413d44dd79d85d7a66ed5004265fb453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["59a0020b413d44dd79d85d7a66ed5004265fb453","dff0cb4eabd8bb5c27d3a284e18c812a89958a66"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66"]},"commit2Childs":{"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66","37a0f60745e53927c4c876cfe5b5a58170f0646c","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"747628bb19a950ac2141b16756bdce9a47e94cc2":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}