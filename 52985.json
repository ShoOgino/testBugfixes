{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val, random, percentDocs, maxTF);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(ts);\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newField(field,val, StringField.TYPE_UNSTORED));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val, random, percentDocs, maxTF);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(ts);\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newField(field,val, StringField.TYPE_UNSTORED));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7","date":1328901155,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new RepeatingTokenizer(reader, val, random, percentDocs, maxTF));\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newField(field,val, StringField.TYPE_UNSTORED));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val, random, percentDocs, maxTF);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(ts);\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newField(field,val, StringField.TYPE_UNSTORED));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new RepeatingTokenizer(reader, val, random, percentDocs, maxTF));\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newStringField(field, val, Field.Store.NO));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new RepeatingTokenizer(reader, val, random, percentDocs, maxTF));\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newField(field,val, StringField.TYPE_UNSTORED));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new RepeatingTokenizer(val, random, percentDocs, maxTF));\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newStringField(field, val, Field.Store.NO));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new RepeatingTokenizer(reader, val, random, percentDocs, maxTF));\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newStringField(field, val, Field.Store.NO));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new RepeatingTokenizer(val, random, percentDocs, maxTF));\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newStringField(field, val, Field.Store.NO));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n    writer.shutdown();\n  }\n\n","sourceOld":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new RepeatingTokenizer(val, random, percentDocs, maxTF));\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newStringField(field, val, Field.Store.NO));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new RepeatingTokenizer(val, random, percentDocs, maxTF));\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newStringField(field, val, Field.Store.NO));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(analyzer)\n          .setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(100)\n          .setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n    writer.shutdown();\n  }\n\n","sourceOld":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new RepeatingTokenizer(val, random, percentDocs, maxTF));\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newStringField(field, val, Field.Store.NO));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(100).\n            setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new RepeatingTokenizer(val, random, percentDocs, maxTF));\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newStringField(field, val, Field.Store.NO));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(analyzer)\n          .setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(100)\n          .setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new RepeatingTokenizer(val, random, percentDocs, maxTF));\n      }\n    };\n\n    Document doc = new Document();\n    \n    doc.add(newStringField(field, val, Field.Store.NO));\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(analyzer)\n          .setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(100)\n          .setMergePolicy(newLogMergePolicy(100))\n    );\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["6c2782fe88d18fedf3ef67402c9cb5a41978a8c7"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6c2782fe88d18fedf3ef67402c9cb5a41978a8c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}