{"path":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","commits":[{"id":"059062eb4071e7bbb5a38b6513158f2f87ede135","date":1163808719,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","pathOld":"/dev/null","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    Directory dir = FSDirectory.getDirectory(dirName, false);\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 34, hits.length());\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do another delete & another setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure 2nd delete & 2nd norm \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 33, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 33, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 34, hits.length());\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do another delete & another setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure 2nd delete & 2nd norm \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 33, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 33, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    Directory dir = FSDirectory.getDirectory(dirName, false);\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 34, hits.length());\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do another delete & another setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure 2nd delete & 2nd norm \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 33, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 33, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc9931b60a4b1618b9f7cb9c176883390697b1b","date":1173207152,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 34, hits.length());\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do another delete & another setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure 2nd delete & 2nd norm \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 33, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 33, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 34, hits.length());\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do another delete & another setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure 2nd delete & 2nd norm \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 33, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 33, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 34, hits.length());\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 33, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 33, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.getDirectory(dirName);\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    Hits hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 34, hits.length());\n    Document d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do another delete & another setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure 2nd delete & 2nd norm \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 33, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")));\n    assertEquals(\"wrong number of hits\", 33, hits.length());\n    d = hits.doc(0);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1b736248cf13d8c143d4af78b588926f4151240","date":1254825163,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","pathOld":"/dev/null","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650","date":1254831793,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","sourceNew":null,"sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"712be41a80a289d25186217345860f2ddec4cab8","date":1254838366,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String,boolean).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName, boolean autoCommit) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1b736248cf13d8c143d4af78b588926f4151240":["8b6187898fc4413ccd18229711786550a280383c"],"ddc9931b60a4b1618b9f7cb9c176883390697b1b":["66b12ba4967665216eeb706b58d424c51fb3641a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650":["f1b736248cf13d8c143d4af78b588926f4151240"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"66b12ba4967665216eeb706b58d424c51fb3641a":["059062eb4071e7bbb5a38b6513158f2f87ede135"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["712be41a80a289d25186217345860f2ddec4cab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"712be41a80a289d25186217345860f2ddec4cab8":["a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650"],"8b6187898fc4413ccd18229711786550a280383c":["ddc9931b60a4b1618b9f7cb9c176883390697b1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"059062eb4071e7bbb5a38b6513158f2f87ede135":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f1b736248cf13d8c143d4af78b588926f4151240":["a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650"],"ddc9931b60a4b1618b9f7cb9c176883390697b1b":["8b6187898fc4413ccd18229711786550a280383c"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650":["712be41a80a289d25186217345860f2ddec4cab8"],"66b12ba4967665216eeb706b58d424c51fb3641a":["ddc9931b60a4b1618b9f7cb9c176883390697b1b"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["059062eb4071e7bbb5a38b6513158f2f87ede135"],"712be41a80a289d25186217345860f2ddec4cab8":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"8b6187898fc4413ccd18229711786550a280383c":["f1b736248cf13d8c143d4af78b588926f4151240"],"059062eb4071e7bbb5a38b6513158f2f87ede135":["66b12ba4967665216eeb706b58d424c51fb3641a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}