{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeatLight(LightAutomaton,int,int).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeatLight(LightAutomaton,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public LightAutomaton repeatLight(LightAutomaton a, int min, int max) {\n    if (min > max) {\n      return BasicAutomata.makeEmptyLight();\n    }\n\n    LightAutomaton b;\n    if (min == 0) {\n      b = BasicAutomata.makeEmptyStringLight();\n    } else if (min == 1) {\n      b = new LightAutomaton();\n      b.copy(a);\n    } else {\n      List<LightAutomaton> as = new ArrayList<>();\n      for(int i=0;i<min;i++) {\n        as.add(a);\n      }\n      b = concatenateLight(as);\n    }\n\n    Set<Integer> prevAcceptStates = new HashSet<>(b.getAcceptStates());\n\n    for(int i=min;i<max;i++) {\n      int numStates = b.getNumStates();\n      b.copy(a);\n      for(int s : prevAcceptStates) {\n        b.addEpsilon(s, numStates);\n      }\n      prevAcceptStates.clear();\n      for(int s : a.getAcceptStates()) {\n        prevAcceptStates.add(numStates+s);\n      }\n    }\n\n    b.finish();\n\n    return b;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeatLight(LightAutomaton,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeatLight(LightAutomaton,int,int).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public LightAutomaton repeatLight(LightAutomaton a, int min, int max) {\n    if (min > max) {\n      return BasicAutomata.makeEmptyLight();\n    }\n\n    LightAutomaton b;\n    if (min == 0) {\n      b = BasicAutomata.makeEmptyStringLight();\n    } else if (min == 1) {\n      b = new LightAutomaton();\n      b.copy(a);\n    } else {\n      List<LightAutomaton> as = new ArrayList<>();\n      for(int i=0;i<min;i++) {\n        as.add(a);\n      }\n      b = concatenateLight(as);\n    }\n\n    Set<Integer> prevAcceptStates = new HashSet<>(b.getAcceptStates());\n\n    for(int i=min;i<max;i++) {\n      int numStates = b.getNumStates();\n      b.copy(a);\n      for(int s : prevAcceptStates) {\n        b.addEpsilon(s, numStates);\n      }\n      prevAcceptStates.clear();\n      for(int s : a.getAcceptStates()) {\n        prevAcceptStates.add(numStates+s);\n      }\n    }\n\n    b.finishState();\n\n    return b;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public LightAutomaton repeatLight(LightAutomaton a, int min, int max) {\n    if (min > max) {\n      return BasicAutomata.makeEmptyLight();\n    }\n\n    LightAutomaton b;\n    if (min == 0) {\n      b = BasicAutomata.makeEmptyStringLight();\n    } else if (min == 1) {\n      b = new LightAutomaton();\n      b.copy(a);\n    } else {\n      List<LightAutomaton> as = new ArrayList<>();\n      for(int i=0;i<min;i++) {\n        as.add(a);\n      }\n      b = concatenateLight(as);\n    }\n\n    Set<Integer> prevAcceptStates = new HashSet<>(b.getAcceptStates());\n\n    for(int i=min;i<max;i++) {\n      int numStates = b.getNumStates();\n      b.copy(a);\n      for(int s : prevAcceptStates) {\n        b.addEpsilon(s, numStates);\n      }\n      prevAcceptStates.clear();\n      for(int s : a.getAcceptStates()) {\n        prevAcceptStates.add(numStates+s);\n      }\n    }\n\n    b.finish();\n\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeatLight(LightAutomaton,int,int).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) {\n      return Automata.makeEmpty();\n    }\n\n    Automaton b;\n    if (min == 0) {\n      b = Automata.makeEmptyString();\n    } else if (min == 1) {\n      b = new Automaton();\n      b.copy(a);\n    } else {\n      List<Automaton> as = new ArrayList<>();\n      for(int i=0;i<min;i++) {\n        as.add(a);\n      }\n      b = concatenate(as);\n    }\n\n    Set<Integer> prevAcceptStates = new HashSet<>(b.getAcceptStates());\n\n    for(int i=min;i<max;i++) {\n      int numStates = b.getNumStates();\n      b.copy(a);\n      for(int s : prevAcceptStates) {\n        b.addEpsilon(s, numStates);\n      }\n      prevAcceptStates.clear();\n      for(int s : a.getAcceptStates()) {\n        prevAcceptStates.add(numStates+s);\n      }\n    }\n\n    b.finishState();\n\n    return b;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public LightAutomaton repeatLight(LightAutomaton a, int min, int max) {\n    if (min > max) {\n      return BasicAutomata.makeEmptyLight();\n    }\n\n    LightAutomaton b;\n    if (min == 0) {\n      b = BasicAutomata.makeEmptyStringLight();\n    } else if (min == 1) {\n      b = new LightAutomaton();\n      b.copy(a);\n    } else {\n      List<LightAutomaton> as = new ArrayList<>();\n      for(int i=0;i<min;i++) {\n        as.add(a);\n      }\n      b = concatenateLight(as);\n    }\n\n    Set<Integer> prevAcceptStates = new HashSet<>(b.getAcceptStates());\n\n    for(int i=min;i<max;i++) {\n      int numStates = b.getNumStates();\n      b.copy(a);\n      for(int s : prevAcceptStates) {\n        b.addEpsilon(s, numStates);\n      }\n      prevAcceptStates.clear();\n      for(int s : a.getAcceptStates()) {\n        prevAcceptStates.add(numStates+s);\n      }\n    }\n\n    b.finishState();\n\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}