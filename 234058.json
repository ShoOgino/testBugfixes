{"path":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearOrderedOverlap().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearOrderedOverlap().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearOrderedOverlap().mjava","sourceNew":"  public void testSpanNearOrderedOverlap() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\"),\n                                makeSpanTermQuery(\"t3\") },\n                              slop,\n                              ordered);\n    Spans spans = snq.getSpans(searcher.getIndexReader());\n\n    assertTrue(\"first range\", spans.next());\n    assertEquals(\"first doc\", 11, spans.doc());\n    assertEquals(\"first start\", 0, spans.start());\n    assertEquals(\"first end\", 4, spans.end());\n\n    assertTrue(\"second range\", spans.next());\n    assertEquals(\"second doc\", 11, spans.doc());\n    assertEquals(\"second start\", 2, spans.start());\n    assertEquals(\"second end\", 6, spans.end());\n\n    assertFalse(\"third range\", spans.next());\n  }\n\n","sourceOld":"  public void testSpanNearOrderedOverlap() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\"),\n                                makeSpanTermQuery(\"t3\") },\n                              slop,\n                              ordered);\n    Spans spans = snq.getSpans(searcher.getIndexReader());\n\n    assertTrue(\"first range\", spans.next());\n    assertEquals(\"first doc\", 11, spans.doc());\n    assertEquals(\"first start\", 0, spans.start());\n    assertEquals(\"first end\", 4, spans.end());\n\n    assertTrue(\"second range\", spans.next());\n    assertEquals(\"second doc\", 11, spans.doc());\n    assertEquals(\"second start\", 2, spans.start());\n    assertEquals(\"second end\", 6, spans.end());\n\n    assertFalse(\"third range\", spans.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearOrderedOverlap().mjava","sourceNew":null,"sourceOld":"  public void testSpanNearOrderedOverlap() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\"),\n                                makeSpanTermQuery(\"t3\") },\n                              slop,\n                              ordered);\n    Spans spans = snq.getSpans(searcher.getIndexReader());\n\n    assertTrue(\"first range\", spans.next());\n    assertEquals(\"first doc\", 11, spans.doc());\n    assertEquals(\"first start\", 0, spans.start());\n    assertEquals(\"first end\", 4, spans.end());\n\n    assertTrue(\"second range\", spans.next());\n    assertEquals(\"second doc\", 11, spans.doc());\n    assertEquals(\"second start\", 2, spans.start());\n    assertEquals(\"second end\", 6, spans.end());\n\n    assertFalse(\"third range\", spans.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}