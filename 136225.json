{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetEnumAdvanceIndependently(SortedSetDocValues).mjava","commits":[{"id":"3ef73c510372b59af0c76c1094b374e44ac159d0","date":1422543368,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetEnumAdvanceIndependently(SortedSetDocValues).mjava","pathOld":"/dev/null","sourceNew":"  protected void doTestSortedSetEnumAdvanceIndependently(SortedSetDocValues dv) throws IOException {\n    if (dv.getValueCount() < 2) {\n      return;\n    }\n    List<BytesRef> terms = new ArrayList<>();\n    TermsEnum te = dv.termsEnum();\n    terms.add(BytesRef.deepCopyOf(te.next()));\n    terms.add(BytesRef.deepCopyOf(te.next()));\n\n    // Make sure that calls to next() does not modify the term of the other enum\n    TermsEnum enum1 = dv.termsEnum();\n    TermsEnum enum2 = dv.termsEnum();\n    BytesRefBuilder term1 = new BytesRefBuilder();\n    BytesRefBuilder term2 = new BytesRefBuilder();\n\n    term1.copyBytes(enum1.next());\n    term2.copyBytes(enum2.next());\n    term1.copyBytes(enum1.next());\n\n    assertEquals(term1.get(), enum1.term());\n    assertEquals(term2.get(), enum2.term());\n\n    // Same for seekCeil\n    enum1 = dv.termsEnum();\n    enum2 = dv.termsEnum();\n    term1 = new BytesRefBuilder();\n    term2 = new BytesRefBuilder();\n\n    term2.copyBytes(enum2.next());\n    BytesRefBuilder seekTerm = new BytesRefBuilder();\n    seekTerm.append(terms.get(0));\n    seekTerm.append((byte) 0);\n    enum1.seekCeil(seekTerm.get());\n    term1.copyBytes(enum1.term());\n\n    assertEquals(term1.get(), enum1.term());\n    assertEquals(term2.get(), enum2.term());\n\n    // Same for seekCeil on an exact value\n    enum1 = dv.termsEnum();\n    enum2 = dv.termsEnum();\n    term1 = new BytesRefBuilder();\n    term2 = new BytesRefBuilder();\n\n    term2.copyBytes(enum2.next());\n    enum1.seekCeil(terms.get(1));\n    term1.copyBytes(enum1.term());\n    \n    assertEquals(term1.get(), enum1.term());\n    assertEquals(term2.get(), enum2.term());\n\n    // Same for seekExact\n    enum1 = dv.termsEnum();\n    enum2 = dv.termsEnum();\n    term1 = new BytesRefBuilder();\n    term2 = new BytesRefBuilder();\n\n    term2.copyBytes(enum2.next());\n    final boolean found = enum1.seekExact(terms.get(1));\n    assertTrue(found);\n    term1.copyBytes(enum1.term());\n\n    // Same for seek by ord\n    enum1 = dv.termsEnum();\n    enum2 = dv.termsEnum();\n    term1 = new BytesRefBuilder();\n    term2 = new BytesRefBuilder();\n\n    term2.copyBytes(enum2.next());\n    enum1.seekExact(1);\n    term1.copyBytes(enum1.term());\n\n    assertEquals(term1.get(), enum1.term());\n    assertEquals(term2.get(), enum2.term());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ef73c510372b59af0c76c1094b374e44ac159d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3ef73c510372b59af0c76c1094b374e44ac159d0"]},"commit2Childs":{"3ef73c510372b59af0c76c1094b374e44ac159d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ef73c510372b59af0c76c1094b374e44ac159d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}