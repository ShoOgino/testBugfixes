{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#clusterAssignPropertyTest().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#clusterAssignPropertyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","sourceNew":"  private void clusterAssignPropertyTest() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    }\n  }\n\n","sourceOld":"  private void clusterAssignPropertyTest() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#clusterAssignPropertyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#clusterAssignPropertyTest().mjava","sourceNew":"  private void clusterAssignPropertyTest() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    }\n  }\n\n","sourceOld":"  private void clusterAssignPropertyTest() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"property\", \"preferredLeader\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have seen missing required parameter 'collection' error\",\n            se.getMessage().contains(\"Missing required parameter: collection\"));\n      }\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"preferredLeader\");\n\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.newunique\",\n          \"shardUnique\", \"true\");\n      verifyUniqueAcrossCollection(client, COLLECTION_NAME, \"property.newunique\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"whatever\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown an exception here.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have gotten a specific error message here\",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the \" +\n                \"property be pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n      // Should be able to set non-unique-per-slice values in several places.\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"bogus1\",\n          \"property.value\", \"true\");\n\n      addProperty(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"property.bogus1\",\n          \"property.value\", \"whatever\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"property\", \"bogus1\",\n            \"shardUnique\", \"false\");\n        fail(\"Should have thrown parameter error here\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have caught specific exception \",\n            se.getMessage().contains(\"Balancing properties amongst replicas in a slice requires that the property be \" +\n                \"pre-defined as a unique property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true'\"));\n      }\n\n      // Should have no effect despite the \"shardUnique\" param being set.\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.BALANCESHARDUNIQUE.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"property\", \"property.bogus1\",\n          \"shardUnique\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r1, \"bogus1\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME,\n          c1_s1_r2, \"property.bogus1\", \"whatever\");\n\n      // At this point we've assigned a preferred leader. Make it happen and check that all the nodes that are\n      // leaders _also_ have the preferredLeader property set.\n\n\n      NamedList<Object> res = doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString(),\n          \"collection\", COLLECTION_NAME);\n\n      verifyLeaderAssignment(client, COLLECTION_NAME);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}