{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#BlockPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#BlockPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#BlockPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  public BlockPostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            BlockPostingsWriter.DOC_CODEC,\n                            BlockPostingsWriter.VERSION_START,\n                            BlockPostingsWriter.VERSION_START);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              BlockPostingsWriter.POS_CODEC,\n                              BlockPostingsWriter.VERSION_START,\n                              BlockPostingsWriter.VERSION_START);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                BlockPostingsWriter.PAY_CODEC,\n                                BlockPostingsWriter.VERSION_START,\n                                BlockPostingsWriter.VERSION_START);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockPostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            BlockPostingsWriter.DOC_CODEC,\n                            BlockPostingsWriter.VERSION_START,\n                            BlockPostingsWriter.VERSION_START);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              BlockPostingsWriter.POS_CODEC,\n                              BlockPostingsWriter.VERSION_START,\n                              BlockPostingsWriter.VERSION_START);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                BlockPostingsWriter.PAY_CODEC,\n                                BlockPostingsWriter.VERSION_START,\n                                BlockPostingsWriter.VERSION_START);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2808fd811f853d032fff6b48bb83a4b7b6f48e7","date":1348836593,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#BlockPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#BlockPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  public BlockPostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            BlockPostingsWriter.DOC_CODEC,\n                            BlockPostingsWriter.VERSION_CURRENT,\n                            BlockPostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              BlockPostingsWriter.POS_CODEC,\n                              BlockPostingsWriter.VERSION_CURRENT,\n                              BlockPostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                BlockPostingsWriter.PAY_CODEC,\n                                BlockPostingsWriter.VERSION_CURRENT,\n                                BlockPostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockPostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            BlockPostingsWriter.DOC_CODEC,\n                            BlockPostingsWriter.VERSION_START,\n                            BlockPostingsWriter.VERSION_START);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              BlockPostingsWriter.POS_CODEC,\n                              BlockPostingsWriter.VERSION_START,\n                              BlockPostingsWriter.VERSION_START);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                BlockPostingsWriter.PAY_CODEC,\n                                BlockPostingsWriter.VERSION_START,\n                                BlockPostingsWriter.VERSION_START);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":["e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#BlockPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_CURRENT,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              Lucene41PostingsWriter.POS_CODEC,\n                              Lucene41PostingsWriter.VERSION_CURRENT,\n                              Lucene41PostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                Lucene41PostingsWriter.PAY_CODEC,\n                                Lucene41PostingsWriter.VERSION_CURRENT,\n                                Lucene41PostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockPostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            BlockPostingsWriter.DOC_CODEC,\n                            BlockPostingsWriter.VERSION_CURRENT,\n                            BlockPostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              BlockPostingsWriter.POS_CODEC,\n                              BlockPostingsWriter.VERSION_CURRENT,\n                              BlockPostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                BlockPostingsWriter.PAY_CODEC,\n                                BlockPostingsWriter.VERSION_CURRENT,\n                                BlockPostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#BlockPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_CURRENT,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              Lucene41PostingsWriter.POS_CODEC,\n                              Lucene41PostingsWriter.VERSION_CURRENT,\n                              Lucene41PostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                Lucene41PostingsWriter.PAY_CODEC,\n                                Lucene41PostingsWriter.VERSION_CURRENT,\n                                Lucene41PostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockPostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            BlockPostingsWriter.DOC_CODEC,\n                            BlockPostingsWriter.VERSION_CURRENT,\n                            BlockPostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              BlockPostingsWriter.POS_CODEC,\n                              BlockPostingsWriter.VERSION_CURRENT,\n                              BlockPostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                BlockPostingsWriter.PAY_CODEC,\n                                BlockPostingsWriter.VERSION_CURRENT,\n                                BlockPostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#Lucene41PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#BlockPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            Lucene41PostingsWriter.DOC_CODEC,\n                            Lucene41PostingsWriter.VERSION_CURRENT,\n                            Lucene41PostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              Lucene41PostingsWriter.POS_CODEC,\n                              Lucene41PostingsWriter.VERSION_CURRENT,\n                              Lucene41PostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene41PostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                Lucene41PostingsWriter.PAY_CODEC,\n                                Lucene41PostingsWriter.VERSION_CURRENT,\n                                Lucene41PostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockPostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            BlockPostingsWriter.DOC_CODEC,\n                            BlockPostingsWriter.VERSION_CURRENT,\n                            BlockPostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              BlockPostingsWriter.POS_CODEC,\n                              BlockPostingsWriter.VERSION_CURRENT,\n                              BlockPostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, BlockPostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                BlockPostingsWriter.PAY_CODEC,\n                                BlockPostingsWriter.VERSION_CURRENT,\n                                BlockPostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["c2808fd811f853d032fff6b48bb83a4b7b6f48e7","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c2808fd811f853d032fff6b48bb83a4b7b6f48e7"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["c2808fd811f853d032fff6b48bb83a4b7b6f48e7","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c2808fd811f853d032fff6b48bb83a4b7b6f48e7":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["c2808fd811f853d032fff6b48bb83a4b7b6f48e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"c2808fd811f853d032fff6b48bb83a4b7b6f48e7":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}