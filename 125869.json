{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context, acceptDocs, hasIndexedLeaves) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return results;\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (queryShape.relate(cell.getShape()).intersects())\n          collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context, acceptDocs, hasIndexedLeaves) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new FixedBitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (queryShape.relate(cell.getShape()).intersects())\n          collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context, acceptDocs, hasIndexedLeaves) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return results;\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (queryShape.relate(cell.getShape()).intersects())\n          collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context, acceptDocs, hasIndexedLeaves) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new BitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (queryShape.relate(cell.getShape()).intersects())\n          collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context, acceptDocs, hasIndexedLeaves) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new FixedBitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (queryShape.relate(cell.getShape()).intersects())\n          collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55594c8c43c6898b2092b0f1a1310df52521a44a","date":1421338017,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context, acceptDocs, hasIndexedLeaves) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new BitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context, acceptDocs, hasIndexedLeaves) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new BitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (queryShape.relate(cell.getShape()).intersects())\n          collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4","date":1422887461,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context, acceptDocs) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new BitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context, acceptDocs, hasIndexedLeaves) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new BitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","date":1426015524,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context, acceptDocs) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new BitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visitPrefix(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context, acceptDocs) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new BitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context, acceptDocs) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new BitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visitPrefix(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context, acceptDocs) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new BitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeQuery#getDocIdSet(LeafReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/IntersectsPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  protected DocIdSet getDocIdSet(LeafReaderContext context) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new BitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visitPrefix(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    /* Possible optimizations (in IN ADDITION TO THOSE LISTED IN VISITORTEMPLATE):\n\n    * If docFreq is 1 (or < than some small threshold), then check to see if we've already\n      collected it; if so short-circuit. Don't do this just for point data, as there is\n      no benefit, or only marginal benefit when multi-valued.\n\n    * Point query shape optimization when the only indexed data is a point (no leaves).  Result is a term query.\n\n     */\n    return new VisitorTemplate(context, acceptDocs) {\n      private FixedBitSet results;\n\n      @Override\n      protected void start() {\n        results = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        return new BitDocIdSet(results);\n      }\n\n      @Override\n      protected boolean visitPrefix(Cell cell) throws IOException {\n        if (cell.getShapeRel() == SpatialRelation.WITHIN || cell.getLevel() == detailLevel) {\n          collectDocs(results);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        collectDocs(results);\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"672b198fc3dce868916c727917cae58c2906763d":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80c55596a764e2d397e982828e75fcac5ce430a0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4":["55594c8c43c6898b2092b0f1a1310df52521a44a"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"55594c8c43c6898b2092b0f1a1310df52521a44a":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["672b198fc3dce868916c727917cae58c2906763d"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"672b198fc3dce868916c727917cae58c2906763d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","672b198fc3dce868916c727917cae58c2906763d"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["55594c8c43c6898b2092b0f1a1310df52521a44a"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["80c55596a764e2d397e982828e75fcac5ce430a0"],"55594c8c43c6898b2092b0f1a1310df52521a44a":["c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}