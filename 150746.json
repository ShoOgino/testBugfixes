{"path":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      List<SegmentInfo> segments = new ArrayList<SegmentInfo>(segmentInfos.asList());\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      List<SegmentInfo> segments = new ArrayList<SegmentInfo>(segmentInfos.asList());\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      List<SegmentInfoPerCommit> segments = new ArrayList<SegmentInfoPerCommit>(segmentInfos.asList());\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      List<SegmentInfo> segments = new ArrayList<SegmentInfo>(segmentInfos.asList());\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      List<SegmentInfoPerCommit> segments = new ArrayList<SegmentInfoPerCommit>(segmentInfos.asList());\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      List<SegmentInfo> segments = new ArrayList<SegmentInfo>(segmentInfos.asList());\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12902f5338f8f32630888035a9d5d2ff910f8b07","date":1349718075,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentInfoPerCommit> segments = new ArrayList<SegmentInfoPerCommit>();\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n\n    for(SegmentInfoPerCommit sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      List<SegmentInfoPerCommit> segments = new ArrayList<SegmentInfoPerCommit>(segmentInfos.asList());\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"181b1aa5a99534972fbfd5595cdbb38bba5f39ee","date":1350576187,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentInfoPerCommit> segments = new ArrayList<SegmentInfoPerCommit>();\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n\n    for(SegmentInfoPerCommit sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentInfoPerCommit> segments = new ArrayList<SegmentInfoPerCommit>();\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n\n    for(SegmentInfoPerCommit sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentInfoPerCommit> segments = new ArrayList<SegmentInfoPerCommit>();\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n\n    for(SegmentInfoPerCommit sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    int numSegments = segmentInfos.size();\n\n    List<SegmentInfoPerCommit> segments = new ArrayList<SegmentInfoPerCommit>();\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n\n    for(SegmentInfoPerCommit sipc : segmentInfos) {\n      if (!merging.contains(sipc)) {\n        segments.add(sipc);\n      }\n    }\n\n    numSegments = segments.size();\n\n    if (numSegments > 1 && (numSegments > 30 || random.nextInt(5) == 3)) {\n\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, numSegments);\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9d153abcf92dc5329d98571a8c3035df9bd80648"],"62e52115b56781006682fd92c6938efaf174304d":["12902f5338f8f32630888035a9d5d2ff910f8b07","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["12902f5338f8f32630888035a9d5d2ff910f8b07"],"12902f5338f8f32630888035a9d5d2ff910f8b07":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["181b1aa5a99534972fbfd5595cdbb38bba5f39ee"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["12902f5338f8f32630888035a9d5d2ff910f8b07"],"62e52115b56781006682fd92c6938efaf174304d":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"12902f5338f8f32630888035a9d5d2ff910f8b07":["62e52115b56781006682fd92c6938efaf174304d","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}