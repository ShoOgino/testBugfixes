{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#assertAllBetween(int,int,BufferedUpdates,Integer[]).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#assertAllBetween(int,int,BufferedUpdates,Integer[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#assertAllBetween(int,int,BufferedDeletes,Integer[]).mjava","sourceNew":"  private void assertAllBetween(int start, int end, BufferedUpdates deletes,\n      Integer[] ids) {\n    for (int i = start; i <= end; i++) {\n      assertEquals(Integer.valueOf(end), deletes.terms.get(new Term(\"id\",\n                                                                    ids[i].toString())));\n    }\n  }\n\n","sourceOld":"  private void assertAllBetween(int start, int end, BufferedDeletes deletes,\n      Integer[] ids) {\n    for (int i = start; i <= end; i++) {\n      assertEquals(Integer.valueOf(end), deletes.terms.get(new Term(\"id\",\n                                                                    ids[i].toString())));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#assertAllBetween(int,int,BufferedUpdates,Integer[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#assertAllBetween(int,int,BufferedUpdates,Integer[]).mjava","sourceNew":"  private void assertAllBetween(int start, int end, BufferedUpdates deletes,\n      Integer[] ids) {\n    for (int i = start; i <= end; i++) {\n      assertEquals(Integer.valueOf(end), deletes.deleteTerms.get(new Term(\"id\", ids[i].toString())));\n    }\n  }\n\n","sourceOld":"  private void assertAllBetween(int start, int end, BufferedUpdates deletes,\n      Integer[] ids) {\n    for (int i = start; i <= end; i++) {\n      assertEquals(Integer.valueOf(end), deletes.terms.get(new Term(\"id\",\n                                                                    ids[i].toString())));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#assertAllBetween(int,int,BufferedUpdates,Integer[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#assertAllBetween(int,int,BufferedUpdates,Integer[]).mjava","sourceNew":"  private void assertAllBetween(int start, int end, BufferedUpdates deletes,\n      Integer[] ids) {\n    for (int i = start; i <= end; i++) {\n      assertEquals(Integer.valueOf(end), deletes.deleteTerms.get(new Term(\"id\", ids[i].toString())));\n    }\n  }\n\n","sourceOld":"  private void assertAllBetween(int start, int end, BufferedUpdates deletes,\n      Integer[] ids) {\n    for (int i = start; i <= end; i++) {\n      assertEquals(Integer.valueOf(end), deletes.terms.get(new Term(\"id\",\n                                                                    ids[i].toString())));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#assertAllBetween(int,int,BufferedUpdates,Integer[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#assertAllBetween(int,int,BufferedUpdates,Integer[]).mjava","sourceNew":"  private void assertAllBetween(int start, int end, BufferedUpdates deletes,\n      Integer[] ids) {\n    for (int i = start; i <= end; i++) {\n      assertEquals(Integer.valueOf(end), deletes.deleteTerms.get(new Term(\"id\", ids[i].toString())));\n    }\n  }\n\n","sourceOld":"  private void assertAllBetween(int start, int end, BufferedUpdates deletes,\n      Integer[] ids) {\n    for (int i = start; i <= end; i++) {\n      assertEquals(Integer.valueOf(end), deletes.terms.get(new Term(\"id\",\n                                                                    ids[i].toString())));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}