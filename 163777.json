{"path":"sandbox/contributions/taglib/WEB-INF/classes/com/netwebapps/taglib/search/SearchTag#doSearch().mjava","commits":[{"id":"404007c7b71cffc3eef2d6f3a53019c0a277cf98","date":1052748156,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/taglib/WEB-INF/classes/com/netwebapps/taglib/search/SearchTag#doSearch().mjava","pathOld":"/dev/null","sourceNew":"\tpublic void doSearch() throws JspException{\n        try {\n\t        searcher = new IndexSearcher(IndexReader.open(collection));\n\t\t\tAnalyzer analyzer = new StopAnalyzer();\n\t\t\ttry {\n\t\t\t    query = QueryParser.parse(criteria, \"contents\", analyzer);\n\t\t\t\thits = searcher.search(query);\n\t\t\t\thitCount = new Integer(hits.length()).toString();\n\t\t\t\tHITCOUNT = hits.length();\n\t\t\t\tPAGECOUNT = PAGECOUNT = (int) (( (double) startRow) / maxRows );\n\t\t\t\tpageCount = new Integer(PAGECOUNT).toString();\n\t\t\t\tthispage = maxRows;\n\t\t\t\tif ((startRow + maxRows) > hits.length()) {\n\t\t\t\t        thispage = hits.length() - startRow;\n\t\t\t\t}\n\t\t\t\thitArray = new ArrayList();\n\t\t\t\tfor (int i = startRow; i < (thispage + startRow); i++) {\n\t\t\t\t\thitMap = new HashMap();\n\t\t\t\t\tDocument doc = hits.doc(i);\n\t\t\t\t\thitMap.put(\"score\",new Float(hits.score(i)).toString());\n\t\t\t\t\tfields = doc.fields();\n\t\t\t\t\twhile(fields.hasMoreElements()){\n\t\t\t\t\t\tField field = (Field) fields.nextElement();\n\t\t\t\t\t\tString fieldName = field.name();\n\t\t\t\t\t\thitMap.put(fieldName,doc.get(fieldName));\n\t\t\t\t\t}\n\t\t\t\t\thitArray.add(hitMap);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e){\n\t\t\t\tthrow new JspException(\"An error occurred while parsing the index : \" + e.toString());\n\t\t\t}\n        }\n\t\tcatch (Exception e) {\n\t\t\tthrow new JspException(\"An error occurred while trying to open the search index: \" + e.toString());\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d39b59ab824f3edf714317c825e2b75c27d3a13","date":1053480142,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/taglib/WEB-INF/classes/com/netwebapps/taglib/search/SearchTag#doSearch().mjava","pathOld":"sandbox/contributions/taglib/WEB-INF/classes/com/netwebapps/taglib/search/SearchTag#doSearch().mjava","sourceNew":"\tpublic void doSearch() throws JspException{\n\n\t\ttry {\n\t\t\tsearcher = new IndexSearcher(IndexReader.open(collection));\n\t\t} catch (IOException e) {\n\t\t\tif(throwOnException){\n\t\t\t\tthrow new JspException(\"IndexSearcher(IndexReader.open(collection)): \" + e);\n\t\t\t}\n\t\t\tabort = true;\n\t\t}\n\t\tif(!abort){\n\t\t\tanalyzer = new StopAnalyzer();\n\n\t\t\ttry {\n\t\t\t\tquery = QueryParser.parse(criteria, \"contents\", analyzer);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif(throwOnException){\n\t\t\t\t\tthrow new JspException(\"QueryParser.parse(criteria,contents,analyzer): \" + e);\n\t\t\t\t}\n\t\t\t\tabort = true;\n\t\t\t}\n\t\t\tif(!abort){\n\t\t\t\ttry {\n\t\t\t\t\thits = searcher.search(query);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\tthrow new JspException(\"searcher.search(query): \" + e);\n\t\t\t\t\t}\n\t\t\t\t\tabort = true;\n\t\t\t\t}\n\t\t\n\t\t\t\tif(!abort){\n\t\t\t\t\thitCount = new Integer(hits.length()).toString();\n\t\t\t\t\tHITCOUNT = hits.length();\n\t\t\t\t\tPAGECOUNT = PAGECOUNT = (int) (( (double) startRow) / maxRows );\n\t\t\t\t\tpageCount = new Integer(PAGECOUNT).toString();\n\t\t\t\t\tthispage = maxRows;\n\t\t\t\t\tif ((startRow + maxRows) > hits.length()) {\n\t\t\t\t\t\t\tthispage = hits.length() - startRow;\n\t\t\t\t\t}\n\t\t\t\t\thitArray = new ArrayList();\n\t\t\t\t\tfor (int i = startRow; i < (thispage + startRow); i++) {\n\t\t\t\t\t\thitMap = new HashMap();\n\t\t\t\t\t\tDocument doc = null;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tdoc = hits.doc(i);\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\t\t\tthrow new JspException(\"hits.doc(i) : \" + e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tabort = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!abort){\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\thitMap.put(\"score\",new Float(hits.score(i)).toString());\n\t\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\t\t\t\tthrow new JspException(\"hitMap.put(score,new Float(hits.score(i)).toString()); : \" + e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tabort = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!abort){\n\t\t\t\t\t\t\t\tfields = doc.fields();\n\t\t\t\t\t\t\t\twhile(fields.hasMoreElements()){\n\t\t\t\t\t\t\t\t\tField field = (Field) fields.nextElement();\n\t\t\t\t\t\t\t\t\tString fieldName = field.name();\n\t\t\t\t\t\t\t\t\thitMap.put(fieldName,doc.get(fieldName));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitArray.add(hitMap);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void doSearch() throws JspException{\n        try {\n\t        searcher = new IndexSearcher(IndexReader.open(collection));\n\t\t\tAnalyzer analyzer = new StopAnalyzer();\n\t\t\ttry {\n\t\t\t    query = QueryParser.parse(criteria, \"contents\", analyzer);\n\t\t\t\thits = searcher.search(query);\n\t\t\t\thitCount = new Integer(hits.length()).toString();\n\t\t\t\tHITCOUNT = hits.length();\n\t\t\t\tPAGECOUNT = PAGECOUNT = (int) (( (double) startRow) / maxRows );\n\t\t\t\tpageCount = new Integer(PAGECOUNT).toString();\n\t\t\t\tthispage = maxRows;\n\t\t\t\tif ((startRow + maxRows) > hits.length()) {\n\t\t\t\t        thispage = hits.length() - startRow;\n\t\t\t\t}\n\t\t\t\thitArray = new ArrayList();\n\t\t\t\tfor (int i = startRow; i < (thispage + startRow); i++) {\n\t\t\t\t\thitMap = new HashMap();\n\t\t\t\t\tDocument doc = hits.doc(i);\n\t\t\t\t\thitMap.put(\"score\",new Float(hits.score(i)).toString());\n\t\t\t\t\tfields = doc.fields();\n\t\t\t\t\twhile(fields.hasMoreElements()){\n\t\t\t\t\t\tField field = (Field) fields.nextElement();\n\t\t\t\t\t\tString fieldName = field.name();\n\t\t\t\t\t\thitMap.put(fieldName,doc.get(fieldName));\n\t\t\t\t\t}\n\t\t\t\t\thitArray.add(hitMap);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e){\n\t\t\t\tthrow new JspException(\"An error occurred while parsing the index : \" + e.toString());\n\t\t\t}\n        }\n\t\tcatch (Exception e) {\n\t\t\tthrow new JspException(\"An error occurred while trying to open the search index: \" + e.toString());\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62d0fdff2a149d9e624677cac749c52b42f68ed7","date":1054228819,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/taglib/WEB-INF/classes/com/netwebapps/taglib/search/SearchTag#doSearch().mjava","pathOld":"sandbox/contributions/taglib/WEB-INF/classes/com/netwebapps/taglib/search/SearchTag#doSearch().mjava","sourceNew":"\tpublic void doSearch() throws JspException{\n\n\t\ttry {\n\t\t\tif(idxArray.size() > 0){\n\t\t\t\tIndexSearcher[] idxToArray = new IndexSearcher[idxArray.size()];\n\t\t\t\tIterator idxIter = idxArray.iterator();\n\t\t\t\tint arrayCount = 0;\n\t\t\t\twhile(idxIter.hasNext()){\n\t\t\t\t\tidxToArray[arrayCount++] = (IndexSearcher) idxIter.next();\n\t\t\t\t}\n\t\t\t\tmsearcher = new MultiSearcher(idxToArray);\n\t\t\t}else{\n\t\t\t\tthrow new JspException(\"No collection has been specified\");\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tif(throwOnException){\n\t\t\t\tthrow new JspException(\"IndexSearcher(IndexReader.open(collection)): \" + e);\n\t\t\t}\n\t\t\tabort = true;\n\t\t}\n\t\tif(!abort){\n\t\t\t// choosing the type of analyzer to use in this search\n\t\t\tswitch (analyzerType) {\n\t\t\t\tcase GERMANAN_ALYZER:\n\t\t\t\t\tif(stopWords.length > 0){\n\t\t\t\t\t\tanalyzer = new GermanAnalyzer(stopWords);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\t\tthrow new JspException(\"In order to use a GermanAnalyzer you must provide a list of stop words\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tabort = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase SIMPLE_ANALYZER:\n\t\t\t\t\tanalyzer = new SimpleAnalyzer();\n\t\t\t\t\tbreak;\n\t\t\t\tcase STANDARD_ANALYZER:\n\t\t\t\t\tif(stopWords.length > 0){\n\t\t\t\t\t\tanalyzer = new StandardAnalyzer(stopWords);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tanalyzer = new StandardAnalyzer();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase STOP_ANALYZER:\n\t\t\t\t\tif(stopWords.length > 0){\n\t\t\t\t\t\tanalyzer = new StopAnalyzer(stopWords);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tanalyzer = new StopAnalyzer();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase WHITESPACE_ANALYZER:\n\t\t\t\t\tanalyzer = new WhitespaceAnalyzer();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault :\n\t\t\t\tif(stopWords.length > 0){\n\t\t\t\t\tanalyzer = new StandardAnalyzer(stopWords);\n\t\t\t\t}else{\n\t\t\t\t\tanalyzer = new StandardAnalyzer();\n\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// choose a query parser\n\t\t\t\tif(fieldList.length > 0){\n\t\t\t\t\tif(flagList.length > 0){\n\t\t\t\t\t\tquery = MultiFieldQueryParser.parse(criteria,fieldList,flagList,analyzer);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tquery = MultiFieldQueryParser.parse(criteria,fieldList,analyzer);\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tquery = QueryParser.parse(criteria, search, analyzer);\n\t\t\t\t}\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif(throwOnException){\n\t\t\t\t\tthrow new JspException(\"If using fieldList and or flagList check to see you have the same number of items in each: \" + e);\n\t\t\t\t}\n\t\t\t\tabort = true;\n\t\t\t}\n\t\t\tif(!abort){\n\t\t\t\ttry {\n\t\t\t\t\thits = msearcher.search(query);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\tthrow new JspException(\"msearcher.search(query): \" + e);\n\t\t\t\t\t}\n\t\t\t\t\tabort = true;\n\t\t\t\t}\n\t\t\n\t\t\t\tif(!abort){\n\t\t\t\t\thitCount = hits.length();\n\t\t\t\t\tHITCOUNT = hits.length();\n\t\t\t\t\tPAGECOUNT = (int) (( (double) startRow) / maxRows );\n\t\t\t\t\tpageCount = PAGECOUNT;\n\t\t\t\t\tthispage = maxRows;\n\t\t\t\t\tif ((startRow + maxRows) > hits.length()) {\n\t\t\t\t\t\t\tthispage = hits.length() - startRow;\n\t\t\t\t\t}\n\t\t\t\t\thitArray = new ArrayList();\n\t\t\t\t\tfor (int i = startRow; i < (thispage + startRow); i++) {\n\t\t\t\t\t\thitMap = new HashMap();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tdoc = hits.doc(i);\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\t\t\tthrow new JspException(\"hits.doc(i) : \" + e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tabort = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!abort){\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\thitMap.put(\"score\",new Float(hits.score(i)).toString());\n\t\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\t\t\t\tthrow new JspException(\"hitMap.put(score,new Float(hits.score(i)).toString()); : \" + e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tabort = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!abort){\n\t\t\t\t\t\t\t\tfields = doc.fields();\n\t\t\t\t\t\t\t\twhile(fields.hasMoreElements()){\n\t\t\t\t\t\t\t\t\tField field = (Field) fields.nextElement();\n\t\t\t\t\t\t\t\t\tString fieldName = field.name();\n\t\t\t\t\t\t\t\t\thitMap.put(fieldName,doc.get(fieldName));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitArray.add(hitMap);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(msearcher != null){\n\t\t\ttry {\n\t\t\t\tmsearcher.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\tif(throwOnException){\n\t\t\t\t\tthrow new JspException(\"A problem occured trying to close the searcher : \" + e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\t\n\n","sourceOld":"\tpublic void doSearch() throws JspException{\n\n\t\ttry {\n\t\t\tsearcher = new IndexSearcher(IndexReader.open(collection));\n\t\t} catch (IOException e) {\n\t\t\tif(throwOnException){\n\t\t\t\tthrow new JspException(\"IndexSearcher(IndexReader.open(collection)): \" + e);\n\t\t\t}\n\t\t\tabort = true;\n\t\t}\n\t\tif(!abort){\n\t\t\tanalyzer = new StopAnalyzer();\n\n\t\t\ttry {\n\t\t\t\tquery = QueryParser.parse(criteria, \"contents\", analyzer);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif(throwOnException){\n\t\t\t\t\tthrow new JspException(\"QueryParser.parse(criteria,contents,analyzer): \" + e);\n\t\t\t\t}\n\t\t\t\tabort = true;\n\t\t\t}\n\t\t\tif(!abort){\n\t\t\t\ttry {\n\t\t\t\t\thits = searcher.search(query);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\tthrow new JspException(\"searcher.search(query): \" + e);\n\t\t\t\t\t}\n\t\t\t\t\tabort = true;\n\t\t\t\t}\n\t\t\n\t\t\t\tif(!abort){\n\t\t\t\t\thitCount = new Integer(hits.length()).toString();\n\t\t\t\t\tHITCOUNT = hits.length();\n\t\t\t\t\tPAGECOUNT = PAGECOUNT = (int) (( (double) startRow) / maxRows );\n\t\t\t\t\tpageCount = new Integer(PAGECOUNT).toString();\n\t\t\t\t\tthispage = maxRows;\n\t\t\t\t\tif ((startRow + maxRows) > hits.length()) {\n\t\t\t\t\t\t\tthispage = hits.length() - startRow;\n\t\t\t\t\t}\n\t\t\t\t\thitArray = new ArrayList();\n\t\t\t\t\tfor (int i = startRow; i < (thispage + startRow); i++) {\n\t\t\t\t\t\thitMap = new HashMap();\n\t\t\t\t\t\tDocument doc = null;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tdoc = hits.doc(i);\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\t\t\tthrow new JspException(\"hits.doc(i) : \" + e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tabort = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!abort){\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\thitMap.put(\"score\",new Float(hits.score(i)).toString());\n\t\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\t\t\t\tthrow new JspException(\"hitMap.put(score,new Float(hits.score(i)).toString()); : \" + e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tabort = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!abort){\n\t\t\t\t\t\t\t\tfields = doc.fields();\n\t\t\t\t\t\t\t\twhile(fields.hasMoreElements()){\n\t\t\t\t\t\t\t\t\tField field = (Field) fields.nextElement();\n\t\t\t\t\t\t\t\t\tString fieldName = field.name();\n\t\t\t\t\t\t\t\t\thitMap.put(fieldName,doc.get(fieldName));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitArray.add(hitMap);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73cd40a131227b5da820f72787809a5dd3d273f0","date":1073925716,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/taglib/WEB-INF/classes/com/netwebapps/taglib/search/SearchTag#doSearch().mjava","pathOld":"sandbox/contributions/taglib/WEB-INF/classes/com/netwebapps/taglib/search/SearchTag#doSearch().mjava","sourceNew":"\tpublic void doSearch() throws JspException{\n\n\t\ttry {\n\t\t\tif(idxArray.size() > 0){\n\t\t\t\tIndexSearcher[] idxToArray = new IndexSearcher[idxArray.size()];\n\t\t\t\tIterator idxIter = idxArray.iterator();\n\t\t\t\tint arrayCount = 0;\n\t\t\t\twhile(idxIter.hasNext()){\n\t\t\t\t\tidxToArray[arrayCount++] = (IndexSearcher) idxIter.next();\n\t\t\t\t}\n\t\t\t\tmsearcher = new MultiSearcher(idxToArray);\n\t\t\t}else{\n\t\t\t\tthrow new JspException(\"No collection has been specified\");\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tif(throwOnException){\n\t\t\t\tthrow new JspException(\"IndexSearcher(IndexReader.open(collection)): \" + e);\n\t\t\t}\n\t\t\tabort = true;\n\t\t}\n\t\tif(!abort){\n\t\t\t// choosing the type of analyzer to use in this search\n\t\t\tswitch (analyzerType) {\n\t\t\t\tcase GERMAN_ANALYZER:\n\t\t\t\t\tif(stopWords.length > 0){\n\t\t\t\t\t\tanalyzer = new GermanAnalyzer(stopWords);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\t\tthrow new JspException(\"In order to use a GermanAnalyzer you must provide a list of stop words\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tabort = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase SIMPLE_ANALYZER:\n\t\t\t\t\tanalyzer = new SimpleAnalyzer();\n\t\t\t\t\tbreak;\n\t\t\t\tcase STANDARD_ANALYZER:\n\t\t\t\t\tif(stopWords.length > 0){\n\t\t\t\t\t\tanalyzer = new StandardAnalyzer(stopWords);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tanalyzer = new StandardAnalyzer();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase STOP_ANALYZER:\n\t\t\t\t\tif(stopWords.length > 0){\n\t\t\t\t\t\tanalyzer = new StopAnalyzer(stopWords);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tanalyzer = new StopAnalyzer();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase WHITESPACE_ANALYZER:\n\t\t\t\t\tanalyzer = new WhitespaceAnalyzer();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault :\n\t\t\t\tif(stopWords.length > 0){\n\t\t\t\t\tanalyzer = new StandardAnalyzer(stopWords);\n\t\t\t\t}else{\n\t\t\t\t\tanalyzer = new StandardAnalyzer();\n\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// choose a query parser\n\t\t\t\tif(fieldList.length > 0){\n\t\t\t\t\tif(flagList.length > 0){\n\t\t\t\t\t\tquery = MultiFieldQueryParser.parse(criteria,fieldList,flagList,analyzer);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tquery = MultiFieldQueryParser.parse(criteria,fieldList,analyzer);\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tquery = QueryParser.parse(criteria, search, analyzer);\n\t\t\t\t}\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif(throwOnException){\n\t\t\t\t\tthrow new JspException(\"If using fieldList and or flagList check to see you have the same number of items in each: \" + e);\n\t\t\t\t}\n\t\t\t\tabort = true;\n\t\t\t}\n\t\t\tif(!abort){\n\t\t\t\ttry {\n\t\t\t\t\thits = msearcher.search(query);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\tthrow new JspException(\"msearcher.search(query): \" + e);\n\t\t\t\t\t}\n\t\t\t\t\tabort = true;\n\t\t\t\t}\n\n\t\t\t\tif(!abort){\n\t\t\t\t\thitCount = hits.length();\n\t\t\t\t\tHITCOUNT = hits.length();\n\t\t\t\t\tPAGECOUNT = (int) (( (double) startRow) / maxRows );\n\t\t\t\t\tpageCount = PAGECOUNT;\n\t\t\t\t\tthispage = maxRows;\n\t\t\t\t\tif ((startRow + maxRows) > hits.length()) {\n\t\t\t\t\t\t\tthispage = hits.length() - startRow;\n\t\t\t\t\t}\n\t\t\t\t\thitArray = new ArrayList();\n\t\t\t\t\tfor (int i = startRow; i < (thispage + startRow); i++) {\n\t\t\t\t\t\thitMap = new HashMap();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tdoc = hits.doc(i);\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\t\t\tthrow new JspException(\"hits.doc(i) : \" + e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tabort = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!abort){\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\thitMap.put(\"score\",new Float(hits.score(i)).toString());\n\t\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\t\t\t\tthrow new JspException(\"hitMap.put(score,new Float(hits.score(i)).toString()); : \" + e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tabort = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!abort){\n\t\t\t\t\t\t\t\tfields = doc.fields();\n\t\t\t\t\t\t\t\twhile(fields.hasMoreElements()){\n\t\t\t\t\t\t\t\t\tField field = (Field) fields.nextElement();\n\t\t\t\t\t\t\t\t\tString fieldName = field.name();\n\t\t\t\t\t\t\t\t\thitMap.put(fieldName,doc.get(fieldName));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitArray.add(hitMap);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(msearcher != null){\n\t\t\ttry {\n\t\t\t\tmsearcher.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\tif(throwOnException){\n\t\t\t\t\tthrow new JspException(\"A problem occured trying to close the searcher : \" + e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void doSearch() throws JspException{\n\n\t\ttry {\n\t\t\tif(idxArray.size() > 0){\n\t\t\t\tIndexSearcher[] idxToArray = new IndexSearcher[idxArray.size()];\n\t\t\t\tIterator idxIter = idxArray.iterator();\n\t\t\t\tint arrayCount = 0;\n\t\t\t\twhile(idxIter.hasNext()){\n\t\t\t\t\tidxToArray[arrayCount++] = (IndexSearcher) idxIter.next();\n\t\t\t\t}\n\t\t\t\tmsearcher = new MultiSearcher(idxToArray);\n\t\t\t}else{\n\t\t\t\tthrow new JspException(\"No collection has been specified\");\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tif(throwOnException){\n\t\t\t\tthrow new JspException(\"IndexSearcher(IndexReader.open(collection)): \" + e);\n\t\t\t}\n\t\t\tabort = true;\n\t\t}\n\t\tif(!abort){\n\t\t\t// choosing the type of analyzer to use in this search\n\t\t\tswitch (analyzerType) {\n\t\t\t\tcase GERMANAN_ALYZER:\n\t\t\t\t\tif(stopWords.length > 0){\n\t\t\t\t\t\tanalyzer = new GermanAnalyzer(stopWords);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\t\tthrow new JspException(\"In order to use a GermanAnalyzer you must provide a list of stop words\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tabort = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase SIMPLE_ANALYZER:\n\t\t\t\t\tanalyzer = new SimpleAnalyzer();\n\t\t\t\t\tbreak;\n\t\t\t\tcase STANDARD_ANALYZER:\n\t\t\t\t\tif(stopWords.length > 0){\n\t\t\t\t\t\tanalyzer = new StandardAnalyzer(stopWords);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tanalyzer = new StandardAnalyzer();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase STOP_ANALYZER:\n\t\t\t\t\tif(stopWords.length > 0){\n\t\t\t\t\t\tanalyzer = new StopAnalyzer(stopWords);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tanalyzer = new StopAnalyzer();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase WHITESPACE_ANALYZER:\n\t\t\t\t\tanalyzer = new WhitespaceAnalyzer();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault :\n\t\t\t\tif(stopWords.length > 0){\n\t\t\t\t\tanalyzer = new StandardAnalyzer(stopWords);\n\t\t\t\t}else{\n\t\t\t\t\tanalyzer = new StandardAnalyzer();\n\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// choose a query parser\n\t\t\t\tif(fieldList.length > 0){\n\t\t\t\t\tif(flagList.length > 0){\n\t\t\t\t\t\tquery = MultiFieldQueryParser.parse(criteria,fieldList,flagList,analyzer);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tquery = MultiFieldQueryParser.parse(criteria,fieldList,analyzer);\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tquery = QueryParser.parse(criteria, search, analyzer);\n\t\t\t\t}\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif(throwOnException){\n\t\t\t\t\tthrow new JspException(\"If using fieldList and or flagList check to see you have the same number of items in each: \" + e);\n\t\t\t\t}\n\t\t\t\tabort = true;\n\t\t\t}\n\t\t\tif(!abort){\n\t\t\t\ttry {\n\t\t\t\t\thits = msearcher.search(query);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\tthrow new JspException(\"msearcher.search(query): \" + e);\n\t\t\t\t\t}\n\t\t\t\t\tabort = true;\n\t\t\t\t}\n\t\t\n\t\t\t\tif(!abort){\n\t\t\t\t\thitCount = hits.length();\n\t\t\t\t\tHITCOUNT = hits.length();\n\t\t\t\t\tPAGECOUNT = (int) (( (double) startRow) / maxRows );\n\t\t\t\t\tpageCount = PAGECOUNT;\n\t\t\t\t\tthispage = maxRows;\n\t\t\t\t\tif ((startRow + maxRows) > hits.length()) {\n\t\t\t\t\t\t\tthispage = hits.length() - startRow;\n\t\t\t\t\t}\n\t\t\t\t\thitArray = new ArrayList();\n\t\t\t\t\tfor (int i = startRow; i < (thispage + startRow); i++) {\n\t\t\t\t\t\thitMap = new HashMap();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tdoc = hits.doc(i);\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\t\t\tthrow new JspException(\"hits.doc(i) : \" + e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tabort = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!abort){\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\thitMap.put(\"score\",new Float(hits.score(i)).toString());\n\t\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\t\t\t\tthrow new JspException(\"hitMap.put(score,new Float(hits.score(i)).toString()); : \" + e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tabort = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!abort){\n\t\t\t\t\t\t\t\tfields = doc.fields();\n\t\t\t\t\t\t\t\twhile(fields.hasMoreElements()){\n\t\t\t\t\t\t\t\t\tField field = (Field) fields.nextElement();\n\t\t\t\t\t\t\t\t\tString fieldName = field.name();\n\t\t\t\t\t\t\t\t\thitMap.put(fieldName,doc.get(fieldName));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitArray.add(hitMap);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(msearcher != null){\n\t\t\ttry {\n\t\t\t\tmsearcher.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\tif(throwOnException){\n\t\t\t\t\tthrow new JspException(\"A problem occured trying to close the searcher : \" + e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cb46bdf4f3ba6a3060f464a9ef460db279c9cc2","date":1108145376,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/taglib/WEB-INF/classes/com/netwebapps/taglib/search/SearchTag#doSearch().mjava","sourceNew":null,"sourceOld":"\tpublic void doSearch() throws JspException{\n\n\t\ttry {\n\t\t\tif(idxArray.size() > 0){\n\t\t\t\tIndexSearcher[] idxToArray = new IndexSearcher[idxArray.size()];\n\t\t\t\tIterator idxIter = idxArray.iterator();\n\t\t\t\tint arrayCount = 0;\n\t\t\t\twhile(idxIter.hasNext()){\n\t\t\t\t\tidxToArray[arrayCount++] = (IndexSearcher) idxIter.next();\n\t\t\t\t}\n\t\t\t\tmsearcher = new MultiSearcher(idxToArray);\n\t\t\t}else{\n\t\t\t\tthrow new JspException(\"No collection has been specified\");\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tif(throwOnException){\n\t\t\t\tthrow new JspException(\"IndexSearcher(IndexReader.open(collection)): \" + e);\n\t\t\t}\n\t\t\tabort = true;\n\t\t}\n\t\tif(!abort){\n\t\t\t// choosing the type of analyzer to use in this search\n\t\t\tswitch (analyzerType) {\n\t\t\t\tcase GERMAN_ANALYZER:\n\t\t\t\t\tif(stopWords.length > 0){\n\t\t\t\t\t\tanalyzer = new GermanAnalyzer(stopWords);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\t\tthrow new JspException(\"In order to use a GermanAnalyzer you must provide a list of stop words\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tabort = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase SIMPLE_ANALYZER:\n\t\t\t\t\tanalyzer = new SimpleAnalyzer();\n\t\t\t\t\tbreak;\n\t\t\t\tcase STANDARD_ANALYZER:\n\t\t\t\t\tif(stopWords.length > 0){\n\t\t\t\t\t\tanalyzer = new StandardAnalyzer(stopWords);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tanalyzer = new StandardAnalyzer();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase STOP_ANALYZER:\n\t\t\t\t\tif(stopWords.length > 0){\n\t\t\t\t\t\tanalyzer = new StopAnalyzer(stopWords);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tanalyzer = new StopAnalyzer();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase WHITESPACE_ANALYZER:\n\t\t\t\t\tanalyzer = new WhitespaceAnalyzer();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault :\n\t\t\t\tif(stopWords.length > 0){\n\t\t\t\t\tanalyzer = new StandardAnalyzer(stopWords);\n\t\t\t\t}else{\n\t\t\t\t\tanalyzer = new StandardAnalyzer();\n\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// choose a query parser\n\t\t\t\tif(fieldList.length > 0){\n\t\t\t\t\tif(flagList.length > 0){\n\t\t\t\t\t\tquery = MultiFieldQueryParser.parse(criteria,fieldList,flagList,analyzer);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tquery = MultiFieldQueryParser.parse(criteria,fieldList,analyzer);\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tquery = QueryParser.parse(criteria, search, analyzer);\n\t\t\t\t}\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif(throwOnException){\n\t\t\t\t\tthrow new JspException(\"If using fieldList and or flagList check to see you have the same number of items in each: \" + e);\n\t\t\t\t}\n\t\t\t\tabort = true;\n\t\t\t}\n\t\t\tif(!abort){\n\t\t\t\ttry {\n\t\t\t\t\thits = msearcher.search(query);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\tthrow new JspException(\"msearcher.search(query): \" + e);\n\t\t\t\t\t}\n\t\t\t\t\tabort = true;\n\t\t\t\t}\n\n\t\t\t\tif(!abort){\n\t\t\t\t\thitCount = hits.length();\n\t\t\t\t\tHITCOUNT = hits.length();\n\t\t\t\t\tPAGECOUNT = (int) (( (double) startRow) / maxRows );\n\t\t\t\t\tpageCount = PAGECOUNT;\n\t\t\t\t\tthispage = maxRows;\n\t\t\t\t\tif ((startRow + maxRows) > hits.length()) {\n\t\t\t\t\t\t\tthispage = hits.length() - startRow;\n\t\t\t\t\t}\n\t\t\t\t\thitArray = new ArrayList();\n\t\t\t\t\tfor (int i = startRow; i < (thispage + startRow); i++) {\n\t\t\t\t\t\thitMap = new HashMap();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tdoc = hits.doc(i);\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\t\t\tthrow new JspException(\"hits.doc(i) : \" + e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tabort = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!abort){\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\thitMap.put(\"score\",new Float(hits.score(i)).toString());\n\t\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\tif(throwOnException){\n\t\t\t\t\t\t\t\t\tthrow new JspException(\"hitMap.put(score,new Float(hits.score(i)).toString()); : \" + e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tabort = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!abort){\n\t\t\t\t\t\t\t\tfields = doc.fields();\n\t\t\t\t\t\t\t\twhile(fields.hasMoreElements()){\n\t\t\t\t\t\t\t\t\tField field = (Field) fields.nextElement();\n\t\t\t\t\t\t\t\t\tString fieldName = field.name();\n\t\t\t\t\t\t\t\t\thitMap.put(fieldName,doc.get(fieldName));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thitArray.add(hitMap);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(msearcher != null){\n\t\t\ttry {\n\t\t\t\tmsearcher.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\tif(throwOnException){\n\t\t\t\t\tthrow new JspException(\"A problem occured trying to close the searcher : \" + e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d39b59ab824f3edf714317c825e2b75c27d3a13":["404007c7b71cffc3eef2d6f3a53019c0a277cf98"],"62d0fdff2a149d9e624677cac749c52b42f68ed7":["1d39b59ab824f3edf714317c825e2b75c27d3a13"],"404007c7b71cffc3eef2d6f3a53019c0a277cf98":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73cd40a131227b5da820f72787809a5dd3d273f0":["62d0fdff2a149d9e624677cac749c52b42f68ed7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9cb46bdf4f3ba6a3060f464a9ef460db279c9cc2"],"9cb46bdf4f3ba6a3060f464a9ef460db279c9cc2":["73cd40a131227b5da820f72787809a5dd3d273f0"]},"commit2Childs":{"1d39b59ab824f3edf714317c825e2b75c27d3a13":["62d0fdff2a149d9e624677cac749c52b42f68ed7"],"62d0fdff2a149d9e624677cac749c52b42f68ed7":["73cd40a131227b5da820f72787809a5dd3d273f0"],"404007c7b71cffc3eef2d6f3a53019c0a277cf98":["1d39b59ab824f3edf714317c825e2b75c27d3a13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["404007c7b71cffc3eef2d6f3a53019c0a277cf98"],"73cd40a131227b5da820f72787809a5dd3d273f0":["9cb46bdf4f3ba6a3060f464a9ef460db279c9cc2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9cb46bdf4f3ba6a3060f464a9ef460db279c9cc2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}