{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","commits":[{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitalized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitalized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(epw.getEntity(), doc, arow, vr);\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              buildDocument(vr, doc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n              \treqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    if (!entity.initalized) {\n      entitiesToDestroy.add(entityProcessor);\n      entity.initalized = true;\n    }\n    \n    if (requestParameters.start > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx, entitiesToDestroy);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.debug) {\n              \treqParams.debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitalized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitalized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(epw.getEntity(), doc, arow, vr);\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              buildDocument(vr, doc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitalized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitalized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(epw.getEntity(), doc, arow, vr);\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              buildDocument(vr, doc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n              \treqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolver,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolver vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitalized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitalized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(epw.getEntity(), doc, arow, vr);\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              buildDocument(vr, doc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitalized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitalized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(epw.getEntity(), doc, arow, vr);\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              buildDocument(vr, doc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl,List[EntityProcessorWrapper]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n                             ContextImpl parentCtx, List<EntityProcessorWrapper> entitiesToDestroy) {\n\n    ContextImpl ctx = new ContextImpl(epw, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    epw.init(ctx);\n    if (!epw.isInitalized()) {\n      entitiesToDestroy.add(epw);\n      epw.setInitalized(true);\n    }\n    \n    if (reqParams.getStart() > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, epw.getEntity().getName(), null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (reqParams.getStart() + reqParams.getRows())) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > reqParams.getStart()) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && epw.getEntity().isDocRoot()) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, epw.getEntity().getName(), null);\n          }\n          if (doc == null && epw.getEntity().isDocRoot()) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            Entity e = epw.getEntity();\n            while (e.getParentEntity() != null) {\n              addFields(e.getParentEntity(), doc, (Map<String, Object>) vr\n                      .resolve(e.getParentEntity().getName()), vr);\n              e = e.getParentEntity();\n            }\n          }\n\n          Map<String, Object> arow = epw.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (epw.getEntity().isDocRoot()) {\n            if (seenDocCount <= reqParams.getStart())\n              continue;\n            if (seenDocCount > reqParams.getStart() + reqParams.getRows()) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, epw.getEntity().getName(), arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(epw.getEntity(), doc, arow, vr);\n          }\n          if (epw.getEntity().getChildren() != null) {\n            vr.addNamespace(epw.getEntity().getName(), arow);\n            for (EntityProcessorWrapper child : epw.getChildren()) {\n              buildDocument(vr, doc,\n                  child.getEntity().isDocRoot() ? pk : null, child, false, ctx, entitiesToDestroy);\n            }\n            vr.removeNamespace(epw.getEntity().getName());\n          }\n          if (epw.getEntity().isDocRoot()) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.isDebug()) {\n                reqParams.getDebugInfo().debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + epw.getEntity().getName() + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, epw.getEntity().getName(), t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, epw.getEntity().getName(), null);\n            if (epw.getEntity().isDocRoot())\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","7c7b0ae5716b6c2044195a818e9ae58205175659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"]},"commit2Childs":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}