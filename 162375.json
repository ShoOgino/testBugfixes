{"path":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","sourceNew":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      PhraseScorer scorer = (PhraseScorer) scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq = (d == doc) ? scorer.currentFreq() : 0.0f;\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      PhraseScorer scorer = (PhraseScorer) scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq = (d == doc) ? scorer.currentFreq() : 0.0f;\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"953de31d76c9d58f1e3f4e41ff8a48a1529226de","date":1277371072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","sourceNew":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      Scorer scorer = (Scorer) scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq;\n      if (d == doc) {\n        if (slop == 0) {\n          phraseFreq = ((ExactPhraseScorer) scorer).currentFreq();\n        } else {\n          phraseFreq = ((SloppyPhraseScorer) scorer).currentFreq();\n        }\n      } else {\n        phraseFreq = 0.0f;\n      }\n\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      PhraseScorer scorer = (PhraseScorer) scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq = (d == doc) ? scorer.currentFreq() : 0.0f;\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","sourceNew":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      Scorer scorer = (Scorer) scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq;\n      if (d == doc) {\n        if (slop == 0) {\n          phraseFreq = ((ExactPhraseScorer) scorer).currentFreq();\n        } else {\n          phraseFreq = ((SloppyPhraseScorer) scorer).currentFreq();\n        }\n      } else {\n        phraseFreq = 0.0f;\n      }\n\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      PhraseScorer scorer = (PhraseScorer) scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq = (d == doc) ? scorer.currentFreq() : 0.0f;\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4946500259641951dbd7f8a61956bf14bef3f60","date":1283284212,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","sourceNew":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      Scorer scorer = (Scorer) scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq;\n      if (d == doc) {\n        phraseFreq = scorer.freq();\n      } else {\n        phraseFreq = 0.0f;\n      }\n\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      Scorer scorer = (Scorer) scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq;\n      if (d == doc) {\n        if (slop == 0) {\n          phraseFreq = ((ExactPhraseScorer) scorer).currentFreq();\n        } else {\n          phraseFreq = ((SloppyPhraseScorer) scorer).currentFreq();\n        }\n      } else {\n        phraseFreq = 0.0f;\n      }\n\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"068265517d1fbc623f5aeaee57fcd8df925678e4","date":1286043654,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","sourceNew":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      Scorer scorer = scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq;\n      if (d == doc) {\n        phraseFreq = scorer.freq();\n      } else {\n        phraseFreq = 0.0f;\n      }\n\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      Scorer scorer = (Scorer) scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq;\n      if (d == doc) {\n        phraseFreq = scorer.freq();\n      } else {\n        phraseFreq = 0.0f;\n      }\n\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","sourceNew":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      Scorer scorer = scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq;\n      if (d == doc) {\n        phraseFreq = scorer.freq();\n      } else {\n        phraseFreq = 0.0f;\n      }\n\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      Scorer scorer = (Scorer) scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq;\n      if (d == doc) {\n        if (slop == 0) {\n          phraseFreq = ((ExactPhraseScorer) scorer).currentFreq();\n        } else {\n          phraseFreq = ((SloppyPhraseScorer) scorer).currentFreq();\n        }\n      } else {\n        phraseFreq = 0.0f;\n      }\n\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(ReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","sourceNew":"    @Override\n    public Explanation explain(ReaderContext context, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      Scorer scorer = scorer(context, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq;\n      if (d == doc) {\n        phraseFreq = scorer.freq();\n      } else {\n        phraseFreq = 0.0f;\n      }\n\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = context.reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      Scorer scorer = scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq;\n      if (d == doc) {\n        phraseFreq = scorer.freq();\n      } else {\n        phraseFreq = 0.0f;\n      }\n\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      Scorer scorer = scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq;\n      if (d == doc) {\n        phraseFreq = scorer.freq();\n      } else {\n        phraseFreq = 0.0f;\n      }\n\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#explain(IndexReader,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Explanation explain(IndexReader reader, int doc)\n      throws IOException {\n\n      Explanation result = new Explanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      StringBuilder docFreqs = new StringBuilder();\n      StringBuilder query = new StringBuilder();\n      query.append('\\\"');\n      docFreqs.append(idfExp.explain());\n      for (int i = 0; i < terms.size(); i++) {\n        if (i != 0) {\n          query.append(\" \");\n        }\n\n        Term term = terms.get(i);\n\n        query.append(term.text());\n      }\n      query.append('\\\"');\n\n      Explanation idfExpl =\n        new Explanation(idf, \"idf(\" + field + \":\" + docFreqs + \")\");\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(idfExpl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         idfExpl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      Explanation fieldExpl = new Explanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query+\" in \"+doc+\n                               \"), product of:\");\n\n      Scorer scorer = scorer(reader, true, false);\n      if (scorer == null) {\n        return new Explanation(0.0f, \"no matching docs\");\n      }\n      Explanation tfExplanation = new Explanation();\n      int d = scorer.advance(doc);\n      float phraseFreq;\n      if (d == doc) {\n        phraseFreq = scorer.freq();\n      } else {\n        phraseFreq = 0.0f;\n      }\n\n      tfExplanation.setValue(similarity.tf(phraseFreq));\n      tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n      \n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(idfExpl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         idfExpl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n\n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"953de31d76c9d58f1e3f4e41ff8a48a1529226de":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["068265517d1fbc623f5aeaee57fcd8df925678e4","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["068265517d1fbc623f5aeaee57fcd8df925678e4"],"068265517d1fbc623f5aeaee57fcd8df925678e4":["e4946500259641951dbd7f8a61956bf14bef3f60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","953de31d76c9d58f1e3f4e41ff8a48a1529226de"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","068265517d1fbc623f5aeaee57fcd8df925678e4"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"e4946500259641951dbd7f8a61956bf14bef3f60":["953de31d76c9d58f1e3f4e41ff8a48a1529226de"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"953de31d76c9d58f1e3f4e41ff8a48a1529226de":["5f4e87790277826a2aea119328600dfb07761f32","e4946500259641951dbd7f8a61956bf14bef3f60"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"068265517d1fbc623f5aeaee57fcd8df925678e4":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["953de31d76c9d58f1e3f4e41ff8a48a1529226de","5f4e87790277826a2aea119328600dfb07761f32"],"e4946500259641951dbd7f8a61956bf14bef3f60":["068265517d1fbc623f5aeaee57fcd8df925678e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}