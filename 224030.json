{"path":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = delegate.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openFullSlice());\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = delegate.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openFullSlice());\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2dee33619431ada2a7a07f5fe2dbd94bac6a460","date":1337274029,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name);\n    }\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = delegate.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openFullSlice());\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = delegate.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openFullSlice());\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name);\n    }\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = delegate.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openFullSlice());\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = delegate.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openFullSlice());\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","date":1347072117,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name);\n    }\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = delegate.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name);\n    }\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = delegate.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openFullSlice());\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52","date":1370989568,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name) : new NoSuchFileException(name);\n    }\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = delegate.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name)) {\n      throw new FileNotFoundException(name);\n    }\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = delegate.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","bugFix":["67aadace85f701c87a4e0721eedcda25d8415a70"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"399ef3ff6c22f0627c82ac65f32726f3587a2aa1","date":1379005174,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!in.fileExists(name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name) : new NoSuchFileException(name);\n    }\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = in.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name) : new NoSuchFileException(name);\n    }\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = delegate.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"527cc14542789f47d75da436cb4287d1ab887e34","date":1391705548,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!in.fileExists(name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name) : new NoSuchFileException(name);\n    }\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = in.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!in.fileExists(name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name) : new NoSuchFileException(name);\n    }\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = in.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","bugFix":["67aadace85f701c87a4e0721eedcda25d8415a70"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name) : new NoSuchFileException(name);\n    }\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = in.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!in.fileExists(name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name) : new NoSuchFileException(name);\n    }\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = in.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","date":1400334249,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name) : new NoSuchFileException(name);\n    }\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = in.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#createSlicer(String,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    maybeYield();\n    if (!LuceneTestCase.slowFileExists(in, name)) {\n      throw randomState.nextBoolean() ? new FileNotFoundException(name) : new NoSuchFileException(name);\n    }\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw (IOException) fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n    \n    final IndexInputSlicer delegateHandle = in.createSlicer(name, context);\n    final IndexInputSlicer handle = new IndexInputSlicer() {\n      \n      private boolean isClosed;\n      @Override\n      public void close() throws IOException {\n        if (!isClosed) {\n          delegateHandle.close();\n          MockDirectoryWrapper.this.removeOpenFile(this, name);\n          isClosed = true;\n        }\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        maybeYield();\n        IndexInput ii = new MockIndexInputWrapper(MockDirectoryWrapper.this, name, delegateHandle.openSlice(sliceDescription, offset, length));\n        addFileHandle(ii, name, Handle.Input);\n        return ii;\n      }\n      \n    };\n    addFileHandle(handle, name, Handle.Slice);\n    return handle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"527cc14542789f47d75da436cb4287d1ab887e34":["399ef3ff6c22f0627c82ac65f32726f3587a2aa1"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d2dee33619431ada2a7a07f5fe2dbd94bac6a460"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["527cc14542789f47d75da436cb4287d1ab887e34"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399ef3ff6c22f0627c82ac65f32726f3587a2aa1":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"56572ec06f1407c066d6b7399413178b33176cd8":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796","e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"]},"commit2Childs":{"527cc14542789f47d75da436cb4287d1ab887e34":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52":["399ef3ff6c22f0627c82ac65f32726f3587a2aa1"],"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","56572ec06f1407c066d6b7399413178b33176cd8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"399ef3ff6c22f0627c82ac65f32726f3587a2aa1":["527cc14542789f47d75da436cb4287d1ab887e34"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}