{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFieldNotIndexed(String,String[]).mjava","commits":[{"id":"0ff61c2e5ce6b1f26a271d9d454206db1917d628","date":1491505661,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFieldNotIndexed(String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestFieldNotIndexed(String field, String[] values) throws IOException {\n    assert values.length == 10;\n    // test preconditions\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assertFalse(\"Field should be indexed=false\", sf.indexed());\n    assertFalse(\"Field should be docValues=false\", sf.hasDocValues());\n    \n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='10']\");\n    assertQ(\"Can't search on index=false docValues=false field\", req(\"q\", field + \":[* TO *]\"), \"//*[@numFound='0']\");\n    IndexReader ir;\n    RefCounted<SolrIndexSearcher> ref = null;\n    try {\n      ref = h.getCore().getSearcher();\n      ir = ref.get().getIndexReader();\n      assertEquals(\"Field \" + field + \" should have no point values\", 0, PointValues.size(ir, field));\n    } finally {\n      ref.decref();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFieldNotIndexed(String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestFieldNotIndexed(String field, String[] values) throws IOException {\n    assert values.length == 10;\n    // test preconditions\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assertFalse(\"Field should be indexed=false\", sf.indexed());\n    assertFalse(\"Field should be docValues=false\", sf.hasDocValues());\n    \n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='10']\");\n    assertQ(\"Can't search on index=false docValues=false field\", req(\"q\", field + \":[* TO *]\"), \"//*[@numFound='0']\");\n    IndexReader ir;\n    RefCounted<SolrIndexSearcher> ref = null;\n    try {\n      ref = h.getCore().getSearcher();\n      ir = ref.get().getIndexReader();\n      assertEquals(\"Field \" + field + \" should have no point values\", 0, PointValues.size(ir, field));\n    } finally {\n      ref.decref();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFieldNotIndexed(String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFieldNotIndexed(String,String[]).mjava","sourceNew":"  private void doTestFieldNotIndexed(String field, String[] values) throws IOException {\n    assert values.length == 10;\n    // test preconditions\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assertFalse(\"Field should be indexed=false\", sf.indexed());\n    assertFalse(\"Field should be docValues=false\", sf.hasDocValues());\n    \n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='10']\");\n    assertQ(\"Can't search on index=false docValues=false field\", req(\"q\", field + \":[* TO *]\"), \"//*[@numFound='0']\");\n    h.getCore().withSearcher(searcher -> {\n      IndexReader ir = searcher.getIndexReader();\n      assertEquals(\"Field \" + field + \" should have no point values\", 0, PointValues.size(ir, field));\n      return null;\n    });\n  }\n\n","sourceOld":"  private void doTestFieldNotIndexed(String field, String[] values) throws IOException {\n    assert values.length == 10;\n    // test preconditions\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assertFalse(\"Field should be indexed=false\", sf.indexed());\n    assertFalse(\"Field should be docValues=false\", sf.hasDocValues());\n    \n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='10']\");\n    assertQ(\"Can't search on index=false docValues=false field\", req(\"q\", field + \":[* TO *]\"), \"//*[@numFound='0']\");\n    IndexReader ir;\n    RefCounted<SolrIndexSearcher> ref = null;\n    try {\n      ref = h.getCore().getSearcher();\n      ir = ref.get().getIndexReader();\n      assertEquals(\"Field \" + field + \" should have no point values\", 0, PointValues.size(ir, field));\n    } finally {\n      ref.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFieldNotIndexed(String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFieldNotIndexed(String,String[]).mjava","sourceNew":"  private void doTestFieldNotIndexed(String field, String[] values) throws IOException {\n    assert values.length == 10;\n    // test preconditions\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assertFalse(\"Field should be indexed=false\", sf.indexed());\n    assertFalse(\"Field should be docValues=false\", sf.hasDocValues());\n    \n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='10']\");\n    assertQ(\"Can't search on index=false docValues=false field\", req(\"q\", field + \":[* TO *]\"), \"//*[@numFound='0']\");\n    h.getCore().withSearcher(searcher -> {\n      IndexReader ir = searcher.getIndexReader();\n      assertEquals(\"Field \" + field + \" should have no point values\", 0, PointValues.size(ir, field));\n      return null;\n    });\n  }\n\n","sourceOld":"  private void doTestFieldNotIndexed(String field, String[] values) throws IOException {\n    assert values.length == 10;\n    // test preconditions\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assertFalse(\"Field should be indexed=false\", sf.indexed());\n    assertFalse(\"Field should be docValues=false\", sf.hasDocValues());\n    \n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='10']\");\n    assertQ(\"Can't search on index=false docValues=false field\", req(\"q\", field + \":[* TO *]\"), \"//*[@numFound='0']\");\n    IndexReader ir;\n    RefCounted<SolrIndexSearcher> ref = null;\n    try {\n      ref = h.getCore().getSearcher();\n      ir = ref.get().getIndexReader();\n      assertEquals(\"Field \" + field + \" should have no point values\", 0, PointValues.size(ir, field));\n    } finally {\n      ref.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ab833f2b623042c834458d4cbcad05073a93793":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["0ff61c2e5ce6b1f26a271d9d454206db1917d628","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}