{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer#incrementToken().mjava","commits":[{"id":"e4ad57577191b2431362044f3135e10a3c0dc1f8","date":1409095069,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      final int limit = side == Side.FRONT ? maxGram : 1024;\n      char[] chars = new char[Math.min(1024, limit)];\n      charsRead = 0;\n      // TODO: refactor to a shared readFully somewhere:\n      boolean exhausted = false;\n      while (charsRead < limit) {\n        final int inc = input.read(chars, charsRead, chars.length-charsRead);\n        if (inc == -1) {\n          exhausted = true;\n          break;\n        }\n        charsRead += inc;\n        if (charsRead == chars.length && charsRead < limit) {\n          chars = ArrayUtil.grow(chars);\n        }\n      }\n\n      inStr = new String(chars, 0, charsRead);\n      inStr = inStr.trim();\n\n      if (!exhausted) {\n        // Read extra throwaway chars so that on end() we\n        // report the correct offset:\n        char[] throwaway = new char[1024];\n        while(true) {\n          final int inc = input.read(throwaway, 0, throwaway.length);\n          if (inc == -1) {\n            break;\n          }\n          charsRead += inc;\n        }\n      }\n\n      inLen = inStr.length();\n      if (inLen == 0) {\n        return false;\n      }\n      posIncrAtt.setPositionIncrement(1);\n    } else {\n      posIncrAtt.setPositionIncrement(0);\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram || gramSize > inLen) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setEmpty().append(inStr, start, end);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer#incrementToken().mjava","sourceNew":null,"sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      final int limit = side == Side.FRONT ? maxGram : 1024;\n      char[] chars = new char[Math.min(1024, limit)];\n      charsRead = 0;\n      // TODO: refactor to a shared readFully somewhere:\n      boolean exhausted = false;\n      while (charsRead < limit) {\n        final int inc = input.read(chars, charsRead, chars.length-charsRead);\n        if (inc == -1) {\n          exhausted = true;\n          break;\n        }\n        charsRead += inc;\n        if (charsRead == chars.length && charsRead < limit) {\n          chars = ArrayUtil.grow(chars);\n        }\n      }\n\n      inStr = new String(chars, 0, charsRead);\n      inStr = inStr.trim();\n\n      if (!exhausted) {\n        // Read extra throwaway chars so that on end() we\n        // report the correct offset:\n        char[] throwaway = new char[1024];\n        while(true) {\n          final int inc = input.read(throwaway, 0, throwaway.length);\n          if (inc == -1) {\n            break;\n          }\n          charsRead += inc;\n        }\n      }\n\n      inLen = inStr.length();\n      if (inLen == 0) {\n        return false;\n      }\n      posIncrAtt.setPositionIncrement(1);\n    } else {\n      posIncrAtt.setPositionIncrement(0);\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram || gramSize > inLen) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setEmpty().append(inStr, start, end);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e4ad57577191b2431362044f3135e10a3c0dc1f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71387d8cb6923eb831b17a8b734608ba2e21c653":["e4ad57577191b2431362044f3135e10a3c0dc1f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"e4ad57577191b2431362044f3135e10a3c0dc1f8":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4ad57577191b2431362044f3135e10a3c0dc1f8"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}