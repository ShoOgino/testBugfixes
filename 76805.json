{"path":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","commits":[{"id":"c66158bb16e902a21272772f1b911f04b1a55abb","date":1424959524,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","pathOld":"/dev/null","sourceNew":"  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig == null) {\n      if (Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"))) {\n        return configureSslFromSysProps();\n      }\n      return null;\n    }\n\n    if (!sslConfig.useSsl)\n      return null;\n\n    SslContextFactory factory = new SslContextFactory(false);\n    if (sslConfig.getKeyStore() != null)\n      factory.setKeyStorePath(sslConfig.getKeyStore());\n    if (sslConfig.getKeyStorePassword() != null)\n      factory.setKeyStorePassword(sslConfig.getKeyStorePassword());\n    if (sslConfig.getTrustStore() != null)\n      factory.setTrustStorePath(System.getProperty(sslConfig.getTrustStore()));\n    if (sslConfig.getTrustStorePassword() != null)\n      factory.setTrustStorePassword(sslConfig.getTrustStorePassword());\n\n    return factory;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ea0f43f20834b3c8930e074b144aba27a935fee8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","pathOld":"/dev/null","sourceNew":"  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig == null) {\n      if (Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"))) {\n        return configureSslFromSysProps();\n      }\n      return null;\n    }\n\n    if (!sslConfig.useSsl)\n      return null;\n\n    SslContextFactory factory = new SslContextFactory(false);\n    if (sslConfig.getKeyStore() != null)\n      factory.setKeyStorePath(sslConfig.getKeyStore());\n    if (sslConfig.getKeyStorePassword() != null)\n      factory.setKeyStorePassword(sslConfig.getKeyStorePassword());\n    if (sslConfig.getTrustStore() != null)\n      factory.setTrustStorePath(System.getProperty(sslConfig.getTrustStore()));\n    if (sslConfig.getTrustStorePassword() != null)\n      factory.setTrustStorePassword(sslConfig.getTrustStorePassword());\n\n    return factory;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"549bb709866b53c2535cf5420caec3190c7f225c","date":1448943694,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","sourceNew":"  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig == null) {\n      if (Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"))) {\n        return configureSslFromSysProps();\n      }\n      return null;\n    }\n\n    if (!sslConfig.useSsl)\n      return null;\n\n    SslContextFactory factory = new SslContextFactory(false);\n    if (sslConfig.getKeyStore() != null)\n      factory.setKeyStorePath(sslConfig.getKeyStore());\n    if (sslConfig.getKeyStorePassword() != null)\n      factory.setKeyStorePassword(sslConfig.getKeyStorePassword());\n    if (sslConfig.getTrustStore() != null)\n      factory.setTrustStorePath(sslConfig.getTrustStore());\n    if (sslConfig.getTrustStorePassword() != null)\n      factory.setTrustStorePassword(sslConfig.getTrustStorePassword());\n\n    return factory;\n\n  }\n\n","sourceOld":"  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig == null) {\n      if (Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"))) {\n        return configureSslFromSysProps();\n      }\n      return null;\n    }\n\n    if (!sslConfig.useSsl)\n      return null;\n\n    SslContextFactory factory = new SslContextFactory(false);\n    if (sslConfig.getKeyStore() != null)\n      factory.setKeyStorePath(sslConfig.getKeyStore());\n    if (sslConfig.getKeyStorePassword() != null)\n      factory.setKeyStorePassword(sslConfig.getKeyStorePassword());\n    if (sslConfig.getTrustStore() != null)\n      factory.setTrustStorePath(System.getProperty(sslConfig.getTrustStore()));\n    if (sslConfig.getTrustStorePassword() != null)\n      factory.setTrustStorePassword(sslConfig.getTrustStorePassword());\n\n    return factory;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"49bee3135753f5a129ce7f3eef9151efbb39fb27","date":1452189117,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","sourceNew":"  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig == null) {\n      if (Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"))) {\n        return configureSslFromSysProps();\n      }\n      return null;\n    }\n\n    if (!sslConfig.useSsl)\n      return null;\n\n    SslContextFactory factory = new SslContextFactory(false);\n    if (sslConfig.getKeyStore() != null)\n      factory.setKeyStorePath(sslConfig.getKeyStore());\n    if (sslConfig.getKeyStorePassword() != null)\n      factory.setKeyStorePassword(sslConfig.getKeyStorePassword());\n    if (sslConfig.getTrustStore() != null)\n      factory.setTrustStorePath(System.getProperty(sslConfig.getTrustStore()));\n    if (sslConfig.getTrustStorePassword() != null)\n      factory.setTrustStorePassword(sslConfig.getTrustStorePassword());\n\n    return factory;\n\n  }\n\n","sourceOld":"  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig == null) {\n      if (Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"))) {\n        return configureSslFromSysProps();\n      }\n      return null;\n    }\n\n    if (!sslConfig.useSsl)\n      return null;\n\n    SslContextFactory factory = new SslContextFactory(false);\n    if (sslConfig.getKeyStore() != null)\n      factory.setKeyStorePath(sslConfig.getKeyStore());\n    if (sslConfig.getKeyStorePassword() != null)\n      factory.setKeyStorePassword(sslConfig.getKeyStorePassword());\n    if (sslConfig.getTrustStore() != null)\n      factory.setTrustStorePath(sslConfig.getTrustStore());\n    if (sslConfig.getTrustStorePassword() != null)\n      factory.setTrustStorePassword(sslConfig.getTrustStorePassword());\n\n    return factory;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee3cfd8b5963fd43298f37bd602c8bf77896e72e","date":1455656470,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","sourceNew":"  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig == null) {\n      if (Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"))) {\n        return configureSslFromSysProps();\n      }\n      return null;\n    }\n\n    if (!sslConfig.useSsl)\n      return null;\n\n    SslContextFactory factory = new SslContextFactory(false);\n    if (sslConfig.getKeyStore() != null)\n      factory.setKeyStorePath(sslConfig.getKeyStore());\n    if (sslConfig.getKeyStorePassword() != null)\n      factory.setKeyStorePassword(sslConfig.getKeyStorePassword());\n    if (sslConfig.getTrustStore() != null)\n      factory.setTrustStorePath(sslConfig.getTrustStore());\n    if (sslConfig.getTrustStorePassword() != null)\n      factory.setTrustStorePassword(sslConfig.getTrustStorePassword());\n\n    return factory;\n\n  }\n\n","sourceOld":"  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig == null) {\n      if (Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"))) {\n        return configureSslFromSysProps();\n      }\n      return null;\n    }\n\n    if (!sslConfig.useSsl)\n      return null;\n\n    SslContextFactory factory = new SslContextFactory(false);\n    if (sslConfig.getKeyStore() != null)\n      factory.setKeyStorePath(sslConfig.getKeyStore());\n    if (sslConfig.getKeyStorePassword() != null)\n      factory.setKeyStorePassword(sslConfig.getKeyStorePassword());\n    if (sslConfig.getTrustStore() != null)\n      factory.setTrustStorePath(System.getProperty(sslConfig.getTrustStore()));\n    if (sslConfig.getTrustStorePassword() != null)\n      factory.setTrustStorePassword(sslConfig.getTrustStorePassword());\n\n    return factory;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e58bb31b4af6b8eeb1539849575c59df745bc6e6","date":1461874681,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","sourceNew":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on the specified \n   * configuration, or null if no SSL should be used.\n   *\n   * The specified sslConfig will be completely ignored if the \"tests.jettySsl\" system property is \n   * true - in which case standard \"javax.net.ssl.*\" system properties will be used instead, along \n   * with \"tests.jettySsl.clientAuth\"\n   * \n   * @see #isSSLMode\n   */\n  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig == null) {\n      if (Boolean.getBoolean(\"tests.jettySsl\")) {\n        return configureSslFromSysProps();\n      }\n      return null;\n    }\n\n    if (!sslConfig.isSSLMode()) \n       return null;\n\n    SslContextFactory factory = new SslContextFactory(false);\n    if (sslConfig.getKeyStore() != null)\n      factory.setKeyStorePath(sslConfig.getKeyStore());\n    if (sslConfig.getKeyStorePassword() != null)\n      factory.setKeyStorePassword(sslConfig.getKeyStorePassword());\n    factory.setNeedClientAuth(sslConfig.isClientAuthMode());\n    \n    if (sslConfig.isClientAuthMode()) {\n      if (sslConfig.getTrustStore() != null)\n        factory.setTrustStorePath(sslConfig.getTrustStore());\n      if (sslConfig.getTrustStorePassword() != null)\n        factory.setTrustStorePassword(sslConfig.getTrustStorePassword());\n    }\n    return factory;\n\n  }\n\n","sourceOld":"  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig == null) {\n      if (Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"))) {\n        return configureSslFromSysProps();\n      }\n      return null;\n    }\n\n    if (!sslConfig.useSsl)\n      return null;\n\n    SslContextFactory factory = new SslContextFactory(false);\n    if (sslConfig.getKeyStore() != null)\n      factory.setKeyStorePath(sslConfig.getKeyStore());\n    if (sslConfig.getKeyStorePassword() != null)\n      factory.setKeyStorePassword(sslConfig.getKeyStorePassword());\n    if (sslConfig.getTrustStore() != null)\n      factory.setTrustStorePath(sslConfig.getTrustStore());\n    if (sslConfig.getTrustStorePassword() != null)\n      factory.setTrustStorePassword(sslConfig.getTrustStorePassword());\n\n    return factory;\n\n  }\n\n","bugFix":null,"bugIntro":["ea0f43f20834b3c8930e074b144aba27a935fee8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb28d79732042ac28cd68a04bcb1b6584c18d8c9","date":1462314713,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","sourceNew":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on the specified \n   * SSLConfig param which may be null.\n   *\n   * if the SSLConfig param is non-null, then this method will return the results of \n   * {@link #createContextFactory()}.\n   * \n   * If the SSLConfig param is null, then this method will return null unless the \n   * <code>tests.jettySsl</code> system property is true, in which case standard \"javax.net.ssl.*\" \n   * system properties will be used instead, along with \"tests.jettySsl.clientAuth\".\n   * \n   * @see #createContextFactory()\n   */\n  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig != null) {\n      return sslConfig.createContextFactory();\n    }\n    // else...\n    if (Boolean.getBoolean(\"tests.jettySsl\")) {\n      return configureSslFromSysProps();\n    }\n    // else...\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on the specified \n   * configuration, or null if no SSL should be used.\n   *\n   * The specified sslConfig will be completely ignored if the \"tests.jettySsl\" system property is \n   * true - in which case standard \"javax.net.ssl.*\" system properties will be used instead, along \n   * with \"tests.jettySsl.clientAuth\"\n   * \n   * @see #isSSLMode\n   */\n  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig == null) {\n      if (Boolean.getBoolean(\"tests.jettySsl\")) {\n        return configureSslFromSysProps();\n      }\n      return null;\n    }\n\n    if (!sslConfig.isSSLMode()) \n       return null;\n\n    SslContextFactory factory = new SslContextFactory(false);\n    if (sslConfig.getKeyStore() != null)\n      factory.setKeyStorePath(sslConfig.getKeyStore());\n    if (sslConfig.getKeyStorePassword() != null)\n      factory.setKeyStorePassword(sslConfig.getKeyStorePassword());\n    factory.setNeedClientAuth(sslConfig.isClientAuthMode());\n    \n    if (sslConfig.isClientAuthMode()) {\n      if (sslConfig.getTrustStore() != null)\n        factory.setTrustStorePath(sslConfig.getTrustStore());\n      if (sslConfig.getTrustStorePassword() != null)\n        factory.setTrustStorePassword(sslConfig.getTrustStorePassword());\n    }\n    return factory;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","sourceNew":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on the specified \n   * SSLConfig param which may be null.\n   *\n   * if the SSLConfig param is non-null, then this method will return the results of \n   * {@link #createContextFactory()}.\n   * \n   * If the SSLConfig param is null, then this method will return null unless the \n   * <code>tests.jettySsl</code> system property is true, in which case standard \"javax.net.ssl.*\" \n   * system properties will be used instead, along with \"tests.jettySsl.clientAuth\".\n   * \n   * @see #createContextFactory()\n   */\n  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig != null) {\n      return sslConfig.createContextFactory();\n    }\n    // else...\n    if (Boolean.getBoolean(\"tests.jettySsl\")) {\n      return configureSslFromSysProps();\n    }\n    // else...\n    return null;\n  }\n\n","sourceOld":"  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig == null) {\n      if (Boolean.getBoolean(System.getProperty(\"tests.jettySsl\"))) {\n        return configureSslFromSysProps();\n      }\n      return null;\n    }\n\n    if (!sslConfig.useSsl)\n      return null;\n\n    SslContextFactory factory = new SslContextFactory(false);\n    if (sslConfig.getKeyStore() != null)\n      factory.setKeyStorePath(sslConfig.getKeyStore());\n    if (sslConfig.getKeyStorePassword() != null)\n      factory.setKeyStorePassword(sslConfig.getKeyStorePassword());\n    if (sslConfig.getTrustStore() != null)\n      factory.setTrustStorePath(sslConfig.getTrustStore());\n    if (sslConfig.getTrustStorePassword() != null)\n      factory.setTrustStorePassword(sslConfig.getTrustStorePassword());\n\n    return factory;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","sourceNew":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on the specified \n   * SSLConfig param which may be null.\n   *\n   * if the SSLConfig param is non-null, then this method will return the results of \n   * {@link #createContextFactory()}.\n   * \n   * If the SSLConfig param is null, then this method will return null unless the \n   * <code>tests.jettySsl</code> system property is true, in which case standard \"javax.net.ssl.*\" \n   * system properties will be used instead, along with \"tests.jettySsl.clientAuth\".\n   * \n   * @see #createContextFactory()\n   */\n  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig != null) {\n      return sslConfig.createContextFactory();\n    }\n    // else...\n    if (Boolean.getBoolean(\"tests.jettySsl\")) {\n      return configureSslFromSysProps();\n    }\n    // else...\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on the specified \n   * configuration, or null if no SSL should be used.\n   *\n   * The specified sslConfig will be completely ignored if the \"tests.jettySsl\" system property is \n   * true - in which case standard \"javax.net.ssl.*\" system properties will be used instead, along \n   * with \"tests.jettySsl.clientAuth\"\n   * \n   * @see #isSSLMode\n   */\n  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig == null) {\n      if (Boolean.getBoolean(\"tests.jettySsl\")) {\n        return configureSslFromSysProps();\n      }\n      return null;\n    }\n\n    if (!sslConfig.isSSLMode()) \n       return null;\n\n    SslContextFactory factory = new SslContextFactory(false);\n    if (sslConfig.getKeyStore() != null)\n      factory.setKeyStorePath(sslConfig.getKeyStore());\n    if (sslConfig.getKeyStorePassword() != null)\n      factory.setKeyStorePassword(sslConfig.getKeyStorePassword());\n    factory.setNeedClientAuth(sslConfig.isClientAuthMode());\n    \n    if (sslConfig.isClientAuthMode()) {\n      if (sslConfig.getTrustStore() != null)\n        factory.setTrustStorePath(sslConfig.getTrustStore());\n      if (sslConfig.getTrustStorePassword() != null)\n        factory.setTrustStorePassword(sslConfig.getTrustStorePassword());\n    }\n    return factory;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","sourceNew":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on the specified \n   * SSLConfig param which may be null.\n   *\n   * if the SSLConfig param is non-null, then this method will return the results of \n   * {@link #createContextFactory()}.\n   * \n   * If the SSLConfig param is null, then this method will return null unless the \n   * <code>tests.jettySsl</code> system property is true, in which case standard \"javax.net.ssl.*\" \n   * system properties will be used instead, along with \"tests.jettySsl.clientAuth\".\n   * \n   * @see #createContextFactory()\n   */\n  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig != null) {\n      return sslConfig.createContextFactory();\n    }\n    // else...\n    if (Boolean.getBoolean(\"tests.jettySsl\")) {\n      return configureSslFromSysProps();\n    }\n    // else...\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on the specified \n   * SSLConfig param which may be null.\n   *\n   * if the SSLConfig param is non-null, then this method will return the results of \n   * {@link #createContextFactory()}.\n   * \n   * If the SSLConfig param is null, then this method will return null unless the \n   * <code>tests.jettySsl</code> system property is true, in which case standard \"javax.net.ssl.*\" \n   * system properties will be used instead, along with \"tests.jettySsl.clientAuth\".\n   * \n   * @see #createContextFactory()\n   */\n  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig != null) {\n      return sslConfig.createContextFactory();\n    }\n    // else...\n    if (Boolean.getBoolean(\"tests.jettySsl\")) {\n      return configureSslFromSysProps();\n    }\n    // else...\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"549bb709866b53c2535cf5420caec3190c7f225c":["c66158bb16e902a21272772f1b911f04b1a55abb"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c66158bb16e902a21272772f1b911f04b1a55abb"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["73450c0955930295d34703e7ddbfc6973b7a121a"],"ee3cfd8b5963fd43298f37bd602c8bf77896e72e":["49bee3135753f5a129ce7f3eef9151efbb39fb27"],"73450c0955930295d34703e7ddbfc6973b7a121a":["e58bb31b4af6b8eeb1539849575c59df745bc6e6","cb28d79732042ac28cd68a04bcb1b6584c18d8c9"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["ee3cfd8b5963fd43298f37bd602c8bf77896e72e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"49bee3135753f5a129ce7f3eef9151efbb39fb27":["549bb709866b53c2535cf5420caec3190c7f225c"],"cb28d79732042ac28cd68a04bcb1b6584c18d8c9":["e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"c66158bb16e902a21272772f1b911f04b1a55abb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["ee3cfd8b5963fd43298f37bd602c8bf77896e72e","cb28d79732042ac28cd68a04bcb1b6584c18d8c9"]},"commit2Childs":{"549bb709866b53c2535cf5420caec3190c7f225c":["49bee3135753f5a129ce7f3eef9151efbb39fb27"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ee3cfd8b5963fd43298f37bd602c8bf77896e72e":["e58bb31b4af6b8eeb1539849575c59df745bc6e6","55b50463286869f584cf849d1587a0fcd54d1dfa"],"73450c0955930295d34703e7ddbfc6973b7a121a":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c66158bb16e902a21272772f1b911f04b1a55abb"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["73450c0955930295d34703e7ddbfc6973b7a121a","cb28d79732042ac28cd68a04bcb1b6584c18d8c9"],"49bee3135753f5a129ce7f3eef9151efbb39fb27":["ee3cfd8b5963fd43298f37bd602c8bf77896e72e"],"cb28d79732042ac28cd68a04bcb1b6584c18d8c9":["73450c0955930295d34703e7ddbfc6973b7a121a","55b50463286869f584cf849d1587a0fcd54d1dfa"],"c66158bb16e902a21272772f1b911f04b1a55abb":["549bb709866b53c2535cf5420caec3190c7f225c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}