{"path":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80a37ae73034270b57bfd57a44f8fcadc952fa0","date":1515440719,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    @Override\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    @Override\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    @Override\n    protected void finish() throws IOException {\n      if (secondPass != null) {\n        result = secondPass.getTopGroups(0);\n        populateScoresIfNecessary();\n      }\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    @Override\n    @SuppressWarnings({\"unchecked\"})\n    protected void finish() throws IOException {\n      if (secondPass != null) {\n        result = secondPass.getTopGroups(0);\n        populateScoresIfNecessary();\n      }\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      @SuppressWarnings({\"rawtypes\"})\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void finish() throws IOException {\n      if (secondPass != null) {\n        result = secondPass.getTopGroups(0);\n        populateScoresIfNecessary();\n      }\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"b94236357aaa22b76c10629851fe4e376e0cea82":["19275ba31e621f6da1b83bf13af75233876fd3d4","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["7530de27b87b961b51f01bd1299b7004d46e8823","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["7530de27b87b961b51f01bd1299b7004d46e8823"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["b94236357aaa22b76c10629851fe4e376e0cea82"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b94236357aaa22b76c10629851fe4e376e0cea82","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}