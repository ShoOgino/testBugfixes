{"path":"lucene/sandbox/src/test/org/apache/lucene/util/TestGeoUtils#testGeoHash().mjava","commits":[{"id":"11540ae0536f080714982c91b67e799273893920","date":1438423706,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/TestGeoUtils#testGeoHash().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGeoHash() {\n    int numPoints = atLeast(100);\n    String randomGeoHashString;\n    String mortonGeoHash;\n    long mortonLongFromGHLong, geoHashLong, mortonLongFromGHString;\n    int randomLevel;\n    for (int i = 0; i < numPoints; ++i) {\n      // random point\n      double lat = randomLatFullRange();\n      double lon = randomLonFullRange();\n\n      // compute geohash straight from lat/lon and from morton encoded value to ensure they're the same\n      randomGeoHashString = GeoHashUtils.stringEncode(lon, lat, randomLevel = random().nextInt(12 - 1) + 1);\n      mortonGeoHash = GeoHashUtils.stringEncodeFromMortonLong(GeoUtils.mortonHash(lon, lat), randomLevel);\n      assertEquals(randomGeoHashString, mortonGeoHash);\n\n      // v&v conversion from lat/lon or geohashstring to geohash long and back to geohash string\n      geoHashLong = (random().nextBoolean()) ? GeoHashUtils.longEncode(lon, lat, randomLevel) : GeoHashUtils.longEncode(randomGeoHashString);\n      assertEquals(randomGeoHashString, GeoHashUtils.stringEncode(geoHashLong));\n\n      // v&v conversion from geohash long to morton long\n      mortonLongFromGHString = GeoHashUtils.mortonEncode(randomGeoHashString);\n      mortonLongFromGHLong = GeoHashUtils.mortonEncode(geoHashLong);\n      assertEquals(mortonLongFromGHLong, mortonLongFromGHString);\n\n      // v&v lat/lon from geohash string and geohash long\n      assertEquals(GeoUtils.mortonUnhashLat(mortonLongFromGHString), GeoUtils.mortonUnhashLat(mortonLongFromGHLong), 0);\n      assertEquals(GeoUtils.mortonUnhashLon(mortonLongFromGHString), GeoUtils.mortonUnhashLon(mortonLongFromGHLong), 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/TestGeoUtils#testGeoHash().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/TestGeoUtils#testGeoHash().mjava","sourceNew":"  public void testGeoHash() {\n    int numPoints = atLeast(100);\n    String randomGeoHashString;\n    String mortonGeoHash;\n    long mortonLongFromGHLong, geoHashLong, mortonLongFromGHString;\n    int randomLevel;\n    for (int i = 0; i < numPoints; ++i) {\n      // random point\n      double lat = randomLat(false);\n      double lon = randomLon(false);\n\n      // compute geohash straight from lat/lon and from morton encoded value to ensure they're the same\n      randomGeoHashString = GeoHashUtils.stringEncode(lon, lat, randomLevel = random().nextInt(12 - 1) + 1);\n      mortonGeoHash = GeoHashUtils.stringEncodeFromMortonLong(GeoUtils.mortonHash(lon, lat), randomLevel);\n      assertEquals(randomGeoHashString, mortonGeoHash);\n\n      // v&v conversion from lat/lon or geohashstring to geohash long and back to geohash string\n      geoHashLong = (random().nextBoolean()) ? GeoHashUtils.longEncode(lon, lat, randomLevel) : GeoHashUtils.longEncode(randomGeoHashString);\n      assertEquals(randomGeoHashString, GeoHashUtils.stringEncode(geoHashLong));\n\n      // v&v conversion from geohash long to morton long\n      mortonLongFromGHString = GeoHashUtils.mortonEncode(randomGeoHashString);\n      mortonLongFromGHLong = GeoHashUtils.mortonEncode(geoHashLong);\n      assertEquals(mortonLongFromGHLong, mortonLongFromGHString);\n\n      // v&v lat/lon from geohash string and geohash long\n      assertEquals(GeoUtils.mortonUnhashLat(mortonLongFromGHString), GeoUtils.mortonUnhashLat(mortonLongFromGHLong), 0);\n      assertEquals(GeoUtils.mortonUnhashLon(mortonLongFromGHString), GeoUtils.mortonUnhashLon(mortonLongFromGHLong), 0);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGeoHash() {\n    int numPoints = atLeast(100);\n    String randomGeoHashString;\n    String mortonGeoHash;\n    long mortonLongFromGHLong, geoHashLong, mortonLongFromGHString;\n    int randomLevel;\n    for (int i = 0; i < numPoints; ++i) {\n      // random point\n      double lat = randomLatFullRange();\n      double lon = randomLonFullRange();\n\n      // compute geohash straight from lat/lon and from morton encoded value to ensure they're the same\n      randomGeoHashString = GeoHashUtils.stringEncode(lon, lat, randomLevel = random().nextInt(12 - 1) + 1);\n      mortonGeoHash = GeoHashUtils.stringEncodeFromMortonLong(GeoUtils.mortonHash(lon, lat), randomLevel);\n      assertEquals(randomGeoHashString, mortonGeoHash);\n\n      // v&v conversion from lat/lon or geohashstring to geohash long and back to geohash string\n      geoHashLong = (random().nextBoolean()) ? GeoHashUtils.longEncode(lon, lat, randomLevel) : GeoHashUtils.longEncode(randomGeoHashString);\n      assertEquals(randomGeoHashString, GeoHashUtils.stringEncode(geoHashLong));\n\n      // v&v conversion from geohash long to morton long\n      mortonLongFromGHString = GeoHashUtils.mortonEncode(randomGeoHashString);\n      mortonLongFromGHLong = GeoHashUtils.mortonEncode(geoHashLong);\n      assertEquals(mortonLongFromGHLong, mortonLongFromGHString);\n\n      // v&v lat/lon from geohash string and geohash long\n      assertEquals(GeoUtils.mortonUnhashLat(mortonLongFromGHString), GeoUtils.mortonUnhashLat(mortonLongFromGHLong), 0);\n      assertEquals(GeoUtils.mortonUnhashLon(mortonLongFromGHString), GeoUtils.mortonUnhashLon(mortonLongFromGHLong), 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testGeoHash().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/TestGeoUtils#testGeoHash().mjava","sourceNew":"  public void testGeoHash() {\n    int numPoints = atLeast(100);\n    String randomGeoHashString;\n    String mortonGeoHash;\n    long mortonLongFromGHLong, geoHashLong, mortonLongFromGHString;\n    int randomLevel;\n    for (int i = 0; i < numPoints; ++i) {\n      // random point\n      double lat = randomLat(false);\n      double lon = randomLon(false);\n\n      // compute geohash straight from lat/lon and from morton encoded value to ensure they're the same\n      randomGeoHashString = GeoHashUtils.stringEncode(lon, lat, randomLevel = random().nextInt(12 - 1) + 1);\n      mortonGeoHash = GeoHashUtils.stringEncodeFromMortonLong(GeoUtils.mortonHash(lon, lat), randomLevel);\n      assertEquals(randomGeoHashString, mortonGeoHash);\n\n      // v&v conversion from lat/lon or geohashstring to geohash long and back to geohash string\n      geoHashLong = (random().nextBoolean()) ? GeoHashUtils.longEncode(lon, lat, randomLevel) : GeoHashUtils.longEncode(randomGeoHashString);\n      assertEquals(randomGeoHashString, GeoHashUtils.stringEncode(geoHashLong));\n\n      // v&v conversion from geohash long to morton long\n      mortonLongFromGHString = GeoHashUtils.mortonEncode(randomGeoHashString);\n      mortonLongFromGHLong = GeoHashUtils.mortonEncode(geoHashLong);\n      assertEquals(mortonLongFromGHLong, mortonLongFromGHString);\n\n      // v&v lat/lon from geohash string and geohash long\n      assertEquals(GeoUtils.mortonUnhashLat(mortonLongFromGHString), GeoUtils.mortonUnhashLat(mortonLongFromGHLong), 0);\n      assertEquals(GeoUtils.mortonUnhashLon(mortonLongFromGHString), GeoUtils.mortonUnhashLon(mortonLongFromGHLong), 0);\n    }\n  }\n\n","sourceOld":"  public void testGeoHash() {\n    int numPoints = atLeast(100);\n    String randomGeoHashString;\n    String mortonGeoHash;\n    long mortonLongFromGHLong, geoHashLong, mortonLongFromGHString;\n    int randomLevel;\n    for (int i = 0; i < numPoints; ++i) {\n      // random point\n      double lat = randomLat(false);\n      double lon = randomLon(false);\n\n      // compute geohash straight from lat/lon and from morton encoded value to ensure they're the same\n      randomGeoHashString = GeoHashUtils.stringEncode(lon, lat, randomLevel = random().nextInt(12 - 1) + 1);\n      mortonGeoHash = GeoHashUtils.stringEncodeFromMortonLong(GeoUtils.mortonHash(lon, lat), randomLevel);\n      assertEquals(randomGeoHashString, mortonGeoHash);\n\n      // v&v conversion from lat/lon or geohashstring to geohash long and back to geohash string\n      geoHashLong = (random().nextBoolean()) ? GeoHashUtils.longEncode(lon, lat, randomLevel) : GeoHashUtils.longEncode(randomGeoHashString);\n      assertEquals(randomGeoHashString, GeoHashUtils.stringEncode(geoHashLong));\n\n      // v&v conversion from geohash long to morton long\n      mortonLongFromGHString = GeoHashUtils.mortonEncode(randomGeoHashString);\n      mortonLongFromGHLong = GeoHashUtils.mortonEncode(geoHashLong);\n      assertEquals(mortonLongFromGHLong, mortonLongFromGHString);\n\n      // v&v lat/lon from geohash string and geohash long\n      assertEquals(GeoUtils.mortonUnhashLat(mortonLongFromGHString), GeoUtils.mortonUnhashLat(mortonLongFromGHLong), 0);\n      assertEquals(GeoUtils.mortonUnhashLon(mortonLongFromGHString), GeoUtils.mortonUnhashLon(mortonLongFromGHLong), 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testGeoHash().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/TestGeoUtils#testGeoHash().mjava","sourceNew":"  public void testGeoHash() {\n    int numPoints = atLeast(100);\n    String randomGeoHashString;\n    String mortonGeoHash;\n    long mortonLongFromGHLong, geoHashLong, mortonLongFromGHString;\n    int randomLevel;\n    for (int i = 0; i < numPoints; ++i) {\n      // random point\n      double lat = randomLat(false);\n      double lon = randomLon(false);\n\n      // compute geohash straight from lat/lon and from morton encoded value to ensure they're the same\n      randomGeoHashString = GeoHashUtils.stringEncode(lon, lat, randomLevel = random().nextInt(12 - 1) + 1);\n      mortonGeoHash = GeoHashUtils.stringEncodeFromMortonLong(GeoEncodingUtils.mortonHash(lon, lat), randomLevel);\n      assertEquals(randomGeoHashString, mortonGeoHash);\n\n      // v&v conversion from lat/lon or geohashstring to geohash long and back to geohash string\n      geoHashLong = (random().nextBoolean()) ? GeoHashUtils.longEncode(lon, lat, randomLevel) : GeoHashUtils.longEncode(randomGeoHashString);\n      assertEquals(randomGeoHashString, GeoHashUtils.stringEncode(geoHashLong));\n\n      // v&v conversion from geohash long to morton long\n      mortonLongFromGHString = GeoHashUtils.mortonEncode(randomGeoHashString);\n      mortonLongFromGHLong = GeoHashUtils.mortonEncode(geoHashLong);\n      assertEquals(mortonLongFromGHLong, mortonLongFromGHString);\n\n      // v&v lat/lon from geohash string and geohash long\n      assertEquals(GeoEncodingUtils.mortonUnhashLat(mortonLongFromGHString), GeoEncodingUtils.mortonUnhashLat(mortonLongFromGHLong), 0);\n      assertEquals(GeoEncodingUtils.mortonUnhashLon(mortonLongFromGHString), GeoEncodingUtils.mortonUnhashLon(mortonLongFromGHLong), 0);\n    }\n  }\n\n","sourceOld":"  public void testGeoHash() {\n    int numPoints = atLeast(100);\n    String randomGeoHashString;\n    String mortonGeoHash;\n    long mortonLongFromGHLong, geoHashLong, mortonLongFromGHString;\n    int randomLevel;\n    for (int i = 0; i < numPoints; ++i) {\n      // random point\n      double lat = randomLat(false);\n      double lon = randomLon(false);\n\n      // compute geohash straight from lat/lon and from morton encoded value to ensure they're the same\n      randomGeoHashString = GeoHashUtils.stringEncode(lon, lat, randomLevel = random().nextInt(12 - 1) + 1);\n      mortonGeoHash = GeoHashUtils.stringEncodeFromMortonLong(GeoUtils.mortonHash(lon, lat), randomLevel);\n      assertEquals(randomGeoHashString, mortonGeoHash);\n\n      // v&v conversion from lat/lon or geohashstring to geohash long and back to geohash string\n      geoHashLong = (random().nextBoolean()) ? GeoHashUtils.longEncode(lon, lat, randomLevel) : GeoHashUtils.longEncode(randomGeoHashString);\n      assertEquals(randomGeoHashString, GeoHashUtils.stringEncode(geoHashLong));\n\n      // v&v conversion from geohash long to morton long\n      mortonLongFromGHString = GeoHashUtils.mortonEncode(randomGeoHashString);\n      mortonLongFromGHLong = GeoHashUtils.mortonEncode(geoHashLong);\n      assertEquals(mortonLongFromGHLong, mortonLongFromGHString);\n\n      // v&v lat/lon from geohash string and geohash long\n      assertEquals(GeoUtils.mortonUnhashLat(mortonLongFromGHString), GeoUtils.mortonUnhashLat(mortonLongFromGHLong), 0);\n      assertEquals(GeoUtils.mortonUnhashLon(mortonLongFromGHString), GeoUtils.mortonUnhashLon(mortonLongFromGHLong), 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11540ae0536f080714982c91b67e799273893920":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["07c50cb1eca5629cac5b6702dd0f5e06157af61a","937923083e4d137932336fc80f3d78758ff698a6"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["11540ae0536f080714982c91b67e799273893920"],"937923083e4d137932336fc80f3d78758ff698a6":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"]},"commit2Childs":{"11540ae0536f080714982c91b67e799273893920":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11540ae0536f080714982c91b67e799273893920"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}