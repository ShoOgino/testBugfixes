{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#CollapsingFieldValueCollector(int,int,SortedDocValues,int,String,boolean,boolean,FieldType,IntIntOpenHashMap,FunctionQuery,IndexSearcher).mjava","commits":[{"id":"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7","date":1401992910,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#CollapsingFieldValueCollector(int,int,SortedDocValues,int,String,boolean,boolean,FieldType,IntIntOpenHashMap,FunctionQuery,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#CollapsingFieldValueCollector(int,int,SortedDocValues,int,String,boolean,boolean,FieldType,IntOpenHashSet,FunctionQuery,IndexSearcher).mjava","sourceNew":"    public CollapsingFieldValueCollector(int maxDoc,\n                                         int segments,\n                                         SortedDocValues values,\n                                         int nullPolicy,\n                                         String field,\n                                         boolean max,\n                                         boolean needsScores,\n                                         FieldType fieldType,\n                                         IntIntOpenHashMap boostDocs,\n                                         FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      this.maxDoc = maxDoc;\n      this.contexts = new AtomicReaderContext[segments];\n      this.values = values;\n      int valueCount = values.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      this.boostDocs = boostDocs;\n      if(funcQuery != null) {\n        this.fieldValueCollapse =  new ValueSourceCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, funcQuery, searcher, values);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.fieldValueCollapse = new IntValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, values);\n        } else if(fieldType instanceof TrieLongField) {\n          this.fieldValueCollapse =  new LongValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, values);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.fieldValueCollapse =  new FloatValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, values);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong or TrieFloat.\");\n        }\n      }\n    }\n\n","sourceOld":"    public CollapsingFieldValueCollector(int maxDoc,\n                                         int segments,\n                                         SortedDocValues values,\n                                         int nullPolicy,\n                                         String field,\n                                         boolean max,\n                                         boolean needsScores,\n                                         FieldType fieldType,\n                                         IntOpenHashSet boostDocs,\n                                         FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      this.maxDoc = maxDoc;\n      this.contexts = new AtomicReaderContext[segments];\n      this.values = values;\n      int valueCount = values.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      this.boostDocs = boostDocs;\n      if(funcQuery != null) {\n        this.fieldValueCollapse =  new ValueSourceCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, funcQuery, searcher, values);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.fieldValueCollapse = new IntValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, values);\n        } else if(fieldType instanceof TrieLongField) {\n          this.fieldValueCollapse =  new LongValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, values);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.fieldValueCollapse =  new FloatValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, values);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong or TrieFloat.\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#CollapsingFieldValueCollector(int,int,SortedDocValues,int,String,boolean,boolean,FieldType,IntIntOpenHashMap,FunctionQuery,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#CollapsingFieldValueCollector(int,int,SortedDocValues,int,String,boolean,boolean,FieldType,IntIntOpenHashMap,FunctionQuery,IndexSearcher).mjava","sourceNew":"    public CollapsingFieldValueCollector(int maxDoc,\n                                         int segments,\n                                         SortedDocValues values,\n                                         int nullPolicy,\n                                         String field,\n                                         boolean max,\n                                         boolean needsScores,\n                                         FieldType fieldType,\n                                         IntIntOpenHashMap boostDocs,\n                                         FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.values = values;\n      int valueCount = values.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      this.boostDocs = boostDocs;\n      if(funcQuery != null) {\n        this.fieldValueCollapse =  new ValueSourceCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, funcQuery, searcher, values);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.fieldValueCollapse = new IntValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, values);\n        } else if(fieldType instanceof TrieLongField) {\n          this.fieldValueCollapse =  new LongValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, values);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.fieldValueCollapse =  new FloatValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, values);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong or TrieFloat.\");\n        }\n      }\n    }\n\n","sourceOld":"    public CollapsingFieldValueCollector(int maxDoc,\n                                         int segments,\n                                         SortedDocValues values,\n                                         int nullPolicy,\n                                         String field,\n                                         boolean max,\n                                         boolean needsScores,\n                                         FieldType fieldType,\n                                         IntIntOpenHashMap boostDocs,\n                                         FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      this.maxDoc = maxDoc;\n      this.contexts = new AtomicReaderContext[segments];\n      this.values = values;\n      int valueCount = values.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      this.boostDocs = boostDocs;\n      if(funcQuery != null) {\n        this.fieldValueCollapse =  new ValueSourceCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, funcQuery, searcher, values);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.fieldValueCollapse = new IntValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, values);\n        } else if(fieldType instanceof TrieLongField) {\n          this.fieldValueCollapse =  new LongValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, values);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.fieldValueCollapse =  new FloatValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, values);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong or TrieFloat.\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ced52befdc8d88d90766aadbaac496f3fd0e4ee","date":1421070034,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#CollapsingFieldValueCollector(int,int,SortedDocValues,int,String,boolean,boolean,FieldType,IntIntOpenHashMap,FunctionQuery,IndexSearcher).mjava","sourceNew":null,"sourceOld":"    public CollapsingFieldValueCollector(int maxDoc,\n                                         int segments,\n                                         SortedDocValues values,\n                                         int nullPolicy,\n                                         String field,\n                                         boolean max,\n                                         boolean needsScores,\n                                         FieldType fieldType,\n                                         IntIntOpenHashMap boostDocs,\n                                         FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.values = values;\n      int valueCount = values.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      this.boostDocs = boostDocs;\n      if(funcQuery != null) {\n        this.fieldValueCollapse =  new ValueSourceCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, funcQuery, searcher, values);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.fieldValueCollapse = new IntValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, values);\n        } else if(fieldType instanceof TrieLongField) {\n          this.fieldValueCollapse =  new LongValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, values);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.fieldValueCollapse =  new FloatValueCollapse(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, values);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong or TrieFloat.\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"]},"commit2Childs":{"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}