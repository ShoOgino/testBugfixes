{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    lock.lock();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      boolean res = liveNodes.remove(nodeId);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        cloudManager.submit(new LeaderElection(collections, true));\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","sourceNew":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    lock.lock();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      boolean res = liveNodes.remove(nodeId);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    lock.lock();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      boolean res = liveNodes.remove(nodeId);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        cloudManager.submit(new LeaderElection(collections, true));\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","sourceNew":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    lock.lockInterruptibly();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      boolean res = liveNodes.remove(nodeId);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    lock.lock();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      boolean res = liveNodes.remove(nodeId);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","sourceNew":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    lock.lockInterruptibly();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      boolean res = liveNodes.remove(nodeId);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    lock.lock();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      boolean res = liveNodes.remove(nodeId);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","sourceNew":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    lock.lockInterruptibly();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      boolean res = liveNodes.remove(nodeId);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      updateOverseerLeader();\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    lock.lockInterruptibly();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      boolean res = liveNodes.remove(nodeId);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad60b6945c360ff89899d716d9cdec8dd674e2a0","date":1528114819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","sourceNew":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    lock.lockInterruptibly();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      boolean res = liveNodes.remove(nodeId);\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      updateOverseerLeader();\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    lock.lockInterruptibly();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      boolean res = liveNodes.remove(nodeId);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      updateOverseerLeader();\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","sourceNew":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    lock.lockInterruptibly();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      boolean res = liveNodes.remove(nodeId);\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      updateOverseerLeader();\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    lock.lockInterruptibly();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      boolean res = liveNodes.remove(nodeId);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      updateOverseerLeader();\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","sourceNew":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    lock.lockInterruptibly();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      boolean res = liveNodes.remove(nodeId);\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      updateOverseerLeader();\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    lock.lockInterruptibly();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      boolean res = liveNodes.remove(nodeId);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      updateOverseerLeader();\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","sourceNew":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    ensureNotClosed();\n    lock.lockInterruptibly();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      boolean res = liveNodes.remove(nodeId);\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      updateOverseerLeader();\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    lock.lockInterruptibly();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      boolean res = liveNodes.remove(nodeId);\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      updateOverseerLeader();\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7fb1186f5b61e0b74289e6786df8cbecfa471bc","date":1545308188,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","sourceNew":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    ensureNotClosed();\n    lock.lockInterruptibly();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      boolean res = liveNodes.remove(nodeId);\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId;\n        byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", cloudManager.getTimeSource().getEpochTimeNs()));\n        stateManager.makePath(path,\n            json, CreateMode.PERSISTENT, false);\n        log.debug(\" -- created marker: {}\", path);\n      }\n      updateOverseerLeader();\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    ensureNotClosed();\n    lock.lockInterruptibly();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      boolean res = liveNodes.remove(nodeId);\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      updateOverseerLeader();\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId);\n      }\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveNode(String).mjava","sourceNew":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    ensureNotClosed();\n    lock.lockInterruptibly();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      boolean res = liveNodes.remove(nodeId);\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId;\n        byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", cloudManager.getTimeSource().getEpochTimeNs()));\n        stateManager.makePath(path,\n            json, CreateMode.PERSISTENT, false);\n        log.debug(\" -- created marker: {}\", path);\n      }\n      updateOverseerLeader();\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove node from a cluster. This is equivalent to a situation when a node is lost.\n   * All replicas that were assigned to this node are marked as DOWN.\n   * @param nodeId node id\n   * @return true if a node existed and was removed\n   */\n  public boolean simRemoveNode(String nodeId) throws Exception {\n    ensureNotClosed();\n    lock.lockInterruptibly();\n    try {\n      Set<String> collections = new HashSet<>();\n      // mark every replica on that node as down\n      boolean res = liveNodes.remove(nodeId);\n      setReplicaStates(nodeId, Replica.State.DOWN, collections);\n      if (!collections.isEmpty()) {\n        collectionsStatesRef.set(null);\n      }\n      // remove ephemeral nodes\n      stateManager.getRoot().removeEphemeralChildren(nodeId);\n      // create a nodeLost marker if needed\n      AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n      if (cfg.hasTriggerForEvents(TriggerEventType.NODELOST)) {\n        String path = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + nodeId;\n        byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", cloudManager.getTimeSource().getEpochTimeNs()));\n        stateManager.makePath(path,\n            json, CreateMode.PERSISTENT, false);\n        log.debug(\" -- created marker: {}\", path);\n      }\n      updateOverseerLeader();\n      if (!collections.isEmpty()) {\n        simRunLeaderElection(collections, true);\n      }\n      return res;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43345f1452f9510f8aaadae6156fe0c834e7d957":["a4422b331d00607258b0ed3e43934306e67764aa","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["a4422b331d00607258b0ed3e43934306e67764aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"a4422b331d00607258b0ed3e43934306e67764aa":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"f592209545c71895260367152601e9200399776d":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"43345f1452f9510f8aaadae6156fe0c834e7d957":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["b70042a8a492f7054d480ccdd2be9796510d4327","ad60b6945c360ff89899d716d9cdec8dd674e2a0","f592209545c71895260367152601e9200399776d"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"a4422b331d00607258b0ed3e43934306e67764aa":["43345f1452f9510f8aaadae6156fe0c834e7d957","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a4422b331d00607258b0ed3e43934306e67764aa"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["042b92cf48996255bedb0c3c4bf772d7e06e4dea","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}