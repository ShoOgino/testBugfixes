{"path":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SloppySimScorer).mjava","commits":[{"id":"660345363f16c7d4c38aa11a35bf59aa99466cf1","date":1328227279,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SloppySimScorer).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SloppyDocScorer).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity.SloppySimScorer docScorer) {\n    super(weight);\n    this.docScorer = docScorer;\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    if (postings.length > 0) {\n      min = new PhrasePositions(postings[0].postings, postings[0].position, 0);\n      max = min;\n      max.doc = -1;\n      for (int i = 1; i < postings.length; i++) {\n        PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n        max.next = pp;\n        max = pp;\n        max.doc = -1;\n      }\n      max.next = min; // make it cyclic for easier manipulation\n    }\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity.SloppyDocScorer docScorer) {\n    super(weight);\n    this.docScorer = docScorer;\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    if (postings.length > 0) {\n      min = new PhrasePositions(postings[0].postings, postings[0].position, 0);\n      max = min;\n      max.doc = -1;\n      for (int i = 1; i < postings.length; i++) {\n        PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n        max.next = pp;\n        max = pp;\n        max.doc = -1;\n      }\n      max.next = min; // make it cyclic for easier manipulation\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SloppySimScorer).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SloppySimScorer).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity.SloppySimScorer docScorer) {\n    super(weight);\n    this.docScorer = docScorer;\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    if (postings.length > 0) {\n      min = new PhrasePositions(postings[0].postings, postings[0].position, 0);\n      max = min;\n      max.doc = -1;\n      for (int i = 1; i < postings.length; i++) {\n        PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n        max.next = pp;\n        max = pp;\n        max.doc = -1;\n      }\n      max.next = min; // make it cyclic for easier manipulation\n    }\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity.SloppySimScorer docScorer) {\n    super(weight);\n    this.docScorer = docScorer;\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    if (postings.length > 0) {\n      min = new PhrasePositions(postings[0].postings, postings[0].position, 0);\n      max = min;\n      max.doc = -1;\n      for (int i = 1; i < postings.length; i++) {\n        PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n        max.next = pp;\n        max = pp;\n        max.doc = -1;\n      }\n      max.next = min; // make it cyclic for easier manipulation\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"660345363f16c7d4c38aa11a35bf59aa99466cf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"660345363f16c7d4c38aa11a35bf59aa99466cf1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}