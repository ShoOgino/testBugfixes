{"path":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"/dev/null","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    // make sure the String returned is the exact same instance (i.e. same FieldCache instance)\n    assertTrue(sval1 == getStringVal(sr2,\"v_s\",0));\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n    String beforeDelete = getStringVal(sr5, \"v_s\",1);\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr4.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n    String afterDelete = getStringVal(sr6, \"v_s\",1);\n    assertTrue( beforeDelete == afterDelete );  // same field cache is used even though deletions are different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":null,"sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    // make sure the String returned is the exact same instance (i.e. same FieldCache instance)\n    assertTrue(sval1 == getStringVal(sr2,\"v_s\",0));\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n    String beforeDelete = getStringVal(sr5, \"v_s\",1);\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr4.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n    String afterDelete = getStringVal(sr6, \"v_s\",1);\n    assertTrue( beforeDelete == afterDelete );  // same field cache is used even though deletions are different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    // make sure the String returned is the exact same instance (i.e. same FieldCache instance)\n    assertTrue(sval1 == getStringVal(sr2,\"v_s\",0));\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n    String beforeDelete = getStringVal(sr5, \"v_s\",1);\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr4.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n    String afterDelete = getStringVal(sr6, \"v_s\",1);\n    assertTrue( beforeDelete == afterDelete );  // same field cache is used even though deletions are different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    // make sure the String returned is the exact same instance (i.e. same FieldCache instance)\n    assertTrue(sval1 == getStringVal(sr2,\"v_s\",0));\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n    String beforeDelete = getStringVal(sr5, \"v_s\",1);\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr4.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n    String afterDelete = getStringVal(sr6, \"v_s\",1);\n    assertTrue( beforeDelete == afterDelete );  // same field cache is used even though deletions are different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"/dev/null","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    // make sure the String returned is the exact same instance (i.e. same FieldCache instance)\n    assertTrue(sval1 == getStringVal(sr2,\"v_s\",0));\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n    String beforeDelete = getStringVal(sr5, \"v_s\",1);\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr4.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n    String afterDelete = getStringVal(sr6, \"v_s\",1);\n    assertTrue( beforeDelete == afterDelete );  // same field cache is used even though deletions are different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr4.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    // make sure the String returned is the exact same instance (i.e. same FieldCache instance)\n    assertTrue(sval1 == getStringVal(sr2,\"v_s\",0));\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n    String beforeDelete = getStringVal(sr5, \"v_s\",1);\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr4.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n    String afterDelete = getStringVal(sr6, \"v_s\",1);\n    assertTrue( beforeDelete == afterDelete );  // same field cache is used even though deletions are different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d5170be25b5c45f0bea283c50400e91acc20e9e4","date":1287510737,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr6.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr4.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr6.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr4.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr6.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr4.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr6.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr6.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    SolrIndexReader r1 = sr1.getSearcher().getReader();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    SolrIndexReader r2 = sr2.getSearcher().getReader();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    SolrIndexReader r3 = sr3.getSearcher().getReader();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = r3.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    SolrIndexReader r4 = sr4.getSearcher().getReader();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(r3,r4);\n    assertEquals(baseRefCount+1, r4.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, r4.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, r4.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    SolrIndexReader r5 = sr5.getSearcher().getReader();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    SolrIndexReader r6 = sr6.getSearcher().getReader();\n    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment\n    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7e2c5596ef3fbb03572368a66afb40a500404ab","date":1297903084,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":["d1475fdbacd73c160adc96a10aadc123d489b583","67c235d01c1c73de7adf247bea37221dd735dcd4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestIndexSearcher#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n\n    assertU(adoc(\"id\",\"1\", \"v_t\",\"Hello Dude\", \"v_s1\",\"string1\"));\n    assertU(adoc(\"id\",\"2\", \"v_t\",\"Hello Yonik\", \"v_s1\",\"string2\"));\n    assertU(commit());\n\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();\n\n    String sval1 = getStringVal(sr1, \"v_s1\",0);\n    assertEquals(\"string1\", sval1);\n\n    assertU(adoc(\"id\",\"3\", \"v_s1\",\"{!literal}\"));\n    assertU(adoc(\"id\",\"4\", \"v_s1\",\"other stuff\"));\n    assertU(commit());\n\n    SolrQueryRequest sr2 = req(\"q\",\"foo\");\n    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();\n\n    // make sure the readers share the first segment\n    // Didn't work w/ older versions of lucene2.9 going from segment -> multi\n    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);\n\n    assertU(adoc(\"id\",\"5\", \"v_f\",\"3.14159\"));\n    assertU(adoc(\"id\",\"6\", \"v_f\",\"8983\", \"v_s1\",\"string6\"));\n    assertU(commit());\n\n    SolrQueryRequest sr3 = req(\"q\",\"foo\");\n    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();\n    // make sure the readers share segments\n    // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);\n    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);\n    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);\n\n    sr1.close();\n    sr2.close();            \n\n    // should currently be 1, but this could change depending on future index management\n    int baseRefCount = rCtx3.reader.getRefCount();\n    assertEquals(1, baseRefCount);\n\n    assertU(commit());\n    SolrQueryRequest sr4 = req(\"q\",\"foo\");\n    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();\n\n    // force an index change so the registered searcher won't be the one we are testing (and\n    // then we should be able to test the refCount going all the way to 0\n    assertU(adoc(\"id\",\"7\", \"v_f\",\"7574\"));\n    assertU(commit()); \n\n    // test that reader didn't change (according to equals at least... which uses the wrapped reader)\n    assertEquals(rCtx3.reader, rCtx4.reader);\n    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());\n    sr3.close();\n    assertEquals(baseRefCount, rCtx4.reader.getRefCount());\n    sr4.close();\n    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());\n\n\n    SolrQueryRequest sr5 = req(\"q\",\"foo\");\n    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();\n\n    assertU(delI(\"1\"));\n    assertU(commit());\n    SolrQueryRequest sr6 = req(\"q\",\"foo\");\n    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();\n    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment\n    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different\n\n    sr5.close();\n    sr6.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"323f871ffe96b871d8c534a614be60751bb023c2":["d5170be25b5c45f0bea283c50400e91acc20e9e4"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","f7e2c5596ef3fbb03572368a66afb40a500404ab"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["f7e2c5596ef3fbb03572368a66afb40a500404ab","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","d5170be25b5c45f0bea283c50400e91acc20e9e4"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"f7e2c5596ef3fbb03572368a66afb40a500404ab":["323f871ffe96b871d8c534a614be60751bb023c2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["f7e2c5596ef3fbb03572368a66afb40a500404ab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","323f871ffe96b871d8c534a614be60751bb023c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d5170be25b5c45f0bea283c50400e91acc20e9e4":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f7e2c5596ef3fbb03572368a66afb40a500404ab"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","d5170be25b5c45f0bea283c50400e91acc20e9e4"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","323f871ffe96b871d8c534a614be60751bb023c2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","f7e2c5596ef3fbb03572368a66afb40a500404ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d5170be25b5c45f0bea283c50400e91acc20e9e4","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"323f871ffe96b871d8c534a614be60751bb023c2":["f7e2c5596ef3fbb03572368a66afb40a500404ab","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"1da8d55113b689b06716246649de6f62430f15c0":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"f7e2c5596ef3fbb03572368a66afb40a500404ab":["f1bdbf92da222965b46c0a942c3857ba56e5c638","c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"d5170be25b5c45f0bea283c50400e91acc20e9e4":["323f871ffe96b871d8c534a614be60751bb023c2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}