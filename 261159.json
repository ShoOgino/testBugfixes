{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#confirmShardDeletion().mjava","commits":[{"id":"4ee5a5186e7187cd42c6f7ff64b6e7206a780325","date":1372914261,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#confirmShardDeletion().mjava","pathOld":"/dev/null","sourceNew":"  protected void confirmShardDeletion() throws SolrServerException, KeeperException,\n      InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ClusterState clusterState = null;\n    int counter = 10;\n    while (counter-- > 0) {\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      if (clusterState.getSlice(\"collection1\", SHARD1) == null) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    assertNull(\"Cluster still contains shard1 even after waiting for it to be deleted.\",\n        clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#confirmShardDeletion().mjava","pathOld":"/dev/null","sourceNew":"  protected void confirmShardDeletion() throws SolrServerException, KeeperException,\n      InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ClusterState clusterState = null;\n    int counter = 10;\n    while (counter-- > 0) {\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      if (clusterState.getSlice(\"collection1\", SHARD1) == null) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    assertNull(\"Cluster still contains shard1 even after waiting for it to be deleted.\",\n        clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b5f2c825882b5378afd6f911e0d1cd0274b7410","date":1378970050,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#confirmShardDeletion(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#confirmShardDeletion().mjava","sourceNew":"  protected void confirmShardDeletion(String shard) throws SolrServerException, KeeperException,\n      InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    int counter = 10;\n    while (counter-- > 0) {\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      if (clusterState.getSlice(\"collection1\", shard) == null) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    assertNull(\"Cluster still contains shard1 even after waiting for it to be deleted.\",\n        clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1));\n  }\n\n","sourceOld":"  protected void confirmShardDeletion() throws SolrServerException, KeeperException,\n      InterruptedException {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ClusterState clusterState = null;\n    int counter = 10;\n    while (counter-- > 0) {\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      if (clusterState.getSlice(\"collection1\", SHARD1) == null) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    assertNull(\"Cluster still contains shard1 even after waiting for it to be deleted.\",\n        clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0b5f2c825882b5378afd6f911e0d1cd0274b7410":["4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b5f2c825882b5378afd6f911e0d1cd0274b7410"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"0b5f2c825882b5378afd6f911e0d1cd0274b7410":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0b5f2c825882b5378afd6f911e0d1cd0274b7410"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}