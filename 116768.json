{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testMultiByteMTQ().mjava","commits":[{"id":"fb37680595d3fecd821eaa695beb5c9ced607584","date":1497668271,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testMultiByteMTQ().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-7719\n  public void testMultiByteMTQ() throws IOException {\n    Analyzer analyzer = new KeywordAnalyzer();\n    try (RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer)) {\n      for (int attempt = 0; attempt < 20; attempt++) {\n        iw.deleteAll();\n        String field = \"title\";\n        String value = RandomStrings.randomUnicodeOfLength(random(), 3);\n        if (value.contains(UnifiedHighlighter.MULTIVAL_SEP_CHAR+\"\")) { // will throw things off\n          continue;\n        }\n        int[] valuePoints = value.codePoints().toArray();\n\n        iw.addDocument(Collections.singleton(\n            new Field(field, value, fieldType)));\n        iw.commit();\n        try (IndexReader ir = iw.getReader()) {\n          IndexSearcher searcher = newSearcher(ir);\n          UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, analyzer);\n          highlighter.setBreakIterator(WholeBreakIterator::new);\n\n          // Test PrefixQuery\n          Query query = new PrefixQuery(new Term(field,\n              UnicodeUtil.newString(valuePoints, 0, 1)));\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          // Test TermRangeQuery\n          query = new TermRangeQuery(field,\n              new BytesRef(value),\n              new BytesRef(value),\n              true, true );\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          // Test FuzzyQuery\n          query = new FuzzyQuery(new Term(field, value + \"Z\"), 1);\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          if (valuePoints.length != 3) {\n            continue; // even though we ask RandomStrings for a String with 3 code points, it seems sometimes it's less\n          }\n\n          // Test WildcardQuery\n          query = new WildcardQuery(new Term(field,\n              new StringBuilder()\n                  .append(WildcardQuery.WILDCARD_ESCAPE).appendCodePoint(valuePoints[0])\n                  .append(WildcardQuery.WILDCARD_CHAR)\n                  .append(WildcardQuery.WILDCARD_ESCAPE).appendCodePoint(valuePoints[2]).toString()));\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          //TODO hmmm; how to randomly generate RegexpQuery? Low priority; we've covered the others well.\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testMultiByteMTQ().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-7719\n  public void testMultiByteMTQ() throws IOException {\n    Analyzer analyzer = new KeywordAnalyzer();\n    try (RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer)) {\n      for (int attempt = 0; attempt < 20; attempt++) {\n        iw.deleteAll();\n        String field = \"title\";\n        String value = RandomStrings.randomUnicodeOfLength(random(), 3);\n        if (value.contains(UnifiedHighlighter.MULTIVAL_SEP_CHAR+\"\")) { // will throw things off\n          continue;\n        }\n        int[] valuePoints = value.codePoints().toArray();\n\n        iw.addDocument(Collections.singleton(\n            new Field(field, value, fieldType)));\n        iw.commit();\n        try (IndexReader ir = iw.getReader()) {\n          IndexSearcher searcher = newSearcher(ir);\n          UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, analyzer);\n          highlighter.setBreakIterator(WholeBreakIterator::new);\n\n          // Test PrefixQuery\n          Query query = new PrefixQuery(new Term(field,\n              UnicodeUtil.newString(valuePoints, 0, 1)));\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          // Test TermRangeQuery\n          query = new TermRangeQuery(field,\n              new BytesRef(value),\n              new BytesRef(value),\n              true, true );\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          // Test FuzzyQuery\n          query = new FuzzyQuery(new Term(field, value + \"Z\"), 1);\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          if (valuePoints.length != 3) {\n            continue; // even though we ask RandomStrings for a String with 3 code points, it seems sometimes it's less\n          }\n\n          // Test WildcardQuery\n          query = new WildcardQuery(new Term(field,\n              new StringBuilder()\n                  .append(WildcardQuery.WILDCARD_ESCAPE).appendCodePoint(valuePoints[0])\n                  .append(WildcardQuery.WILDCARD_CHAR)\n                  .append(WildcardQuery.WILDCARD_ESCAPE).appendCodePoint(valuePoints[2]).toString()));\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          //TODO hmmm; how to randomly generate RegexpQuery? Low priority; we've covered the others well.\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testMultiByteMTQ().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-7719\n  public void testMultiByteMTQ() throws IOException {\n    Analyzer analyzer = new KeywordAnalyzer();\n    try (RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer)) {\n      for (int attempt = 0; attempt < 20; attempt++) {\n        iw.deleteAll();\n        String field = \"title\";\n        String value = RandomStrings.randomUnicodeOfLength(random(), 3);\n        if (value.contains(UnifiedHighlighter.MULTIVAL_SEP_CHAR+\"\")) { // will throw things off\n          continue;\n        }\n        int[] valuePoints = value.codePoints().toArray();\n\n        iw.addDocument(Collections.singleton(\n            new Field(field, value, fieldType)));\n        iw.commit();\n        try (IndexReader ir = iw.getReader()) {\n          IndexSearcher searcher = newSearcher(ir);\n          UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, analyzer);\n          highlighter.setBreakIterator(WholeBreakIterator::new);\n\n          // Test PrefixQuery\n          Query query = new PrefixQuery(new Term(field,\n              UnicodeUtil.newString(valuePoints, 0, 1)));\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          // Test TermRangeQuery\n          query = new TermRangeQuery(field,\n              new BytesRef(value),\n              new BytesRef(value),\n              true, true );\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          // Test FuzzyQuery\n          query = new FuzzyQuery(new Term(field, value + \"Z\"), 1);\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          if (valuePoints.length != 3) {\n            continue; // even though we ask RandomStrings for a String with 3 code points, it seems sometimes it's less\n          }\n\n          // Test WildcardQuery\n          query = new WildcardQuery(new Term(field,\n              new StringBuilder()\n                  .append(WildcardQuery.WILDCARD_ESCAPE).appendCodePoint(valuePoints[0])\n                  .append(WildcardQuery.WILDCARD_CHAR)\n                  .append(WildcardQuery.WILDCARD_ESCAPE).appendCodePoint(valuePoints[2]).toString()));\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          //TODO hmmm; how to randomly generate RegexpQuery? Low priority; we've covered the others well.\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571","date":1515642580,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testMultiByteMTQ().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testMultiByteMTQ().mjava","sourceNew":"  // LUCENE-7719\n  public void testMultiByteMTQ() throws IOException {\n    Analyzer analyzer = new KeywordAnalyzer();\n    try (RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer)) {\n      for (int attempt = 0; attempt < 20; attempt++) {\n        iw.deleteAll();\n        String field = \"title\";\n        String value = RandomStrings.randomUnicodeOfLength(random(), 3);\n        if (value.contains(UnifiedHighlighter.MULTIVAL_SEP_CHAR+\"\")) { // will throw things off\n          continue;\n        }\n        int[] valuePoints = value.codePoints().toArray();\n\n        iw.addDocument(Collections.singleton(\n            new Field(field, value, fieldType)));\n        iw.commit();\n        try (IndexReader ir = iw.getReader()) {\n          IndexSearcher searcher = newSearcher(ir);\n          UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, analyzer);\n          highlighter.setBreakIterator(WholeBreakIterator::new);\n\n          // Test PrefixQuery\n          Query query = new PrefixQuery(new Term(field,\n              UnicodeUtil.newString(valuePoints, 0, 1)));\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          // Test TermRangeQuery\n          query = new TermRangeQuery(field,\n              new BytesRef(value),\n              new BytesRef(value),\n              true, true );\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          // Test FuzzyQuery\n          query = new FuzzyQuery(new Term(field, value + \"Z\"), 1);\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          if (valuePoints.length != 3) {\n            continue; // even though we ask RandomStrings for a String with 3 code points, it seems sometimes it's less\n          }\n\n          // Test WildcardQuery\n          query = new WildcardQuery(new Term(field,\n              new StringBuilder()\n                  .append(WildcardQuery.WILDCARD_ESCAPE).appendCodePoint(valuePoints[0])\n                  .append(WildcardQuery.WILDCARD_CHAR)\n                  .append(WildcardQuery.WILDCARD_ESCAPE).appendCodePoint(valuePoints[2]).toString()));\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          //TODO hmmm; how to randomly generate RegexpQuery? Low priority; we've covered the others well.\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // LUCENE-7719\n  public void testMultiByteMTQ() throws IOException {\n    Analyzer analyzer = new KeywordAnalyzer();\n    try (RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer)) {\n      for (int attempt = 0; attempt < 20; attempt++) {\n        iw.deleteAll();\n        String field = \"title\";\n        String value = RandomStrings.randomUnicodeOfLength(random(), 3);\n        if (value.contains(UnifiedHighlighter.MULTIVAL_SEP_CHAR+\"\")) { // will throw things off\n          continue;\n        }\n        int[] valuePoints = value.codePoints().toArray();\n\n        iw.addDocument(Collections.singleton(\n            new Field(field, value, fieldType)));\n        iw.commit();\n        try (IndexReader ir = iw.getReader()) {\n          IndexSearcher searcher = newSearcher(ir);\n          UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, analyzer);\n          highlighter.setBreakIterator(WholeBreakIterator::new);\n\n          // Test PrefixQuery\n          Query query = new PrefixQuery(new Term(field,\n              UnicodeUtil.newString(valuePoints, 0, 1)));\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          // Test TermRangeQuery\n          query = new TermRangeQuery(field,\n              new BytesRef(value),\n              new BytesRef(value),\n              true, true );\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          // Test FuzzyQuery\n          query = new FuzzyQuery(new Term(field, value + \"Z\"), 1);\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          if (valuePoints.length != 3) {\n            continue; // even though we ask RandomStrings for a String with 3 code points, it seems sometimes it's less\n          }\n\n          // Test WildcardQuery\n          query = new WildcardQuery(new Term(field,\n              new StringBuilder()\n                  .append(WildcardQuery.WILDCARD_ESCAPE).appendCodePoint(valuePoints[0])\n                  .append(WildcardQuery.WILDCARD_CHAR)\n                  .append(WildcardQuery.WILDCARD_ESCAPE).appendCodePoint(valuePoints[2]).toString()));\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          //TODO hmmm; how to randomly generate RegexpQuery? Low priority; we've covered the others well.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testMultiByteMTQ().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testMultiByteMTQ().mjava","sourceNew":"  // LUCENE-7719\n  public void testMultiByteMTQ() throws IOException {\n    Analyzer analyzer = new KeywordAnalyzer();\n    try (RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer)) {\n      for (int attempt = 0; attempt < 20; attempt++) {\n        iw.deleteAll();\n        String field = \"title\";\n        String value = RandomStrings.randomUnicodeOfLength(random(), 3);\n        if (value.contains(UnifiedHighlighter.MULTIVAL_SEP_CHAR+\"\")) { // will throw things off\n          continue;\n        }\n        int[] valuePoints = value.codePoints().toArray();\n\n        iw.addDocument(Collections.singleton(\n            new Field(field, value, fieldType)));\n        iw.commit();\n        try (IndexReader ir = iw.getReader()) {\n          IndexSearcher searcher = newSearcher(ir);\n          UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, analyzer);\n          highlighter.setBreakIterator(WholeBreakIterator::new);\n\n          // Test PrefixQuery\n          Query query = new PrefixQuery(new Term(field,\n              UnicodeUtil.newString(valuePoints, 0, 1)));\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          // Test TermRangeQuery\n          query = new TermRangeQuery(field,\n              new BytesRef(value),\n              new BytesRef(value),\n              true, true );\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          // Test FuzzyQuery\n          query = new FuzzyQuery(new Term(field, value + \"Z\"), 1);\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          if (valuePoints.length != 3) {\n            continue; // even though we ask RandomStrings for a String with 3 code points, it seems sometimes it's less\n          }\n\n          // Test WildcardQuery\n          query = new WildcardQuery(new Term(field,\n              new StringBuilder()\n                  .append(WildcardQuery.WILDCARD_ESCAPE).appendCodePoint(valuePoints[0])\n                  .append(WildcardQuery.WILDCARD_CHAR)\n                  .append(WildcardQuery.WILDCARD_ESCAPE).appendCodePoint(valuePoints[2]).toString()));\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          //TODO hmmm; how to randomly generate RegexpQuery? Low priority; we've covered the others well.\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // LUCENE-7719\n  public void testMultiByteMTQ() throws IOException {\n    Analyzer analyzer = new KeywordAnalyzer();\n    try (RandomIndexWriter iw = new RandomIndexWriter(random(), dir, analyzer)) {\n      for (int attempt = 0; attempt < 20; attempt++) {\n        iw.deleteAll();\n        String field = \"title\";\n        String value = RandomStrings.randomUnicodeOfLength(random(), 3);\n        if (value.contains(UnifiedHighlighter.MULTIVAL_SEP_CHAR+\"\")) { // will throw things off\n          continue;\n        }\n        int[] valuePoints = value.codePoints().toArray();\n\n        iw.addDocument(Collections.singleton(\n            new Field(field, value, fieldType)));\n        iw.commit();\n        try (IndexReader ir = iw.getReader()) {\n          IndexSearcher searcher = newSearcher(ir);\n          UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, analyzer);\n          highlighter.setBreakIterator(WholeBreakIterator::new);\n\n          // Test PrefixQuery\n          Query query = new PrefixQuery(new Term(field,\n              UnicodeUtil.newString(valuePoints, 0, 1)));\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          // Test TermRangeQuery\n          query = new TermRangeQuery(field,\n              new BytesRef(value),\n              new BytesRef(value),\n              true, true );\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          // Test FuzzyQuery\n          query = new FuzzyQuery(new Term(field, value + \"Z\"), 1);\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          if (valuePoints.length != 3) {\n            continue; // even though we ask RandomStrings for a String with 3 code points, it seems sometimes it's less\n          }\n\n          // Test WildcardQuery\n          query = new WildcardQuery(new Term(field,\n              new StringBuilder()\n                  .append(WildcardQuery.WILDCARD_ESCAPE).appendCodePoint(valuePoints[0])\n                  .append(WildcardQuery.WILDCARD_CHAR)\n                  .append(WildcardQuery.WILDCARD_ESCAPE).appendCodePoint(valuePoints[2]).toString()));\n          highlightAndAssertMatch(searcher, highlighter, query, field, value);\n\n          //TODO hmmm; how to randomly generate RegexpQuery? Low priority; we've covered the others well.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb37680595d3fecd821eaa695beb5c9ced607584":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb37680595d3fecd821eaa695beb5c9ced607584"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb37680595d3fecd821eaa695beb5c9ced607584"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"fb37680595d3fecd821eaa695beb5c9ced607584":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb37680595d3fecd821eaa695beb5c9ced607584","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["b94236357aaa22b76c10629851fe4e376e0cea82"],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}