{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testNoWriter().mjava","commits":[{"id":"a8faff94826bf8d013f3eb49f31812dcb7140222","date":1372709352,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testNoWriter().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Verify that things still work if an IW has not been opened (and hence the CommitPoints have not been communicated to the deletion policy)\n   */\n  public void testNoWriter() throws Exception {\n    index(slaveClient, \"id\", \"123456\");\n    slaveClient.commit();\n    slaveJetty.stop();\n    // System.err.println(\"############ starting jetty\");\n    slaveJetty = createJetty(slave);\n    // System.err.println(\"############ done starting jetty\");\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    pullFromMasterToSlave();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c197d924bbbb6f3602aea4e57e93e68150cee3ef","date":1372714399,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testNoWriter().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testNoWriter().mjava","sourceNew":"  /**\n   * Verify that things still work if an IW has not been opened (and hence the CommitPoints have not been communicated to the deletion policy)\n   */\n  public void testNoWriter() throws Exception {\n    useFactory(null);    // force a persistent directory\n\n    // stop and start so they see the new directory setting\n    slaveJetty.stop();\n    masterJetty.stop();\n    slaveJetty.start(true);\n    masterJetty.start(true);\n\n    index(slaveClient, \"id\", \"123456\");\n    slaveClient.commit();\n    slaveJetty.stop();\n    slaveJetty.start(true);\n\n    // Currently we open a writer on-demand.  This is to test that we are correctly testing\n    // the code path when SolrDeletionPolicy.getLatestCommit() returns null.\n    // When we are using an ephemeral directory, an IW will always be opened to create the index and hence\n    // getLatestCommit will always be non-null.\n    CoreContainer cores = ((SolrDispatchFilter) slaveJetty.getDispatchFilter().getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    assertEquals(1, theCores.size());\n    SolrCore core = (SolrCore)theCores.toArray()[0];\n    assertNull( core.getDeletionPolicy().getLatestCommit() );\n\n\n    pullFromMasterToSlave();  // this will cause SnapPuller to be invoked and we will test when SolrDeletionPolicy.getLatestCommit() returns null\n\n    resetFactory();\n  }\n\n","sourceOld":"  /**\n   * Verify that things still work if an IW has not been opened (and hence the CommitPoints have not been communicated to the deletion policy)\n   */\n  public void testNoWriter() throws Exception {\n    index(slaveClient, \"id\", \"123456\");\n    slaveClient.commit();\n    slaveJetty.stop();\n    // System.err.println(\"############ starting jetty\");\n    slaveJetty = createJetty(slave);\n    // System.err.println(\"############ done starting jetty\");\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    pullFromMasterToSlave();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testNoWriter().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Verify that things still work if an IW has not been opened (and hence the CommitPoints have not been communicated to the deletion policy)\n   */\n  public void testNoWriter() throws Exception {\n    useFactory(null);    // force a persistent directory\n\n    // stop and start so they see the new directory setting\n    slaveJetty.stop();\n    masterJetty.stop();\n    slaveJetty.start(true);\n    masterJetty.start(true);\n\n    index(slaveClient, \"id\", \"123456\");\n    slaveClient.commit();\n    slaveJetty.stop();\n    slaveJetty.start(true);\n\n    // Currently we open a writer on-demand.  This is to test that we are correctly testing\n    // the code path when SolrDeletionPolicy.getLatestCommit() returns null.\n    // When we are using an ephemeral directory, an IW will always be opened to create the index and hence\n    // getLatestCommit will always be non-null.\n    CoreContainer cores = ((SolrDispatchFilter) slaveJetty.getDispatchFilter().getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    assertEquals(1, theCores.size());\n    SolrCore core = (SolrCore)theCores.toArray()[0];\n    assertNull( core.getDeletionPolicy().getLatestCommit() );\n\n\n    pullFromMasterToSlave();  // this will cause SnapPuller to be invoked and we will test when SolrDeletionPolicy.getLatestCommit() returns null\n\n    resetFactory();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65974810aff303cdaecff3dd789ae9353c1d9134","date":1376496589,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testNoWriter().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testNoWriter().mjava","sourceNew":"  /**\n   * Verify that things still work if an IW has not been opened (and hence the CommitPoints have not been communicated to the deletion policy)\n   */\n  public void testNoWriter() throws Exception {\n    useFactory(null);    // force a persistent directory\n\n    // read-only setting (no opening from indexwriter)\n    System.setProperty(\"solr.tests.reopenReaders\", \"false\");\n    try {\n    // stop and start so they see the new directory setting\n    slaveJetty.stop();\n    masterJetty.stop();\n    slaveJetty.start(true);\n    masterJetty.start(true);\n\n    index(slaveClient, \"id\", \"123456\");\n    slaveClient.commit();\n    slaveJetty.stop();\n    slaveJetty.start(true);\n    } finally {\n      System.clearProperty(\"solr.tests.reopenReaders\"); // dont mess with other tests\n    }\n\n    // Currently we open a writer on-demand.  This is to test that we are correctly testing\n    // the code path when SolrDeletionPolicy.getLatestCommit() returns null.\n    // When we are using an ephemeral directory, an IW will always be opened to create the index and hence\n    // getLatestCommit will always be non-null.\n    CoreContainer cores = ((SolrDispatchFilter) slaveJetty.getDispatchFilter().getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    assertEquals(1, theCores.size());\n    SolrCore core = (SolrCore)theCores.toArray()[0];\n    assertNull( core.getDeletionPolicy().getLatestCommit() );\n\n\n    pullFromMasterToSlave();  // this will cause SnapPuller to be invoked and we will test when SolrDeletionPolicy.getLatestCommit() returns null\n\n    resetFactory();\n  }\n\n","sourceOld":"  /**\n   * Verify that things still work if an IW has not been opened (and hence the CommitPoints have not been communicated to the deletion policy)\n   */\n  public void testNoWriter() throws Exception {\n    useFactory(null);    // force a persistent directory\n\n    // stop and start so they see the new directory setting\n    slaveJetty.stop();\n    masterJetty.stop();\n    slaveJetty.start(true);\n    masterJetty.start(true);\n\n    index(slaveClient, \"id\", \"123456\");\n    slaveClient.commit();\n    slaveJetty.stop();\n    slaveJetty.start(true);\n\n    // Currently we open a writer on-demand.  This is to test that we are correctly testing\n    // the code path when SolrDeletionPolicy.getLatestCommit() returns null.\n    // When we are using an ephemeral directory, an IW will always be opened to create the index and hence\n    // getLatestCommit will always be non-null.\n    CoreContainer cores = ((SolrDispatchFilter) slaveJetty.getDispatchFilter().getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    assertEquals(1, theCores.size());\n    SolrCore core = (SolrCore)theCores.toArray()[0];\n    assertNull( core.getDeletionPolicy().getLatestCommit() );\n\n\n    pullFromMasterToSlave();  // this will cause SnapPuller to be invoked and we will test when SolrDeletionPolicy.getLatestCommit() returns null\n\n    resetFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testNoWriter().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testNoWriter().mjava","sourceNew":"  /**\n   * Verify that things still work if an IW has not been opened (and hence the CommitPoints have not been communicated to the deletion policy)\n   */\n  public void testNoWriter() throws Exception {\n    useFactory(null);    // force a persistent directory\n\n    // read-only setting (no opening from indexwriter)\n    System.setProperty(\"solr.tests.reopenReaders\", \"false\");\n    try {\n    // stop and start so they see the new directory setting\n    slaveJetty.stop();\n    masterJetty.stop();\n    slaveJetty.start(true);\n    masterJetty.start(true);\n\n    index(slaveClient, \"id\", \"123456\");\n    slaveClient.commit();\n    slaveJetty.stop();\n    slaveJetty.start(true);\n    } finally {\n      System.clearProperty(\"solr.tests.reopenReaders\"); // dont mess with other tests\n    }\n\n    // Currently we open a writer on-demand.  This is to test that we are correctly testing\n    // the code path when SolrDeletionPolicy.getLatestCommit() returns null.\n    // When we are using an ephemeral directory, an IW will always be opened to create the index and hence\n    // getLatestCommit will always be non-null.\n    CoreContainer cores = ((SolrDispatchFilter) slaveJetty.getDispatchFilter().getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    assertEquals(1, theCores.size());\n    SolrCore core = (SolrCore)theCores.toArray()[0];\n    assertNull( core.getDeletionPolicy().getLatestCommit() );\n\n\n    pullFromMasterToSlave();  // this will cause SnapPuller to be invoked and we will test when SolrDeletionPolicy.getLatestCommit() returns null\n\n    resetFactory();\n  }\n\n","sourceOld":"  /**\n   * Verify that things still work if an IW has not been opened (and hence the CommitPoints have not been communicated to the deletion policy)\n   */\n  public void testNoWriter() throws Exception {\n    useFactory(null);    // force a persistent directory\n\n    // stop and start so they see the new directory setting\n    slaveJetty.stop();\n    masterJetty.stop();\n    slaveJetty.start(true);\n    masterJetty.start(true);\n\n    index(slaveClient, \"id\", \"123456\");\n    slaveClient.commit();\n    slaveJetty.stop();\n    slaveJetty.start(true);\n\n    // Currently we open a writer on-demand.  This is to test that we are correctly testing\n    // the code path when SolrDeletionPolicy.getLatestCommit() returns null.\n    // When we are using an ephemeral directory, an IW will always be opened to create the index and hence\n    // getLatestCommit will always be non-null.\n    CoreContainer cores = ((SolrDispatchFilter) slaveJetty.getDispatchFilter().getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    assertEquals(1, theCores.size());\n    SolrCore core = (SolrCore)theCores.toArray()[0];\n    assertNull( core.getDeletionPolicy().getLatestCommit() );\n\n\n    pullFromMasterToSlave();  // this will cause SnapPuller to be invoked and we will test when SolrDeletionPolicy.getLatestCommit() returns null\n\n    resetFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360","date":1378833548,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testNoWriter().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testNoWriter().mjava","sourceNew":"  /**\n   * Verify that things still work if an IW has not been opened (and hence the CommitPoints have not been communicated to the deletion policy)\n   */\n  public void testNoWriter() throws Exception {\n    useFactory(null);    // force a persistent directory\n\n    // read-only setting (no opening from indexwriter)\n    System.setProperty(\"solr.tests.nrtMode\", \"false\");\n    try {\n    // stop and start so they see the new directory setting\n    slaveJetty.stop();\n    masterJetty.stop();\n    slaveJetty.start(true);\n    masterJetty.start(true);\n\n    index(slaveClient, \"id\", \"123456\");\n    slaveClient.commit();\n    slaveJetty.stop();\n    slaveJetty.start(true);\n    } finally {\n      System.clearProperty(\"solr.tests.nrtMode\"); // dont mess with other tests\n    }\n\n    // Currently we open a writer on-demand.  This is to test that we are correctly testing\n    // the code path when SolrDeletionPolicy.getLatestCommit() returns null.\n    // When we are using an ephemeral directory, an IW will always be opened to create the index and hence\n    // getLatestCommit will always be non-null.\n    CoreContainer cores = ((SolrDispatchFilter) slaveJetty.getDispatchFilter().getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    assertEquals(1, theCores.size());\n    SolrCore core = (SolrCore)theCores.toArray()[0];\n    assertNull( core.getDeletionPolicy().getLatestCommit() );\n\n\n    pullFromMasterToSlave();  // this will cause SnapPuller to be invoked and we will test when SolrDeletionPolicy.getLatestCommit() returns null\n\n    resetFactory();\n  }\n\n","sourceOld":"  /**\n   * Verify that things still work if an IW has not been opened (and hence the CommitPoints have not been communicated to the deletion policy)\n   */\n  public void testNoWriter() throws Exception {\n    useFactory(null);    // force a persistent directory\n\n    // read-only setting (no opening from indexwriter)\n    System.setProperty(\"solr.tests.reopenReaders\", \"false\");\n    try {\n    // stop and start so they see the new directory setting\n    slaveJetty.stop();\n    masterJetty.stop();\n    slaveJetty.start(true);\n    masterJetty.start(true);\n\n    index(slaveClient, \"id\", \"123456\");\n    slaveClient.commit();\n    slaveJetty.stop();\n    slaveJetty.start(true);\n    } finally {\n      System.clearProperty(\"solr.tests.reopenReaders\"); // dont mess with other tests\n    }\n\n    // Currently we open a writer on-demand.  This is to test that we are correctly testing\n    // the code path when SolrDeletionPolicy.getLatestCommit() returns null.\n    // When we are using an ephemeral directory, an IW will always be opened to create the index and hence\n    // getLatestCommit will always be non-null.\n    CoreContainer cores = ((SolrDispatchFilter) slaveJetty.getDispatchFilter().getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    assertEquals(1, theCores.size());\n    SolrCore core = (SolrCore)theCores.toArray()[0];\n    assertNull( core.getDeletionPolicy().getLatestCommit() );\n\n\n    pullFromMasterToSlave();  // this will cause SnapPuller to be invoked and we will test when SolrDeletionPolicy.getLatestCommit() returns null\n\n    resetFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac2f1cdbdc54a889e88543cc1d939a931cb96883","date":1420554488,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testNoWriter().mjava","sourceNew":null,"sourceOld":"  /**\n   * Verify that things still work if an IW has not been opened (and hence the CommitPoints have not been communicated to the deletion policy)\n   */\n  public void testNoWriter() throws Exception {\n    useFactory(null);    // force a persistent directory\n\n    // read-only setting (no opening from indexwriter)\n    System.setProperty(\"solr.tests.nrtMode\", \"false\");\n    try {\n    // stop and start so they see the new directory setting\n    slaveJetty.stop();\n    masterJetty.stop();\n    slaveJetty.start(true);\n    masterJetty.start(true);\n\n    index(slaveClient, \"id\", \"123456\");\n    slaveClient.commit();\n    slaveJetty.stop();\n    slaveJetty.start(true);\n    } finally {\n      System.clearProperty(\"solr.tests.nrtMode\"); // dont mess with other tests\n    }\n\n    // Currently we open a writer on-demand.  This is to test that we are correctly testing\n    // the code path when SolrDeletionPolicy.getLatestCommit() returns null.\n    // When we are using an ephemeral directory, an IW will always be opened to create the index and hence\n    // getLatestCommit will always be non-null.\n    CoreContainer cores = ((SolrDispatchFilter) slaveJetty.getDispatchFilter().getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    assertEquals(1, theCores.size());\n    SolrCore core = (SolrCore)theCores.toArray()[0];\n    assertNull( core.getDeletionPolicy().getLatestCommit() );\n\n\n    pullFromMasterToSlave();  // this will cause SnapPuller to be invoked and we will test when SolrDeletionPolicy.getLatestCommit() returns null\n\n    resetFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c197d924bbbb6f3602aea4e57e93e68150cee3ef"],"a8faff94826bf8d013f3eb49f31812dcb7140222":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["37a0f60745e53927c4c876cfe5b5a58170f0646c","65974810aff303cdaecff3dd789ae9353c1d9134"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c197d924bbbb6f3602aea4e57e93e68150cee3ef":["a8faff94826bf8d013f3eb49f31812dcb7140222"],"65974810aff303cdaecff3dd789ae9353c1d9134":["c197d924bbbb6f3602aea4e57e93e68150cee3ef"],"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360":["65974810aff303cdaecff3dd789ae9353c1d9134"],"ac2f1cdbdc54a889e88543cc1d939a931cb96883":["c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac2f1cdbdc54a889e88543cc1d939a931cb96883"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"a8faff94826bf8d013f3eb49f31812dcb7140222":["c197d924bbbb6f3602aea4e57e93e68150cee3ef"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a8faff94826bf8d013f3eb49f31812dcb7140222"],"c197d924bbbb6f3602aea4e57e93e68150cee3ef":["37a0f60745e53927c4c876cfe5b5a58170f0646c","65974810aff303cdaecff3dd789ae9353c1d9134"],"65974810aff303cdaecff3dd789ae9353c1d9134":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360"],"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360":["ac2f1cdbdc54a889e88543cc1d939a931cb96883"],"ac2f1cdbdc54a889e88543cc1d939a931cb96883":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}