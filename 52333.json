{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","commits":[{"id":"fde7d38af1a90c9b08d016021745c83fa7648e28","date":1331215173,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#create(String,DocValues.Type,boolean,int).mjava","sourceNew":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVAllGroupsCollector<T> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  public static DVAllGroupsCollector<?> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        return new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        return new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        return new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        return new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":1,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#create(String,DocValues.Type,boolean,int).mjava","sourceNew":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVAllGroupsCollector<T> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  public static DVAllGroupsCollector create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        return new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        return new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        return new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        return new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","sourceNew":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVAllGroupsCollector<T> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVAllGroupsCollector<T> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fde7d38af1a90c9b08d016021745c83fa7648e28"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fde7d38af1a90c9b08d016021745c83fa7648e28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fde7d38af1a90c9b08d016021745c83fa7648e28":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","fde7d38af1a90c9b08d016021745c83fa7648e28"],"fde7d38af1a90c9b08d016021745c83fa7648e28":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}