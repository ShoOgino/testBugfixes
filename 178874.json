{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMovingAverage().mjava","commits":[{"id":"8d72016dc7cdd30c37b9ce97b62fd3cc30f5c9e8","date":1496157043,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMovingAverage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMovingAverage() throws Exception {\n    String cexpr = \"movingAvg(array(1,2,3,4,5,6,7), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    assertEquals((double)out.get(0), 2.5, .0);\n    assertEquals((double)out.get(1), 3.5, .0);\n    assertEquals((double)out.get(2), 4.5, .0);\n    assertEquals((double)out.get(3), 5.5, .0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMovingAverage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMovingAverage() throws Exception {\n    String cexpr = \"movingAvg(array(1,2,3,4,5,6,7), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    assertEquals((double)out.get(0), 2.5, .0);\n    assertEquals((double)out.get(1), 3.5, .0);\n    assertEquals((double)out.get(2), 4.5, .0);\n    assertEquals((double)out.get(3), 5.5, .0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMovingAverage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMovingAverage() throws Exception {\n    String cexpr = \"movingAvg(array(1,2,3,4,5,6,7), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    assertEquals((double)out.get(0), 2.5, .0);\n    assertEquals((double)out.get(1), 3.5, .0);\n    assertEquals((double)out.get(2), 4.5, .0);\n    assertEquals((double)out.get(3), 5.5, .0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a531253046f0e43934c21488b61a23f0875e143","date":1505870793,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMovingAverage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMovingAverage().mjava","sourceNew":"  @Test\n  public void testMovingAverage() throws Exception {\n    String cexpr = \"movingAvg(array(1,2,3,4,5,6,7), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    assertEquals((double) out.get(0), 2.5, .0);\n    assertEquals((double) out.get(1), 3.5, .0);\n    assertEquals((double) out.get(2), 4.5, .0);\n    assertEquals((double) out.get(3), 5.5, .0);\n  }\n\n","sourceOld":"  @Test\n  public void testMovingAverage() throws Exception {\n    String cexpr = \"movingAvg(array(1,2,3,4,5,6,7), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    assertEquals((double)out.get(0), 2.5, .0);\n    assertEquals((double)out.get(1), 3.5, .0);\n    assertEquals((double)out.get(2), 4.5, .0);\n    assertEquals((double)out.get(3), 5.5, .0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMovingAverage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMovingAverage().mjava","sourceNew":"  @Test\n  public void testMovingAverage() throws Exception {\n    String cexpr = \"movingAvg(array(1,2,3,4,5,6,7), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    assertEquals((double) out.get(0), 2.5, .0);\n    assertEquals((double) out.get(1), 3.5, .0);\n    assertEquals((double) out.get(2), 4.5, .0);\n    assertEquals((double) out.get(3), 5.5, .0);\n  }\n\n","sourceOld":"  @Test\n  public void testMovingAverage() throws Exception {\n    String cexpr = \"movingAvg(array(1,2,3,4,5,6,7), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    assertEquals((double)out.get(0), 2.5, .0);\n    assertEquals((double)out.get(1), 3.5, .0);\n    assertEquals((double)out.get(2), 4.5, .0);\n    assertEquals((double)out.get(3), 5.5, .0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMovingAverage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMovingAverage().mjava","sourceNew":"  @Test\n  public void testMovingAverage() throws Exception {\n    String cexpr = \"movingAvg(array(1,2,3,4,5,6,7), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    assertEquals((double) out.get(0), 2.5, .0);\n    assertEquals((double) out.get(1), 3.5, .0);\n    assertEquals((double) out.get(2), 4.5, .0);\n    assertEquals((double) out.get(3), 5.5, .0);\n  }\n\n","sourceOld":"  @Test\n  public void testMovingAverage() throws Exception {\n    String cexpr = \"movingAvg(array(1,2,3,4,5,6,7), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    assertEquals((double) out.get(0), 2.5, .0);\n    assertEquals((double) out.get(1), 3.5, .0);\n    assertEquals((double) out.get(2), 4.5, .0);\n    assertEquals((double) out.get(3), 5.5, .0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a531253046f0e43934c21488b61a23f0875e143":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d72016dc7cdd30c37b9ce97b62fd3cc30f5c9e8"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["e9017cf144952056066919f1ebc7897ff9bd71b1","8a531253046f0e43934c21488b61a23f0875e143"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d72016dc7cdd30c37b9ce97b62fd3cc30f5c9e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["8a531253046f0e43934c21488b61a23f0875e143"],"8d72016dc7cdd30c37b9ce97b62fd3cc30f5c9e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8a531253046f0e43934c21488b61a23f0875e143":["6240b74b884c5587f2a4062dd27d6c32bf228889","8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9","8d72016dc7cdd30c37b9ce97b62fd3cc30f5c9e8"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["8a531253046f0e43934c21488b61a23f0875e143"],"8d72016dc7cdd30c37b9ce97b62fd3cc30f5c9e8":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}