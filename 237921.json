{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#newDoc(String,Shape).mjava","commits":[{"id":"50b84d7eef0fc32233dd6251567fdbdb10c4cda7","date":1365707213,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#newDoc(String,Shape).mjava","pathOld":"/dev/null","sourceNew":"  //Override so we can index parts of a pair separately, resulting in the detailLevel\n  // being independent for each shape vs the whole thing\n  @Override\n  protected Document newDoc(String id, Shape shape) {\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", id, Field.Store.YES));\n    if (shape != null) {\n      Collection<Shape> shapes;\n      if (shape instanceof ShapePair) {\n        shapes = new ArrayList<>(2);\n        shapes.add(((ShapePair)shape).shape1);\n        shapes.add(((ShapePair)shape).shape2);\n      } else {\n        shapes = Collections.singleton(shape);\n      }\n      for (Shape shapei : shapes) {\n        for (Field f : strategy.createIndexableFields(shapei)) {\n          doc.add(f);\n        }\n      }\n      if (storeShape)\n        doc.add(new StoredField(strategy.getFieldName(), ctx.toString(shape)));\n    }\n    return doc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#newDoc(String,Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#newDoc(String,Shape).mjava","sourceNew":"  //Override so we can index parts of a pair separately, resulting in the detailLevel\n  // being independent for each shape vs the whole thing\n  @Override\n  protected Document newDoc(String id, Shape shape) {\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", id, Field.Store.YES));\n    if (shape != null) {\n      Collection<Shape> shapes;\n      if (shape instanceof ShapePair) {\n        shapes = new ArrayList<>(2);\n        shapes.add(((ShapePair)shape).shape1);\n        shapes.add(((ShapePair)shape).shape2);\n      } else {\n        shapes = Collections.singleton(shape);\n      }\n      for (Shape shapei : shapes) {\n        for (Field f : strategy.createIndexableFields(shapei)) {\n          doc.add(f);\n        }\n      }\n      if (storeShape)//just for diagnostics\n        doc.add(new StoredField(strategy.getFieldName(), shape.toString()));\n    }\n    return doc;\n  }\n\n","sourceOld":"  //Override so we can index parts of a pair separately, resulting in the detailLevel\n  // being independent for each shape vs the whole thing\n  @Override\n  protected Document newDoc(String id, Shape shape) {\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", id, Field.Store.YES));\n    if (shape != null) {\n      Collection<Shape> shapes;\n      if (shape instanceof ShapePair) {\n        shapes = new ArrayList<>(2);\n        shapes.add(((ShapePair)shape).shape1);\n        shapes.add(((ShapePair)shape).shape2);\n      } else {\n        shapes = Collections.singleton(shape);\n      }\n      for (Shape shapei : shapes) {\n        for (Field f : strategy.createIndexableFields(shapei)) {\n          doc.add(f);\n        }\n      }\n      if (storeShape)\n        doc.add(new StoredField(strategy.getFieldName(), ctx.toString(shape)));\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0521546db127e358ced1772a9d696dbdd255b203","date":1403202289,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#newDoc(String,Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#newDoc(String,Shape).mjava","sourceNew":"  //Override so we can index parts of a pair separately, resulting in the detailLevel\n  // being independent for each shape vs the whole thing\n  @Override\n  protected Document newDoc(String id, Shape shape) {\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", id, Field.Store.YES));\n    if (shape != null) {\n      Collection<Shape> shapes;\n      if (shape instanceof ShapePair) {\n        shapes = new ArrayList<>(2);\n        shapes.add(((ShapePair)shape).shape1);\n        shapes.add(((ShapePair)shape).shape2);\n      } else {\n        shapes = Collections.singleton(shape);\n      }\n      for (Shape shapei : shapes) {\n        for (Field f : strategy.createIndexableFields(shapei)) {\n          doc.add(f);\n        }\n      }\n      if (storeShape)//just for diagnostics\n        doc.add(new StoredField(strategy.getFieldName(), shape.toString()));\n    }\n    return doc;\n  }\n\n","sourceOld":"  //Override so we can index parts of a pair separately, resulting in the detailLevel\n  // being independent for each shape vs the whole thing\n  @Override\n  protected Document newDoc(String id, Shape shape) {\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", id, Field.Store.YES));\n    if (shape != null) {\n      Collection<Shape> shapes;\n      if (shape instanceof ShapePair) {\n        shapes = new ArrayList<>(2);\n        shapes.add(((ShapePair)shape).shape1);\n        shapes.add(((ShapePair)shape).shape2);\n      } else {\n        shapes = Collections.singleton(shape);\n      }\n      for (Shape shapei : shapes) {\n        for (Field f : strategy.createIndexableFields(shapei)) {\n          doc.add(f);\n        }\n      }\n      if (storeShape)//just for diagnostics\n        doc.add(new StoredField(strategy.getFieldName(), shape.toString()));\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["50b84d7eef0fc32233dd6251567fdbdb10c4cda7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0521546db127e358ced1772a9d696dbdd255b203":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0521546db127e358ced1772a9d696dbdd255b203"],"50b84d7eef0fc32233dd6251567fdbdb10c4cda7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["0521546db127e358ced1772a9d696dbdd255b203"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50b84d7eef0fc32233dd6251567fdbdb10c4cda7"],"0521546db127e358ced1772a9d696dbdd255b203":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"50b84d7eef0fc32233dd6251567fdbdb10c4cda7":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}