{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#get(Term,boolean).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#get(Term,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    TermInfoAndOrd tiOrd = termsCache.get(term);\n    ThreadResources resources = getThreadResources();\n\n    if (!mustSeekEnum && tiOrd != null) {\n      return tiOrd;\n    }\n\n    return seekEnum(resources.termEnum, term, tiOrd);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#get(Term,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#get(Term,boolean).mjava","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n    TermInfoAndOrd tiOrd = termsCache.get(new CloneableTerm(term));\n    ThreadResources resources = getThreadResources();\n\n    if (!mustSeekEnum && tiOrd != null) {\n      return tiOrd;\n    }\n\n    return seekEnum(resources.termEnum, term, tiOrd);\n  }\n\n","sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    TermInfoAndOrd tiOrd = termsCache.get(term);\n    ThreadResources resources = getThreadResources();\n\n    if (!mustSeekEnum && tiOrd != null) {\n      return tiOrd;\n    }\n\n    return seekEnum(resources.termEnum, term, tiOrd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"825bcb488bc228d1fb6a19c1f441a2181f7d766d","date":1285691504,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#get(Term,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#get(Term,boolean).mjava","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n    TermInfoAndOrd tiOrd = termsCache.get(new CloneableTerm(term));\n    ThreadResources resources = getThreadResources();\n\n    if (!mustSeekEnum && tiOrd != null) {\n      return tiOrd;\n    }\n\n    return seekEnum(resources.termEnum, term, tiOrd, true);\n  }\n\n","sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n    TermInfoAndOrd tiOrd = termsCache.get(new CloneableTerm(term));\n    ThreadResources resources = getThreadResources();\n\n    if (!mustSeekEnum && tiOrd != null) {\n      return tiOrd;\n    }\n\n    return seekEnum(resources.termEnum, term, tiOrd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#get(Term,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#get(Term,boolean).mjava","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n    TermInfoAndOrd tiOrd = termsCache.get(new CloneableTerm(term));\n    ThreadResources resources = getThreadResources();\n\n    if (!mustSeekEnum && tiOrd != null) {\n      return tiOrd;\n    }\n\n    return seekEnum(resources.termEnum, term, tiOrd, true);\n  }\n\n","sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n    TermInfoAndOrd tiOrd = termsCache.get(new CloneableTerm(term));\n    ThreadResources resources = getThreadResources();\n\n    if (!mustSeekEnum && tiOrd != null) {\n      return tiOrd;\n    }\n\n    return seekEnum(resources.termEnum, term, tiOrd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/TermInfosReader#get(Term,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#get(Term,boolean).mjava","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n    TermInfoAndOrd tiOrd = termsCache.get(new CloneableTerm(term));\n    ThreadResources resources = getThreadResources();\n\n    if (!mustSeekEnum && tiOrd != null) {\n      return tiOrd;\n    }\n\n    return seekEnum(resources.termEnum, term, tiOrd, true);\n  }\n\n","sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n    TermInfoAndOrd tiOrd = termsCache.get(new CloneableTerm(term));\n    ThreadResources resources = getThreadResources();\n\n    if (!mustSeekEnum && tiOrd != null) {\n      return tiOrd;\n    }\n\n    return seekEnum(resources.termEnum, term, tiOrd, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["2aafd88401639311b0404e67c94e829e123a0e45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2aafd88401639311b0404e67c94e829e123a0e45":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["2aafd88401639311b0404e67c94e829e123a0e45","825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["7b91922b55d15444d554721b352861d028eb8278","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["2aafd88401639311b0404e67c94e829e123a0e45"],"2aafd88401639311b0404e67c94e829e123a0e45":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}