{"path":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","commits":[{"id":"913fa4c710b6d1168655966e59f0f4de566907a8","date":1327858476,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(IndexReader,IndexReader,String).mjava","sourceNew":"  public static void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random, termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocsEnum.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random, termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(IndexReader r1, IndexReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random, termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocsEnum.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random, termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(IndexReader,IndexReader,String).mjava","sourceNew":"  public static void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random, termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocsEnum.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random, termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(IndexReader r1, IndexReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random, termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocsEnum.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random, termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(DirectoryReader,DirectoryReader,String).mjava","sourceNew":"  public static void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random, termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocsEnum.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random, termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(DirectoryReader r1, DirectoryReader r2, String idField) throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nr1 docs:\");\n      printDocs(r1);\n      System.out.println(\"\\nr2 docs:\");\n      printDocs(r2);\n    }\n    if (r1.numDocs() != r2.numDocs()) {\n      assert false: \"r1.numDocs()=\" + r1.numDocs() + \" vs r2.numDocs()=\" + r2.numDocs();\n    }\n    boolean hasDeletes = !(r1.maxDoc()==r2.maxDoc() && r1.numDocs()==r1.maxDoc());\n\n    int[] r2r1 = new int[r2.maxDoc()];   // r2 id to r1 id mapping\n\n    // create mapping from id2 space to id2 based on idField\n    final Fields f1 = MultiFields.getFields(r1);\n    if (f1 == null) {\n      // make sure r2 is empty\n      assertNull(MultiFields.getFields(r2));\n      return;\n    }\n    final Terms terms1 = f1.terms(idField);\n    if (terms1 == null) {\n      assertTrue(MultiFields.getFields(r2) == null ||\n                 MultiFields.getFields(r2).terms(idField) == null);\n      return;\n    }\n    final TermsEnum termsEnum = terms1.iterator(null);\n\n    final Bits liveDocs1 = MultiFields.getLiveDocs(r1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(r2);\n    \n    Fields fields = MultiFields.getFields(r2);\n    if (fields == null) {\n      // make sure r1 is in fact empty (eg has only all\n      // deleted docs):\n      DocsEnum docs = null;\n      while(termsEnum.next() != null) {\n        docs = _TestUtil.docs(random, termsEnum, null, docs, false);\n        while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          fail(\"r1 is not empty but r2 is\");\n        }\n      }\n      return;\n    }\n    Terms terms2 = fields.terms(idField);\n    TermsEnum termsEnum2 = terms2.iterator(null);\n\n    DocsEnum termDocs1 = null;\n    DocsEnum termDocs2 = null;\n\n    while(true) {\n      BytesRef term = termsEnum.next();\n      //System.out.println(\"TEST: match id term=\" + term);\n      if (term == null) {\n        break;\n      }\n\n      termDocs1 = _TestUtil.docs(random, termsEnum, liveDocs1, termDocs1, false);\n      if (termsEnum2.seekExact(term, false)) {\n        termDocs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, termDocs2, false);\n      } else {\n        termDocs2 = null;\n      }\n\n      if (termDocs1.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n        // This doc is deleted and wasn't replaced\n        assertTrue(termDocs2 == null || termDocs2.nextDoc() == DocsEnum.NO_MORE_DOCS);\n        continue;\n      }\n\n      int id1 = termDocs1.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs1.nextDoc());\n\n      assertTrue(termDocs2.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      int id2 = termDocs2.docID();\n      assertEquals(DocsEnum.NO_MORE_DOCS, termDocs2.nextDoc());\n\n      r2r1[id2] = id1;\n\n      // verify stored fields are equivalent\n      try {\n        verifyEquals(r1.document(id1), r2.document(id2));\n      } catch (Throwable t) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2 + \" term=\"+ term);\n        System.out.println(\"  d1=\" + r1.document(id1));\n        System.out.println(\"  d2=\" + r2.document(id2));\n        throw t;\n      }\n\n      try {\n        // verify term vectors are equivalent        \n        verifyEquals(r1.getTermVectors(id1), r2.getTermVectors(id2));\n      } catch (Throwable e) {\n        System.out.println(\"FAILED id=\" + term + \" id1=\" + id1 + \" id2=\" + id2);\n        Fields tv1 = r1.getTermVectors(id1);\n        System.out.println(\"  d1=\" + tv1);\n        if (tv1 != null) {\n          FieldsEnum fieldsEnum = tv1.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        Fields tv2 = r2.getTermVectors(id2);\n        System.out.println(\"  d2=\" + tv2);\n        if (tv2 != null) {\n          FieldsEnum fieldsEnum = tv2.iterator();\n          String field;\n          DocsAndPositionsEnum dpEnum = null;\n          DocsEnum dEnum = null;\n          while ((field=fieldsEnum.next()) != null) {\n            System.out.println(\"    \" + field + \":\");\n            Terms terms3 = fieldsEnum.terms();\n            assertNotNull(terms3);\n            TermsEnum termsEnum3 = terms3.iterator(null);\n            BytesRef term2;\n            while((term2 = termsEnum3.next()) != null) {\n              System.out.println(\"      \" + term2.utf8ToString() + \": freq=\" + termsEnum3.totalTermFreq());\n              dpEnum = termsEnum3.docsAndPositions(null, dpEnum, false);\n              if (dpEnum != null) {\n                assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dpEnum.freq();\n                System.out.println(\"        doc=\" + dpEnum.docID() + \" freq=\" + freq);\n                for(int posUpto=0;posUpto<freq;posUpto++) {\n                  System.out.println(\"          pos=\" + dpEnum.nextPosition());\n                }\n              } else {\n                dEnum = _TestUtil.docs(random, termsEnum3, null, dEnum, true);\n                assertNotNull(dEnum);\n                assertTrue(dEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n                final int freq = dEnum.freq();\n                System.out.println(\"        doc=\" + dEnum.docID() + \" freq=\" + freq);\n              }\n            }\n          }\n        }\n        \n        throw e;\n      }\n    }\n\n    //System.out.println(\"TEST: done match id\");\n\n    // Verify postings\n    //System.out.println(\"TEST: create te1\");\n    final FieldsEnum fields1 = MultiFields.getFields(r1).iterator();\n    final FieldsEnum fields2 = MultiFields.getFields(r2).iterator();\n\n    String field1=null, field2=null;\n    TermsEnum termsEnum1 = null;\n    termsEnum2 = null;\n    DocsEnum docs1=null, docs2=null;\n\n    // pack both doc and freq into single element for easy sorting\n    long[] info1 = new long[r1.numDocs()];\n    long[] info2 = new long[r2.numDocs()];\n\n    for(;;) {\n      BytesRef term1=null, term2=null;\n\n      // iterate until we get some docs\n      int len1;\n      for(;;) {\n        len1=0;\n        if (termsEnum1 == null) {\n          field1 = fields1.next();\n          if (field1 == null) {\n            break;\n          } else {\n            Terms terms = fields1.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum1 = terms.iterator(null);\n          }\n        }\n        term1 = termsEnum1.next();\n        if (term1 == null) {\n          // no more terms in this field\n          termsEnum1 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs1 = _TestUtil.docs(random, termsEnum1, liveDocs1, docs1, true);\n        while (docs1.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = docs1.docID();\n          int f = docs1.freq();\n          info1[len1] = (((long)d)<<32) | f;\n          len1++;\n        }\n        if (len1>0) break;\n      }\n\n      // iterate until we get some docs\n      int len2;\n      for(;;) {\n        len2=0;\n        if (termsEnum2 == null) {\n          field2 = fields2.next();\n          if (field2 == null) {\n            break;\n          } else {\n            Terms terms = fields2.terms();\n            if (terms == null) {\n              continue;\n            }\n            termsEnum2 = terms.iterator(null);\n          }\n        }\n        term2 = termsEnum2.next();\n        if (term2 == null) {\n          // no more terms in this field\n          termsEnum2 = null;\n          continue;\n        }\n        \n        //System.out.println(\"TEST: term1=\" + term1);\n        docs2 = _TestUtil.docs(random, termsEnum2, liveDocs2, docs2, true);\n        while (docs2.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          int d = r2r1[docs2.docID()];\n          int f = docs2.freq();\n          info2[len2] = (((long)d)<<32) | f;\n          len2++;\n        }\n        if (len2>0) break;\n      }\n\n      assertEquals(len1, len2);\n      if (len1==0) break;  // no more terms\n\n      assertEquals(field1, field2);\n      assertTrue(term1.bytesEquals(term2));\n\n      if (!hasDeletes)\n        assertEquals(termsEnum1.docFreq(), termsEnum2.docFreq());\n\n      assertEquals(\"len1=\" + len1 + \" len2=\" + len2 + \" deletes?=\" + hasDeletes, term1, term2);\n\n      // sort info2 to get it into ascending docid\n      Arrays.sort(info2, 0, len2);\n\n      // now compare\n      for (int i=0; i<len1; i++) {\n        assertEquals(\"i=\" + i + \" len=\" + len1 + \" d1=\" + (info1[i]>>>32) + \" f1=\" + (info1[i]&Integer.MAX_VALUE) + \" d2=\" + (info2[i]>>>32) + \" f2=\" + (info2[i]&Integer.MAX_VALUE) +\n                     \" field=\" + field1 + \" term=\" + term1.utf8ToString(),\n                     info1[i],\n                     info2[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"913fa4c710b6d1168655966e59f0f4de566907a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","913fa4c710b6d1168655966e59f0f4de566907a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["913fa4c710b6d1168655966e59f0f4de566907a8","5cab9a86bd67202d20b6adc463008c8e982b070a"],"913fa4c710b6d1168655966e59f0f4de566907a8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}