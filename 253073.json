{"path":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(LeafReaderContext,Bits,boolean).mjava","commits":[{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(LeafReaderContext,Bits,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n      assert !terms.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(LeafReaderContext,Bits,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(LeafReaderContext,Bits,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n      assert !terms.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        PostingsEnum postingsEnum = te.postings(liveDocs, null, PostingsEnum.FLAG_POSITIONS);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n      assert !terms.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(LeafReaderContext,Bits,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        PostingsEnum postingsEnum = te.postings(liveDocs, null, PostingsEnum.FLAG_POSITIONS);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n      assert !terms.isEmpty();\n      final LeafReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        PostingsEnum postingsEnum = te.postings(liveDocs, null, PostingsEnum.FLAG_POSITIONS);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context), needsScores);\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context), needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["51f5280f31484820499077f41fcdfe92d527d9dc"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"51f5280f31484820499077f41fcdfe92d527d9dc":["fb17639909a369c1e64866842e5c213440acc17e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}