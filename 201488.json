{"path":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#compress(String).mjava","commits":[{"id":"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755","date":1329934000,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#compress(String).mjava","pathOld":"/dev/null","sourceNew":"    // collapse all whitespace to a single space or escaped newline\r\n    String compress(String str) {\r\n      StringBuilder sb = new StringBuilder();\r\n      for (int i = 0; i < str.length(); i++) {\r\n        char ch = str.charAt(i);\r\n        boolean whitespace = false;\r\n        boolean newline = false;\r\n        while (Character.isWhitespace(ch)) {\r\n          whitespace = true;\r\n          if (ch == '\\n')\r\n            newline = true;\r\n          if (++i >= str.length())\r\n            return sb.toString();\r\n          ch = str.charAt(i);\r\n        }\r\n\r\n        if (newline) {\r\n          // sb.append(\"\\\\n\");\r\n          sb.append(\"  \");  // collapse newline to two spaces\r\n        } else if (whitespace) {\r\n          sb.append(' ');\r\n        }\r\n\r\n        // TODO: handle non-printable chars\r\n        sb.append(ch);\r\n\r\n        if (sb.length() >= maxData)\r\n          return sb.toString() + \" ...\";\r\n      }\r\n      return sb.toString();\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6ddd3da533988676f6ec21e7e4651a2b2e8345","date":1330043299,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#compress(String).mjava","sourceNew":null,"sourceOld":"    // collapse all whitespace to a single space or escaped newline\r\n    String compress(String str) {\r\n      StringBuilder sb = new StringBuilder();\r\n      for (int i = 0; i < str.length(); i++) {\r\n        char ch = str.charAt(i);\r\n        boolean whitespace = false;\r\n        boolean newline = false;\r\n        while (Character.isWhitespace(ch)) {\r\n          whitespace = true;\r\n          if (ch == '\\n')\r\n            newline = true;\r\n          if (++i >= str.length())\r\n            return sb.toString();\r\n          ch = str.charAt(i);\r\n        }\r\n\r\n        if (newline) {\r\n          // sb.append(\"\\\\n\");\r\n          sb.append(\"  \");  // collapse newline to two spaces\r\n        } else if (whitespace) {\r\n          sb.append(' ');\r\n        }\r\n\r\n        // TODO: handle non-printable chars\r\n        sb.append(ch);\r\n\r\n        if (sb.length() >= maxData)\r\n          return sb.toString() + \" ...\";\r\n      }\r\n      return sb.toString();\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd6ddd3da533988676f6ec21e7e4651a2b2e8345":["2faa4d8af1f20119ec0d38b5ae80ce9e78f10755"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd6ddd3da533988676f6ec21e7e4651a2b2e8345"]},"commit2Childs":{"dd6ddd3da533988676f6ec21e7e4651a2b2e8345":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2faa4d8af1f20119ec0d38b5ae80ce9e78f10755"],"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755":["dd6ddd3da533988676f6ec21e7e4651a2b2e8345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}