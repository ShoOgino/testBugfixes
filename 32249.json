{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","sourceNew":"  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    this.center = new GeoPoint(planetModel, lat, lon);\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // Compute two points on the circle, with the right angle from the center.  We'll use these\n    // to obtain the perpendicular plane to the circle.\n    double upperLat = lat + cutoffAngle;\n    double upperLon = lon;\n    if (upperLat > Math.PI * 0.5) {\n      upperLon += Math.PI;\n      if (upperLon > Math.PI)\n        upperLon -= 2.0 * Math.PI;\n      upperLat = Math.PI - upperLat;\n    }\n    double lowerLat = lat - cutoffAngle;\n    double lowerLon = lon;\n    if (lowerLat < -Math.PI * 0.5) {\n      lowerLon += Math.PI;\n      if (lowerLon > Math.PI)\n        lowerLon -= 2.0 * Math.PI;\n      lowerLat = -Math.PI - lowerLat;\n    }\n    final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n    final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlane = null;\n      this.edgePoints = new GeoPoint[0];\n    } else {\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedVerticalPlane(upperPoint, lowerPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new RuntimeException(\"Couldn't construct circle plane.  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      this.edgePoints = new GeoPoint[]{upperPoint};\n    }\n  }\n\n","sourceOld":"  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    this.center = new GeoPoint(planetModel, lat, lon);\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // Compute two points on the circle, with the right angle from the center.  We'll use these\n    // to obtain the perpendicular plane to the circle.\n    double upperLat = lat + cutoffAngle;\n    double upperLon = lon;\n    if (upperLat > Math.PI * 0.5) {\n      upperLon += Math.PI;\n      if (upperLon > Math.PI)\n        upperLon -= 2.0 * Math.PI;\n      upperLat = Math.PI - upperLat;\n    }\n    double lowerLat = lat - cutoffAngle;\n    double lowerLon = lon;\n    if (lowerLat < -Math.PI * 0.5) {\n      lowerLon += Math.PI;\n      if (lowerLon > Math.PI)\n        lowerLon -= 2.0 * Math.PI;\n      lowerLat = -Math.PI - lowerLat;\n    }\n    final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n    final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlane = null;\n      this.edgePoints = new GeoPoint[0];\n    } else {\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedVerticalPlane(upperPoint, lowerPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new RuntimeException(\"Couldn't construct circle plane.  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      this.edgePoints = new GeoPoint[]{upperPoint};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71849bd31d150133a9a1027bf1607967b406c57","date":1436811056,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the cutoff angle for the circle.\n   */\n  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    this.center = new GeoPoint(planetModel, lat, lon);\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // Compute two points on the circle, with the right angle from the center.  We'll use these\n    // to obtain the perpendicular plane to the circle.\n    double upperLat = lat + cutoffAngle;\n    double upperLon = lon;\n    if (upperLat > Math.PI * 0.5) {\n      upperLon += Math.PI;\n      if (upperLon > Math.PI)\n        upperLon -= 2.0 * Math.PI;\n      upperLat = Math.PI - upperLat;\n    }\n    double lowerLat = lat - cutoffAngle;\n    double lowerLon = lon;\n    if (lowerLat < -Math.PI * 0.5) {\n      lowerLon += Math.PI;\n      if (lowerLon > Math.PI)\n        lowerLon -= 2.0 * Math.PI;\n      lowerLat = -Math.PI - lowerLat;\n    }\n    final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n    final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlane = null;\n      this.edgePoints = new GeoPoint[0];\n    } else {\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedVerticalPlane(upperPoint, lowerPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new RuntimeException(\"Couldn't construct circle plane.  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      this.edgePoints = new GeoPoint[]{upperPoint};\n    }\n  }\n\n","sourceOld":"  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    this.center = new GeoPoint(planetModel, lat, lon);\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // Compute two points on the circle, with the right angle from the center.  We'll use these\n    // to obtain the perpendicular plane to the circle.\n    double upperLat = lat + cutoffAngle;\n    double upperLon = lon;\n    if (upperLat > Math.PI * 0.5) {\n      upperLon += Math.PI;\n      if (upperLon > Math.PI)\n        upperLon -= 2.0 * Math.PI;\n      upperLat = Math.PI - upperLat;\n    }\n    double lowerLat = lat - cutoffAngle;\n    double lowerLon = lon;\n    if (lowerLat < -Math.PI * 0.5) {\n      lowerLon += Math.PI;\n      if (lowerLon > Math.PI)\n        lowerLon -= 2.0 * Math.PI;\n      lowerLat = -Math.PI - lowerLat;\n    }\n    final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n    final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlane = null;\n      this.edgePoints = new GeoPoint[0];\n    } else {\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedVerticalPlane(upperPoint, lowerPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new RuntimeException(\"Couldn't construct circle plane.  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      this.edgePoints = new GeoPoint[]{upperPoint};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the cutoff angle for the circle.\n   */\n  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    this.center = new GeoPoint(planetModel, lat, lon);\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // Compute two points on the circle, with the right angle from the center.  We'll use these\n    // to obtain the perpendicular plane to the circle.\n    double upperLat = lat + cutoffAngle;\n    double upperLon = lon;\n    if (upperLat > Math.PI * 0.5) {\n      upperLon += Math.PI;\n      if (upperLon > Math.PI)\n        upperLon -= 2.0 * Math.PI;\n      upperLat = Math.PI - upperLat;\n    }\n    double lowerLat = lat - cutoffAngle;\n    double lowerLon = lon;\n    if (lowerLat < -Math.PI * 0.5) {\n      lowerLon += Math.PI;\n      if (lowerLon > Math.PI)\n        lowerLon -= 2.0 * Math.PI;\n      lowerLat = -Math.PI - lowerLat;\n    }\n    final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n    final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlane = null;\n      this.edgePoints = new GeoPoint[0];\n    } else {\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedZPlane(upperPoint, lowerPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new IllegalArgumentException(\"Couldn't construct circle plane, probably too small?  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      final GeoPoint recomputedIntersectionPoint = circlePlane.getSampleIntersectionPoint(planetModel, normalPlane);\n      if (recomputedIntersectionPoint == null)\n        throw new IllegalArgumentException(\"Couldn't construct intersection point, probably circle too small?  Plane = \"+circlePlane);\n      this.edgePoints = new GeoPoint[]{recomputedIntersectionPoint};\n    }\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the cutoff angle for the circle.\n   */\n  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    this.center = new GeoPoint(planetModel, lat, lon);\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // Compute two points on the circle, with the right angle from the center.  We'll use these\n    // to obtain the perpendicular plane to the circle.\n    double upperLat = lat + cutoffAngle;\n    double upperLon = lon;\n    if (upperLat > Math.PI * 0.5) {\n      upperLon += Math.PI;\n      if (upperLon > Math.PI)\n        upperLon -= 2.0 * Math.PI;\n      upperLat = Math.PI - upperLat;\n    }\n    double lowerLat = lat - cutoffAngle;\n    double lowerLon = lon;\n    if (lowerLat < -Math.PI * 0.5) {\n      lowerLon += Math.PI;\n      if (lowerLon > Math.PI)\n        lowerLon -= 2.0 * Math.PI;\n      lowerLat = -Math.PI - lowerLat;\n    }\n    final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n    final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlane = null;\n      this.edgePoints = new GeoPoint[0];\n    } else {\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedVerticalPlane(upperPoint, lowerPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new RuntimeException(\"Couldn't construct circle plane.  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      this.edgePoints = new GeoPoint[]{upperPoint};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48","date":1441921550,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoStandardCircle#GeoStandardCircle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","sourceNew":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the cutoff angle for the circle.\n   */\n  public GeoStandardCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    this.center = new GeoPoint(planetModel, lat, lon);\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // Compute two points on the circle, with the right angle from the center.  We'll use these\n    // to obtain the perpendicular plane to the circle.\n    double upperLat = lat + cutoffAngle;\n    double upperLon = lon;\n    if (upperLat > Math.PI * 0.5) {\n      upperLon += Math.PI;\n      if (upperLon > Math.PI)\n        upperLon -= 2.0 * Math.PI;\n      upperLat = Math.PI - upperLat;\n    }\n    double lowerLat = lat - cutoffAngle;\n    double lowerLon = lon;\n    if (lowerLat < -Math.PI * 0.5) {\n      lowerLon += Math.PI;\n      if (lowerLon > Math.PI)\n        lowerLon -= 2.0 * Math.PI;\n      lowerLat = -Math.PI - lowerLat;\n    }\n    final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n    final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlane = null;\n      this.edgePoints = new GeoPoint[0];\n    } else {\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedZPlane(upperPoint, lowerPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new IllegalArgumentException(\"Couldn't construct circle plane, probably too small?  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      final GeoPoint recomputedIntersectionPoint = circlePlane.getSampleIntersectionPoint(planetModel, normalPlane);\n      if (recomputedIntersectionPoint == null)\n        throw new IllegalArgumentException(\"Couldn't construct intersection point, probably circle too small?  Plane = \"+circlePlane);\n      this.edgePoints = new GeoPoint[]{recomputedIntersectionPoint};\n    }\n  }\n\n","sourceOld":"  /** Constructor.\n   *@param planetModel is the planet model.\n   *@param lat is the center latitude.\n   *@param lon is the center longitude.\n   *@param cutoffAngle is the cutoff angle for the circle.\n   */\n  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle < 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    if (cutoffAngle < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Cutoff angle cannot be effectively zero\");\n    this.center = new GeoPoint(planetModel, lat, lon);\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // Compute two points on the circle, with the right angle from the center.  We'll use these\n    // to obtain the perpendicular plane to the circle.\n    double upperLat = lat + cutoffAngle;\n    double upperLon = lon;\n    if (upperLat > Math.PI * 0.5) {\n      upperLon += Math.PI;\n      if (upperLon > Math.PI)\n        upperLon -= 2.0 * Math.PI;\n      upperLat = Math.PI - upperLat;\n    }\n    double lowerLat = lat - cutoffAngle;\n    double lowerLon = lon;\n    if (lowerLat < -Math.PI * 0.5) {\n      lowerLon += Math.PI;\n      if (lowerLon > Math.PI)\n        lowerLon -= 2.0 * Math.PI;\n      lowerLat = -Math.PI - lowerLat;\n    }\n    final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n    final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlane = null;\n      this.edgePoints = new GeoPoint[0];\n    } else {\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedZPlane(upperPoint, lowerPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new IllegalArgumentException(\"Couldn't construct circle plane, probably too small?  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      final GeoPoint recomputedIntersectionPoint = circlePlane.getSampleIntersectionPoint(planetModel, normalPlane);\n      if (recomputedIntersectionPoint == null)\n        throw new IllegalArgumentException(\"Couldn't construct intersection point, probably circle too small?  Plane = \"+circlePlane);\n      this.edgePoints = new GeoPoint[]{recomputedIntersectionPoint};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a71849bd31d150133a9a1027bf1607967b406c57":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"f64b7098768253180859cd8faeae6b1a185b06ed":["a71849bd31d150133a9a1027bf1607967b406c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48":["f64b7098768253180859cd8faeae6b1a185b06ed"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"]},"commit2Childs":{"a71849bd31d150133a9a1027bf1607967b406c57":["f64b7098768253180859cd8faeae6b1a185b06ed"],"f64b7098768253180859cd8faeae6b1a185b06ed":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a71849bd31d150133a9a1027bf1607967b406c57"],"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}