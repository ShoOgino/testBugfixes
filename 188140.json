{"path":"solr/solrj/src/test/org/apache/solr/recipe/TestRuleSorter#testRuleParsing().mjava","commits":[{"id":"0cf93ce8d2bc0210731dd8d840f40b183df2c804","date":1489476316,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/recipe/TestRuleSorter#testRuleParsing().mjava","pathOld":"/dev/null","sourceNew":"  public void testRuleParsing() {\n\n    String rules = \"{\" +\n        \"conditions:[{node:'!overseer', strict:false}, \" +\n        \"{replica:'<2',node:'*', shard:'#EACH'}],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n\n    Map nodeValues = (Map) Utils.fromJSONString( \"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900}\" +\n        \"}\");\n\n    RuleSorter ruleSorter = new RuleSorter((Map<String, Object>) Utils.fromJSONString(rules));\n    RuleSorter.Session session = ruleSorter.createSession(Arrays.asList(\"node1\", \"node2\",\"node3\",\"node4\"), (node, valuesMap) -> {\n      Map n = (Map) nodeValues.get(node);\n      valuesMap.entrySet().stream().forEach(e -> e.setValue(n.get(e.getKey())));\n    });\n    session.sort();\n    List<RuleSorter.Row> l = session.getSorted();\n    assertEquals(\"node1\",l.get(0).node);\n    assertEquals(\"node3\",l.get(1).node);\n    assertEquals(\"node4\",l.get(2).node);\n    assertEquals(\"node2\",l.get(3).node);\n\n\n//    System.out.println(session);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"226b3bf77af5749a90c81edd3d4168fd6e276a24","date":1490013063,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/recipe/TestRuleSorter#testRuleParsing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/recipe/TestRuleSorter#testRuleParsing().mjava","sourceNew":"  public void testRuleParsing() throws IOException {\n    String rules = \"{\" +\n        \"conditions:[{nodeRole:'!overseer', strict:false}, \" +\n        \"{replica:'<2',node:'*', shard:'#EACH'}],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n\n    Map<String,Map> nodeValues = (Map<String, Map>) Utils.fromJSONString( \"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900}\" +\n        \"}\");\n    String clusterState = \"{'gettingstarted':{\" +\n        \"    'router':{'name':'compositeId'},\" +\n        \"    'shards':{\" +\n        \"      'shard1':{\" +\n        \"        'range':'80000000-ffffffff',\" +\n        \"        'state':'active',\" +\n        \"        'replicas':{\" +\n        \"          'core_node1':{\" +\n        \"            'core':'gettingstarted_shard1_replica1',\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'core_node4':{\" +\n        \"            'core':'gettingstarted_shard1_replica2',\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node2',\" +\n        \"            'state':'active'}}},\" +\n        \"      'shard2':{\" +\n        \"        'range':'0-7fffffff',\" +\n        \"        'state':'active',\" +\n        \"        'replicas':{\" +\n        \"          'core_node2':{\" +\n        \"            'core':'gettingstarted_shard2_replica1',\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'core_node3':{\" +\n        \"            'core':'gettingstarted_shard2_replica2',\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node2',\" +\n        \"            'state':'active'}}}}}}\";\n\n\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n\n\n    RuleSorter ruleSorter = new RuleSorter((Map<String, Object>) Utils.fromJSONString(rules));\n    RuleSorter.Session session;\n    RuleSorter.NodeValueProvider snitch = new RuleSorter.NodeValueProvider() {\n      @Override\n      public Map<String,Object> getValues(String node, Collection<String> keys) {\n        Map<String,Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<RuleSorter.ReplicaStat>>> getReplicaCounts(String node, Collection<String> keys) {\n        Map<String, Map<String, List<RuleSorter.ReplicaStat>>> result = new LinkedHashMap<>();\n\n        m.forEach((collName, o) -> {\n          ValidatingJsonMap coll = (ValidatingJsonMap) o;\n          coll.getMap(\"shards\").forEach((shard, o1) -> {\n            ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n            sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n              ValidatingJsonMap r = (ValidatingJsonMap) o2;\n              String node_name = (String) r.get(\"node_name\");\n              if (!node_name.equals(node)) return;\n              Map<String, List<RuleSorter.ReplicaStat>> shardVsReplicaStats = result.get(collName);\n              if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n              List<RuleSorter.ReplicaStat> replicaStats = shardVsReplicaStats.get(shard);\n              if (replicaStats == null) shardVsReplicaStats.put(shard, replicaStats = new ArrayList<>());\n              replicaStats.add(new RuleSorter.ReplicaStat(replicaName, new HashMap<>()));\n\n            });\n          });\n        });\n\n        return result;\n      }\n\n\n    };\n\n    session = ruleSorter.createSession(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"), snitch);\n\n    session.applyRules();\n    List<RuleSorter.Row> l = session.getSorted();\n    assertEquals(\"node1\",l.get(0).node);\n    assertEquals(\"node3\",l.get(1).node);\n    assertEquals(\"node4\",l.get(2).node);\n    assertEquals(\"node2\",l.get(3).node);\n\n\n    System.out.printf(Utils.toJSONString(Utils.getDeepCopy(session.toMap(new LinkedHashMap<>()), 8)));\n    System.out.println(Utils.getDeepCopy(session.getViolations(), 6));\n\n  }\n\n","sourceOld":"  public void testRuleParsing() {\n\n    String rules = \"{\" +\n        \"conditions:[{node:'!overseer', strict:false}, \" +\n        \"{replica:'<2',node:'*', shard:'#EACH'}],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n\n    Map nodeValues = (Map) Utils.fromJSONString( \"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900}\" +\n        \"}\");\n\n    RuleSorter ruleSorter = new RuleSorter((Map<String, Object>) Utils.fromJSONString(rules));\n    RuleSorter.Session session = ruleSorter.createSession(Arrays.asList(\"node1\", \"node2\",\"node3\",\"node4\"), (node, valuesMap) -> {\n      Map n = (Map) nodeValues.get(node);\n      valuesMap.entrySet().stream().forEach(e -> e.setValue(n.get(e.getKey())));\n    });\n    session.sort();\n    List<RuleSorter.Row> l = session.getSorted();\n    assertEquals(\"node1\",l.get(0).node);\n    assertEquals(\"node3\",l.get(1).node);\n    assertEquals(\"node4\",l.get(2).node);\n    assertEquals(\"node2\",l.get(3).node);\n\n\n//    System.out.println(session);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a834430db908aba7bd03ef98a893e56e820672c5","date":1490096578,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/recipe/TestRuleSorter#testRuleParsing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/recipe/TestRuleSorter#testRuleParsing().mjava","sourceNew":"  public void testRuleParsing() throws IOException {\n    String rules = \"{\" +\n        \"conditions:[{nodeRole:'!overseer', strict:false}, \" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n\n    Map<String,Map> nodeValues = (Map<String, Map>) Utils.fromJSONString( \"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900}\" +\n        \"}\");\n    String clusterState = \"{'gettingstarted':{\" +\n        \"    'router':{'name':'compositeId'},\" +\n        \"    'shards':{\" +\n        \"      'shard1':{\" +\n        \"        'range':'80000000-ffffffff',\" +\n        \"        'state':'active',\" +\n        \"        'replicas':{\" +\n        \"          'core_node1':{\" +\n        \"            'core':'gettingstarted_shard1_replica1',\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'core_node4':{\" +\n        \"            'core':'gettingstarted_shard1_replica2',\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node2',\" +\n        \"            'state':'active'}}},\" +\n        \"      'shard2':{\" +\n        \"        'range':'0-7fffffff',\" +\n        \"        'state':'active',\" +\n        \"        'replicas':{\" +\n        \"          'core_node2':{\" +\n        \"            'core':'gettingstarted_shard2_replica1',\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'core_node3':{\" +\n        \"            'core':'gettingstarted_shard2_replica2',\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active'}}}}}}\";\n\n\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n\n\n    RuleSorter ruleSorter = new RuleSorter((Map<String, Object>) Utils.fromJSONString(rules));\n    RuleSorter.Session session;\n    RuleSorter.NodeValueProvider snitch = new RuleSorter.NodeValueProvider() {\n      @Override\n      public Map<String,Object> getValues(String node, Collection<String> keys) {\n        Map<String,Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<RuleSorter.ReplicaStat>>> getReplicaCounts(String node, Collection<String> keys) {\n        Map<String, Map<String, List<RuleSorter.ReplicaStat>>> result = new LinkedHashMap<>();\n\n        m.forEach((collName, o) -> {\n          ValidatingJsonMap coll = (ValidatingJsonMap) o;\n          coll.getMap(\"shards\").forEach((shard, o1) -> {\n            ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n            sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n              ValidatingJsonMap r = (ValidatingJsonMap) o2;\n              String node_name = (String) r.get(\"node_name\");\n              if (!node_name.equals(node)) return;\n              Map<String, List<RuleSorter.ReplicaStat>> shardVsReplicaStats = result.get(collName);\n              if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n              List<RuleSorter.ReplicaStat> replicaStats = shardVsReplicaStats.get(shard);\n              if (replicaStats == null) shardVsReplicaStats.put(shard, replicaStats = new ArrayList<>());\n              replicaStats.add(new RuleSorter.ReplicaStat(replicaName, new HashMap<>()));\n\n            });\n          });\n        });\n\n        return result;\n      }\n\n\n    };\n\n    session = ruleSorter.createSession(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"), snitch);\n\n    session.applyRules();\n    List<RuleSorter.Row> l = session.getSorted();\n    assertEquals(\"node1\",l.get(0).node);\n    assertEquals(\"node3\",l.get(1).node);\n    assertEquals(\"node4\",l.get(2).node);\n    assertEquals(\"node2\",l.get(3).node);\n\n\n    System.out.printf(Utils.toJSONString(Utils.getDeepCopy(session.toMap(new LinkedHashMap<>()), 8)));\n    System.out.println(Utils.getDeepCopy(session.getViolations(), 6));\n\n  }\n\n","sourceOld":"  public void testRuleParsing() throws IOException {\n    String rules = \"{\" +\n        \"conditions:[{nodeRole:'!overseer', strict:false}, \" +\n        \"{replica:'<2',node:'*', shard:'#EACH'}],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n\n    Map<String,Map> nodeValues = (Map<String, Map>) Utils.fromJSONString( \"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900}\" +\n        \"}\");\n    String clusterState = \"{'gettingstarted':{\" +\n        \"    'router':{'name':'compositeId'},\" +\n        \"    'shards':{\" +\n        \"      'shard1':{\" +\n        \"        'range':'80000000-ffffffff',\" +\n        \"        'state':'active',\" +\n        \"        'replicas':{\" +\n        \"          'core_node1':{\" +\n        \"            'core':'gettingstarted_shard1_replica1',\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'core_node4':{\" +\n        \"            'core':'gettingstarted_shard1_replica2',\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node2',\" +\n        \"            'state':'active'}}},\" +\n        \"      'shard2':{\" +\n        \"        'range':'0-7fffffff',\" +\n        \"        'state':'active',\" +\n        \"        'replicas':{\" +\n        \"          'core_node2':{\" +\n        \"            'core':'gettingstarted_shard2_replica1',\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'core_node3':{\" +\n        \"            'core':'gettingstarted_shard2_replica2',\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node2',\" +\n        \"            'state':'active'}}}}}}\";\n\n\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n\n\n    RuleSorter ruleSorter = new RuleSorter((Map<String, Object>) Utils.fromJSONString(rules));\n    RuleSorter.Session session;\n    RuleSorter.NodeValueProvider snitch = new RuleSorter.NodeValueProvider() {\n      @Override\n      public Map<String,Object> getValues(String node, Collection<String> keys) {\n        Map<String,Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<RuleSorter.ReplicaStat>>> getReplicaCounts(String node, Collection<String> keys) {\n        Map<String, Map<String, List<RuleSorter.ReplicaStat>>> result = new LinkedHashMap<>();\n\n        m.forEach((collName, o) -> {\n          ValidatingJsonMap coll = (ValidatingJsonMap) o;\n          coll.getMap(\"shards\").forEach((shard, o1) -> {\n            ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n            sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n              ValidatingJsonMap r = (ValidatingJsonMap) o2;\n              String node_name = (String) r.get(\"node_name\");\n              if (!node_name.equals(node)) return;\n              Map<String, List<RuleSorter.ReplicaStat>> shardVsReplicaStats = result.get(collName);\n              if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n              List<RuleSorter.ReplicaStat> replicaStats = shardVsReplicaStats.get(shard);\n              if (replicaStats == null) shardVsReplicaStats.put(shard, replicaStats = new ArrayList<>());\n              replicaStats.add(new RuleSorter.ReplicaStat(replicaName, new HashMap<>()));\n\n            });\n          });\n        });\n\n        return result;\n      }\n\n\n    };\n\n    session = ruleSorter.createSession(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"), snitch);\n\n    session.applyRules();\n    List<RuleSorter.Row> l = session.getSorted();\n    assertEquals(\"node1\",l.get(0).node);\n    assertEquals(\"node3\",l.get(1).node);\n    assertEquals(\"node4\",l.get(2).node);\n    assertEquals(\"node2\",l.get(3).node);\n\n\n    System.out.printf(Utils.toJSONString(Utils.getDeepCopy(session.toMap(new LinkedHashMap<>()), 8)));\n    System.out.println(Utils.getDeepCopy(session.getViolations(), 6));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65b36a7cc02287c46274765c657d23db7e5ce163","date":1490601578,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/recipe/TestRuleSorter#testRuleParsing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/recipe/TestRuleSorter#testRuleParsing().mjava","sourceNew":"  public void testRuleParsing() throws IOException {\n    String rules = \"{\" +\n        \"conditions:[{nodeRole:'!overseer', strict:false},{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n\n    Map<String,Map> nodeValues = (Map<String, Map>) Utils.fromJSONString( \"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n    String clusterState = \"{'gettingstarted':{\" +\n        \"    'router':{'name':'compositeId'},\" +\n        \"    'shards':{\" +\n        \"      'shard1':{\" +\n        \"        'range':'80000000-ffffffff',\" +\n        \"        'replicas':{\" +\n        \"          'r1':{\" +\n        \"            'core':r1,\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'r2':{\" +\n        \"            'core':r2,\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node2',\" +\n        \"            'state':'active'}}},\" +\n        \"      'shard2':{\" +\n        \"        'range':'0-7fffffff',\" +\n        \"        'replicas':{\" +\n        \"          'r3':{\" +\n        \"            'core':r3,\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'r4':{\" +\n        \"            'core':r4,\" +\n        \"            'base_url':'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name':'node4',\" +\n        \"            'state':'active'},\" +\n        \"          'r6':{\" +\n        \"            'core':r6,\" +\n        \"            'base_url':'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name':'node3',\" +\n        \"            'state':'active'},\" +\n        \"          'r5':{\" +\n        \"            'core':r5,\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active'}}}}}}\";\n\n\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n\n\n    RuleSorter ruleSorter = new RuleSorter((Map<String, Object>) Utils.fromJSONString(rules));\n    RuleSorter.Session session;\n    RuleSorter.NodeValueProvider snitch = new RuleSorter.NodeValueProvider() {\n      @Override\n      public Map<String,Object> getValues(String node, Collection<String> keys) {\n        Map<String,Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<RuleSorter.ReplicaStat>>> getReplicaCounts(String node, Collection<String> keys) {\n        Map<String, Map<String, List<RuleSorter.ReplicaStat>>> result = new LinkedHashMap<>();\n\n        m.forEach((collName, o) -> {\n          ValidatingJsonMap coll = (ValidatingJsonMap) o;\n          coll.getMap(\"shards\").forEach((shard, o1) -> {\n            ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n            sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n              ValidatingJsonMap r = (ValidatingJsonMap) o2;\n              String node_name = (String) r.get(\"node_name\");\n              if (!node_name.equals(node)) return;\n              Map<String, List<RuleSorter.ReplicaStat>> shardVsReplicaStats = result.get(collName);\n              if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n              List<RuleSorter.ReplicaStat> replicaStats = shardVsReplicaStats.get(shard);\n              if (replicaStats == null) shardVsReplicaStats.put(shard, replicaStats = new ArrayList<>());\n              replicaStats.add(new RuleSorter.ReplicaStat(replicaName, new HashMap<>()));\n            });\n          });\n        });\n\n        return result;\n      }\n\n\n    };\n\n    session = ruleSorter.createSession(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"), snitch);\n\n    session.applyRules();\n    List<RuleSorter.Row> l = session.getSorted();\n    assertEquals(\"node1\",l.get(0).node);\n    assertEquals(\"node3\",l.get(1).node);\n    assertEquals(\"node4\",l.get(2).node);\n    assertEquals(\"node2\",l.get(3).node);\n\n\n    System.out.printf(Utils.toJSONString(Utils.getDeepCopy(session.toMap(new LinkedHashMap<>()), 8)));\n    Map<String, List<Clause>> violations = session.getViolations();\n    System.out.println(Utils.getDeepCopy(violations, 6));\n    assertEquals(3, violations.size());\n    List<Clause> v = violations.get(\"node4\");\n    assertNotNull(v);\n    assertEquals(v.get(0).tag.name, \"nodeRole\");\n    v = violations.get(\"node1\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 2);\n    v = violations.get(\"node3\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 1);\n    assertEquals(v.get(0).tag.val, \"node3\");\n\n\n\n  }\n\n","sourceOld":"  public void testRuleParsing() throws IOException {\n    String rules = \"{\" +\n        \"conditions:[{nodeRole:'!overseer', strict:false}, \" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n\n    Map<String,Map> nodeValues = (Map<String, Map>) Utils.fromJSONString( \"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900}\" +\n        \"}\");\n    String clusterState = \"{'gettingstarted':{\" +\n        \"    'router':{'name':'compositeId'},\" +\n        \"    'shards':{\" +\n        \"      'shard1':{\" +\n        \"        'range':'80000000-ffffffff',\" +\n        \"        'state':'active',\" +\n        \"        'replicas':{\" +\n        \"          'core_node1':{\" +\n        \"            'core':'gettingstarted_shard1_replica1',\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'core_node4':{\" +\n        \"            'core':'gettingstarted_shard1_replica2',\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node2',\" +\n        \"            'state':'active'}}},\" +\n        \"      'shard2':{\" +\n        \"        'range':'0-7fffffff',\" +\n        \"        'state':'active',\" +\n        \"        'replicas':{\" +\n        \"          'core_node2':{\" +\n        \"            'core':'gettingstarted_shard2_replica1',\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'core_node3':{\" +\n        \"            'core':'gettingstarted_shard2_replica2',\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active'}}}}}}\";\n\n\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n\n\n    RuleSorter ruleSorter = new RuleSorter((Map<String, Object>) Utils.fromJSONString(rules));\n    RuleSorter.Session session;\n    RuleSorter.NodeValueProvider snitch = new RuleSorter.NodeValueProvider() {\n      @Override\n      public Map<String,Object> getValues(String node, Collection<String> keys) {\n        Map<String,Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<RuleSorter.ReplicaStat>>> getReplicaCounts(String node, Collection<String> keys) {\n        Map<String, Map<String, List<RuleSorter.ReplicaStat>>> result = new LinkedHashMap<>();\n\n        m.forEach((collName, o) -> {\n          ValidatingJsonMap coll = (ValidatingJsonMap) o;\n          coll.getMap(\"shards\").forEach((shard, o1) -> {\n            ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n            sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n              ValidatingJsonMap r = (ValidatingJsonMap) o2;\n              String node_name = (String) r.get(\"node_name\");\n              if (!node_name.equals(node)) return;\n              Map<String, List<RuleSorter.ReplicaStat>> shardVsReplicaStats = result.get(collName);\n              if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n              List<RuleSorter.ReplicaStat> replicaStats = shardVsReplicaStats.get(shard);\n              if (replicaStats == null) shardVsReplicaStats.put(shard, replicaStats = new ArrayList<>());\n              replicaStats.add(new RuleSorter.ReplicaStat(replicaName, new HashMap<>()));\n\n            });\n          });\n        });\n\n        return result;\n      }\n\n\n    };\n\n    session = ruleSorter.createSession(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"), snitch);\n\n    session.applyRules();\n    List<RuleSorter.Row> l = session.getSorted();\n    assertEquals(\"node1\",l.get(0).node);\n    assertEquals(\"node3\",l.get(1).node);\n    assertEquals(\"node4\",l.get(2).node);\n    assertEquals(\"node2\",l.get(3).node);\n\n\n    System.out.printf(Utils.toJSONString(Utils.getDeepCopy(session.toMap(new LinkedHashMap<>()), 8)));\n    System.out.println(Utils.getDeepCopy(session.getViolations(), 6));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c09a89337c5a3688436fd158575e28cdbb4fe28e","date":1490706842,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/recipe/TestRuleSorter#testRuleParsing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/recipe/TestRuleSorter#testRuleParsing().mjava","sourceNew":"  public void testRuleParsing() throws IOException {\n    String rules = \"{\" +\n        \"conditions:[{nodeRole:'!overseer', strict:false},{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n\n    Map<String,Map> nodeValues = (Map<String, Map>) Utils.fromJSONString( \"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n    String clusterState = \"{'gettingstarted':{\" +\n        \"    'router':{'name':'compositeId'},\" +\n        \"    'shards':{\" +\n        \"      'shard1':{\" +\n        \"        'range':'80000000-ffffffff',\" +\n        \"        'replicas':{\" +\n        \"          'r1':{\" +\n        \"            'core':r1,\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'r2':{\" +\n        \"            'core':r2,\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node2',\" +\n        \"            'state':'active'}}},\" +\n        \"      'shard2':{\" +\n        \"        'range':'0-7fffffff',\" +\n        \"        'replicas':{\" +\n        \"          'r3':{\" +\n        \"            'core':r3,\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'r4':{\" +\n        \"            'core':r4,\" +\n        \"            'base_url':'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name':'node4',\" +\n        \"            'state':'active'},\" +\n        \"          'r6':{\" +\n        \"            'core':r6,\" +\n        \"            'base_url':'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name':'node3',\" +\n        \"            'state':'active'},\" +\n        \"          'r5':{\" +\n        \"            'core':r5,\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active'}}}}}}\";\n\n\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n\n\n    RuleSorter ruleSorter = new RuleSorter((Map<String, Object>) Utils.fromJSONString(rules));\n    RuleSorter.Session session;\n    RuleSorter.NodeValueProvider snitch = new RuleSorter.NodeValueProvider() {\n      @Override\n      public Map<String,Object> getValues(String node, Collection<String> keys) {\n        Map<String,Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<RuleSorter.ReplicaStat>>> getReplicaCounts(String node, Collection<String> keys) {\n        Map<String, Map<String, List<RuleSorter.ReplicaStat>>> result = new LinkedHashMap<>();\n\n        m.forEach((collName, o) -> {\n          ValidatingJsonMap coll = (ValidatingJsonMap) o;\n          coll.getMap(\"shards\").forEach((shard, o1) -> {\n            ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n            sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n              ValidatingJsonMap r = (ValidatingJsonMap) o2;\n              String node_name = (String) r.get(\"node_name\");\n              if (!node_name.equals(node)) return;\n              Map<String, List<RuleSorter.ReplicaStat>> shardVsReplicaStats = result.get(collName);\n              if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n              List<RuleSorter.ReplicaStat> replicaStats = shardVsReplicaStats.get(shard);\n              if (replicaStats == null) shardVsReplicaStats.put(shard, replicaStats = new ArrayList<>());\n              replicaStats.add(new RuleSorter.ReplicaStat(replicaName, new HashMap<>()));\n            });\n          });\n        });\n\n        return result;\n      }\n\n\n    };\n\n    session = ruleSorter.createSession(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"), snitch);\n\n    session.applyRules();\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\",l.get(0).node);\n    assertEquals(\"node3\",l.get(1).node);\n    assertEquals(\"node4\",l.get(2).node);\n    assertEquals(\"node2\",l.get(3).node);\n\n\n    System.out.printf(Utils.toJSONString(Utils.getDeepCopy(session.toMap(new LinkedHashMap<>()), 8)));\n    Map<String, List<Clause>> violations = session.getViolations();\n    System.out.println(Utils.getDeepCopy(violations, 6));\n    assertEquals(3, violations.size());\n    List<Clause> v = violations.get(\"node4\");\n    assertNotNull(v);\n    assertEquals(v.get(0).tag.name, \"nodeRole\");\n    v = violations.get(\"node1\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 2);\n    v = violations.get(\"node3\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 1);\n    assertEquals(v.get(0).tag.val, \"node3\");\n\n\n\n  }\n\n","sourceOld":"  public void testRuleParsing() throws IOException {\n    String rules = \"{\" +\n        \"conditions:[{nodeRole:'!overseer', strict:false},{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n\n    Map<String,Map> nodeValues = (Map<String, Map>) Utils.fromJSONString( \"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n    String clusterState = \"{'gettingstarted':{\" +\n        \"    'router':{'name':'compositeId'},\" +\n        \"    'shards':{\" +\n        \"      'shard1':{\" +\n        \"        'range':'80000000-ffffffff',\" +\n        \"        'replicas':{\" +\n        \"          'r1':{\" +\n        \"            'core':r1,\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'r2':{\" +\n        \"            'core':r2,\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node2',\" +\n        \"            'state':'active'}}},\" +\n        \"      'shard2':{\" +\n        \"        'range':'0-7fffffff',\" +\n        \"        'replicas':{\" +\n        \"          'r3':{\" +\n        \"            'core':r3,\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'r4':{\" +\n        \"            'core':r4,\" +\n        \"            'base_url':'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name':'node4',\" +\n        \"            'state':'active'},\" +\n        \"          'r6':{\" +\n        \"            'core':r6,\" +\n        \"            'base_url':'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name':'node3',\" +\n        \"            'state':'active'},\" +\n        \"          'r5':{\" +\n        \"            'core':r5,\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active'}}}}}}\";\n\n\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n\n\n    RuleSorter ruleSorter = new RuleSorter((Map<String, Object>) Utils.fromJSONString(rules));\n    RuleSorter.Session session;\n    RuleSorter.NodeValueProvider snitch = new RuleSorter.NodeValueProvider() {\n      @Override\n      public Map<String,Object> getValues(String node, Collection<String> keys) {\n        Map<String,Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<RuleSorter.ReplicaStat>>> getReplicaCounts(String node, Collection<String> keys) {\n        Map<String, Map<String, List<RuleSorter.ReplicaStat>>> result = new LinkedHashMap<>();\n\n        m.forEach((collName, o) -> {\n          ValidatingJsonMap coll = (ValidatingJsonMap) o;\n          coll.getMap(\"shards\").forEach((shard, o1) -> {\n            ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n            sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n              ValidatingJsonMap r = (ValidatingJsonMap) o2;\n              String node_name = (String) r.get(\"node_name\");\n              if (!node_name.equals(node)) return;\n              Map<String, List<RuleSorter.ReplicaStat>> shardVsReplicaStats = result.get(collName);\n              if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n              List<RuleSorter.ReplicaStat> replicaStats = shardVsReplicaStats.get(shard);\n              if (replicaStats == null) shardVsReplicaStats.put(shard, replicaStats = new ArrayList<>());\n              replicaStats.add(new RuleSorter.ReplicaStat(replicaName, new HashMap<>()));\n            });\n          });\n        });\n\n        return result;\n      }\n\n\n    };\n\n    session = ruleSorter.createSession(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"), snitch);\n\n    session.applyRules();\n    List<RuleSorter.Row> l = session.getSorted();\n    assertEquals(\"node1\",l.get(0).node);\n    assertEquals(\"node3\",l.get(1).node);\n    assertEquals(\"node4\",l.get(2).node);\n    assertEquals(\"node2\",l.get(3).node);\n\n\n    System.out.printf(Utils.toJSONString(Utils.getDeepCopy(session.toMap(new LinkedHashMap<>()), 8)));\n    Map<String, List<Clause>> violations = session.getViolations();\n    System.out.println(Utils.getDeepCopy(violations, 6));\n    assertEquals(3, violations.size());\n    List<Clause> v = violations.get(\"node4\");\n    assertNotNull(v);\n    assertEquals(v.get(0).tag.name, \"nodeRole\");\n    v = violations.get(\"node1\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 2);\n    v = violations.get(\"node3\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 1);\n    assertEquals(v.get(0).tag.val, \"node3\");\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"752049b8e30557f067592844bff40caaea288062","date":1490707105,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/recipe/TestPolicy#testRuleParsing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/recipe/TestRuleSorter#testRuleParsing().mjava","sourceNew":"  public void testRuleParsing() throws IOException {\n    String rules = \"{\" +\n        \"conditions:[{nodeRole:'!overseer', strict:false},{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n\n    Map<String,Map> nodeValues = (Map<String, Map>) Utils.fromJSONString( \"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n    String clusterState = \"{'gettingstarted':{\" +\n        \"    'router':{'name':'compositeId'},\" +\n        \"    'shards':{\" +\n        \"      'shard1':{\" +\n        \"        'range':'80000000-ffffffff',\" +\n        \"        'replicas':{\" +\n        \"          'r1':{\" +\n        \"            'core':r1,\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'r2':{\" +\n        \"            'core':r2,\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node2',\" +\n        \"            'state':'active'}}},\" +\n        \"      'shard2':{\" +\n        \"        'range':'0-7fffffff',\" +\n        \"        'replicas':{\" +\n        \"          'r3':{\" +\n        \"            'core':r3,\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'r4':{\" +\n        \"            'core':r4,\" +\n        \"            'base_url':'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name':'node4',\" +\n        \"            'state':'active'},\" +\n        \"          'r6':{\" +\n        \"            'core':r6,\" +\n        \"            'base_url':'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name':'node3',\" +\n        \"            'state':'active'},\" +\n        \"          'r5':{\" +\n        \"            'core':r5,\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active'}}}}}}\";\n\n\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    Policy.NodeValueProvider snitch = new Policy.NodeValueProvider() {\n      @Override\n      public Map<String,Object> getValues(String node, Collection<String> keys) {\n        Map<String,Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaStat>>> getReplicaCounts(String node, Collection<String> keys) {\n        Map<String, Map<String, List<Policy.ReplicaStat>>> result = new LinkedHashMap<>();\n\n        m.forEach((collName, o) -> {\n          ValidatingJsonMap coll = (ValidatingJsonMap) o;\n          coll.getMap(\"shards\").forEach((shard, o1) -> {\n            ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n            sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n              ValidatingJsonMap r = (ValidatingJsonMap) o2;\n              String node_name = (String) r.get(\"node_name\");\n              if (!node_name.equals(node)) return;\n              Map<String, List<Policy.ReplicaStat>> shardVsReplicaStats = result.get(collName);\n              if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n              List<Policy.ReplicaStat> replicaStats = shardVsReplicaStats.get(shard);\n              if (replicaStats == null) shardVsReplicaStats.put(shard, replicaStats = new ArrayList<>());\n              replicaStats.add(new Policy.ReplicaStat(replicaName, new HashMap<>()));\n            });\n          });\n        });\n\n        return result;\n      }\n\n\n    };\n\n    session = policy.createSession(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"), snitch);\n\n    session.applyRules();\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\",l.get(0).node);\n    assertEquals(\"node3\",l.get(1).node);\n    assertEquals(\"node4\",l.get(2).node);\n    assertEquals(\"node2\",l.get(3).node);\n\n\n    System.out.printf(Utils.toJSONString(Utils.getDeepCopy(session.toMap(new LinkedHashMap<>()), 8)));\n    Map<String, List<Clause>> violations = session.getViolations();\n    System.out.println(Utils.getDeepCopy(violations, 6));\n    assertEquals(3, violations.size());\n    List<Clause> v = violations.get(\"node4\");\n    assertNotNull(v);\n    assertEquals(v.get(0).tag.name, \"nodeRole\");\n    v = violations.get(\"node1\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 2);\n    v = violations.get(\"node3\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 1);\n    assertEquals(v.get(0).tag.val, \"node3\");\n\n\n\n  }\n\n","sourceOld":"  public void testRuleParsing() throws IOException {\n    String rules = \"{\" +\n        \"conditions:[{nodeRole:'!overseer', strict:false},{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n\n    Map<String,Map> nodeValues = (Map<String, Map>) Utils.fromJSONString( \"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}\" +\n        \"}\");\n    String clusterState = \"{'gettingstarted':{\" +\n        \"    'router':{'name':'compositeId'},\" +\n        \"    'shards':{\" +\n        \"      'shard1':{\" +\n        \"        'range':'80000000-ffffffff',\" +\n        \"        'replicas':{\" +\n        \"          'r1':{\" +\n        \"            'core':r1,\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'r2':{\" +\n        \"            'core':r2,\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node2',\" +\n        \"            'state':'active'}}},\" +\n        \"      'shard2':{\" +\n        \"        'range':'0-7fffffff',\" +\n        \"        'replicas':{\" +\n        \"          'r3':{\" +\n        \"            'core':r3,\" +\n        \"            'base_url':'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active',\" +\n        \"            'leader':'true'},\" +\n        \"          'r4':{\" +\n        \"            'core':r4,\" +\n        \"            'base_url':'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name':'node4',\" +\n        \"            'state':'active'},\" +\n        \"          'r6':{\" +\n        \"            'core':r6,\" +\n        \"            'base_url':'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name':'node3',\" +\n        \"            'state':'active'},\" +\n        \"          'r5':{\" +\n        \"            'core':r5,\" +\n        \"            'base_url':'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name':'node1',\" +\n        \"            'state':'active'}}}}}}\";\n\n\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n\n\n    RuleSorter ruleSorter = new RuleSorter((Map<String, Object>) Utils.fromJSONString(rules));\n    RuleSorter.Session session;\n    RuleSorter.NodeValueProvider snitch = new RuleSorter.NodeValueProvider() {\n      @Override\n      public Map<String,Object> getValues(String node, Collection<String> keys) {\n        Map<String,Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<RuleSorter.ReplicaStat>>> getReplicaCounts(String node, Collection<String> keys) {\n        Map<String, Map<String, List<RuleSorter.ReplicaStat>>> result = new LinkedHashMap<>();\n\n        m.forEach((collName, o) -> {\n          ValidatingJsonMap coll = (ValidatingJsonMap) o;\n          coll.getMap(\"shards\").forEach((shard, o1) -> {\n            ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n            sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n              ValidatingJsonMap r = (ValidatingJsonMap) o2;\n              String node_name = (String) r.get(\"node_name\");\n              if (!node_name.equals(node)) return;\n              Map<String, List<RuleSorter.ReplicaStat>> shardVsReplicaStats = result.get(collName);\n              if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n              List<RuleSorter.ReplicaStat> replicaStats = shardVsReplicaStats.get(shard);\n              if (replicaStats == null) shardVsReplicaStats.put(shard, replicaStats = new ArrayList<>());\n              replicaStats.add(new RuleSorter.ReplicaStat(replicaName, new HashMap<>()));\n            });\n          });\n        });\n\n        return result;\n      }\n\n\n    };\n\n    session = ruleSorter.createSession(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"), snitch);\n\n    session.applyRules();\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\",l.get(0).node);\n    assertEquals(\"node3\",l.get(1).node);\n    assertEquals(\"node4\",l.get(2).node);\n    assertEquals(\"node2\",l.get(3).node);\n\n\n    System.out.printf(Utils.toJSONString(Utils.getDeepCopy(session.toMap(new LinkedHashMap<>()), 8)));\n    Map<String, List<Clause>> violations = session.getViolations();\n    System.out.println(Utils.getDeepCopy(violations, 6));\n    assertEquals(3, violations.size());\n    List<Clause> v = violations.get(\"node4\");\n    assertNotNull(v);\n    assertEquals(v.get(0).tag.name, \"nodeRole\");\n    v = violations.get(\"node1\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 2);\n    v = violations.get(\"node3\");\n    assertNotNull(v);\n    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);\n    assertEquals(v.get(0).replica.val, 1);\n    assertEquals(v.get(0).tag.val, \"node3\");\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65b36a7cc02287c46274765c657d23db7e5ce163":["a834430db908aba7bd03ef98a893e56e820672c5"],"752049b8e30557f067592844bff40caaea288062":["c09a89337c5a3688436fd158575e28cdbb4fe28e"],"226b3bf77af5749a90c81edd3d4168fd6e276a24":["0cf93ce8d2bc0210731dd8d840f40b183df2c804"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c09a89337c5a3688436fd158575e28cdbb4fe28e":["65b36a7cc02287c46274765c657d23db7e5ce163"],"0cf93ce8d2bc0210731dd8d840f40b183df2c804":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a834430db908aba7bd03ef98a893e56e820672c5":["226b3bf77af5749a90c81edd3d4168fd6e276a24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"65b36a7cc02287c46274765c657d23db7e5ce163":["c09a89337c5a3688436fd158575e28cdbb4fe28e"],"752049b8e30557f067592844bff40caaea288062":[],"226b3bf77af5749a90c81edd3d4168fd6e276a24":["a834430db908aba7bd03ef98a893e56e820672c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cf93ce8d2bc0210731dd8d840f40b183df2c804","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c09a89337c5a3688436fd158575e28cdbb4fe28e":["752049b8e30557f067592844bff40caaea288062"],"0cf93ce8d2bc0210731dd8d840f40b183df2c804":["226b3bf77af5749a90c81edd3d4168fd6e276a24"],"a834430db908aba7bd03ef98a893e56e820672c5":["65b36a7cc02287c46274765c657d23db7e5ce163"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["752049b8e30557f067592844bff40caaea288062","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}