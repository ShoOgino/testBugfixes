{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","commits":[{"id":"e3ce1ef883d26aa73919aa2d53991726e96caa13","date":1445421402,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (ords.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, RamUsageEstimator.NUM_BYTES_INT));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      ords = growExact(ords, nextSize);\n      docIDs = growExact(docIDs, nextSize);\n    }\n    writePackedValue(nextWrite, packedValue);\n    ords[nextWrite] = ord;\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (ords.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      ords = growExact(ords, nextSize);\n      docIDs = growExact(docIDs, nextSize);\n    }\n    writePackedValue(nextWrite, packedValue);\n    ords[nextWrite] = ord;\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (ords.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, RamUsageEstimator.NUM_BYTES_INT));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      ords = growExact(ords, nextSize);\n      docIDs = growExact(docIDs, nextSize);\n    }\n    writePackedValue(nextWrite, packedValue);\n    ords[nextWrite] = ord;\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (ords.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      ords = growExact(ords, nextSize);\n      docIDs = growExact(docIDs, nextSize);\n    }\n    writePackedValue(nextWrite, packedValue);\n    ords[nextWrite] = ord;\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (ords.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, RamUsageEstimator.NUM_BYTES_INT));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      ords = growExact(ords, nextSize);\n      docIDs = growExact(docIDs, nextSize);\n    }\n    writePackedValue(nextWrite, packedValue);\n    ords[nextWrite] = ord;\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca","date":1457777566,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = growExact(docIDs, nextSize);\n      if (ordsLong != null) {\n        ordsLong = growExact(ordsLong, nextSize);\n      } else {\n        ords = growExact(ords, nextSize);\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (ordsLong != null) {\n      ordsLong[nextWrite] = ord;\n    } else {\n      assert ord <= Integer.MAX_VALUE;\n      ords[nextWrite] = (int) ord;\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (ords.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      ords = growExact(ords, nextSize);\n      docIDs = growExact(docIDs, nextSize);\n    }\n    writePackedValue(nextWrite, packedValue);\n    ords[nextWrite] = ord;\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416f9e28900210be57b69bc12e2954fb98ed7ebe","date":1458479803,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = growExact(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = growExact(ordsLong, nextSize);\n        } else {\n          ords = growExact(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = growExact(docIDs, nextSize);\n      if (ordsLong != null) {\n        ordsLong = growExact(ordsLong, nextSize);\n      } else {\n        ords = growExact(ords, nextSize);\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (ordsLong != null) {\n      ordsLong[nextWrite] = ord;\n    } else {\n      assert ord <= Integer.MAX_VALUE;\n      ords[nextWrite] = (int) ord;\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f","date":1464187721,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = Arrays.copyOf(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = Arrays.copyOf(ordsLong, nextSize);\n        } else {\n          ords = Arrays.copyOf(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = growExact(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = growExact(ordsLong, nextSize);\n        } else {\n          ords = growExact(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = Arrays.copyOf(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = Arrays.copyOf(ordsLong, nextSize);\n        } else {\n          ords = Arrays.copyOf(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = growExact(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = growExact(ordsLong, nextSize);\n        } else {\n          ords = growExact(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = Arrays.copyOf(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = Arrays.copyOf(ordsLong, nextSize);\n        } else {\n          ords = Arrays.copyOf(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = growExact(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = growExact(ordsLong, nextSize);\n        } else {\n          ords = growExact(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = Arrays.copyOf(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = Arrays.copyOf(ordsLong, nextSize);\n        } else {\n          ords = Arrays.copyOf(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = growExact(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = growExact(ordsLong, nextSize);\n        } else {\n          ords = growExact(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = ArrayUtil.growExact(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = ArrayUtil.growExact(ordsLong, nextSize);\n        } else {\n          ords = ArrayUtil.growExact(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = Arrays.copyOf(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = Arrays.copyOf(ordsLong, nextSize);\n        } else {\n          ords = Arrays.copyOf(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = ArrayUtil.growExact(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = ArrayUtil.growExact(ordsLong, nextSize);\n        } else {\n          ords = ArrayUtil.growExact(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = Arrays.copyOf(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = Arrays.copyOf(ordsLong, nextSize);\n        } else {\n          ords = Arrays.copyOf(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = ArrayUtil.growExact(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = ArrayUtil.growExact(ordsLong, nextSize);\n        } else {\n          ords = ArrayUtil.growExact(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = Arrays.copyOf(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = Arrays.copyOf(ordsLong, nextSize);\n        } else {\n          ords = Arrays.copyOf(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":6,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(BytesRef packedValue, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = ArrayUtil.growExact(docIDs, nextSize);\n    }\n    writePackedValue(nextWrite, packedValue);\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = ArrayUtil.growExact(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = ArrayUtil.growExact(ordsLong, nextSize);\n        } else {\n          ords = ArrayUtil.growExact(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":5,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = ArrayUtil.growExact(docIDs, nextSize);\n    }\n    writePackedValue(nextWrite, packedValue);\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = ArrayUtil.growExact(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = ArrayUtil.growExact(ordsLong, nextSize);\n        } else {\n          ords = ArrayUtil.growExact(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["416f9e28900210be57b69bc12e2954fb98ed7ebe","bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["9798d0818e7a880546802b509792d3f3d57babd2"],"419a8f52c6635419beb951255cacbbb281044c57":["e3ce1ef883d26aa73919aa2d53991726e96caa13","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["416f9e28900210be57b69bc12e2954fb98ed7ebe","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["416f9e28900210be57b69bc12e2954fb98ed7ebe","0e121d43b5a10f2df530f406f935102656e9c4e8"],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["419a8f52c6635419beb951255cacbbb281044c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["0e121d43b5a10f2df530f406f935102656e9c4e8","9798d0818e7a880546802b509792d3f3d57babd2"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"9798d0818e7a880546802b509792d3f3d57babd2":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["0e121d43b5a10f2df530f406f935102656e9c4e8","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"419a8f52c6635419beb951255cacbbb281044c57":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9798d0818e7a880546802b509792d3f3d57babd2":["78bdc7d6906146edb12a1a6c1f765ba680ed5124","b70042a8a492f7054d480ccdd2be9796510d4327","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}