{"path":"lucene/backwards/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText);\n    applySlop(q,slop);\n    return q;\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText);\n    applySlop(q,slop);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":null,"sourceOld":"  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText);\n    applySlop(q,slop);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}