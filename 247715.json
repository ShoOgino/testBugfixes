{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramFilter().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestNGramFilters#testNGramFilter().mjava","sourceNew":"  /**\n   * Test the NGramFilterFactory\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    NGramFilterFactory factory = new NGramFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"e\", \"s\", \"t\", \"te\", \"es\", \"st\" });\n  }\n\n","sourceOld":"  /**\n   * Test the NGramFilterFactory\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    NGramFilterFactory factory = new NGramFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"e\", \"s\", \"t\", \"te\", \"es\", \"st\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestNGramFilters#testNGramFilter().mjava","sourceNew":"  /**\n   * Test the NGramFilterFactory\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    NGramFilterFactory factory = new NGramFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"e\", \"s\", \"t\", \"te\", \"es\", \"st\" });\n  }\n\n","sourceOld":"  /**\n   * Test the NGramFilterFactory\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    NGramFilterFactory factory = new NGramFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"e\", \"s\", \"t\", \"te\", \"es\", \"st\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestNGramFilters#testNGramFilter().mjava","sourceNew":"  /**\n   * Test the NGramFilterFactory\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    NGramFilterFactory factory = new NGramFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"e\", \"s\", \"t\", \"te\", \"es\", \"st\" });\n  }\n\n","sourceOld":"  /**\n   * Test the NGramFilterFactory\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    NGramFilterFactory factory = new NGramFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"e\", \"s\", \"t\", \"te\", \"es\", \"st\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestNGramFilters#testNGramFilter().mjava","sourceNew":"  /**\n   * Test the NGramFilterFactory\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    NGramFilterFactory factory = new NGramFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"e\", \"s\", \"t\", \"te\", \"es\", \"st\" });\n  }\n\n","sourceOld":"  /**\n   * Test the NGramFilterFactory\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    NGramFilterFactory factory = new NGramFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"e\", \"s\", \"t\", \"te\", \"es\", \"st\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramFilter().mjava","sourceNew":"  /**\n   * Test the NGramFilterFactory\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"NGram\").create(stream);\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"e\", \"s\", \"t\", \"te\", \"es\", \"st\" });\n  }\n\n","sourceOld":"  /**\n   * Test the NGramFilterFactory\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    NGramFilterFactory factory = new NGramFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"e\", \"s\", \"t\", \"te\", \"es\", \"st\" });\n  }\n\n","bugFix":null,"bugIntro":["8a255765a5625ff80fba75863de5a16ea392015e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c807c4005aae1acaf5cebc9af40883985fb89a8","date":1366974206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramFilter().mjava","sourceNew":"  /**\n   * Test the NGramFilterFactory\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"NGram\").create(stream);\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"te\", \"e\", \"es\", \"s\", \"st\", \"t\" });\n  }\n\n","sourceOld":"  /**\n   * Test the NGramFilterFactory\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"NGram\").create(stream);\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"e\", \"s\", \"t\", \"te\", \"es\", \"st\" });\n  }\n\n","bugFix":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramFilter().mjava","sourceNew":"  /**\n   * Test the NGramFilterFactory\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"NGram\").create(stream);\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"te\", \"e\", \"es\", \"s\", \"st\", \"t\" });\n  }\n\n","sourceOld":"  /**\n   * Test the NGramFilterFactory\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"NGram\").create(stream);\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"te\", \"e\", \"es\", \"s\", \"st\", \"t\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a255765a5625ff80fba75863de5a16ea392015e","date":1528161860,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramFilter().mjava","sourceNew":"  /**\n   * Test the NGramFilterFactory with old defaults\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"NGram\",\n        \"minGramSize\", \"1\",\n        \"maxGramSize\", \"2\").create(stream);\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"te\", \"e\", \"es\", \"s\", \"st\", \"t\" });\n  }\n\n","sourceOld":"  /**\n   * Test the NGramFilterFactory\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"NGram\").create(stream);\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"te\", \"e\", \"es\", \"s\", \"st\", \"t\" });\n  }\n\n","bugFix":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramFilter().mjava","sourceNew":"  /**\n   * Test the NGramFilterFactory with old defaults\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"NGram\",\n        \"minGramSize\", \"1\",\n        \"maxGramSize\", \"2\").create(stream);\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"te\", \"e\", \"es\", \"s\", \"st\", \"t\" });\n  }\n\n","sourceOld":"  /**\n   * Test the NGramFilterFactory\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"NGram\").create(stream);\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"te\", \"e\", \"es\", \"s\", \"st\", \"t\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testNGramFilter().mjava","sourceNew":"  /**\n   * Test the NGramFilterFactory with old defaults\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"NGram\",\n        \"minGramSize\", \"1\",\n        \"maxGramSize\", \"2\").create(stream);\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"te\", \"e\", \"es\", \"s\", \"st\", \"t\" });\n  }\n\n","sourceOld":"  /**\n   * Test the NGramFilterFactory\n   */\n  public void testNGramFilter() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"NGram\").create(stream);\n    assertTokenStreamContents(stream, \n        new String[] { \"t\", \"te\", \"e\", \"es\", \"s\", \"st\", \"t\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a255765a5625ff80fba75863de5a16ea392015e":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["4c807c4005aae1acaf5cebc9af40883985fb89a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","8a255765a5625ff80fba75863de5a16ea392015e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"4c807c4005aae1acaf5cebc9af40883985fb89a8":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"f592209545c71895260367152601e9200399776d":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","8a255765a5625ff80fba75863de5a16ea392015e"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a255765a5625ff80fba75863de5a16ea392015e"]},"commit2Childs":{"8a255765a5625ff80fba75863de5a16ea392015e":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["8a255765a5625ff80fba75863de5a16ea392015e","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"4c807c4005aae1acaf5cebc9af40883985fb89a8":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["4c807c4005aae1acaf5cebc9af40883985fb89a8"],"f592209545c71895260367152601e9200399776d":[],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b70042a8a492f7054d480ccdd2be9796510d4327","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}