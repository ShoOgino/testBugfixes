{"path":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#setupCluster().mjava","commits":[{"id":"6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0","date":1515077688,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n\n    // decide collection name ...\n    COLLECTION = \"collection\"+(1+random().nextInt(100)) ;\n    // ... and shard/replica/node numbers\n    final int numShards = 3;\n    final int numReplicas = 2;\n    final int maxShardsPerNode = 2;\n    final int nodeCount = (numShards*numReplicas + (maxShardsPerNode-1))/maxShardsPerNode;\n\n    // create and configure cluster\n    configureCluster(nodeCount)\n        .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n        .configure();\n\n    // create an empty collection\n    CollectionAdminRequest\n    .createCollection(COLLECTION, \"conf\", numShards, numReplicas)\n    .setMaxShardsPerNode(maxShardsPerNode)\n    .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(), false, true, DEFAULT_TIMEOUT);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n\n    // decide collection name ...\n    COLLECTION = \"collection\"+(1+random().nextInt(100)) ;\n    // ... and shard/replica/node numbers\n    final int numShards = 3;\n    final int numReplicas = 2;\n    final int maxShardsPerNode = 2;\n    final int nodeCount = (numShards*numReplicas + (maxShardsPerNode-1))/maxShardsPerNode;\n\n    // create and configure cluster\n    configureCluster(nodeCount)\n        .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n        .configure();\n\n    // create an empty collection\n    CollectionAdminRequest\n    .createCollection(COLLECTION, \"conf\", numShards, numReplicas)\n    .setMaxShardsPerNode(maxShardsPerNode)\n    .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(), false, true, DEFAULT_TIMEOUT);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/CustomHighlightComponentTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n\n    // decide collection name ...\n    COLLECTION = \"collection\"+(1+random().nextInt(100)) ;\n    // ... and shard/replica/node numbers\n    final int numShards = 3;\n    final int numReplicas = 2;\n    final int nodeCount = numShards*numReplicas;\n\n    // create and configure cluster\n    configureCluster(nodeCount)\n        .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n        .configure();\n\n    // create an empty collection\n    CollectionAdminRequest\n    .createCollection(COLLECTION, \"conf\", numShards, numReplicas)\n    .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(), false, true, DEFAULT_TIMEOUT);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n\n    // decide collection name ...\n    COLLECTION = \"collection\"+(1+random().nextInt(100)) ;\n    // ... and shard/replica/node numbers\n    final int numShards = 3;\n    final int numReplicas = 2;\n    final int maxShardsPerNode = 2;\n    final int nodeCount = (numShards*numReplicas + (maxShardsPerNode-1))/maxShardsPerNode;\n\n    // create and configure cluster\n    configureCluster(nodeCount)\n        .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n        .configure();\n\n    // create an empty collection\n    CollectionAdminRequest\n    .createCollection(COLLECTION, \"conf\", numShards, numReplicas)\n    .setMaxShardsPerNode(maxShardsPerNode)\n    .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(), false, true, DEFAULT_TIMEOUT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0"],"6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}