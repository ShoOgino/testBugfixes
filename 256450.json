{"path":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#Packed64(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#Packed64(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/Packed64#Packed64(int,int).mjava","sourceNew":"  /**\n   * Creates an array with the internal structures adjusted for the given\n   * limits and initialized to 0.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   */\n  public Packed64(int valueCount, int bitsPerValue) {\n    // TODO: Test for edge-cases (2^31 values, 63 bitsPerValue)\n    // +2 due to the avoid-conditionals-trick. The last entry is always 0\n    this(new long[(int)((long)valueCount * bitsPerValue / BLOCK_SIZE + 2)],\n            valueCount, bitsPerValue);\n  }\n\n","sourceOld":"  /**\n   * Creates an array with the internal structures adjusted for the given\n   * limits and initialized to 0.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   */\n  public Packed64(int valueCount, int bitsPerValue) {\n    // TODO: Test for edge-cases (2^31 values, 63 bitsPerValue)\n    // +2 due to the avoid-conditionals-trick. The last entry is always 0\n    this(new long[(int)((long)valueCount * bitsPerValue / BLOCK_SIZE + 2)],\n            valueCount, bitsPerValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e88d4ca668409948aba3fb1b3708964e6035630b","date":1340974374,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#Packed64(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#Packed64(int,int).mjava","sourceNew":"  /**\n   * Creates an array with the internal structures adjusted for the given\n   * limits and initialized to 0.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   */\n  public Packed64(int valueCount, int bitsPerValue) {\n    // NOTE: block-size was previously calculated as\n    // valueCount * bitsPerValue / BLOCK_SIZE + 1\n    // due to memory layout requirements dictated by non-branching code\n    this(new long[size(valueCount, bitsPerValue)],\n            valueCount, bitsPerValue);\n  }\n\n","sourceOld":"  /**\n   * Creates an array with the internal structures adjusted for the given\n   * limits and initialized to 0.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   */\n  public Packed64(int valueCount, int bitsPerValue) {\n    // TODO: Test for edge-cases (2^31 values, 63 bitsPerValue)\n    // +2 due to the avoid-conditionals-trick. The last entry is always 0\n    this(new long[(int)((long)valueCount * bitsPerValue / BLOCK_SIZE + 2)],\n            valueCount, bitsPerValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#Packed64(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#Packed64(int,int).mjava","sourceNew":"  /**\n   * Creates an array with the internal structures adjusted for the given\n   * limits and initialized to 0.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   */\n  public Packed64(int valueCount, int bitsPerValue) {\n    // NOTE: block-size was previously calculated as\n    // valueCount * bitsPerValue / BLOCK_SIZE + 1\n    // due to memory layout requirements dictated by non-branching code\n    this(new long[size(valueCount, bitsPerValue)],\n            valueCount, bitsPerValue);\n  }\n\n","sourceOld":"  /**\n   * Creates an array with the internal structures adjusted for the given\n   * limits and initialized to 0.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   */\n  public Packed64(int valueCount, int bitsPerValue) {\n    // TODO: Test for edge-cases (2^31 values, 63 bitsPerValue)\n    // +2 due to the avoid-conditionals-trick. The last entry is always 0\n    this(new long[(int)((long)valueCount * bitsPerValue / BLOCK_SIZE + 2)],\n            valueCount, bitsPerValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c661dcad9680b8a6ce5bf2cc583a69ec965328bc","date":1352297862,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#Packed64(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#Packed64(int,int).mjava","sourceNew":"  /**\n   * Creates an array with the internal structures adjusted for the given\n   * limits and initialized to 0.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   */\n  public Packed64(int valueCount, int bitsPerValue) {\n    super(valueCount, bitsPerValue);\n    final PackedInts.Format format = PackedInts.Format.PACKED;\n    final int longCount = format.longCount(PackedInts.VERSION_CURRENT, valueCount, bitsPerValue);\n    this.blocks = new long[longCount];\n    maskRight = ~0L << (BLOCK_SIZE-bitsPerValue) >>> (BLOCK_SIZE-bitsPerValue);\n    bpvMinusBlockSize = bitsPerValue - BLOCK_SIZE;\n  }\n\n","sourceOld":"  /**\n   * Creates an array with the internal structures adjusted for the given\n   * limits and initialized to 0.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   */\n  public Packed64(int valueCount, int bitsPerValue) {\n    // NOTE: block-size was previously calculated as\n    // valueCount * bitsPerValue / BLOCK_SIZE + 1\n    // due to memory layout requirements dictated by non-branching code\n    this(new long[size(valueCount, bitsPerValue)],\n            valueCount, bitsPerValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e88d4ca668409948aba3fb1b3708964e6035630b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","e88d4ca668409948aba3fb1b3708964e6035630b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["e88d4ca668409948aba3fb1b3708964e6035630b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc"]},"commit2Childs":{"e88d4ca668409948aba3fb1b3708964e6035630b":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c661dcad9680b8a6ce5bf2cc583a69ec965328bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e88d4ca668409948aba3fb1b3708964e6035630b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}