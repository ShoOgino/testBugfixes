{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStatesToAccept(LightAutomaton).mjava","commits":[{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStatesToAccept(LightAutomaton).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(LightAutomaton a) {\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    LightAutomaton a2 = builder.finish();\n\n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet live = new BitSet(numStates);\n    for (int s : a.getAcceptStates()) {\n      live.set(s);\n      workList.add(s);\n    }\n\n    while (workList.isEmpty() == false) {\n      int s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStatesToAccept(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStatesToAccept(LightAutomaton).mjava","sourceNew":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    Automaton a2 = builder.finish();\n\n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet live = new BitSet(numStates);\n    for (int s : a.getAcceptStates()) {\n      live.set(s);\n      workList.add(s);\n    }\n\n    while (workList.isEmpty() == false) {\n      int s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","sourceOld":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(LightAutomaton a) {\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    LightAutomaton a2 = builder.finish();\n\n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet live = new BitSet(numStates);\n    for (int s : a.getAcceptStates()) {\n      live.set(s);\n      workList.add(s);\n    }\n\n    while (workList.isEmpty() == false) {\n      int s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}