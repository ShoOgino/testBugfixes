{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTimeSeriesStream().mjava","commits":[{"id":"c35d3c01114129fff707f0777080210fa9deb2a7","date":1493219863,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTimeSeriesStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTimeSeriesStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18255ef03f6449839fece69b2dbad04f214e55eb","date":1496169578,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTimeSeriesStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTimeSeriesStream().mjava","sourceNew":"  @Test\n  public void testTimeSeriesStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy-MM\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n  }\n\n","sourceOld":"  @Test\n  public void testTimeSeriesStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTimeSeriesStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTimeSeriesStream().mjava","sourceNew":"  @Test\n  public void testTimeSeriesStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy-MM\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n  }\n\n","sourceOld":"  @Test\n  public void testTimeSeriesStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44b289ba5434fa10782118c697fa706d6cf231df","date":1496249545,"type":3,"author":"Chris Hostetter","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTimeSeriesStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTimeSeriesStream().mjava","sourceNew":"  @Test\n  public void testTimeSeriesStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy-MM\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n  }\n\n","sourceOld":"  @Test\n  public void testTimeSeriesStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTimeSeriesStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTimeSeriesStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy-MM\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39298ef8656bc999dea7f9bf8dfa60bdc2d2f88a","date":1514477671,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTimeSeriesStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTimeSeriesStream().mjava","sourceNew":"  @Test\n  public void testTimeSeriesStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy-MM\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2012-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy-MM\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 5);\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2012-01\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(0L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\") == null);\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\") == null);\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\") == null);\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2013-01\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2014-01\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2015-01\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(4).get(\"test_dt\").equals(\"2016-01\"));\n    assertTrue(tuples.get(4).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(4).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(4).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(4).getDouble(\"min(price_f)\").equals(400D));\n  }\n\n","sourceOld":"  @Test\n  public void testTimeSeriesStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy-MM\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"662912688ad17e8f9ba6804db6c987892f59a713","date":1536280466,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTimeSeriesStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTimeSeriesStream().mjava","sourceNew":"  @Test\n  public void testTimeSeriesStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2017-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 5);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n    assertTrue(tuples.get(4).get(\"test_dt\").equals(\"2017-01-01T01:00:00Z\"));\n    assertEquals((long)tuples.get(4).getLong(\"count(*)\"), 0L);\n    assertEquals(tuples.get(4).getDouble(\"sum(price_f)\"), 0D, 0);\n    assertEquals(tuples.get(4).getDouble(\"max(price_f)\"),0D, 0);\n    assertEquals(tuples.get(4).getDouble(\"min(price_f)\"), 0D, 0);\n\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy-MM\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2012-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy-MM\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 5);\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2012-01\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(0L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\") == 0);\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\") == 0);\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\") == 0);\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2013-01\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2014-01\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2015-01\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(4).get(\"test_dt\").equals(\"2016-01\"));\n    assertTrue(tuples.get(4).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(4).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(4).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(4).getDouble(\"min(price_f)\").equals(400D));\n  }\n\n","sourceOld":"  @Test\n  public void testTimeSeriesStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy-MM\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2012-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy-MM\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 5);\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2012-01\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(0L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\") == null);\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\") == null);\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\") == null);\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2013-01\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2014-01\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2015-01\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(4).get(\"test_dt\").equals(\"2016-01\"));\n    assertTrue(tuples.get(4).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(4).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(4).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(4).getDouble(\"min(price_f)\").equals(400D));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"570664407cd3123a8039f1b4f2f6c6693bdaee31","date":1589893823,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTimeSeriesStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTimeSeriesStream().mjava","sourceNew":"  @Test\n  public void testTimeSeriesStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2017-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f), avg(price_f), std(price_f), per(price_f, 50))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 5);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"avg(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(0).getDouble(\"per(price_f,50)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(1).getDouble(\"per(price_f,50)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"avg(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(2).getDouble(\"per(price_f,50)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"avg(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(3).getDouble(\"per(price_f,50)\").equals(400D));\n\n    assertTrue(tuples.get(4).get(\"test_dt\").equals(\"2017-01-01T01:00:00Z\"));\n    assertEquals((long)tuples.get(4).getLong(\"count(*)\"), 0L);\n    assertEquals(tuples.get(4).getDouble(\"sum(price_f)\"), 0D, 0);\n    assertEquals(tuples.get(4).getDouble(\"max(price_f)\"),0D, 0);\n    assertEquals(tuples.get(4).getDouble(\"min(price_f)\"), 0D, 0);\n    assertTrue(tuples.get(4).getDouble(\"avg(price_f)\").equals(0D));\n    assertTrue(tuples.get(4).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(4).getDouble(\"per(price_f,50)\").equals(0D));\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f), avg(price_f), std(price_f), per(price_f, 50))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"avg(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(0).getDouble(\"per(price_f,50)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(1).getDouble(\"per(price_f,50)\").equals(500D));\n\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"avg(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(2).getDouble(\"per(price_f,50)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"avg(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(3).getDouble(\"per(price_f,50)\").equals(400D));\n\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy-MM\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f), avg(price_f), std(price_f), per(price_f, 50))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"avg(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(0).getDouble(\"per(price_f,50)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(1).getDouble(\"per(price_f,50)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"avg(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(2).getDouble(\"per(price_f,50)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"avg(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(3).getDouble(\"per(price_f,50)\").equals(400D));\n\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2012-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy-MM\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f), avg(price_f), std(price_f), per(price_f, 50))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 5);\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2012-01\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(0L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\") == 0);\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\") == 0);\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\") == 0);\n    assertTrue(tuples.get(0).getDouble(\"avg(price_f)\").equals(0D));\n    assertTrue(tuples.get(0).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(0).getDouble(\"per(price_f,50)\").equals(0D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2013-01\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(100D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(100D));\n    assertTrue(tuples.get(1).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(1).getDouble(\"per(price_f,50)\").equals(100D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2014-01\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(500D));\n    assertTrue(tuples.get(2).getDouble(\"avg(price_f)\").equals(500D));\n    assertTrue(tuples.get(2).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(2).getDouble(\"per(price_f,50)\").equals(500D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2015-01\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(300D));\n    assertTrue(tuples.get(3).getDouble(\"avg(price_f)\").equals(300D));\n    assertTrue(tuples.get(3).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(3).getDouble(\"per(price_f,50)\").equals(300D));\n\n    assertTrue(tuples.get(4).get(\"test_dt\").equals(\"2016-01\"));\n    assertTrue(tuples.get(4).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(4).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(4).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(4).getDouble(\"min(price_f)\").equals(400D));\n    assertTrue(tuples.get(4).getDouble(\"avg(price_f)\").equals(400D));\n    assertTrue(tuples.get(4).getDouble(\"std(price_f)\").equals(0D));\n    assertTrue(tuples.get(4).getDouble(\"per(price_f,50)\").equals(400D));\n  }\n\n","sourceOld":"  @Test\n  public void testTimeSeriesStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2017-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 5);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01-01T01:00:00Z\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n    assertTrue(tuples.get(4).get(\"test_dt\").equals(\"2017-01-01T01:00:00Z\"));\n    assertEquals((long)tuples.get(4).getLong(\"count(*)\"), 0L);\n    assertEquals(tuples.get(4).getDouble(\"sum(price_f)\"), 0D, 0);\n    assertEquals(tuples.get(4).getDouble(\"max(price_f)\"),0D, 0);\n    assertEquals(tuples.get(4).getDouble(\"min(price_f)\"), 0D, 0);\n\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy-MM\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2013-01\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2014-01\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2015-01\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2016-01\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(400D));\n\n\n    expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2012-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"format=\\\"yyyy-MM\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 5);\n    assertTrue(tuples.get(0).get(\"test_dt\").equals(\"2012-01\"));\n    assertTrue(tuples.get(0).getLong(\"count(*)\").equals(0L));\n    assertTrue(tuples.get(0).getDouble(\"sum(price_f)\") == 0);\n    assertTrue(tuples.get(0).getDouble(\"max(price_f)\") == 0);\n    assertTrue(tuples.get(0).getDouble(\"min(price_f)\") == 0);\n\n    assertTrue(tuples.get(1).get(\"test_dt\").equals(\"2013-01\"));\n    assertTrue(tuples.get(1).getLong(\"count(*)\").equals(100L));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(10000D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(100D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(100D));\n\n    assertTrue(tuples.get(2).get(\"test_dt\").equals(\"2014-01\"));\n    assertTrue(tuples.get(2).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(2).getDouble(\"sum(price_f)\").equals(25000D));\n    assertTrue(tuples.get(2).getDouble(\"max(price_f)\").equals(500D));\n    assertTrue(tuples.get(2).getDouble(\"min(price_f)\").equals(500D));\n\n    assertTrue(tuples.get(3).get(\"test_dt\").equals(\"2015-01\"));\n    assertTrue(tuples.get(3).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(3).getDouble(\"sum(price_f)\").equals(15000D));\n    assertTrue(tuples.get(3).getDouble(\"max(price_f)\").equals(300D));\n    assertTrue(tuples.get(3).getDouble(\"min(price_f)\").equals(300D));\n\n    assertTrue(tuples.get(4).get(\"test_dt\").equals(\"2016-01\"));\n    assertTrue(tuples.get(4).getLong(\"count(*)\").equals(50L));\n    assertTrue(tuples.get(4).getDouble(\"sum(price_f)\").equals(20000D));\n    assertTrue(tuples.get(4).getDouble(\"max(price_f)\").equals(400D));\n    assertTrue(tuples.get(4).getDouble(\"min(price_f)\").equals(400D));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","18255ef03f6449839fece69b2dbad04f214e55eb"],"39298ef8656bc999dea7f9bf8dfa60bdc2d2f88a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"c35d3c01114129fff707f0777080210fa9deb2a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"18255ef03f6449839fece69b2dbad04f214e55eb":["c35d3c01114129fff707f0777080210fa9deb2a7"],"662912688ad17e8f9ba6804db6c987892f59a713":["39298ef8656bc999dea7f9bf8dfa60bdc2d2f88a"],"44b289ba5434fa10782118c697fa706d6cf231df":["c35d3c01114129fff707f0777080210fa9deb2a7","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["662912688ad17e8f9ba6804db6c987892f59a713"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["c35d3c01114129fff707f0777080210fa9deb2a7","18255ef03f6449839fece69b2dbad04f214e55eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["570664407cd3123a8039f1b4f2f6c6693bdaee31"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"39298ef8656bc999dea7f9bf8dfa60bdc2d2f88a":["662912688ad17e8f9ba6804db6c987892f59a713"],"c35d3c01114129fff707f0777080210fa9deb2a7":["18255ef03f6449839fece69b2dbad04f214e55eb","44b289ba5434fa10782118c697fa706d6cf231df","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","c35d3c01114129fff707f0777080210fa9deb2a7"],"18255ef03f6449839fece69b2dbad04f214e55eb":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"662912688ad17e8f9ba6804db6c987892f59a713":["570664407cd3123a8039f1b4f2f6c6693bdaee31"],"44b289ba5434fa10782118c697fa706d6cf231df":[],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["39298ef8656bc999dea7f9bf8dfa60bdc2d2f88a","44b289ba5434fa10782118c697fa706d6cf231df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","44b289ba5434fa10782118c697fa706d6cf231df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}