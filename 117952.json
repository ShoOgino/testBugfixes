{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND));\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new StandardAnalyzer(TEST_VERSION_CURRENT))\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND));\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new StandardAnalyzer(TEST_VERSION_CURRENT))\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND));\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new StandardAnalyzer(TEST_VERSION_CURRENT))\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      MockRAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      MockRAMDirectory d = newDirectory(random);\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      MockRAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory(random);\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      MockRAMDirectory d = newDirectory(random);\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory(random);\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer())\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      assertNotNull(r2);\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = IndexReader.openIfChanged(r2);\n      assertNotNull(r3);\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      assertNotNull(r2);\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setOpenMode(OpenMode.APPEND));\n      writer.forceMerge(1);\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = IndexReader.openIfChanged(r2);\n      assertNotNull(r3);\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      assertNotNull(r2);\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = IndexReader.openIfChanged(r2);\n      assertNotNull(r3);\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":null,"sourceOld":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      assertNotNull(r2);\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setOpenMode(OpenMode.APPEND));\n      writer.forceMerge(1);\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = IndexReader.openIfChanged(r2);\n      assertNotNull(r3);\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":null,"sourceOld":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      assertNotNull(r2);\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setOpenMode(OpenMode.APPEND));\n      writer.forceMerge(1);\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = IndexReader.openIfChanged(r2);\n      assertNotNull(r3);\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":null,"sourceOld":"    public void testReadOnly() throws Throwable {\n      Directory d = newDirectory();\n      IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      assertNotNull(r2);\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setOpenMode(OpenMode.APPEND));\n      writer.forceMerge(1);\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = IndexReader.openIfChanged(r2);\n      assertNotNull(r3);\n      assertFalse(r3 == r2);\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","8a8259c922a83abc544609227a60d48e5ee93e7e","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}