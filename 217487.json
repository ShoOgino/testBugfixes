{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],String,String,String).mjava","commits":[{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a set of term facets, and top level query strings, asserts that \n   * the SKG stats for each facet term returned when executing that query with those foreground/background\n   * queries match the expected results of executing the equivilent queries in isolation.\n   *\n   * @see #verifySKGResults\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         Map<String,TermFacet> expected,\n                                         final String query,\n                                         final String foreQ,\n                                         final String backQ) throws SolrServerException, IOException {\n    final SolrParams baseParams = params(\"rows\",\"0\", \"fore\", foreQ, \"back\", backQ);\n    \n    final SolrParams facetParams = params(\"q\", query,\n                                          \"json.facet\", \"\"+TermFacet.toJSONFacetParamValue(expected,null));\n    final SolrParams initParams = SolrParams.wrapAppended(facetParams, baseParams);\n    \n    log.info(\"Doing full run: {}\", initParams);\n\n    QueryResponse rsp = null;\n    // JSON Facets not (currently) available from QueryResponse...\n    NamedList topNamedList = null;\n    try {\n      rsp = (new QueryRequest(initParams)).process(getRandClient(random()));\n      assertNotNull(initParams + \" is null rsp?\", rsp);\n      topNamedList = rsp.getResponse();\n      assertNotNull(initParams + \" is null topNamedList?\", topNamedList);\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n      if (0 == rsp.getResults().getNumFound()) {\n        // when the query matches nothing, we should expect no top level facets\n        expected = Collections.emptyMap();\n      }\n      assertFacetSKGsAreCorrect(maxBucketsToCheck, expected, baseParams, facetResponse);\n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ===> \" + topNamedList + \" --> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run\"); \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4","9f4251f14d2db68330fc1e6f0495c053a905d560"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6dad63b0bf8e0d3d4aaed5423f622f9601c4b6d8","date":1529607926,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],String,String,String).mjava","sourceNew":"  /**\n   * Given a set of term facets, and top level query strings, asserts that \n   * the SKG stats for each facet term returned when executing that query with those foreground/background\n   * queries match the expected results of executing the equivilent queries in isolation.\n   *\n   * @see #verifySKGResults\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         Map<String,TermFacet> expected,\n                                         final String query,\n                                         final String foreQ,\n                                         final String backQ) throws SolrServerException, IOException {\n    final SolrParams baseParams = params(\"rows\",\"0\", \"fore\", foreQ, \"back\", backQ);\n    \n    final SolrParams facetParams = params(\"q\", query,\n                                          \"json.facet\", \"\"+TermFacet.toJSONFacetParamValue(expected,null));\n    final SolrParams initParams = SolrParams.wrapAppended(facetParams, baseParams);\n    \n    log.info(\"Doing full run: {}\", initParams);\n\n    QueryResponse rsp = null;\n    // JSON Facets not (currently) available from QueryResponse...\n    NamedList topNamedList = null;\n    try {\n      rsp = (new QueryRequest(initParams)).process(getRandClient(random()));\n      assertNotNull(initParams + \" is null rsp?\", rsp);\n      topNamedList = rsp.getResponse();\n      assertNotNull(initParams + \" is null topNamedList?\", topNamedList);\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n\n      // Note: even if the query has numFound=0, our explicit background query domain should\n      // still force facet results\n      // (even if the background query matches nothing, that just means there will be no\n      // buckets in those facets)\n      assertFacetSKGsAreCorrect(maxBucketsToCheck, expected, baseParams, facetResponse);\n      \n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ===> \" + topNamedList + \" --> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run\"); \n    }\n  }\n\n","sourceOld":"  /**\n   * Given a set of term facets, and top level query strings, asserts that \n   * the SKG stats for each facet term returned when executing that query with those foreground/background\n   * queries match the expected results of executing the equivilent queries in isolation.\n   *\n   * @see #verifySKGResults\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         Map<String,TermFacet> expected,\n                                         final String query,\n                                         final String foreQ,\n                                         final String backQ) throws SolrServerException, IOException {\n    final SolrParams baseParams = params(\"rows\",\"0\", \"fore\", foreQ, \"back\", backQ);\n    \n    final SolrParams facetParams = params(\"q\", query,\n                                          \"json.facet\", \"\"+TermFacet.toJSONFacetParamValue(expected,null));\n    final SolrParams initParams = SolrParams.wrapAppended(facetParams, baseParams);\n    \n    log.info(\"Doing full run: {}\", initParams);\n\n    QueryResponse rsp = null;\n    // JSON Facets not (currently) available from QueryResponse...\n    NamedList topNamedList = null;\n    try {\n      rsp = (new QueryRequest(initParams)).process(getRandClient(random()));\n      assertNotNull(initParams + \" is null rsp?\", rsp);\n      topNamedList = rsp.getResponse();\n      assertNotNull(initParams + \" is null topNamedList?\", topNamedList);\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n      if (0 == rsp.getResults().getNumFound()) {\n        // when the query matches nothing, we should expect no top level facets\n        expected = Collections.emptyMap();\n      }\n      assertFacetSKGsAreCorrect(maxBucketsToCheck, expected, baseParams, facetResponse);\n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ===> \" + topNamedList + \" --> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run\"); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],String,String,String).mjava","sourceNew":"  /**\n   * Given a set of term facets, and top level query strings, asserts that \n   * the SKG stats for each facet term returned when executing that query with those foreground/background\n   * queries match the expected results of executing the equivilent queries in isolation.\n   *\n   * @see #verifySKGResults\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         Map<String,TermFacet> expected,\n                                         final String query,\n                                         final String foreQ,\n                                         final String backQ) throws SolrServerException, IOException {\n    final SolrParams baseParams = params(\"rows\",\"0\", \"fore\", foreQ, \"back\", backQ);\n    \n    final SolrParams facetParams = params(\"q\", query,\n                                          \"json.facet\", \"\"+TermFacet.toJSONFacetParamValue(expected,null));\n    final SolrParams initParams = SolrParams.wrapAppended(facetParams, baseParams);\n    \n    log.info(\"Doing full run: {}\", initParams);\n\n    QueryResponse rsp = null;\n    // JSON Facets not (currently) available from QueryResponse...\n    NamedList topNamedList = null;\n    try {\n      rsp = (new QueryRequest(initParams)).process(getRandClient(random()));\n      assertNotNull(initParams + \" is null rsp?\", rsp);\n      topNamedList = rsp.getResponse();\n      assertNotNull(initParams + \" is null topNamedList?\", topNamedList);\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n\n      // Note: even if the query has numFound=0, our explicit background query domain should\n      // still force facet results\n      // (even if the background query matches nothing, that just means there will be no\n      // buckets in those facets)\n      assertFacetSKGsAreCorrect(maxBucketsToCheck, expected, baseParams, facetResponse);\n      \n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ===> \" + topNamedList + \" --> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run\"); \n    }\n  }\n\n","sourceOld":"  /**\n   * Given a set of term facets, and top level query strings, asserts that \n   * the SKG stats for each facet term returned when executing that query with those foreground/background\n   * queries match the expected results of executing the equivilent queries in isolation.\n   *\n   * @see #verifySKGResults\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         Map<String,TermFacet> expected,\n                                         final String query,\n                                         final String foreQ,\n                                         final String backQ) throws SolrServerException, IOException {\n    final SolrParams baseParams = params(\"rows\",\"0\", \"fore\", foreQ, \"back\", backQ);\n    \n    final SolrParams facetParams = params(\"q\", query,\n                                          \"json.facet\", \"\"+TermFacet.toJSONFacetParamValue(expected,null));\n    final SolrParams initParams = SolrParams.wrapAppended(facetParams, baseParams);\n    \n    log.info(\"Doing full run: {}\", initParams);\n\n    QueryResponse rsp = null;\n    // JSON Facets not (currently) available from QueryResponse...\n    NamedList topNamedList = null;\n    try {\n      rsp = (new QueryRequest(initParams)).process(getRandClient(random()));\n      assertNotNull(initParams + \" is null rsp?\", rsp);\n      topNamedList = rsp.getResponse();\n      assertNotNull(initParams + \" is null topNamedList?\", topNamedList);\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n      if (0 == rsp.getResults().getNumFound()) {\n        // when the query matches nothing, we should expect no top level facets\n        expected = Collections.emptyMap();\n      }\n      assertFacetSKGsAreCorrect(maxBucketsToCheck, expected, baseParams, facetResponse);\n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ===> \" + topNamedList + \" --> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run\"); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],String,String,String).mjava","sourceNew":"  /**\n   * Given a set of term facets, and top level query strings, asserts that \n   * the SKG stats for each facet term returned when executing that query with those foreground/background\n   * queries match the expected results of executing the equivilent queries in isolation.\n   *\n   * @see #verifySKGResults\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         Map<String,TermFacet> expected,\n                                         final String query,\n                                         final String foreQ,\n                                         final String backQ) throws SolrServerException, IOException {\n    final SolrParams baseParams = params(\"rows\",\"0\", \"fore\", foreQ, \"back\", backQ);\n    \n    final SolrParams facetParams = params(\"q\", query,\n                                          \"json.facet\", \"\"+TermFacet.toJSONFacetParamValue(expected,null));\n    final SolrParams initParams = SolrParams.wrapAppended(facetParams, baseParams);\n    \n    log.info(\"Doing full run: {}\", initParams);\n\n    QueryResponse rsp = null;\n    // JSON Facets not (currently) available from QueryResponse...\n    NamedList topNamedList = null;\n    try {\n      rsp = (new QueryRequest(initParams)).process(getRandClient(random()));\n      assertNotNull(initParams + \" is null rsp?\", rsp);\n      topNamedList = rsp.getResponse();\n      assertNotNull(initParams + \" is null topNamedList?\", topNamedList);\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n\n      // Note: even if the query has numFound=0, our explicit background query domain should\n      // still force facet results\n      // (even if the background query matches nothing, that just means there will be no\n      // buckets in those facets)\n      assertFacetSKGsAreCorrect(maxBucketsToCheck, expected, baseParams, facetResponse);\n      \n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ===> \" + topNamedList + \" --> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run\"); \n    }\n  }\n\n","sourceOld":"  /**\n   * Given a set of term facets, and top level query strings, asserts that \n   * the SKG stats for each facet term returned when executing that query with those foreground/background\n   * queries match the expected results of executing the equivilent queries in isolation.\n   *\n   * @see #verifySKGResults\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         Map<String,TermFacet> expected,\n                                         final String query,\n                                         final String foreQ,\n                                         final String backQ) throws SolrServerException, IOException {\n    final SolrParams baseParams = params(\"rows\",\"0\", \"fore\", foreQ, \"back\", backQ);\n    \n    final SolrParams facetParams = params(\"q\", query,\n                                          \"json.facet\", \"\"+TermFacet.toJSONFacetParamValue(expected,null));\n    final SolrParams initParams = SolrParams.wrapAppended(facetParams, baseParams);\n    \n    log.info(\"Doing full run: {}\", initParams);\n\n    QueryResponse rsp = null;\n    // JSON Facets not (currently) available from QueryResponse...\n    NamedList topNamedList = null;\n    try {\n      rsp = (new QueryRequest(initParams)).process(getRandClient(random()));\n      assertNotNull(initParams + \" is null rsp?\", rsp);\n      topNamedList = rsp.getResponse();\n      assertNotNull(initParams + \" is null topNamedList?\", topNamedList);\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n      if (0 == rsp.getResults().getNumFound()) {\n        // when the query matches nothing, we should expect no top level facets\n        expected = Collections.emptyMap();\n      }\n      assertFacetSKGsAreCorrect(maxBucketsToCheck, expected, baseParams, facetResponse);\n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ===> \" + topNamedList + \" --> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run\"); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f4251f14d2db68330fc1e6f0495c053a905d560","date":1537116380,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],String,String,String).mjava","sourceNew":"  /**\n   * Given a set of term facets, and top level query strings, asserts that \n   * the SKG stats for each facet term returned when executing that query with those foreground/background\n   * queries match the expected results of executing the equivalent queries in isolation.\n   *\n   * @see #verifySKGResults\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         Map<String,TermFacet> expected,\n                                         final String query,\n                                         final String foreQ,\n                                         final String backQ) throws SolrServerException, IOException {\n    final SolrParams baseParams = params(\"rows\",\"0\", \"fore\", foreQ, \"back\", backQ);\n    \n    final SolrParams facetParams = params(\"q\", query,\n                                          \"json.facet\", \"\"+TermFacet.toJSONFacetParamValue(expected,null));\n    final SolrParams initParams = SolrParams.wrapAppended(facetParams, baseParams);\n    \n    log.info(\"Doing full run: {}\", initParams);\n\n    QueryResponse rsp = null;\n    // JSON Facets not (currently) available from QueryResponse...\n    NamedList topNamedList = null;\n    try {\n      rsp = (new QueryRequest(initParams)).process(getRandClient(random()));\n      assertNotNull(initParams + \" is null rsp?\", rsp);\n      topNamedList = rsp.getResponse();\n      assertNotNull(initParams + \" is null topNamedList?\", topNamedList);\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n\n      // Note: even if the query has numFound=0, our explicit background query domain should\n      // still force facet results\n      // (even if the background query matches nothing, that just means there will be no\n      // buckets in those facets)\n      assertFacetSKGsAreCorrect(maxBucketsToCheck, expected, baseParams, facetResponse);\n      \n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ===> \" + topNamedList + \" --> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run\"); \n    }\n  }\n\n","sourceOld":"  /**\n   * Given a set of term facets, and top level query strings, asserts that \n   * the SKG stats for each facet term returned when executing that query with those foreground/background\n   * queries match the expected results of executing the equivilent queries in isolation.\n   *\n   * @see #verifySKGResults\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         Map<String,TermFacet> expected,\n                                         final String query,\n                                         final String foreQ,\n                                         final String backQ) throws SolrServerException, IOException {\n    final SolrParams baseParams = params(\"rows\",\"0\", \"fore\", foreQ, \"back\", backQ);\n    \n    final SolrParams facetParams = params(\"q\", query,\n                                          \"json.facet\", \"\"+TermFacet.toJSONFacetParamValue(expected,null));\n    final SolrParams initParams = SolrParams.wrapAppended(facetParams, baseParams);\n    \n    log.info(\"Doing full run: {}\", initParams);\n\n    QueryResponse rsp = null;\n    // JSON Facets not (currently) available from QueryResponse...\n    NamedList topNamedList = null;\n    try {\n      rsp = (new QueryRequest(initParams)).process(getRandClient(random()));\n      assertNotNull(initParams + \" is null rsp?\", rsp);\n      topNamedList = rsp.getResponse();\n      assertNotNull(initParams + \" is null topNamedList?\", topNamedList);\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n\n      // Note: even if the query has numFound=0, our explicit background query domain should\n      // still force facet results\n      // (even if the background query matches nothing, that just means there will be no\n      // buckets in those facets)\n      assertFacetSKGsAreCorrect(maxBucketsToCheck, expected, baseParams, facetResponse);\n      \n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ===> \" + topNamedList + \" --> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run\"); \n    }\n  }\n\n","bugFix":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],String,String,String).mjava","sourceNew":"  /**\n   * Given a set of term facets, and top level query strings, asserts that \n   * the SKG stats for each facet term returned when executing that query with those foreground/background\n   * queries match the expected results of executing the equivalent queries in isolation.\n   *\n   * @see #verifySKGResults\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         Map<String,TermFacet> expected,\n                                         final String query,\n                                         final String foreQ,\n                                         final String backQ) throws SolrServerException, IOException {\n    final SolrParams baseParams = params(\"rows\",\"0\", \"fore\", foreQ, \"back\", backQ);\n    \n    final SolrParams facetParams = params(\"q\", query,\n                                          \"json.facet\", \"\"+TermFacet.toJSONFacetParamValue(expected,null));\n    final SolrParams initParams = SolrParams.wrapAppended(facetParams, baseParams);\n    \n    log.info(\"Doing full run: {}\", initParams);\n\n    QueryResponse rsp = null;\n    // JSON Facets not (currently) available from QueryResponse...\n    NamedList topNamedList = null;\n    try {\n      rsp = (new QueryRequest(initParams)).process(getRandClient(random()));\n      assertNotNull(initParams + \" is null rsp?\", rsp);\n      topNamedList = rsp.getResponse();\n      assertNotNull(initParams + \" is null topNamedList?\", topNamedList);\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n\n      // Note: even if the query has numFound=0, our explicit background query domain should\n      // still force facet results\n      // (even if the background query matches nothing, that just means there will be no\n      // buckets in those facets)\n      assertFacetSKGsAreCorrect(maxBucketsToCheck, expected, baseParams, facetResponse);\n      \n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ===> \" + topNamedList + \" --> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run\"); \n    }\n  }\n\n","sourceOld":"  /**\n   * Given a set of term facets, and top level query strings, asserts that \n   * the SKG stats for each facet term returned when executing that query with those foreground/background\n   * queries match the expected results of executing the equivalent queries in isolation.\n   *\n   * @see #verifySKGResults\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         Map<String,TermFacet> expected,\n                                         final String query,\n                                         final String foreQ,\n                                         final String backQ) throws SolrServerException, IOException {\n    final SolrParams baseParams = params(\"rows\",\"0\", \"fore\", foreQ, \"back\", backQ);\n    \n    final SolrParams facetParams = params(\"q\", query,\n                                          \"json.facet\", \"\"+TermFacet.toJSONFacetParamValue(expected,null));\n    final SolrParams initParams = SolrParams.wrapAppended(facetParams, baseParams);\n    \n    log.info(\"Doing full run: {}\", initParams);\n\n    QueryResponse rsp = null;\n    // JSON Facets not (currently) available from QueryResponse...\n    NamedList topNamedList = null;\n    try {\n      rsp = (new QueryRequest(initParams)).process(getRandClient(random()));\n      assertNotNull(initParams + \" is null rsp?\", rsp);\n      topNamedList = rsp.getResponse();\n      assertNotNull(initParams + \" is null topNamedList?\", topNamedList);\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n\n      // Note: even if the query has numFound=0, our explicit background query domain should\n      // still force facet results\n      // (even if the background query matches nothing, that just means there will be no\n      // buckets in those facets)\n      assertFacetSKGsAreCorrect(maxBucketsToCheck, expected, baseParams, facetResponse);\n      \n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ===> \" + topNamedList + \" --> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run\"); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9f4251f14d2db68330fc1e6f0495c053a905d560":["6dad63b0bf8e0d3d4aaed5423f622f9601c4b6d8"],"6dad63b0bf8e0d3d4aaed5423f622f9601c4b6d8":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["2c705a0d590cf911e7c942df49563ca2ea176e22","6dad63b0bf8e0d3d4aaed5423f622f9601c4b6d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["2c705a0d590cf911e7c942df49563ca2ea176e22","6dad63b0bf8e0d3d4aaed5423f622f9601c4b6d8"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["6dad63b0bf8e0d3d4aaed5423f622f9601c4b6d8","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9f4251f14d2db68330fc1e6f0495c053a905d560":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"6dad63b0bf8e0d3d4aaed5423f622f9601c4b6d8":["9f4251f14d2db68330fc1e6f0495c053a905d560","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}