{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testExampleKeystorePath().mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testExampleKeystorePath().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testExampleKeystorePath().mjava","sourceNew":"  /**\n   * A trivial test that verifies the example keystore used for SSL testing can be \n   * found using the base class. this helps future-proof against the possibility of \n   * something moving/breaking the keystore path in a way that results in the SSL \n   * randomization logic being forced to silently never use SSL.  (We can't enforce \n   * this type of check in the base class because then it would not be usable by client \n   * code depending on the test framework\n   */\n  public void testExampleKeystorePath() {\n    assertNotNull(\"Example keystore is null, meaning that something has changed in the \" +\n                  \"structure of the example configs and/or ExternalPaths.java - \" + \n                  \"SSL randomization is broken\",\n                  SSLTestConfig.TEST_KEYSTORE);\n  }\n\n","sourceOld":"  /**\n   * A trivial test that verifies the example keystore used for SSL testing can be \n   * found using the base class. this helps future-proof against the possibility of \n   * something moving/breaking the keystore path in a way that results in the SSL \n   * randomization logic being forced to silently never use SSL.  (We can't enforce \n   * this type of check in the base class because then it would not be usable by client \n   * code depending on the test framework\n   */\n  public void testExampleKeystorePath() {\n    assertNotNull(\"Example keystore is null, meaning that something has changed in the \" +\n                  \"structure of the example configs and/or ExternalPaths.java - \" + \n                  \"SSL randomization is broken\",\n                  SSLTestConfig.TEST_KEYSTORE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4d712315b5a2501492c47430f7da53d570435b4","date":1496339458,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testExampleKeystorePath().mjava","sourceNew":null,"sourceOld":"  /**\n   * A trivial test that verifies the example keystore used for SSL testing can be \n   * found using the base class. this helps future-proof against the possibility of \n   * something moving/breaking the keystore path in a way that results in the SSL \n   * randomization logic being forced to silently never use SSL.  (We can't enforce \n   * this type of check in the base class because then it would not be usable by client \n   * code depending on the test framework\n   */\n  public void testExampleKeystorePath() {\n    assertNotNull(\"Example keystore is null, meaning that something has changed in the \" +\n                  \"structure of the example configs and/or ExternalPaths.java - \" + \n                  \"SSL randomization is broken\",\n                  SSLTestConfig.TEST_KEYSTORE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testExampleKeystorePath().mjava","sourceNew":null,"sourceOld":"  /**\n   * A trivial test that verifies the example keystore used for SSL testing can be \n   * found using the base class. this helps future-proof against the possibility of \n   * something moving/breaking the keystore path in a way that results in the SSL \n   * randomization logic being forced to silently never use SSL.  (We can't enforce \n   * this type of check in the base class because then it would not be usable by client \n   * code depending on the test framework\n   */\n  public void testExampleKeystorePath() {\n    assertNotNull(\"Example keystore is null, meaning that something has changed in the \" +\n                  \"structure of the example configs and/or ExternalPaths.java - \" + \n                  \"SSL randomization is broken\",\n                  SSLTestConfig.TEST_KEYSTORE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testExampleKeystorePath().mjava","sourceNew":null,"sourceOld":"  /**\n   * A trivial test that verifies the example keystore used for SSL testing can be \n   * found using the base class. this helps future-proof against the possibility of \n   * something moving/breaking the keystore path in a way that results in the SSL \n   * randomization logic being forced to silently never use SSL.  (We can't enforce \n   * this type of check in the base class because then it would not be usable by client \n   * code depending on the test framework\n   */\n  public void testExampleKeystorePath() {\n    assertNotNull(\"Example keystore is null, meaning that something has changed in the \" +\n                  \"structure of the example configs and/or ExternalPaths.java - \" + \n                  \"SSL randomization is broken\",\n                  SSLTestConfig.TEST_KEYSTORE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4d712315b5a2501492c47430f7da53d570435b4":["bafca15d8e408346a67f4282ad1143b88023893b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["bafca15d8e408346a67f4282ad1143b88023893b","b4d712315b5a2501492c47430f7da53d570435b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["bafca15d8e408346a67f4282ad1143b88023893b","b4d712315b5a2501492c47430f7da53d570435b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"b4d712315b5a2501492c47430f7da53d570435b4":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["b4d712315b5a2501492c47430f7da53d570435b4","e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}