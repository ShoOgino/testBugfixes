{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testOverseerRole(CloudSolrClient).mjava","commits":[{"id":"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b","date":1432801743,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testOverseerRole(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testOverseerRole().mjava","sourceNew":"  private void testOverseerRole(CloudSolrClient client) throws Exception {\n    String collectionName = \"testOverseerCol\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    List<String> l = OverseerCollectionProcessor.getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) ;\n\n    log.info(\"All nodes {}\", l);\n    String currentLeader = OverseerCollectionProcessor.getLeaderNode(client.getZkStateReader().getZkClient());\n    log.info(\"Current leader {} \", currentLeader);\n    l.remove(currentLeader);\n\n    Collections.shuffle(l, random());\n    String overseerDesignate = l.get(0);\n    log.info(\"overseerDesignate {}\",overseerDesignate);\n    setOverseerRole(client, CollectionAction.ADDROLE,overseerDesignate);\n\n    long timeout = System.currentTimeMillis()+15000;\n\n    boolean leaderchanged = false;\n    for(;System.currentTimeMillis() < timeout;){\n      if(overseerDesignate.equals(OverseerCollectionProcessor.getLeaderNode(client.getZkStateReader().getZkClient()))){\n        log.info(\"overseer designate is the new overseer\");\n        leaderchanged =true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"could not set the new overseer . expected \"+\n        overseerDesignate + \" current order : \" +\n        getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) +\n        \" ldr :\"+ OverseerCollectionProcessor.getLeaderNode(client.getZkStateReader().getZkClient()) ,leaderchanged);\n\n\n\n    //add another node as overseer\n\n\n    l.remove(overseerDesignate);\n\n    Collections.shuffle(l, random());\n\n    String anotherOverseer = l.get(0);\n    log.info(\"Adding another overseer designate {}\", anotherOverseer);\n    setOverseerRole(client, CollectionAction.ADDROLE, anotherOverseer);\n\n    String currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n\n    log.info(\"Current Overseer {}\", currentOverseer);\n\n    String hostPort = currentOverseer.substring(0,currentOverseer.indexOf('_'));\n\n    StringBuilder sb = new StringBuilder();\n//\n//\n    log.info(\"hostPort : {}\", hostPort);\n\n    JettySolrRunner leaderJetty = null;\n\n    for (JettySolrRunner jetty : jettys) {\n      String s = jetty.getBaseUrl().toString();\n      log.info(\"jetTy {}\",s);\n      sb.append(s).append(\" , \");\n      if (s.contains(hostPort)) {\n        leaderJetty = jetty;\n        break;\n      }\n    }\n\n    assertNotNull(\"Could not find a jetty2 kill\",  leaderJetty);\n\n    log.info(\"leader node {}\", leaderJetty.getBaseUrl());\n    log.info (\"current election Queue\",\n        OverseerCollectionProcessor.getSortedElectionNodes(client.getZkStateReader().getZkClient(),\n            OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n    ChaosMonkey.stop(leaderJetty);\n    timeout = System.currentTimeMillis() + 10000;\n    leaderchanged = false;\n    for (; System.currentTimeMillis() < timeout; ) {\n      currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n      if (anotherOverseer.equals(currentOverseer)) {\n        leaderchanged = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"New overseer designate has not become the overseer, expected : \" + anotherOverseer + \"actual : \" + getLeaderNode(client.getZkStateReader().getZkClient()), leaderchanged);\n  }\n\n","sourceOld":"  private void testOverseerRole() throws Exception {\n    String collectionName = \"testOverseerCol\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    List<String> l = OverseerCollectionProcessor.getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) ;\n\n    log.info(\"All nodes {}\", l);\n    String currentLeader = OverseerCollectionProcessor.getLeaderNode(client.getZkStateReader().getZkClient());\n    log.info(\"Current leader {} \", currentLeader);\n    l.remove(currentLeader);\n\n    Collections.shuffle(l, random());\n    String overseerDesignate = l.get(0);\n    log.info(\"overseerDesignate {}\",overseerDesignate);\n    setOverseerRole(CollectionAction.ADDROLE,overseerDesignate);\n\n    long timeout = System.currentTimeMillis()+15000;\n\n    boolean leaderchanged = false;\n    for(;System.currentTimeMillis() < timeout;){\n      if(overseerDesignate.equals(OverseerCollectionProcessor.getLeaderNode(client.getZkStateReader().getZkClient()))){\n        log.info(\"overseer designate is the new overseer\");\n        leaderchanged =true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"could not set the new overseer . expected \"+\n        overseerDesignate + \" current order : \" +\n        getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) +\n        \" ldr :\"+ OverseerCollectionProcessor.getLeaderNode(client.getZkStateReader().getZkClient()) ,leaderchanged);\n\n\n\n    //add another node as overseer\n\n\n    l.remove(overseerDesignate);\n\n    Collections.shuffle(l, random());\n\n    String anotherOverseer = l.get(0);\n    log.info(\"Adding another overseer designate {}\", anotherOverseer);\n    setOverseerRole(CollectionAction.ADDROLE, anotherOverseer);\n\n    String currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n\n    log.info(\"Current Overseer {}\", currentOverseer);\n\n    String hostPort = currentOverseer.substring(0,currentOverseer.indexOf('_'));\n\n    StringBuilder sb = new StringBuilder();\n//\n//\n    log.info(\"hostPort : {}\", hostPort);\n\n    JettySolrRunner leaderJetty = null;\n\n    for (JettySolrRunner jetty : jettys) {\n      String s = jetty.getBaseUrl().toString();\n      log.info(\"jetTy {}\",s);\n      sb.append(s).append(\" , \");\n      if (s.contains(hostPort)) {\n        leaderJetty = jetty;\n        break;\n      }\n    }\n\n    assertNotNull(\"Could not find a jetty2 kill\",  leaderJetty);\n\n    log.info(\"leader node {}\", leaderJetty.getBaseUrl());\n    log.info (\"current election Queue\",\n        OverseerCollectionProcessor.getSortedElectionNodes(client.getZkStateReader().getZkClient(),\n            OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n    ChaosMonkey.stop(leaderJetty);\n    timeout = System.currentTimeMillis() + 10000;\n    leaderchanged = false;\n    for (; System.currentTimeMillis() < timeout; ) {\n      currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n      if (anotherOverseer.equals(currentOverseer)) {\n        leaderchanged = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"New overseer designate has not become the overseer, expected : \" + anotherOverseer + \"actual : \" + getLeaderNode(client.getZkStateReader().getZkClient()), leaderchanged);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testOverseerRole(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testOverseerRole(CloudSolrClient).mjava","sourceNew":"  private void testOverseerRole(CloudSolrClient client) throws Exception {\n    String collectionName = \"testOverseerCol\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    List<String> l = OverseerCollectionProcessor.getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) ;\n\n    log.info(\"All nodes {}\", l);\n    String currentLeader = OverseerCollectionProcessor.getLeaderNode(client.getZkStateReader().getZkClient());\n    log.info(\"Current leader {} \", currentLeader);\n    l.remove(currentLeader);\n\n    Collections.shuffle(l, random());\n    String overseerDesignate = l.get(0);\n    log.info(\"overseerDesignate {}\",overseerDesignate);\n    setOverseerRole(client, CollectionAction.ADDROLE,overseerDesignate);\n\n    TimeOut timeout = new TimeOut(15, TimeUnit.SECONDS);\n\n    boolean leaderchanged = false;\n    for(;!timeout.hasTimedOut();){\n      if(overseerDesignate.equals(OverseerCollectionProcessor.getLeaderNode(client.getZkStateReader().getZkClient()))){\n        log.info(\"overseer designate is the new overseer\");\n        leaderchanged =true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"could not set the new overseer . expected \"+\n        overseerDesignate + \" current order : \" +\n        getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) +\n        \" ldr :\"+ OverseerCollectionProcessor.getLeaderNode(client.getZkStateReader().getZkClient()) ,leaderchanged);\n\n\n\n    //add another node as overseer\n\n\n    l.remove(overseerDesignate);\n\n    Collections.shuffle(l, random());\n\n    String anotherOverseer = l.get(0);\n    log.info(\"Adding another overseer designate {}\", anotherOverseer);\n    setOverseerRole(client, CollectionAction.ADDROLE, anotherOverseer);\n\n    String currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n\n    log.info(\"Current Overseer {}\", currentOverseer);\n\n    String hostPort = currentOverseer.substring(0,currentOverseer.indexOf('_'));\n\n    StringBuilder sb = new StringBuilder();\n//\n//\n    log.info(\"hostPort : {}\", hostPort);\n\n    JettySolrRunner leaderJetty = null;\n\n    for (JettySolrRunner jetty : jettys) {\n      String s = jetty.getBaseUrl().toString();\n      log.info(\"jetTy {}\",s);\n      sb.append(s).append(\" , \");\n      if (s.contains(hostPort)) {\n        leaderJetty = jetty;\n        break;\n      }\n    }\n\n    assertNotNull(\"Could not find a jetty2 kill\",  leaderJetty);\n\n    log.info(\"leader node {}\", leaderJetty.getBaseUrl());\n    log.info (\"current election Queue\",\n        OverseerCollectionProcessor.getSortedElectionNodes(client.getZkStateReader().getZkClient(),\n            OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n    ChaosMonkey.stop(leaderJetty);\n    timeout = new TimeOut(10, TimeUnit.SECONDS);\n    leaderchanged = false;\n    for (; !timeout.hasTimedOut(); ) {\n      currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n      if (anotherOverseer.equals(currentOverseer)) {\n        leaderchanged = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"New overseer designate has not become the overseer, expected : \" + anotherOverseer + \"actual : \" + getLeaderNode(client.getZkStateReader().getZkClient()), leaderchanged);\n  }\n\n","sourceOld":"  private void testOverseerRole(CloudSolrClient client) throws Exception {\n    String collectionName = \"testOverseerCol\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    List<String> l = OverseerCollectionProcessor.getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) ;\n\n    log.info(\"All nodes {}\", l);\n    String currentLeader = OverseerCollectionProcessor.getLeaderNode(client.getZkStateReader().getZkClient());\n    log.info(\"Current leader {} \", currentLeader);\n    l.remove(currentLeader);\n\n    Collections.shuffle(l, random());\n    String overseerDesignate = l.get(0);\n    log.info(\"overseerDesignate {}\",overseerDesignate);\n    setOverseerRole(client, CollectionAction.ADDROLE,overseerDesignate);\n\n    long timeout = System.currentTimeMillis()+15000;\n\n    boolean leaderchanged = false;\n    for(;System.currentTimeMillis() < timeout;){\n      if(overseerDesignate.equals(OverseerCollectionProcessor.getLeaderNode(client.getZkStateReader().getZkClient()))){\n        log.info(\"overseer designate is the new overseer\");\n        leaderchanged =true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"could not set the new overseer . expected \"+\n        overseerDesignate + \" current order : \" +\n        getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) +\n        \" ldr :\"+ OverseerCollectionProcessor.getLeaderNode(client.getZkStateReader().getZkClient()) ,leaderchanged);\n\n\n\n    //add another node as overseer\n\n\n    l.remove(overseerDesignate);\n\n    Collections.shuffle(l, random());\n\n    String anotherOverseer = l.get(0);\n    log.info(\"Adding another overseer designate {}\", anotherOverseer);\n    setOverseerRole(client, CollectionAction.ADDROLE, anotherOverseer);\n\n    String currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n\n    log.info(\"Current Overseer {}\", currentOverseer);\n\n    String hostPort = currentOverseer.substring(0,currentOverseer.indexOf('_'));\n\n    StringBuilder sb = new StringBuilder();\n//\n//\n    log.info(\"hostPort : {}\", hostPort);\n\n    JettySolrRunner leaderJetty = null;\n\n    for (JettySolrRunner jetty : jettys) {\n      String s = jetty.getBaseUrl().toString();\n      log.info(\"jetTy {}\",s);\n      sb.append(s).append(\" , \");\n      if (s.contains(hostPort)) {\n        leaderJetty = jetty;\n        break;\n      }\n    }\n\n    assertNotNull(\"Could not find a jetty2 kill\",  leaderJetty);\n\n    log.info(\"leader node {}\", leaderJetty.getBaseUrl());\n    log.info (\"current election Queue\",\n        OverseerCollectionProcessor.getSortedElectionNodes(client.getZkStateReader().getZkClient(),\n            OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n    ChaosMonkey.stop(leaderJetty);\n    timeout = System.currentTimeMillis() + 10000;\n    leaderchanged = false;\n    for (; System.currentTimeMillis() < timeout; ) {\n      currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n      if (anotherOverseer.equals(currentOverseer)) {\n        leaderchanged = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"New overseer designate has not become the overseer, expected : \" + anotherOverseer + \"actual : \" + getLeaderNode(client.getZkStateReader().getZkClient()), leaderchanged);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testOverseerRole(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testOverseerRole(CloudSolrClient).mjava","sourceNew":"  private void testOverseerRole(CloudSolrClient client) throws Exception {\n    String collectionName = \"testOverseerCol\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    List<String> l = OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) ;\n\n    log.info(\"All nodes {}\", l);\n    String currentLeader = OverseerCollectionConfigSetProcessor.getLeaderNode(client.getZkStateReader().getZkClient());\n    log.info(\"Current leader {} \", currentLeader);\n    l.remove(currentLeader);\n\n    Collections.shuffle(l, random());\n    String overseerDesignate = l.get(0);\n    log.info(\"overseerDesignate {}\",overseerDesignate);\n    setOverseerRole(client, CollectionAction.ADDROLE,overseerDesignate);\n\n    TimeOut timeout = new TimeOut(15, TimeUnit.SECONDS);\n\n    boolean leaderchanged = false;\n    for(;!timeout.hasTimedOut();){\n      if(overseerDesignate.equals(OverseerCollectionConfigSetProcessor.getLeaderNode(client.getZkStateReader().getZkClient()))){\n        log.info(\"overseer designate is the new overseer\");\n        leaderchanged =true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"could not set the new overseer . expected \"+\n        overseerDesignate + \" current order : \" +\n        getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) +\n        \" ldr :\"+ OverseerCollectionConfigSetProcessor.getLeaderNode(client.getZkStateReader().getZkClient()) ,leaderchanged);\n\n\n\n    //add another node as overseer\n\n\n    l.remove(overseerDesignate);\n\n    Collections.shuffle(l, random());\n\n    String anotherOverseer = l.get(0);\n    log.info(\"Adding another overseer designate {}\", anotherOverseer);\n    setOverseerRole(client, CollectionAction.ADDROLE, anotherOverseer);\n\n    String currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n\n    log.info(\"Current Overseer {}\", currentOverseer);\n\n    String hostPort = currentOverseer.substring(0,currentOverseer.indexOf('_'));\n\n    StringBuilder sb = new StringBuilder();\n//\n//\n    log.info(\"hostPort : {}\", hostPort);\n\n    JettySolrRunner leaderJetty = null;\n\n    for (JettySolrRunner jetty : jettys) {\n      String s = jetty.getBaseUrl().toString();\n      log.info(\"jetTy {}\",s);\n      sb.append(s).append(\" , \");\n      if (s.contains(hostPort)) {\n        leaderJetty = jetty;\n        break;\n      }\n    }\n\n    assertNotNull(\"Could not find a jetty2 kill\",  leaderJetty);\n\n    log.info(\"leader node {}\", leaderJetty.getBaseUrl());\n    log.info (\"current election Queue\",\n        OverseerCollectionConfigSetProcessor.getSortedElectionNodes(client.getZkStateReader().getZkClient(),\n            OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n    ChaosMonkey.stop(leaderJetty);\n    timeout = new TimeOut(10, TimeUnit.SECONDS);\n    leaderchanged = false;\n    for (; !timeout.hasTimedOut(); ) {\n      currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n      if (anotherOverseer.equals(currentOverseer)) {\n        leaderchanged = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"New overseer designate has not become the overseer, expected : \" + anotherOverseer + \"actual : \" + getLeaderNode(client.getZkStateReader().getZkClient()), leaderchanged);\n  }\n\n","sourceOld":"  private void testOverseerRole(CloudSolrClient client) throws Exception {\n    String collectionName = \"testOverseerCol\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    List<String> l = OverseerCollectionProcessor.getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) ;\n\n    log.info(\"All nodes {}\", l);\n    String currentLeader = OverseerCollectionProcessor.getLeaderNode(client.getZkStateReader().getZkClient());\n    log.info(\"Current leader {} \", currentLeader);\n    l.remove(currentLeader);\n\n    Collections.shuffle(l, random());\n    String overseerDesignate = l.get(0);\n    log.info(\"overseerDesignate {}\",overseerDesignate);\n    setOverseerRole(client, CollectionAction.ADDROLE,overseerDesignate);\n\n    TimeOut timeout = new TimeOut(15, TimeUnit.SECONDS);\n\n    boolean leaderchanged = false;\n    for(;!timeout.hasTimedOut();){\n      if(overseerDesignate.equals(OverseerCollectionProcessor.getLeaderNode(client.getZkStateReader().getZkClient()))){\n        log.info(\"overseer designate is the new overseer\");\n        leaderchanged =true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"could not set the new overseer . expected \"+\n        overseerDesignate + \" current order : \" +\n        getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) +\n        \" ldr :\"+ OverseerCollectionProcessor.getLeaderNode(client.getZkStateReader().getZkClient()) ,leaderchanged);\n\n\n\n    //add another node as overseer\n\n\n    l.remove(overseerDesignate);\n\n    Collections.shuffle(l, random());\n\n    String anotherOverseer = l.get(0);\n    log.info(\"Adding another overseer designate {}\", anotherOverseer);\n    setOverseerRole(client, CollectionAction.ADDROLE, anotherOverseer);\n\n    String currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n\n    log.info(\"Current Overseer {}\", currentOverseer);\n\n    String hostPort = currentOverseer.substring(0,currentOverseer.indexOf('_'));\n\n    StringBuilder sb = new StringBuilder();\n//\n//\n    log.info(\"hostPort : {}\", hostPort);\n\n    JettySolrRunner leaderJetty = null;\n\n    for (JettySolrRunner jetty : jettys) {\n      String s = jetty.getBaseUrl().toString();\n      log.info(\"jetTy {}\",s);\n      sb.append(s).append(\" , \");\n      if (s.contains(hostPort)) {\n        leaderJetty = jetty;\n        break;\n      }\n    }\n\n    assertNotNull(\"Could not find a jetty2 kill\",  leaderJetty);\n\n    log.info(\"leader node {}\", leaderJetty.getBaseUrl());\n    log.info (\"current election Queue\",\n        OverseerCollectionProcessor.getSortedElectionNodes(client.getZkStateReader().getZkClient(),\n            OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n    ChaosMonkey.stop(leaderJetty);\n    timeout = new TimeOut(10, TimeUnit.SECONDS);\n    leaderchanged = false;\n    for (; !timeout.hasTimedOut(); ) {\n      currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n      if (anotherOverseer.equals(currentOverseer)) {\n        leaderchanged = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"New overseer designate has not become the overseer, expected : \" + anotherOverseer + \"actual : \" + getLeaderNode(client.getZkStateReader().getZkClient()), leaderchanged);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5551d21c759979ad637581208f5ff5bd7497b5d7","date":1447783672,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testOverseerRole(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testOverseerRole(CloudSolrClient).mjava","sourceNew":"  private void testOverseerRole(CloudSolrClient client) throws Exception {\n    String collectionName = \"testOverseerCol\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    List<String> l = OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) ;\n\n    log.info(\"All nodes {}\", l);\n    String currentLeader = OverseerCollectionConfigSetProcessor.getLeaderNode(client.getZkStateReader().getZkClient());\n    log.info(\"Current leader {} \", currentLeader);\n    l.remove(currentLeader);\n\n    Collections.shuffle(l, random());\n    String overseerDesignate = l.get(0);\n    log.info(\"overseerDesignate {}\",overseerDesignate);\n    setOverseerRole(client, CollectionAction.ADDROLE,overseerDesignate);\n\n    TimeOut timeout = new TimeOut(15, TimeUnit.SECONDS);\n\n    boolean leaderchanged = false;\n    for(;!timeout.hasTimedOut();){\n      if(overseerDesignate.equals(OverseerCollectionConfigSetProcessor.getLeaderNode(client.getZkStateReader().getZkClient()))){\n        log.info(\"overseer designate is the new overseer\");\n        leaderchanged =true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"could not set the new overseer . expected \"+\n        overseerDesignate + \" current order : \" +\n        getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) +\n        \" ldr :\"+ OverseerCollectionConfigSetProcessor.getLeaderNode(client.getZkStateReader().getZkClient()) ,leaderchanged);\n\n\n\n    //add another node as overseer\n\n\n    l.remove(overseerDesignate);\n\n    Collections.shuffle(l, random());\n\n    String anotherOverseer = l.get(0);\n    log.info(\"Adding another overseer designate {}\", anotherOverseer);\n    setOverseerRole(client, CollectionAction.ADDROLE, anotherOverseer);\n\n    String currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n\n    log.info(\"Current Overseer {}\", currentOverseer);\n\n    String hostPort = currentOverseer.substring(0,currentOverseer.indexOf('_'));\n\n    StringBuilder sb = new StringBuilder();\n//\n//\n    log.info(\"hostPort : {}\", hostPort);\n\n    JettySolrRunner leaderJetty = null;\n\n    for (JettySolrRunner jetty : jettys) {\n      String s = jetty.getBaseUrl().toString();\n      log.info(\"jetTy {}\",s);\n      sb.append(s).append(\" , \");\n      if (s.contains(hostPort)) {\n        leaderJetty = jetty;\n        break;\n      }\n    }\n\n    assertNotNull(\"Could not find a jetty2 kill\",  leaderJetty);\n\n    log.info(\"leader node {}\", leaderJetty.getBaseUrl());\n    log.info (\"current election Queue\",\n        OverseerCollectionConfigSetProcessor.getSortedElectionNodes(client.getZkStateReader().getZkClient(),\n            \"/overseer_elect/election\"));\n    ChaosMonkey.stop(leaderJetty);\n    timeout = new TimeOut(10, TimeUnit.SECONDS);\n    leaderchanged = false;\n    for (; !timeout.hasTimedOut(); ) {\n      currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n      if (anotherOverseer.equals(currentOverseer)) {\n        leaderchanged = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"New overseer designate has not become the overseer, expected : \" + anotherOverseer + \"actual : \" + getLeaderNode(client.getZkStateReader().getZkClient()), leaderchanged);\n  }\n\n","sourceOld":"  private void testOverseerRole(CloudSolrClient client) throws Exception {\n    String collectionName = \"testOverseerCol\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    List<String> l = OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) ;\n\n    log.info(\"All nodes {}\", l);\n    String currentLeader = OverseerCollectionConfigSetProcessor.getLeaderNode(client.getZkStateReader().getZkClient());\n    log.info(\"Current leader {} \", currentLeader);\n    l.remove(currentLeader);\n\n    Collections.shuffle(l, random());\n    String overseerDesignate = l.get(0);\n    log.info(\"overseerDesignate {}\",overseerDesignate);\n    setOverseerRole(client, CollectionAction.ADDROLE,overseerDesignate);\n\n    TimeOut timeout = new TimeOut(15, TimeUnit.SECONDS);\n\n    boolean leaderchanged = false;\n    for(;!timeout.hasTimedOut();){\n      if(overseerDesignate.equals(OverseerCollectionConfigSetProcessor.getLeaderNode(client.getZkStateReader().getZkClient()))){\n        log.info(\"overseer designate is the new overseer\");\n        leaderchanged =true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"could not set the new overseer . expected \"+\n        overseerDesignate + \" current order : \" +\n        getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) +\n        \" ldr :\"+ OverseerCollectionConfigSetProcessor.getLeaderNode(client.getZkStateReader().getZkClient()) ,leaderchanged);\n\n\n\n    //add another node as overseer\n\n\n    l.remove(overseerDesignate);\n\n    Collections.shuffle(l, random());\n\n    String anotherOverseer = l.get(0);\n    log.info(\"Adding another overseer designate {}\", anotherOverseer);\n    setOverseerRole(client, CollectionAction.ADDROLE, anotherOverseer);\n\n    String currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n\n    log.info(\"Current Overseer {}\", currentOverseer);\n\n    String hostPort = currentOverseer.substring(0,currentOverseer.indexOf('_'));\n\n    StringBuilder sb = new StringBuilder();\n//\n//\n    log.info(\"hostPort : {}\", hostPort);\n\n    JettySolrRunner leaderJetty = null;\n\n    for (JettySolrRunner jetty : jettys) {\n      String s = jetty.getBaseUrl().toString();\n      log.info(\"jetTy {}\",s);\n      sb.append(s).append(\" , \");\n      if (s.contains(hostPort)) {\n        leaderJetty = jetty;\n        break;\n      }\n    }\n\n    assertNotNull(\"Could not find a jetty2 kill\",  leaderJetty);\n\n    log.info(\"leader node {}\", leaderJetty.getBaseUrl());\n    log.info (\"current election Queue\",\n        OverseerCollectionConfigSetProcessor.getSortedElectionNodes(client.getZkStateReader().getZkClient(),\n            OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n    ChaosMonkey.stop(leaderJetty);\n    timeout = new TimeOut(10, TimeUnit.SECONDS);\n    leaderchanged = false;\n    for (; !timeout.hasTimedOut(); ) {\n      currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n      if (anotherOverseer.equals(currentOverseer)) {\n        leaderchanged = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"New overseer designate has not become the overseer, expected : \" + anotherOverseer + \"actual : \" + getLeaderNode(client.getZkStateReader().getZkClient()), leaderchanged);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testOverseerRole().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testOverseerRole(CloudSolrClient).mjava","sourceNew":"  @Test\n  public void testOverseerRole() throws Exception {\n\n    List<String> l = OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zkClient()) ;\n\n    log.info(\"All nodes {}\", l);\n    String currentLeader = OverseerCollectionConfigSetProcessor.getLeaderNode(zkClient());\n    log.info(\"Current leader {} \", currentLeader);\n    l.remove(currentLeader);\n\n    Collections.shuffle(l, random());\n    String overseerDesignate = l.get(0);\n    log.info(\"overseerDesignate {}\", overseerDesignate);\n\n    CollectionAdminRequest.addRole(overseerDesignate, \"overseer\").process(cluster.getSolrClient());\n\n    TimeOut timeout = new TimeOut(15, TimeUnit.SECONDS);\n\n    boolean leaderchanged = false;\n    for (;!timeout.hasTimedOut();) {\n      if (overseerDesignate.equals(OverseerCollectionConfigSetProcessor.getLeaderNode(zkClient()))) {\n        log.info(\"overseer designate is the new overseer\");\n        leaderchanged =true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"could not set the new overseer . expected \"+\n        overseerDesignate + \" current order : \" +\n        getSortedOverseerNodeNames(zkClient()) +\n        \" ldr :\"+ OverseerCollectionConfigSetProcessor.getLeaderNode(zkClient()) ,leaderchanged);\n\n    //add another node as overseer\n    l.remove(overseerDesignate);\n    Collections.shuffle(l, random());\n\n    String anotherOverseer = l.get(0);\n    log.info(\"Adding another overseer designate {}\", anotherOverseer);\n    CollectionAdminRequest.addRole(anotherOverseer, \"overseer\").process(cluster.getSolrClient());\n\n    String currentOverseer = getLeaderNode(zkClient());\n\n    log.info(\"Current Overseer {}\", currentOverseer);\n\n    String hostPort = currentOverseer.substring(0, currentOverseer.indexOf('_'));\n\n    StringBuilder sb = new StringBuilder();\n    log.info(\"hostPort : {}\", hostPort);\n\n    JettySolrRunner leaderJetty = null;\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String s = jetty.getBaseUrl().toString();\n      log.info(\"jetTy {}\",s);\n      sb.append(s).append(\" , \");\n      if (s.contains(hostPort)) {\n        leaderJetty = jetty;\n        break;\n      }\n    }\n\n    assertNotNull(\"Could not find a jetty2 kill\",  leaderJetty);\n\n    log.info(\"leader node {}\", leaderJetty.getBaseUrl());\n    log.info(\"current election Queue\",\n        OverseerCollectionConfigSetProcessor.getSortedElectionNodes(zkClient(), \"/overseer_elect/election\"));\n    ChaosMonkey.stop(leaderJetty);\n    timeout = new TimeOut(10, TimeUnit.SECONDS);\n    leaderchanged = false;\n    for (; !timeout.hasTimedOut(); ) {\n      currentOverseer = getLeaderNode(zkClient());\n      if (anotherOverseer.equals(currentOverseer)) {\n        leaderchanged = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"New overseer designate has not become the overseer, expected : \" + anotherOverseer + \"actual : \" + getLeaderNode(zkClient()), leaderchanged);\n  }\n\n","sourceOld":"  private void testOverseerRole(CloudSolrClient client) throws Exception {\n    String collectionName = \"testOverseerCol\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    List<String> l = OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) ;\n\n    log.info(\"All nodes {}\", l);\n    String currentLeader = OverseerCollectionConfigSetProcessor.getLeaderNode(client.getZkStateReader().getZkClient());\n    log.info(\"Current leader {} \", currentLeader);\n    l.remove(currentLeader);\n\n    Collections.shuffle(l, random());\n    String overseerDesignate = l.get(0);\n    log.info(\"overseerDesignate {}\",overseerDesignate);\n    setOverseerRole(client, CollectionAction.ADDROLE,overseerDesignate);\n\n    TimeOut timeout = new TimeOut(15, TimeUnit.SECONDS);\n\n    boolean leaderchanged = false;\n    for(;!timeout.hasTimedOut();){\n      if(overseerDesignate.equals(OverseerCollectionConfigSetProcessor.getLeaderNode(client.getZkStateReader().getZkClient()))){\n        log.info(\"overseer designate is the new overseer\");\n        leaderchanged =true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"could not set the new overseer . expected \"+\n        overseerDesignate + \" current order : \" +\n        getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) +\n        \" ldr :\"+ OverseerCollectionConfigSetProcessor.getLeaderNode(client.getZkStateReader().getZkClient()) ,leaderchanged);\n\n\n\n    //add another node as overseer\n\n\n    l.remove(overseerDesignate);\n\n    Collections.shuffle(l, random());\n\n    String anotherOverseer = l.get(0);\n    log.info(\"Adding another overseer designate {}\", anotherOverseer);\n    setOverseerRole(client, CollectionAction.ADDROLE, anotherOverseer);\n\n    String currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n\n    log.info(\"Current Overseer {}\", currentOverseer);\n\n    String hostPort = currentOverseer.substring(0,currentOverseer.indexOf('_'));\n\n    StringBuilder sb = new StringBuilder();\n//\n//\n    log.info(\"hostPort : {}\", hostPort);\n\n    JettySolrRunner leaderJetty = null;\n\n    for (JettySolrRunner jetty : jettys) {\n      String s = jetty.getBaseUrl().toString();\n      log.info(\"jetTy {}\",s);\n      sb.append(s).append(\" , \");\n      if (s.contains(hostPort)) {\n        leaderJetty = jetty;\n        break;\n      }\n    }\n\n    assertNotNull(\"Could not find a jetty2 kill\",  leaderJetty);\n\n    log.info(\"leader node {}\", leaderJetty.getBaseUrl());\n    log.info (\"current election Queue\",\n        OverseerCollectionConfigSetProcessor.getSortedElectionNodes(client.getZkStateReader().getZkClient(),\n            \"/overseer_elect/election\"));\n    ChaosMonkey.stop(leaderJetty);\n    timeout = new TimeOut(10, TimeUnit.SECONDS);\n    leaderchanged = false;\n    for (; !timeout.hasTimedOut(); ) {\n      currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n      if (anotherOverseer.equals(currentOverseer)) {\n        leaderchanged = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"New overseer designate has not become the overseer, expected : \" + anotherOverseer + \"actual : \" + getLeaderNode(client.getZkStateReader().getZkClient()), leaderchanged);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","42d6fc6d08217c412f5a576929068b6e678deaf6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testOverseerRole(CloudSolrClient).mjava","sourceNew":null,"sourceOld":"  private void testOverseerRole(CloudSolrClient client) throws Exception {\n    String collectionName = \"testOverseerCol\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    List<String> l = OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) ;\n\n    log.info(\"All nodes {}\", l);\n    String currentLeader = OverseerCollectionConfigSetProcessor.getLeaderNode(client.getZkStateReader().getZkClient());\n    log.info(\"Current leader {} \", currentLeader);\n    l.remove(currentLeader);\n\n    Collections.shuffle(l, random());\n    String overseerDesignate = l.get(0);\n    log.info(\"overseerDesignate {}\",overseerDesignate);\n    setOverseerRole(client, CollectionAction.ADDROLE,overseerDesignate);\n\n    TimeOut timeout = new TimeOut(15, TimeUnit.SECONDS);\n\n    boolean leaderchanged = false;\n    for(;!timeout.hasTimedOut();){\n      if(overseerDesignate.equals(OverseerCollectionConfigSetProcessor.getLeaderNode(client.getZkStateReader().getZkClient()))){\n        log.info(\"overseer designate is the new overseer\");\n        leaderchanged =true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"could not set the new overseer . expected \"+\n        overseerDesignate + \" current order : \" +\n        getSortedOverseerNodeNames(client.getZkStateReader().getZkClient()) +\n        \" ldr :\"+ OverseerCollectionConfigSetProcessor.getLeaderNode(client.getZkStateReader().getZkClient()) ,leaderchanged);\n\n\n\n    //add another node as overseer\n\n\n    l.remove(overseerDesignate);\n\n    Collections.shuffle(l, random());\n\n    String anotherOverseer = l.get(0);\n    log.info(\"Adding another overseer designate {}\", anotherOverseer);\n    setOverseerRole(client, CollectionAction.ADDROLE, anotherOverseer);\n\n    String currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n\n    log.info(\"Current Overseer {}\", currentOverseer);\n\n    String hostPort = currentOverseer.substring(0,currentOverseer.indexOf('_'));\n\n    StringBuilder sb = new StringBuilder();\n//\n//\n    log.info(\"hostPort : {}\", hostPort);\n\n    JettySolrRunner leaderJetty = null;\n\n    for (JettySolrRunner jetty : jettys) {\n      String s = jetty.getBaseUrl().toString();\n      log.info(\"jetTy {}\",s);\n      sb.append(s).append(\" , \");\n      if (s.contains(hostPort)) {\n        leaderJetty = jetty;\n        break;\n      }\n    }\n\n    assertNotNull(\"Could not find a jetty2 kill\",  leaderJetty);\n\n    log.info(\"leader node {}\", leaderJetty.getBaseUrl());\n    log.info (\"current election Queue\",\n        OverseerCollectionConfigSetProcessor.getSortedElectionNodes(client.getZkStateReader().getZkClient(),\n            \"/overseer_elect/election\"));\n    ChaosMonkey.stop(leaderJetty);\n    timeout = new TimeOut(10, TimeUnit.SECONDS);\n    leaderchanged = false;\n    for (; !timeout.hasTimedOut(); ) {\n      currentOverseer = getLeaderNode(client.getZkStateReader().getZkClient());\n      if (anotherOverseer.equals(currentOverseer)) {\n        leaderchanged = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"New overseer designate has not become the overseer, expected : \" + anotherOverseer + \"actual : \" + getLeaderNode(client.getZkStateReader().getZkClient()), leaderchanged);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5551d21c759979ad637581208f5ff5bd7497b5d7":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["5551d21c759979ad637581208f5ff5bd7497b5d7"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["5551d21c759979ad637581208f5ff5bd7497b5d7","636a04bc82e662bf141a55f1d10f52e1c76c727b"]},"commit2Childs":{"5551d21c759979ad637581208f5ff5bd7497b5d7":["636a04bc82e662bf141a55f1d10f52e1c76c727b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["5551d21c759979ad637581208f5ff5bd7497b5d7"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}