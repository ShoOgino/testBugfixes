{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1#decode(byte[],int,int[],int,int).mjava","commits":[{"id":"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f","date":1345677220,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1#decode(byte[],int,int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final int byte0 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte0 >>> 7;\n        values[valuesOffset++] = (byte0 >>> 6) & 1;\n        values[valuesOffset++] = (byte0 >>> 5) & 1;\n        values[valuesOffset++] = (byte0 >>> 4) & 1;\n        values[valuesOffset++] = (byte0 >>> 3) & 1;\n        values[valuesOffset++] = (byte0 >>> 2) & 1;\n        values[valuesOffset++] = (byte0 >>> 1) & 1;\n        values[valuesOffset++] = byte0 & 1;\n        final int byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte1 >>> 7;\n        values[valuesOffset++] = (byte1 >>> 6) & 1;\n        values[valuesOffset++] = (byte1 >>> 5) & 1;\n        values[valuesOffset++] = (byte1 >>> 4) & 1;\n        values[valuesOffset++] = (byte1 >>> 3) & 1;\n        values[valuesOffset++] = (byte1 >>> 2) & 1;\n        values[valuesOffset++] = (byte1 >>> 1) & 1;\n        values[valuesOffset++] = byte1 & 1;\n        final int byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte2 >>> 7;\n        values[valuesOffset++] = (byte2 >>> 6) & 1;\n        values[valuesOffset++] = (byte2 >>> 5) & 1;\n        values[valuesOffset++] = (byte2 >>> 4) & 1;\n        values[valuesOffset++] = (byte2 >>> 3) & 1;\n        values[valuesOffset++] = (byte2 >>> 2) & 1;\n        values[valuesOffset++] = (byte2 >>> 1) & 1;\n        values[valuesOffset++] = byte2 & 1;\n        final int byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte3 >>> 7;\n        values[valuesOffset++] = (byte3 >>> 6) & 1;\n        values[valuesOffset++] = (byte3 >>> 5) & 1;\n        values[valuesOffset++] = (byte3 >>> 4) & 1;\n        values[valuesOffset++] = (byte3 >>> 3) & 1;\n        values[valuesOffset++] = (byte3 >>> 2) & 1;\n        values[valuesOffset++] = (byte3 >>> 1) & 1;\n        values[valuesOffset++] = byte3 & 1;\n        final int byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte4 >>> 7;\n        values[valuesOffset++] = (byte4 >>> 6) & 1;\n        values[valuesOffset++] = (byte4 >>> 5) & 1;\n        values[valuesOffset++] = (byte4 >>> 4) & 1;\n        values[valuesOffset++] = (byte4 >>> 3) & 1;\n        values[valuesOffset++] = (byte4 >>> 2) & 1;\n        values[valuesOffset++] = (byte4 >>> 1) & 1;\n        values[valuesOffset++] = byte4 & 1;\n        final int byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte5 >>> 7;\n        values[valuesOffset++] = (byte5 >>> 6) & 1;\n        values[valuesOffset++] = (byte5 >>> 5) & 1;\n        values[valuesOffset++] = (byte5 >>> 4) & 1;\n        values[valuesOffset++] = (byte5 >>> 3) & 1;\n        values[valuesOffset++] = (byte5 >>> 2) & 1;\n        values[valuesOffset++] = (byte5 >>> 1) & 1;\n        values[valuesOffset++] = byte5 & 1;\n        final int byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte6 >>> 7;\n        values[valuesOffset++] = (byte6 >>> 6) & 1;\n        values[valuesOffset++] = (byte6 >>> 5) & 1;\n        values[valuesOffset++] = (byte6 >>> 4) & 1;\n        values[valuesOffset++] = (byte6 >>> 3) & 1;\n        values[valuesOffset++] = (byte6 >>> 2) & 1;\n        values[valuesOffset++] = (byte6 >>> 1) & 1;\n        values[valuesOffset++] = byte6 & 1;\n        final int byte7 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte7 >>> 7;\n        values[valuesOffset++] = (byte7 >>> 6) & 1;\n        values[valuesOffset++] = (byte7 >>> 5) & 1;\n        values[valuesOffset++] = (byte7 >>> 4) & 1;\n        values[valuesOffset++] = (byte7 >>> 3) & 1;\n        values[valuesOffset++] = (byte7 >>> 2) & 1;\n        values[valuesOffset++] = (byte7 >>> 1) & 1;\n        values[valuesOffset++] = byte7 & 1;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["818b04e906a094f03512fe99c83e359da8277708"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"353f5909b00345d98d079a7db9a1bbe7485b1ea6","date":1345745476,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1#decode(byte[],int,int[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1#decode(byte[],int,int[],int,int).mjava","sourceNew":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final int byte0 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte0 >>> 7;\n        values[valuesOffset++] = (byte0 >>> 6) & 1;\n        values[valuesOffset++] = (byte0 >>> 5) & 1;\n        values[valuesOffset++] = (byte0 >>> 4) & 1;\n        values[valuesOffset++] = (byte0 >>> 3) & 1;\n        values[valuesOffset++] = (byte0 >>> 2) & 1;\n        values[valuesOffset++] = (byte0 >>> 1) & 1;\n        values[valuesOffset++] = byte0 & 1;\n        final int byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte1 >>> 7;\n        values[valuesOffset++] = (byte1 >>> 6) & 1;\n        values[valuesOffset++] = (byte1 >>> 5) & 1;\n        values[valuesOffset++] = (byte1 >>> 4) & 1;\n        values[valuesOffset++] = (byte1 >>> 3) & 1;\n        values[valuesOffset++] = (byte1 >>> 2) & 1;\n        values[valuesOffset++] = (byte1 >>> 1) & 1;\n        values[valuesOffset++] = byte1 & 1;\n        final int byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte2 >>> 7;\n        values[valuesOffset++] = (byte2 >>> 6) & 1;\n        values[valuesOffset++] = (byte2 >>> 5) & 1;\n        values[valuesOffset++] = (byte2 >>> 4) & 1;\n        values[valuesOffset++] = (byte2 >>> 3) & 1;\n        values[valuesOffset++] = (byte2 >>> 2) & 1;\n        values[valuesOffset++] = (byte2 >>> 1) & 1;\n        values[valuesOffset++] = byte2 & 1;\n        final int byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte3 >>> 7;\n        values[valuesOffset++] = (byte3 >>> 6) & 1;\n        values[valuesOffset++] = (byte3 >>> 5) & 1;\n        values[valuesOffset++] = (byte3 >>> 4) & 1;\n        values[valuesOffset++] = (byte3 >>> 3) & 1;\n        values[valuesOffset++] = (byte3 >>> 2) & 1;\n        values[valuesOffset++] = (byte3 >>> 1) & 1;\n        values[valuesOffset++] = byte3 & 1;\n        final int byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte4 >>> 7;\n        values[valuesOffset++] = (byte4 >>> 6) & 1;\n        values[valuesOffset++] = (byte4 >>> 5) & 1;\n        values[valuesOffset++] = (byte4 >>> 4) & 1;\n        values[valuesOffset++] = (byte4 >>> 3) & 1;\n        values[valuesOffset++] = (byte4 >>> 2) & 1;\n        values[valuesOffset++] = (byte4 >>> 1) & 1;\n        values[valuesOffset++] = byte4 & 1;\n        final int byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte5 >>> 7;\n        values[valuesOffset++] = (byte5 >>> 6) & 1;\n        values[valuesOffset++] = (byte5 >>> 5) & 1;\n        values[valuesOffset++] = (byte5 >>> 4) & 1;\n        values[valuesOffset++] = (byte5 >>> 3) & 1;\n        values[valuesOffset++] = (byte5 >>> 2) & 1;\n        values[valuesOffset++] = (byte5 >>> 1) & 1;\n        values[valuesOffset++] = byte5 & 1;\n        final int byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte6 >>> 7;\n        values[valuesOffset++] = (byte6 >>> 6) & 1;\n        values[valuesOffset++] = (byte6 >>> 5) & 1;\n        values[valuesOffset++] = (byte6 >>> 4) & 1;\n        values[valuesOffset++] = (byte6 >>> 3) & 1;\n        values[valuesOffset++] = (byte6 >>> 2) & 1;\n        values[valuesOffset++] = (byte6 >>> 1) & 1;\n        values[valuesOffset++] = byte6 & 1;\n        final int byte7 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte7 >>> 7;\n        values[valuesOffset++] = (byte7 >>> 6) & 1;\n        values[valuesOffset++] = (byte7 >>> 5) & 1;\n        values[valuesOffset++] = (byte7 >>> 4) & 1;\n        values[valuesOffset++] = (byte7 >>> 3) & 1;\n        values[valuesOffset++] = (byte7 >>> 2) & 1;\n        values[valuesOffset++] = (byte7 >>> 1) & 1;\n        values[valuesOffset++] = byte7 & 1;\n      }\n    }\n\n","sourceOld":"    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final int byte0 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte0 >>> 7;\n        values[valuesOffset++] = (byte0 >>> 6) & 1;\n        values[valuesOffset++] = (byte0 >>> 5) & 1;\n        values[valuesOffset++] = (byte0 >>> 4) & 1;\n        values[valuesOffset++] = (byte0 >>> 3) & 1;\n        values[valuesOffset++] = (byte0 >>> 2) & 1;\n        values[valuesOffset++] = (byte0 >>> 1) & 1;\n        values[valuesOffset++] = byte0 & 1;\n        final int byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte1 >>> 7;\n        values[valuesOffset++] = (byte1 >>> 6) & 1;\n        values[valuesOffset++] = (byte1 >>> 5) & 1;\n        values[valuesOffset++] = (byte1 >>> 4) & 1;\n        values[valuesOffset++] = (byte1 >>> 3) & 1;\n        values[valuesOffset++] = (byte1 >>> 2) & 1;\n        values[valuesOffset++] = (byte1 >>> 1) & 1;\n        values[valuesOffset++] = byte1 & 1;\n        final int byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte2 >>> 7;\n        values[valuesOffset++] = (byte2 >>> 6) & 1;\n        values[valuesOffset++] = (byte2 >>> 5) & 1;\n        values[valuesOffset++] = (byte2 >>> 4) & 1;\n        values[valuesOffset++] = (byte2 >>> 3) & 1;\n        values[valuesOffset++] = (byte2 >>> 2) & 1;\n        values[valuesOffset++] = (byte2 >>> 1) & 1;\n        values[valuesOffset++] = byte2 & 1;\n        final int byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte3 >>> 7;\n        values[valuesOffset++] = (byte3 >>> 6) & 1;\n        values[valuesOffset++] = (byte3 >>> 5) & 1;\n        values[valuesOffset++] = (byte3 >>> 4) & 1;\n        values[valuesOffset++] = (byte3 >>> 3) & 1;\n        values[valuesOffset++] = (byte3 >>> 2) & 1;\n        values[valuesOffset++] = (byte3 >>> 1) & 1;\n        values[valuesOffset++] = byte3 & 1;\n        final int byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte4 >>> 7;\n        values[valuesOffset++] = (byte4 >>> 6) & 1;\n        values[valuesOffset++] = (byte4 >>> 5) & 1;\n        values[valuesOffset++] = (byte4 >>> 4) & 1;\n        values[valuesOffset++] = (byte4 >>> 3) & 1;\n        values[valuesOffset++] = (byte4 >>> 2) & 1;\n        values[valuesOffset++] = (byte4 >>> 1) & 1;\n        values[valuesOffset++] = byte4 & 1;\n        final int byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte5 >>> 7;\n        values[valuesOffset++] = (byte5 >>> 6) & 1;\n        values[valuesOffset++] = (byte5 >>> 5) & 1;\n        values[valuesOffset++] = (byte5 >>> 4) & 1;\n        values[valuesOffset++] = (byte5 >>> 3) & 1;\n        values[valuesOffset++] = (byte5 >>> 2) & 1;\n        values[valuesOffset++] = (byte5 >>> 1) & 1;\n        values[valuesOffset++] = byte5 & 1;\n        final int byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte6 >>> 7;\n        values[valuesOffset++] = (byte6 >>> 6) & 1;\n        values[valuesOffset++] = (byte6 >>> 5) & 1;\n        values[valuesOffset++] = (byte6 >>> 4) & 1;\n        values[valuesOffset++] = (byte6 >>> 3) & 1;\n        values[valuesOffset++] = (byte6 >>> 2) & 1;\n        values[valuesOffset++] = (byte6 >>> 1) & 1;\n        values[valuesOffset++] = byte6 & 1;\n        final int byte7 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte7 >>> 7;\n        values[valuesOffset++] = (byte7 >>> 6) & 1;\n        values[valuesOffset++] = (byte7 >>> 5) & 1;\n        values[valuesOffset++] = (byte7 >>> 4) & 1;\n        values[valuesOffset++] = (byte7 >>> 3) & 1;\n        values[valuesOffset++] = (byte7 >>> 2) & 1;\n        values[valuesOffset++] = (byte7 >>> 1) & 1;\n        values[valuesOffset++] = byte7 & 1;\n      }\n    }\n\n","bugFix":null,"bugIntro":["818b04e906a094f03512fe99c83e359da8277708"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1#decode(byte[],int,int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final int byte0 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte0 >>> 7;\n        values[valuesOffset++] = (byte0 >>> 6) & 1;\n        values[valuesOffset++] = (byte0 >>> 5) & 1;\n        values[valuesOffset++] = (byte0 >>> 4) & 1;\n        values[valuesOffset++] = (byte0 >>> 3) & 1;\n        values[valuesOffset++] = (byte0 >>> 2) & 1;\n        values[valuesOffset++] = (byte0 >>> 1) & 1;\n        values[valuesOffset++] = byte0 & 1;\n        final int byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte1 >>> 7;\n        values[valuesOffset++] = (byte1 >>> 6) & 1;\n        values[valuesOffset++] = (byte1 >>> 5) & 1;\n        values[valuesOffset++] = (byte1 >>> 4) & 1;\n        values[valuesOffset++] = (byte1 >>> 3) & 1;\n        values[valuesOffset++] = (byte1 >>> 2) & 1;\n        values[valuesOffset++] = (byte1 >>> 1) & 1;\n        values[valuesOffset++] = byte1 & 1;\n        final int byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte2 >>> 7;\n        values[valuesOffset++] = (byte2 >>> 6) & 1;\n        values[valuesOffset++] = (byte2 >>> 5) & 1;\n        values[valuesOffset++] = (byte2 >>> 4) & 1;\n        values[valuesOffset++] = (byte2 >>> 3) & 1;\n        values[valuesOffset++] = (byte2 >>> 2) & 1;\n        values[valuesOffset++] = (byte2 >>> 1) & 1;\n        values[valuesOffset++] = byte2 & 1;\n        final int byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte3 >>> 7;\n        values[valuesOffset++] = (byte3 >>> 6) & 1;\n        values[valuesOffset++] = (byte3 >>> 5) & 1;\n        values[valuesOffset++] = (byte3 >>> 4) & 1;\n        values[valuesOffset++] = (byte3 >>> 3) & 1;\n        values[valuesOffset++] = (byte3 >>> 2) & 1;\n        values[valuesOffset++] = (byte3 >>> 1) & 1;\n        values[valuesOffset++] = byte3 & 1;\n        final int byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte4 >>> 7;\n        values[valuesOffset++] = (byte4 >>> 6) & 1;\n        values[valuesOffset++] = (byte4 >>> 5) & 1;\n        values[valuesOffset++] = (byte4 >>> 4) & 1;\n        values[valuesOffset++] = (byte4 >>> 3) & 1;\n        values[valuesOffset++] = (byte4 >>> 2) & 1;\n        values[valuesOffset++] = (byte4 >>> 1) & 1;\n        values[valuesOffset++] = byte4 & 1;\n        final int byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte5 >>> 7;\n        values[valuesOffset++] = (byte5 >>> 6) & 1;\n        values[valuesOffset++] = (byte5 >>> 5) & 1;\n        values[valuesOffset++] = (byte5 >>> 4) & 1;\n        values[valuesOffset++] = (byte5 >>> 3) & 1;\n        values[valuesOffset++] = (byte5 >>> 2) & 1;\n        values[valuesOffset++] = (byte5 >>> 1) & 1;\n        values[valuesOffset++] = byte5 & 1;\n        final int byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte6 >>> 7;\n        values[valuesOffset++] = (byte6 >>> 6) & 1;\n        values[valuesOffset++] = (byte6 >>> 5) & 1;\n        values[valuesOffset++] = (byte6 >>> 4) & 1;\n        values[valuesOffset++] = (byte6 >>> 3) & 1;\n        values[valuesOffset++] = (byte6 >>> 2) & 1;\n        values[valuesOffset++] = (byte6 >>> 1) & 1;\n        values[valuesOffset++] = byte6 & 1;\n        final int byte7 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte7 >>> 7;\n        values[valuesOffset++] = (byte7 >>> 6) & 1;\n        values[valuesOffset++] = (byte7 >>> 5) & 1;\n        values[valuesOffset++] = (byte7 >>> 4) & 1;\n        values[valuesOffset++] = (byte7 >>> 3) & 1;\n        values[valuesOffset++] = (byte7 >>> 2) & 1;\n        values[valuesOffset++] = (byte7 >>> 1) & 1;\n        values[valuesOffset++] = byte7 & 1;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"818b04e906a094f03512fe99c83e359da8277708","date":1346427149,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1#decode(byte[],int,int[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1#decode(byte[],int,int[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n    for (int j = 0; j < 8 * iterations; ++j) {\n      final byte block = blocks[blocksOffset++];\n      values[valuesOffset++] = (block >>> 7) & 1;\n      values[valuesOffset++] = (block >>> 6) & 1;\n      values[valuesOffset++] = (block >>> 5) & 1;\n      values[valuesOffset++] = (block >>> 4) & 1;\n      values[valuesOffset++] = (block >>> 3) & 1;\n      values[valuesOffset++] = (block >>> 2) & 1;\n      values[valuesOffset++] = (block >>> 1) & 1;\n      values[valuesOffset++] = block & 1;\n    }\n  }\n\n","sourceOld":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final int byte0 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte0 >>> 7;\n        values[valuesOffset++] = (byte0 >>> 6) & 1;\n        values[valuesOffset++] = (byte0 >>> 5) & 1;\n        values[valuesOffset++] = (byte0 >>> 4) & 1;\n        values[valuesOffset++] = (byte0 >>> 3) & 1;\n        values[valuesOffset++] = (byte0 >>> 2) & 1;\n        values[valuesOffset++] = (byte0 >>> 1) & 1;\n        values[valuesOffset++] = byte0 & 1;\n        final int byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte1 >>> 7;\n        values[valuesOffset++] = (byte1 >>> 6) & 1;\n        values[valuesOffset++] = (byte1 >>> 5) & 1;\n        values[valuesOffset++] = (byte1 >>> 4) & 1;\n        values[valuesOffset++] = (byte1 >>> 3) & 1;\n        values[valuesOffset++] = (byte1 >>> 2) & 1;\n        values[valuesOffset++] = (byte1 >>> 1) & 1;\n        values[valuesOffset++] = byte1 & 1;\n        final int byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte2 >>> 7;\n        values[valuesOffset++] = (byte2 >>> 6) & 1;\n        values[valuesOffset++] = (byte2 >>> 5) & 1;\n        values[valuesOffset++] = (byte2 >>> 4) & 1;\n        values[valuesOffset++] = (byte2 >>> 3) & 1;\n        values[valuesOffset++] = (byte2 >>> 2) & 1;\n        values[valuesOffset++] = (byte2 >>> 1) & 1;\n        values[valuesOffset++] = byte2 & 1;\n        final int byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte3 >>> 7;\n        values[valuesOffset++] = (byte3 >>> 6) & 1;\n        values[valuesOffset++] = (byte3 >>> 5) & 1;\n        values[valuesOffset++] = (byte3 >>> 4) & 1;\n        values[valuesOffset++] = (byte3 >>> 3) & 1;\n        values[valuesOffset++] = (byte3 >>> 2) & 1;\n        values[valuesOffset++] = (byte3 >>> 1) & 1;\n        values[valuesOffset++] = byte3 & 1;\n        final int byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte4 >>> 7;\n        values[valuesOffset++] = (byte4 >>> 6) & 1;\n        values[valuesOffset++] = (byte4 >>> 5) & 1;\n        values[valuesOffset++] = (byte4 >>> 4) & 1;\n        values[valuesOffset++] = (byte4 >>> 3) & 1;\n        values[valuesOffset++] = (byte4 >>> 2) & 1;\n        values[valuesOffset++] = (byte4 >>> 1) & 1;\n        values[valuesOffset++] = byte4 & 1;\n        final int byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte5 >>> 7;\n        values[valuesOffset++] = (byte5 >>> 6) & 1;\n        values[valuesOffset++] = (byte5 >>> 5) & 1;\n        values[valuesOffset++] = (byte5 >>> 4) & 1;\n        values[valuesOffset++] = (byte5 >>> 3) & 1;\n        values[valuesOffset++] = (byte5 >>> 2) & 1;\n        values[valuesOffset++] = (byte5 >>> 1) & 1;\n        values[valuesOffset++] = byte5 & 1;\n        final int byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte6 >>> 7;\n        values[valuesOffset++] = (byte6 >>> 6) & 1;\n        values[valuesOffset++] = (byte6 >>> 5) & 1;\n        values[valuesOffset++] = (byte6 >>> 4) & 1;\n        values[valuesOffset++] = (byte6 >>> 3) & 1;\n        values[valuesOffset++] = (byte6 >>> 2) & 1;\n        values[valuesOffset++] = (byte6 >>> 1) & 1;\n        values[valuesOffset++] = byte6 & 1;\n        final int byte7 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte7 >>> 7;\n        values[valuesOffset++] = (byte7 >>> 6) & 1;\n        values[valuesOffset++] = (byte7 >>> 5) & 1;\n        values[valuesOffset++] = (byte7 >>> 4) & 1;\n        values[valuesOffset++] = (byte7 >>> 3) & 1;\n        values[valuesOffset++] = (byte7 >>> 2) & 1;\n        values[valuesOffset++] = (byte7 >>> 1) & 1;\n        values[valuesOffset++] = byte7 & 1;\n      }\n    }\n\n","bugFix":["353f5909b00345d98d079a7db9a1bbe7485b1ea6","3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1#decode(byte[],int,int[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1#decode(byte[],int,int[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n    for (int j = 0; j < 8 * iterations; ++j) {\n      final byte block = blocks[blocksOffset++];\n      values[valuesOffset++] = (block >>> 7) & 1;\n      values[valuesOffset++] = (block >>> 6) & 1;\n      values[valuesOffset++] = (block >>> 5) & 1;\n      values[valuesOffset++] = (block >>> 4) & 1;\n      values[valuesOffset++] = (block >>> 3) & 1;\n      values[valuesOffset++] = (block >>> 2) & 1;\n      values[valuesOffset++] = (block >>> 1) & 1;\n      values[valuesOffset++] = block & 1;\n    }\n  }\n\n","sourceOld":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final int byte0 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte0 >>> 7;\n        values[valuesOffset++] = (byte0 >>> 6) & 1;\n        values[valuesOffset++] = (byte0 >>> 5) & 1;\n        values[valuesOffset++] = (byte0 >>> 4) & 1;\n        values[valuesOffset++] = (byte0 >>> 3) & 1;\n        values[valuesOffset++] = (byte0 >>> 2) & 1;\n        values[valuesOffset++] = (byte0 >>> 1) & 1;\n        values[valuesOffset++] = byte0 & 1;\n        final int byte1 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte1 >>> 7;\n        values[valuesOffset++] = (byte1 >>> 6) & 1;\n        values[valuesOffset++] = (byte1 >>> 5) & 1;\n        values[valuesOffset++] = (byte1 >>> 4) & 1;\n        values[valuesOffset++] = (byte1 >>> 3) & 1;\n        values[valuesOffset++] = (byte1 >>> 2) & 1;\n        values[valuesOffset++] = (byte1 >>> 1) & 1;\n        values[valuesOffset++] = byte1 & 1;\n        final int byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte2 >>> 7;\n        values[valuesOffset++] = (byte2 >>> 6) & 1;\n        values[valuesOffset++] = (byte2 >>> 5) & 1;\n        values[valuesOffset++] = (byte2 >>> 4) & 1;\n        values[valuesOffset++] = (byte2 >>> 3) & 1;\n        values[valuesOffset++] = (byte2 >>> 2) & 1;\n        values[valuesOffset++] = (byte2 >>> 1) & 1;\n        values[valuesOffset++] = byte2 & 1;\n        final int byte3 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte3 >>> 7;\n        values[valuesOffset++] = (byte3 >>> 6) & 1;\n        values[valuesOffset++] = (byte3 >>> 5) & 1;\n        values[valuesOffset++] = (byte3 >>> 4) & 1;\n        values[valuesOffset++] = (byte3 >>> 3) & 1;\n        values[valuesOffset++] = (byte3 >>> 2) & 1;\n        values[valuesOffset++] = (byte3 >>> 1) & 1;\n        values[valuesOffset++] = byte3 & 1;\n        final int byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte4 >>> 7;\n        values[valuesOffset++] = (byte4 >>> 6) & 1;\n        values[valuesOffset++] = (byte4 >>> 5) & 1;\n        values[valuesOffset++] = (byte4 >>> 4) & 1;\n        values[valuesOffset++] = (byte4 >>> 3) & 1;\n        values[valuesOffset++] = (byte4 >>> 2) & 1;\n        values[valuesOffset++] = (byte4 >>> 1) & 1;\n        values[valuesOffset++] = byte4 & 1;\n        final int byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte5 >>> 7;\n        values[valuesOffset++] = (byte5 >>> 6) & 1;\n        values[valuesOffset++] = (byte5 >>> 5) & 1;\n        values[valuesOffset++] = (byte5 >>> 4) & 1;\n        values[valuesOffset++] = (byte5 >>> 3) & 1;\n        values[valuesOffset++] = (byte5 >>> 2) & 1;\n        values[valuesOffset++] = (byte5 >>> 1) & 1;\n        values[valuesOffset++] = byte5 & 1;\n        final int byte6 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte6 >>> 7;\n        values[valuesOffset++] = (byte6 >>> 6) & 1;\n        values[valuesOffset++] = (byte6 >>> 5) & 1;\n        values[valuesOffset++] = (byte6 >>> 4) & 1;\n        values[valuesOffset++] = (byte6 >>> 3) & 1;\n        values[valuesOffset++] = (byte6 >>> 2) & 1;\n        values[valuesOffset++] = (byte6 >>> 1) & 1;\n        values[valuesOffset++] = byte6 & 1;\n        final int byte7 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = byte7 >>> 7;\n        values[valuesOffset++] = (byte7 >>> 6) & 1;\n        values[valuesOffset++] = (byte7 >>> 5) & 1;\n        values[valuesOffset++] = (byte7 >>> 4) & 1;\n        values[valuesOffset++] = (byte7 >>> 3) & 1;\n        values[valuesOffset++] = (byte7 >>> 2) & 1;\n        values[valuesOffset++] = (byte7 >>> 1) & 1;\n        values[valuesOffset++] = byte7 & 1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29d4d91327929d477b701d3ef2f5b3457d26ec5","date":1359465689,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1#decode(byte[],int,int[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1#decode(byte[],int,int[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n    for (int j = 0; j < iterations; ++j) {\n      final byte block = blocks[blocksOffset++];\n      values[valuesOffset++] = (block >>> 7) & 1;\n      values[valuesOffset++] = (block >>> 6) & 1;\n      values[valuesOffset++] = (block >>> 5) & 1;\n      values[valuesOffset++] = (block >>> 4) & 1;\n      values[valuesOffset++] = (block >>> 3) & 1;\n      values[valuesOffset++] = (block >>> 2) & 1;\n      values[valuesOffset++] = (block >>> 1) & 1;\n      values[valuesOffset++] = block & 1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n    for (int j = 0; j < 8 * iterations; ++j) {\n      final byte block = blocks[blocksOffset++];\n      values[valuesOffset++] = (block >>> 7) & 1;\n      values[valuesOffset++] = (block >>> 6) & 1;\n      values[valuesOffset++] = (block >>> 5) & 1;\n      values[valuesOffset++] = (block >>> 4) & 1;\n      values[valuesOffset++] = (block >>> 3) & 1;\n      values[valuesOffset++] = (block >>> 2) & 1;\n      values[valuesOffset++] = (block >>> 1) & 1;\n      values[valuesOffset++] = block & 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1#decode(byte[],int,int[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1#decode(byte[],int,int[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n    for (int j = 0; j < iterations; ++j) {\n      final byte block = blocks[blocksOffset++];\n      values[valuesOffset++] = (block >>> 7) & 1;\n      values[valuesOffset++] = (block >>> 6) & 1;\n      values[valuesOffset++] = (block >>> 5) & 1;\n      values[valuesOffset++] = (block >>> 4) & 1;\n      values[valuesOffset++] = (block >>> 3) & 1;\n      values[valuesOffset++] = (block >>> 2) & 1;\n      values[valuesOffset++] = (block >>> 1) & 1;\n      values[valuesOffset++] = block & 1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\n    for (int j = 0; j < 8 * iterations; ++j) {\n      final byte block = blocks[blocksOffset++];\n      values[valuesOffset++] = (block >>> 7) & 1;\n      values[valuesOffset++] = (block >>> 6) & 1;\n      values[valuesOffset++] = (block >>> 5) & 1;\n      values[valuesOffset++] = (block >>> 4) & 1;\n      values[valuesOffset++] = (block >>> 3) & 1;\n      values[valuesOffset++] = (block >>> 2) & 1;\n      values[valuesOffset++] = (block >>> 1) & 1;\n      values[valuesOffset++] = block & 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["818b04e906a094f03512fe99c83e359da8277708"],"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["001b25b42373b22a52f399dbf072f1224632e8e6","818b04e906a094f03512fe99c83e359da8277708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de522d9303bd67c8473a269a1319125d1f3700e0":["818b04e906a094f03512fe99c83e359da8277708","e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"818b04e906a094f03512fe99c83e359da8277708":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e29d4d91327929d477b701d3ef2f5b3457d26ec5"]},"commit2Childs":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["001b25b42373b22a52f399dbf072f1224632e8e6","818b04e906a094f03512fe99c83e359da8277708"],"001b25b42373b22a52f399dbf072f1224632e8e6":["d0d1f90e969803cc84174589b5e4a39b7935fecd"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"818b04e906a094f03512fe99c83e359da8277708":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","d0d1f90e969803cc84174589b5e4a39b7935fecd","de522d9303bd67c8473a269a1319125d1f3700e0"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}