{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ce8d53d5582eaa6a0c771c9b119d480f41da59c","date":1297466174,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7f1e9c48dcf5351850e841f712bf65196dcf74","date":1306914955,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not index norms, then\n   * this method throws {@link IllegalStateException}.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   * @throws IllegalStateException if the field does not index norms\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37ff5956d30d0c66110ac0c84d8e32d46b67eff1","date":1306967829,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not index norms, then\n   * this method throws {@link IllegalStateException}.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   * @throws IllegalStateException if the field does not index norms\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not index norms, then\n   * this method throws {@link IllegalStateException}.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   * @throws IllegalStateException if the field does not index norms\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  By default, The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not index norms, then\n   * this method throws {@link IllegalStateException}.\n   *\n   * @see #norms(String)\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.DefaultSimilarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   * @throws IllegalStateException if the field does not index norms\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not index norms, then\n   * this method throws {@link IllegalStateException}.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   * @throws IllegalStateException if the field does not index norms\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  By default, The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not index norms, then\n   * this method throws {@link IllegalStateException}.\n   *\n   * @see #norms(String)\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.DefaultSimilarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   * @throws IllegalStateException if the field does not index norms\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not index norms, then\n   * this method throws {@link IllegalStateException}.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   * @throws IllegalStateException if the field does not index norms\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  By default, The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not index norms, then\n   * this method throws {@link IllegalStateException}.\n   *\n   * @see #norms(String)\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.DefaultSimilarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   * @throws IllegalStateException if the field does not index norms\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not index norms, then\n   * this method throws {@link IllegalStateException}.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   * @throws IllegalStateException if the field does not index norms\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  By default, the norm represents the product of the field's {@link\n   * org.apache.lucene.document.Field#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not index norms, then\n   * this method throws {@link IllegalStateException}.\n   *\n   * @see #norms(String)\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.DefaultSimilarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   * @throws IllegalStateException if the field does not index norms\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  By default, The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not index norms, then\n   * this method throws {@link IllegalStateException}.\n   *\n   * @see #norms(String)\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.DefaultSimilarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   * @throws IllegalStateException if the field does not index norms\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  By default, the norm represents the product of the field's {@link\n   * org.apache.lucene.document.Field#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not index norms, then\n   * this method throws {@link IllegalStateException}.\n   *\n   * @see #norms(String)\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.similarities.DefaultSimilarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   * @throws IllegalStateException if the field does not index norms\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  By default, the norm represents the product of the field's {@link\n   * org.apache.lucene.document.Field#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not index norms, then\n   * this method throws {@link IllegalStateException}.\n   *\n   * @see #norms(String)\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.DefaultSimilarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   * @throws IllegalStateException if the field does not index norms\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":null,"sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  By default, the norm represents the product of the field's {@link\n   * org.apache.lucene.document.Field#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not index norms, then\n   * this method throws {@link IllegalStateException}.\n   *\n   * @see #norms(String)\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.similarities.DefaultSimilarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   * @throws IllegalStateException if the field does not index norms\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":null,"sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  By default, the norm represents the product of the field's {@link\n   * org.apache.lucene.document.Field#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not index norms, then\n   * this method throws {@link IllegalStateException}.\n   *\n   * @see #norms(String)\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.similarities.DefaultSimilarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   * @throws IllegalStateException if the field does not index norms\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":null,"sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  By default, the norm represents the product of the field's {@link\n   * org.apache.lucene.document.Field#setBoost(float) boost} and its\n   * length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not index norms, then\n   * this method throws {@link IllegalStateException}.\n   *\n   * @see #norms(String)\n   * @see Similarity#computeNorm(FieldInvertState)\n   * @see org.apache.lucene.search.similarities.DefaultSimilarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   * @throws IllegalStateException if the field does not index norms\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["0e7f1e9c48dcf5351850e841f712bf65196dcf74"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["9454a6510e2db155fb01faa5c049b06ece95fab9","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"c715a0f99152be7566591f323c6c5a25725a1bcb":["f1bdbf92da222965b46c0a942c3857ba56e5c638","0e7f1e9c48dcf5351850e841f712bf65196dcf74"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"0e7f1e9c48dcf5351850e841f712bf65196dcf74":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"1291e4568eb7d9463d751627596ef14baf4c1603":["0e7f1e9c48dcf5351850e841f712bf65196dcf74","0f3cee3d20b0c786e6fca20539454262e29edcab"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["37ff5956d30d0c66110ac0c84d8e32d46b67eff1","0f3cee3d20b0c786e6fca20539454262e29edcab"],"37ff5956d30d0c66110ac0c84d8e32d46b67eff1":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c","0e7f1e9c48dcf5351850e841f712bf65196dcf74"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2","4122a26e1fd0457a340616673a3d3aada370f713"],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"4122a26e1fd0457a340616673a3d3aada370f713":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["9454a6510e2db155fb01faa5c049b06ece95fab9","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["c715a0f99152be7566591f323c6c5a25725a1bcb"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"0e7f1e9c48dcf5351850e841f712bf65196dcf74":["0f3cee3d20b0c786e6fca20539454262e29edcab","c715a0f99152be7566591f323c6c5a25725a1bcb","1291e4568eb7d9463d751627596ef14baf4c1603","37ff5956d30d0c66110ac0c84d8e32d46b67eff1"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"37ff5956d30d0c66110ac0c84d8e32d46b67eff1":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["f1bdbf92da222965b46c0a942c3857ba56e5c638","0e7f1e9c48dcf5351850e841f712bf65196dcf74","37ff5956d30d0c66110ac0c84d8e32d46b67eff1","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"4122a26e1fd0457a340616673a3d3aada370f713":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f1bdbf92da222965b46c0a942c3857ba56e5c638","5ce8d53d5582eaa6a0c771c9b119d480f41da59c","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","c715a0f99152be7566591f323c6c5a25725a1bcb","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}