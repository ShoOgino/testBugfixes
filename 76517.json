{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","sourceNew":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n    \n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(1);\n\n      if (t.allowInterrupt) {\n        i++;\n        t.allowInterrupt = false;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.allowInterrupt = false;\n    t.finish = true;\n    t.interrupt();\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","sourceOld":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n    \n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(1);\n\n      if (t.allowInterrupt) {\n        i++;\n        t.allowInterrupt = false;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.allowInterrupt = false;\n    t.finish = true;\n    t.interrupt();\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac905e7f9dcfc903d9c158306cdaa9330601ff45","date":1280939795,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","sourceNew":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n    \n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(1);\n\n      if (t.allowInterrupt) {\n        i++;\n        t.allowInterrupt = false;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.allowInterrupt = false;\n    t.finish = true;\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","sourceOld":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n    \n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(1);\n\n      if (t.allowInterrupt) {\n        i++;\n        t.allowInterrupt = false;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.allowInterrupt = false;\n    t.finish = true;\n    t.interrupt();\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eaa8ca351aa7eefa5bd5bf249e9dd9bb0830c54","date":1282658201,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","sourceNew":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n    \n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(10);\n      if (t.allowInterrupt) {\n        i++;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.finish = true;\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","sourceOld":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n    \n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(1);\n\n      if (t.allowInterrupt) {\n        i++;\n        t.allowInterrupt = false;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.allowInterrupt = false;\n    t.finish = true;\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72ba3b5020086a146c19aa4eb62b4ff9ccdb4ff4","date":1283849799,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","sourceNew":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n\n    // Force class loader to load ThreadInterruptedException\n    // up front... else we can see a false failure if 2nd\n    // interrupt arrives while class loader is trying to\n    // init this class (in servicing a first interrupt):\n    assertTrue(new ThreadInterruptedException(new InterruptedException()).getCause() instanceof InterruptedException);\n    \n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(10);\n      if (t.allowInterrupt) {\n        i++;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.finish = true;\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","sourceOld":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n    \n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(10);\n      if (t.allowInterrupt) {\n        i++;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.finish = true;\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","sourceNew":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n\n    // Force class loader to load ThreadInterruptedException\n    // up front... else we can see a false failure if 2nd\n    // interrupt arrives while class loader is trying to\n    // init this class (in servicing a first interrupt):\n    assertTrue(new ThreadInterruptedException(new InterruptedException()).getCause() instanceof InterruptedException);\n\n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(10);\n      if (t.allowInterrupt) {\n        i++;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.finish = true;\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","sourceOld":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n    \n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(1);\n\n      if (t.allowInterrupt) {\n        i++;\n        t.allowInterrupt = false;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.allowInterrupt = false;\n    t.finish = true;\n    t.interrupt();\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","sourceNew":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n\n    // Force class loader to load ThreadInterruptedException\n    // up front... else we can see a false failure if 2nd\n    // interrupt arrives while class loader is trying to\n    // init this class (in servicing a first interrupt):\n    assertTrue(new ThreadInterruptedException(new InterruptedException()).getCause() instanceof InterruptedException);\n\n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(10);\n      if (t.allowInterrupt) {\n        i++;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.finish = true;\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","sourceOld":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n\n    // Force class loader to load ThreadInterruptedException\n    // up front... else we can see a false failure if 2nd\n    // interrupt arrives while class loader is trying to\n    // init this class (in servicing a first interrupt):\n    assertTrue(new ThreadInterruptedException(new InterruptedException()).getCause() instanceof InterruptedException);\n    \n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(10);\n      if (t.allowInterrupt) {\n        i++;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.finish = true;\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","sourceNew":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n\n    // Force class loader to load ThreadInterruptedException\n    // up front... else we can see a false failure if 2nd\n    // interrupt arrives while class loader is trying to\n    // init this class (in servicing a first interrupt):\n    assertTrue(new ThreadInterruptedException(new InterruptedException()).getCause() instanceof InterruptedException);\n\n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(10);\n      if (t.allowInterrupt) {\n        i++;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.finish = true;\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","sourceOld":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n\n    // Force class loader to load ThreadInterruptedException\n    // up front... else we can see a false failure if 2nd\n    // interrupt arrives while class loader is trying to\n    // init this class (in servicing a first interrupt):\n    assertTrue(new ThreadInterruptedException(new InterruptedException()).getCause() instanceof InterruptedException);\n    \n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(10);\n      if (t.allowInterrupt) {\n        i++;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.finish = true;\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","sourceNew":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n\n    // Force class loader to load ThreadInterruptedException\n    // up front... else we can see a false failure if 2nd\n    // interrupt arrives while class loader is trying to\n    // init this class (in servicing a first interrupt):\n    assertTrue(new ThreadInterruptedException(new InterruptedException()).getCause() instanceof InterruptedException);\n\n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(10);\n      if (t.allowInterrupt) {\n        i++;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.finish = true;\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","sourceOld":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n\n    // Force class loader to load ThreadInterruptedException\n    // up front... else we can see a false failure if 2nd\n    // interrupt arrives while class loader is trying to\n    // init this class (in servicing a first interrupt):\n    assertTrue(new ThreadInterruptedException(new InterruptedException()).getCause() instanceof InterruptedException);\n    \n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(10);\n      if (t.allowInterrupt) {\n        i++;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.finish = true;\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testThreadInterruptDeadlock().mjava","sourceNew":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n\n    // Force class loader to load ThreadInterruptedException\n    // up front... else we can see a false failure if 2nd\n    // interrupt arrives while class loader is trying to\n    // init this class (in servicing a first interrupt):\n    assertTrue(new ThreadInterruptedException(new InterruptedException()).getCause() instanceof InterruptedException);\n\n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(10);\n      if (t.allowInterrupt) {\n        i++;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.finish = true;\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","sourceOld":"  public void testThreadInterruptDeadlock() throws Exception {\n    IndexerThreadInterrupt t = new IndexerThreadInterrupt();\n    t.setDaemon(true);\n    t.start();\n\n    // Force class loader to load ThreadInterruptedException\n    // up front... else we can see a false failure if 2nd\n    // interrupt arrives while class loader is trying to\n    // init this class (in servicing a first interrupt):\n    assertTrue(new ThreadInterruptedException(new InterruptedException()).getCause() instanceof InterruptedException);\n\n    // issue 100 interrupts to child thread\n    int i = 0;\n    while(i < 100) {\n      Thread.sleep(10);\n      if (t.allowInterrupt) {\n        i++;\n        t.interrupt();\n      }\n      if (!t.isAlive()) {\n        break;\n      }\n    }\n    t.finish = true;\n    t.join();\n    assertFalse(t.failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac905e7f9dcfc903d9c158306cdaa9330601ff45":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"72ba3b5020086a146c19aa4eb62b4ff9ccdb4ff4":["3eaa8ca351aa7eefa5bd5bf249e9dd9bb0830c54"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["72ba3b5020086a146c19aa4eb62b4ff9ccdb4ff4","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["72ba3b5020086a146c19aa4eb62b4ff9ccdb4ff4","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3eaa8ca351aa7eefa5bd5bf249e9dd9bb0830c54":["ac905e7f9dcfc903d9c158306cdaa9330601ff45"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["72ba3b5020086a146c19aa4eb62b4ff9ccdb4ff4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","72ba3b5020086a146c19aa4eb62b4ff9ccdb4ff4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ac905e7f9dcfc903d9c158306cdaa9330601ff45":["3eaa8ca351aa7eefa5bd5bf249e9dd9bb0830c54"],"72ba3b5020086a146c19aa4eb62b4ff9ccdb4ff4":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"3eaa8ca351aa7eefa5bd5bf249e9dd9bb0830c54":["72ba3b5020086a146c19aa4eb62b4ff9ccdb4ff4"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ac905e7f9dcfc903d9c158306cdaa9330601ff45","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}