{"path":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testValidIds().mjava","commits":[{"id":"b3c7501e15f71c01b69ba22749b192827fa2019b","date":1335285341,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testValidIds().mjava","pathOld":"/dev/null","sourceNew":"  public void testValidIds() throws Exception {\n\n    final Set<String> idsTested = new HashSet<String>();\n\n    // brain dead: anything the JVM supports, should work\n    for (String validId : TimeZone.getAvailableIDs()) {\n      assertTrue(validId + \" not found in list of known ids\",\n                 TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(validId));\n\n      final TimeZone expected = TimeZone.getTimeZone(validId);\n      final TimeZone actual = TimeZoneUtils.getTimeZone(validId);\n      assertEquals(validId, expected, actual);\n\n      idsTested.add(validId);\n    }\n    \n    assertEquals(\"TimeZone.getAvailableIDs vs TimeZoneUtils.KNOWN_TIMEZONE_IDS\",\n                 TimeZoneUtils.KNOWN_TIMEZONE_IDS.size(), idsTested.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"210ddb28897ffc5a75f04dd53de6a2fb8dacca29","date":1335293446,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testValidIds().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testValidIds().mjava","sourceNew":"  public void testValidIds() throws Exception {\n\n    final Set<String> idsTested = new HashSet<String>();\n\n    // brain dead: anything the JVM supports, should work\n    for (String validId : TimeZone.getAvailableIDs()) {\n      assertTrue(validId + \" not found in list of known ids\",\n                 TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(validId));\n\n      final TimeZone expected = TimeZone.getTimeZone(validId);\n      final TimeZone actual = TimeZoneUtils.getTimeZone(validId);\n      assertSameRules(validId, expected, actual);\n\n      idsTested.add(validId);\n    }\n    \n    assertEquals(\"TimeZone.getAvailableIDs vs TimeZoneUtils.KNOWN_TIMEZONE_IDS\",\n                 TimeZoneUtils.KNOWN_TIMEZONE_IDS.size(), idsTested.size());\n  }\n\n","sourceOld":"  public void testValidIds() throws Exception {\n\n    final Set<String> idsTested = new HashSet<String>();\n\n    // brain dead: anything the JVM supports, should work\n    for (String validId : TimeZone.getAvailableIDs()) {\n      assertTrue(validId + \" not found in list of known ids\",\n                 TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(validId));\n\n      final TimeZone expected = TimeZone.getTimeZone(validId);\n      final TimeZone actual = TimeZoneUtils.getTimeZone(validId);\n      assertEquals(validId, expected, actual);\n\n      idsTested.add(validId);\n    }\n    \n    assertEquals(\"TimeZone.getAvailableIDs vs TimeZoneUtils.KNOWN_TIMEZONE_IDS\",\n                 TimeZoneUtils.KNOWN_TIMEZONE_IDS.size(), idsTested.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testValidIds().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testValidIds().mjava","sourceNew":"  public void testValidIds() throws Exception {\n\n    final Set<String> idsTested = new HashSet<>();\n\n    // brain dead: anything the JVM supports, should work\n    for (String validId : TimeZone.getAvailableIDs()) {\n      assertTrue(validId + \" not found in list of known ids\",\n                 TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(validId));\n\n      final TimeZone expected = TimeZone.getTimeZone(validId);\n      final TimeZone actual = TimeZoneUtils.getTimeZone(validId);\n      assertSameRules(validId, expected, actual);\n\n      idsTested.add(validId);\n    }\n    \n    assertEquals(\"TimeZone.getAvailableIDs vs TimeZoneUtils.KNOWN_TIMEZONE_IDS\",\n                 TimeZoneUtils.KNOWN_TIMEZONE_IDS.size(), idsTested.size());\n  }\n\n","sourceOld":"  public void testValidIds() throws Exception {\n\n    final Set<String> idsTested = new HashSet<String>();\n\n    // brain dead: anything the JVM supports, should work\n    for (String validId : TimeZone.getAvailableIDs()) {\n      assertTrue(validId + \" not found in list of known ids\",\n                 TimeZoneUtils.KNOWN_TIMEZONE_IDS.contains(validId));\n\n      final TimeZone expected = TimeZone.getTimeZone(validId);\n      final TimeZone actual = TimeZoneUtils.getTimeZone(validId);\n      assertSameRules(validId, expected, actual);\n\n      idsTested.add(validId);\n    }\n    \n    assertEquals(\"TimeZone.getAvailableIDs vs TimeZoneUtils.KNOWN_TIMEZONE_IDS\",\n                 TimeZoneUtils.KNOWN_TIMEZONE_IDS.size(), idsTested.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["210ddb28897ffc5a75f04dd53de6a2fb8dacca29"],"210ddb28897ffc5a75f04dd53de6a2fb8dacca29":["b3c7501e15f71c01b69ba22749b192827fa2019b"],"b3c7501e15f71c01b69ba22749b192827fa2019b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"210ddb28897ffc5a75f04dd53de6a2fb8dacca29":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b3c7501e15f71c01b69ba22749b192827fa2019b":["210ddb28897ffc5a75f04dd53de6a2fb8dacca29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3c7501e15f71c01b69ba22749b192827fa2019b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}