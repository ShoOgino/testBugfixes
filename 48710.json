{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#writeClearedDgaps(IndexOutput).mjava","commits":[{"id":"e3a73b15d807e41306466aec106b4cb85b8d5335","date":1326993385,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#writeClearedDgaps(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#writeClearedDgaps(IndexOutput).mjava","sourceNew":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BYTE_COUNTS[bits[i] & 0xFF]);\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","sourceOld":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BYTE_COUNTS[bits[i] & 0xFF]);\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#writeClearedDgaps(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#writeClearedDgaps(IndexOutput).mjava","sourceNew":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BYTE_COUNTS[bits[i] & 0xFF]);\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","sourceOld":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BYTE_COUNTS[bits[i] & 0xFF]);\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#writeClearedDgaps(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#writeClearedDgaps(IndexOutput).mjava","sourceNew":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BYTE_COUNTS[bits[i] & 0xFF]);\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","sourceOld":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BYTE_COUNTS[bits[i] & 0xFF]);\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#writeClearedDgaps(IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#writeClearedDgaps(IndexOutput).mjava","sourceNew":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BYTE_COUNTS[bits[i] & 0xFF]);\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","sourceOld":"  /** Write as a d-gaps list */\n  private void writeClearedDgaps(IndexOutput output) throws IOException {\n    output.writeInt(-1);            // mark using d-gaps                         \n    output.writeInt(size());        // write size\n    output.writeInt(count());       // write count\n    int last=0;\n    int numCleared = size()-count();\n    for (int i=0; i<bits.length && numCleared>0; i++) {\n      if (bits[i] != (byte) 0xff) {\n        output.writeVInt(i-last);\n        output.writeByte(bits[i]);\n        last = i;\n        numCleared -= (8-BYTE_COUNTS[bits[i] & 0xFF]);\n        assert numCleared >= 0 || (i == (bits.length-1) && numCleared == -(8-(size&7)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3a73b15d807e41306466aec106b4cb85b8d5335"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3a73b15d807e41306466aec106b4cb85b8d5335","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fd92b8bcc88e969302510acf77bd6970da3994c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}