{"path":"lucene/backwards/src/java/org/apache/lucene/util/SmallFloat#floatToByte(float,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/SmallFloat#floatToByte(float,int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/SmallFloat#floatToByte(float,int,int).mjava","sourceNew":"  /** Converts a 32 bit float to an 8 bit float.\n   * <br>Values less than zero are all mapped to zero.\n   * <br>Values are truncated (rounded down) to the nearest 8 bit value.\n   * <br>Values between zero and the smallest representable value\n   *  are rounded up.\n   *\n   * @param f the 32 bit float to be converted to an 8 bit float (byte)\n   * @param numMantissaBits the number of mantissa bits to use in the byte, with the remainder to be used in the exponent\n   * @param zeroExp the zero-point in the range of exponent values\n   * @return the 8 bit float representation\n   */\n  public static byte floatToByte(float f, int numMantissaBits, int zeroExp) {\n    // Adjustment from a float zero exponent to our zero exponent,\n    // shifted over to our exponent position.\n    int fzero = (63-zeroExp)<<numMantissaBits;\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-numMantissaBits);\n    if (smallfloat < fzero) {\n      return (bits<=0) ?\n        (byte)0   // negative numbers and zero both map to 0 byte\n       :(byte)1;  // underflow is mapped to smallest non-zero number.\n    } else if (smallfloat >= fzero + 0x100) {\n      return -1;  // overflow maps to largest number\n    } else {\n      return (byte)(smallfloat - fzero);\n    }\n  }\n\n","sourceOld":"  /** Converts a 32 bit float to an 8 bit float.\n   * <br>Values less than zero are all mapped to zero.\n   * <br>Values are truncated (rounded down) to the nearest 8 bit value.\n   * <br>Values between zero and the smallest representable value\n   *  are rounded up.\n   *\n   * @param f the 32 bit float to be converted to an 8 bit float (byte)\n   * @param numMantissaBits the number of mantissa bits to use in the byte, with the remainder to be used in the exponent\n   * @param zeroExp the zero-point in the range of exponent values\n   * @return the 8 bit float representation\n   */\n  public static byte floatToByte(float f, int numMantissaBits, int zeroExp) {\n    // Adjustment from a float zero exponent to our zero exponent,\n    // shifted over to our exponent position.\n    int fzero = (63-zeroExp)<<numMantissaBits;\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-numMantissaBits);\n    if (smallfloat < fzero) {\n      return (bits<=0) ?\n        (byte)0   // negative numbers and zero both map to 0 byte\n       :(byte)1;  // underflow is mapped to smallest non-zero number.\n    } else if (smallfloat >= fzero + 0x100) {\n      return -1;  // overflow maps to largest number\n    } else {\n      return (byte)(smallfloat - fzero);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/util/SmallFloat#floatToByte(float,int,int).mjava","sourceNew":null,"sourceOld":"  /** Converts a 32 bit float to an 8 bit float.\n   * <br>Values less than zero are all mapped to zero.\n   * <br>Values are truncated (rounded down) to the nearest 8 bit value.\n   * <br>Values between zero and the smallest representable value\n   *  are rounded up.\n   *\n   * @param f the 32 bit float to be converted to an 8 bit float (byte)\n   * @param numMantissaBits the number of mantissa bits to use in the byte, with the remainder to be used in the exponent\n   * @param zeroExp the zero-point in the range of exponent values\n   * @return the 8 bit float representation\n   */\n  public static byte floatToByte(float f, int numMantissaBits, int zeroExp) {\n    // Adjustment from a float zero exponent to our zero exponent,\n    // shifted over to our exponent position.\n    int fzero = (63-zeroExp)<<numMantissaBits;\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-numMantissaBits);\n    if (smallfloat < fzero) {\n      return (bits<=0) ?\n        (byte)0   // negative numbers and zero both map to 0 byte\n       :(byte)1;  // underflow is mapped to smallest non-zero number.\n    } else if (smallfloat >= fzero + 0x100) {\n      return -1;  // overflow maps to largest number\n    } else {\n      return (byte)(smallfloat - fzero);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}