{"path":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","pathOld":"/dev/null","sourceNew":"  public void testWildcards() throws Exception {\n    random = newRandom(System.nanoTime());\n    for (int i = 0; i < 100; i++) {\n      assertPatternHits(\"NNNN\", 1);\n      assertPatternHits(\"?NNN\", 10);\n      assertPatternHits(\"N?NN\", 10);\n      assertPatternHits(\"NN?N\", 10);\n      assertPatternHits(\"NNN?\", 10);\n    }\n    \n    for (int i = 0; i < 10; i++) {\n      assertPatternHits(\"??NN\", 100);\n      assertPatternHits(\"N??N\", 100);\n      assertPatternHits(\"NN??\", 100);\n      assertPatternHits(\"???N\", 1000);\n      assertPatternHits(\"N???\", 1000);\n      assertPatternHits(\"????\", 10000);\n      \n      assertPatternHits(\"NNN*\", 10);\n      assertPatternHits(\"NN*\", 100);\n      assertPatternHits(\"N*\", 1000);\n      assertPatternHits(\"*\", 10000);\n      \n      assertPatternHits(\"*NNN\", 10);\n      assertPatternHits(\"*NN\", 100);\n      assertPatternHits(\"*N\", 1000);\n      \n      assertPatternHits(\"N*NN\", 10);\n      assertPatternHits(\"NN*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?NN*\", 100);\n      assertPatternHits(\"N?N*\", 100);\n      assertPatternHits(\"NN?*\", 100);\n      assertPatternHits(\"?N?*\", 1000);\n      assertPatternHits(\"N??*\", 1000);\n      \n      assertPatternHits(\"*NN?\", 100);\n      assertPatternHits(\"*N??\", 1000);\n      assertPatternHits(\"*???\", 10000);\n      assertPatternHits(\"*?N?\", 1000);\n      assertPatternHits(\"*??N\", 1000);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","sourceNew":"  public void testWildcards() throws Exception {\n    random = newRandom(System.nanoTime());\n    for (int i = 0; i < 100*_TestUtil.getRandomMultiplier(); i++) {\n      assertPatternHits(\"NNNN\", 1);\n      assertPatternHits(\"?NNN\", 10);\n      assertPatternHits(\"N?NN\", 10);\n      assertPatternHits(\"NN?N\", 10);\n      assertPatternHits(\"NNN?\", 10);\n    }\n    \n    for (int i = 0; i < 10*_TestUtil.getRandomMultiplier(); i++) {\n      assertPatternHits(\"??NN\", 100);\n      assertPatternHits(\"N??N\", 100);\n      assertPatternHits(\"NN??\", 100);\n      assertPatternHits(\"???N\", 1000);\n      assertPatternHits(\"N???\", 1000);\n      assertPatternHits(\"????\", 10000);\n      \n      assertPatternHits(\"NNN*\", 10);\n      assertPatternHits(\"NN*\", 100);\n      assertPatternHits(\"N*\", 1000);\n      assertPatternHits(\"*\", 10000);\n      \n      assertPatternHits(\"*NNN\", 10);\n      assertPatternHits(\"*NN\", 100);\n      assertPatternHits(\"*N\", 1000);\n      \n      assertPatternHits(\"N*NN\", 10);\n      assertPatternHits(\"NN*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?NN*\", 100);\n      assertPatternHits(\"N?N*\", 100);\n      assertPatternHits(\"NN?*\", 100);\n      assertPatternHits(\"?N?*\", 1000);\n      assertPatternHits(\"N??*\", 1000);\n      \n      assertPatternHits(\"*NN?\", 100);\n      assertPatternHits(\"*N??\", 1000);\n      assertPatternHits(\"*???\", 10000);\n      assertPatternHits(\"*?N?\", 1000);\n      assertPatternHits(\"*??N\", 1000);\n    }\n  }\n\n","sourceOld":"  public void testWildcards() throws Exception {\n    random = newRandom(System.nanoTime());\n    for (int i = 0; i < 100; i++) {\n      assertPatternHits(\"NNNN\", 1);\n      assertPatternHits(\"?NNN\", 10);\n      assertPatternHits(\"N?NN\", 10);\n      assertPatternHits(\"NN?N\", 10);\n      assertPatternHits(\"NNN?\", 10);\n    }\n    \n    for (int i = 0; i < 10; i++) {\n      assertPatternHits(\"??NN\", 100);\n      assertPatternHits(\"N??N\", 100);\n      assertPatternHits(\"NN??\", 100);\n      assertPatternHits(\"???N\", 1000);\n      assertPatternHits(\"N???\", 1000);\n      assertPatternHits(\"????\", 10000);\n      \n      assertPatternHits(\"NNN*\", 10);\n      assertPatternHits(\"NN*\", 100);\n      assertPatternHits(\"N*\", 1000);\n      assertPatternHits(\"*\", 10000);\n      \n      assertPatternHits(\"*NNN\", 10);\n      assertPatternHits(\"*NN\", 100);\n      assertPatternHits(\"*N\", 1000);\n      \n      assertPatternHits(\"N*NN\", 10);\n      assertPatternHits(\"NN*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?NN*\", 100);\n      assertPatternHits(\"N?N*\", 100);\n      assertPatternHits(\"NN?*\", 100);\n      assertPatternHits(\"?N?*\", 1000);\n      assertPatternHits(\"N??*\", 1000);\n      \n      assertPatternHits(\"*NN?\", 100);\n      assertPatternHits(\"*N??\", 1000);\n      assertPatternHits(\"*???\", 10000);\n      assertPatternHits(\"*?N?\", 1000);\n      assertPatternHits(\"*??N\", 1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","sourceNew":"  public void testWildcards() throws Exception {;\n    for (int i = 0; i < 100*_TestUtil.getRandomMultiplier(); i++) {\n      assertPatternHits(\"NNNN\", 1);\n      assertPatternHits(\"?NNN\", 10);\n      assertPatternHits(\"N?NN\", 10);\n      assertPatternHits(\"NN?N\", 10);\n      assertPatternHits(\"NNN?\", 10);\n    }\n    \n    for (int i = 0; i < 10*_TestUtil.getRandomMultiplier(); i++) {\n      assertPatternHits(\"??NN\", 100);\n      assertPatternHits(\"N??N\", 100);\n      assertPatternHits(\"NN??\", 100);\n      assertPatternHits(\"???N\", 1000);\n      assertPatternHits(\"N???\", 1000);\n      assertPatternHits(\"????\", 10000);\n      \n      assertPatternHits(\"NNN*\", 10);\n      assertPatternHits(\"NN*\", 100);\n      assertPatternHits(\"N*\", 1000);\n      assertPatternHits(\"*\", 10000);\n      \n      assertPatternHits(\"*NNN\", 10);\n      assertPatternHits(\"*NN\", 100);\n      assertPatternHits(\"*N\", 1000);\n      \n      assertPatternHits(\"N*NN\", 10);\n      assertPatternHits(\"NN*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?NN*\", 100);\n      assertPatternHits(\"N?N*\", 100);\n      assertPatternHits(\"NN?*\", 100);\n      assertPatternHits(\"?N?*\", 1000);\n      assertPatternHits(\"N??*\", 1000);\n      \n      assertPatternHits(\"*NN?\", 100);\n      assertPatternHits(\"*N??\", 1000);\n      assertPatternHits(\"*???\", 10000);\n      assertPatternHits(\"*?N?\", 1000);\n      assertPatternHits(\"*??N\", 1000);\n    }\n  }\n\n","sourceOld":"  public void testWildcards() throws Exception {\n    random = newRandom(System.nanoTime());\n    for (int i = 0; i < 100*_TestUtil.getRandomMultiplier(); i++) {\n      assertPatternHits(\"NNNN\", 1);\n      assertPatternHits(\"?NNN\", 10);\n      assertPatternHits(\"N?NN\", 10);\n      assertPatternHits(\"NN?N\", 10);\n      assertPatternHits(\"NNN?\", 10);\n    }\n    \n    for (int i = 0; i < 10*_TestUtil.getRandomMultiplier(); i++) {\n      assertPatternHits(\"??NN\", 100);\n      assertPatternHits(\"N??N\", 100);\n      assertPatternHits(\"NN??\", 100);\n      assertPatternHits(\"???N\", 1000);\n      assertPatternHits(\"N???\", 1000);\n      assertPatternHits(\"????\", 10000);\n      \n      assertPatternHits(\"NNN*\", 10);\n      assertPatternHits(\"NN*\", 100);\n      assertPatternHits(\"N*\", 1000);\n      assertPatternHits(\"*\", 10000);\n      \n      assertPatternHits(\"*NNN\", 10);\n      assertPatternHits(\"*NN\", 100);\n      assertPatternHits(\"*N\", 1000);\n      \n      assertPatternHits(\"N*NN\", 10);\n      assertPatternHits(\"NN*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?NN*\", 100);\n      assertPatternHits(\"N?N*\", 100);\n      assertPatternHits(\"NN?*\", 100);\n      assertPatternHits(\"?N?*\", 1000);\n      assertPatternHits(\"N??*\", 1000);\n      \n      assertPatternHits(\"*NN?\", 100);\n      assertPatternHits(\"*N??\", 1000);\n      assertPatternHits(\"*???\", 10000);\n      assertPatternHits(\"*?N?\", 1000);\n      assertPatternHits(\"*??N\", 1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","sourceNew":"  public void testWildcards() throws Exception {;\n    for (int i = 0; i < 100*_TestUtil.getRandomMultiplier(); i++) {\n      assertPatternHits(\"NNNN\", 1);\n      assertPatternHits(\"?NNN\", 10);\n      assertPatternHits(\"N?NN\", 10);\n      assertPatternHits(\"NN?N\", 10);\n      assertPatternHits(\"NNN?\", 10);\n    }\n    \n    for (int i = 0; i < 10*_TestUtil.getRandomMultiplier(); i++) {\n      assertPatternHits(\"??NN\", 100);\n      assertPatternHits(\"N??N\", 100);\n      assertPatternHits(\"NN??\", 100);\n      assertPatternHits(\"???N\", 1000);\n      assertPatternHits(\"N???\", 1000);\n      assertPatternHits(\"????\", 10000);\n      \n      assertPatternHits(\"NNN*\", 10);\n      assertPatternHits(\"NN*\", 100);\n      assertPatternHits(\"N*\", 1000);\n      assertPatternHits(\"*\", 10000);\n      \n      assertPatternHits(\"*NNN\", 10);\n      assertPatternHits(\"*NN\", 100);\n      assertPatternHits(\"*N\", 1000);\n      \n      assertPatternHits(\"N*NN\", 10);\n      assertPatternHits(\"NN*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?NN*\", 100);\n      assertPatternHits(\"N?N*\", 100);\n      assertPatternHits(\"NN?*\", 100);\n      assertPatternHits(\"?N?*\", 1000);\n      assertPatternHits(\"N??*\", 1000);\n      \n      assertPatternHits(\"*NN?\", 100);\n      assertPatternHits(\"*N??\", 1000);\n      assertPatternHits(\"*???\", 10000);\n      assertPatternHits(\"*?N?\", 1000);\n      assertPatternHits(\"*??N\", 1000);\n    }\n  }\n\n","sourceOld":"  public void testWildcards() throws Exception {\n    random = newRandom(System.nanoTime());\n    for (int i = 0; i < 100*_TestUtil.getRandomMultiplier(); i++) {\n      assertPatternHits(\"NNNN\", 1);\n      assertPatternHits(\"?NNN\", 10);\n      assertPatternHits(\"N?NN\", 10);\n      assertPatternHits(\"NN?N\", 10);\n      assertPatternHits(\"NNN?\", 10);\n    }\n    \n    for (int i = 0; i < 10*_TestUtil.getRandomMultiplier(); i++) {\n      assertPatternHits(\"??NN\", 100);\n      assertPatternHits(\"N??N\", 100);\n      assertPatternHits(\"NN??\", 100);\n      assertPatternHits(\"???N\", 1000);\n      assertPatternHits(\"N???\", 1000);\n      assertPatternHits(\"????\", 10000);\n      \n      assertPatternHits(\"NNN*\", 10);\n      assertPatternHits(\"NN*\", 100);\n      assertPatternHits(\"N*\", 1000);\n      assertPatternHits(\"*\", 10000);\n      \n      assertPatternHits(\"*NNN\", 10);\n      assertPatternHits(\"*NN\", 100);\n      assertPatternHits(\"*N\", 1000);\n      \n      assertPatternHits(\"N*NN\", 10);\n      assertPatternHits(\"NN*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?NN*\", 100);\n      assertPatternHits(\"N?N*\", 100);\n      assertPatternHits(\"NN?*\", 100);\n      assertPatternHits(\"?N?*\", 1000);\n      assertPatternHits(\"N??*\", 1000);\n      \n      assertPatternHits(\"*NN?\", 100);\n      assertPatternHits(\"*N??\", 1000);\n      assertPatternHits(\"*???\", 10000);\n      assertPatternHits(\"*?N?\", 1000);\n      assertPatternHits(\"*??N\", 1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","sourceNew":"  public void testWildcards() throws Exception {;\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"NNNN\", 1);\n      assertPatternHits(\"?NNN\", 10);\n      assertPatternHits(\"N?NN\", 10);\n      assertPatternHits(\"NN?N\", 10);\n      assertPatternHits(\"NNN?\", 10);\n    }\n    \n    num = 10 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"??NN\", 100);\n      assertPatternHits(\"N??N\", 100);\n      assertPatternHits(\"NN??\", 100);\n      assertPatternHits(\"???N\", 1000);\n      assertPatternHits(\"N???\", 1000);\n      assertPatternHits(\"????\", 10000);\n      \n      assertPatternHits(\"NNN*\", 10);\n      assertPatternHits(\"NN*\", 100);\n      assertPatternHits(\"N*\", 1000);\n      assertPatternHits(\"*\", 10000);\n      \n      assertPatternHits(\"*NNN\", 10);\n      assertPatternHits(\"*NN\", 100);\n      assertPatternHits(\"*N\", 1000);\n      \n      assertPatternHits(\"N*NN\", 10);\n      assertPatternHits(\"NN*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?NN*\", 100);\n      assertPatternHits(\"N?N*\", 100);\n      assertPatternHits(\"NN?*\", 100);\n      assertPatternHits(\"?N?*\", 1000);\n      assertPatternHits(\"N??*\", 1000);\n      \n      assertPatternHits(\"*NN?\", 100);\n      assertPatternHits(\"*N??\", 1000);\n      assertPatternHits(\"*???\", 10000);\n      assertPatternHits(\"*?N?\", 1000);\n      assertPatternHits(\"*??N\", 1000);\n    }\n  }\n\n","sourceOld":"  public void testWildcards() throws Exception {;\n    for (int i = 0; i < 100*_TestUtil.getRandomMultiplier(); i++) {\n      assertPatternHits(\"NNNN\", 1);\n      assertPatternHits(\"?NNN\", 10);\n      assertPatternHits(\"N?NN\", 10);\n      assertPatternHits(\"NN?N\", 10);\n      assertPatternHits(\"NNN?\", 10);\n    }\n    \n    for (int i = 0; i < 10*_TestUtil.getRandomMultiplier(); i++) {\n      assertPatternHits(\"??NN\", 100);\n      assertPatternHits(\"N??N\", 100);\n      assertPatternHits(\"NN??\", 100);\n      assertPatternHits(\"???N\", 1000);\n      assertPatternHits(\"N???\", 1000);\n      assertPatternHits(\"????\", 10000);\n      \n      assertPatternHits(\"NNN*\", 10);\n      assertPatternHits(\"NN*\", 100);\n      assertPatternHits(\"N*\", 1000);\n      assertPatternHits(\"*\", 10000);\n      \n      assertPatternHits(\"*NNN\", 10);\n      assertPatternHits(\"*NN\", 100);\n      assertPatternHits(\"*N\", 1000);\n      \n      assertPatternHits(\"N*NN\", 10);\n      assertPatternHits(\"NN*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?NN*\", 100);\n      assertPatternHits(\"N?N*\", 100);\n      assertPatternHits(\"NN?*\", 100);\n      assertPatternHits(\"?N?*\", 1000);\n      assertPatternHits(\"N??*\", 1000);\n      \n      assertPatternHits(\"*NN?\", 100);\n      assertPatternHits(\"*N??\", 1000);\n      assertPatternHits(\"*???\", 10000);\n      assertPatternHits(\"*?N?\", 1000);\n      assertPatternHits(\"*??N\", 1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","sourceNew":"  public void testWildcards() throws Exception {;\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"NNNN\", 1);\n      assertPatternHits(\"?NNN\", 10);\n      assertPatternHits(\"N?NN\", 10);\n      assertPatternHits(\"NN?N\", 10);\n      assertPatternHits(\"NNN?\", 10);\n    }\n    \n    num = 10 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"??NN\", 100);\n      assertPatternHits(\"N??N\", 100);\n      assertPatternHits(\"NN??\", 100);\n      assertPatternHits(\"???N\", 1000);\n      assertPatternHits(\"N???\", 1000);\n      assertPatternHits(\"????\", 10000);\n      \n      assertPatternHits(\"NNN*\", 10);\n      assertPatternHits(\"NN*\", 100);\n      assertPatternHits(\"N*\", 1000);\n      assertPatternHits(\"*\", 10000);\n      \n      assertPatternHits(\"*NNN\", 10);\n      assertPatternHits(\"*NN\", 100);\n      assertPatternHits(\"*N\", 1000);\n      \n      assertPatternHits(\"N*NN\", 10);\n      assertPatternHits(\"NN*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?NN*\", 100);\n      assertPatternHits(\"N?N*\", 100);\n      assertPatternHits(\"NN?*\", 100);\n      assertPatternHits(\"?N?*\", 1000);\n      assertPatternHits(\"N??*\", 1000);\n      \n      assertPatternHits(\"*NN?\", 100);\n      assertPatternHits(\"*N??\", 1000);\n      assertPatternHits(\"*???\", 10000);\n      assertPatternHits(\"*?N?\", 1000);\n      assertPatternHits(\"*??N\", 1000);\n    }\n  }\n\n","sourceOld":"  public void testWildcards() throws Exception {;\n    for (int i = 0; i < 100*_TestUtil.getRandomMultiplier(); i++) {\n      assertPatternHits(\"NNNN\", 1);\n      assertPatternHits(\"?NNN\", 10);\n      assertPatternHits(\"N?NN\", 10);\n      assertPatternHits(\"NN?N\", 10);\n      assertPatternHits(\"NNN?\", 10);\n    }\n    \n    for (int i = 0; i < 10*_TestUtil.getRandomMultiplier(); i++) {\n      assertPatternHits(\"??NN\", 100);\n      assertPatternHits(\"N??N\", 100);\n      assertPatternHits(\"NN??\", 100);\n      assertPatternHits(\"???N\", 1000);\n      assertPatternHits(\"N???\", 1000);\n      assertPatternHits(\"????\", 10000);\n      \n      assertPatternHits(\"NNN*\", 10);\n      assertPatternHits(\"NN*\", 100);\n      assertPatternHits(\"N*\", 1000);\n      assertPatternHits(\"*\", 10000);\n      \n      assertPatternHits(\"*NNN\", 10);\n      assertPatternHits(\"*NN\", 100);\n      assertPatternHits(\"*N\", 1000);\n      \n      assertPatternHits(\"N*NN\", 10);\n      assertPatternHits(\"NN*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?NN*\", 100);\n      assertPatternHits(\"N?N*\", 100);\n      assertPatternHits(\"NN?*\", 100);\n      assertPatternHits(\"?N?*\", 1000);\n      assertPatternHits(\"N??*\", 1000);\n      \n      assertPatternHits(\"*NN?\", 100);\n      assertPatternHits(\"*N??\", 1000);\n      assertPatternHits(\"*???\", 10000);\n      assertPatternHits(\"*?N?\", 1000);\n      assertPatternHits(\"*??N\", 1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cca56866c19997e28ef073622656669c15210540","date":1307449014,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","sourceNew":"  public void testWildcards() throws Exception {;\n    int num = (TEST_NIGHTLY ? 100 : 1) * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"NNN\", 1);\n      assertPatternHits(\"?NN\", 10);\n      assertPatternHits(\"N?N\", 10);\n      assertPatternHits(\"NN?\", 10);\n    }\n    \n    num = (TEST_NIGHTLY ? 10 : 1) * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"??N\", 100);\n      assertPatternHits(\"N??\", 100);\n      assertPatternHits(\"???\", 1000);\n      \n      assertPatternHits(\"NN*\", 10);\n      assertPatternHits(\"N*\", 100);\n      assertPatternHits(\"*\", 1000);\n      \n      assertPatternHits(\"*NN\", 10);\n      assertPatternHits(\"*N\", 100);\n      \n      assertPatternHits(\"N*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?N*\", 100);\n      assertPatternHits(\"N?*\", 100);\n      \n      assertPatternHits(\"*N?\", 100);\n      assertPatternHits(\"*??\", 1000);\n      assertPatternHits(\"*?N\", 100);\n    }\n  }\n\n","sourceOld":"  public void testWildcards() throws Exception {;\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"NNNN\", 1);\n      assertPatternHits(\"?NNN\", 10);\n      assertPatternHits(\"N?NN\", 10);\n      assertPatternHits(\"NN?N\", 10);\n      assertPatternHits(\"NNN?\", 10);\n    }\n    \n    num = 10 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"??NN\", 100);\n      assertPatternHits(\"N??N\", 100);\n      assertPatternHits(\"NN??\", 100);\n      assertPatternHits(\"???N\", 1000);\n      assertPatternHits(\"N???\", 1000);\n      assertPatternHits(\"????\", 10000);\n      \n      assertPatternHits(\"NNN*\", 10);\n      assertPatternHits(\"NN*\", 100);\n      assertPatternHits(\"N*\", 1000);\n      assertPatternHits(\"*\", 10000);\n      \n      assertPatternHits(\"*NNN\", 10);\n      assertPatternHits(\"*NN\", 100);\n      assertPatternHits(\"*N\", 1000);\n      \n      assertPatternHits(\"N*NN\", 10);\n      assertPatternHits(\"NN*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?NN*\", 100);\n      assertPatternHits(\"N?N*\", 100);\n      assertPatternHits(\"NN?*\", 100);\n      assertPatternHits(\"?N?*\", 1000);\n      assertPatternHits(\"N??*\", 1000);\n      \n      assertPatternHits(\"*NN?\", 100);\n      assertPatternHits(\"*N??\", 1000);\n      assertPatternHits(\"*???\", 10000);\n      assertPatternHits(\"*?N?\", 1000);\n      assertPatternHits(\"*??N\", 1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","sourceNew":"  public void testWildcards() throws Exception {;\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"NNN\", 1);\n      assertPatternHits(\"?NN\", 10);\n      assertPatternHits(\"N?N\", 10);\n      assertPatternHits(\"NN?\", 10);\n    }\n    \n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"??N\", 100);\n      assertPatternHits(\"N??\", 100);\n      assertPatternHits(\"???\", 1000);\n      \n      assertPatternHits(\"NN*\", 10);\n      assertPatternHits(\"N*\", 100);\n      assertPatternHits(\"*\", 1000);\n      \n      assertPatternHits(\"*NN\", 10);\n      assertPatternHits(\"*N\", 100);\n      \n      assertPatternHits(\"N*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?N*\", 100);\n      assertPatternHits(\"N?*\", 100);\n      \n      assertPatternHits(\"*N?\", 100);\n      assertPatternHits(\"*??\", 1000);\n      assertPatternHits(\"*?N\", 100);\n    }\n  }\n\n","sourceOld":"  public void testWildcards() throws Exception {;\n    int num = (TEST_NIGHTLY ? 100 : 1) * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"NNN\", 1);\n      assertPatternHits(\"?NN\", 10);\n      assertPatternHits(\"N?N\", 10);\n      assertPatternHits(\"NN?\", 10);\n    }\n    \n    num = (TEST_NIGHTLY ? 10 : 1) * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"??N\", 100);\n      assertPatternHits(\"N??\", 100);\n      assertPatternHits(\"???\", 1000);\n      \n      assertPatternHits(\"NN*\", 10);\n      assertPatternHits(\"N*\", 100);\n      assertPatternHits(\"*\", 1000);\n      \n      assertPatternHits(\"*NN\", 10);\n      assertPatternHits(\"*N\", 100);\n      \n      assertPatternHits(\"N*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?N*\", 100);\n      assertPatternHits(\"N?*\", 100);\n      \n      assertPatternHits(\"*N?\", 100);\n      assertPatternHits(\"*??\", 1000);\n      assertPatternHits(\"*?N\", 100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","sourceNew":"  public void testWildcards() throws Exception {;\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"NNN\", 1);\n      assertPatternHits(\"?NN\", 10);\n      assertPatternHits(\"N?N\", 10);\n      assertPatternHits(\"NN?\", 10);\n    }\n    \n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"??N\", 100);\n      assertPatternHits(\"N??\", 100);\n      assertPatternHits(\"???\", 1000);\n      \n      assertPatternHits(\"NN*\", 10);\n      assertPatternHits(\"N*\", 100);\n      assertPatternHits(\"*\", 1000);\n      \n      assertPatternHits(\"*NN\", 10);\n      assertPatternHits(\"*N\", 100);\n      \n      assertPatternHits(\"N*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?N*\", 100);\n      assertPatternHits(\"N?*\", 100);\n      \n      assertPatternHits(\"*N?\", 100);\n      assertPatternHits(\"*??\", 1000);\n      assertPatternHits(\"*?N\", 100);\n    }\n  }\n\n","sourceOld":"  public void testWildcards() throws Exception {;\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"NNNN\", 1);\n      assertPatternHits(\"?NNN\", 10);\n      assertPatternHits(\"N?NN\", 10);\n      assertPatternHits(\"NN?N\", 10);\n      assertPatternHits(\"NNN?\", 10);\n    }\n    \n    num = 10 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"??NN\", 100);\n      assertPatternHits(\"N??N\", 100);\n      assertPatternHits(\"NN??\", 100);\n      assertPatternHits(\"???N\", 1000);\n      assertPatternHits(\"N???\", 1000);\n      assertPatternHits(\"????\", 10000);\n      \n      assertPatternHits(\"NNN*\", 10);\n      assertPatternHits(\"NN*\", 100);\n      assertPatternHits(\"N*\", 1000);\n      assertPatternHits(\"*\", 10000);\n      \n      assertPatternHits(\"*NNN\", 10);\n      assertPatternHits(\"*NN\", 100);\n      assertPatternHits(\"*N\", 1000);\n      \n      assertPatternHits(\"N*NN\", 10);\n      assertPatternHits(\"NN*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?NN*\", 100);\n      assertPatternHits(\"N?N*\", 100);\n      assertPatternHits(\"NN?*\", 100);\n      assertPatternHits(\"?N?*\", 1000);\n      assertPatternHits(\"N??*\", 1000);\n      \n      assertPatternHits(\"*NN?\", 100);\n      assertPatternHits(\"*N??\", 1000);\n      assertPatternHits(\"*???\", 10000);\n      assertPatternHits(\"*?N?\", 1000);\n      assertPatternHits(\"*??N\", 1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","sourceNew":"  public void testWildcards() throws Exception {;\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"NNN\", 1);\n      assertPatternHits(\"?NN\", 10);\n      assertPatternHits(\"N?N\", 10);\n      assertPatternHits(\"NN?\", 10);\n    }\n    \n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"??N\", 100);\n      assertPatternHits(\"N??\", 100);\n      assertPatternHits(\"???\", 1000);\n      \n      assertPatternHits(\"NN*\", 10);\n      assertPatternHits(\"N*\", 100);\n      assertPatternHits(\"*\", 1000);\n      \n      assertPatternHits(\"*NN\", 10);\n      assertPatternHits(\"*N\", 100);\n      \n      assertPatternHits(\"N*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?N*\", 100);\n      assertPatternHits(\"N?*\", 100);\n      \n      assertPatternHits(\"*N?\", 100);\n      assertPatternHits(\"*??\", 1000);\n      assertPatternHits(\"*?N\", 100);\n    }\n  }\n\n","sourceOld":"  public void testWildcards() throws Exception {;\n    int num = 100 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"NNNN\", 1);\n      assertPatternHits(\"?NNN\", 10);\n      assertPatternHits(\"N?NN\", 10);\n      assertPatternHits(\"NN?N\", 10);\n      assertPatternHits(\"NNN?\", 10);\n    }\n    \n    num = 10 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"??NN\", 100);\n      assertPatternHits(\"N??N\", 100);\n      assertPatternHits(\"NN??\", 100);\n      assertPatternHits(\"???N\", 1000);\n      assertPatternHits(\"N???\", 1000);\n      assertPatternHits(\"????\", 10000);\n      \n      assertPatternHits(\"NNN*\", 10);\n      assertPatternHits(\"NN*\", 100);\n      assertPatternHits(\"N*\", 1000);\n      assertPatternHits(\"*\", 10000);\n      \n      assertPatternHits(\"*NNN\", 10);\n      assertPatternHits(\"*NN\", 100);\n      assertPatternHits(\"*N\", 1000);\n      \n      assertPatternHits(\"N*NN\", 10);\n      assertPatternHits(\"NN*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?NN*\", 100);\n      assertPatternHits(\"N?N*\", 100);\n      assertPatternHits(\"NN?*\", 100);\n      assertPatternHits(\"?N?*\", 1000);\n      assertPatternHits(\"N??*\", 1000);\n      \n      assertPatternHits(\"*NN?\", 100);\n      assertPatternHits(\"*N??\", 1000);\n      assertPatternHits(\"*???\", 10000);\n      assertPatternHits(\"*?N?\", 1000);\n      assertPatternHits(\"*??N\", 1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#testWildcards().mjava","sourceNew":"  public void testWildcards() throws Exception {;\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"NNN\", 1);\n      assertPatternHits(\"?NN\", 10);\n      assertPatternHits(\"N?N\", 10);\n      assertPatternHits(\"NN?\", 10);\n    }\n    \n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"??N\", 100);\n      assertPatternHits(\"N??\", 100);\n      assertPatternHits(\"???\", 1000);\n      \n      assertPatternHits(\"NN*\", 10);\n      assertPatternHits(\"N*\", 100);\n      assertPatternHits(\"*\", 1000);\n      \n      assertPatternHits(\"*NN\", 10);\n      assertPatternHits(\"*N\", 100);\n      \n      assertPatternHits(\"N*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?N*\", 100);\n      assertPatternHits(\"N?*\", 100);\n      \n      assertPatternHits(\"*N?\", 100);\n      assertPatternHits(\"*??\", 1000);\n      assertPatternHits(\"*?N\", 100);\n    }\n  }\n\n","sourceOld":"  public void testWildcards() throws Exception {;\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"NNN\", 1);\n      assertPatternHits(\"?NN\", 10);\n      assertPatternHits(\"N?N\", 10);\n      assertPatternHits(\"NN?\", 10);\n    }\n    \n    for (int i = 0; i < num; i++) {\n      assertPatternHits(\"??N\", 100);\n      assertPatternHits(\"N??\", 100);\n      assertPatternHits(\"???\", 1000);\n      \n      assertPatternHits(\"NN*\", 10);\n      assertPatternHits(\"N*\", 100);\n      assertPatternHits(\"*\", 1000);\n      \n      assertPatternHits(\"*NN\", 10);\n      assertPatternHits(\"*N\", 100);\n      \n      assertPatternHits(\"N*N\", 10);\n      \n      // combo of ? and * operators\n      assertPatternHits(\"?N*\", 100);\n      assertPatternHits(\"N?*\", 100);\n      \n      assertPatternHits(\"*N?\", 100);\n      assertPatternHits(\"*??\", 1000);\n      assertPatternHits(\"*?N\", 100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["c084e47df29de3330311d69dabf515ceaa989512"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["cca56866c19997e28ef073622656669c15210540"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2aafd88401639311b0404e67c94e829e123a0e45":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"5f4e87790277826a2aea119328600dfb07761f32":["2aafd88401639311b0404e67c94e829e123a0e45","c084e47df29de3330311d69dabf515ceaa989512"],"c084e47df29de3330311d69dabf515ceaa989512":["2aafd88401639311b0404e67c94e829e123a0e45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","f83af14a2a8131b14d7aee6274c740334e0363d3"],"cca56866c19997e28ef073622656669c15210540":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3242a09f703274d3b9283f2064a1a33064b53a1b","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cca56866c19997e28ef073622656669c15210540"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3242a09f703274d3b9283f2064a1a33064b53a1b":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["2aafd88401639311b0404e67c94e829e123a0e45"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"2aafd88401639311b0404e67c94e829e123a0e45":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"c084e47df29de3330311d69dabf515ceaa989512":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"cca56866c19997e28ef073622656669c15210540":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3242a09f703274d3b9283f2064a1a33064b53a1b","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}