{"path":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"/dev/null","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    ((LogDocMergePolicy) writer.getMergePolicy()).setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    assertEquals(0, cms.getExceptions().size());\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe","290c401c31db375e771805c3ba7ac5f64c7370dc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4","date":1190750527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    assertEquals(0, cms.getExceptions().size());\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    ((LogDocMergePolicy) writer.getMergePolicy()).setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    assertEquals(0, cms.getExceptions().size());\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"290c401c31db375e771805c3ba7ac5f64c7370dc","date":1192034795,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    assertEquals(0, cms.getExceptions().size());\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.UN_TOKENIZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, true, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13eaef7d286f35b5c850a1c2eb7b337679aa6453","date":1249118545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, true, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, true, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, true, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, true, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, true, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, true, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, true, ANALYZER, true);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.flush();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"0a046c0c310bc77931fc8441bd920053b607dd14":["13eaef7d286f35b5c850a1c2eb7b337679aa6453","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["87c966e9308847938a7c905c2e46a56d8df788b8"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"290c401c31db375e771805c3ba7ac5f64c7370dc":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"87c966e9308847938a7c905c2e46a56d8df788b8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"0a046c0c310bc77931fc8441bd920053b607dd14":["87c966e9308847938a7c905c2e46a56d8df788b8"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"290c401c31db375e771805c3ba7ac5f64c7370dc":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"87c966e9308847938a7c905c2e46a56d8df788b8":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}