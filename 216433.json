{"path":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF32(BytesRef,IntsRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF32(BytesRef,IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF32(BytesRef,IntsRef).mjava","sourceNew":"  // TODO: broken if incoming result.offset != 0\n  public static void UTF8toUTF32(final BytesRef utf8, final IntsRef utf32) {\n    // pre-alloc for worst case\n    // TODO: ints cannot be null, should be an assert\n    if (utf32.ints == null || utf32.ints.length < utf8.length) {\n      utf32.ints = new int[utf8.length];\n    }\n    int utf32Count = 0;\n    int utf8Upto = utf8.offset;\n    final int[] ints = utf32.ints;\n    final byte[] bytes = utf8.bytes;\n    final int utf8Limit = utf8.offset + utf8.length;\n    while(utf8Upto < utf8Limit) {\n      final int numBytes = utf8CodeLength[bytes[utf8Upto]&0xFF];\n      int v = 0;\n      switch(numBytes) {\n      case 1:\n        ints[utf32Count++] = bytes[utf8Upto++];\n        continue;\n      case 2:\n        // 5 useful bits\n        v = bytes[utf8Upto++] & 31;\n        break;\n      case 3:\n        // 4 useful bits\n        v = bytes[utf8Upto++] & 15;\n        break;\n      case 4:\n        // 3 useful bits\n        v = bytes[utf8Upto++] & 7;\n        break;\n      default :\n        throw new IllegalStateException(\"invalid utf8\");\n      }\n\n      final int limit = utf8Upto + numBytes-1;\n\n      while(utf8Upto < limit) {\n        v = v << 6 | bytes[utf8Upto++]&63;\n      }\n      ints[utf32Count++] = v;\n    }\n    \n    utf32.offset = 0;\n    utf32.length = utf32Count;\n  }\n\n","sourceOld":"  // TODO: broken if incoming result.offset != 0\n  public static void UTF8toUTF32(final BytesRef utf8, final IntsRef utf32) {\n    // pre-alloc for worst case\n    // TODO: ints cannot be null, should be an assert\n    if (utf32.ints == null || utf32.ints.length < utf8.length) {\n      utf32.ints = new int[utf8.length];\n    }\n    int utf32Count = 0;\n    int utf8Upto = utf8.offset;\n    final int[] ints = utf32.ints;\n    final byte[] bytes = utf8.bytes;\n    final int utf8Limit = utf8.offset + utf8.length;\n    while(utf8Upto < utf8Limit) {\n      final int numBytes = utf8CodeLength[bytes[utf8Upto]&0xFF];\n      int v = 0;\n      switch(numBytes) {\n      case 1:\n        ints[utf32Count++] = bytes[utf8Upto++];\n        continue;\n      case 2:\n        // 5 useful bits\n        v = bytes[utf8Upto++] & 31;\n        break;\n      case 3:\n        // 4 useful bits\n        v = bytes[utf8Upto++] & 15;\n        break;\n      case 4:\n        // 3 useful bits\n        v = bytes[utf8Upto++] & 7;\n        break;\n      default :\n        throw new IllegalStateException(\"invalid utf8\");\n      }\n\n      final int limit = utf8Upto + numBytes-1;\n\n      while(utf8Upto < limit) {\n        v = v << 6 | bytes[utf8Upto++]&63;\n      }\n      ints[utf32Count++] = v;\n    }\n    \n    utf32.offset = 0;\n    utf32.length = utf32Count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb445c22e37e9fe48d0efed781537ca5cc5696d","date":1364460154,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF32(BytesRef,IntsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF32(BytesRef,IntsRef).mjava","sourceNew":"  /**\n   * <p>This method assumes valid UTF8 input. This method \n   * <strong>does not perform</strong> full UTF8 validation, it will check only the \n   * first byte of each codepoint (for multi-byte sequences any bytes after \n   * the head are skipped).  \n   * \n   * @throws IllegalArgumentException If invalid codepoint header byte occurs or the \n   *    content is prematurely truncated.\n   */\n  public static void UTF8toUTF32(final BytesRef utf8, final IntsRef utf32) {\n    // TODO: broken if incoming result.offset != 0\n    // pre-alloc for worst case\n    // TODO: ints cannot be null, should be an assert\n    if (utf32.ints == null || utf32.ints.length < utf8.length) {\n      utf32.ints = new int[utf8.length];\n    }\n    int utf32Count = 0;\n    int utf8Upto = utf8.offset;\n    final int[] ints = utf32.ints;\n    final byte[] bytes = utf8.bytes;\n    final int utf8Limit = utf8.offset + utf8.length;\n    while(utf8Upto < utf8Limit) {\n      final int numBytes = utf8CodeLength[bytes[utf8Upto] & 0xFF];\n      int v = 0;\n      switch(numBytes) {\n      case 1:\n        ints[utf32Count++] = bytes[utf8Upto++];\n        continue;\n      case 2:\n        // 5 useful bits\n        v = bytes[utf8Upto++] & 31;\n        break;\n      case 3:\n        // 4 useful bits\n        v = bytes[utf8Upto++] & 15;\n        break;\n      case 4:\n        // 3 useful bits\n        v = bytes[utf8Upto++] & 7;\n        break;\n      default :\n        throw new IllegalArgumentException(\"invalid utf8\");\n      }\n\n      // TODO: this may read past utf8's limit.\n      final int limit = utf8Upto + numBytes-1;\n      while(utf8Upto < limit) {\n        v = v << 6 | bytes[utf8Upto++]&63;\n      }\n      ints[utf32Count++] = v;\n    }\n    \n    utf32.offset = 0;\n    utf32.length = utf32Count;\n  }\n\n","sourceOld":"  // TODO: broken if incoming result.offset != 0\n  public static void UTF8toUTF32(final BytesRef utf8, final IntsRef utf32) {\n    // pre-alloc for worst case\n    // TODO: ints cannot be null, should be an assert\n    if (utf32.ints == null || utf32.ints.length < utf8.length) {\n      utf32.ints = new int[utf8.length];\n    }\n    int utf32Count = 0;\n    int utf8Upto = utf8.offset;\n    final int[] ints = utf32.ints;\n    final byte[] bytes = utf8.bytes;\n    final int utf8Limit = utf8.offset + utf8.length;\n    while(utf8Upto < utf8Limit) {\n      final int numBytes = utf8CodeLength[bytes[utf8Upto]&0xFF];\n      int v = 0;\n      switch(numBytes) {\n      case 1:\n        ints[utf32Count++] = bytes[utf8Upto++];\n        continue;\n      case 2:\n        // 5 useful bits\n        v = bytes[utf8Upto++] & 31;\n        break;\n      case 3:\n        // 4 useful bits\n        v = bytes[utf8Upto++] & 15;\n        break;\n      case 4:\n        // 3 useful bits\n        v = bytes[utf8Upto++] & 7;\n        break;\n      default :\n        throw new IllegalStateException(\"invalid utf8\");\n      }\n\n      final int limit = utf8Upto + numBytes-1;\n\n      while(utf8Upto < limit) {\n        v = v << 6 | bytes[utf8Upto++]&63;\n      }\n      ints[utf32Count++] = v;\n    }\n    \n    utf32.offset = 0;\n    utf32.length = utf32Count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF32(BytesRef,int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF32(BytesRef,IntsRef).mjava","sourceNew":"  /**\n   * <p>This method assumes valid UTF8 input. This method \n   * <strong>does not perform</strong> full UTF8 validation, it will check only the \n   * first byte of each codepoint (for multi-byte sequences any bytes after \n   * the head are skipped). It is the responsibility of the caller to make sure\n   * that the destination array is large enough.\n   * \n   * @throws IllegalArgumentException If invalid codepoint header byte occurs or the \n   *    content is prematurely truncated.\n   */\n  public static int UTF8toUTF32(final BytesRef utf8, final int[] ints) {\n    // TODO: ints cannot be null, should be an assert\n    int utf32Count = 0;\n    int utf8Upto = utf8.offset;\n    final byte[] bytes = utf8.bytes;\n    final int utf8Limit = utf8.offset + utf8.length;\n    while(utf8Upto < utf8Limit) {\n      final int numBytes = utf8CodeLength[bytes[utf8Upto] & 0xFF];\n      int v = 0;\n      switch(numBytes) {\n      case 1:\n        ints[utf32Count++] = bytes[utf8Upto++];\n        continue;\n      case 2:\n        // 5 useful bits\n        v = bytes[utf8Upto++] & 31;\n        break;\n      case 3:\n        // 4 useful bits\n        v = bytes[utf8Upto++] & 15;\n        break;\n      case 4:\n        // 3 useful bits\n        v = bytes[utf8Upto++] & 7;\n        break;\n      default :\n        throw new IllegalArgumentException(\"invalid utf8\");\n      }\n\n      // TODO: this may read past utf8's limit.\n      final int limit = utf8Upto + numBytes-1;\n      while(utf8Upto < limit) {\n        v = v << 6 | bytes[utf8Upto++]&63;\n      }\n      ints[utf32Count++] = v;\n    }\n    \n    return utf32Count;\n  }\n\n","sourceOld":"  /**\n   * <p>This method assumes valid UTF8 input. This method \n   * <strong>does not perform</strong> full UTF8 validation, it will check only the \n   * first byte of each codepoint (for multi-byte sequences any bytes after \n   * the head are skipped).  \n   * \n   * @throws IllegalArgumentException If invalid codepoint header byte occurs or the \n   *    content is prematurely truncated.\n   */\n  public static void UTF8toUTF32(final BytesRef utf8, final IntsRef utf32) {\n    // TODO: broken if incoming result.offset != 0\n    // pre-alloc for worst case\n    // TODO: ints cannot be null, should be an assert\n    if (utf32.ints == null || utf32.ints.length < utf8.length) {\n      utf32.ints = new int[utf8.length];\n    }\n    int utf32Count = 0;\n    int utf8Upto = utf8.offset;\n    final int[] ints = utf32.ints;\n    final byte[] bytes = utf8.bytes;\n    final int utf8Limit = utf8.offset + utf8.length;\n    while(utf8Upto < utf8Limit) {\n      final int numBytes = utf8CodeLength[bytes[utf8Upto] & 0xFF];\n      int v = 0;\n      switch(numBytes) {\n      case 1:\n        ints[utf32Count++] = bytes[utf8Upto++];\n        continue;\n      case 2:\n        // 5 useful bits\n        v = bytes[utf8Upto++] & 31;\n        break;\n      case 3:\n        // 4 useful bits\n        v = bytes[utf8Upto++] & 15;\n        break;\n      case 4:\n        // 3 useful bits\n        v = bytes[utf8Upto++] & 7;\n        break;\n      default :\n        throw new IllegalArgumentException(\"invalid utf8\");\n      }\n\n      // TODO: this may read past utf8's limit.\n      final int limit = utf8Upto + numBytes-1;\n      while(utf8Upto < limit) {\n        v = v << 6 | bytes[utf8Upto++]&63;\n      }\n      ints[utf32Count++] = v;\n    }\n    \n    utf32.offset = 0;\n    utf32.length = utf32Count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb445c22e37e9fe48d0efed781537ca5cc5696d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["5eb445c22e37e9fe48d0efed781537ca5cc5696d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"5eb445c22e37e9fe48d0efed781537ca5cc5696d":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5eb445c22e37e9fe48d0efed781537ca5cc5696d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}