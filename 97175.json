{"path":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int freqCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with freqCutoff=\" + freqCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                      state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      postingsReader,\n                                                      state.readBufferSize,\n                                                      BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                      termsCacheSize,\n                                                      state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c58b50677b74bb699dcf17b44c13ea6bb644c95b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int freqCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with freqCutoff=\" + freqCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                      state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      postingsReader,\n                                                      state.readBufferSize,\n                                                      BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                      termsCacheSize,\n                                                      state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d53c3f769ca0f9e7434937b792877770271aecf","date":1294785129,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                      state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      postingsReader,\n                                                      state.readBufferSize,\n                                                      BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                      termsCacheSize,\n                                                      state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int freqCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with freqCutoff=\" + freqCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                      state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      postingsReader,\n                                                      state.readBufferSize,\n                                                      BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                      termsCacheSize,\n                                                      state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                      state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      postingsReader,\n                                                      state.readBufferSize,\n                                                      BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                      termsCacheSize,\n                                                      state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                      state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      postingsReader,\n                                                      state.readBufferSize,\n                                                      BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                      termsCacheSize,\n                                                      state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                      state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      postingsReader,\n                                                      state.readBufferSize,\n                                                      BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                      termsCacheSize,\n                                                      state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f3256444578be405b4ed2ca10bb2b40153586443","date":1296192335,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c58b50677b74bb699dcf17b44c13ea6bb644c95b","date":1296256342,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":["56da903869515527852ee21ea7ef7bfe414cd40d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int freqCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with freqCutoff=\" + freqCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                      state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      postingsReader,\n                                                      state.readBufferSize,\n                                                      BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                      termsCacheSize,\n                                                      state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: reading from seg=\" + state.segmentInfo.name + \" seed=\" + seed);\n    }\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n\n    if (random.nextBoolean()) {\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockIntStreamFactory(random), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        // if termsIndexDivisor is set to -1, we should not touch it. It means a\n        // test explicitly instructed not to load the terms index.\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        if (state.termsIndexDivisor != -1) {\n          state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        }\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, SEED_EXT);\n    final IndexInput in = state.dir.openInput(seedFileName);\n    final long seed = in.readLong();\n    in.close();\n\n    final Random random = new Random(seed);\n    PostingsReaderBase postingsReader;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockSep postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockSingleIntFactory(), state.codecId);\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockFixedIntBlockCodec.MockIntFactory(blockSize), state.codecId);\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsReader = new SepPostingsReaderImpl(state.dir, state.segmentInfo,\n                                                 state.readBufferSize, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize), state.codecId);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading Standard postings\");\n      }\n      postingsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: reading pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsReader = new PulsingPostingsReaderImpl(postingsReader);\n    }\n\n    final TermsIndexReaderBase indexReader;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n      } else {\n        final int n2 = random.nextInt(3);\n        if (n2 == 1) {\n          random.nextInt();\n        } else if (n2 == 2) {\n          random.nextLong();\n        }\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: variable-gap terms index (divisor=\" + state.termsIndexDivisor + \")\");\n        }\n        state.termsIndexDivisor = _TestUtil.nextInt(random, 1, 10);\n        indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                      state.fieldInfos,\n                                                      state.segmentInfo.name,\n                                                      state.termsIndexDivisor,\n                                                      state.codecId);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    final int termsCacheSize = _TestUtil.nextInt(random, 1, 1024);\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                termsCacheSize,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["3d53c3f769ca0f9e7434937b792877770271aecf"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","b1add9ddc0005b07550d4350720aac22dc9886b3"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["c58b50677b74bb699dcf17b44c13ea6bb644c95b"],"56da903869515527852ee21ea7ef7bfe414cd40d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3256444578be405b4ed2ca10bb2b40153586443":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"3d53c3f769ca0f9e7434937b792877770271aecf":["56da903869515527852ee21ea7ef7bfe414cd40d"],"c58b50677b74bb699dcf17b44c13ea6bb644c95b":["f3256444578be405b4ed2ca10bb2b40153586443"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d53c3f769ca0f9e7434937b792877770271aecf"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["e79a6d080bdd5b2a8f56342cf571b5476de04180","f3256444578be405b4ed2ca10bb2b40153586443"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","3d53c3f769ca0f9e7434937b792877770271aecf"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"f3256444578be405b4ed2ca10bb2b40153586443":["c58b50677b74bb699dcf17b44c13ea6bb644c95b"],"3d53c3f769ca0f9e7434937b792877770271aecf":["b1add9ddc0005b07550d4350720aac22dc9886b3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c58b50677b74bb699dcf17b44c13ea6bb644c95b":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}