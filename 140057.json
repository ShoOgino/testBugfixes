{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#lookup(CharSequence,Set[BytesRef],boolean,int).mjava","commits":[{"id":"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","date":1395588343,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#lookup(CharSequence,Set[BytesRef],boolean,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#lookup(CharSequence,boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, Set<BytesRef> contexts, boolean onlyMorePopular, int num) {\n    if (contexts != null) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    List<LookupResult> res = new ArrayList<>();\n    if (list == null || list.size() == 0) {\n      return res;\n    }\n    int maxCnt = Math.min(num, list.size());\n    if (onlyMorePopular) {\n      LookupPriorityQueue queue = new LookupPriorityQueue(num);\n      \n      for (TernaryTreeNode ttn : list) {\n        queue.insertWithOverflow(new LookupResult(ttn.token, ((Number)ttn.val).longValue()));\n      }\n      for (LookupResult lr : queue.getResults()) {\n        res.add(lr);\n      }\n    } else {\n      for (int i = 0; i < maxCnt; i++) {\n        TernaryTreeNode ttn = list.get(i);\n        res.add(new LookupResult(ttn.token, ((Number)ttn.val).longValue()));\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    List<LookupResult> res = new ArrayList<>();\n    if (list == null || list.size() == 0) {\n      return res;\n    }\n    int maxCnt = Math.min(num, list.size());\n    if (onlyMorePopular) {\n      LookupPriorityQueue queue = new LookupPriorityQueue(num);\n      \n      for (TernaryTreeNode ttn : list) {\n        queue.insertWithOverflow(new LookupResult(ttn.token, ((Number)ttn.val).longValue()));\n      }\n      for (LookupResult lr : queue.getResults()) {\n        res.add(lr);\n      }\n    } else {\n      for (int i = 0; i < maxCnt; i++) {\n        TernaryTreeNode ttn = list.get(i);\n        res.add(new LookupResult(ttn.token, ((Number)ttn.val).longValue()));\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"]},"commit2Childs":{"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}