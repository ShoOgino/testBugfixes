{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testScoring().mjava","commits":[{"id":"e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0","date":1354615545,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testScoring().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testScoring() throws IOException {\n    // verify that drill-down queries do not modify scores\n    IndexSearcher searcher = newSearcher(reader);\n\n    float[] scores = new float[reader.maxDoc()];\n    \n    Query q = new TermQuery(new Term(\"content\", \"foo\"));\n    TopDocs docs = searcher.search(q, reader.maxDoc()); // fetch all available docs to this query\n    for (ScoreDoc sd : docs.scoreDocs) {\n      scores[sd.doc] = sd.score;\n    }\n    \n    // create a drill-down query with category \"a\", scores should not change\n    q = DrillDown.query(defaultParams, q, new CategoryPath(\"a\"));\n    docs = searcher.search(q, reader.maxDoc()); // fetch all available docs to this query\n    for (ScoreDoc sd : docs.scoreDocs) {\n      assertEquals(\"score of doc=\" + sd.doc + \" modified\", scores[sd.doc], sd.score, 0f);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testScoring().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testScoring() throws IOException {\n    // verify that drill-down queries do not modify scores\n    IndexSearcher searcher = newSearcher(reader);\n\n    float[] scores = new float[reader.maxDoc()];\n    \n    Query q = new TermQuery(new Term(\"content\", \"foo\"));\n    TopDocs docs = searcher.search(q, reader.maxDoc()); // fetch all available docs to this query\n    for (ScoreDoc sd : docs.scoreDocs) {\n      scores[sd.doc] = sd.score;\n    }\n    \n    // create a drill-down query with category \"a\", scores should not change\n    q = DrillDown.query(defaultParams, q, new CategoryPath(\"a\"));\n    docs = searcher.search(q, reader.maxDoc()); // fetch all available docs to this query\n    for (ScoreDoc sd : docs.scoreDocs) {\n      assertEquals(\"score of doc=\" + sd.doc + \" modified\", scores[sd.doc], sd.score, 0f);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa7a3db4fa6c77f454964f515841c097ca09212","date":1359119468,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testScoring().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testScoring().mjava","sourceNew":"  @Test\n  public void testScoring() throws IOException {\n    // verify that drill-down queries do not modify scores\n    IndexSearcher searcher = newSearcher(reader);\n\n    float[] scores = new float[reader.maxDoc()];\n    \n    Query q = new TermQuery(new Term(\"content\", \"foo\"));\n    TopDocs docs = searcher.search(q, reader.maxDoc()); // fetch all available docs to this query\n    for (ScoreDoc sd : docs.scoreDocs) {\n      scores[sd.doc] = sd.score;\n    }\n    \n    // create a drill-down query with category \"a\", scores should not change\n    q = DrillDown.query(defaultParams, q, Occur.MUST, new CategoryPath(\"a\"));\n    docs = searcher.search(q, reader.maxDoc()); // fetch all available docs to this query\n    for (ScoreDoc sd : docs.scoreDocs) {\n      assertEquals(\"score of doc=\" + sd.doc + \" modified\", scores[sd.doc], sd.score, 0f);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testScoring() throws IOException {\n    // verify that drill-down queries do not modify scores\n    IndexSearcher searcher = newSearcher(reader);\n\n    float[] scores = new float[reader.maxDoc()];\n    \n    Query q = new TermQuery(new Term(\"content\", \"foo\"));\n    TopDocs docs = searcher.search(q, reader.maxDoc()); // fetch all available docs to this query\n    for (ScoreDoc sd : docs.scoreDocs) {\n      scores[sd.doc] = sd.score;\n    }\n    \n    // create a drill-down query with category \"a\", scores should not change\n    q = DrillDown.query(defaultParams, q, new CategoryPath(\"a\"));\n    docs = searcher.search(q, reader.maxDoc()); // fetch all available docs to this query\n    for (ScoreDoc sd : docs.scoreDocs) {\n      assertEquals(\"score of doc=\" + sd.doc + \" modified\", scores[sd.doc], sd.score, 0f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testScoring().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testScoring().mjava","sourceNew":"  @Test\n  public void testScoring() throws IOException {\n    // verify that drill-down queries do not modify scores\n    IndexSearcher searcher = newSearcher(reader);\n\n    float[] scores = new float[reader.maxDoc()];\n    \n    Query q = new TermQuery(new Term(\"content\", \"foo\"));\n    TopDocs docs = searcher.search(q, reader.maxDoc()); // fetch all available docs to this query\n    for (ScoreDoc sd : docs.scoreDocs) {\n      scores[sd.doc] = sd.score;\n    }\n    \n    // create a drill-down query with category \"a\", scores should not change\n    q = DrillDown.query(defaultParams, q, Occur.MUST, new CategoryPath(\"a\"));\n    docs = searcher.search(q, reader.maxDoc()); // fetch all available docs to this query\n    for (ScoreDoc sd : docs.scoreDocs) {\n      assertEquals(\"score of doc=\" + sd.doc + \" modified\", scores[sd.doc], sd.score, 0f);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testScoring() throws IOException {\n    // verify that drill-down queries do not modify scores\n    IndexSearcher searcher = newSearcher(reader);\n\n    float[] scores = new float[reader.maxDoc()];\n    \n    Query q = new TermQuery(new Term(\"content\", \"foo\"));\n    TopDocs docs = searcher.search(q, reader.maxDoc()); // fetch all available docs to this query\n    for (ScoreDoc sd : docs.scoreDocs) {\n      scores[sd.doc] = sd.score;\n    }\n    \n    // create a drill-down query with category \"a\", scores should not change\n    q = DrillDown.query(defaultParams, q, new CategoryPath(\"a\"));\n    docs = searcher.search(q, reader.maxDoc()); // fetch all available docs to this query\n    for (ScoreDoc sd : docs.scoreDocs) {\n      assertEquals(\"score of doc=\" + sd.doc + \" modified\", scores[sd.doc], sd.score, 0f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f793470bad5ce8422502e33eaae65fc6a3271bd2","date":1360479442,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownQueryTest#testScoring().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testScoring().mjava","sourceNew":"  @Test\n  public void testScoring() throws IOException {\n    // verify that drill-down queries do not modify scores\n    IndexSearcher searcher = newSearcher(reader);\n\n    float[] scores = new float[reader.maxDoc()];\n    \n    Query q = new TermQuery(new Term(\"content\", \"foo\"));\n    TopDocs docs = searcher.search(q, reader.maxDoc()); // fetch all available docs to this query\n    for (ScoreDoc sd : docs.scoreDocs) {\n      scores[sd.doc] = sd.score;\n    }\n    \n    // create a drill-down query with category \"a\", scores should not change\n    DrillDownQuery q2 = new DrillDownQuery(defaultParams, q);\n    q2.add(new CategoryPath(\"a\"));\n    docs = searcher.search(q2, reader.maxDoc()); // fetch all available docs to this query\n    for (ScoreDoc sd : docs.scoreDocs) {\n      assertEquals(\"score of doc=\" + sd.doc + \" modified\", scores[sd.doc], sd.score, 0f);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testScoring() throws IOException {\n    // verify that drill-down queries do not modify scores\n    IndexSearcher searcher = newSearcher(reader);\n\n    float[] scores = new float[reader.maxDoc()];\n    \n    Query q = new TermQuery(new Term(\"content\", \"foo\"));\n    TopDocs docs = searcher.search(q, reader.maxDoc()); // fetch all available docs to this query\n    for (ScoreDoc sd : docs.scoreDocs) {\n      scores[sd.doc] = sd.score;\n    }\n    \n    // create a drill-down query with category \"a\", scores should not change\n    q = DrillDown.query(defaultParams, q, Occur.MUST, new CategoryPath(\"a\"));\n    docs = searcher.search(q, reader.maxDoc()); // fetch all available docs to this query\n    for (ScoreDoc sd : docs.scoreDocs) {\n      assertEquals(\"score of doc=\" + sd.doc + \" modified\", scores[sd.doc], sd.score, 0f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fa7a3db4fa6c77f454964f515841c097ca09212":["e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0"],"e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["407687e67faf6e1f02a211ca078d8e3eed631027","9fa7a3db4fa6c77f454964f515841c097ca09212"],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["9fa7a3db4fa6c77f454964f515841c097ca09212"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f793470bad5ce8422502e33eaae65fc6a3271bd2"]},"commit2Childs":{"9fa7a3db4fa6c77f454964f515841c097ca09212":["dd45d4a2ee01a1932d33eec42f5272c2402da679","f793470bad5ce8422502e33eaae65fc6a3271bd2"],"e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0":["9fa7a3db4fa6c77f454964f515841c097ca09212","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}