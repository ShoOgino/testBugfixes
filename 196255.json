{"path":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getFiniteStrings(Automaton,int,HashSet[Integer],HashSet[IntsRef],IntsRefBuilder,int).mjava","commits":[{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getFiniteStrings(Automaton,int,HashSet[Integer],HashSet[IntsRef],IntsRefBuilder,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getFiniteStrings(Automaton,int,HashSet[Integer],HashSet[IntsRef],IntsRef,int).mjava","sourceNew":"  /**\n   * Returns the strings that can be produced from the given state, or\n   * false if more than <code>limit</code> strings are found. \n   * <code>limit</code>&lt;0 means \"infinite\".\n   */\n  private static boolean getFiniteStrings(Automaton a, int s, HashSet<Integer> pathstates, \n      HashSet<IntsRef> strings, IntsRefBuilder path, int limit) {\n    pathstates.add(s);\n    Transition t = new Transition();\n    int count = a.initTransition(s, t);\n    for (int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      if (pathstates.contains(t.dest)) {\n        return false;\n      }\n      for (int n = t.min; n <= t.max; n++) {\n        path.append(n);\n        if (a.isAccept(t.dest)) {\n          strings.add(path.toIntsRef());\n          if (limit >= 0 && strings.size() > limit) {\n            return false;\n          }\n        }\n        if (!getFiniteStrings(a, t.dest, pathstates, strings, path, limit)) {\n          return false;\n        }\n        path.setLength(path.length() - 1);\n      }\n    }\n    pathstates.remove(s);\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Returns the strings that can be produced from the given state, or\n   * false if more than <code>limit</code> strings are found. \n   * <code>limit</code>&lt;0 means \"infinite\".\n   */\n  private static boolean getFiniteStrings(Automaton a, int s, HashSet<Integer> pathstates, \n      HashSet<IntsRef> strings, IntsRef path, int limit) {\n    pathstates.add(s);\n    Transition t = new Transition();\n    int count = a.initTransition(s, t);\n    for (int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      if (pathstates.contains(t.dest)) {\n        return false;\n      }\n      for (int n = t.min; n <= t.max; n++) {\n        path.grow(path.length+1);\n        path.ints[path.length] = n;\n        path.length++;\n        if (a.isAccept(t.dest)) {\n          strings.add(IntsRef.deepCopyOf(path));\n          if (limit >= 0 && strings.size() > limit) {\n            return false;\n          }\n        }\n        if (!getFiniteStrings(a, t.dest, pathstates, strings, path, limit)) {\n          return false;\n        }\n        path.length--;\n      }\n    }\n    pathstates.remove(s);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}