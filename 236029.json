{"path":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0x10;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0x10;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUnicodeComparator#compare(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","sourceNew":"    public int compare(BytesRef a, BytesRef b) {\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        int diff = aByte - bByte;\n        if (diff != 0) {\n          return diff;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }    \n\n","sourceOld":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0x10;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0x10;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0x10;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0x10;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","sourceNew":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              // nocommit\n              aByte += 0xe;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              // nocommit\n              bByte += 0xe;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","sourceOld":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0x10;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0x10;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aefdf718c84fa2976cac55afa8cf1af6980dd03","date":1279899703,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","sourceNew":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          \n          // NOTE: instead of moving supplementary code points (0xee and 0xef) to the unused 0xfe and 0xff, \n          // we move them to the unused 0xfc and 0xfd [reserved for future 6-byte character sequences]\n          // this reserves 0xff for preflex's term reordering (surrogate dance), and if unicode grows such\n          // that 6-byte sequences are needed we have much bigger problems anyway.\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0xe;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0xe;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","sourceOld":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              // nocommit\n              aByte += 0xe;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              // nocommit\n              bByte += 0xe;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","sourceNew":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          \n          // NOTE: instead of moving supplementary code points (0xee and 0xef) to the unused 0xfe and 0xff, \n          // we move them to the unused 0xfc and 0xfd [reserved for future 6-byte character sequences]\n          // this reserves 0xff for preflex's term reordering (surrogate dance), and if unicode grows such\n          // that 6-byte sequences are needed we have much bigger problems anyway.\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0xe;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0xe;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","sourceOld":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0x10;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0x10;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","sourceNew":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          \n          // NOTE: instead of moving supplementary code points (0xee and 0xef) to the unused 0xfe and 0xff, \n          // we move them to the unused 0xfc and 0xfd [reserved for future 6-byte character sequences]\n          // this reserves 0xff for preflex's term reordering (surrogate dance), and if unicode grows such\n          // that 6-byte sequences are needed we have much bigger problems anyway.\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0xe;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0xe;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","sourceOld":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0x10;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0x10;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","sourceNew":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          \n          // NOTE: instead of moving supplementary code points (0xee and 0xef) to the unused 0xfe and 0xff, \n          // we move them to the unused 0xfc and 0xfd [reserved for future 6-byte character sequences]\n          // this reserves 0xff for preflex's term reordering (surrogate dance), and if unicode grows such\n          // that 6-byte sequences are needed we have much bigger problems anyway.\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0xe;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0xe;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","sourceOld":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          \n          // NOTE: instead of moving supplementary code points (0xee and 0xef) to the unused 0xfe and 0xff, \n          // we move them to the unused 0xfc and 0xfd [reserved for future 6-byte character sequences]\n          // this reserves 0xff for preflex's term reordering (surrogate dance), and if unicode grows such\n          // that 6-byte sequences are needed we have much bigger problems anyway.\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0xe;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0xe;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["08932c793647a36953d1816b1060121f48820d3f"],"08932c793647a36953d1816b1060121f48820d3f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","6aefdf718c84fa2976cac55afa8cf1af6980dd03"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6aefdf718c84fa2976cac55afa8cf1af6980dd03":["163fe85a71d778fd2b7747f65ca27b54829e2e57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"08932c793647a36953d1816b1060121f48820d3f":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"3242a09f703274d3b9283f2064a1a33064b53a1b":[],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["6aefdf718c84fa2976cac55afa8cf1af6980dd03"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["08932c793647a36953d1816b1060121f48820d3f","3242a09f703274d3b9283f2064a1a33064b53a1b"],"6aefdf718c84fa2976cac55afa8cf1af6980dd03":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3242a09f703274d3b9283f2064a1a33064b53a1b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}