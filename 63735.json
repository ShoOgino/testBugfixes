{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","commits":[{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collection + \" with message: \" + message);\n\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(clusterState.getSlicesMap(collection));\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = clusterState.getSlice(collection, key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      if (Slice.RECOVERY.equals(props.get(Slice.STATE)) && Slice.ACTIVE.equals(message.getStr(key))) {\n        props.remove(Slice.PARENT);\n      }\n      props.put(Slice.STATE, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collection, clusterState.getCollection(collection).copyWithSlices(slicesCopy));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","date":1427866967,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collection + \" with message: \" + message);\n\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(clusterState.getSlicesMap(collection));\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = clusterState.getSlice(collection, key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState((String) props.get(ZkStateReader.STATE_PROP)) == Slice.State.RECOVERY\n          && Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collection, clusterState.getCollection(collection).copyWithSlices(slicesCopy));\n  }\n\n","sourceOld":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collection + \" with message: \" + message);\n\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(clusterState.getSlicesMap(collection));\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = clusterState.getSlice(collection, key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      if (Slice.RECOVERY.equals(props.get(Slice.STATE)) && Slice.ACTIVE.equals(message.getStr(key))) {\n        props.remove(Slice.PARENT);\n      }\n      props.put(Slice.STATE, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collection, clusterState.getCollection(collection).copyWithSlices(slicesCopy));\n  }\n\n","bugFix":null,"bugIntro":["6a23ab64d81a448ad6ec571cbfc9599cc09b4e4b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collection + \" with message: \" + message);\n\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(clusterState.getSlicesMap(collection));\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = clusterState.getSlice(collection, key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState((String) props.get(ZkStateReader.STATE_PROP)) == Slice.State.RECOVERY\n          && Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collection, clusterState.getCollection(collection).copyWithSlices(slicesCopy));\n  }\n\n","sourceOld":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collection + \" with message: \" + message);\n\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(clusterState.getSlicesMap(collection));\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = clusterState.getSlice(collection, key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      if (Slice.RECOVERY.equals(props.get(Slice.STATE)) && Slice.ACTIVE.equals(message.getStr(key))) {\n        props.remove(Slice.PARENT);\n      }\n      props.put(Slice.STATE, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collection, clusterState.getCollection(collection).copyWithSlices(slicesCopy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState((String) props.get(ZkStateReader.STATE_PROP)) == Slice.State.RECOVERY\n          && Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","sourceOld":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collection + \" with message: \" + message);\n\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(clusterState.getSlicesMap(collection));\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = clusterState.getSlice(collection, key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState((String) props.get(ZkStateReader.STATE_PROP)) == Slice.State.RECOVERY\n          && Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collection, clusterState.getCollection(collection).copyWithSlices(slicesCopy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState((String) props.get(ZkStateReader.STATE_PROP)) == Slice.State.RECOVERY\n          && Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","sourceOld":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collection + \" with message: \" + message);\n\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(clusterState.getSlicesMap(collection));\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = clusterState.getSlice(collection, key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState((String) props.get(ZkStateReader.STATE_PROP)) == Slice.State.RECOVERY\n          && Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collection, clusterState.getCollection(collection).copyWithSlices(slicesCopy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6a23ab64d81a448ad6ec571cbfc9599cc09b4e4b","date":1473679846,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n        props.remove(\"shard_parent_node\");\n        props.remove(\"shard_parent_zk_session\");\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","sourceOld":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState((String) props.get(ZkStateReader.STATE_PROP)) == Slice.State.RECOVERY\n          && Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","bugFix":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n        props.remove(\"shard_parent_node\");\n        props.remove(\"shard_parent_zk_session\");\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","sourceOld":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState((String) props.get(ZkStateReader.STATE_PROP)) == Slice.State.RECOVERY\n          && Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n        props.remove(\"shard_parent_node\");\n        props.remove(\"shard_parent_zk_session\");\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","sourceOld":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState((String) props.get(ZkStateReader.STATE_PROP)) == Slice.State.RECOVERY\n          && Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n        props.remove(\"shard_parent_node\");\n        props.remove(\"shard_parent_zk_session\");\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","sourceOld":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState((String) props.get(ZkStateReader.STATE_PROP)) == Slice.State.RECOVERY\n          && Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n        props.remove(\"shard_parent_node\");\n        props.remove(\"shard_parent_zk_session\");\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      // we need to use epoch time so that it's comparable across Overseer restarts\n      props.put(ZkStateReader.STATE_TIMESTAMP_PROP, String.valueOf(dataProvider.getTimeSource().getEpochTime()));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","sourceOld":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n        props.remove(\"shard_parent_node\");\n        props.remove(\"shard_parent_zk_session\");\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n        props.remove(\"shard_parent_node\");\n        props.remove(\"shard_parent_zk_session\");\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      // we need to use epoch time so that it's comparable across Overseer restarts\n      props.put(ZkStateReader.STATE_TIMESTAMP_PROP, String.valueOf(dataProvider.getTimeSource().getEpochTimeNs()));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","sourceOld":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n        props.remove(\"shard_parent_node\");\n        props.remove(\"shard_parent_zk_session\");\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      // we need to use epoch time so that it's comparable across Overseer restarts\n      props.put(ZkStateReader.STATE_TIMESTAMP_PROP, String.valueOf(dataProvider.getTimeSource().getEpochTime()));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae70f2df00762dfce0455c0e39381848762662e5","date":1539113410,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n        props.remove(\"shard_parent_node\");\n        props.remove(\"shard_parent_zk_session\");\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      // we need to use epoch time so that it's comparable across Overseer restarts\n      props.put(ZkStateReader.STATE_TIMESTAMP_PROP, String.valueOf(cloudManager.getTimeSource().getEpochTimeNs()));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","sourceOld":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n        props.remove(\"shard_parent_node\");\n        props.remove(\"shard_parent_zk_session\");\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      // we need to use epoch time so that it's comparable across Overseer restarts\n      props.put(ZkStateReader.STATE_TIMESTAMP_PROP, String.valueOf(dataProvider.getTimeSource().getEpochTimeNs()));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n        props.remove(\"shard_parent_node\");\n        props.remove(\"shard_parent_zk_session\");\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      // we need to use epoch time so that it's comparable across Overseer restarts\n      props.put(ZkStateReader.STATE_TIMESTAMP_PROP, String.valueOf(cloudManager.getTimeSource().getEpochTimeNs()));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props,collectionName);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","sourceOld":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n        props.remove(\"shard_parent_node\");\n        props.remove(\"shard_parent_zk_session\");\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      // we need to use epoch time so that it's comparable across Overseer restarts\n      props.put(ZkStateReader.STATE_TIMESTAMP_PROP, String.valueOf(cloudManager.getTimeSource().getEpochTimeNs()));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n        props.remove(\"shard_parent_node\");\n        props.remove(\"shard_parent_zk_session\");\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      // we need to use epoch time so that it's comparable across Overseer restarts\n      props.put(ZkStateReader.STATE_TIMESTAMP_PROP, String.valueOf(cloudManager.getTimeSource().getEpochTimeNs()));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props,collectionName);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","sourceOld":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n        props.remove(\"shard_parent_node\");\n        props.remove(\"shard_parent_zk_session\");\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      // we need to use epoch time so that it's comparable across Overseer restarts\n      props.put(ZkStateReader.STATE_TIMESTAMP_PROP, String.valueOf(cloudManager.getTimeSource().getEpochTimeNs()));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: {} with message: {}\", collectionName, message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      if (log.isInfoEnabled()) {\n        log.info(\"Update shard state {} to {}\", key, message.getStr(key));\n      }\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n        props.remove(\"shard_parent_node\");\n        props.remove(\"shard_parent_zk_session\");\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      // we need to use epoch time so that it's comparable across Overseer restarts\n      props.put(ZkStateReader.STATE_TIMESTAMP_PROP, String.valueOf(cloudManager.getTimeSource().getEpochTimeNs()));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props,collectionName);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","sourceOld":"  public ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    log.info(\"Update shard state invoked for collection: \" + collectionName + \" with message: \" + message);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Map<String, Slice> slicesCopy = new LinkedHashMap<>(collection.getSlicesMap());\n    for (String key : message.keySet()) {\n      if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n      if (Overseer.QUEUE_OPERATION.equals(key)) continue;\n\n      Slice slice = collection.getSlice(key);\n      if (slice == null) {\n        throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collectionName + \" slice: \" + key);\n      }\n      log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n      Map<String, Object> props = slice.shallowCopy();\n      \n      if (Slice.State.getState(message.getStr(key)) == Slice.State.ACTIVE) {\n        props.remove(Slice.PARENT);\n        props.remove(\"shard_parent_node\");\n        props.remove(\"shard_parent_zk_session\");\n      }\n      props.put(ZkStateReader.STATE_PROP, message.getStr(key));\n      // we need to use epoch time so that it's comparable across Overseer restarts\n      props.put(ZkStateReader.STATE_TIMESTAMP_PROP, String.valueOf(cloudManager.getTimeSource().getEpochTimeNs()));\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props,collectionName);\n      slicesCopy.put(slice.getName(), newSlice);\n    }\n\n    return new ZkWriteCommand(collectionName, collection.copyWithSlices(slicesCopy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["ae70f2df00762dfce0455c0e39381848762662e5","6681d02f2302c363be938426e68f8dfd090cc1bf"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"6a23ab64d81a448ad6ec571cbfc9599cc09b4e4b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["ae70f2df00762dfce0455c0e39381848762662e5"],"ae70f2df00762dfce0455c0e39381848762662e5":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"89424def13674ea17829b41c5883c54ecc31a132":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","6a23ab64d81a448ad6ec571cbfc9599cc09b4e4b"],"0c924d4069ef5a5bc479a493befe0121aada6896":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"9c6c0dad4932399aec99b4818086cb1772773916":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4abf821a41a2fdca2a1dea148999931d22e20529":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","89424def13674ea17829b41c5883c54ecc31a132"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["9c6c0dad4932399aec99b4818086cb1772773916"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4abf821a41a2fdca2a1dea148999931d22e20529"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd","0c924d4069ef5a5bc479a493befe0121aada6896"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["6a23ab64d81a448ad6ec571cbfc9599cc09b4e4b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6a23ab64d81a448ad6ec571cbfc9599cc09b4e4b":["89424def13674ea17829b41c5883c54ecc31a132"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ae70f2df00762dfce0455c0e39381848762662e5":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","4abf821a41a2fdca2a1dea148999931d22e20529"],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0c924d4069ef5a5bc479a493befe0121aada6896":[],"9c6c0dad4932399aec99b4818086cb1772773916":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","0c924d4069ef5a5bc479a493befe0121aada6896"],"4abf821a41a2fdca2a1dea148999931d22e20529":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9c6c0dad4932399aec99b4818086cb1772773916"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["ae70f2df00762dfce0455c0e39381848762662e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0c924d4069ef5a5bc479a493befe0121aada6896","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}