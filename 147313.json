{"path":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","sourceNew":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      // LUCENE-2421: we don't care anymore if the file cannot be deleted\n      // because it's held up by another process (e.g. AntiVirus). NativeFSLock\n      // does not depend on the existence/absence of the lock file\n      path.delete();\n    } else {\n      // if we don't hold the lock, and somebody still called release(), for\n      // example as a result of calling IndexWriter.unlock(), we should attempt\n      // to obtain the lock and release it. If the obtain fails, it means the\n      // lock cannot be released, and we should throw a proper exception rather\n      // than silently failing/not doing anything.\n      boolean obtained = false;\n      try {\n        if (!(obtained = obtain())) {\n          throw new LockReleaseFailedException(\n              \"Cannot forcefully unlock a NativeFSLock which is held by another indexer component: \"\n                  + path);\n        }\n      } finally {\n        if (obtained) {\n          release();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      // LUCENE-2421: we don't care anymore if the file cannot be deleted\n      // because it's held up by another process (e.g. AntiVirus). NativeFSLock\n      // does not depend on the existence/absence of the lock file\n      path.delete();\n    } else {\n      // if we don't hold the lock, and somebody still called release(), for\n      // example as a result of calling IndexWriter.unlock(), we should attempt\n      // to obtain the lock and release it. If the obtain fails, it means the\n      // lock cannot be released, and we should throw a proper exception rather\n      // than silently failing/not doing anything.\n      boolean obtained = false;\n      try {\n        if (!(obtained = obtain())) {\n          throw new LockReleaseFailedException(\n              \"Cannot forcefully unlock a NativeFSLock which is held by another indexer component: \"\n                  + path);\n        }\n      } finally {\n        if (obtained) {\n          release();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","sourceNew":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      // LUCENE-2421: we don't care anymore if the file cannot be deleted\n      // because it's held up by another process (e.g. AntiVirus). NativeFSLock\n      // does not depend on the existence/absence of the lock file\n      path.delete();\n    } else {\n      // if we don't hold the lock, and somebody still called release(), for\n      // example as a result of calling IndexWriter.unlock(), we should attempt\n      // to obtain the lock and release it. If the obtain fails, it means the\n      // lock cannot be released, and we should throw a proper exception rather\n      // than silently failing/not doing anything.\n      boolean obtained = false;\n      try {\n        if (!(obtained = obtain())) {\n          throw new LockReleaseFailedException(\n              \"Cannot forcefully unlock a NativeFSLock which is held by another indexer component: \"\n                  + path);\n        }\n      } finally {\n        if (obtained) {\n          release();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      // LUCENE-2421: we don't care anymore if the file cannot be deleted\n      // because it's held up by another process (e.g. AntiVirus). NativeFSLock\n      // does not depend on the existence/absence of the lock file\n      path.delete();\n    } else {\n      // if we don't hold the lock, and somebody still called release(), for\n      // example as a result of calling IndexWriter.unlock(), we should attempt\n      // to obtain the lock and release it. If the obtain fails, it means the\n      // lock cannot be released, and we should throw a proper exception rather\n      // than silently failing/not doing anything.\n      boolean obtained = false;\n      try {\n        if (!(obtained = obtain())) {\n          throw new LockReleaseFailedException(\n              \"Cannot forcefully unlock a NativeFSLock which is held by another indexer component: \"\n                  + path);\n        }\n      } finally {\n        if (obtained) {\n          release();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","sourceNew":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      // LUCENE-2421: we don't care anymore if the file cannot be deleted\n      // because it's held up by another process (e.g. AntiVirus). NativeFSLock\n      // does not depend on the existence/absence of the lock file\n      path.delete();\n    } else {\n      // if we don't hold the lock, and somebody still called release(), for\n      // example as a result of calling IndexWriter.unlock(), we should attempt\n      // to obtain the lock and release it. If the obtain fails, it means the\n      // lock cannot be released, and we should throw a proper exception rather\n      // than silently failing/not doing anything.\n      boolean obtained = false;\n      try {\n        if (!(obtained = obtain())) {\n          throw new LockReleaseFailedException(\n              \"Cannot forcefully unlock a NativeFSLock which is held by another indexer component: \"\n                  + path);\n        }\n      } finally {\n        if (obtained) {\n          release();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      // LUCENE-2421: we don't care anymore if the file cannot be deleted\n      // because it's held up by another process (e.g. AntiVirus). NativeFSLock\n      // does not depend on the existence/absence of the lock file\n      path.delete();\n    } else {\n      // if we don't hold the lock, and somebody still called release(), for\n      // example as a result of calling IndexWriter.unlock(), we should attempt\n      // to obtain the lock and release it. If the obtain fails, it means the\n      // lock cannot be released, and we should throw a proper exception rather\n      // than silently failing/not doing anything.\n      boolean obtained = false;\n      try {\n        if (!(obtained = obtain())) {\n          throw new LockReleaseFailedException(\n              \"Cannot forcefully unlock a NativeFSLock which is held by another indexer component: \"\n                  + path);\n        }\n      } finally {\n        if (obtained) {\n          release();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fcdcf196523675146a4df3193e91413533857ab","date":1390686560,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      // LUCENE-2421: we don't care anymore if the file cannot be deleted\n      // because it's held up by another process (e.g. AntiVirus). NativeFSLock\n      // does not depend on the existence/absence of the lock file\n      path.delete();\n    } else {\n      // if we don't hold the lock, and somebody still called release(), for\n      // example as a result of calling IndexWriter.unlock(), we should attempt\n      // to obtain the lock and release it. If the obtain fails, it means the\n      // lock cannot be released, and we should throw a proper exception rather\n      // than silently failing/not doing anything.\n      boolean obtained = false;\n      try {\n        if (!(obtained = obtain())) {\n          throw new LockReleaseFailedException(\n              \"Cannot forcefully unlock a NativeFSLock which is held by another indexer component: \"\n                  + path);\n        }\n      } finally {\n        if (obtained) {\n          close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      // LUCENE-2421: we don't care anymore if the file cannot be deleted\n      // because it's held up by another process (e.g. AntiVirus). NativeFSLock\n      // does not depend on the existence/absence of the lock file\n      path.delete();\n    } else {\n      // if we don't hold the lock, and somebody still called release(), for\n      // example as a result of calling IndexWriter.unlock(), we should attempt\n      // to obtain the lock and release it. If the obtain fails, it means the\n      // lock cannot be released, and we should throw a proper exception rather\n      // than silently failing/not doing anything.\n      boolean obtained = false;\n      try {\n        if (!(obtained = obtain())) {\n          throw new LockReleaseFailedException(\n              \"Cannot forcefully unlock a NativeFSLock which is held by another indexer component: \"\n                  + path);\n        }\n      } finally {\n        if (obtained) {\n          release();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ac6772b4ba3c5fe1e4aae992238c5f7cdce74f0b"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0fcdcf196523675146a4df3193e91413533857ab":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0fcdcf196523675146a4df3193e91413533857ab"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"0fcdcf196523675146a4df3193e91413533857ab":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["0fcdcf196523675146a4df3193e91413533857ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}