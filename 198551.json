{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCapitalizationFilterFactory#testCapitalization().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCapitalizationFilterFactory#testCapitalization().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestCapitalizationFilterFactory#testCapitalization().mjava","sourceNew":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"kiTTEN\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Kitten\" });\n    \n    factory.forceFirstLetter = true;\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"and\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    //first is forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = false;\n\n    //first is not forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = true;\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"big\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Big\" });\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"BIG\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"BIG\" });\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"Hello there my name is ryan\" });\n        \n    // now each token\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"My\", \"Name\", \"Is\", \"Ryan\" });\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"my\", \"Name\", \"is\", \"Ryan\" });\n    \n    // without prefix\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Mckinley\" });\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"McKinley\" });\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"1st 2nd third\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"1st\", \"2nd\", \"Third\" });\n    \n    factory.forceFirstLetter = true;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"the The the\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"The The the\" });\n  }\n\n","sourceOld":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"kiTTEN\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Kitten\" });\n    \n    factory.forceFirstLetter = true;\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"and\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    //first is forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = false;\n\n    //first is not forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = true;\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"big\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Big\" });\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"BIG\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"BIG\" });\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"Hello there my name is ryan\" });\n        \n    // now each token\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"My\", \"Name\", \"Is\", \"Ryan\" });\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"my\", \"Name\", \"is\", \"Ryan\" });\n    \n    // without prefix\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Mckinley\" });\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"McKinley\" });\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"1st 2nd third\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"1st\", \"2nd\", \"Third\" });\n    \n    factory.forceFirstLetter = true;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"the The the\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"The The the\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCapitalizationFilterFactory#testCapitalization().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestCapitalizationFilterFactory#testCapitalization().mjava","sourceNew":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"kiTTEN\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Kitten\" });\n    \n    factory.forceFirstLetter = true;\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"and\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    //first is forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = false;\n\n    //first is not forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = true;\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"big\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Big\" });\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"BIG\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"BIG\" });\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"Hello there my name is ryan\" });\n        \n    // now each token\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"My\", \"Name\", \"Is\", \"Ryan\" });\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"my\", \"Name\", \"is\", \"Ryan\" });\n    \n    // without prefix\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Mckinley\" });\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"McKinley\" });\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"1st 2nd third\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"1st\", \"2nd\", \"Third\" });\n    \n    factory.forceFirstLetter = true;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"the The the\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"The The the\" });\n  }\n\n","sourceOld":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"kiTTEN\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Kitten\" });\n    \n    factory.forceFirstLetter = true;\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"and\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    //first is forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = false;\n\n    //first is not forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = true;\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"big\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Big\" });\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"BIG\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"BIG\" });\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"Hello there my name is ryan\" });\n        \n    // now each token\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"My\", \"Name\", \"Is\", \"Ryan\" });\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"my\", \"Name\", \"is\", \"Ryan\" });\n    \n    // without prefix\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Mckinley\" });\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"McKinley\" });\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"1st 2nd third\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"1st\", \"2nd\", \"Third\" });\n    \n    factory.forceFirstLetter = true;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"the The the\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"The The the\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCapitalizationFilterFactory#testCapitalization().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestCapitalizationFilterFactory#testCapitalization().mjava","sourceNew":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"kiTTEN\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Kitten\" });\n    \n    factory.forceFirstLetter = true;\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"and\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    //first is forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = false;\n\n    //first is not forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = true;\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"big\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Big\" });\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"BIG\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"BIG\" });\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"Hello there my name is ryan\" });\n        \n    // now each token\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"My\", \"Name\", \"Is\", \"Ryan\" });\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"my\", \"Name\", \"is\", \"Ryan\" });\n    \n    // without prefix\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Mckinley\" });\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"McKinley\" });\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"1st 2nd third\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"1st\", \"2nd\", \"Third\" });\n    \n    factory.forceFirstLetter = true;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"the The the\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"The The the\" });\n  }\n\n","sourceOld":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"kiTTEN\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Kitten\" });\n    \n    factory.forceFirstLetter = true;\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"and\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    //first is forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = false;\n\n    //first is not forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = true;\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"big\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Big\" });\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"BIG\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"BIG\" });\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"Hello there my name is ryan\" });\n        \n    // now each token\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"My\", \"Name\", \"Is\", \"Ryan\" });\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"my\", \"Name\", \"is\", \"Ryan\" });\n    \n    // without prefix\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Mckinley\" });\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"McKinley\" });\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"1st 2nd third\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"1st\", \"2nd\", \"Third\" });\n    \n    factory.forceFirstLetter = true;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"the The the\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"The The the\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCapitalizationFilterFactory#testCapitalization().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestCapitalizationFilterFactory#testCapitalization().mjava","sourceNew":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"kiTTEN\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Kitten\" });\n    \n    factory.forceFirstLetter = true;\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"and\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    //first is forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = false;\n\n    //first is not forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = true;\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"big\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Big\" });\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"BIG\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"BIG\" });\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"Hello there my name is ryan\" });\n        \n    // now each token\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"My\", \"Name\", \"Is\", \"Ryan\" });\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"my\", \"Name\", \"is\", \"Ryan\" });\n    \n    // without prefix\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Mckinley\" });\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"McKinley\" });\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"1st 2nd third\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"1st\", \"2nd\", \"Third\" });\n    \n    factory.forceFirstLetter = true;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"the The the\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"The The the\" });\n  }\n\n","sourceOld":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"kiTTEN\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Kitten\" });\n    \n    factory.forceFirstLetter = true;\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"and\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    //first is forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = false;\n\n    //first is not forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = true;\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"big\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Big\" });\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"BIG\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"BIG\" });\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"Hello there my name is ryan\" });\n        \n    // now each token\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"My\", \"Name\", \"Is\", \"Ryan\" });\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"my\", \"Name\", \"is\", \"Ryan\" });\n    \n    // without prefix\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Mckinley\" });\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"McKinley\" });\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"1st 2nd third\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"1st\", \"2nd\", \"Third\" });\n    \n    factory.forceFirstLetter = true;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"the The the\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"The The the\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCapitalizationFilterFactory#testCapitalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCapitalizationFilterFactory#testCapitalization().mjava","sourceNew":"  public void testCapitalization() throws Exception {\n    Reader reader = new StringReader(\"kiTTEN\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"Capitalization\",\n        \"keep\", \"and the it BIG\",\n        \"onlyFirstWord\", \"true\").create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Kitten\" });\n  }\n\n","sourceOld":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"kiTTEN\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Kitten\" });\n    \n    factory.forceFirstLetter = true;\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"and\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    //first is forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = false;\n\n    //first is not forced, but it's not a keep word, either\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"AnD\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"And\" });\n\n    factory.forceFirstLetter = true;\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"big\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Big\" });\n    \n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"BIG\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"BIG\" });\n\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"Hello there my name is ryan\" });\n        \n    // now each token\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"My\", \"Name\", \"Is\", \"Ryan\" });\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Hello\", \"There\", \"my\", \"Name\", \"is\", \"Ryan\" });\n    \n    // without prefix\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"Mckinley\" });\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"McKinley\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"McKinley\" });\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"1st 2nd third\"), MockTokenizer.WHITESPACE, false)),\n        new String[] { \"1st\", \"2nd\", \"Third\" });\n    \n    factory.forceFirstLetter = true;\n    assertTokenStreamContents(factory.create(\n        new MockTokenizer(new StringReader(\"the The the\"), MockTokenizer.KEYWORD, false)),\n        new String[] { \"The The the\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCapitalizationFilterFactory#testCapitalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCapitalizationFilterFactory#testCapitalization().mjava","sourceNew":"  public void testCapitalization() throws Exception {\n    Reader reader = new StringReader(\"kiTTEN\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"Capitalization\",\n        \"keep\", \"and the it BIG\",\n        \"onlyFirstWord\", \"true\").create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Kitten\" });\n  }\n\n","sourceOld":"  public void testCapitalization() throws Exception {\n    Reader reader = new StringReader(\"kiTTEN\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"Capitalization\",\n        \"keep\", \"and the it BIG\",\n        \"onlyFirstWord\", \"true\").create(stream);\n    assertTokenStreamContents(stream, new String[] { \"Kitten\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}