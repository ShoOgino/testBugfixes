{"path":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","commits":[{"id":"16efeb5e41e35037f154efba9fdbbc13f8bc5cc2","date":1202772354,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","pathOld":"/dev/null","sourceNew":"  public static void verifyEquals(Document d1, Document d2) {\n    List ff1 = d1.getFields();\n    List ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    if (ff1.size() != ff2.size()) {\n      System.out.println(ff1);\n      System.out.println(ff2);\n      assertEquals(ff1.size(), ff2.size());\n    }\n\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = (Fieldable)ff1.get(i);\n      Fieldable f2 = (Fieldable)ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n        //TODO\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        if (!s1.equals(s2)) {\n          // print out whole doc on error\n          System.out.println(ff1);\n          System.out.println(ff2);          \n          assertEquals(s1,s2);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","sourceNew":"  public static void verifyEquals(Document d1, Document d2) {\n    List<Fieldable> ff1 = d1.getFields();\n    List<Fieldable> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    if (ff1.size() != ff2.size()) {\n      System.out.println(ff1);\n      System.out.println(ff2);\n      assertEquals(ff1.size(), ff2.size());\n    }\n\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = ff1.get(i);\n      Fieldable f2 = ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n        //TODO\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        if (!s1.equals(s2)) {\n          // print out whole doc on error\n          System.out.println(ff1);\n          System.out.println(ff2);          \n          assertEquals(s1,s2);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(Document d1, Document d2) {\n    List ff1 = d1.getFields();\n    List ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    if (ff1.size() != ff2.size()) {\n      System.out.println(ff1);\n      System.out.println(ff2);\n      assertEquals(ff1.size(), ff2.size());\n    }\n\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = (Fieldable)ff1.get(i);\n      Fieldable f2 = (Fieldable)ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n        //TODO\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        if (!s1.equals(s2)) {\n          // print out whole doc on error\n          System.out.println(ff1);\n          System.out.println(ff2);          \n          assertEquals(s1,s2);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","sourceNew":"  public static void verifyEquals(Document d1, Document d2) {\n    List<Fieldable> ff1 = d1.getFields();\n    List<Fieldable> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    if (ff1.size() != ff2.size()) {\n      System.out.println(ff1);\n      System.out.println(ff2);\n      assertEquals(ff1.size(), ff2.size());\n    }\n\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = ff1.get(i);\n      Fieldable f2 = ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        if (!s1.equals(s2)) {\n          // print out whole doc on error\n          System.out.println(ff1);\n          System.out.println(ff2);          \n          assertEquals(s1,s2);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(Document d1, Document d2) {\n    List<Fieldable> ff1 = d1.getFields();\n    List<Fieldable> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    if (ff1.size() != ff2.size()) {\n      System.out.println(ff1);\n      System.out.println(ff2);\n      assertEquals(ff1.size(), ff2.size());\n    }\n\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = ff1.get(i);\n      Fieldable f2 = ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n        //TODO\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        if (!s1.equals(s2)) {\n          // print out whole doc on error\n          System.out.println(ff1);\n          System.out.println(ff2);          \n          assertEquals(s1,s2);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","sourceNew":"  public static void verifyEquals(Document d1, Document d2) {\n    List<Fieldable> ff1 = d1.getFields();\n    List<Fieldable> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    if (ff1.size() != ff2.size()) {\n      System.out.println(ff1);\n      System.out.println(ff2);\n      assertEquals(ff1.size(), ff2.size());\n    }\n\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = ff1.get(i);\n      Fieldable f2 = ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n        //TODO\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        if (!s1.equals(s2)) {\n          // print out whole doc on error\n          System.out.println(ff1);\n          System.out.println(ff2);          \n          assertEquals(s1,s2);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(Document d1, Document d2) {\n    List<Fieldable> ff1 = d1.getFields();\n    List<Fieldable> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    if (ff1.size() != ff2.size()) {\n      System.out.println(ff1);\n      System.out.println(ff2);\n      assertEquals(ff1.size(), ff2.size());\n    }\n\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = ff1.get(i);\n      Fieldable f2 = ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        if (!s1.equals(s2)) {\n          // print out whole doc on error\n          System.out.println(ff1);\n          System.out.println(ff2);          \n          assertEquals(s1,s2);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","sourceNew":"  public static void verifyEquals(Document d1, Document d2) {\n    List<Fieldable> ff1 = d1.getFields();\n    List<Fieldable> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    if (ff1.size() != ff2.size()) {\n      System.out.println(ff1);\n      System.out.println(ff2);\n      assertEquals(ff1.size(), ff2.size());\n    }\n\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = ff1.get(i);\n      Fieldable f2 = ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        if (!s1.equals(s2)) {\n          // print out whole doc on error\n          System.out.println(ff1);\n          System.out.println(ff2);          \n          assertEquals(s1,s2);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(Document d1, Document d2) {\n    List<Fieldable> ff1 = d1.getFields();\n    List<Fieldable> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    if (ff1.size() != ff2.size()) {\n      System.out.println(ff1);\n      System.out.println(ff2);\n      assertEquals(ff1.size(), ff2.size());\n    }\n\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = ff1.get(i);\n      Fieldable f2 = ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n        //TODO\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        if (!s1.equals(s2)) {\n          // print out whole doc on error\n          System.out.println(ff1);\n          System.out.println(ff2);          \n          assertEquals(s1,s2);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","sourceNew":"  public static void verifyEquals(Document d1, Document d2) {\n    List<Fieldable> ff1 = d1.getFields();\n    List<Fieldable> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = ff1.get(i);\n      Fieldable f2 = ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(Document d1, Document d2) {\n    List<Fieldable> ff1 = d1.getFields();\n    List<Fieldable> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    if (ff1.size() != ff2.size()) {\n      System.out.println(ff1);\n      System.out.println(ff2);\n      assertEquals(ff1.size(), ff2.size());\n    }\n\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = ff1.get(i);\n      Fieldable f2 = ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        if (!s1.equals(s2)) {\n          // print out whole doc on error\n          System.out.println(ff1);\n          System.out.println(ff2);          \n          assertEquals(s1,s2);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","sourceNew":"  public static void verifyEquals(Document d1, Document d2) {\n    List<Fieldable> ff1 = d1.getFields();\n    List<Fieldable> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = ff1.get(i);\n      Fieldable f2 = ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(Document d1, Document d2) {\n    List<Fieldable> ff1 = d1.getFields();\n    List<Fieldable> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = ff1.get(i);\n      Fieldable f2 = ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"16efeb5e41e35037f154efba9fdbbc13f8bc5cc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["16efeb5e41e35037f154efba9fdbbc13f8bc5cc2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16efeb5e41e35037f154efba9fdbbc13f8bc5cc2"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"16efeb5e41e35037f154efba9fdbbc13f8bc5cc2":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}