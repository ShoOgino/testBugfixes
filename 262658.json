{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownQueryTest#testQuery().mjava","commits":[{"id":"f793470bad5ce8422502e33eaae65fc6a3271bd2","date":1360479442,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownQueryTest#testQuery().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testQuery().mjava","sourceNew":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    DrillDownQuery q = new DrillDownQuery(defaultParams);\n    q.add(new CategoryPath(\"a\"));\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(defaultParams, q);\n    q2.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    DrillDownQuery q3 = new DrillDownQuery(defaultParams);\n    q3.add(new CategoryPath(\"a\"));\n    q3.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(defaultParams, fooQuery);\n    q4.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","sourceOld":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    Query q = DrillDown.query(defaultParams, null, Occur.MUST, new CategoryPath(\"a\"));\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    Query q2 = DrillDown.query(defaultParams, q, Occur.MUST, new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    Query q3 = DrillDown.query(defaultParams, null, Occur.MUST, new CategoryPath(\"a\"), new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    assertEquals(5, docs.totalHits);\n    \n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    Query q4 = DrillDown.query(defaultParams, fooQuery, Occur.MUST, new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a22ad352a73aa6ab982b6377e1714950edaf62f0","date":1366051636,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownQueryTest#testQuery().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownQueryTest#testQuery().mjava","sourceNew":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    DrillDownQuery q = new DrillDownQuery(defaultParams);\n    q.add(new CategoryPath(\"a\"));\n    QueryUtils.check(q);\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(defaultParams, q);\n    q2.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    DrillDownQuery q3 = new DrillDownQuery(defaultParams);\n    q3.add(new CategoryPath(\"a\"));\n    q3.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(defaultParams, fooQuery);\n    q4.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","sourceOld":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    DrillDownQuery q = new DrillDownQuery(defaultParams);\n    q.add(new CategoryPath(\"a\"));\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(defaultParams, q);\n    q2.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    DrillDownQuery q3 = new DrillDownQuery(defaultParams);\n    q3.add(new CategoryPath(\"a\"));\n    q3.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(defaultParams, fooQuery);\n    q4.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownQueryTest#testQuery().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownQueryTest#testQuery().mjava","sourceNew":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    DrillDownQuery q = new DrillDownQuery(defaultParams);\n    q.add(new FacetLabel(\"a\"));\n    QueryUtils.check(q);\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(defaultParams, q);\n    q2.add(new FacetLabel(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    DrillDownQuery q3 = new DrillDownQuery(defaultParams);\n    q3.add(new FacetLabel(\"a\"));\n    q3.add(new FacetLabel(\"b\"));\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(defaultParams, fooQuery);\n    q4.add(new FacetLabel(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","sourceOld":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    DrillDownQuery q = new DrillDownQuery(defaultParams);\n    q.add(new CategoryPath(\"a\"));\n    QueryUtils.check(q);\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(defaultParams, q);\n    q2.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    DrillDownQuery q3 = new DrillDownQuery(defaultParams);\n    q3.add(new CategoryPath(\"a\"));\n    q3.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(defaultParams, fooQuery);\n    q4.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca39562b2d7687143fdb601d5de1b8f7b778f1db","date":1385299806,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestDrillDownQuery#testQuery().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownQueryTest#testQuery().mjava","sourceNew":"  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    SimpleDrillDownQuery q = new SimpleDrillDownQuery(config);\n    q.add(\"a\");\n    System.out.println(\"q=\" + q);\n    QueryUtils.check(q);\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    SimpleDrillDownQuery q2 = new SimpleDrillDownQuery(config, q);\n    q2.add(\"b\");\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    SimpleDrillDownQuery q3 = new SimpleDrillDownQuery(config);\n    q3.add(\"a\");\n    q3.add(\"b\");\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    SimpleDrillDownQuery q4 = new SimpleDrillDownQuery(config, fooQuery);\n    q4.add(\"b\");\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","sourceOld":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    DrillDownQuery q = new DrillDownQuery(defaultParams);\n    q.add(new FacetLabel(\"a\"));\n    QueryUtils.check(q);\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(defaultParams, q);\n    q2.add(new FacetLabel(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    DrillDownQuery q3 = new DrillDownQuery(defaultParams);\n    q3.add(new FacetLabel(\"a\"));\n    q3.add(new FacetLabel(\"b\"));\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(defaultParams, fooQuery);\n    q4.add(new FacetLabel(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownQueryTest#testQuery().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    DrillDownQuery q = new DrillDownQuery(defaultParams);\n    q.add(new CategoryPath(\"a\"));\n    QueryUtils.check(q);\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(defaultParams, q);\n    q2.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    DrillDownQuery q3 = new DrillDownQuery(defaultParams);\n    q3.add(new CategoryPath(\"a\"));\n    q3.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(defaultParams, fooQuery);\n    q4.add(new CategoryPath(\"b\"));\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a22ad352a73aa6ab982b6377e1714950edaf62f0":["f793470bad5ce8422502e33eaae65fc6a3271bd2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a22ad352a73aa6ab982b6377e1714950edaf62f0","ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a22ad352a73aa6ab982b6377e1714950edaf62f0"]},"commit2Childs":{"a22ad352a73aa6ab982b6377e1714950edaf62f0":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f793470bad5ce8422502e33eaae65fc6a3271bd2"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["a22ad352a73aa6ab982b6377e1714950edaf62f0"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["ca39562b2d7687143fdb601d5de1b8f7b778f1db"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}