{"path":"contrib/analyzers/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#test().mjava","commits":[{"id":"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f","date":1215042831,"type":0,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws IOException {\n\n    PrefixAwareTokenFilter ts;\n\n    ts = new PrefixAwareTokenFilter(\n        new SingleTokenTokenStream(new Token(\"a\", 0, 1)),\n        new SingleTokenTokenStream(new Token(\"b\", 0, 1)));\n    assertNext(ts, \"a\", 0, 1);\n    assertNext(ts, \"b\", 1, 2);\n    assertNull(ts.next());\n\n\n    // prefix and suffix using 2x prefix\n\n    ts = new PrefixAwareTokenFilter(new SingleTokenTokenStream(new Token(\"^\", 0, 0)), new WhitespaceTokenizer(new StringReader(\"hello world\")));\n    ts = new PrefixAwareTokenFilter(ts, new SingleTokenTokenStream(new Token(\"$\", 0, 0)));\n\n    assertNext(ts, \"^\", 0, 0);\n    assertNext(ts, \"hello\", 0, 5);\n    assertNext(ts, \"world\", 6, 11);\n    assertNext(ts, \"$\", 11, 11);\n    assertNull(ts.next());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#test().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n\n    PrefixAwareTokenFilter ts;\n\n    ts = new PrefixAwareTokenFilter(\n        new SingleTokenTokenStream(createToken(\"a\", 0, 1)),\n        new SingleTokenTokenStream(createToken(\"b\", 0, 1)));\n    final Token reusableToken = new Token();\n    assertNext(ts, reusableToken, \"a\", 0, 1);\n    assertNext(ts, reusableToken, \"b\", 1, 2);\n    assertNull(ts.next(reusableToken));\n\n\n    // prefix and suffix using 2x prefix\n\n    ts = new PrefixAwareTokenFilter(new SingleTokenTokenStream(createToken(\"^\", 0, 0)), new WhitespaceTokenizer(new StringReader(\"hello world\")));\n    ts = new PrefixAwareTokenFilter(ts, new SingleTokenTokenStream(createToken(\"$\", 0, 0)));\n\n    assertNext(ts, reusableToken, \"^\", 0, 0);\n    assertNext(ts, reusableToken, \"hello\", 0, 5);\n    assertNext(ts, reusableToken, \"world\", 6, 11);\n    assertNext(ts, reusableToken, \"$\", 11, 11);\n    assertNull(ts.next(reusableToken));\n  }\n\n","sourceOld":"  public void test() throws IOException {\n\n    PrefixAwareTokenFilter ts;\n\n    ts = new PrefixAwareTokenFilter(\n        new SingleTokenTokenStream(new Token(\"a\", 0, 1)),\n        new SingleTokenTokenStream(new Token(\"b\", 0, 1)));\n    assertNext(ts, \"a\", 0, 1);\n    assertNext(ts, \"b\", 1, 2);\n    assertNull(ts.next());\n\n\n    // prefix and suffix using 2x prefix\n\n    ts = new PrefixAwareTokenFilter(new SingleTokenTokenStream(new Token(\"^\", 0, 0)), new WhitespaceTokenizer(new StringReader(\"hello world\")));\n    ts = new PrefixAwareTokenFilter(ts, new SingleTokenTokenStream(new Token(\"$\", 0, 0)));\n\n    assertNext(ts, \"^\", 0, 0);\n    assertNext(ts, \"hello\", 0, 5);\n    assertNext(ts, \"world\", 6, 11);\n    assertNext(ts, \"$\", 11, 11);\n    assertNull(ts.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#test().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n\n    PrefixAwareTokenFilter ts;\n\n    ts = new PrefixAwareTokenFilter(\n        new SingleTokenTokenStream(createToken(\"a\", 0, 1)),\n        new SingleTokenTokenStream(createToken(\"b\", 0, 1)));\n    final Token reusableToken = new Token();\n    assertNext(ts, reusableToken, \"a\", 0, 1);\n    assertNext(ts, reusableToken, \"b\", 1, 2);\n    assertNull(ts.next(reusableToken));\n\n\n    // prefix and suffix using 2x prefix\n\n    ts = new PrefixAwareTokenFilter(new SingleTokenTokenStream(createToken(\"^\", 0, 0)), new WhitespaceTokenizer(new StringReader(\"hello world\")));\n    ts = new PrefixAwareTokenFilter(ts, new SingleTokenTokenStream(createToken(\"$\", 0, 0)));\n\n    assertNext(ts, reusableToken, \"^\", 0, 0);\n    assertNext(ts, reusableToken, \"hello\", 0, 5);\n    assertNext(ts, reusableToken, \"world\", 6, 11);\n    assertNext(ts, reusableToken, \"$\", 11, 11);\n    assertNull(ts.next(reusableToken));\n  }\n\n","sourceOld":"  public void test() throws IOException {\n\n    PrefixAwareTokenFilter ts;\n\n    ts = new PrefixAwareTokenFilter(\n        new SingleTokenTokenStream(createToken(\"a\", 0, 1)),\n        new SingleTokenTokenStream(createToken(\"b\", 0, 1)));\n    final Token reusableToken = new Token();\n    assertNext(ts, reusableToken, \"a\", 0, 1);\n    assertNext(ts, reusableToken, \"b\", 1, 2);\n    assertNull(ts.next(reusableToken));\n\n\n    // prefix and suffix using 2x prefix\n\n    ts = new PrefixAwareTokenFilter(new SingleTokenTokenStream(createToken(\"^\", 0, 0)), new WhitespaceTokenizer(new StringReader(\"hello world\")));\n    ts = new PrefixAwareTokenFilter(ts, new SingleTokenTokenStream(createToken(\"$\", 0, 0)));\n\n    assertNext(ts, reusableToken, \"^\", 0, 0);\n    assertNext(ts, reusableToken, \"hello\", 0, 5);\n    assertNext(ts, reusableToken, \"world\", 6, 11);\n    assertNext(ts, reusableToken, \"$\", 11, 11);\n    assertNull(ts.next(reusableToken));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["660fdd379b3fe276cd3a63d9c5852cef6dd5d54f"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["660fdd379b3fe276cd3a63d9c5852cef6dd5d54f"],"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}