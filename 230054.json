{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelD#score(BasicStats,double).mjava","commits":[{"id":"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","date":1508899684,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelD#score(BasicStats,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelD#score(BasicStats,float).mjava","sourceNew":"  @Override\n  public final double score(BasicStats stats, double tfn) {\n    // we have to ensure phi is always < 1 for tiny TTF values, otherwise nphi can go negative,\n    // resulting in NaN. cleanest way is to unconditionally always add tfn to totalTermFreq\n    // to create a 'normalized' F.\n    double F = stats.getTotalTermFreq() + 1 + tfn;\n    double phi = tfn / F;\n    double nphi = 1 - phi;\n    double p = 1.0 / (stats.getNumberOfDocuments() + 1);\n    double D = phi * log2(phi / p) + nphi * log2(nphi / (1 - p));\n    return D * F + 0.5 * log2(1 + 2 * Math.PI * tfn * nphi);\n  }\n\n","sourceOld":"  @Override\n  public final float score(BasicStats stats, float tfn) {\n    // we have to ensure phi is always < 1 for tiny TTF values, otherwise nphi can go negative,\n    // resulting in NaN. cleanest way is to unconditionally always add tfn to totalTermFreq\n    // to create a 'normalized' F.\n    double F = stats.getTotalTermFreq() + 1 + tfn;\n    double phi = (double)tfn / F;\n    double nphi = 1 - phi;\n    double p = 1.0 / (stats.getNumberOfDocuments() + 1);\n    double D = phi * log2(phi / p) + nphi * log2(nphi / (1 - p));\n    return (float)(D * F + 0.5 * log2(1 + 2 * Math.PI * tfn * nphi));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83d379038462cf6dcf64cc9e9a49053c4bb78011","date":1512580797,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelD#score(BasicStats,double).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final double score(BasicStats stats, double tfn) {\n    // we have to ensure phi is always < 1 for tiny TTF values, otherwise nphi can go negative,\n    // resulting in NaN. cleanest way is to unconditionally always add tfn to totalTermFreq\n    // to create a 'normalized' F.\n    double F = stats.getTotalTermFreq() + 1 + tfn;\n    double phi = tfn / F;\n    double nphi = 1 - phi;\n    double p = 1.0 / (stats.getNumberOfDocuments() + 1);\n    double D = phi * log2(phi / p) + nphi * log2(nphi / (1 - p));\n    return D * F + 0.5 * log2(1 + 2 * Math.PI * tfn * nphi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83d379038462cf6dcf64cc9e9a49053c4bb78011":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83d379038462cf6dcf64cc9e9a49053c4bb78011"]},"commit2Childs":{"83d379038462cf6dcf64cc9e9a49053c4bb78011":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["83d379038462cf6dcf64cc9e9a49053c4bb78011"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}