{"path":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(Path,LockFactory).mjava","commits":[{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(Path,LockFactory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","sourceNew":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException if there is a low-level I/O error\n   */\n  protected FSDirectory(Path path, LockFactory lockFactory) throws IOException {\n    // new ctors use always NativeFSLockFactory as default:\n    if (lockFactory == null) {\n      lockFactory = new NativeFSLockFactory();\n    }\n    \n    Files.createDirectories(path);  // create directory, if it doesnt exist\n    directory = path.toRealPath();\n\n    setLockFactory(lockFactory);\n  }\n\n","sourceOld":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException if there is a low-level I/O error\n   */\n  protected FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    // new ctors use always NativeFSLockFactory as default:\n    if (lockFactory == null) {\n      lockFactory = new NativeFSLockFactory();\n    }\n    directory = getCanonicalPath(path);\n\n    if (directory.exists() && !directory.isDirectory())\n      throw new NoSuchDirectoryException(\"file '\" + directory + \"' exists but is not a directory\");\n\n    setLockFactory(lockFactory);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(Path,LockFactory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(Path,LockFactory).mjava","sourceNew":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException if there is a low-level I/O error\n   */\n  protected FSDirectory(Path path, LockFactory lockFactory) throws IOException {\n    super(lockFactory);\n    Files.createDirectories(path);  // create directory, if it doesnt exist\n    directory = path.toRealPath();\n  }\n\n","sourceOld":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException if there is a low-level I/O error\n   */\n  protected FSDirectory(Path path, LockFactory lockFactory) throws IOException {\n    // new ctors use always NativeFSLockFactory as default:\n    if (lockFactory == null) {\n      lockFactory = new NativeFSLockFactory();\n    }\n    \n    Files.createDirectories(path);  // create directory, if it doesnt exist\n    directory = path.toRealPath();\n\n    setLockFactory(lockFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1db7bd2068060be0b68fcca95c8270c7cb60f6c","date":1419003415,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(Path,LockFactory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(Path,LockFactory).mjava","sourceNew":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException if there is a low-level I/O error\n   */\n  protected FSDirectory(Path path, LockFactory lockFactory) throws IOException {\n    super(lockFactory);\n    Files.createDirectories(path);  // create directory, if it doesn't exist\n    directory = path.toRealPath();\n  }\n\n","sourceOld":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException if there is a low-level I/O error\n   */\n  protected FSDirectory(Path path, LockFactory lockFactory) throws IOException {\n    super(lockFactory);\n    Files.createDirectories(path);  // create directory, if it doesnt exist\n    directory = path.toRealPath();\n  }\n\n","bugFix":null,"bugIntro":["32da05d97a45ece3cec1f9d79cf153e2e845d08c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c47239343a3c69fe033db153d3152f318abc5d6","date":1423088431,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(Path,LockFactory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(Path,LockFactory).mjava","sourceNew":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * The directory is created at the named location if it does not yet exist.\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException if there is a low-level I/O error\n   */\n  protected FSDirectory(Path path, LockFactory lockFactory) throws IOException {\n    super(lockFactory);\n    Files.createDirectories(path);  // create directory, if it doesn't exist\n    directory = path.toRealPath();\n  }\n\n","sourceOld":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException if there is a low-level I/O error\n   */\n  protected FSDirectory(Path path, LockFactory lockFactory) throws IOException {\n    super(lockFactory);\n    Files.createDirectories(path);  // create directory, if it doesn't exist\n    directory = path.toRealPath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32da05d97a45ece3cec1f9d79cf153e2e845d08c","date":1435709797,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(Path,LockFactory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(Path,LockFactory).mjava","sourceNew":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * The directory is created at the named location if it does not yet exist.\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException if there is a low-level I/O error\n   */\n  protected FSDirectory(Path path, LockFactory lockFactory) throws IOException {\n    super(lockFactory);\n    // If only read access is permitted, createDirectories fails even if the directory already exists.\n    if (!Files.isDirectory(path)) {\n      Files.createDirectories(path);  // create directory, if it doesn't exist\n    }\n    directory = path.toRealPath();\n  }\n\n","sourceOld":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * The directory is created at the named location if it does not yet exist.\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException if there is a low-level I/O error\n   */\n  protected FSDirectory(Path path, LockFactory lockFactory) throws IOException {\n    super(lockFactory);\n    Files.createDirectories(path);  // create directory, if it doesn't exist\n    directory = path.toRealPath();\n  }\n\n","bugFix":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf71adfa3cada5038ae8b7b27c514d6755ea3290","date":1442058200,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(Path,LockFactory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(Path,LockFactory).mjava","sourceNew":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * The directory is created at the named location if it does not yet exist.\n   * \n   * <p>{@code FSDirectory} resolves the given Path to a canonical /\n   * real path to ensure it can correctly lock the index directory and no other process\n   * can interfere with changing possible symlinks to the index directory inbetween.\n   * If you want to use symlinks and change them dynamically, close all\n   * {@code IndexWriters} and create a new {@code FSDirecory} instance.\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException if there is a low-level I/O error\n   */\n  protected FSDirectory(Path path, LockFactory lockFactory) throws IOException {\n    super(lockFactory);\n    // If only read access is permitted, createDirectories fails even if the directory already exists.\n    if (!Files.isDirectory(path)) {\n      Files.createDirectories(path);  // create directory, if it doesn't exist\n    }\n    directory = path.toRealPath();\n  }\n\n","sourceOld":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * The directory is created at the named location if it does not yet exist.\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException if there is a low-level I/O error\n   */\n  protected FSDirectory(Path path, LockFactory lockFactory) throws IOException {\n    super(lockFactory);\n    // If only read access is permitted, createDirectories fails even if the directory already exists.\n    if (!Files.isDirectory(path)) {\n      Files.createDirectories(path);  // create directory, if it doesn't exist\n    }\n    directory = path.toRealPath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","date":1550036130,"type":3,"author":"Bruno P. Kinoshita","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(Path,LockFactory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(Path,LockFactory).mjava","sourceNew":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * The directory is created at the named location if it does not yet exist.\n   * \n   * <p>{@code FSDirectory} resolves the given Path to a canonical /\n   * real path to ensure it can correctly lock the index directory and no other process\n   * can interfere with changing possible symlinks to the index directory inbetween.\n   * If you want to use symlinks and change them dynamically, close all\n   * {@code IndexWriters} and create a new {@code FSDirectory} instance.\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException if there is a low-level I/O error\n   */\n  protected FSDirectory(Path path, LockFactory lockFactory) throws IOException {\n    super(lockFactory);\n    // If only read access is permitted, createDirectories fails even if the directory already exists.\n    if (!Files.isDirectory(path)) {\n      Files.createDirectories(path);  // create directory, if it doesn't exist\n    }\n    directory = path.toRealPath();\n  }\n\n","sourceOld":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * The directory is created at the named location if it does not yet exist.\n   * \n   * <p>{@code FSDirectory} resolves the given Path to a canonical /\n   * real path to ensure it can correctly lock the index directory and no other process\n   * can interfere with changing possible symlinks to the index directory inbetween.\n   * If you want to use symlinks and change them dynamically, close all\n   * {@code IndexWriters} and create a new {@code FSDirecory} instance.\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException if there is a low-level I/O error\n   */\n  protected FSDirectory(Path path, LockFactory lockFactory) throws IOException {\n    super(lockFactory);\n    // If only read access is permitted, createDirectories fails even if the directory already exists.\n    if (!Files.isDirectory(path)) {\n      Files.createDirectories(path);  // create directory, if it doesn't exist\n    }\n    directory = path.toRealPath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c47239343a3c69fe033db153d3152f318abc5d6":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["cf71adfa3cada5038ae8b7b27c514d6755ea3290"],"32da05d97a45ece3cec1f9d79cf153e2e845d08c":["4c47239343a3c69fe033db153d3152f318abc5d6"],"285cdc737de75b7cc7c284a156b20214deb67bca":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf71adfa3cada5038ae8b7b27c514d6755ea3290":["32da05d97a45ece3cec1f9d79cf153e2e845d08c"],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["285cdc737de75b7cc7c284a156b20214deb67bca"],"f4abec28b874149a7223e32cc7a01704c27790de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"]},"commit2Childs":{"4c47239343a3c69fe033db153d3152f318abc5d6":["32da05d97a45ece3cec1f9d79cf153e2e845d08c"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"32da05d97a45ece3cec1f9d79cf153e2e845d08c":["cf71adfa3cada5038ae8b7b27c514d6755ea3290"],"285cdc737de75b7cc7c284a156b20214deb67bca":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4abec28b874149a7223e32cc7a01704c27790de"],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["4c47239343a3c69fe033db153d3152f318abc5d6"],"cf71adfa3cada5038ae8b7b27c514d6755ea3290":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"f4abec28b874149a7223e32cc7a01704c27790de":["285cdc737de75b7cc7c284a156b20214deb67bca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}