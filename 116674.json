{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#parseOptions(String[]).mjava","commits":[{"id":"ca56618660563c407aafdbd4ee4175ba2c73e6dc","date":1448923608,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#parseOptions(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parse command line args into fields\n   * @param args The command line arguments\n   * @return An Options struct\n   * @throws IllegalArgumentException if any of the CLI args are invalid\n   */\n  public static Options parseOptions(String[] args) {\n    Options opts = new Options();\n\n    int i = 0;\n    while(i < args.length) {\n      String arg = args[i];\n      if (\"-fast\".equals(arg)) {\n        opts.doChecksumsOnly = true;\n      } else if (\"-exorcise\".equals(arg)) {\n        opts.doExorcise = true;\n      } else if (\"-crossCheckTermVectors\".equals(arg)) {\n        opts.doCrossCheckTermVectors = true;\n      } else if (arg.equals(\"-verbose\")) {\n        opts.verbose = true;\n      } else if (arg.equals(\"-segment\")) {\n        if (i == args.length-1) {\n          throw new IllegalArgumentException(\"ERROR: missing name for -segment option\");\n        }\n        i++;\n        opts.onlySegments.add(args[i]);\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (i == args.length - 1) {\n          throw new IllegalArgumentException(\"ERROR: missing value for -dir-impl option\");\n        }\n        i++;\n        opts.dirImpl = args[i];\n      } else {\n        if (opts.indexPath != null) {\n          throw new IllegalArgumentException(\"ERROR: unexpected extra argument '\" + args[i] + \"'\");\n        }\n        opts.indexPath = args[i];\n      }\n      i++;\n    }\n\n    if (opts.indexPath == null) {\n      throw new IllegalArgumentException(\"\\nERROR: index path not specified\" +\n                         \"\\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-crossCheckTermVectors] [-segment X] [-segment Y] [-dir-impl X]\\n\" +\n                         \"\\n\" +\n                         \"  -exorcise: actually write a new segments_N file, removing any problematic segments\\n\" +\n                         \"  -fast: just verify file checksums, omitting logical integrity checks\\n\" + \n                         \"  -crossCheckTermVectors: verifies that term vectors match postings; THIS IS VERY SLOW!\\n\" +\n                         \"  -codec X: when exorcising, codec to write the new segments_N file with\\n\" +\n                         \"  -verbose: print additional details\\n\" +\n                         \"  -segment X: only check the specified segments.  This can be specified multiple\\n\" + \n                         \"              times, to check more than one segment, eg '-segment _2 -segment _a'.\\n\" +\n                         \"              You can't use this with the -exorcise option\\n\" +\n                         \"  -dir-impl X: use a specific \" + FSDirectory.class.getSimpleName() + \" implementation. \" +\n                         \"If no package is specified the \" + FSDirectory.class.getPackage().getName() + \" package will be used.\\n\" +\n                         \"\\n\" +\n                         \"**WARNING**: -exorcise *LOSES DATA*. This should only be used on an emergency basis as it will cause\\n\" +\n                         \"documents (perhaps many) to be permanently removed from the index.  Always make\\n\" +\n                         \"a backup copy of your index before running this!  Do not run this tool on an index\\n\" +\n                         \"that is actively being written to.  You have been warned!\\n\" +\n                         \"\\n\" +\n                         \"Run without -exorcise, this tool will open the index, report version information\\n\" +\n                         \"and report any exceptions it hits and what action it would take if -exorcise were\\n\" +\n                         \"specified.  With -exorcise, this tool will remove any segments that have issues and\\n\" + \n                         \"write a new segments_N file.  This means all documents contained in the affected\\n\" +\n                         \"segments will be removed.\\n\" +\n                         \"\\n\" +\n                         \"This tool exits with exit code 1 if the index cannot be opened or has any\\n\" +\n                         \"corruption, else 0.\\n\");\n    }\n\n    if (opts.onlySegments.size() == 0) {\n      opts.onlySegments = null;\n    } else if (opts.doExorcise) {\n      throw new IllegalArgumentException(\"ERROR: cannot specify both -exorcise and -segment\");\n    }\n    \n    if (opts.doChecksumsOnly && opts.doCrossCheckTermVectors) {\n      throw new IllegalArgumentException(\"ERROR: cannot specify both -fast and -crossCheckTermVectors\");\n    }\n\n    return opts;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0e5953a07337cd41bcde610503024c07073b26","date":1519143251,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#parseOptions(String[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#parseOptions(String[]).mjava","sourceNew":"  /**\n   * Parse command line args into fields\n   * @param args The command line arguments\n   * @return An Options struct\n   * @throws IllegalArgumentException if any of the CLI args are invalid\n   */\n  public static Options parseOptions(String[] args) {\n    Options opts = new Options();\n\n    int i = 0;\n    while(i < args.length) {\n      String arg = args[i];\n      if (\"-fast\".equals(arg)) {\n        opts.doChecksumsOnly = true;\n      } else if (\"-exorcise\".equals(arg)) {\n        opts.doExorcise = true;\n      } else if (\"-doSlowChecks\".equals(arg)) {\n        System.err.println(\"-doSlowChecks is deprecated, use -slow instead\");\n        opts.doSlowChecks = true;\n      } else if (\"-slow\".equals(arg)) {\n        opts.doSlowChecks = true;\n      } else if (arg.equals(\"-verbose\")) {\n        opts.verbose = true;\n      } else if (arg.equals(\"-segment\")) {\n        if (i == args.length-1) {\n          throw new IllegalArgumentException(\"ERROR: missing name for -segment option\");\n        }\n        i++;\n        opts.onlySegments.add(args[i]);\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (i == args.length - 1) {\n          throw new IllegalArgumentException(\"ERROR: missing value for -dir-impl option\");\n        }\n        i++;\n        opts.dirImpl = args[i];\n      } else {\n        if (opts.indexPath != null) {\n          throw new IllegalArgumentException(\"ERROR: unexpected extra argument '\" + args[i] + \"'\");\n        }\n        opts.indexPath = args[i];\n      }\n      i++;\n    }\n\n    if (opts.indexPath == null) {\n      throw new IllegalArgumentException(\"\\nERROR: index path not specified\" +\n                         \"\\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-doSlowChecks] [-segment X] [-segment Y] [-dir-impl X]\\n\" +\n                         \"\\n\" +\n                         \"  -exorcise: actually write a new segments_N file, removing any problematic segments\\n\" +\n                         \"  -fast: just verify file checksums, omitting logical integrity checks\\n\" + \n                         \"  -slow: do additional slow checks; THIS IS VERY SLOW!\\n\" +\n                         \"  -codec X: when exorcising, codec to write the new segments_N file with\\n\" +\n                         \"  -verbose: print additional details\\n\" +\n                         \"  -segment X: only check the specified segments.  This can be specified multiple\\n\" + \n                         \"              times, to check more than one segment, eg '-segment _2 -segment _a'.\\n\" +\n                         \"              You can't use this with the -exorcise option\\n\" +\n                         \"  -dir-impl X: use a specific \" + FSDirectory.class.getSimpleName() + \" implementation. \" +\n                         \"If no package is specified the \" + FSDirectory.class.getPackage().getName() + \" package will be used.\\n\" +\n                         \"\\n\" +\n                         \"**WARNING**: -exorcise *LOSES DATA*. This should only be used on an emergency basis as it will cause\\n\" +\n                         \"documents (perhaps many) to be permanently removed from the index.  Always make\\n\" +\n                         \"a backup copy of your index before running this!  Do not run this tool on an index\\n\" +\n                         \"that is actively being written to.  You have been warned!\\n\" +\n                         \"\\n\" +\n                         \"Run without -exorcise, this tool will open the index, report version information\\n\" +\n                         \"and report any exceptions it hits and what action it would take if -exorcise were\\n\" +\n                         \"specified.  With -exorcise, this tool will remove any segments that have issues and\\n\" + \n                         \"write a new segments_N file.  This means all documents contained in the affected\\n\" +\n                         \"segments will be removed.\\n\" +\n                         \"\\n\" +\n                         \"This tool exits with exit code 1 if the index cannot be opened or has any\\n\" +\n                         \"corruption, else 0.\\n\");\n    }\n\n    if (opts.onlySegments.size() == 0) {\n      opts.onlySegments = null;\n    } else if (opts.doExorcise) {\n      throw new IllegalArgumentException(\"ERROR: cannot specify both -exorcise and -segment\");\n    }\n    \n    if (opts.doChecksumsOnly && opts.doSlowChecks) {\n      throw new IllegalArgumentException(\"ERROR: cannot specify both -fast and -slow\");\n    }\n\n    return opts;\n  }\n\n","sourceOld":"  /**\n   * Parse command line args into fields\n   * @param args The command line arguments\n   * @return An Options struct\n   * @throws IllegalArgumentException if any of the CLI args are invalid\n   */\n  public static Options parseOptions(String[] args) {\n    Options opts = new Options();\n\n    int i = 0;\n    while(i < args.length) {\n      String arg = args[i];\n      if (\"-fast\".equals(arg)) {\n        opts.doChecksumsOnly = true;\n      } else if (\"-exorcise\".equals(arg)) {\n        opts.doExorcise = true;\n      } else if (\"-crossCheckTermVectors\".equals(arg)) {\n        opts.doCrossCheckTermVectors = true;\n      } else if (arg.equals(\"-verbose\")) {\n        opts.verbose = true;\n      } else if (arg.equals(\"-segment\")) {\n        if (i == args.length-1) {\n          throw new IllegalArgumentException(\"ERROR: missing name for -segment option\");\n        }\n        i++;\n        opts.onlySegments.add(args[i]);\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (i == args.length - 1) {\n          throw new IllegalArgumentException(\"ERROR: missing value for -dir-impl option\");\n        }\n        i++;\n        opts.dirImpl = args[i];\n      } else {\n        if (opts.indexPath != null) {\n          throw new IllegalArgumentException(\"ERROR: unexpected extra argument '\" + args[i] + \"'\");\n        }\n        opts.indexPath = args[i];\n      }\n      i++;\n    }\n\n    if (opts.indexPath == null) {\n      throw new IllegalArgumentException(\"\\nERROR: index path not specified\" +\n                         \"\\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-crossCheckTermVectors] [-segment X] [-segment Y] [-dir-impl X]\\n\" +\n                         \"\\n\" +\n                         \"  -exorcise: actually write a new segments_N file, removing any problematic segments\\n\" +\n                         \"  -fast: just verify file checksums, omitting logical integrity checks\\n\" + \n                         \"  -crossCheckTermVectors: verifies that term vectors match postings; THIS IS VERY SLOW!\\n\" +\n                         \"  -codec X: when exorcising, codec to write the new segments_N file with\\n\" +\n                         \"  -verbose: print additional details\\n\" +\n                         \"  -segment X: only check the specified segments.  This can be specified multiple\\n\" + \n                         \"              times, to check more than one segment, eg '-segment _2 -segment _a'.\\n\" +\n                         \"              You can't use this with the -exorcise option\\n\" +\n                         \"  -dir-impl X: use a specific \" + FSDirectory.class.getSimpleName() + \" implementation. \" +\n                         \"If no package is specified the \" + FSDirectory.class.getPackage().getName() + \" package will be used.\\n\" +\n                         \"\\n\" +\n                         \"**WARNING**: -exorcise *LOSES DATA*. This should only be used on an emergency basis as it will cause\\n\" +\n                         \"documents (perhaps many) to be permanently removed from the index.  Always make\\n\" +\n                         \"a backup copy of your index before running this!  Do not run this tool on an index\\n\" +\n                         \"that is actively being written to.  You have been warned!\\n\" +\n                         \"\\n\" +\n                         \"Run without -exorcise, this tool will open the index, report version information\\n\" +\n                         \"and report any exceptions it hits and what action it would take if -exorcise were\\n\" +\n                         \"specified.  With -exorcise, this tool will remove any segments that have issues and\\n\" + \n                         \"write a new segments_N file.  This means all documents contained in the affected\\n\" +\n                         \"segments will be removed.\\n\" +\n                         \"\\n\" +\n                         \"This tool exits with exit code 1 if the index cannot be opened or has any\\n\" +\n                         \"corruption, else 0.\\n\");\n    }\n\n    if (opts.onlySegments.size() == 0) {\n      opts.onlySegments = null;\n    } else if (opts.doExorcise) {\n      throw new IllegalArgumentException(\"ERROR: cannot specify both -exorcise and -segment\");\n    }\n    \n    if (opts.doChecksumsOnly && opts.doCrossCheckTermVectors) {\n      throw new IllegalArgumentException(\"ERROR: cannot specify both -fast and -crossCheckTermVectors\");\n    }\n\n    return opts;\n  }\n\n","bugFix":null,"bugIntro":["56caf4e83cd6eedac126c629738fd239c4acbd12"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56caf4e83cd6eedac126c629738fd239c4acbd12","date":1519150117,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#parseOptions(String[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#parseOptions(String[]).mjava","sourceNew":"  /**\n   * Parse command line args into fields\n   * @param args The command line arguments\n   * @return An Options struct\n   * @throws IllegalArgumentException if any of the CLI args are invalid\n   */\n  @SuppressForbidden(reason = \"System.err required: command line tool\")\n  public static Options parseOptions(String[] args) {\n    Options opts = new Options();\n\n    int i = 0;\n    while(i < args.length) {\n      String arg = args[i];\n      if (\"-fast\".equals(arg)) {\n        opts.doChecksumsOnly = true;\n      } else if (\"-exorcise\".equals(arg)) {\n        opts.doExorcise = true;\n      } else if (\"-crossCheckTermVectors\".equals(arg)) {\n        System.err.println(\"-crossCheckTermVectors is deprecated, use -slow instead\");\n        opts.doSlowChecks = true;\n      } else if (\"-slow\".equals(arg)) {\n        opts.doSlowChecks = true;\n      } else if (arg.equals(\"-verbose\")) {\n        opts.verbose = true;\n      } else if (arg.equals(\"-segment\")) {\n        if (i == args.length-1) {\n          throw new IllegalArgumentException(\"ERROR: missing name for -segment option\");\n        }\n        i++;\n        opts.onlySegments.add(args[i]);\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (i == args.length - 1) {\n          throw new IllegalArgumentException(\"ERROR: missing value for -dir-impl option\");\n        }\n        i++;\n        opts.dirImpl = args[i];\n      } else {\n        if (opts.indexPath != null) {\n          throw new IllegalArgumentException(\"ERROR: unexpected extra argument '\" + args[i] + \"'\");\n        }\n        opts.indexPath = args[i];\n      }\n      i++;\n    }\n\n    if (opts.indexPath == null) {\n      throw new IllegalArgumentException(\"\\nERROR: index path not specified\" +\n                         \"\\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-slow] [-segment X] [-segment Y] [-dir-impl X]\\n\" +\n                         \"\\n\" +\n                         \"  -exorcise: actually write a new segments_N file, removing any problematic segments\\n\" +\n                         \"  -fast: just verify file checksums, omitting logical integrity checks\\n\" + \n                         \"  -slow: do additional slow checks; THIS IS VERY SLOW!\\n\" +\n                         \"  -codec X: when exorcising, codec to write the new segments_N file with\\n\" +\n                         \"  -verbose: print additional details\\n\" +\n                         \"  -segment X: only check the specified segments.  This can be specified multiple\\n\" + \n                         \"              times, to check more than one segment, eg '-segment _2 -segment _a'.\\n\" +\n                         \"              You can't use this with the -exorcise option\\n\" +\n                         \"  -dir-impl X: use a specific \" + FSDirectory.class.getSimpleName() + \" implementation. \" +\n                         \"If no package is specified the \" + FSDirectory.class.getPackage().getName() + \" package will be used.\\n\" +\n                         \"\\n\" +\n                         \"**WARNING**: -exorcise *LOSES DATA*. This should only be used on an emergency basis as it will cause\\n\" +\n                         \"documents (perhaps many) to be permanently removed from the index.  Always make\\n\" +\n                         \"a backup copy of your index before running this!  Do not run this tool on an index\\n\" +\n                         \"that is actively being written to.  You have been warned!\\n\" +\n                         \"\\n\" +\n                         \"Run without -exorcise, this tool will open the index, report version information\\n\" +\n                         \"and report any exceptions it hits and what action it would take if -exorcise were\\n\" +\n                         \"specified.  With -exorcise, this tool will remove any segments that have issues and\\n\" + \n                         \"write a new segments_N file.  This means all documents contained in the affected\\n\" +\n                         \"segments will be removed.\\n\" +\n                         \"\\n\" +\n                         \"This tool exits with exit code 1 if the index cannot be opened or has any\\n\" +\n                         \"corruption, else 0.\\n\");\n    }\n\n    if (opts.onlySegments.size() == 0) {\n      opts.onlySegments = null;\n    } else if (opts.doExorcise) {\n      throw new IllegalArgumentException(\"ERROR: cannot specify both -exorcise and -segment\");\n    }\n    \n    if (opts.doChecksumsOnly && opts.doSlowChecks) {\n      throw new IllegalArgumentException(\"ERROR: cannot specify both -fast and -slow\");\n    }\n\n    return opts;\n  }\n\n","sourceOld":"  /**\n   * Parse command line args into fields\n   * @param args The command line arguments\n   * @return An Options struct\n   * @throws IllegalArgumentException if any of the CLI args are invalid\n   */\n  public static Options parseOptions(String[] args) {\n    Options opts = new Options();\n\n    int i = 0;\n    while(i < args.length) {\n      String arg = args[i];\n      if (\"-fast\".equals(arg)) {\n        opts.doChecksumsOnly = true;\n      } else if (\"-exorcise\".equals(arg)) {\n        opts.doExorcise = true;\n      } else if (\"-doSlowChecks\".equals(arg)) {\n        System.err.println(\"-doSlowChecks is deprecated, use -slow instead\");\n        opts.doSlowChecks = true;\n      } else if (\"-slow\".equals(arg)) {\n        opts.doSlowChecks = true;\n      } else if (arg.equals(\"-verbose\")) {\n        opts.verbose = true;\n      } else if (arg.equals(\"-segment\")) {\n        if (i == args.length-1) {\n          throw new IllegalArgumentException(\"ERROR: missing name for -segment option\");\n        }\n        i++;\n        opts.onlySegments.add(args[i]);\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (i == args.length - 1) {\n          throw new IllegalArgumentException(\"ERROR: missing value for -dir-impl option\");\n        }\n        i++;\n        opts.dirImpl = args[i];\n      } else {\n        if (opts.indexPath != null) {\n          throw new IllegalArgumentException(\"ERROR: unexpected extra argument '\" + args[i] + \"'\");\n        }\n        opts.indexPath = args[i];\n      }\n      i++;\n    }\n\n    if (opts.indexPath == null) {\n      throw new IllegalArgumentException(\"\\nERROR: index path not specified\" +\n                         \"\\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-doSlowChecks] [-segment X] [-segment Y] [-dir-impl X]\\n\" +\n                         \"\\n\" +\n                         \"  -exorcise: actually write a new segments_N file, removing any problematic segments\\n\" +\n                         \"  -fast: just verify file checksums, omitting logical integrity checks\\n\" + \n                         \"  -slow: do additional slow checks; THIS IS VERY SLOW!\\n\" +\n                         \"  -codec X: when exorcising, codec to write the new segments_N file with\\n\" +\n                         \"  -verbose: print additional details\\n\" +\n                         \"  -segment X: only check the specified segments.  This can be specified multiple\\n\" + \n                         \"              times, to check more than one segment, eg '-segment _2 -segment _a'.\\n\" +\n                         \"              You can't use this with the -exorcise option\\n\" +\n                         \"  -dir-impl X: use a specific \" + FSDirectory.class.getSimpleName() + \" implementation. \" +\n                         \"If no package is specified the \" + FSDirectory.class.getPackage().getName() + \" package will be used.\\n\" +\n                         \"\\n\" +\n                         \"**WARNING**: -exorcise *LOSES DATA*. This should only be used on an emergency basis as it will cause\\n\" +\n                         \"documents (perhaps many) to be permanently removed from the index.  Always make\\n\" +\n                         \"a backup copy of your index before running this!  Do not run this tool on an index\\n\" +\n                         \"that is actively being written to.  You have been warned!\\n\" +\n                         \"\\n\" +\n                         \"Run without -exorcise, this tool will open the index, report version information\\n\" +\n                         \"and report any exceptions it hits and what action it would take if -exorcise were\\n\" +\n                         \"specified.  With -exorcise, this tool will remove any segments that have issues and\\n\" + \n                         \"write a new segments_N file.  This means all documents contained in the affected\\n\" +\n                         \"segments will be removed.\\n\" +\n                         \"\\n\" +\n                         \"This tool exits with exit code 1 if the index cannot be opened or has any\\n\" +\n                         \"corruption, else 0.\\n\");\n    }\n\n    if (opts.onlySegments.size() == 0) {\n      opts.onlySegments = null;\n    } else if (opts.doExorcise) {\n      throw new IllegalArgumentException(\"ERROR: cannot specify both -exorcise and -segment\");\n    }\n    \n    if (opts.doChecksumsOnly && opts.doSlowChecks) {\n      throw new IllegalArgumentException(\"ERROR: cannot specify both -fast and -slow\");\n    }\n\n    return opts;\n  }\n\n","bugFix":["9a0e5953a07337cd41bcde610503024c07073b26"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56caf4e83cd6eedac126c629738fd239c4acbd12":["9a0e5953a07337cd41bcde610503024c07073b26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9a0e5953a07337cd41bcde610503024c07073b26":["ca56618660563c407aafdbd4ee4175ba2c73e6dc"],"ca56618660563c407aafdbd4ee4175ba2c73e6dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56caf4e83cd6eedac126c629738fd239c4acbd12"]},"commit2Childs":{"56caf4e83cd6eedac126c629738fd239c4acbd12":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca56618660563c407aafdbd4ee4175ba2c73e6dc"],"9a0e5953a07337cd41bcde610503024c07073b26":["56caf4e83cd6eedac126c629738fd239c4acbd12"],"ca56618660563c407aafdbd4ee4175ba2c73e6dc":["9a0e5953a07337cd41bcde610503024c07073b26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}