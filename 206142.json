{"path":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Function[String,Boolean]).mjava","commits":[{"id":"f7fd147f6ec145b926803480f62aa12e2aad258e","date":1465448343,"type":0,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Function[String,Boolean]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Function<String, Boolean> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    while (true) {\n      // Trigger a fetch if needed.\n      firstChild(false);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.apply(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["282a69d7d427c265f321423b5a3f989aa16dab10","282a69d7d427c265f321423b5a3f989aa16dab10"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77c9633f72998c3815ffe21baa5f16d6e50f1e4a","date":1465453043,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Function[String,Boolean]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Function<String, Boolean> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    while (true) {\n      // Trigger a fetch if needed.\n      firstChild(false);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.apply(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c39bfb3a9d82dcb144aeef9d625f5f8d95619cc0","date":1465495031,"type":5,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Function[String,Boolean]).mjava","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    while (true) {\n      // Trigger a fetch if needed.\n      firstChild(false);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.apply(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Function<String, Boolean> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    while (true) {\n      // Trigger a fetch if needed.\n      firstChild(false);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.apply(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f7fd147f6ec145b926803480f62aa12e2aad258e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7fd147f6ec145b926803480f62aa12e2aad258e"],"c39bfb3a9d82dcb144aeef9d625f5f8d95619cc0":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c39bfb3a9d82dcb144aeef9d625f5f8d95619cc0"]},"commit2Childs":{"f7fd147f6ec145b926803480f62aa12e2aad258e":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7fd147f6ec145b926803480f62aa12e2aad258e","77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["c39bfb3a9d82dcb144aeef9d625f5f8d95619cc0"],"c39bfb3a9d82dcb144aeef9d625f5f8d95619cc0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}