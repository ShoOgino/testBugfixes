{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTestCheckIndex#testDeletedDocs(Directory).mjava","commits":[{"id":"ca56618660563c407aafdbd4ee4175ba2c73e6dc","date":1448923608,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTestCheckIndex#testDeletedDocs(Directory).mjava","pathOld":"/dev/null","sourceNew":"  public void testDeletedDocs(Directory dir) throws IOException {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                 .setMaxBufferedDocs(2));\n    for(int i=0;i<19;i++) {\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", \"aaa\"+i, customType));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.commit();\n    writer.deleteDocuments(new Term(\"field\",\"aaa5\"));\n    writer.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString(IOUtils.UTF_8));\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(18, seg.termIndexStatus.termCount);\n    assertEquals(18, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertNotNull(seg.diagnostics.get(\"java.vm.version\"));\n    assertNotNull(seg.diagnostics.get(\"java.runtime.version\"));\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    checker.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ca56618660563c407aafdbd4ee4175ba2c73e6dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ca56618660563c407aafdbd4ee4175ba2c73e6dc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca56618660563c407aafdbd4ee4175ba2c73e6dc"],"ca56618660563c407aafdbd4ee4175ba2c73e6dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}