{"path":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","pathOld":"/dev/null","sourceNew":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","sourceNew":null,"sourceOld":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","sourceNew":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","pathOld":"/dev/null","sourceNew":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b375ac28473e1310fa9ea99d95e9c6001e3719d5","date":1274116690,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","sourceNew":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase().trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","sourceNew":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","sourceNew":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","sourceNew":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(new NoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","sourceNew":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","sourceNew":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","sourceNew":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["4e8cc373c801e54cec75daf9f52792cb4b17f536","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b375ac28473e1310fa9ea99d95e9c6001e3719d5","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b375ac28473e1310fa9ea99d95e9c6001e3719d5":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3bb13258feba31ab676502787ab2e1779f129b7a":["b375ac28473e1310fa9ea99d95e9c6001e3719d5","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["b375ac28473e1310fa9ea99d95e9c6001e3719d5"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["b375ac28473e1310fa9ea99d95e9c6001e3719d5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"b375ac28473e1310fa9ea99d95e9c6001e3719d5":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}