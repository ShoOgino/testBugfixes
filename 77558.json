{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesField#newBoxQuery(String,double,double,double,double).mjava","commits":[{"id":"827a82bc4dd5d485dbe63f69e8429ecff24cb602","date":1485435575,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesField#newBoxQuery(String,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a query for matching a bounding box using doc values.\n   * This query is usually slow as it does not use an index structure and needs\n   * to verify documents one-by-one in order to know whether they match. It is\n   * best used wrapped in an {@link IndexOrDocValuesQuery} alongside a\n   * {@link LatLonPoint#newBoxQuery}.\n   */\n  public static Query newBoxQuery(String field, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    // exact double values of lat=90.0D and lon=180.0D must be treated special as they are not represented in the encoding\n    // and should not drag in extra bogus junk! TODO: should encodeCeil just throw ArithmeticException to be less trappy here?\n    if (minLatitude == 90.0) {\n      // range cannot match as 90.0 can never exist\n      return new MatchNoDocsQuery(\"LatLonDocValuesField.newBoxQuery with minLatitude=90.0\");\n    }\n    if (minLongitude == 180.0) {\n      if (maxLongitude == 180.0) {\n        // range cannot match as 180.0 can never exist\n        return new MatchNoDocsQuery(\"LatLonDocValuesField.newBoxQuery with minLongitude=maxLongitude=180.0\");\n      } else if (maxLongitude < minLongitude) {\n        // encodeCeil() with dateline wrapping!\n        minLongitude = -180.0;\n      }\n    }\n    return new LatLonDocValuesBoxQuery(field, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesField#newBoxQuery(String,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a query for matching a bounding box using doc values.\n   * This query is usually slow as it does not use an index structure and needs\n   * to verify documents one-by-one in order to know whether they match. It is\n   * best used wrapped in an {@link IndexOrDocValuesQuery} alongside a\n   * {@link LatLonPoint#newBoxQuery}.\n   */\n  public static Query newBoxQuery(String field, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    // exact double values of lat=90.0D and lon=180.0D must be treated special as they are not represented in the encoding\n    // and should not drag in extra bogus junk! TODO: should encodeCeil just throw ArithmeticException to be less trappy here?\n    if (minLatitude == 90.0) {\n      // range cannot match as 90.0 can never exist\n      return new MatchNoDocsQuery(\"LatLonDocValuesField.newBoxQuery with minLatitude=90.0\");\n    }\n    if (minLongitude == 180.0) {\n      if (maxLongitude == 180.0) {\n        // range cannot match as 180.0 can never exist\n        return new MatchNoDocsQuery(\"LatLonDocValuesField.newBoxQuery with minLongitude=maxLongitude=180.0\");\n      } else if (maxLongitude < minLongitude) {\n        // encodeCeil() with dateline wrapping!\n        minLongitude = -180.0;\n      }\n    }\n    return new LatLonDocValuesBoxQuery(field, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9970073fd3c04efd7374f975e45a61084b169ce9","date":1499179453,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesField#newSlowBoxQuery(String,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesField#newBoxQuery(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a query for matching a bounding box using doc values.\n   * This query is usually slow as it does not use an index structure and needs\n   * to verify documents one-by-one in order to know whether they match. It is\n   * best used wrapped in an {@link IndexOrDocValuesQuery} alongside a\n   * {@link LatLonPoint#newBoxQuery}.\n   */\n  public static Query newSlowBoxQuery(String field, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    // exact double values of lat=90.0D and lon=180.0D must be treated special as they are not represented in the encoding\n    // and should not drag in extra bogus junk! TODO: should encodeCeil just throw ArithmeticException to be less trappy here?\n    if (minLatitude == 90.0) {\n      // range cannot match as 90.0 can never exist\n      return new MatchNoDocsQuery(\"LatLonDocValuesField.newBoxQuery with minLatitude=90.0\");\n    }\n    if (minLongitude == 180.0) {\n      if (maxLongitude == 180.0) {\n        // range cannot match as 180.0 can never exist\n        return new MatchNoDocsQuery(\"LatLonDocValuesField.newBoxQuery with minLongitude=maxLongitude=180.0\");\n      } else if (maxLongitude < minLongitude) {\n        // encodeCeil() with dateline wrapping!\n        minLongitude = -180.0;\n      }\n    }\n    return new LatLonDocValuesBoxQuery(field, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","sourceOld":"  /**\n   * Create a query for matching a bounding box using doc values.\n   * This query is usually slow as it does not use an index structure and needs\n   * to verify documents one-by-one in order to know whether they match. It is\n   * best used wrapped in an {@link IndexOrDocValuesQuery} alongside a\n   * {@link LatLonPoint#newBoxQuery}.\n   */\n  public static Query newBoxQuery(String field, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    // exact double values of lat=90.0D and lon=180.0D must be treated special as they are not represented in the encoding\n    // and should not drag in extra bogus junk! TODO: should encodeCeil just throw ArithmeticException to be less trappy here?\n    if (minLatitude == 90.0) {\n      // range cannot match as 90.0 can never exist\n      return new MatchNoDocsQuery(\"LatLonDocValuesField.newBoxQuery with minLatitude=90.0\");\n    }\n    if (minLongitude == 180.0) {\n      if (maxLongitude == 180.0) {\n        // range cannot match as 180.0 can never exist\n        return new MatchNoDocsQuery(\"LatLonDocValuesField.newBoxQuery with minLongitude=maxLongitude=180.0\");\n      } else if (maxLongitude < minLongitude) {\n        // encodeCeil() with dateline wrapping!\n        minLongitude = -180.0;\n      }\n    }\n    return new LatLonDocValuesBoxQuery(field, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesField#newSlowBoxQuery(String,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesField#newBoxQuery(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a query for matching a bounding box using doc values.\n   * This query is usually slow as it does not use an index structure and needs\n   * to verify documents one-by-one in order to know whether they match. It is\n   * best used wrapped in an {@link IndexOrDocValuesQuery} alongside a\n   * {@link LatLonPoint#newBoxQuery}.\n   */\n  public static Query newSlowBoxQuery(String field, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    // exact double values of lat=90.0D and lon=180.0D must be treated special as they are not represented in the encoding\n    // and should not drag in extra bogus junk! TODO: should encodeCeil just throw ArithmeticException to be less trappy here?\n    if (minLatitude == 90.0) {\n      // range cannot match as 90.0 can never exist\n      return new MatchNoDocsQuery(\"LatLonDocValuesField.newBoxQuery with minLatitude=90.0\");\n    }\n    if (minLongitude == 180.0) {\n      if (maxLongitude == 180.0) {\n        // range cannot match as 180.0 can never exist\n        return new MatchNoDocsQuery(\"LatLonDocValuesField.newBoxQuery with minLongitude=maxLongitude=180.0\");\n      } else if (maxLongitude < minLongitude) {\n        // encodeCeil() with dateline wrapping!\n        minLongitude = -180.0;\n      }\n    }\n    return new LatLonDocValuesBoxQuery(field, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","sourceOld":"  /**\n   * Create a query for matching a bounding box using doc values.\n   * This query is usually slow as it does not use an index structure and needs\n   * to verify documents one-by-one in order to know whether they match. It is\n   * best used wrapped in an {@link IndexOrDocValuesQuery} alongside a\n   * {@link LatLonPoint#newBoxQuery}.\n   */\n  public static Query newBoxQuery(String field, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    // exact double values of lat=90.0D and lon=180.0D must be treated special as they are not represented in the encoding\n    // and should not drag in extra bogus junk! TODO: should encodeCeil just throw ArithmeticException to be less trappy here?\n    if (minLatitude == 90.0) {\n      // range cannot match as 90.0 can never exist\n      return new MatchNoDocsQuery(\"LatLonDocValuesField.newBoxQuery with minLatitude=90.0\");\n    }\n    if (minLongitude == 180.0) {\n      if (maxLongitude == 180.0) {\n        // range cannot match as 180.0 can never exist\n        return new MatchNoDocsQuery(\"LatLonDocValuesField.newBoxQuery with minLongitude=maxLongitude=180.0\");\n      } else if (maxLongitude < minLongitude) {\n        // encodeCeil() with dateline wrapping!\n        minLongitude = -180.0;\n      }\n    }\n    return new LatLonDocValuesBoxQuery(field, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["827a82bc4dd5d485dbe63f69e8429ecff24cb602","9970073fd3c04efd7374f975e45a61084b169ce9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9970073fd3c04efd7374f975e45a61084b169ce9":["827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9970073fd3c04efd7374f975e45a61084b169ce9"],"827a82bc4dd5d485dbe63f69e8429ecff24cb602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["598b5d23aa7c9732bf473c21a9cd309c44599394","827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"9970073fd3c04efd7374f975e45a61084b169ce9":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"827a82bc4dd5d485dbe63f69e8429ecff24cb602":["598b5d23aa7c9732bf473c21a9cd309c44599394","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","9970073fd3c04efd7374f975e45a61084b169ce9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}