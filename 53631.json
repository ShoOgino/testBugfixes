{"path":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#singletonView(Iterable[Number],Iterable[Number],Number).mjava","commits":[{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#singletonView(Iterable[Number],Iterable[Number],Number).mjava","pathOld":"/dev/null","sourceNew":"  /** Helper: returns single-valued view, using {@code missingValue} when count is zero */\n  public static Iterable<Number> singletonView(final Iterable<Number> docToValueCount, final Iterable<Number> values, final Number missingValue) {\n    assert isSingleValued(docToValueCount);\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n        final Iterator<Number> countIterator = docToValueCount.iterator();\n        final Iterator<Number> valuesIterator = values.iterator();\n        return new Iterator<Number>() {\n\n          @Override\n          public boolean hasNext() {\n            return countIterator.hasNext();\n          }\n\n          @Override\n          public Number next() {\n            int count = countIterator.next().intValue();\n            if (count == 0) {\n              return missingValue;\n            } else {\n              return valuesIterator.next();\n            }\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#singletonView(Iterable[Number],Iterable[Number],Number).mjava","pathOld":"/dev/null","sourceNew":"  /** Helper: returns single-valued view, using {@code missingValue} when count is zero */\n  public static Iterable<Number> singletonView(final Iterable<Number> docToValueCount, final Iterable<Number> values, final Number missingValue) {\n    assert isSingleValued(docToValueCount);\n    return new Iterable<Number>() {\n\n      @Override\n      public Iterator<Number> iterator() {\n        final Iterator<Number> countIterator = docToValueCount.iterator();\n        final Iterator<Number> valuesIterator = values.iterator();\n        return new Iterator<Number>() {\n\n          @Override\n          public boolean hasNext() {\n            return countIterator.hasNext();\n          }\n\n          @Override\n          public Number next() {\n            int count = countIterator.next().intValue();\n            if (count == 0) {\n              return missingValue;\n            } else {\n              return valuesIterator.next();\n            }\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}