{"path":"solr/core/src/java/org/apache/solr/util/SimplePostTool#getXP(Node,String,boolean).mjava","commits":[{"id":"c2c3a504730329ae644b009dee43024116605d47","date":1345253449,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#getXP(Node,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets the string content of the matching an XPath\n   * @param n the node (or doc)\n   * @param xpath the xpath string\n   * @param concatAll if true, text from all matching nodes will be concatenated, else only the first returned\n   */\n  public static String getXP(Node n, String xpath, boolean concatAll)\n      throws XPathExpressionException {\n    NodeList nodes = getNodesFromXP(n, xpath);\n    StringBuffer sb = new StringBuffer();\n    if (nodes.getLength() > 0) {\n      for(int i = 0; i < nodes.getLength() ; i++) {\n        sb.append(nodes.item(i).getNodeValue() + \" \");\n        if(!concatAll) break;\n      }\n      return sb.toString().trim();\n    } else\n      return \"\";\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d06343967a29132f5d782f74e8d0988400278a02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#getXP(Node,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets the string content of the matching an XPath\n   * @param n the node (or doc)\n   * @param xpath the xpath string\n   * @param concatAll if true, text from all matching nodes will be concatenated, else only the first returned\n   */\n  public static String getXP(Node n, String xpath, boolean concatAll)\n      throws XPathExpressionException {\n    NodeList nodes = getNodesFromXP(n, xpath);\n    StringBuffer sb = new StringBuffer();\n    if (nodes.getLength() > 0) {\n      for(int i = 0; i < nodes.getLength() ; i++) {\n        sb.append(nodes.item(i).getNodeValue() + \" \");\n        if(!concatAll) break;\n      }\n      return sb.toString().trim();\n    } else\n      return \"\";\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#getXP(Node,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets the string content of the matching an XPath\n   * @param n the node (or doc)\n   * @param xpath the xpath string\n   * @param concatAll if true, text from all matching nodes will be concatenated, else only the first returned\n   */\n  public static String getXP(Node n, String xpath, boolean concatAll)\n      throws XPathExpressionException {\n    NodeList nodes = getNodesFromXP(n, xpath);\n    StringBuffer sb = new StringBuffer();\n    if (nodes.getLength() > 0) {\n      for(int i = 0; i < nodes.getLength() ; i++) {\n        sb.append(nodes.item(i).getNodeValue() + \" \");\n        if(!concatAll) break;\n      }\n      return sb.toString().trim();\n    } else\n      return \"\";\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d06343967a29132f5d782f74e8d0988400278a02","date":1388963049,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#getXP(Node,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#getXP(Node,String,boolean).mjava","sourceNew":"  /**\n   * Gets the string content of the matching an XPath\n   * @param n the node (or doc)\n   * @param xpath the xpath string\n   * @param concatAll if true, text from all matching nodes will be concatenated, else only the first returned\n   */\n  public static String getXP(Node n, String xpath, boolean concatAll)\n      throws XPathExpressionException {\n    NodeList nodes = getNodesFromXP(n, xpath);\n    StringBuilder sb = new StringBuilder();\n    if (nodes.getLength() > 0) {\n      for(int i = 0; i < nodes.getLength() ; i++) {\n        sb.append(nodes.item(i).getNodeValue() + \" \");\n        if(!concatAll) break;\n      }\n      return sb.toString().trim();\n    } else\n      return \"\";\n  }\n\n","sourceOld":"  /**\n   * Gets the string content of the matching an XPath\n   * @param n the node (or doc)\n   * @param xpath the xpath string\n   * @param concatAll if true, text from all matching nodes will be concatenated, else only the first returned\n   */\n  public static String getXP(Node n, String xpath, boolean concatAll)\n      throws XPathExpressionException {\n    NodeList nodes = getNodesFromXP(n, xpath);\n    StringBuffer sb = new StringBuffer();\n    if (nodes.getLength() > 0) {\n      for(int i = 0; i < nodes.getLength() ; i++) {\n        sb.append(nodes.item(i).getNodeValue() + \" \");\n        if(!concatAll) break;\n      }\n      return sb.toString().trim();\n    } else\n      return \"\";\n  }\n\n","bugFix":["c2c3a504730329ae644b009dee43024116605d47"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#getXP(Node,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#getXP(Node,String,boolean).mjava","sourceNew":"  /**\n   * Gets the string content of the matching an XPath\n   * @param n the node (or doc)\n   * @param xpath the xpath string\n   * @param concatAll if true, text from all matching nodes will be concatenated, else only the first returned\n   */\n  public static String getXP(Node n, String xpath, boolean concatAll)\n      throws XPathExpressionException {\n    NodeList nodes = getNodesFromXP(n, xpath);\n    StringBuilder sb = new StringBuilder();\n    if (nodes.getLength() > 0) {\n      for(int i = 0; i < nodes.getLength() ; i++) {\n        sb.append(nodes.item(i).getNodeValue()).append(' ');\n        if(!concatAll) break;\n      }\n      return sb.toString().trim();\n    } else\n      return \"\";\n  }\n\n","sourceOld":"  /**\n   * Gets the string content of the matching an XPath\n   * @param n the node (or doc)\n   * @param xpath the xpath string\n   * @param concatAll if true, text from all matching nodes will be concatenated, else only the first returned\n   */\n  public static String getXP(Node n, String xpath, boolean concatAll)\n      throws XPathExpressionException {\n    NodeList nodes = getNodesFromXP(n, xpath);\n    StringBuilder sb = new StringBuilder();\n    if (nodes.getLength() > 0) {\n      for(int i = 0; i < nodes.getLength() ; i++) {\n        sb.append(nodes.item(i).getNodeValue() + \" \");\n        if(!concatAll) break;\n      }\n      return sb.toString().trim();\n    } else\n      return \"\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ffe681f212e5073c69955b4ad22946794c84940":["d06343967a29132f5d782f74e8d0988400278a02"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"d06343967a29132f5d782f74e8d0988400278a02":["c2c3a504730329ae644b009dee43024116605d47"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"c2c3a504730329ae644b009dee43024116605d47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ffe681f212e5073c69955b4ad22946794c84940"]},"commit2Childs":{"2ffe681f212e5073c69955b4ad22946794c84940":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"d06343967a29132f5d782f74e8d0988400278a02":["2ffe681f212e5073c69955b4ad22946794c84940"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","c2c3a504730329ae644b009dee43024116605d47"],"c2c3a504730329ae644b009dee43024116605d47":["616c1830142ff5c1ddedec1ed898733b73c8e23b","d06343967a29132f5d782f74e8d0988400278a02","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}