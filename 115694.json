{"path":"lucene/sandbox/src/java/org/apache/lucene/search/IndexSortSortedNumericDocValuesRangeQuery#getDocIdSetIterator(SortField,LeafReaderContext,DocIdSetIterator).mjava","commits":[{"id":"5b5ad3c44dc5e1b8edf90947b6d8d2bd24002afb","date":1561533468,"type":0,"author":"Julie Tibshirani","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/IndexSortSortedNumericDocValuesRangeQuery#getDocIdSetIterator(SortField,LeafReaderContext,DocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes the document IDs that lie within the range [lowerValue, upperValue] by\n   * performing binary search on the field's doc values.\n   *\n   * Because doc values only allow forward iteration, we need to reload the field comparator\n   * every time the binary search accesses an earlier element.\n   *\n   * We must also account for missing values when performing the binary search. For this\n   * reason, we load the {@link FieldComparator} instead of checking the docvalues directly.\n   * The returned {@link DocIdSetIterator} makes sure to wrap the original docvalues to skip\n   * over documents with no value.\n   */\n  private DocIdSetIterator getDocIdSetIterator(SortField sortField,\n                                               LeafReaderContext context,\n                                               DocIdSetIterator delegate) throws IOException {\n    long lower = sortField.getReverse() ? upperValue : lowerValue;\n    long upper = sortField.getReverse() ? lowerValue : upperValue;\n    int maxDoc = context.reader().maxDoc();\n\n    // Perform a binary search to find the first document with value >= lower.\n    ValueComparator comparator = loadComparator(sortField, lower, context);\n    int low = 0;\n    int high = maxDoc - 1;\n\n    while (low <= high) {\n      int mid = (low + high) >>> 1;\n      if (comparator.compare(mid) <= 0) {\n        high = mid - 1;\n        comparator = loadComparator(sortField, lower, context);\n      } else {\n        low = mid + 1;\n      }\n    }\n    int firstDocIdInclusive = high + 1;\n\n    // Perform a binary search to find the first document with value > upper.\n    // Since we know that upper >= lower, we can initialize the lower bound\n    // of the binary search to the result of the previous search.\n    comparator = loadComparator(sortField, upper, context);\n    low = firstDocIdInclusive;\n    high = maxDoc - 1;\n\n    while (low <= high) {\n      int mid = (low + high) >>> 1;\n      if (comparator.compare(mid) < 0) {\n        high = mid - 1;\n        comparator = loadComparator(sortField, upper, context);\n      } else {\n        low = mid + 1;\n      }\n    }\n\n    int lastDocIdExclusive = high + 1;\n    return new BoundedDocSetIdIterator(firstDocIdInclusive, lastDocIdExclusive, delegate);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b5ad3c44dc5e1b8edf90947b6d8d2bd24002afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b5ad3c44dc5e1b8edf90947b6d8d2bd24002afb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5ad3c44dc5e1b8edf90947b6d8d2bd24002afb"],"5b5ad3c44dc5e1b8edf90947b6d8d2bd24002afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}