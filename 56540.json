{"path":"solr/core/src/java/org/apache/solr/update/SolrCoreState#getIndexWriter(SolrCore).mjava","commits":[{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the current IndexWriter. If a new IndexWriter must be created, use the\n   * settings from the given {@link SolrCore}.\n   * \n   * @param core\n   * @return\n   * @throws IOException\n   */\n  public abstract IndexWriter getIndexWriter(SolrCore core) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4281584355bbe0d25a40eb7990ca2184a954bfa6","date":1313725067,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  /**\n   * Get the current IndexWriter. If a new IndexWriter must be created, use the\n   * settings from the given {@link SolrCore}.\n   * \n   * @throws IOException\n   */\n  public abstract IndexWriter getIndexWriter(SolrCore core) throws IOException;\n\n","sourceOld":"  /**\n   * Get the current IndexWriter. If a new IndexWriter must be created, use the\n   * settings from the given {@link SolrCore}.\n   * \n   * @param core\n   * @return\n   * @throws IOException\n   */\n  public abstract IndexWriter getIndexWriter(SolrCore core) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08bcaef9e931052e4ca24133a89cc6aefaf61829","date":1342469326,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  /**\n   * Get the current IndexWriter. If a new IndexWriter must be created, use the\n   * settings from the given {@link SolrCore}.\n   * \n   * @throws IOException\n   */\n  public abstract RefCounted<IndexWriter> getIndexWriter(SolrCore core) throws IOException;\n\n","sourceOld":"  /**\n   * Get the current IndexWriter. If a new IndexWriter must be created, use the\n   * settings from the given {@link SolrCore}.\n   * \n   * @throws IOException\n   */\n  public abstract IndexWriter getIndexWriter(SolrCore core) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  /**\n   * Get the current IndexWriter. If a new IndexWriter must be created, use the\n   * settings from the given {@link SolrCore}.\n   * \n   * @throws IOException\n   */\n  public abstract RefCounted<IndexWriter> getIndexWriter(SolrCore core) throws IOException;\n\n","sourceOld":"  /**\n   * Get the current IndexWriter. If a new IndexWriter must be created, use the\n   * settings from the given {@link SolrCore}.\n   * \n   * @throws IOException\n   */\n  public abstract IndexWriter getIndexWriter(SolrCore core) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  /**\n   * Get the current IndexWriter. If a new IndexWriter must be created, use the\n   * settings from the given {@link SolrCore}.\n   * \n   * @throws IOException\n   */\n  public abstract RefCounted<IndexWriter> getIndexWriter(SolrCore core) throws IOException;\n\n","sourceOld":"  /**\n   * Get the current IndexWriter. If a new IndexWriter must be created, use the\n   * settings from the given {@link SolrCore}.\n   * \n   * @throws IOException\n   */\n  public abstract IndexWriter getIndexWriter(SolrCore core) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  /**\n   * Get the current IndexWriter. If a new IndexWriter must be created, use the\n   * settings from the given {@link SolrCore}.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract RefCounted<IndexWriter> getIndexWriter(SolrCore core) throws IOException;\n\n","sourceOld":"  /**\n   * Get the current IndexWriter. If a new IndexWriter must be created, use the\n   * settings from the given {@link SolrCore}.\n   * \n   * @throws IOException\n   */\n  public abstract RefCounted<IndexWriter> getIndexWriter(SolrCore core) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["08bcaef9e931052e4ca24133a89cc6aefaf61829"],"aba371508186796cc6151d8223a5b4e16d02e26e":["4281584355bbe0d25a40eb7990ca2184a954bfa6","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4281584355bbe0d25a40eb7990ca2184a954bfa6","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"4281584355bbe0d25a40eb7990ca2184a954bfa6":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"08bcaef9e931052e4ca24133a89cc6aefaf61829":["4281584355bbe0d25a40eb7990ca2184a954bfa6"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"4281584355bbe0d25a40eb7990ca2184a954bfa6":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"08bcaef9e931052e4ca24133a89cc6aefaf61829":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["4281584355bbe0d25a40eb7990ca2184a954bfa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}