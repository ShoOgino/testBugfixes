{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/json/DirectJsonQueryRequestFacetingEmbeddedTest#assertHasFacetWithBucketValues(NestableJsonFacet,String,FacetBucket...).mjava","commits":[{"id":"216b828f4f2341ae2e70eb7585059e3576e4cb99","date":1570451249,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/json/DirectJsonQueryRequestFacetingEmbeddedTest#assertHasFacetWithBucketValues(NestableJsonFacet,String,FacetBucket...).mjava","pathOld":"/dev/null","sourceNew":"  private void assertHasFacetWithBucketValues(NestableJsonFacet response, String expectedFacetName,\n      FacetBucket... expectedBuckets) {\n    assertTrue(\"Expected response to have facet with name \" + expectedFacetName,\n        response.getBucketBasedFacets(expectedFacetName) != null);\n    final List<BucketJsonFacet> buckets = response.getBucketBasedFacets(expectedFacetName).getBuckets();\n    assertEquals(expectedBuckets.length, buckets.size());\n    for (int i = 0; i < expectedBuckets.length; i++) {\n      final FacetBucket expectedBucket = expectedBuckets[i];\n      final BucketJsonFacet actualBucket = buckets.get(i);\n      assertEquals(expectedBucket.getVal(), actualBucket.getVal());\n      assertEquals(expectedBucket.getCount(), actualBucket.getCount());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/json/DirectJsonQueryRequestFacetingEmbeddedTest#assertHasFacetWithBucketValues(NestableJsonFacet,String,FacetBucket...).mjava","pathOld":"/dev/null","sourceNew":"  private void assertHasFacetWithBucketValues(NestableJsonFacet response, String expectedFacetName,\n      FacetBucket... expectedBuckets) {\n    assertTrue(\"Expected response to have facet with name \" + expectedFacetName,\n        response.getBucketBasedFacets(expectedFacetName) != null);\n    final List<BucketJsonFacet> buckets = response.getBucketBasedFacets(expectedFacetName).getBuckets();\n    assertEquals(expectedBuckets.length, buckets.size());\n    for (int i = 0; i < expectedBuckets.length; i++) {\n      final FacetBucket expectedBucket = expectedBuckets[i];\n      final BucketJsonFacet actualBucket = buckets.get(i);\n      assertEquals(expectedBucket.getVal(), actualBucket.getVal());\n      assertEquals(expectedBucket.getCount(), actualBucket.getCount());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"216b828f4f2341ae2e70eb7585059e3576e4cb99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["216b828f4f2341ae2e70eb7585059e3576e4cb99"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","216b828f4f2341ae2e70eb7585059e3576e4cb99"]},"commit2Childs":{"216b828f4f2341ae2e70eb7585059e3576e4cb99":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["216b828f4f2341ae2e70eb7585059e3576e4cb99","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}