{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#randomAnalyzer().mjava","commits":[{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#randomAnalyzer().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#randomAnalyzer().mjava","sourceNew":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(4)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n      case 2: return new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer();\n          return new TokenStreamComponents(tokenizer, new CrazyTokenFilter(tokenizer));\n        }\n      };\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(4)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n      case 2: return new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer();\n          return new TokenStreamComponents(tokenizer, new CrazyTokenFilter(tokenizer));\n        }\n      };\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#randomAnalyzer().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#randomAnalyzer().mjava","sourceNew":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(4)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n      case 2: return new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer();\n          return new TokenStreamComponents(tokenizer, new CrazyTokenFilter(tokenizer));\n        }\n      };\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(4)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n      case 2: return new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer();\n          return new TokenStreamComponents(tokenizer, new CrazyTokenFilter(tokenizer));\n        }\n      };\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#randomAnalyzer().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#randomAnalyzer().mjava","sourceNew":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(4)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n      case 2: return new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer();\n          return new TokenStreamComponents(tokenizer, new CrazyTokenFilter(tokenizer));\n        }\n      };\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return a random analyzer (Simple, Stop, Standard) to analyze the terms.\n   */\n  private Analyzer randomAnalyzer() {\n    switch(random().nextInt(4)) {\n      case 0: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n      case 1: return new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n      case 2: return new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer();\n          return new TokenStreamComponents(tokenizer, new CrazyTokenFilter(tokenizer));\n        }\n      };\n      default: return new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["761333d77c7f29123c00c93b107b743f32f012e6"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","761333d77c7f29123c00c93b107b743f32f012e6"],"761333d77c7f29123c00c93b107b743f32f012e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"761333d77c7f29123c00c93b107b743f32f012e6":["d77dafd89756a5161d244985903e3487ca109182","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}