{"path":"sandbox/contributions/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionnary(Dictionary).mjava","commits":[{"id":"e561bdf81b5b983639de610f7c878f3e2382bf24","date":1099437089,"type":0,"author":"David Spencer","isMerge":false,"pathNew":"sandbox/contributions/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionnary(Dictionary).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Index a Dictionnary\n     * @param dict the dictionnary to index\n     * @throws IOException\n     */\n    public void indexDictionnary (Dictionary dict) throws IOException {\n\n        int ng1, ng2;\n        IndexReader.unlock(spellindex);\n        IndexWriter writer=new IndexWriter(spellindex, new WhitespaceAnalyzer(), !IndexReader.indexExists(spellindex));\n        writer.mergeFactor=300;\n        writer.minMergeDocs=150;\n\n        Iterator iter=dict.getWordsIterator();\n        while (iter.hasNext()) {\n            String word=(String) iter.next();\n\n            int len=word.length();\n            if (len<3) {\n                continue; // too short we bail but \"too long\" is fine...\n            }\n\n            if (this.exist(word)) { // if the word already exist in the gramindex\n                continue;\n            }\n\n            // ok index the word\n            Document doc=createDocument(word, getMin(len), getMax(len));\n            writer.addDocument(doc);\n        }\n        // close writer\n        writer.optimize();\n        writer.close();\n\n        // close reader\n        reader.close();\n        reader=null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionnary(Dictionary).mjava","pathOld":"sandbox/contributions/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionnary(Dictionary).mjava","sourceNew":"    /**\n     * Index a Dictionnary\n     * @param dict the dictionnary to index\n     * @throws IOException\n     */\n    public void indexDictionnary (Dictionary dict) throws IOException {\n\n        int ng1, ng2;\n        IndexReader.unlock(spellindex);\n        IndexWriter writer=new IndexWriter(spellindex, new WhitespaceAnalyzer(), !IndexReader.indexExists(spellindex));\n        writer.mergeFactor=300;\n        writer.minMergeDocs=150;\n\n        Iterator iter=dict.getWordsIterator();\n        while (iter.hasNext()) {\n            String word=(String) iter.next();\n\n            int len=word.length();\n            if (len<3) {\n                continue; // too short we bail but \"too long\" is fine...\n            }\n\n            if (this.exist(word)) { // if the word already exist in the gramindex\n                continue;\n            }\n\n            // ok index the word\n            Document doc=createDocument(word, getMin(len), getMax(len));\n            writer.addDocument(doc);\n        }\n        // close writer\n        writer.optimize();\n        writer.close();\n\n        // close reader\n        reader.close();\n        reader=null;\n    }\n\n","sourceOld":"    /**\n     * Index a Dictionnary\n     * @param dict the dictionnary to index\n     * @throws IOException\n     */\n    public void indexDictionnary (Dictionary dict) throws IOException {\n\n        int ng1, ng2;\n        IndexReader.unlock(spellindex);\n        IndexWriter writer=new IndexWriter(spellindex, new WhitespaceAnalyzer(), !IndexReader.indexExists(spellindex));\n        writer.mergeFactor=300;\n        writer.minMergeDocs=150;\n\n        Iterator iter=dict.getWordsIterator();\n        while (iter.hasNext()) {\n            String word=(String) iter.next();\n\n            int len=word.length();\n            if (len<3) {\n                continue; // too short we bail but \"too long\" is fine...\n            }\n\n            if (this.exist(word)) { // if the word already exist in the gramindex\n                continue;\n            }\n\n            // ok index the word\n            Document doc=createDocument(word, getMin(len), getMax(len));\n            writer.addDocument(doc);\n        }\n        // close writer\n        writer.optimize();\n        writer.close();\n\n        // close reader\n        reader.close();\n        reader=null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["e561bdf81b5b983639de610f7c878f3e2382bf24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e561bdf81b5b983639de610f7c878f3e2382bf24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"]},"commit2Childs":{"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e561bdf81b5b983639de610f7c878f3e2382bf24"],"e561bdf81b5b983639de610f7c878f3e2382bf24":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}