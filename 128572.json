{"path":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testLowercaseOperators().mjava","commits":[{"id":"963838fde272080e74cd28379f80e34631528b50","date":1340216115,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testLowercaseOperators().mjava","pathOld":"/dev/null","sourceNew":"  public void testLowercaseOperators() {\n    assertQ(\"Upper case operator\",\n        req(\"q\",\"Zapp AND Brannigan\",\n            \"qf\", \"name\",\n            \"lowercaseOperators\", \"false\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n    \n    assertQ(\"Upper case operator, allow lowercase\",\n        req(\"q\",\"Zapp AND Brannigan\",\n            \"qf\", \"name\",\n            \"lowercaseOperators\", \"true\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n    \n    assertQ(\"Lower case operator, don't allow lowercase operators\",\n        req(\"q\",\"Zapp and Brannigan\",\n            \"qf\", \"name\",\n            \"q.op\", \"AND\", \n            \"lowercaseOperators\", \"false\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=0]\");\n    \n    assertQ(\"Lower case operator, allow lower case operators\",\n        req(\"q\",\"Zapp and Brannigan\",\n            \"qf\", \"name\",\n            \"q.op\", \"AND\", \n            \"lowercaseOperators\", \"true\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testLowercaseOperators().mjava","pathOld":"/dev/null","sourceNew":"  public void testLowercaseOperators() {\n    assertQ(\"Upper case operator\",\n        req(\"q\",\"Zapp AND Brannigan\",\n            \"qf\", \"name\",\n            \"lowercaseOperators\", \"false\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n    \n    assertQ(\"Upper case operator, allow lowercase\",\n        req(\"q\",\"Zapp AND Brannigan\",\n            \"qf\", \"name\",\n            \"lowercaseOperators\", \"true\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n    \n    assertQ(\"Lower case operator, don't allow lowercase operators\",\n        req(\"q\",\"Zapp and Brannigan\",\n            \"qf\", \"name\",\n            \"q.op\", \"AND\", \n            \"lowercaseOperators\", \"false\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=0]\");\n    \n    assertQ(\"Lower case operator, allow lower case operators\",\n        req(\"q\",\"Zapp and Brannigan\",\n            \"qf\", \"name\",\n            \"q.op\", \"AND\", \n            \"lowercaseOperators\", \"true\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testLowercaseOperators().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testLowercaseOperators().mjava","sourceNew":"  public void testLowercaseOperators() {\n    assertQ(\"Upper case operator\",\n        req(\"q\",\"Zapp AND Brannigan\",\n            \"qf\", \"name\",\n            \"lowercaseOperators\", \"false\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n    \n    assertQ(\"Upper case operator, allow lowercase\",\n        req(\"q\",\"Zapp AND Brannigan\",\n            \"qf\", \"name\",\n            \"lowercaseOperators\", \"true\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n    \n    assertQ(\"Lower case operator, don't allow lowercase operators\",\n        req(\"q\",\"Zapp and Brannigan\",\n            \"qf\", \"name\",\n            \"q.op\", \"AND\", \n            \"lowercaseOperators\", \"false\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=0]\");\n    \n    assertQ(\"Lower case operator, allow lower case operators\",\n        req(\"q\",\"Zapp and Brannigan\",\n            \"qf\", \"name\",\n            \"q.op\", \"AND\", \n            \"lowercaseOperators\", \"true\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n  }\n\n","sourceOld":"  public void testLowercaseOperators() {\n    assertQ(\"Upper case operator\",\n        req(\"q\",\"Zapp AND Brannigan\",\n            \"qf\", \"name\",\n            \"lowercaseOperators\", \"false\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n    \n    assertQ(\"Upper case operator, allow lowercase\",\n        req(\"q\",\"Zapp AND Brannigan\",\n            \"qf\", \"name\",\n            \"lowercaseOperators\", \"true\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n    \n    assertQ(\"Lower case operator, don't allow lowercase operators\",\n        req(\"q\",\"Zapp and Brannigan\",\n            \"qf\", \"name\",\n            \"q.op\", \"AND\", \n            \"lowercaseOperators\", \"false\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=0]\");\n    \n    assertQ(\"Lower case operator, allow lower case operators\",\n        req(\"q\",\"Zapp and Brannigan\",\n            \"qf\", \"name\",\n            \"q.op\", \"AND\", \n            \"lowercaseOperators\", \"true\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testLowercaseOperators().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testLowercaseOperators().mjava","sourceNew":"  public void testLowercaseOperators() {\n    assertQ(\"Upper case operator\",\n        req(\"q\",\"Zapp AND Brannigan\",\n            \"qf\", \"name\",\n            \"lowercaseOperators\", \"false\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n    \n    assertQ(\"Upper case operator, allow lowercase\",\n        req(\"q\",\"Zapp AND Brannigan\",\n            \"qf\", \"name\",\n            \"lowercaseOperators\", \"true\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n    \n    assertQ(\"Lower case operator, don't allow lowercase operators\",\n        req(\"q\",\"Zapp and Brannigan\",\n            \"qf\", \"name\",\n            \"q.op\", \"AND\", \n            \"lowercaseOperators\", \"false\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=0]\");\n    \n    assertQ(\"Lower case operator, allow lower case operators\",\n        req(\"q\",\"Zapp and Brannigan\",\n            \"qf\", \"name\",\n            \"q.op\", \"AND\", \n            \"lowercaseOperators\", \"true\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n  }\n\n","sourceOld":"  public void testLowercaseOperators() {\n    assertQ(\"Upper case operator\",\n        req(\"q\",\"Zapp AND Brannigan\",\n            \"qf\", \"name\",\n            \"lowercaseOperators\", \"false\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n    \n    assertQ(\"Upper case operator, allow lowercase\",\n        req(\"q\",\"Zapp AND Brannigan\",\n            \"qf\", \"name\",\n            \"lowercaseOperators\", \"true\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n    \n    assertQ(\"Lower case operator, don't allow lowercase operators\",\n        req(\"q\",\"Zapp and Brannigan\",\n            \"qf\", \"name\",\n            \"q.op\", \"AND\", \n            \"lowercaseOperators\", \"false\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=0]\");\n    \n    assertQ(\"Lower case operator, allow lower case operators\",\n        req(\"q\",\"Zapp and Brannigan\",\n            \"qf\", \"name\",\n            \"q.op\", \"AND\", \n            \"lowercaseOperators\", \"true\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testLowercaseOperators().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testLowercaseOperators().mjava","sourceNew":"  public void testLowercaseOperators() {\n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      assertQ(\"Upper case operator\",\n          req(\"q\", \"Zapp AND Brannigan\",\n              \"qf\", \"name\",\n              \"lowercaseOperators\", \"false\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n\n      assertQ(\"Upper case operator, allow lowercase\",\n          req(\"q\", \"Zapp AND Brannigan\",\n              \"qf\", \"name\",\n              \"lowercaseOperators\", \"true\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n\n      assertQ(\"Lower case operator, don't allow lowercase operators\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"lowercaseOperators\", \"false\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=0]\");\n\n      assertQ(\"Lower case operator, allow lower case operators\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"lowercaseOperators\", \"true\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n    }\n  }\n\n","sourceOld":"  public void testLowercaseOperators() {\n    assertQ(\"Upper case operator\",\n        req(\"q\",\"Zapp AND Brannigan\",\n            \"qf\", \"name\",\n            \"lowercaseOperators\", \"false\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n    \n    assertQ(\"Upper case operator, allow lowercase\",\n        req(\"q\",\"Zapp AND Brannigan\",\n            \"qf\", \"name\",\n            \"lowercaseOperators\", \"true\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n    \n    assertQ(\"Lower case operator, don't allow lowercase operators\",\n        req(\"q\",\"Zapp and Brannigan\",\n            \"qf\", \"name\",\n            \"q.op\", \"AND\", \n            \"lowercaseOperators\", \"false\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=0]\");\n    \n    assertQ(\"Lower case operator, allow lower case operators\",\n        req(\"q\",\"Zapp and Brannigan\",\n            \"qf\", \"name\",\n            \"q.op\", \"AND\", \n            \"lowercaseOperators\", \"true\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testLowercaseOperators().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testLowercaseOperators().mjava","sourceNew":"  public void testLowercaseOperators() {\n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      assertQ(\"Upper case operator\",\n          req(\"q\", \"Zapp AND Brannigan\",\n              \"qf\", \"name\",\n              \"lowercaseOperators\", \"false\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n\n      assertQ(\"Upper case operator, allow lowercase\",\n          req(\"q\", \"Zapp AND Brannigan\",\n              \"qf\", \"name\",\n              \"lowercaseOperators\", \"true\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n\n      assertQ(\"Lower case operator, don't allow lowercase operators\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"lowercaseOperators\", \"false\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=0]\");\n\n      assertQ(\"Lower case operator, allow lower case operators\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"lowercaseOperators\", \"true\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n    }\n  }\n\n","sourceOld":"  public void testLowercaseOperators() {\n    assertQ(\"Upper case operator\",\n        req(\"q\",\"Zapp AND Brannigan\",\n            \"qf\", \"name\",\n            \"lowercaseOperators\", \"false\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n    \n    assertQ(\"Upper case operator, allow lowercase\",\n        req(\"q\",\"Zapp AND Brannigan\",\n            \"qf\", \"name\",\n            \"lowercaseOperators\", \"true\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n    \n    assertQ(\"Lower case operator, don't allow lowercase operators\",\n        req(\"q\",\"Zapp and Brannigan\",\n            \"qf\", \"name\",\n            \"q.op\", \"AND\", \n            \"lowercaseOperators\", \"false\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=0]\");\n    \n    assertQ(\"Lower case operator, allow lower case operators\",\n        req(\"q\",\"Zapp and Brannigan\",\n            \"qf\", \"name\",\n            \"q.op\", \"AND\", \n            \"lowercaseOperators\", \"true\",\n            \"defType\",\"edismax\")\n        ,\"*[count(//doc)=1]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8e2c1ef13fc86db819bf881ef0d9e0765eadfa0","date":1497958776,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testLowercaseOperators().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testLowercaseOperators().mjava","sourceNew":"  public void testLowercaseOperators() {\n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      assertQ(\"Upper case operator\",\n          req(\"q\", \"Zapp AND Brannigan\",\n              \"qf\", \"name\",\n              \"lowercaseOperators\", \"false\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n\n      assertQ(\"Upper case operator, allow lowercase\",\n          req(\"q\", \"Zapp AND Brannigan\",\n              \"qf\", \"name\",\n              \"lowercaseOperators\", \"true\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n\n      assertQ(\"Lower case operator, don't allow lowercase operators\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"lowercaseOperators\", \"false\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=0]\");\n\n      assertQ(\"The default for lowercaseOperators should not allow lower case and\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=0]\");\n\n      assertQ(\"Lower case operator, allow lower case operators\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"lowercaseOperators\", \"true\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n    }\n  }\n\n","sourceOld":"  public void testLowercaseOperators() {\n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      assertQ(\"Upper case operator\",\n          req(\"q\", \"Zapp AND Brannigan\",\n              \"qf\", \"name\",\n              \"lowercaseOperators\", \"false\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n\n      assertQ(\"Upper case operator, allow lowercase\",\n          req(\"q\", \"Zapp AND Brannigan\",\n              \"qf\", \"name\",\n              \"lowercaseOperators\", \"true\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n\n      assertQ(\"Lower case operator, don't allow lowercase operators\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"lowercaseOperators\", \"false\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=0]\");\n\n      assertQ(\"Lower case operator, allow lower case operators\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"lowercaseOperators\", \"true\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testLowercaseOperators().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testLowercaseOperators().mjava","sourceNew":"  public void testLowercaseOperators() {\n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      assertQ(\"Upper case operator\",\n          req(\"q\", \"Zapp AND Brannigan\",\n              \"qf\", \"name\",\n              \"lowercaseOperators\", \"false\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n\n      assertQ(\"Upper case operator, allow lowercase\",\n          req(\"q\", \"Zapp AND Brannigan\",\n              \"qf\", \"name\",\n              \"lowercaseOperators\", \"true\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n\n      assertQ(\"Lower case operator, don't allow lowercase operators\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"lowercaseOperators\", \"false\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=0]\");\n\n      assertQ(\"The default for lowercaseOperators should not allow lower case and\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=0]\");\n\n      assertQ(\"Lower case operator, allow lower case operators\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"lowercaseOperators\", \"true\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n    }\n  }\n\n","sourceOld":"  public void testLowercaseOperators() {\n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      assertQ(\"Upper case operator\",\n          req(\"q\", \"Zapp AND Brannigan\",\n              \"qf\", \"name\",\n              \"lowercaseOperators\", \"false\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n\n      assertQ(\"Upper case operator, allow lowercase\",\n          req(\"q\", \"Zapp AND Brannigan\",\n              \"qf\", \"name\",\n              \"lowercaseOperators\", \"true\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n\n      assertQ(\"Lower case operator, don't allow lowercase operators\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"lowercaseOperators\", \"false\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=0]\");\n\n      assertQ(\"Lower case operator, allow lower case operators\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"lowercaseOperators\", \"true\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testLowercaseOperators().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testLowercaseOperators().mjava","sourceNew":"  public void testLowercaseOperators() {\n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      assertQ(\"Upper case operator\",\n          req(\"q\", \"Zapp AND Brannigan\",\n              \"qf\", \"name\",\n              \"lowercaseOperators\", \"false\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n\n      assertQ(\"Upper case operator, allow lowercase\",\n          req(\"q\", \"Zapp AND Brannigan\",\n              \"qf\", \"name\",\n              \"lowercaseOperators\", \"true\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n\n      assertQ(\"Lower case operator, don't allow lowercase operators\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"lowercaseOperators\", \"false\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=0]\");\n\n      assertQ(\"The default for lowercaseOperators should not allow lower case and\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=0]\");\n\n      assertQ(\"Lower case operator, allow lower case operators\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"lowercaseOperators\", \"true\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n    }\n  }\n\n","sourceOld":"  public void testLowercaseOperators() {\n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      assertQ(\"Upper case operator\",\n          req(\"q\", \"Zapp AND Brannigan\",\n              \"qf\", \"name\",\n              \"lowercaseOperators\", \"false\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n\n      assertQ(\"Upper case operator, allow lowercase\",\n          req(\"q\", \"Zapp AND Brannigan\",\n              \"qf\", \"name\",\n              \"lowercaseOperators\", \"true\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n\n      assertQ(\"Lower case operator, don't allow lowercase operators\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"lowercaseOperators\", \"false\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=0]\");\n\n      assertQ(\"Lower case operator, allow lower case operators\",\n          req(\"q\", \"Zapp and Brannigan\",\n              \"qf\", \"name\",\n              \"q.op\", \"AND\",\n              \"lowercaseOperators\", \"true\",\n              \"sow\", sow,\n              \"defType\", \"edismax\")\n          , \"*[count(//doc)=1]\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["963838fde272080e74cd28379f80e34631528b50","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c8e2c1ef13fc86db819bf881ef0d9e0765eadfa0":["e55782fb51a6e9789542818eb2161a3247f39ace"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","963838fde272080e74cd28379f80e34631528b50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"963838fde272080e74cd28379f80e34631528b50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["963838fde272080e74cd28379f80e34631528b50"],"c03778630c4604270d88c148afb8c7de35b51d3c":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"e55782fb51a6e9789542818eb2161a3247f39ace":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"28288370235ed02234a64753cdbf0c6ec096304a":["e55782fb51a6e9789542818eb2161a3247f39ace","c8e2c1ef13fc86db819bf881ef0d9e0765eadfa0"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["c03778630c4604270d88c148afb8c7de35b51d3c","c8e2c1ef13fc86db819bf881ef0d9e0765eadfa0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c8e2c1ef13fc86db819bf881ef0d9e0765eadfa0":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","963838fde272080e74cd28379f80e34631528b50"],"963838fde272080e74cd28379f80e34631528b50":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","fe33227f6805edab2036cbb80645cc4e2d1fa424","19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace"],"c03778630c4604270d88c148afb8c7de35b51d3c":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"e55782fb51a6e9789542818eb2161a3247f39ace":["c8e2c1ef13fc86db819bf881ef0d9e0765eadfa0","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","fe33227f6805edab2036cbb80645cc4e2d1fa424","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}