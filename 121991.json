{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest#testFieldTermStackIndex2w1wSearch1term1phrase().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest#testFieldTermStackIndex2w1wSearch1term1phrase().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest#testFieldTermStackIndex2w1wSearch1term1phrase().mjava","sourceNew":"  public void testFieldTermStackIndex2w1wSearch1term1phrase() throws Exception {\n    makeIndex2w1w();\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add( tq( \"pc\" ), Occur.SHOULD );\n    bq.add( pqF( \"personal\", \"computer\" ), Occur.SHOULD );\n    FieldQuery fq = new FieldQuery( bq, true, true );\n    FieldTermStack stack = new FieldTermStack( reader, 0, F, fq );\n    assertEquals( 3, stack.termList.size() );\n    Set<String> expectedSet = new HashSet<String>();\n    expectedSet.add( \"pc(3,20,1)\" );\n    expectedSet.add( \"personal(3,20,1)\" );\n    assertTrue( expectedSet.contains( stack.pop().toString() ) );\n    assertTrue( expectedSet.contains( stack.pop().toString() ) );\n    assertEquals( \"computer(3,20,2)\", stack.pop().toString() );\n  }\n\n","sourceOld":"  public void testFieldTermStackIndex2w1wSearch1term1phrase() throws Exception {\n    makeIndex2w1w();\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add( tq( \"pc\" ), Occur.SHOULD );\n    bq.add( pqF( \"personal\", \"computer\" ), Occur.SHOULD );\n    FieldQuery fq = new FieldQuery( bq, true, true );\n    FieldTermStack stack = new FieldTermStack( reader, 0, F, fq );\n    assertEquals( 3, stack.termList.size() );\n    Set<String> expectedSet = new HashSet<String>();\n    expectedSet.add( \"pc(3,20,1)\" );\n    expectedSet.add( \"personal(3,20,1)\" );\n    assertTrue( expectedSet.contains( stack.pop().toString() ) );\n    assertTrue( expectedSet.contains( stack.pop().toString() ) );\n    assertEquals( \"computer(3,20,2)\", stack.pop().toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest#testFieldTermStackIndex2w1wSearch1term1phrase().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest#testFieldTermStackIndex2w1wSearch1term1phrase().mjava","sourceNew":"  public void testFieldTermStackIndex2w1wSearch1term1phrase() throws Exception {\n    makeIndex2w1w();\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add( tq( \"pc\" ), Occur.SHOULD );\n    bq.add( pqF( \"personal\", \"computer\" ), Occur.SHOULD );\n    FieldQuery fq = new FieldQuery( bq, true, true );\n    FieldTermStack stack = new FieldTermStack( reader, 0, F, fq );\n    assertEquals( 3, stack.termList.size() );\n    Set<String> expectedSet = new HashSet<>();\n    expectedSet.add( \"pc(3,20,1)\" );\n    expectedSet.add( \"personal(3,20,1)\" );\n    assertTrue( expectedSet.contains( stack.pop().toString() ) );\n    assertTrue( expectedSet.contains( stack.pop().toString() ) );\n    assertEquals( \"computer(3,20,2)\", stack.pop().toString() );\n  }\n\n","sourceOld":"  public void testFieldTermStackIndex2w1wSearch1term1phrase() throws Exception {\n    makeIndex2w1w();\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add( tq( \"pc\" ), Occur.SHOULD );\n    bq.add( pqF( \"personal\", \"computer\" ), Occur.SHOULD );\n    FieldQuery fq = new FieldQuery( bq, true, true );\n    FieldTermStack stack = new FieldTermStack( reader, 0, F, fq );\n    assertEquals( 3, stack.termList.size() );\n    Set<String> expectedSet = new HashSet<String>();\n    expectedSet.add( \"pc(3,20,1)\" );\n    expectedSet.add( \"personal(3,20,1)\" );\n    assertTrue( expectedSet.contains( stack.pop().toString() ) );\n    assertTrue( expectedSet.contains( stack.pop().toString() ) );\n    assertEquals( \"computer(3,20,2)\", stack.pop().toString() );\n  }\n\n","bugFix":null,"bugIntro":["0c066f7f6446f2d91513e81976f4b070a38763c7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c066f7f6446f2d91513e81976f4b070a38763c7","date":1395242366,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest#testFieldTermStackIndex2w1wSearch1term1phrase().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest#testFieldTermStackIndex2w1wSearch1term1phrase().mjava","sourceNew":"  public void testFieldTermStackIndex2w1wSearch1term1phrase() throws Exception {\n    makeIndex2w1w();\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add( tq( \"pc\" ), Occur.SHOULD );\n    bq.add( pqF( \"personal\", \"computer\" ), Occur.SHOULD );\n    FieldQuery fq = new FieldQuery( bq, true, true );\n    FieldTermStack stack = new FieldTermStack( reader, 0, F, fq );\n    assertEquals( 2, stack.termList.size() );\n    TermInfo ti = stack.pop();\n    assertEquals(\"pc(3,20,1)\", ti.toString());\n    assertEquals(\"personal(3,20,1)\", ti.getNext().toString());\n    assertSame(ti, ti.getNext().getNext());\n    assertEquals( \"computer(3,20,2)\", stack.pop().toString() );\n  }\n\n","sourceOld":"  public void testFieldTermStackIndex2w1wSearch1term1phrase() throws Exception {\n    makeIndex2w1w();\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add( tq( \"pc\" ), Occur.SHOULD );\n    bq.add( pqF( \"personal\", \"computer\" ), Occur.SHOULD );\n    FieldQuery fq = new FieldQuery( bq, true, true );\n    FieldTermStack stack = new FieldTermStack( reader, 0, F, fq );\n    assertEquals( 3, stack.termList.size() );\n    Set<String> expectedSet = new HashSet<>();\n    expectedSet.add( \"pc(3,20,1)\" );\n    expectedSet.add( \"personal(3,20,1)\" );\n    assertTrue( expectedSet.contains( stack.pop().toString() ) );\n    assertTrue( expectedSet.contains( stack.pop().toString() ) );\n    assertEquals( \"computer(3,20,2)\", stack.pop().toString() );\n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","d64148a458eb3ddf4d1bb1f1753cb9af194e1707"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest#testFieldTermStackIndex2w1wSearch1term1phrase().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/IndexTimeSynonymTest#testFieldTermStackIndex2w1wSearch1term1phrase().mjava","sourceNew":"  public void testFieldTermStackIndex2w1wSearch1term1phrase() throws Exception {\n    makeIndex2w1w();\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add( tq( \"pc\" ), Occur.SHOULD );\n    bq.add( pqF( \"personal\", \"computer\" ), Occur.SHOULD );\n    FieldQuery fq = new FieldQuery( bq.build(), true, true );\n    FieldTermStack stack = new FieldTermStack( reader, 0, F, fq );\n    assertEquals( 2, stack.termList.size() );\n    TermInfo ti = stack.pop();\n    assertEquals(\"pc(3,20,1)\", ti.toString());\n    assertEquals(\"personal(3,20,1)\", ti.getNext().toString());\n    assertSame(ti, ti.getNext().getNext());\n    assertEquals( \"computer(3,20,2)\", stack.pop().toString() );\n  }\n\n","sourceOld":"  public void testFieldTermStackIndex2w1wSearch1term1phrase() throws Exception {\n    makeIndex2w1w();\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add( tq( \"pc\" ), Occur.SHOULD );\n    bq.add( pqF( \"personal\", \"computer\" ), Occur.SHOULD );\n    FieldQuery fq = new FieldQuery( bq, true, true );\n    FieldTermStack stack = new FieldTermStack( reader, 0, F, fq );\n    assertEquals( 2, stack.termList.size() );\n    TermInfo ti = stack.pop();\n    assertEquals(\"pc(3,20,1)\", ti.toString());\n    assertEquals(\"personal(3,20,1)\", ti.getNext().toString());\n    assertSame(ti, ti.getNext().getNext());\n    assertEquals( \"computer(3,20,2)\", stack.pop().toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["0c066f7f6446f2d91513e81976f4b070a38763c7"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c066f7f6446f2d91513e81976f4b070a38763c7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0c066f7f6446f2d91513e81976f4b070a38763c7"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0c066f7f6446f2d91513e81976f4b070a38763c7":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}