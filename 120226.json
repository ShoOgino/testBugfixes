{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/SumIntAssociationFacets#getTopChildren(int,String,String...).mjava","commits":[{"id":"a1e7272ef767c1304198a2cb2000cf54ea49f808","date":1384786433,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SumIntAssociationFacets#getTopChildren(int,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int ord = taxoReader.getOrdinal(cp);\n    if (ord == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n    return getTopChildren(cp, ord, topN);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18edd2e3f5560087a37442fa424cbbed7c295ebc","date":1384813900,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SumIntAssociationFacets#getTopChildren(int,String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SumIntAssociationFacets#getTopChildren(int,String,String...).mjava","sourceNew":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndIntQueue q = new TopOrdAndIntQueue(topN);\n    \n    int bottomValue = 0;\n\n    int ord = children[dimOrd];\n    long sumValue = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    /*\n    FacetsConfig.DimConfig ft = config.getDimConfig(path.components[0]);\n    if (ft.hierarchical && ft.multiValued) {\n      totCount = counts[dimOrd];\n    }\n    */\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(cp, sumValue, labelValues);\n  }\n\n","sourceOld":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int ord = taxoReader.getOrdinal(cp);\n    if (ord == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n    return getTopChildren(cp, ord, topN);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"441c188ff9fd7da36e0e4d8a9b51cebe63b31192","date":1384814749,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumIntAssociations#getTopChildren(int,String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SumIntAssociationFacets#getTopChildren(int,String,String...).mjava","sourceNew":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndIntQueue q = new TopOrdAndIntQueue(topN);\n    \n    int bottomValue = 0;\n\n    int ord = children[dimOrd];\n    long sumValue = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    /*\n    FacetsConfig.DimConfig ft = config.getDimConfig(path.components[0]);\n    if (ft.hierarchical && ft.multiValued) {\n      totCount = counts[dimOrd];\n    }\n    */\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(cp, sumValue, labelValues);\n  }\n\n","sourceOld":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndIntQueue q = new TopOrdAndIntQueue(topN);\n    \n    int bottomValue = 0;\n\n    int ord = children[dimOrd];\n    long sumValue = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    /*\n    FacetsConfig.DimConfig ft = config.getDimConfig(path.components[0]);\n    if (ft.hierarchical && ft.multiValued) {\n      totCount = counts[dimOrd];\n    }\n    */\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(cp, sumValue, labelValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a1e7272ef767c1304198a2cb2000cf54ea49f808":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"18edd2e3f5560087a37442fa424cbbed7c295ebc":["a1e7272ef767c1304198a2cb2000cf54ea49f808"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"441c188ff9fd7da36e0e4d8a9b51cebe63b31192":["18edd2e3f5560087a37442fa424cbbed7c295ebc"]},"commit2Childs":{"a1e7272ef767c1304198a2cb2000cf54ea49f808":["18edd2e3f5560087a37442fa424cbbed7c295ebc"],"18edd2e3f5560087a37442fa424cbbed7c295ebc":["441c188ff9fd7da36e0e4d8a9b51cebe63b31192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1e7272ef767c1304198a2cb2000cf54ea49f808","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"441c188ff9fd7da36e0e4d8a9b51cebe63b31192":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","441c188ff9fd7da36e0e4d8a9b51cebe63b31192"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}