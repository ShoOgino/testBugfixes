{"path":"src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","commits":[{"id":"d7c1e9928d771e4e47fc17bc23aa91a2454b133a","date":1199894278,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) \n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FISRT_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponets();\n      \n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n      \n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n    }\n    \n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      components.add(comp);\n      log.info(\"Adding  component:\"+comp);\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) \n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FISRT_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponets();\n      \n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n      \n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n    }\n    \n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      components.add(comp);\n      log.info(\"Adding  component:\"+comp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7a336f6249a48ab27035544e55c5b1627e16026","date":1203630704,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) \n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponets();\n      \n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n      \n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n    }\n    \n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      components.add(comp);\n      log.info(\"Adding  component:\"+comp);\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) \n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FISRT_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponets();\n      \n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n      \n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n    }\n    \n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      components.add(comp);\n      log.info(\"Adding  component:\"+comp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponets();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      components.add(comp);\n      log.info(\"Adding  component:\"+comp);\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) \n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponets();\n      \n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n      \n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n    }\n    \n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      components.add(comp);\n      log.info(\"Adding  component:\"+comp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a12c36d08753c9ae9e6277936683941e8d74a890","date":1208372058,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      components.add(comp);\n      log.info(\"Adding  component:\"+comp);\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponets();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      components.add(comp);\n      log.info(\"Adding  component:\"+comp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3800a7e2484fc1ffc63d77823df159ce062ca0d","date":1217621188,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      components.add(comp);\n      log.info(\"Adding  component:\"+comp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a55c6d5113e34c9ed1a2e550053b8687dddcba95","date":1233952745,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n\n    Object co = initArgs.get(INIT_CONNECTION_TIMEOUT);\n    if (co != null) {\n      connectionTimeout = (Integer) co;\n      log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\n    }\n\n    Object so = initArgs.get(INIT_SO_TIMEOUT);\n    if (so != null) {\n      soTimeout = (Integer) so;\n      log.info(\"Setting shard-socket-timeout to: \" + soTimeout);\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n\n    Object co = initArgs.get(INIT_CONNECTION_TIMEOUT);\n    if (co != null) {\n      connectionTimeout = (Integer) co;\n      log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\n    }\n\n    Object so = initArgs.get(INIT_SO_TIMEOUT);\n    if (so != null) {\n      soTimeout = (Integer) so;\n      log.info(\"Setting shard-socket-timeout to: \" + soTimeout);\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n\n    Object co = initArgs.get(INIT_CONNECTION_TIMEOUT);\n    if (co != null) {\n      connectionTimeout = (Integer) co;\n      log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\n    }\n\n    Object so = initArgs.get(INIT_SO_TIMEOUT);\n    if (so != null) {\n      soTimeout = (Integer) so;\n      log.info(\"Setting shard-socket-timeout to: \" + soTimeout);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a55c6d5113e34c9ed1a2e550053b8687dddcba95":["a3800a7e2484fc1ffc63d77823df159ce062ca0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a3800a7e2484fc1ffc63d77823df159ce062ca0d":["a12c36d08753c9ae9e6277936683941e8d74a890"],"b7a336f6249a48ab27035544e55c5b1627e16026":["d7c1e9928d771e4e47fc17bc23aa91a2454b133a"],"ad94625fb8d088209f46650c8097196fec67f00c":["a55c6d5113e34c9ed1a2e550053b8687dddcba95"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["b7a336f6249a48ab27035544e55c5b1627e16026"],"d7c1e9928d771e4e47fc17bc23aa91a2454b133a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a12c36d08753c9ae9e6277936683941e8d74a890":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"]},"commit2Childs":{"a55c6d5113e34c9ed1a2e550053b8687dddcba95":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d7c1e9928d771e4e47fc17bc23aa91a2454b133a"],"a3800a7e2484fc1ffc63d77823df159ce062ca0d":["a55c6d5113e34c9ed1a2e550053b8687dddcba95"],"b7a336f6249a48ab27035544e55c5b1627e16026":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["a12c36d08753c9ae9e6277936683941e8d74a890"],"d7c1e9928d771e4e47fc17bc23aa91a2454b133a":["b7a336f6249a48ab27035544e55c5b1627e16026"],"a12c36d08753c9ae9e6277936683941e8d74a890":["a3800a7e2484fc1ffc63d77823df159ce062ca0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}