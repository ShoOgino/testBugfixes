{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"zzz\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"aaa\", \"a b c\", Field.Store.YES, Field.Index.NO));\n    doc.add(new Field(\"zzz\", \"1 2 3\", Field.Store.YES, Field.Index.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    doc = r.document(0);\n    Iterator it = doc.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}