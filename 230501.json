{"path":"lucene/src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","pathOld":"src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","sourceNew":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * Create a single query suitable for use by all subsearchers (in 1-1\n   * correspondence with queries). This is an optimization of the OR of\n   * all queries. We handle the common optimization cases of equal\n   * queries and overlapping clauses of boolean OR queries (as generated\n   * by MultiTermQuery.rewrite()).\n   * Be careful overriding this method as queries[0] determines which\n   * method will be called and is not necessarily of the same type as\n   * the other queries.\n  */\n  public Query combine(Query[] queries) {\n    HashSet<Query> uniques = new HashSet<Query>();\n    for (int i = 0; i < queries.length; i++) {\n      Query query = queries[i];\n      BooleanClause[] clauses = null;\n      // check if we can split the query into clauses\n      boolean splittable = (query instanceof BooleanQuery);\n      if(splittable){\n        BooleanQuery bq = (BooleanQuery) query;\n        splittable = bq.isCoordDisabled();\n        clauses = bq.getClauses();\n        for (int j = 0; splittable && j < clauses.length; j++) {\n          splittable = (clauses[j].getOccur() == BooleanClause.Occur.SHOULD);\n        }\n      }\n      if(splittable){\n        for (int j = 0; j < clauses.length; j++) {\n          uniques.add(clauses[j].getQuery());\n        }\n      } else {\n        uniques.add(query);\n      }\n    }\n    // optimization: if we have just one query, just return it\n    if(uniques.size() == 1){\n        return uniques.iterator().next();\n    }\n    BooleanQuery result = new BooleanQuery(true);\n    for (final Query query : uniques)\n      result.add(query, BooleanClause.Occur.SHOULD);\n    return result;\n  }\n\n","sourceOld":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * Create a single query suitable for use by all subsearchers (in 1-1\n   * correspondence with queries). This is an optimization of the OR of\n   * all queries. We handle the common optimization cases of equal\n   * queries and overlapping clauses of boolean OR queries (as generated\n   * by MultiTermQuery.rewrite()).\n   * Be careful overriding this method as queries[0] determines which\n   * method will be called and is not necessarily of the same type as\n   * the other queries.\n  */\n  public Query combine(Query[] queries) {\n    HashSet<Query> uniques = new HashSet<Query>();\n    for (int i = 0; i < queries.length; i++) {\n      Query query = queries[i];\n      BooleanClause[] clauses = null;\n      // check if we can split the query into clauses\n      boolean splittable = (query instanceof BooleanQuery);\n      if(splittable){\n        BooleanQuery bq = (BooleanQuery) query;\n        splittable = bq.isCoordDisabled();\n        clauses = bq.getClauses();\n        for (int j = 0; splittable && j < clauses.length; j++) {\n          splittable = (clauses[j].getOccur() == BooleanClause.Occur.SHOULD);\n        }\n      }\n      if(splittable){\n        for (int j = 0; j < clauses.length; j++) {\n          uniques.add(clauses[j].getQuery());\n        }\n      } else {\n        uniques.add(query);\n      }\n    }\n    // optimization: if we have just one query, just return it\n    if(uniques.size() == 1){\n        return uniques.iterator().next();\n    }\n    BooleanQuery result = new BooleanQuery(true);\n    for (final Query query : uniques)\n      result.add(query, BooleanClause.Occur.SHOULD);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","sourceNew":null,"sourceOld":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * Create a single query suitable for use by all subsearchers (in 1-1\n   * correspondence with queries). This is an optimization of the OR of\n   * all queries. We handle the common optimization cases of equal\n   * queries and overlapping clauses of boolean OR queries (as generated\n   * by MultiTermQuery.rewrite()).\n   * Be careful overriding this method as queries[0] determines which\n   * method will be called and is not necessarily of the same type as\n   * the other queries.\n  */\n  public Query combine(Query[] queries) {\n    HashSet<Query> uniques = new HashSet<Query>();\n    for (int i = 0; i < queries.length; i++) {\n      Query query = queries[i];\n      BooleanClause[] clauses = null;\n      // check if we can split the query into clauses\n      boolean splittable = (query instanceof BooleanQuery);\n      if(splittable){\n        BooleanQuery bq = (BooleanQuery) query;\n        splittable = bq.isCoordDisabled();\n        clauses = bq.getClauses();\n        for (int j = 0; splittable && j < clauses.length; j++) {\n          splittable = (clauses[j].getOccur() == BooleanClause.Occur.SHOULD);\n        }\n      }\n      if(splittable){\n        for (int j = 0; j < clauses.length; j++) {\n          uniques.add(clauses[j].getQuery());\n        }\n      } else {\n        uniques.add(query);\n      }\n    }\n    // optimization: if we have just one query, just return it\n    if(uniques.size() == 1){\n        return uniques.iterator().next();\n    }\n    BooleanQuery result = new BooleanQuery(true);\n    for (final Query query : uniques)\n      result.add(query, BooleanClause.Occur.SHOULD);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","sourceNew":null,"sourceOld":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * Create a single query suitable for use by all subsearchers (in 1-1\n   * correspondence with queries). This is an optimization of the OR of\n   * all queries. We handle the common optimization cases of equal\n   * queries and overlapping clauses of boolean OR queries (as generated\n   * by MultiTermQuery.rewrite()).\n   * Be careful overriding this method as queries[0] determines which\n   * method will be called and is not necessarily of the same type as\n   * the other queries.\n  */\n  public Query combine(Query[] queries) {\n    HashSet<Query> uniques = new HashSet<Query>();\n    for (int i = 0; i < queries.length; i++) {\n      Query query = queries[i];\n      BooleanClause[] clauses = null;\n      // check if we can split the query into clauses\n      boolean splittable = (query instanceof BooleanQuery);\n      if(splittable){\n        BooleanQuery bq = (BooleanQuery) query;\n        splittable = bq.isCoordDisabled();\n        clauses = bq.getClauses();\n        for (int j = 0; splittable && j < clauses.length; j++) {\n          splittable = (clauses[j].getOccur() == BooleanClause.Occur.SHOULD);\n        }\n      }\n      if(splittable){\n        for (int j = 0; j < clauses.length; j++) {\n          uniques.add(clauses[j].getQuery());\n        }\n      } else {\n        uniques.add(query);\n      }\n    }\n    // optimization: if we have just one query, just return it\n    if(uniques.size() == 1){\n        return uniques.iterator().next();\n    }\n    BooleanQuery result = new BooleanQuery(true);\n    for (final Query query : uniques)\n      result.add(query, BooleanClause.Occur.SHOULD);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/Query#combine(Query[]).mjava","sourceNew":null,"sourceOld":"  /** Expert: called when re-writing queries under MultiSearcher.\n   *\n   * Create a single query suitable for use by all subsearchers (in 1-1\n   * correspondence with queries). This is an optimization of the OR of\n   * all queries. We handle the common optimization cases of equal\n   * queries and overlapping clauses of boolean OR queries (as generated\n   * by MultiTermQuery.rewrite()).\n   * Be careful overriding this method as queries[0] determines which\n   * method will be called and is not necessarily of the same type as\n   * the other queries.\n  */\n  public Query combine(Query[] queries) {\n    HashSet<Query> uniques = new HashSet<Query>();\n    for (int i = 0; i < queries.length; i++) {\n      Query query = queries[i];\n      BooleanClause[] clauses = null;\n      // check if we can split the query into clauses\n      boolean splittable = (query instanceof BooleanQuery);\n      if(splittable){\n        BooleanQuery bq = (BooleanQuery) query;\n        splittable = bq.isCoordDisabled();\n        clauses = bq.getClauses();\n        for (int j = 0; splittable && j < clauses.length; j++) {\n          splittable = (clauses[j].getOccur() == BooleanClause.Occur.SHOULD);\n        }\n      }\n      if(splittable){\n        for (int j = 0; j < clauses.length; j++) {\n          uniques.add(clauses[j].getQuery());\n        }\n      } else {\n        uniques.add(query);\n      }\n    }\n    // optimization: if we have just one query, just return it\n    if(uniques.size() == 1){\n        return uniques.iterator().next();\n    }\n    BooleanQuery result = new BooleanQuery(true);\n    for (final Query query : uniques)\n      result.add(query, BooleanClause.Occur.SHOULD);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}