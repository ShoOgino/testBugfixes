{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLetterTokenizer#isTokenChar(char).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLetterTokenizer#isTokenChar(char).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/ru/RussianLetterTokenizer#isTokenChar(char).mjava","sourceNew":"    /**\n     * Collects only characters which satisfy\n     * {@link Character#isLetter(char)}.\n     */\n    protected boolean isTokenChar(char c)\n    {\n        if (Character.isLetter(c))\n            return true;\n        for (int i = 0; i < charset.length; i++)\n        {\n            if (c == charset[i])\n                return true;\n        }\n        return false;\n    }\n\n","sourceOld":"    /**\n     * Collects only characters which satisfy\n     * {@link Character#isLetter(char)}.\n     */\n    protected boolean isTokenChar(char c)\n    {\n        if (Character.isLetter(c))\n            return true;\n        for (int i = 0; i < charset.length; i++)\n        {\n            if (c == charset[i])\n                return true;\n        }\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96e2db48ddfadd8c63de9ee8b4a0ff627e3daaa8","date":1250973366,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLetterTokenizer#isTokenChar(char).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLetterTokenizer#isTokenChar(char).mjava","sourceNew":"    /**\n     * Collects only characters which satisfy\n     * {@link Character#isLetter(char)}.\n     */\n    protected boolean isTokenChar(char c)\n    {\n    \t/* in the next release, this can be implemented as isLetter(c) or [0-9] */\n        if (Character.isLetter(c))\n            return true;\n        for (int i = 0; i < charset.length; i++)\n        {\n            if (c == charset[i])\n                return true;\n        }\n        return false;\n    }\n\n","sourceOld":"    /**\n     * Collects only characters which satisfy\n     * {@link Character#isLetter(char)}.\n     */\n    protected boolean isTokenChar(char c)\n    {\n        if (Character.isLetter(c))\n            return true;\n        for (int i = 0; i < charset.length; i++)\n        {\n            if (c == charset[i])\n                return true;\n        }\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db07cbc50e33371ac44b6829104a06d485c5fe70","date":1254424809,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLetterTokenizer#isTokenChar(char).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLetterTokenizer#isTokenChar(char).mjava","sourceNew":"    /**\n     * Collects only characters which satisfy\n     * {@link Character#isLetter(char)}.\n     */\n    protected boolean isTokenChar(char c)\n    {\n        if (Character.isLetter(c) || (c >= '0' && c <= '9'))\n            return true;\n        else\n            return false;\n    }\n\n","sourceOld":"    /**\n     * Collects only characters which satisfy\n     * {@link Character#isLetter(char)}.\n     */\n    protected boolean isTokenChar(char c)\n    {\n    \t/* in the next release, this can be implemented as isLetter(c) or [0-9] */\n        if (Character.isLetter(c))\n            return true;\n        for (int i = 0; i < charset.length; i++)\n        {\n            if (c == charset[i])\n                return true;\n        }\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLetterTokenizer#isTokenChar(char).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLetterTokenizer#isTokenChar(char).mjava","sourceNew":"    /**\n     * Collects only characters which satisfy\n     * {@link Character#isLetter(char)}.\n     */\n    @Override\n    protected boolean isTokenChar(char c)\n    {\n        if (Character.isLetter(c) || (c >= '0' && c <= '9'))\n            return true;\n        else\n            return false;\n    }\n\n","sourceOld":"    /**\n     * Collects only characters which satisfy\n     * {@link Character#isLetter(char)}.\n     */\n    protected boolean isTokenChar(char c)\n    {\n        if (Character.isLetter(c) || (c >= '0' && c <= '9'))\n            return true;\n        else\n            return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"966b079690131e434b39530d82cc413f5aff4cd5","date":1264751025,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianLetterTokenizer#isTokenChar(char).mjava","sourceNew":null,"sourceOld":"    /**\n     * Collects only characters which satisfy\n     * {@link Character#isLetter(char)}.\n     */\n    @Override\n    protected boolean isTokenChar(char c)\n    {\n        if (Character.isLetter(c) || (c >= '0' && c <= '9'))\n            return true;\n        else\n            return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"966b079690131e434b39530d82cc413f5aff4cd5":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"96e2db48ddfadd8c63de9ee8b4a0ff627e3daaa8":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["db07cbc50e33371ac44b6829104a06d485c5fe70"],"db07cbc50e33371ac44b6829104a06d485c5fe70":["96e2db48ddfadd8c63de9ee8b4a0ff627e3daaa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["966b079690131e434b39530d82cc413f5aff4cd5"]},"commit2Childs":{"966b079690131e434b39530d82cc413f5aff4cd5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["96e2db48ddfadd8c63de9ee8b4a0ff627e3daaa8"],"96e2db48ddfadd8c63de9ee8b4a0ff627e3daaa8":["db07cbc50e33371ac44b6829104a06d485c5fe70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["966b079690131e434b39530d82cc413f5aff4cd5"],"db07cbc50e33371ac44b6829104a06d485c5fe70":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}