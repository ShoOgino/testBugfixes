{"path":"lucene/core/src/java/org/apache/lucene/util/CollectionUtil.ListMergeSorterTemplate#mergeWithExtraMemory(int,int,int,int,int).mjava","commits":[{"id":"179c01998affd8475cfbb86e5c74e568870b2a9f","date":1363967234,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CollectionUtil.ListMergeSorterTemplate#mergeWithExtraMemory(int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"    private void mergeWithExtraMemory(int lo, int pivot, int hi, int len1, int len2) {\n      for (int i = 0; i < len1; ++i) {\n        tmp[i] = list.get(lo + i);\n      }\n      int i = 0, j = pivot, dest = lo;\n      while (i < len1 && j < hi) {\n        if (compare(tmp[i], list.get(j)) <= 0) {\n          list.set(dest++, tmp[i++]);\n        } else {\n          list.set(dest++, list.get(j++));\n        }\n      }\n      while (i < len1) {\n        list.set(dest++, tmp[i++]);\n      }\n      while (j < hi) {\n        list.set(dest++, list.get(j++));\n      }\n      assert dest == hi;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5108a3a331b23a7fba7e7a4037fcb87085e0112e","date":1364415244,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CollectionUtil.ListMergeSorterTemplate#mergeWithExtraMemory(int,int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CollectionUtil.ListMergeSorterTemplate#mergeWithExtraMemory(int,int,int,int,int).mjava","sourceNew":"    private void mergeWithExtraMemory(int lo, int pivot, int hi, int len1, int len2) {\n      for (int i = 0; i < len1; ++i) {\n        tmp[i] = list.get(lo + i);\n      }\n      int i = 0, j = pivot, dest = lo;\n      while (i < len1 && j < hi) {\n        if (compare(tmp[i], list.get(j)) <= 0) {\n          list.set(dest++, tmp[i++]);\n        } else {\n          list.set(dest++, list.get(j++));\n        }\n      }\n      while (i < len1) {\n        list.set(dest++, tmp[i++]);\n      }\n      assert j == dest;\n    }\n\n","sourceOld":"    private void mergeWithExtraMemory(int lo, int pivot, int hi, int len1, int len2) {\n      for (int i = 0; i < len1; ++i) {\n        tmp[i] = list.get(lo + i);\n      }\n      int i = 0, j = pivot, dest = lo;\n      while (i < len1 && j < hi) {\n        if (compare(tmp[i], list.get(j)) <= 0) {\n          list.set(dest++, tmp[i++]);\n        } else {\n          list.set(dest++, list.get(j++));\n        }\n      }\n      while (i < len1) {\n        list.set(dest++, tmp[i++]);\n      }\n      while (j < hi) {\n        list.set(dest++, list.get(j++));\n      }\n      assert dest == hi;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/CollectionUtil.ListMergeSorterTemplate#mergeWithExtraMemory(int,int,int,int,int).mjava","sourceNew":null,"sourceOld":"    private void mergeWithExtraMemory(int lo, int pivot, int hi, int len1, int len2) {\n      for (int i = 0; i < len1; ++i) {\n        tmp[i] = list.get(lo + i);\n      }\n      int i = 0, j = pivot, dest = lo;\n      while (i < len1 && j < hi) {\n        if (compare(tmp[i], list.get(j)) <= 0) {\n          list.set(dest++, tmp[i++]);\n        } else {\n          list.set(dest++, list.get(j++));\n        }\n      }\n      while (i < len1) {\n        list.set(dest++, tmp[i++]);\n      }\n      assert j == dest;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5108a3a331b23a7fba7e7a4037fcb87085e0112e":["179c01998affd8475cfbb86e5c74e568870b2a9f"],"179c01998affd8475cfbb86e5c74e568870b2a9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["5108a3a331b23a7fba7e7a4037fcb87085e0112e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"]},"commit2Childs":{"5108a3a331b23a7fba7e7a4037fcb87085e0112e":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"179c01998affd8475cfbb86e5c74e568870b2a9f":["5108a3a331b23a7fba7e7a4037fcb87085e0112e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["179c01998affd8475cfbb86e5c74e568870b2a9f"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}