{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#testQuery().mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#testQuery().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestDrillDownQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    DrillDownQuery q = new DrillDownQuery(config);\n    q.add(\"a\");\n    System.out.println(\"q=\" + q);\n    QueryUtils.check(q);\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(config, q);\n    q2.add(\"b\");\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    DrillDownQuery q3 = new DrillDownQuery(config);\n    q3.add(\"a\");\n    q3.add(\"b\");\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(config, fooQuery);\n    q4.add(\"b\");\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","sourceOld":"  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    SimpleDrillDownQuery q = new SimpleDrillDownQuery(config);\n    q.add(\"a\");\n    System.out.println(\"q=\" + q);\n    QueryUtils.check(q);\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    SimpleDrillDownQuery q2 = new SimpleDrillDownQuery(config, q);\n    q2.add(\"b\");\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    SimpleDrillDownQuery q3 = new SimpleDrillDownQuery(config);\n    q3.add(\"a\");\n    q3.add(\"b\");\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    SimpleDrillDownQuery q4 = new SimpleDrillDownQuery(config, fooQuery);\n    q4.add(\"b\");\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#testQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    DrillDownQuery q = new DrillDownQuery(config);\n    q.add(\"a\");\n    System.out.println(\"q=\" + q);\n    QueryUtils.check(q);\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(config, q);\n    q2.add(\"b\");\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    DrillDownQuery q3 = new DrillDownQuery(config);\n    q3.add(\"a\");\n    q3.add(\"b\");\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(config, fooQuery);\n    q4.add(\"b\");\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518","date":1398331323,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#testQuery().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    DrillDownQuery q = new DrillDownQuery(config);\n    q.add(\"a\");\n    QueryUtils.check(q);\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(config, q);\n    q2.add(\"b\");\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    DrillDownQuery q3 = new DrillDownQuery(config);\n    q3.add(\"a\");\n    q3.add(\"b\");\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(config, fooQuery);\n    q4.add(\"b\");\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","sourceOld":"  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    DrillDownQuery q = new DrillDownQuery(config);\n    q.add(\"a\");\n    System.out.println(\"q=\" + q);\n    QueryUtils.check(q);\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(config, q);\n    q2.add(\"b\");\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    DrillDownQuery q3 = new DrillDownQuery(config);\n    q3.add(\"a\");\n    q3.add(\"b\");\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(config, fooQuery);\n    q4.add(\"b\");\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d524d41bd211f811312cf6639e3792dae4df6cbb","date":1398850727,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#testQuery().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    DrillDownQuery q = new DrillDownQuery(config);\n    q.add(\"a\");\n    QueryUtils.check(q);\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(config, q);\n    q2.add(\"b\");\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    DrillDownQuery q3 = new DrillDownQuery(config);\n    q3.add(\"a\");\n    q3.add(\"b\");\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(config, fooQuery);\n    q4.add(\"b\");\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","sourceOld":"  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    DrillDownQuery q = new DrillDownQuery(config);\n    q.add(\"a\");\n    System.out.println(\"q=\" + q);\n    QueryUtils.check(q);\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(config, q);\n    q2.add(\"b\");\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    DrillDownQuery q3 = new DrillDownQuery(config);\n    q3.add(\"a\");\n    q3.add(\"b\");\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(config, fooQuery);\n    q4.add(\"b\");\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#testQuery().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    DrillDownQuery q = new DrillDownQuery(config);\n    q.add(\"a\");\n    QueryUtils.check(q);\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits.value);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(config, q);\n    q2.add(\"b\");\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits.value);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    DrillDownQuery q3 = new DrillDownQuery(config);\n    q3.add(\"a\");\n    q3.add(\"b\");\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits.value);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(config, fooQuery);\n    q4.add(\"b\");\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits.value);\n  }\n\n","sourceOld":"  public void testQuery() throws IOException {\n    IndexSearcher searcher = newSearcher(reader);\n\n    // Making sure the query yields 25 documents with the facet \"a\"\n    DrillDownQuery q = new DrillDownQuery(config);\n    q.add(\"a\");\n    QueryUtils.check(q);\n    TopDocs docs = searcher.search(q, 100);\n    assertEquals(25, docs.totalHits);\n    \n    // Making sure the query yields 5 documents with the facet \"b\" and the\n    // previous (facet \"a\") query as a base query\n    DrillDownQuery q2 = new DrillDownQuery(config, q);\n    q2.add(\"b\");\n    docs = searcher.search(q2, 100);\n    assertEquals(5, docs.totalHits);\n\n    // Making sure that a query of both facet \"a\" and facet \"b\" yields 5 results\n    DrillDownQuery q3 = new DrillDownQuery(config);\n    q3.add(\"a\");\n    q3.add(\"b\");\n    docs = searcher.search(q3, 100);\n    \n    assertEquals(5, docs.totalHits);\n    // Check that content:foo (which yields 50% results) and facet/b (which yields 20%)\n    // would gather together 10 results (10%..) \n    Query fooQuery = new TermQuery(new Term(\"content\", \"foo\"));\n    DrillDownQuery q4 = new DrillDownQuery(config, fooQuery);\n    q4.add(\"b\");\n    docs = searcher.search(q4, 100);\n    assertEquals(10, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d524d41bd211f811312cf6639e3792dae4df6cbb":["3cc728b07df73b197e6d940d27f9b08b63918f13","e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","21d36d0db865f7b84026b447bec653469a6e66df"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["d524d41bd211f811312cf6639e3792dae4df6cbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"d524d41bd211f811312cf6639e3792dae4df6cbb":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","3cc728b07df73b197e6d940d27f9b08b63918f13"],"21d36d0db865f7b84026b447bec653469a6e66df":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":["d524d41bd211f811312cf6639e3792dae4df6cbb"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d524d41bd211f811312cf6639e3792dae4df6cbb","e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}