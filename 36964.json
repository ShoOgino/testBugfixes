{"path":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(int).mjava","commits":[{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(int).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized void prune(int count) {\n    if (count > 0) {\n      if (infoStream != null) {\n        message(\"pruneDeletes: prune \" + count + \" packets; \" + (deletes.size() - count) + \" packets remain\");\n      }\n      for(int delIDX=0;delIDX<count;delIDX++) {\n        final BufferedDeletes packet = deletes.get(delIDX);\n        numTerms.addAndGet(-packet.numTermDeletes.get());\n        assert numTerms.get() >= 0;\n        bytesUsed.addAndGet(-packet.bytesUsed.get());\n        assert bytesUsed.get() >= 0;\n      }\n      deletes.subList(0, count).clear();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69a6d2d525aeab53c867ed26934185e5bb627d0e","date":1296516902,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(int).mjava","sourceNew":"  private synchronized void prune(int count) {\n    if (count > 0) {\n      if (infoStream != null) {\n        message(\"pruneDeletes: prune \" + count + \" packets; \" + (deletes.size() - count) + \" packets remain\");\n      }\n      for(int delIDX=0;delIDX<count;delIDX++) {\n        final FrozenBufferedDeletes packet = deletes.get(delIDX);\n        numTerms.addAndGet(-packet.numTermDeletes);\n        assert numTerms.get() >= 0;\n        bytesUsed.addAndGet(-packet.bytesUsed);\n        assert bytesUsed.get() >= 0;\n      }\n      deletes.subList(0, count).clear();\n    }\n  }\n\n","sourceOld":"  private synchronized void prune(int count) {\n    if (count > 0) {\n      if (infoStream != null) {\n        message(\"pruneDeletes: prune \" + count + \" packets; \" + (deletes.size() - count) + \" packets remain\");\n      }\n      for(int delIDX=0;delIDX<count;delIDX++) {\n        final BufferedDeletes packet = deletes.get(delIDX);\n        numTerms.addAndGet(-packet.numTermDeletes.get());\n        assert numTerms.get() >= 0;\n        bytesUsed.addAndGet(-packet.bytesUsed.get());\n        assert bytesUsed.get() >= 0;\n      }\n      deletes.subList(0, count).clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(int).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized void prune(int count) {\n    if (count > 0) {\n      if (infoStream != null) {\n        message(\"pruneDeletes: prune \" + count + \" packets; \" + (deletes.size() - count) + \" packets remain\");\n      }\n      for(int delIDX=0;delIDX<count;delIDX++) {\n        final FrozenBufferedDeletes packet = deletes.get(delIDX);\n        numTerms.addAndGet(-packet.numTermDeletes);\n        assert numTerms.get() >= 0;\n        bytesUsed.addAndGet(-packet.bytesUsed);\n        assert bytesUsed.get() >= 0;\n      }\n      deletes.subList(0, count).clear();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(int).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized void prune(int count) {\n    if (count > 0) {\n      if (infoStream != null) {\n        message(\"pruneDeletes: prune \" + count + \" packets; \" + (deletes.size() - count) + \" packets remain\");\n      }\n      for(int delIDX=0;delIDX<count;delIDX++) {\n        final FrozenBufferedDeletes packet = deletes.get(delIDX);\n        numTerms.addAndGet(-packet.numTermDeletes);\n        assert numTerms.get() >= 0;\n        bytesUsed.addAndGet(-packet.bytesUsed);\n        assert bytesUsed.get() >= 0;\n      }\n      deletes.subList(0, count).clear();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(int).mjava","sourceNew":"  private synchronized void prune(int count) {\n    if (count > 0) {\n      if (infoStream != null) {\n        infoStream.message(\"BD\", \"pruneDeletes: prune \" + count + \" packets; \" + (deletes.size() - count) + \" packets remain\");\n      }\n      for(int delIDX=0;delIDX<count;delIDX++) {\n        final FrozenBufferedDeletes packet = deletes.get(delIDX);\n        numTerms.addAndGet(-packet.numTermDeletes);\n        assert numTerms.get() >= 0;\n        bytesUsed.addAndGet(-packet.bytesUsed);\n        assert bytesUsed.get() >= 0;\n      }\n      deletes.subList(0, count).clear();\n    }\n  }\n\n","sourceOld":"  private synchronized void prune(int count) {\n    if (count > 0) {\n      if (infoStream != null) {\n        message(\"pruneDeletes: prune \" + count + \" packets; \" + (deletes.size() - count) + \" packets remain\");\n      }\n      for(int delIDX=0;delIDX<count;delIDX++) {\n        final FrozenBufferedDeletes packet = deletes.get(delIDX);\n        numTerms.addAndGet(-packet.numTermDeletes);\n        assert numTerms.get() >= 0;\n        bytesUsed.addAndGet(-packet.bytesUsed);\n        assert bytesUsed.get() >= 0;\n      }\n      deletes.subList(0, count).clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(int).mjava","sourceNew":"  private synchronized void prune(int count) {\n    if (count > 0) {\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", \"pruneDeletes: prune \" + count + \" packets; \" + (deletes.size() - count) + \" packets remain\");\n      }\n      for(int delIDX=0;delIDX<count;delIDX++) {\n        final FrozenBufferedDeletes packet = deletes.get(delIDX);\n        numTerms.addAndGet(-packet.numTermDeletes);\n        assert numTerms.get() >= 0;\n        bytesUsed.addAndGet(-packet.bytesUsed);\n        assert bytesUsed.get() >= 0;\n      }\n      deletes.subList(0, count).clear();\n    }\n  }\n\n","sourceOld":"  private synchronized void prune(int count) {\n    if (count > 0) {\n      if (infoStream != null) {\n        infoStream.message(\"BD\", \"pruneDeletes: prune \" + count + \" packets; \" + (deletes.size() - count) + \" packets remain\");\n      }\n      for(int delIDX=0;delIDX<count;delIDX++) {\n        final FrozenBufferedDeletes packet = deletes.get(delIDX);\n        numTerms.addAndGet(-packet.numTermDeletes);\n        assert numTerms.get() >= 0;\n        bytesUsed.addAndGet(-packet.bytesUsed);\n        assert bytesUsed.get() >= 0;\n      }\n      deletes.subList(0, count).clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(int).mjava","sourceNew":"  private synchronized void prune(int count) {\n    if (count > 0) {\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", \"pruneDeletes: prune \" + count + \" packets; \" + (deletes.size() - count) + \" packets remain\");\n      }\n      for(int delIDX=0;delIDX<count;delIDX++) {\n        final FrozenBufferedDeletes packet = deletes.get(delIDX);\n        numTerms.addAndGet(-packet.numTermDeletes);\n        assert numTerms.get() >= 0;\n        bytesUsed.addAndGet(-packet.bytesUsed);\n        assert bytesUsed.get() >= 0;\n      }\n      deletes.subList(0, count).clear();\n    }\n  }\n\n","sourceOld":"  private synchronized void prune(int count) {\n    if (count > 0) {\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", \"pruneDeletes: prune \" + count + \" packets; \" + (deletes.size() - count) + \" packets remain\");\n      }\n      for(int delIDX=0;delIDX<count;delIDX++) {\n        final FrozenBufferedDeletes packet = deletes.get(delIDX);\n        numTerms.addAndGet(-packet.numTermDeletes);\n        assert numTerms.get() >= 0;\n        bytesUsed.addAndGet(-packet.bytesUsed);\n        assert bytesUsed.get() >= 0;\n      }\n      deletes.subList(0, count).clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"06584e6e98d592b34e1329b384182f368d2025e8":["69a6d2d525aeab53c867ed26934185e5bb627d0e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["c19f985e36a65cc969e8e564fe337a0d41512075"],"c19f985e36a65cc969e8e564fe337a0d41512075":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","c19f985e36a65cc969e8e564fe337a0d41512075","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["06584e6e98d592b34e1329b384182f368d2025e8","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["69a6d2d525aeab53c867ed26934185e5bb627d0e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}