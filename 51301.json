{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testSparseClauseOptimization().mjava","commits":[{"id":"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c","date":1445865000,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testSparseClauseOptimization().mjava","pathOld":"/dev/null","sourceNew":"  public void testSparseClauseOptimization() throws IOException {\n    // When some windows have only one scorer that can match, the scorer will\n    // directly call the collector in this window\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document emptyDoc = new Document();\n    final int numDocs = atLeast(10);\n    for (int d = 0; d < numDocs; ++d) {\n      for (int i = random().nextInt(5000); i >= 0; --i) {\n        w.addDocument(emptyDoc);\n      }\n      Document doc = new Document();\n      for (String value : Arrays.asList(\"foo\", \"bar\", \"baz\")) {\n        if (random().nextBoolean()) {\n          doc.add(new StringField(\"field\", value, Store.NO));\n        }\n      }\n    }\n    for (int i = TestUtil.nextInt(random(), 3000, 5000); i >= 0; --i) {\n      w.addDocument(emptyDoc);\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new BooleanQuery.Builder()\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"foo\")), 3), Occur.SHOULD)\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"bar\")), 3), Occur.SHOULD)\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"baz\")), 3), Occur.SHOULD)\n      .setDisableCoord(random().nextBoolean())\n      .build();\n\n    // duel BS1 vs. BS2\n    QueryUtils.check(random(), query, searcher);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testSparseClauseOptimization().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testSparseClauseOptimization().mjava","sourceNew":"  public void testSparseClauseOptimization() throws IOException {\n    // When some windows have only one scorer that can match, the scorer will\n    // directly call the collector in this window\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document emptyDoc = new Document();\n    final int numDocs = atLeast(10);\n    for (int d = 0; d < numDocs; ++d) {\n      for (int i = random().nextInt(5000); i >= 0; --i) {\n        w.addDocument(emptyDoc);\n      }\n      Document doc = new Document();\n      for (String value : Arrays.asList(\"foo\", \"bar\", \"baz\")) {\n        if (random().nextBoolean()) {\n          doc.add(new StringField(\"field\", value, Store.NO));\n        }\n      }\n    }\n    for (int i = TestUtil.nextInt(random(), 3000, 5000); i >= 0; --i) {\n      w.addDocument(emptyDoc);\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new BooleanQuery.Builder()\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"foo\")), 3), Occur.SHOULD)\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"bar\")), 3), Occur.SHOULD)\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"baz\")), 3), Occur.SHOULD)\n      .build();\n\n    // duel BS1 vs. BS2\n    QueryUtils.check(random(), query, searcher);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSparseClauseOptimization() throws IOException {\n    // When some windows have only one scorer that can match, the scorer will\n    // directly call the collector in this window\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document emptyDoc = new Document();\n    final int numDocs = atLeast(10);\n    for (int d = 0; d < numDocs; ++d) {\n      for (int i = random().nextInt(5000); i >= 0; --i) {\n        w.addDocument(emptyDoc);\n      }\n      Document doc = new Document();\n      for (String value : Arrays.asList(\"foo\", \"bar\", \"baz\")) {\n        if (random().nextBoolean()) {\n          doc.add(new StringField(\"field\", value, Store.NO));\n        }\n      }\n    }\n    for (int i = TestUtil.nextInt(random(), 3000, 5000); i >= 0; --i) {\n      w.addDocument(emptyDoc);\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new BooleanQuery.Builder()\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"foo\")), 3), Occur.SHOULD)\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"bar\")), 3), Occur.SHOULD)\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"baz\")), 3), Occur.SHOULD)\n      .setDisableCoord(random().nextBoolean())\n      .build();\n\n    // duel BS1 vs. BS2\n    QueryUtils.check(random(), query, searcher);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testSparseClauseOptimization().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testSparseClauseOptimization().mjava","sourceNew":"  public void testSparseClauseOptimization() throws IOException {\n    // When some windows have only one scorer that can match, the scorer will\n    // directly call the collector in this window\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document emptyDoc = new Document();\n    final int numDocs = atLeast(10);\n    for (int d = 0; d < numDocs; ++d) {\n      for (int i = random().nextInt(5000); i >= 0; --i) {\n        w.addDocument(emptyDoc);\n      }\n      Document doc = new Document();\n      for (String value : Arrays.asList(\"foo\", \"bar\", \"baz\")) {\n        if (random().nextBoolean()) {\n          doc.add(new StringField(\"field\", value, Store.NO));\n        }\n      }\n    }\n    for (int i = TestUtil.nextInt(random(), 3000, 5000); i >= 0; --i) {\n      w.addDocument(emptyDoc);\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new BooleanQuery.Builder()\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"foo\")), 3), Occur.SHOULD)\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"bar\")), 3), Occur.SHOULD)\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"baz\")), 3), Occur.SHOULD)\n      .build();\n\n    // duel BS1 vs. BS2\n    QueryUtils.check(random(), query, searcher);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSparseClauseOptimization() throws IOException {\n    // When some windows have only one scorer that can match, the scorer will\n    // directly call the collector in this window\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document emptyDoc = new Document();\n    final int numDocs = atLeast(10);\n    for (int d = 0; d < numDocs; ++d) {\n      for (int i = random().nextInt(5000); i >= 0; --i) {\n        w.addDocument(emptyDoc);\n      }\n      Document doc = new Document();\n      for (String value : Arrays.asList(\"foo\", \"bar\", \"baz\")) {\n        if (random().nextBoolean()) {\n          doc.add(new StringField(\"field\", value, Store.NO));\n        }\n      }\n    }\n    for (int i = TestUtil.nextInt(random(), 3000, 5000); i >= 0; --i) {\n      w.addDocument(emptyDoc);\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new BooleanQuery.Builder()\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"foo\")), 3), Occur.SHOULD)\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"bar\")), 3), Occur.SHOULD)\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"baz\")), 3), Occur.SHOULD)\n      .setDisableCoord(random().nextBoolean())\n      .build();\n\n    // duel BS1 vs. BS2\n    QueryUtils.check(random(), query, searcher);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testSparseClauseOptimization().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testSparseClauseOptimization().mjava","sourceNew":"  public void testSparseClauseOptimization() throws IOException {\n    // When some windows have only one scorer that can match, the scorer will\n    // directly call the collector in this window\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document emptyDoc = new Document();\n    final int numDocs = atLeast(10);\n    int numEmptyDocs = atLeast(200);\n    for (int d = 0; d < numDocs; ++d) {\n      for (int i = numEmptyDocs; i >= 0; --i) {\n        w.addDocument(emptyDoc);\n      }\n      Document doc = new Document();\n      for (String value : Arrays.asList(\"foo\", \"bar\", \"baz\")) {\n        if (random().nextBoolean()) {\n          doc.add(new StringField(\"field\", value, Store.NO));\n        }\n      }\n    }\n    numEmptyDocs = atLeast(200);\n    for (int i = numEmptyDocs; i >= 0; --i) {\n      w.addDocument(emptyDoc);\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new BooleanQuery.Builder()\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"foo\")), 3), Occur.SHOULD)\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"bar\")), 3), Occur.SHOULD)\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"baz\")), 3), Occur.SHOULD)\n      .build();\n\n    // duel BS1 vs. BS2\n    QueryUtils.check(random(), query, searcher);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSparseClauseOptimization() throws IOException {\n    // When some windows have only one scorer that can match, the scorer will\n    // directly call the collector in this window\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document emptyDoc = new Document();\n    final int numDocs = atLeast(10);\n    for (int d = 0; d < numDocs; ++d) {\n      for (int i = random().nextInt(5000); i >= 0; --i) {\n        w.addDocument(emptyDoc);\n      }\n      Document doc = new Document();\n      for (String value : Arrays.asList(\"foo\", \"bar\", \"baz\")) {\n        if (random().nextBoolean()) {\n          doc.add(new StringField(\"field\", value, Store.NO));\n        }\n      }\n    }\n    for (int i = TestUtil.nextInt(random(), 3000, 5000); i >= 0; --i) {\n      w.addDocument(emptyDoc);\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new BooleanQuery.Builder()\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"foo\")), 3), Occur.SHOULD)\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"bar\")), 3), Occur.SHOULD)\n      .add(new BoostQuery(new TermQuery(new Term(\"field\", \"baz\")), 3), Occur.SHOULD)\n      .build();\n\n    // duel BS1 vs. BS2\n    QueryUtils.check(random(), query, searcher);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","71da933d30aea361ccc224d6544c451cbf49916d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}