{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","sourceNew":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeTrigger = (long) (1.05 * ramBufferSize);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","sourceOld":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeTrigger = (long) (1.05 * ramBufferSize);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","sourceNew":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","sourceOld":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeTrigger = (long) (1.05 * ramBufferSize);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","sourceNew":"  public void setRAMBufferSizeMB(double mb) {\n    this.maxBufferSizeMB = mb;\n  }\n\n","sourceOld":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","sourceNew":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","sourceOld":"  public void setRAMBufferSizeMB(double mb) {\n    this.maxBufferSizeMB = mb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","sourceNew":"  public void setRAMBufferSizeMB(double mb) {\n    this.maxBufferSizeMB = mb;\n  }\n\n","sourceOld":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","sourceNew":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","sourceOld":"  public void setRAMBufferSizeMB(double mb) {\n    this.maxBufferSizeMB = mb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54cdb3f871937873dd85ae388202af7a5efd5584","date":1294960319,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","sourceNew":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n    }\n  }\n\n","sourceOld":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00b21520fafb9860ce0318d7be5ea84619c185ad","date":1300444600,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","sourceNew":null,"sourceOld":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","sourceNew":null,"sourceOld":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n      waitQueuePauseBytes = 4*1024*1024;\n      waitQueueResumeBytes = 2*1024*1024;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n      waitQueuePauseBytes = (long) (ramBufferSize*0.1);\n      waitQueueResumeBytes = (long) (ramBufferSize*0.05);\n      freeLevel = (long) (0.95 * ramBufferSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#setRAMBufferSizeMB(double).mjava","sourceNew":null,"sourceOld":"  /** Set how much RAM we can use before flushing. */\n  synchronized void setRAMBufferSizeMB(double mb) {\n    if (mb == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      ramBufferSize = IndexWriterConfig.DISABLE_AUTO_FLUSH;\n    } else {\n      ramBufferSize = (long) (mb*1024*1024);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["54cdb3f871937873dd85ae388202af7a5efd5584","00b21520fafb9860ce0318d7be5ea84619c185ad"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["334c1175813aea771a71728cd2c4ee4754fd0603","00b21520fafb9860ce0318d7be5ea84619c185ad"],"54cdb3f871937873dd85ae388202af7a5efd5584":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fe956d65251358d755c56f14fe8380644790e47":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["8fe956d65251358d755c56f14fe8380644790e47","334c1175813aea771a71728cd2c4ee4754fd0603"],"00b21520fafb9860ce0318d7be5ea84619c185ad":["334c1175813aea771a71728cd2c4ee4754fd0603"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["00b21520fafb9860ce0318d7be5ea84619c185ad"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"54cdb3f871937873dd85ae388202af7a5efd5584":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8fe956d65251358d755c56f14fe8380644790e47":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["8fe956d65251358d755c56f14fe8380644790e47","9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"334c1175813aea771a71728cd2c4ee4754fd0603":["d619839baa8ce5503e496b94a9e42ad6f079293f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","00b21520fafb9860ce0318d7be5ea84619c185ad"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["54cdb3f871937873dd85ae388202af7a5efd5584"],"00b21520fafb9860ce0318d7be5ea84619c185ad":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}