{"path":"modules/spatial/src/main/java/org/apache/lucene/spatial/strategy/prefix/PrefixCellsTokenizer#incrementToken().mjava","commits":[{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/main/java/org/apache/lucene/spatial/strategy/prefix/PrefixCellsTokenizer#incrementToken().mjava","pathOld":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/strategy/prefix/PrefixCellsTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      char c = (char) input.read();\n      if (c < 0) break;\n      if (c == 'a' || c == 'A') {\n        buffer[length++] = 'A';\n        continue;\n      }\n      if (c == 'b' || c == 'B') {\n        buffer[length++] = 'B';\n        continue;\n      }\n      if (c == 'c' || c == 'C') {\n        buffer[length++] = 'C';\n        continue;\n      }\n      if (c == 'd' || c == 'D') {\n        buffer[length++] = 'D';\n        continue;\n      }\n      if (c == '*') {\n        buffer[length++] = '*';\n        continue;\n      }\n      if (c == '+') {\n        buffer[length++] = '+';\n        continue;\n      }\n\n      if (length > 0) {\n        // Skip any other character\n        break;\n      }\n    }\n\n    termAtt.setLength(length);\n    return length > 0; // should only happen at the end\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      char c = (char) input.read();\n      if (c < 0) break;\n      if (c == 'a' || c == 'A') {\n        buffer[length++] = 'A';\n        continue;\n      }\n      if (c == 'b' || c == 'B') {\n        buffer[length++] = 'B';\n        continue;\n      }\n      if (c == 'c' || c == 'C') {\n        buffer[length++] = 'C';\n        continue;\n      }\n      if (c == 'd' || c == 'D') {\n        buffer[length++] = 'D';\n        continue;\n      }\n      if (c == '*') {\n        buffer[length++] = '*';\n        continue;\n      }\n      if (c == '+') {\n        buffer[length++] = '+';\n        continue;\n      }\n\n      if (length > 0) {\n        // Skip any other character\n        break;\n      }\n    }\n\n    termAtt.setLength(length);\n    return length > 0; // should only happen at the end\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/strategy/prefix/PrefixCellsTokenizer#incrementToken().mjava","pathOld":"modules/spatial/src/main/java/org/apache/lucene/spatial/strategy/prefix/PrefixCellsTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      char c = (char) input.read();\n      if (c < 0) break;\n      if (c == 'a' || c == 'A') {\n        buffer[length++] = 'A';\n        continue;\n      }\n      if (c == 'b' || c == 'B') {\n        buffer[length++] = 'B';\n        continue;\n      }\n      if (c == 'c' || c == 'C') {\n        buffer[length++] = 'C';\n        continue;\n      }\n      if (c == 'd' || c == 'D') {\n        buffer[length++] = 'D';\n        continue;\n      }\n      if (c == '*') {\n        buffer[length++] = '*';\n        continue;\n      }\n      if (c == '+') {\n        buffer[length++] = '+';\n        continue;\n      }\n\n      if (length > 0) {\n        // Skip any other character\n        break;\n      }\n    }\n\n    termAtt.setLength(length);\n    return length > 0; // should only happen at the end\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      char c = (char) input.read();\n      if (c < 0) break;\n      if (c == 'a' || c == 'A') {\n        buffer[length++] = 'A';\n        continue;\n      }\n      if (c == 'b' || c == 'B') {\n        buffer[length++] = 'B';\n        continue;\n      }\n      if (c == 'c' || c == 'C') {\n        buffer[length++] = 'C';\n        continue;\n      }\n      if (c == 'd' || c == 'D') {\n        buffer[length++] = 'D';\n        continue;\n      }\n      if (c == '*') {\n        buffer[length++] = '*';\n        continue;\n      }\n      if (c == '+') {\n        buffer[length++] = '+';\n        continue;\n      }\n\n      if (length > 0) {\n        // Skip any other character\n        break;\n      }\n    }\n\n    termAtt.setLength(length);\n    return length > 0; // should only happen at the end\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}