{"path":"solr/core/src/test/org/apache/solr/pkg/TestPackages#expectError(V2Request,SolrClient,String,String).mjava","commits":[{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/pkg/TestPackages#expectError(V2Request,SolrClient,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void expectError(V2Request req, SolrClient client, String errPath, String expectErrorMsg) throws IOException, SolrServerException {\n    try {\n      req.process(client);\n      fail(\"should have failed with message : \" + expectErrorMsg);\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      String msg = e.getMetaData()._getStr(errPath, \"\");\n      assertTrue(\"should have failed with message: \" + expectErrorMsg + \"actual message : \" + msg,\n          msg.contains(expectErrorMsg)\n      );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b409047f69fb85704c506753bc23a37d7ad37b54","date":1582574830,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/pkg/TestPackages#expectError(V2Request,SolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/pkg/TestPackages#expectError(V2Request,SolrClient,String,String).mjava","sourceNew":"  private void expectError(V2Request req, SolrClient client, String errPath, String expectErrorMsg) throws IOException, SolrServerException {\n    try {\n      req.process(client);\n      fail(\"should have failed with message : \" + expectErrorMsg);\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      String msg = e.getMetaData()._getStr(errPath, \"\");\n      assertThat(msg, containsString(expectErrorMsg));\n    }\n  }\n\n","sourceOld":"  private void expectError(V2Request req, SolrClient client, String errPath, String expectErrorMsg) throws IOException, SolrServerException {\n    try {\n      req.process(client);\n      fail(\"should have failed with message : \" + expectErrorMsg);\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      String msg = e.getMetaData()._getStr(errPath, \"\");\n      assertTrue(\"should have failed with message: \" + expectErrorMsg + \"actual message : \" + msg,\n          msg.contains(expectErrorMsg)\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":["9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6","date":1601357122,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/pkg/TestPackages#expectError(V2Request,SolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/pkg/TestPackages#expectError(V2Request,SolrClient,String,String).mjava","sourceNew":"  private void expectError(V2Request req, SolrClient client, String errPath, String expectErrorMsg) throws IOException, SolrServerException {\n    try {\n      req.process(client);\n      fail(\"should have failed with message : \" + expectErrorMsg);\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      String msg = e.getMetaData()._getStr(errPath, \"\");\n      assertTrue(\"should have failed with message: \" + expectErrorMsg + \"actual message : \" + msg,\n          msg.contains(expectErrorMsg)\n      );\n    }\n  }\n\n","sourceOld":"  private void expectError(V2Request req, SolrClient client, String errPath, String expectErrorMsg) throws IOException, SolrServerException {\n    try {\n      req.process(client);\n      fail(\"should have failed with message : \" + expectErrorMsg);\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      String msg = e.getMetaData()._getStr(errPath, \"\");\n      assertThat(msg, containsString(expectErrorMsg));\n    }\n  }\n\n","bugFix":["b409047f69fb85704c506753bc23a37d7ad37b54"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b409047f69fb85704c506753bc23a37d7ad37b54":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6":["b409047f69fb85704c506753bc23a37d7ad37b54"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6"]},"commit2Childs":{"b409047f69fb85704c506753bc23a37d7ad37b54":["9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["b409047f69fb85704c506753bc23a37d7ad37b54"],"9ac35455ac6925b629dedf2c0c52c0a8d5cb55b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}