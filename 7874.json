{"path":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    FixedBitSet res = null;\n    final IndexReader reader = context.reader;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? BitsFilteredDocIdSet.wrap(res, acceptDocs) : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    FixedBitSet res = null;\n    final IndexReader reader = context.reader;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? res : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4765e9efeec7b960821a47ee6707218ab783f18","date":1322651325,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    FixedBitSet res = null;\n    final IndexReader reader = context.reader;\n    \n    boolean hasShouldClauses = false;\n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        hasShouldClauses = true;\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    if (hasShouldClauses && res == null)\n      return DocIdSet.EMPTY_DOCIDSET;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          assert !hasShouldClauses;\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? BitsFilteredDocIdSet.wrap(res, acceptDocs) : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    FixedBitSet res = null;\n    final IndexReader reader = context.reader;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? BitsFilteredDocIdSet.wrap(res, acceptDocs) : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61e20f33ce8ff701576366fdb03955eded5f209b","date":1327852832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    FixedBitSet res = null;\n    final AtomicIndexReader reader = context.reader();\n    \n    boolean hasShouldClauses = false;\n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        hasShouldClauses = true;\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    if (hasShouldClauses && res == null)\n      return DocIdSet.EMPTY_DOCIDSET;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          assert !hasShouldClauses;\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? BitsFilteredDocIdSet.wrap(res, acceptDocs) : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    FixedBitSet res = null;\n    final IndexReader reader = context.reader;\n    \n    boolean hasShouldClauses = false;\n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        hasShouldClauses = true;\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    if (hasShouldClauses && res == null)\n      return DocIdSet.EMPTY_DOCIDSET;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          assert !hasShouldClauses;\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? BitsFilteredDocIdSet.wrap(res, acceptDocs) : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    FixedBitSet res = null;\n    final AtomicReader reader = context.reader();\n    \n    boolean hasShouldClauses = false;\n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        hasShouldClauses = true;\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    if (hasShouldClauses && res == null)\n      return DocIdSet.EMPTY_DOCIDSET;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          assert !hasShouldClauses;\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? BitsFilteredDocIdSet.wrap(res, acceptDocs) : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    FixedBitSet res = null;\n    final AtomicIndexReader reader = context.reader();\n    \n    boolean hasShouldClauses = false;\n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        hasShouldClauses = true;\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    if (hasShouldClauses && res == null)\n      return DocIdSet.EMPTY_DOCIDSET;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          assert !hasShouldClauses;\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? BitsFilteredDocIdSet.wrap(res, acceptDocs) : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    FixedBitSet res = null;\n    final AtomicReader reader = context.reader();\n    \n    boolean hasShouldClauses = false;\n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        hasShouldClauses = true;\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    if (hasShouldClauses && res == null)\n      return DocIdSet.EMPTY_DOCIDSET;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          assert !hasShouldClauses;\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? BitsFilteredDocIdSet.wrap(res, acceptDocs) : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    FixedBitSet res = null;\n    final IndexReader reader = context.reader;\n    \n    boolean hasShouldClauses = false;\n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        hasShouldClauses = true;\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    if (hasShouldClauses && res == null)\n      return DocIdSet.EMPTY_DOCIDSET;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          assert !hasShouldClauses;\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? BitsFilteredDocIdSet.wrap(res, acceptDocs) : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    FixedBitSet res = null;\n    final AtomicReader reader = context.reader();\n    \n    boolean hasShouldClauses = false;\n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        hasShouldClauses = true;\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    if (hasShouldClauses && res == null)\n      return DocIdSet.EMPTY_DOCIDSET;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          assert !hasShouldClauses;\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? BitsFilteredDocIdSet.wrap(res, acceptDocs) : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    FixedBitSet res = null;\n    final AtomicReader reader = context.reader();\n    \n    boolean hasShouldClauses = false;\n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        hasShouldClauses = true;\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    if (hasShouldClauses && res == null)\n      return DocIdSet.EMPTY_DOCIDSET;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          assert !hasShouldClauses;\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? BitsFilteredDocIdSet.wrap(res, acceptDocs) : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["61e20f33ce8ff701576366fdb03955eded5f209b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61e20f33ce8ff701576366fdb03955eded5f209b":["f4765e9efeec7b960821a47ee6707218ab783f18"],"f4765e9efeec7b960821a47ee6707218ab783f18":["6620df8541b174097b1133a4fc370adb2e570524"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["f4765e9efeec7b960821a47ee6707218ab783f18","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6620df8541b174097b1133a4fc370adb2e570524":["f4765e9efeec7b960821a47ee6707218ab783f18"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"61e20f33ce8ff701576366fdb03955eded5f209b":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"f4765e9efeec7b960821a47ee6707218ab783f18":["61e20f33ce8ff701576366fdb03955eded5f209b","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}