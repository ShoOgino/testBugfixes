{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // facet source\n    facetSource = Class.forName(config.get(\"facet.source\",\n        \"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource\")).asSubclass(FacetSource.class).newInstance();\n    facetSource.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","sourceOld":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // facet source\n    facetSource = Class.forName(config.get(\"facet.source\",\n        \"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource\")).asSubclass(FacetSource.class).newInstance();\n    facetSource.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e76e769a8863037082ce292c260151d588e6724e","date":1337253730,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n\n    // content source\n    String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n    contentSource = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n    contentSource.setConfig(config);\n\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config, contentSource);\n    // facet source\n    facetSource = Class.forName(config.get(\"facet.source\",\n        \"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource\")).asSubclass(FacetSource.class).newInstance();\n    facetSource.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","sourceOld":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // facet source\n    facetSource = Class.forName(config.get(\"facet.source\",\n        \"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource\")).asSubclass(FacetSource.class).newInstance();\n    facetSource.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n\n    // content source\n    String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n    contentSource = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n    contentSource.setConfig(config);\n\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config, contentSource);\n    // facet source\n    facetSource = Class.forName(config.get(\"facet.source\",\n        \"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource\")).asSubclass(FacetSource.class).newInstance();\n    facetSource.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","sourceOld":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // facet source\n    facetSource = Class.forName(config.get(\"facet.source\",\n        \"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource\")).asSubclass(FacetSource.class).newInstance();\n    facetSource.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n\n    // content source\n    String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n    contentSource = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n    contentSource.setConfig(config);\n\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config, contentSource);\n    // facet source\n    facetSource = Class.forName(config.get(\"facet.source\",\n        \"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource\")).asSubclass(FacetSource.class).newInstance();\n    facetSource.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","sourceOld":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n\n    // content source\n    String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n    contentSource = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n    contentSource.setConfig(config);\n\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config, contentSource);\n    // facet source\n    facetSource = Class.forName(config.get(\"facet.source\",\n        \"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource\")).asSubclass(FacetSource.class).newInstance();\n    facetSource.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n\n    // content source\n    String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n    contentSource = Class.forName(sourceClass).asSubclass(ContentSource.class).getConstructor().newInstance();\n    contentSource.setConfig(config);\n\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).getConstructor().newInstance();\n    docMaker.setConfig(config, contentSource);\n    // facet source\n    facetSource = Class.forName(config.get(\"facet.source\",\n        \"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource\")).asSubclass(FacetSource.class).getConstructor().newInstance();\n    facetSource.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","sourceOld":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n\n    // content source\n    String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n    contentSource = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n    contentSource.setConfig(config);\n\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config, contentSource);\n    // facet source\n    facetSource = Class.forName(config.get(\"facet.source\",\n        \"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource\")).asSubclass(FacetSource.class).newInstance();\n    facetSource.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e76e769a8863037082ce292c260151d588e6724e"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e76e769a8863037082ce292c260151d588e6724e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef0d8a69209261514c5739c770bba706c2308450":["b89678825b68eccaf09e6ab71675fc0b0af1e099","e76e769a8863037082ce292c260151d588e6724e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e76e769a8863037082ce292c260151d588e6724e","ef0d8a69209261514c5739c770bba706c2308450"],"e76e769a8863037082ce292c260151d588e6724e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","ef0d8a69209261514c5739c770bba706c2308450"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}