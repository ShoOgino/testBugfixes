{"path":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#nextDoc().mjava","commits":[{"id":"b785b1f61f30f94f0708b16d7f2eee3ee23194ef","date":1285384789,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (delDocs != null && delDocs.get(doc)) continue;\n        if (!match()) continue;\n        return doc;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (delDocs != null && delDocs.get(doc)) continue;\n        if (!match()) continue;\n        return doc;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#nextDoc().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#nextDoc().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        if (!match()) continue;\n        return doc;\n      }\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (delDocs != null && delDocs.get(doc)) continue;\n        if (!match()) continue;\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#nextDoc().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#nextDoc().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        if (!match()) continue;\n        return doc;\n      }\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (delDocs != null && delDocs.get(doc)) continue;\n        if (!match()) continue;\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#nextDoc().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#nextDoc().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        if (!match()) continue;\n        return doc;\n      }\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (delDocs != null && delDocs.get(doc)) continue;\n        if (!match()) continue;\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#nextDoc().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#nextDoc().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        if (!match()) continue;\n        return doc;\n      }\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        if (!match()) continue;\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#nextDoc().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#nextDoc().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        if (!match()) continue;\n        return doc;\n      }\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        if (!match()) continue;\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#nextDoc().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#nextDoc().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        if (!match()) continue;\n        return doc;\n      }\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        if (!match()) continue;\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"c26f00b574427b55127e869b935845554afde1fa":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["b785b1f61f30f94f0708b16d7f2eee3ee23194ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"b785b1f61f30f94f0708b16d7f2eee3ee23194ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b785b1f61f30f94f0708b16d7f2eee3ee23194ef"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b785b1f61f30f94f0708b16d7f2eee3ee23194ef","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["b785b1f61f30f94f0708b16d7f2eee3ee23194ef","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b785b1f61f30f94f0708b16d7f2eee3ee23194ef","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"b785b1f61f30f94f0708b16d7f2eee3ee23194ef":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}