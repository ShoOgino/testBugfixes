{"path":"backwards/src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","pathOld":"/dev/null","sourceNew":"  // This tests that attempts to readBytes() past an EOF will fail, while\n  // reads up to the EOF will succeed. The EOF is determined by the\n  // BufferedIndexInput's arbitrary length() value.\n  public void testEOF() throws Exception {\n     MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n     // see that we can read all the bytes at one go:\n     checkReadBytes(input, (int)input.length(), 0);  \n     // go back and see that we can't read more than that, for small and\n     // large overflows:\n     int pos = (int)input.length()-10;\n     input.seek(pos);\n     checkReadBytes(input, 10, pos);  \n     input.seek(pos);\n     try {\n       checkReadBytes(input, 11, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 50, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 100000, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","pathOld":"backwards/src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","sourceNew":"  // This tests that attempts to readBytes() past an EOF will fail, while\n  // reads up to the EOF will succeed. The EOF is determined by the\n  // BufferedIndexInput's arbitrary length() value.\n  public void testEOF() throws Exception {\n     MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n     // see that we can read all the bytes at one go:\n     checkReadBytes(input, (int)input.length(), 0);  \n     // go back and see that we can't read more than that, for small and\n     // large overflows:\n     int pos = (int)input.length()-10;\n     input.seek(pos);\n     checkReadBytes(input, 10, pos);  \n     input.seek(pos);\n     try {\n       checkReadBytes(input, 11, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 50, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 100000, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n  }\n\n","sourceOld":"  // This tests that attempts to readBytes() past an EOF will fail, while\n  // reads up to the EOF will succeed. The EOF is determined by the\n  // BufferedIndexInput's arbitrary length() value.\n  public void testEOF() throws Exception {\n     MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n     // see that we can read all the bytes at one go:\n     checkReadBytes(input, (int)input.length(), 0);  \n     // go back and see that we can't read more than that, for small and\n     // large overflows:\n     int pos = (int)input.length()-10;\n     input.seek(pos);\n     checkReadBytes(input, 10, pos);  \n     input.seek(pos);\n     try {\n       checkReadBytes(input, 11, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 50, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 100000, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}