{"path":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoMergeAfterCopy().mjava","commits":[{"id":"0eab5479eeaba1914f4cd6b6bca566976c31075c","date":1162241544,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoMergeAfterCopy().mjava","pathOld":"/dev/null","sourceNew":"  // case 3: tail segments, invariants hold, copy, invariants hold\n  public void testNoMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, false);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, aux });\n    assertEquals(1060, writer.docCount());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1060);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2586f96f60332eb97ecd2934b0763791462568b2","date":1220116589,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoMergeAfterCopy().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoMergeAfterCopy().mjava","sourceNew":"  // case 3: tail segments, invariants hold, copy, invariants hold\n  public void testNoMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, false);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1060, writer.docCount());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1060);\n  }\n\n","sourceOld":"  // case 3: tail segments, invariants hold, copy, invariants hold\n  public void testNoMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, false);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, aux });\n    assertEquals(1060, writer.docCount());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1060);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7","date":1255555265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoMergeAfterCopy().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoMergeAfterCopy().mjava","sourceNew":"  // case 3: tail segments, invariants hold, copy, invariants hold\n  public void testNoMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, false);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1060);\n  }\n\n","sourceOld":"  // case 3: tail segments, invariants hold, copy, invariants hold\n  public void testNoMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, false);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1060, writer.docCount());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1060);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoMergeAfterCopy().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoMergeAfterCopy().mjava","sourceNew":"  // case 3: tail segments, invariants hold, copy, invariants hold\n  public void testNoMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(\n        10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1060);\n  }\n\n","sourceOld":"  // case 3: tail segments, invariants hold, copy, invariants hold\n  public void testNoMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, false);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1060);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoMergeAfterCopy().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoMergeAfterCopy().mjava","sourceNew":"  // case 3: tail segments, invariants hold, copy, invariants hold\n  public void testNoMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, false);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1060);\n  }\n\n","sourceOld":"  // case 3: tail segments, invariants hold, copy, invariants hold\n  public void testNoMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(\n        10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1060);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoMergeAfterCopy().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoMergeAfterCopy().mjava","sourceNew":"  // case 3: tail segments, invariants hold, copy, invariants hold\n  public void testNoMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1060);\n  }\n\n","sourceOld":"  // case 3: tail segments, invariants hold, copy, invariants hold\n  public void testNoMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, false);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1060);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoMergeAfterCopy().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoMergeAfterCopy().mjava","sourceNew":"  // case 3: tail segments, invariants hold, copy, invariants hold\n  public void testNoMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1060);\n  }\n\n","sourceOld":"  // case 3: tail segments, invariants hold, copy, invariants hold\n  public void testNoMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1060, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1060);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["2586f96f60332eb97ecd2934b0763791462568b2"],"2586f96f60332eb97ecd2934b0763791462568b2":["0eab5479eeaba1914f4cd6b6bca566976c31075c"],"0eab5479eeaba1914f4cd6b6bca566976c31075c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0eab5479eeaba1914f4cd6b6bca566976c31075c"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"2586f96f60332eb97ecd2934b0763791462568b2":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"0eab5479eeaba1914f4cd6b6bca566976c31075c":["2586f96f60332eb97ecd2934b0763791462568b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}