{"path":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocumentsMerged().mjava","commits":[{"id":"e3538d7872902c19ad619052fb3130f652f35e35","date":1353005395,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocumentsMerged().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortedBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    DocValues dv = ireader.leaves().get(0).reader().docValues(\"dv\");\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      assertEquals(expected, dv.getSource().getBytes(i, new BytesRef()).utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd329bd749496f6c58b586a6c0dd0dc8201206f","date":1353092226,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocumentsMerged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocumentsMerged().mjava","sourceNew":"  public void testSortedBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\", random().nextBoolean());\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.lookupOrd(dv.getOrd(i), scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    DocValues dv = ireader.leaves().get(0).reader().docValues(\"dv\");\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      assertEquals(expected, dv.getSource().getBytes(i, new BytesRef()).utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocumentsMerged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocumentsMerged().mjava","sourceNew":"  public void testSortedBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.lookupOrd(dv.getOrd(i), scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\", random().nextBoolean());\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.lookupOrd(dv.getOrd(i), scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed65f3455364344c6d2ff76ea5421aac754eae7","date":1353261762,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocumentsMerged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocumentsMerged().mjava","sourceNew":"  public void testSortedBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.lookupOrd(dv.getOrd(i), scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.lookupOrd(dv.getOrd(i), scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7da90f562447e213c99b392bbb401844c7e3692","date":1353357191,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocumentsMerged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocumentsMerged().mjava","sourceNew":"  public void testSortedBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    assertTrue(dv.isFixedLength()); // \"hello world 1\" length == \"hello world 2\" length\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.lookupOrd(dv.getOrd(i), scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.lookupOrd(dv.getOrd(i), scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4eb57227eadb7668cabc2c1976c5c614b08dfba7","date":1353359941,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocumentsMerged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocumentsMerged().mjava","sourceNew":"  public void testSortedBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    assertTrue(dv.isFixedLength()); // \"hello world 1\" length == \"hello world 2\" length\n    assertEquals(2, dv.getValueCount()); // 2 ords\n    BytesRef scratch = new BytesRef();\n    dv.lookupOrd(0, scratch);\n    assertEquals(new BytesRef(\"hello world 1\"), scratch);\n    dv.lookupOrd(1, scratch);\n    assertEquals(new BytesRef(\"hello world 2\"), scratch);\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.lookupOrd(dv.getOrd(i), scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    assertTrue(dv.isFixedLength()); // \"hello world 1\" length == \"hello world 2\" length\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.lookupOrd(dv.getOrd(i), scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed9002c5afac843c7f2d04d88e74b40d627e1af","date":1357602069,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocumentsMerged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocumentsMerged().mjava","sourceNew":"  public void testSortedBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    assertEquals(2, dv.getValueCount()); // 2 ords\n    BytesRef scratch = new BytesRef();\n    dv.lookupOrd(0, scratch);\n    assertEquals(new BytesRef(\"hello world 1\"), scratch);\n    dv.lookupOrd(1, scratch);\n    assertEquals(new BytesRef(\"hello world 2\"), scratch);\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.lookupOrd(dv.getOrd(i), scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    assertTrue(dv.isFixedLength()); // \"hello world 1\" length == \"hello world 2\" length\n    assertEquals(2, dv.getValueCount()); // 2 ords\n    BytesRef scratch = new BytesRef();\n    dv.lookupOrd(0, scratch);\n    assertEquals(new BytesRef(\"hello world 1\"), scratch);\n    dv.lookupOrd(1, scratch);\n    assertEquals(new BytesRef(\"hello world 2\"), scratch);\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.lookupOrd(dv.getOrd(i), scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocumentsMerged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocumentsMerged().mjava","sourceNew":"  public void testSortedBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    assertEquals(2, dv.getValueCount()); // 2 ords\n    BytesRef scratch = new BytesRef();\n    dv.lookupOrd(0, scratch);\n    assertEquals(new BytesRef(\"hello world 1\"), scratch);\n    dv.lookupOrd(1, scratch);\n    assertEquals(new BytesRef(\"hello world 2\"), scratch);\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.lookupOrd(dv.getOrd(i), scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new SortedBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    assertEquals(2, dv.getValueCount()); // 2 ords\n    BytesRef scratch = new BytesRef();\n    dv.lookupOrd(0, scratch);\n    assertEquals(new BytesRef(\"hello world 1\"), scratch);\n    dv.lookupOrd(1, scratch);\n    assertEquals(new BytesRef(\"hello world 2\"), scratch);\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.lookupOrd(dv.getOrd(i), scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ec08217282b5e9df023dcdff55c745ff68b1c7d","date":1359392781,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedBytesTwoDocumentsMerged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testSortedBytesTwoDocumentsMerged().mjava","sourceNew":"  public void testSortedBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setCodec(getCodec());\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, conf);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    assertEquals(2, dv.getValueCount()); // 2 ords\n    BytesRef scratch = new BytesRef();\n    dv.lookupOrd(0, scratch);\n    assertEquals(new BytesRef(\"hello world 1\"), scratch);\n    dv.lookupOrd(1, scratch);\n    assertEquals(new BytesRef(\"hello world 2\"), scratch);\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.lookupOrd(dv.getOrd(i), scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new SortedDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv\");\n    assertEquals(2, dv.getValueCount()); // 2 ords\n    BytesRef scratch = new BytesRef();\n    dv.lookupOrd(0, scratch);\n    assertEquals(new BytesRef(\"hello world 1\"), scratch);\n    dv.lookupOrd(1, scratch);\n    assertEquals(new BytesRef(\"hello world 2\"), scratch);\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.lookupOrd(dv.getOrd(i), scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3538d7872902c19ad619052fb3130f652f35e35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7da90f562447e213c99b392bbb401844c7e3692":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"7cd329bd749496f6c58b586a6c0dd0dc8201206f":["e3538d7872902c19ad619052fb3130f652f35e35"],"4eb57227eadb7668cabc2c1976c5c614b08dfba7":["c7da90f562447e213c99b392bbb401844c7e3692"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["7cd329bd749496f6c58b586a6c0dd0dc8201206f"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["1ed9002c5afac843c7f2d04d88e74b40d627e1af"],"1ed9002c5afac843c7f2d04d88e74b40d627e1af":["4eb57227eadb7668cabc2c1976c5c614b08dfba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"]},"commit2Childs":{"e3538d7872902c19ad619052fb3130f652f35e35":["7cd329bd749496f6c58b586a6c0dd0dc8201206f"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["c7da90f562447e213c99b392bbb401844c7e3692"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3538d7872902c19ad619052fb3130f652f35e35","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7da90f562447e213c99b392bbb401844c7e3692":["4eb57227eadb7668cabc2c1976c5c614b08dfba7"],"7cd329bd749496f6c58b586a6c0dd0dc8201206f":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"4eb57227eadb7668cabc2c1976c5c614b08dfba7":["1ed9002c5afac843c7f2d04d88e74b40d627e1af"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"1ed9002c5afac843c7f2d04d88e74b40d627e1af":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}