{"path":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector#setBaseline(long).mjava","commits":[{"id":"23550189554f52bad1625fceab84a71d20a4df3f","date":1321064526,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector#setBaseline(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the baseline for this collector. By default the collectors baseline is \n   * initialized once the first reader is passed to\n   * {@link #setNextReader(AtomicReaderContext)}. To include operations executed\n   * in prior to the actual document collection set the baseline through this method\n   * in your prelude.\n   * <p>\n   * Example usage:\n   * <pre>\n   *   Counter clock = ...;\n   *   long baseline = clock.get();\n   *   // ... prepare search\n   *   TimeLimitingCollector collector = new TimeLimitingCollector(c, clock, numTicks);\n   *   collector.setBaseline(baseline);\n   *   indexSearcher.search(query, collector);\n   * </pre>\n   * </p>\n   * @see #setBaseline() \n   * @param clockTime\n   */\n  public void setBaseline(long clockTime) {\n    t0 = clockTime;\n    timeout = t0 + ticksAllowed;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67f1c77728a87d93bae861675b13de3680bb22d9","date":1321075181,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector#setBaseline(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector#setBaseline(long).mjava","sourceNew":"  /**\n   * Sets the baseline for this collector. By default the collectors baseline is \n   * initialized once the first reader is passed to the collector. \n   * To include operations executed in prior to the actual document collection\n   * set the baseline through this method in your prelude.\n   * <p>\n   * Example usage:\n   * <pre>\n   *   Counter clock = ...;\n   *   long baseline = clock.get();\n   *   // ... prepare search\n   *   TimeLimitingCollector collector = new TimeLimitingCollector(c, clock, numTicks);\n   *   collector.setBaseline(baseline);\n   *   indexSearcher.search(query, collector);\n   * </pre>\n   * </p>\n   * @see #setBaseline() \n   * @param clockTime\n   */\n  public void setBaseline(long clockTime) {\n    t0 = clockTime;\n    timeout = t0 + ticksAllowed;\n  }\n\n","sourceOld":"  /**\n   * Sets the baseline for this collector. By default the collectors baseline is \n   * initialized once the first reader is passed to\n   * {@link #setNextReader(AtomicReaderContext)}. To include operations executed\n   * in prior to the actual document collection set the baseline through this method\n   * in your prelude.\n   * <p>\n   * Example usage:\n   * <pre>\n   *   Counter clock = ...;\n   *   long baseline = clock.get();\n   *   // ... prepare search\n   *   TimeLimitingCollector collector = new TimeLimitingCollector(c, clock, numTicks);\n   *   collector.setBaseline(baseline);\n   *   indexSearcher.search(query, collector);\n   * </pre>\n   * </p>\n   * @see #setBaseline() \n   * @param clockTime\n   */\n  public void setBaseline(long clockTime) {\n    t0 = clockTime;\n    timeout = t0 + ticksAllowed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#setBaseline(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector#setBaseline(long).mjava","sourceNew":"  /**\n   * Sets the baseline for this collector. By default the collectors baseline is \n   * initialized once the first reader is passed to the collector. \n   * To include operations executed in prior to the actual document collection\n   * set the baseline through this method in your prelude.\n   * <p>\n   * Example usage:\n   * <pre>\n   *   Counter clock = ...;\n   *   long baseline = clock.get();\n   *   // ... prepare search\n   *   TimeLimitingCollector collector = new TimeLimitingCollector(c, clock, numTicks);\n   *   collector.setBaseline(baseline);\n   *   indexSearcher.search(query, collector);\n   * </pre>\n   * </p>\n   * @see #setBaseline() \n   * @param clockTime\n   */\n  public void setBaseline(long clockTime) {\n    t0 = clockTime;\n    timeout = t0 + ticksAllowed;\n  }\n\n","sourceOld":"  /**\n   * Sets the baseline for this collector. By default the collectors baseline is \n   * initialized once the first reader is passed to the collector. \n   * To include operations executed in prior to the actual document collection\n   * set the baseline through this method in your prelude.\n   * <p>\n   * Example usage:\n   * <pre>\n   *   Counter clock = ...;\n   *   long baseline = clock.get();\n   *   // ... prepare search\n   *   TimeLimitingCollector collector = new TimeLimitingCollector(c, clock, numTicks);\n   *   collector.setBaseline(baseline);\n   *   indexSearcher.search(query, collector);\n   * </pre>\n   * </p>\n   * @see #setBaseline() \n   * @param clockTime\n   */\n  public void setBaseline(long clockTime) {\n    t0 = clockTime;\n    timeout = t0 + ticksAllowed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["67f1c77728a87d93bae861675b13de3680bb22d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23550189554f52bad1625fceab84a71d20a4df3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"67f1c77728a87d93bae861675b13de3680bb22d9":["23550189554f52bad1625fceab84a71d20a4df3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["23550189554f52bad1625fceab84a71d20a4df3f"],"23550189554f52bad1625fceab84a71d20a4df3f":["67f1c77728a87d93bae861675b13de3680bb22d9"],"67f1c77728a87d93bae861675b13de3680bb22d9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}