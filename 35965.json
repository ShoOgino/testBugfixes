{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#removeReplicaProperty(ClusterState,ZkNodeProps).mjava","commits":[{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#removeReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  public ZkWriteCommand removeReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROPERTY requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n    }\n\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da5ef0533dae1e5782b071a5484e1b9f3c28fc5f","date":1419334852,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#deleteReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#removeReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand deleteReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n    }\n\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand removeReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer DELETEREPLICAPROPERTY requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" no action taken.\");\n    }\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n    }\n\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    String curProp = replica.getStr(property);\n    if (curProp == null) return ZkStateWriter.NO_OP; // not there anyway, nothing to do.\n\n    log.info(\"Deleting property \" + property + \" for collection: \" + collectionName +\n        \" slice \" + sliceName + \" replica \" + replicaName + \". Full message: \" + message);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceName);\n    DocCollection newCollection = SliceMutator.updateReplica(collection,\n        slice, replicaName, unsetProperty(replica, property));\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"da5ef0533dae1e5782b071a5484e1b9f3c28fc5f":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["da5ef0533dae1e5782b071a5484e1b9f3c28fc5f"]},"commit2Childs":{"da5ef0533dae1e5782b071a5484e1b9f3c28fc5f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["da5ef0533dae1e5782b071a5484e1b9f3c28fc5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}