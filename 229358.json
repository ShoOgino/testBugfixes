{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Function[SpanQuery,Boolean],boolean).mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Function[SpanQuery,Boolean],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   */\n  public PhraseHelper(Query query, String field, Function<SpanQuery, Boolean> rewriteQueryPred,\n               boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field; // if null then don't require field match\n    // filter terms to those we want\n    positionInsensitiveTerms = field != null ? new FieldFilteringTermHashSet(field) : new HashSet<>();\n    // requireFieldMatch optional\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, false, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        if (field != null) {\n          // if this span query isn't for this field, skip it.\n          Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n          collectSpanQueryFields(spanQuery, fieldNameSet);\n          if (!fieldNameSet.contains(field)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Function[SpanQuery,Boolean],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   */\n  public PhraseHelper(Query query, String field, Function<SpanQuery, Boolean> rewriteQueryPred,\n               boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field; // if null then don't require field match\n    // filter terms to those we want\n    positionInsensitiveTerms = field != null ? new FieldFilteringTermHashSet(field) : new HashSet<>();\n    // requireFieldMatch optional\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, false, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        if (field != null) {\n          // if this span query isn't for this field, skip it.\n          Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n          collectSpanQueryFields(spanQuery, fieldNameSet);\n          if (!fieldNameSet.contains(field)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc650d323b3ed43d314ef27d4a586c37b4773f7e","date":1478639612,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Function[SpanQuery,Boolean],boolean).mjava","sourceNew":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   */\n  public PhraseHelper(Query query, String field, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field; // if null then don't require field match\n    // filter terms to those we want\n    positionInsensitiveTerms = field != null ? new FieldFilteringTermHashSet(field) : new HashSet<>();\n    // requireFieldMatch optional\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, false, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        if (field != null) {\n          // if this span query isn't for this field, skip it.\n          Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n          collectSpanQueryFields(spanQuery, fieldNameSet);\n          if (!fieldNameSet.contains(field)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   */\n  public PhraseHelper(Query query, String field, Function<SpanQuery, Boolean> rewriteQueryPred,\n               boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field; // if null then don't require field match\n    // filter terms to those we want\n    positionInsensitiveTerms = field != null ? new FieldFilteringTermHashSet(field) : new HashSet<>();\n    // requireFieldMatch optional\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, false, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        if (field != null) {\n          // if this span query isn't for this field, skip it.\n          Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n          collectSpanQueryFields(spanQuery, fieldNameSet);\n          if (!fieldNameSet.contains(field)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Function[SpanQuery,Boolean],boolean).mjava","sourceNew":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   */\n  public PhraseHelper(Query query, String field, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field; // if null then don't require field match\n    // filter terms to those we want\n    positionInsensitiveTerms = field != null ? new FieldFilteringTermHashSet(field) : new HashSet<>();\n    // requireFieldMatch optional\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, false, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        if (field != null) {\n          // if this span query isn't for this field, skip it.\n          Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n          collectSpanQueryFields(spanQuery, fieldNameSet);\n          if (!fieldNameSet.contains(field)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   */\n  public PhraseHelper(Query query, String field, Function<SpanQuery, Boolean> rewriteQueryPred,\n               boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field; // if null then don't require field match\n    // filter terms to those we want\n    positionInsensitiveTerms = field != null ? new FieldFilteringTermHashSet(field) : new HashSet<>();\n    // requireFieldMatch optional\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, false, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        if (field != null) {\n          // if this span query isn't for this field, skip it.\n          Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n          collectSpanQueryFields(spanQuery, fieldNameSet);\n          if (!fieldNameSet.contains(field)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cc650d323b3ed43d314ef27d4a586c37b4773f7e":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cc650d323b3ed43d314ef27d4a586c37b4773f7e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc650d323b3ed43d314ef27d4a586c37b4773f7e"]},"commit2Childs":{"cc650d323b3ed43d314ef27d4a586c37b4773f7e":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["cc650d323b3ed43d314ef27d4a586c37b4773f7e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}