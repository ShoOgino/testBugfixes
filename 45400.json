{"path":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segmentInfos2.range(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segmentInfos2.range(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segmentInfos2.range(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segmentInfos2.range(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      List<SegmentInfo> segments = new ArrayList<SegmentInfo>(segmentInfos.asList());\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segmentInfos2.range(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      List<SegmentInfo> segments = new ArrayList<SegmentInfo>(segmentInfos.asList());\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segmentInfos2.range(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      List<SegmentInfo> segments = new ArrayList<SegmentInfo>(segmentInfos.asList());\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segmentInfos2.range(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      List<SegmentInfo> segments = new ArrayList<SegmentInfo>(segmentInfos.asList());\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      List<SegmentInfo> segments = new ArrayList<SegmentInfo>(segmentInfos.asList());\n      Collections.shuffle(segments, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segments.subList(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["29ef99d61cda9641b6250bf9567329a6e65f901d","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["7b91922b55d15444d554721b352861d028eb8278","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["786a4d25ca958a1f315a9d6a74f0441fdafcd522","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}