{"path":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":["b870d11eae2250e41b4ed48d248bc043cbbd7711"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b5eb85061a04532d079d1ca2e6cfae6be263073","date":1377213475,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    fastCache.initializeMetrics(metricManager, registry, scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.initializeMetrics(metricManager, registry, scope);\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    Map<String,Object> nl = fastCacheNew.getMetricsMap().getValue();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    fastCache.initializeMetrics(metricManager, registry, scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.initializeMetrics(metricManager, registry, scope);\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    Map<String,Object> nl = fastCacheNew.getMetricsMap().getValue();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    fastCache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    Map<String,Object> nl = fastCacheNew.getMetricsMap().getValue();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    fastCache.initializeMetrics(metricManager, registry, scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.initializeMetrics(metricManager, registry, scope);\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    Map<String,Object> nl = fastCacheNew.getMetricsMap().getValue();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":["816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":["df72a23fb74bebe914e3f3972063a884327c0436"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    fastCache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    Map<String,Object> nl = fastCacheNew.getMetricsMap().getValue();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    fastCache.initializeMetrics(metricManager, registry, scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.initializeMetrics(metricManager, registry, scope);\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    Map<String,Object> nl = fastCacheNew.getMetricsMap().getValue();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df72a23fb74bebe914e3f3972063a884327c0436","date":1570470832,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    Map<String,Object> nl = fastCacheNew.getMetricsMap().getValue();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    fastCache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    Map<String,Object> nl = fastCacheNew.getMetricsMap().getValue();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":["bfc52860e6d13d034226a760813c59d984c6817a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    Map<String,Object> nl = fastCacheNew.getMetricsMap().getValue();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    fastCache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    Map<String,Object> nl = fastCacheNew.getMetricsMap().getValue();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws Exception {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    Map<String,Object> nl = fastCacheNew.getMetricsMap().getValue();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    Map<String,Object> nl = fastCacheNew.getMetricsMap().getValue();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws Exception {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    fastCache.initializeMetrics(solrMetricsContext, scope);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.initializeMetrics(solrMetricsContext, scope);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    Map<String,Object> nl = fastCacheNew.getMetricsMap().getValue();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws Exception {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    Map<String,Object> nl = fastCacheNew.getMetricsMap().getValue();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":null,"sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws Exception {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    fastCache.initializeMetrics(solrMetricsContext, scope);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.initializeMetrics(solrMetricsContext, scope);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    Map<String,Object> nl = fastCacheNew.getMetricsMap().getValue();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1b5eb85061a04532d079d1ca2e6cfae6be263073"],"1b5eb85061a04532d079d1ca2e6cfae6be263073":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["df72a23fb74bebe914e3f3972063a884327c0436"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","1b5eb85061a04532d079d1ca2e6cfae6be263073"],"4d7d3943904804560937e6239effeebda0f920e4":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"df72a23fb74bebe914e3f3972063a884327c0436":["43564cbb30b064675027cfb569564e8531096e97"],"816521ebaad5add9cb96bb88c577394e2938c40b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"],"b0b597c65628ca9e73913a07e81691f8229bae35":["43564cbb30b064675027cfb569564e8531096e97","df72a23fb74bebe914e3f3972063a884327c0436"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"1b5eb85061a04532d079d1ca2e6cfae6be263073":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"43564cbb30b064675027cfb569564e8531096e97":["df72a23fb74bebe914e3f3972063a884327c0436","b0b597c65628ca9e73913a07e81691f8229bae35"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["4d7d3943904804560937e6239effeebda0f920e4"],"c26f00b574427b55127e869b935845554afde1fa":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"df72a23fb74bebe914e3f3972063a884327c0436":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","b0b597c65628ca9e73913a07e81691f8229bae35"],"816521ebaad5add9cb96bb88c577394e2938c40b":["43564cbb30b064675027cfb569564e8531096e97","bfc52860e6d13d034226a760813c59d984c6817a"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["1b5eb85061a04532d079d1ca2e6cfae6be263073","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}