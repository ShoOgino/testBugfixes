{"path":"src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","commits":[{"id":"7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a","date":1164667221,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = (Document)documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = searcher.getIndexReader().document(i);\n    } else {\n      d = searcher.getIndexReader().document(i, \n             new SetNonLazyFieldSelector(fields));\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ceb8ef10f044820fbd058f02d5a8e26539d255c","date":1242149378,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = (Document)documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      d = getIndexReader().document(i, \n             new SetNonLazyFieldSelector(fields));\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = (Document)documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = searcher.getIndexReader().document(i);\n    } else {\n      d = searcher.getIndexReader().document(i, \n             new SetNonLazyFieldSelector(fields));\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"029ffe7502a7a8ff1f425020bc204311ade99687","date":1243301392,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = (Document)documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = searcher.getIndexReader().document(i);\n    } else {\n      d = searcher.getIndexReader().document(i, \n             new SetNonLazyFieldSelector(fields));\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = (Document)documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      d = getIndexReader().document(i, \n             new SetNonLazyFieldSelector(fields));\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac3e6437547a34cce2b5405ce0cf9e3af578401e","date":1243373693,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = (Document)documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      d = getIndexReader().document(i, \n             new SetNonLazyFieldSelector(fields));\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = (Document)documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = searcher.getIndexReader().document(i);\n    } else {\n      d = searcher.getIndexReader().document(i, \n             new SetNonLazyFieldSelector(fields));\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = (Document)documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      d = getIndexReader().document(i, \n             new SetNonLazyFieldSelector(fields));\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   *\n   * Note: The document will have all fields accessable, but if a field\n   * filter is provided, only the provided fields will be loaded (the \n   * remainder will be available lazily).\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    \n    Document d;\n    if (documentCache != null) {\n      d = (Document)documentCache.get(i);\n      if (d!=null) return d;\n    }\n\n    if(!enableLazyFieldLoading || fields == null) {\n      d = getIndexReader().document(i);\n    } else {\n      d = getIndexReader().document(i, \n             new SetNonLazyFieldSelector(fields));\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["029ffe7502a7a8ff1f425020bc204311ade99687"],"7ceb8ef10f044820fbd058f02d5a8e26539d255c":["7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a"],"7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"029ffe7502a7a8ff1f425020bc204311ade99687":["7ceb8ef10f044820fbd058f02d5a8e26539d255c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["ad94625fb8d088209f46650c8097196fec67f00c"],"7ceb8ef10f044820fbd058f02d5a8e26539d255c":["029ffe7502a7a8ff1f425020bc204311ade99687"],"7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a":["7ceb8ef10f044820fbd058f02d5a8e26539d255c"],"029ffe7502a7a8ff1f425020bc204311ade99687":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}