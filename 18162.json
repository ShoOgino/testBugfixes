{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#FieldIndexReader(IndexInput,FieldInfo,int,long,long,long,long).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#FieldIndexReader(IndexInput,FieldInfo,int,long,long,long,long).mjava","pathOld":"/dev/null","sourceNew":"    public FieldIndexReader(IndexInput in, FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                            long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.in = in;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that StandardTermsDictReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor != -1) {\n        coreIndex = new CoreFieldIndex(indexStart,\n                                       termsStart,\n                                       packedIndexStart,\n                                       packedOffsetsStart,\n                                       numIndexTerms);\n      \n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#FieldIndexReader(IndexInput,FieldInfo,int,long,long,long,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#FieldIndexReader(IndexInput,FieldInfo,int,long,long,long,long).mjava","sourceNew":"    public FieldIndexReader(IndexInput in, FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                            long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.in = in;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that StandardTermsDictReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        coreIndex = new CoreFieldIndex(indexStart,\n                                       termsStart,\n                                       packedIndexStart,\n                                       packedOffsetsStart,\n                                       numIndexTerms);\n      \n      }\n    }\n\n","sourceOld":"    public FieldIndexReader(IndexInput in, FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                            long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.in = in;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that StandardTermsDictReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor != -1) {\n        coreIndex = new CoreFieldIndex(indexStart,\n                                       termsStart,\n                                       packedIndexStart,\n                                       packedOffsetsStart,\n                                       numIndexTerms);\n      \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#FieldIndexReader(IndexInput,FieldInfo,int,long,long,long,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#FieldIndexReader(IndexInput,FieldInfo,int,long,long,long,long).mjava","sourceNew":"    public FieldIndexReader(IndexInput in, FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                            long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.in = in;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that StandardTermsDictReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        coreIndex = new CoreFieldIndex(indexStart,\n                                       termsStart,\n                                       packedIndexStart,\n                                       packedOffsetsStart,\n                                       numIndexTerms);\n      \n      }\n    }\n\n","sourceOld":"    public FieldIndexReader(IndexInput in, FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                            long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.in = in;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that StandardTermsDictReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor != -1) {\n        coreIndex = new CoreFieldIndex(indexStart,\n                                       termsStart,\n                                       packedIndexStart,\n                                       packedOffsetsStart,\n                                       numIndexTerms);\n      \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexReader#FieldIndexReader(IndexInput,FieldInfo,int,long,long,long,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#FieldIndexReader(IndexInput,FieldInfo,int,long,long,long,long).mjava","sourceNew":"    public FieldIndexReader(IndexInput in, FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                            long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.in = in;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that PrefixCodedTermsReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        coreIndex = new CoreFieldIndex(indexStart,\n                                       termsStart,\n                                       packedIndexStart,\n                                       packedOffsetsStart,\n                                       numIndexTerms);\n      \n      }\n    }\n\n","sourceOld":"    public FieldIndexReader(IndexInput in, FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                            long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.in = in;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that StandardTermsDictReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        coreIndex = new CoreFieldIndex(indexStart,\n                                       termsStart,\n                                       packedIndexStart,\n                                       packedOffsetsStart,\n                                       numIndexTerms);\n      \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#FieldIndexReader(IndexInput,FieldInfo,int,long,long,long,long).mjava","sourceNew":null,"sourceOld":"    public FieldIndexReader(IndexInput in, FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                            long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.in = in;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that StandardTermsDictReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        coreIndex = new CoreFieldIndex(indexStart,\n                                       termsStart,\n                                       packedIndexStart,\n                                       packedOffsetsStart,\n                                       numIndexTerms);\n      \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08932c793647a36953d1816b1060121f48820d3f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","08932c793647a36953d1816b1060121f48820d3f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","99cf56f3a650b908f7017a72f9d23940418f8a52"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["08932c793647a36953d1816b1060121f48820d3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99cf56f3a650b908f7017a72f9d23940418f8a52"]},"commit2Childs":{"08932c793647a36953d1816b1060121f48820d3f":["5f4e87790277826a2aea119328600dfb07761f32","99cf56f3a650b908f7017a72f9d23940418f8a52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["08932c793647a36953d1816b1060121f48820d3f","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}