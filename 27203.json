{"path":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVector(int,TermVectorMapper).mjava","commits":[{"id":"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb","date":1185160645,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVector(int,TermVectorMapper).mjava","pathOld":"/dev/null","sourceNew":"  public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException {\n    ensureOpen();\n    ensureOpen();\n\n    Iterator i = fieldToReader.entrySet().iterator();\n    while (i.hasNext()) {\n      Map.Entry e = (Map.Entry)i.next();\n      String field = (String)e.getKey();\n      IndexReader reader = (IndexReader)e.getValue();\n      reader.getTermFreqVector(docNumber, field, mapper);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ec88b7774b98ba6459ab5db4d3e85a3e765d191","date":1244334717,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVector(int,TermVectorMapper).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVector(int,TermVectorMapper).mjava","sourceNew":"  public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException {\n    ensureOpen();\n\n    Iterator i = fieldToReader.entrySet().iterator();\n    while (i.hasNext()) {\n      Map.Entry e = (Map.Entry)i.next();\n      String field = (String)e.getKey();\n      IndexReader reader = (IndexReader)e.getValue();\n      reader.getTermFreqVector(docNumber, field, mapper);\n    }\n\n  }\n\n","sourceOld":"  public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException {\n    ensureOpen();\n    ensureOpen();\n\n    Iterator i = fieldToReader.entrySet().iterator();\n    while (i.hasNext()) {\n      Map.Entry e = (Map.Entry)i.next();\n      String field = (String)e.getKey();\n      IndexReader reader = (IndexReader)e.getValue();\n      reader.getTermFreqVector(docNumber, field, mapper);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVector(int,TermVectorMapper).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVector(int,TermVectorMapper).mjava","sourceNew":"  public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException {\n    ensureOpen();\n\n    for (final Map.Entry<String,IndexReader> e : fieldToReader.entrySet()) {\n\n      String field = e.getKey();\n      IndexReader reader = e.getValue();\n      reader.getTermFreqVector(docNumber, field, mapper);\n    }\n\n  }\n\n","sourceOld":"  public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException {\n    ensureOpen();\n\n    Iterator i = fieldToReader.entrySet().iterator();\n    while (i.hasNext()) {\n      Map.Entry e = (Map.Entry)i.next();\n      String field = (String)e.getKey();\n      IndexReader reader = (IndexReader)e.getValue();\n      reader.getTermFreqVector(docNumber, field, mapper);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVector(int,TermVectorMapper).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVector(int,TermVectorMapper).mjava","sourceNew":"  @Override\n  public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException {\n    ensureOpen();\n\n    for (final Map.Entry<String,IndexReader> e : fieldToReader.entrySet()) {\n\n      String field = e.getKey();\n      IndexReader reader = e.getValue();\n      reader.getTermFreqVector(docNumber, field, mapper);\n    }\n\n  }\n\n","sourceOld":"  public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException {\n    ensureOpen();\n\n    for (final Map.Entry<String,IndexReader> e : fieldToReader.entrySet()) {\n\n      String field = e.getKey();\n      IndexReader reader = e.getValue();\n      reader.getTermFreqVector(docNumber, field, mapper);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#getTermFreqVector(int,TermVectorMapper).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVector(int,TermVectorMapper).mjava","sourceNew":"  @Override\n  public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException {\n    ensureOpen();\n\n    for (final Map.Entry<String,IndexReader> e : fieldToReader.entrySet()) {\n\n      String field = e.getKey();\n      IndexReader reader = e.getValue();\n      reader.getTermFreqVector(docNumber, field, mapper);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void getTermFreqVector(int docNumber, TermVectorMapper mapper) throws IOException {\n    ensureOpen();\n\n    for (final Map.Entry<String,IndexReader> e : fieldToReader.entrySet()) {\n\n      String field = e.getKey();\n      IndexReader reader = e.getValue();\n      reader.getTermFreqVector(docNumber, field, mapper);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["3ec88b7774b98ba6459ab5db4d3e85a3e765d191"],"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3ec88b7774b98ba6459ab5db4d3e85a3e765d191":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["8a9e385641d717e641408d8fbbc62be8fc766357"],"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["3ec88b7774b98ba6459ab5db4d3e85a3e765d191"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3ec88b7774b98ba6459ab5db4d3e85a3e765d191":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}