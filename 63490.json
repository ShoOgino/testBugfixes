{"path":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","commits":[{"id":"9c7cdfe5a1ea9db97faa404b251fa644faa73597","date":1308345959,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    DocList getDocList(TopDocsCollector collector) {\n      int max = collector.getTotalHits();\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.Simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, Math.max(docsToCollect,1));  // 0 isn't supported as a valid value\n      int docsCollected = Math.min(docsToCollect, topDocs.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7edfc3f7caa7b49a18fe367692768b33b018e9db","date":1308374217,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(TopDocsCollector).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    DocList getDocList(TopDocsCollector collector) {\n      int max = collector.getTotalHits();\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.Simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      TopDocs topDocs = collector.topDocs(0, Math.max(docsToCollect,1));  // 0 isn't supported as a valid value\n      int docsCollected = Math.min(docsToCollect, topDocs.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i=0; i<ids.length; i++) {\n        ids[i] = topDocs.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = topDocs.scoreDocs[i].score;\n      }\n\n      float score = topDocs.getMaxScore();\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, topDocs.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7edfc3f7caa7b49a18fe367692768b33b018e9db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["7edfc3f7caa7b49a18fe367692768b33b018e9db"],"c26f00b574427b55127e869b935845554afde1fa":["9c7cdfe5a1ea9db97faa404b251fa644faa73597","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"7edfc3f7caa7b49a18fe367692768b33b018e9db":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7edfc3f7caa7b49a18fe367692768b33b018e9db","9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["7edfc3f7caa7b49a18fe367692768b33b018e9db","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}