{"path":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testLongPriorityQueue().mjava","commits":[{"id":"e789a6ee3a5fa41394cbed2293ff68c3712c32a9","date":1283533946,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testLongPriorityQueue().mjava","pathOld":"/dev/null","sourceNew":"  public void testLongPriorityQueue() {\n    int maxSize = 100;\n    long[] a = new long[maxSize];\n    long[] discards = new long[maxSize];\n\n    for (int iter=0; iter<100; iter++) {\n      int discardCount = 0;\n      int startSize = r.nextInt(maxSize) + 1;\n      int endSize = startSize==maxSize ? maxSize : startSize + r.nextInt(maxSize-startSize);\n      int adds = r.nextInt(maxSize+1);\n      // System.out.println(\"startSize=\" + startSize + \" endSize=\" + endSize + \" adds=\"+adds);\n      LongPriorityQueue pq = new LongPriorityQueue(startSize, endSize, Long.MIN_VALUE);\n\n      for (int i=0; i<adds; i++) {\n        long v = r.nextLong();\n        a[i] = v;\n        long out = pq.insertWithOverflow(v);\n        if (i < endSize) {\n          assertEquals(out, Long.MIN_VALUE);\n        } else {\n          discards[discardCount++] = out;\n        }\n      }\n      assertEquals(Math.min(adds,endSize), pq.size());\n      assertEquals(adds, pq.size() + discardCount);\n\n      Arrays.sort(a, 0, adds);\n      Arrays.sort(discards, 0, discardCount);\n      for (int i=0; i<discardCount; i++) {\n        assertEquals(a[i], discards[i]);\n      }\n\n      for (int i=discardCount; i<adds; i++) {\n        assertEquals(a[i], pq.pop());\n      }\n\n      assertEquals(0, pq.size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testLongPriorityQueue().mjava","pathOld":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testLongPriorityQueue().mjava","sourceNew":"  public void testLongPriorityQueue() {\n    int maxSize = 100;\n    long[] a = new long[maxSize];\n    long[] discards = new long[maxSize];\n\n    for (int iter=0; iter<100; iter++) {\n      int discardCount = 0;\n      int startSize = random.nextInt(maxSize) + 1;\n      int endSize = startSize==maxSize ? maxSize : startSize + random.nextInt(maxSize-startSize);\n      int adds = random.nextInt(maxSize+1);\n      // System.out.println(\"startSize=\" + startSize + \" endSize=\" + endSize + \" adds=\"+adds);\n      LongPriorityQueue pq = new LongPriorityQueue(startSize, endSize, Long.MIN_VALUE);\n\n      for (int i=0; i<adds; i++) {\n        long v = random.nextLong();\n        a[i] = v;\n        long out = pq.insertWithOverflow(v);\n        if (i < endSize) {\n          assertEquals(out, Long.MIN_VALUE);\n        } else {\n          discards[discardCount++] = out;\n        }\n      }\n      assertEquals(Math.min(adds,endSize), pq.size());\n      assertEquals(adds, pq.size() + discardCount);\n\n      Arrays.sort(a, 0, adds);\n      Arrays.sort(discards, 0, discardCount);\n      for (int i=0; i<discardCount; i++) {\n        assertEquals(a[i], discards[i]);\n      }\n\n      for (int i=discardCount; i<adds; i++) {\n        assertEquals(a[i], pq.pop());\n      }\n\n      assertEquals(0, pq.size());\n    }\n  }\n\n","sourceOld":"  public void testLongPriorityQueue() {\n    int maxSize = 100;\n    long[] a = new long[maxSize];\n    long[] discards = new long[maxSize];\n\n    for (int iter=0; iter<100; iter++) {\n      int discardCount = 0;\n      int startSize = r.nextInt(maxSize) + 1;\n      int endSize = startSize==maxSize ? maxSize : startSize + r.nextInt(maxSize-startSize);\n      int adds = r.nextInt(maxSize+1);\n      // System.out.println(\"startSize=\" + startSize + \" endSize=\" + endSize + \" adds=\"+adds);\n      LongPriorityQueue pq = new LongPriorityQueue(startSize, endSize, Long.MIN_VALUE);\n\n      for (int i=0; i<adds; i++) {\n        long v = r.nextLong();\n        a[i] = v;\n        long out = pq.insertWithOverflow(v);\n        if (i < endSize) {\n          assertEquals(out, Long.MIN_VALUE);\n        } else {\n          discards[discardCount++] = out;\n        }\n      }\n      assertEquals(Math.min(adds,endSize), pq.size());\n      assertEquals(adds, pq.size() + discardCount);\n\n      Arrays.sort(a, 0, adds);\n      Arrays.sort(discards, 0, discardCount);\n      for (int i=0; i<discardCount; i++) {\n        assertEquals(a[i], discards[i]);\n      }\n\n      for (int i=discardCount; i<adds; i++) {\n        assertEquals(a[i], pq.pop());\n      }\n\n      assertEquals(0, pq.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testLongPriorityQueue().mjava","pathOld":"/dev/null","sourceNew":"  public void testLongPriorityQueue() {\n    int maxSize = 100;\n    long[] a = new long[maxSize];\n    long[] discards = new long[maxSize];\n\n    for (int iter=0; iter<100; iter++) {\n      int discardCount = 0;\n      int startSize = random.nextInt(maxSize) + 1;\n      int endSize = startSize==maxSize ? maxSize : startSize + random.nextInt(maxSize-startSize);\n      int adds = random.nextInt(maxSize+1);\n      // System.out.println(\"startSize=\" + startSize + \" endSize=\" + endSize + \" adds=\"+adds);\n      LongPriorityQueue pq = new LongPriorityQueue(startSize, endSize, Long.MIN_VALUE);\n\n      for (int i=0; i<adds; i++) {\n        long v = random.nextLong();\n        a[i] = v;\n        long out = pq.insertWithOverflow(v);\n        if (i < endSize) {\n          assertEquals(out, Long.MIN_VALUE);\n        } else {\n          discards[discardCount++] = out;\n        }\n      }\n      assertEquals(Math.min(adds,endSize), pq.size());\n      assertEquals(adds, pq.size() + discardCount);\n\n      Arrays.sort(a, 0, adds);\n      Arrays.sort(discards, 0, discardCount);\n      for (int i=0; i<discardCount; i++) {\n        assertEquals(a[i], discards[i]);\n      }\n\n      for (int i=discardCount; i<adds; i++) {\n        assertEquals(a[i], pq.pop());\n      }\n\n      assertEquals(0, pq.size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/PrimUtilsTest#testLongPriorityQueue().mjava","pathOld":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testLongPriorityQueue().mjava","sourceNew":"  public void testLongPriorityQueue() {\n    int maxSize = 100;\n    long[] a = new long[maxSize];\n    long[] discards = new long[maxSize];\n\n    for (int iter=0; iter<100; iter++) {\n      int discardCount = 0;\n      int startSize = random.nextInt(maxSize) + 1;\n      int endSize = startSize==maxSize ? maxSize : startSize + random.nextInt(maxSize-startSize);\n      int adds = random.nextInt(maxSize+1);\n      // System.out.println(\"startSize=\" + startSize + \" endSize=\" + endSize + \" adds=\"+adds);\n      LongPriorityQueue pq = new LongPriorityQueue(startSize, endSize, Long.MIN_VALUE);\n\n      for (int i=0; i<adds; i++) {\n        long v = random.nextLong();\n        a[i] = v;\n        long out = pq.insertWithOverflow(v);\n        if (i < endSize) {\n          assertEquals(out, Long.MIN_VALUE);\n        } else {\n          discards[discardCount++] = out;\n        }\n      }\n      assertEquals(Math.min(adds,endSize), pq.size());\n      assertEquals(adds, pq.size() + discardCount);\n\n      Arrays.sort(a, 0, adds);\n      Arrays.sort(discards, 0, discardCount);\n      for (int i=0; i<discardCount; i++) {\n        assertEquals(a[i], discards[i]);\n      }\n\n      for (int i=discardCount; i<adds; i++) {\n        assertEquals(a[i], pq.pop());\n      }\n\n      assertEquals(0, pq.size());\n    }\n  }\n\n","sourceOld":"  public void testLongPriorityQueue() {\n    int maxSize = 100;\n    long[] a = new long[maxSize];\n    long[] discards = new long[maxSize];\n\n    for (int iter=0; iter<100; iter++) {\n      int discardCount = 0;\n      int startSize = random.nextInt(maxSize) + 1;\n      int endSize = startSize==maxSize ? maxSize : startSize + random.nextInt(maxSize-startSize);\n      int adds = random.nextInt(maxSize+1);\n      // System.out.println(\"startSize=\" + startSize + \" endSize=\" + endSize + \" adds=\"+adds);\n      LongPriorityQueue pq = new LongPriorityQueue(startSize, endSize, Long.MIN_VALUE);\n\n      for (int i=0; i<adds; i++) {\n        long v = random.nextLong();\n        a[i] = v;\n        long out = pq.insertWithOverflow(v);\n        if (i < endSize) {\n          assertEquals(out, Long.MIN_VALUE);\n        } else {\n          discards[discardCount++] = out;\n        }\n      }\n      assertEquals(Math.min(adds,endSize), pq.size());\n      assertEquals(adds, pq.size() + discardCount);\n\n      Arrays.sort(a, 0, adds);\n      Arrays.sort(discards, 0, discardCount);\n      for (int i=0; i<discardCount; i++) {\n        assertEquals(a[i], discards[i]);\n      }\n\n      for (int i=discardCount; i<adds; i++) {\n        assertEquals(a[i], pq.pop());\n      }\n\n      assertEquals(0, pq.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/PrimUtilsTest#testLongPriorityQueue().mjava","pathOld":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testLongPriorityQueue().mjava","sourceNew":"  public void testLongPriorityQueue() {\n    int maxSize = 100;\n    long[] a = new long[maxSize];\n    long[] discards = new long[maxSize];\n\n    for (int iter=0; iter<100; iter++) {\n      int discardCount = 0;\n      int startSize = random.nextInt(maxSize) + 1;\n      int endSize = startSize==maxSize ? maxSize : startSize + random.nextInt(maxSize-startSize);\n      int adds = random.nextInt(maxSize+1);\n      // System.out.println(\"startSize=\" + startSize + \" endSize=\" + endSize + \" adds=\"+adds);\n      LongPriorityQueue pq = new LongPriorityQueue(startSize, endSize, Long.MIN_VALUE);\n\n      for (int i=0; i<adds; i++) {\n        long v = random.nextLong();\n        a[i] = v;\n        long out = pq.insertWithOverflow(v);\n        if (i < endSize) {\n          assertEquals(out, Long.MIN_VALUE);\n        } else {\n          discards[discardCount++] = out;\n        }\n      }\n      assertEquals(Math.min(adds,endSize), pq.size());\n      assertEquals(adds, pq.size() + discardCount);\n\n      Arrays.sort(a, 0, adds);\n      Arrays.sort(discards, 0, discardCount);\n      for (int i=0; i<discardCount; i++) {\n        assertEquals(a[i], discards[i]);\n      }\n\n      for (int i=discardCount; i<adds; i++) {\n        assertEquals(a[i], pq.pop());\n      }\n\n      assertEquals(0, pq.size());\n    }\n  }\n\n","sourceOld":"  public void testLongPriorityQueue() {\n    int maxSize = 100;\n    long[] a = new long[maxSize];\n    long[] discards = new long[maxSize];\n\n    for (int iter=0; iter<100; iter++) {\n      int discardCount = 0;\n      int startSize = random.nextInt(maxSize) + 1;\n      int endSize = startSize==maxSize ? maxSize : startSize + random.nextInt(maxSize-startSize);\n      int adds = random.nextInt(maxSize+1);\n      // System.out.println(\"startSize=\" + startSize + \" endSize=\" + endSize + \" adds=\"+adds);\n      LongPriorityQueue pq = new LongPriorityQueue(startSize, endSize, Long.MIN_VALUE);\n\n      for (int i=0; i<adds; i++) {\n        long v = random.nextLong();\n        a[i] = v;\n        long out = pq.insertWithOverflow(v);\n        if (i < endSize) {\n          assertEquals(out, Long.MIN_VALUE);\n        } else {\n          discards[discardCount++] = out;\n        }\n      }\n      assertEquals(Math.min(adds,endSize), pq.size());\n      assertEquals(adds, pq.size() + discardCount);\n\n      Arrays.sort(a, 0, adds);\n      Arrays.sort(discards, 0, discardCount);\n      for (int i=0; i<discardCount; i++) {\n        assertEquals(a[i], discards[i]);\n      }\n\n      for (int i=discardCount; i<adds; i++) {\n        assertEquals(a[i], pq.pop());\n      }\n\n      assertEquals(0, pq.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/PrimUtilsTest#testLongPriorityQueue().mjava","pathOld":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testLongPriorityQueue().mjava","sourceNew":"  public void testLongPriorityQueue() {\n    int maxSize = 100;\n    long[] a = new long[maxSize];\n    long[] discards = new long[maxSize];\n\n    for (int iter=0; iter<100; iter++) {\n      int discardCount = 0;\n      int startSize = random.nextInt(maxSize) + 1;\n      int endSize = startSize==maxSize ? maxSize : startSize + random.nextInt(maxSize-startSize);\n      int adds = random.nextInt(maxSize+1);\n      // System.out.println(\"startSize=\" + startSize + \" endSize=\" + endSize + \" adds=\"+adds);\n      LongPriorityQueue pq = new LongPriorityQueue(startSize, endSize, Long.MIN_VALUE);\n\n      for (int i=0; i<adds; i++) {\n        long v = random.nextLong();\n        a[i] = v;\n        long out = pq.insertWithOverflow(v);\n        if (i < endSize) {\n          assertEquals(out, Long.MIN_VALUE);\n        } else {\n          discards[discardCount++] = out;\n        }\n      }\n      assertEquals(Math.min(adds,endSize), pq.size());\n      assertEquals(adds, pq.size() + discardCount);\n\n      Arrays.sort(a, 0, adds);\n      Arrays.sort(discards, 0, discardCount);\n      for (int i=0; i<discardCount; i++) {\n        assertEquals(a[i], discards[i]);\n      }\n\n      for (int i=discardCount; i<adds; i++) {\n        assertEquals(a[i], pq.pop());\n      }\n\n      assertEquals(0, pq.size());\n    }\n  }\n\n","sourceOld":"  public void testLongPriorityQueue() {\n    int maxSize = 100;\n    long[] a = new long[maxSize];\n    long[] discards = new long[maxSize];\n\n    for (int iter=0; iter<100; iter++) {\n      int discardCount = 0;\n      int startSize = random.nextInt(maxSize) + 1;\n      int endSize = startSize==maxSize ? maxSize : startSize + random.nextInt(maxSize-startSize);\n      int adds = random.nextInt(maxSize+1);\n      // System.out.println(\"startSize=\" + startSize + \" endSize=\" + endSize + \" adds=\"+adds);\n      LongPriorityQueue pq = new LongPriorityQueue(startSize, endSize, Long.MIN_VALUE);\n\n      for (int i=0; i<adds; i++) {\n        long v = random.nextLong();\n        a[i] = v;\n        long out = pq.insertWithOverflow(v);\n        if (i < endSize) {\n          assertEquals(out, Long.MIN_VALUE);\n        } else {\n          discards[discardCount++] = out;\n        }\n      }\n      assertEquals(Math.min(adds,endSize), pq.size());\n      assertEquals(adds, pq.size() + discardCount);\n\n      Arrays.sort(a, 0, adds);\n      Arrays.sort(discards, 0, discardCount);\n      for (int i=0; i<discardCount; i++) {\n        assertEquals(a[i], discards[i]);\n      }\n\n      for (int i=discardCount; i<adds; i++) {\n        assertEquals(a[i], pq.pop());\n      }\n\n      assertEquals(0, pq.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e789a6ee3a5fa41394cbed2293ff68c3712c32a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["e789a6ee3a5fa41394cbed2293ff68c3712c32a9"],"c26f00b574427b55127e869b935845554afde1fa":["1f653cfcf159baeaafe5d01682a911e95bba4012","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"e789a6ee3a5fa41394cbed2293ff68c3712c32a9":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e789a6ee3a5fa41394cbed2293ff68c3712c32a9","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}