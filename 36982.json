{"path":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#obtain().mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#obtain().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean obtain() throws IOException {\n      FSDataOutputStream file = null;\n      FileSystem fs = null;\n      try {\n        fs = FileSystem.newInstance(lockPath.toUri(), conf);\n        \n        file = fs.create(new Path(lockPath, lockName), false);\n      } catch (IOException e) {\n        return false;\n      } finally {\n        IOUtils.closeQuietly(file);\n        IOUtils.closeQuietly(fs);\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7c88c33fee958027b9192ef2c6bb54836618b165"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#obtain().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean obtain() throws IOException {\n      FSDataOutputStream file = null;\n      FileSystem fs = null;\n      try {\n        fs = FileSystem.newInstance(lockPath.toUri(), conf);\n        \n        file = fs.create(new Path(lockPath, lockName), false);\n      } catch (IOException e) {\n        return false;\n      } finally {\n        IOUtils.closeQuietly(file);\n        IOUtils.closeQuietly(fs);\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dfca21e4315cbc5455ab7b5d6530c34f05fee48","date":1386348293,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#obtain().mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#obtain().mjava","sourceNew":"    @Override\n    public boolean obtain() throws IOException {\n      FSDataOutputStream file = null;\n      FileSystem fs = null;\n      try {\n        fs = FileSystem.newInstance(lockPath.toUri(), conf);\n        if (!fs.exists(lockPath)) {\n          fs.mkdirs(lockPath);\n        }\n        file = fs.create(new Path(lockPath, lockName), false);\n      } catch (FileAlreadyExistsException e) { \n        return false;\n      }catch (IOException e) {\n        log.error(\"Error creating lock file\", e);\n        return false;\n      } finally {\n        IOUtils.closeQuietly(file);\n        IOUtils.closeQuietly(fs);\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean obtain() throws IOException {\n      FSDataOutputStream file = null;\n      FileSystem fs = null;\n      try {\n        fs = FileSystem.newInstance(lockPath.toUri(), conf);\n        \n        file = fs.create(new Path(lockPath, lockName), false);\n      } catch (IOException e) {\n        return false;\n      } finally {\n        IOUtils.closeQuietly(file);\n        IOUtils.closeQuietly(fs);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":["7c88c33fee958027b9192ef2c6bb54836618b165"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#obtain().mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#obtain().mjava","sourceNew":"    @Override\n    public boolean obtain() throws IOException {\n      FSDataOutputStream file = null;\n      FileSystem fs = null;\n      try {\n        fs = FileSystem.newInstance(lockPath.toUri(), conf);\n        if (!fs.exists(lockPath)) {\n          fs.mkdirs(lockPath);\n        }\n        file = fs.create(new Path(lockPath, lockName), false);\n      } catch (FileAlreadyExistsException e) { \n        return false;\n      }catch (IOException e) {\n        log.error(\"Error creating lock file\", e);\n        return false;\n      } finally {\n        IOUtils.closeQuietly(file);\n        IOUtils.closeQuietly(fs);\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean obtain() throws IOException {\n      FSDataOutputStream file = null;\n      FileSystem fs = null;\n      try {\n        fs = FileSystem.newInstance(lockPath.toUri(), conf);\n        \n        file = fs.create(new Path(lockPath, lockName), false);\n      } catch (IOException e) {\n        return false;\n      } finally {\n        IOUtils.closeQuietly(file);\n        IOUtils.closeQuietly(fs);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c88c33fee958027b9192ef2c6bb54836618b165","date":1390430350,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#obtain().mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#obtain().mjava","sourceNew":"    @Override\n    public boolean obtain() throws IOException {\n      FSDataOutputStream file = null;\n      FileSystem fs = FileSystem.newInstance(lockPath.toUri(), conf);\n      try {\n        while (true) {\n          try {\n            if (!fs.exists(lockPath)) {\n              boolean success = fs.mkdirs(lockPath);\n              if (!success) {\n                throw new RuntimeException(\"Could not create directory: \" + lockPath);\n              }\n            } else {\n              // just to check for safe mode\n              fs.mkdirs(lockPath);\n            }\n\n            \n            file = fs.create(new Path(lockPath, lockName), false);\n            break;\n          } catch (FileAlreadyExistsException e) {\n            return false;\n          } catch (RemoteException e) {\n            if (e.getClassName().equals(\n                \"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n              log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n              try {\n                Thread.sleep(5000);\n              } catch (InterruptedException e1) {\n                Thread.interrupted();\n              }\n              continue;\n            }\n            log.error(\"Error creating lock file\", e);\n            return false;\n          } catch (IOException e) {\n            log.error(\"Error creating lock file\", e);\n            return false;\n          } finally {\n            IOUtils.closeQuietly(file);\n          }\n        }\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean obtain() throws IOException {\n      FSDataOutputStream file = null;\n      FileSystem fs = null;\n      try {\n        fs = FileSystem.newInstance(lockPath.toUri(), conf);\n        if (!fs.exists(lockPath)) {\n          fs.mkdirs(lockPath);\n        }\n        file = fs.create(new Path(lockPath, lockName), false);\n      } catch (FileAlreadyExistsException e) { \n        return false;\n      }catch (IOException e) {\n        log.error(\"Error creating lock file\", e);\n        return false;\n      } finally {\n        IOUtils.closeQuietly(file);\n        IOUtils.closeQuietly(fs);\n      }\n      return true;\n    }\n\n","bugFix":["1dfca21e4315cbc5455ab7b5d6530c34f05fee48","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":["a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197","date":1427044180,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#obtain().mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#obtain().mjava","sourceNew":"    @Override\n    public boolean obtain() throws IOException {\n      FSDataOutputStream file = null;\n      FileSystem fs = FileSystem.get(lockPath.toUri(), conf);\n      try {\n        while (true) {\n          try {\n            if (!fs.exists(lockPath)) {\n              boolean success = fs.mkdirs(lockPath);\n              if (!success) {\n                throw new RuntimeException(\"Could not create directory: \" + lockPath);\n              }\n            } else {\n              // just to check for safe mode\n              fs.mkdirs(lockPath);\n            }\n\n            \n            file = fs.create(new Path(lockPath, lockName), false);\n            break;\n          } catch (FileAlreadyExistsException e) {\n            return false;\n          } catch (RemoteException e) {\n            if (e.getClassName().equals(\n                \"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n              log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n              try {\n                Thread.sleep(5000);\n              } catch (InterruptedException e1) {\n                Thread.interrupted();\n              }\n              continue;\n            }\n            log.error(\"Error creating lock file\", e);\n            return false;\n          } catch (IOException e) {\n            log.error(\"Error creating lock file\", e);\n            return false;\n          } finally {\n            IOUtils.closeQuietly(file);\n          }\n        }\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean obtain() throws IOException {\n      FSDataOutputStream file = null;\n      FileSystem fs = FileSystem.newInstance(lockPath.toUri(), conf);\n      try {\n        while (true) {\n          try {\n            if (!fs.exists(lockPath)) {\n              boolean success = fs.mkdirs(lockPath);\n              if (!success) {\n                throw new RuntimeException(\"Could not create directory: \" + lockPath);\n              }\n            } else {\n              // just to check for safe mode\n              fs.mkdirs(lockPath);\n            }\n\n            \n            file = fs.create(new Path(lockPath, lockName), false);\n            break;\n          } catch (FileAlreadyExistsException e) {\n            return false;\n          } catch (RemoteException e) {\n            if (e.getClassName().equals(\n                \"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n              log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n              try {\n                Thread.sleep(5000);\n              } catch (InterruptedException e1) {\n                Thread.interrupted();\n              }\n              continue;\n            }\n            log.error(\"Error creating lock file\", e);\n            return false;\n          } catch (IOException e) {\n            log.error(\"Error creating lock file\", e);\n            return false;\n          } finally {\n            IOUtils.closeQuietly(file);\n          }\n        }\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n      return true;\n    }\n\n","bugFix":["7c88c33fee958027b9192ef2c6bb54836618b165"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#obtain().mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#obtain().mjava","sourceNew":"    @Override\n    public boolean obtain() throws IOException {\n      FSDataOutputStream file = null;\n      FileSystem fs = FileSystem.get(lockPath.toUri(), conf);\n      try {\n        while (true) {\n          try {\n            if (!fs.exists(lockPath)) {\n              boolean success = fs.mkdirs(lockPath);\n              if (!success) {\n                throw new RuntimeException(\"Could not create directory: \" + lockPath);\n              }\n            } else {\n              // just to check for safe mode\n              fs.mkdirs(lockPath);\n            }\n\n            \n            file = fs.create(new Path(lockPath, lockName), false);\n            break;\n          } catch (FileAlreadyExistsException e) {\n            return false;\n          } catch (RemoteException e) {\n            if (e.getClassName().equals(\n                \"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n              log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n              try {\n                Thread.sleep(5000);\n              } catch (InterruptedException e1) {\n                Thread.interrupted();\n              }\n              continue;\n            }\n            log.error(\"Error creating lock file\", e);\n            return false;\n          } catch (IOException e) {\n            log.error(\"Error creating lock file\", e);\n            return false;\n          } finally {\n            IOUtils.closeQuietly(file);\n          }\n        }\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean obtain() throws IOException {\n      FSDataOutputStream file = null;\n      FileSystem fs = FileSystem.newInstance(lockPath.toUri(), conf);\n      try {\n        while (true) {\n          try {\n            if (!fs.exists(lockPath)) {\n              boolean success = fs.mkdirs(lockPath);\n              if (!success) {\n                throw new RuntimeException(\"Could not create directory: \" + lockPath);\n              }\n            } else {\n              // just to check for safe mode\n              fs.mkdirs(lockPath);\n            }\n\n            \n            file = fs.create(new Path(lockPath, lockName), false);\n            break;\n          } catch (FileAlreadyExistsException e) {\n            return false;\n          } catch (RemoteException e) {\n            if (e.getClassName().equals(\n                \"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n              log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n              try {\n                Thread.sleep(5000);\n              } catch (InterruptedException e1) {\n                Thread.interrupted();\n              }\n              continue;\n            }\n            log.error(\"Error creating lock file\", e);\n            return false;\n          } catch (IOException e) {\n            log.error(\"Error creating lock file\", e);\n            return false;\n          } finally {\n            IOUtils.closeQuietly(file);\n          }\n        }\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd448926db19517b82cc7c775c62c57f7d2ee6a","date":1432845380,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#obtain().mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#obtain().mjava","sourceNew":"    @Override\n    public boolean obtain() throws IOException {\n\n      if (obtained) {\n        // Our instance is already locked:\n        throw new LockObtainFailedException(\"this lock instance was already obtained\");\n      }\n\n      FSDataOutputStream file = null;\n      FileSystem fs = FileSystem.get(lockPath.toUri(), conf);\n      try {\n        while (true) {\n          try {\n            if (!fs.exists(lockPath)) {\n              boolean success = fs.mkdirs(lockPath);\n              if (!success) {\n                throw new RuntimeException(\"Could not create directory: \" + lockPath);\n              }\n            } else {\n              // just to check for safe mode\n              fs.mkdirs(lockPath);\n            }\n            \n            file = fs.create(new Path(lockPath, lockName), false);\n            break;\n          } catch (FileAlreadyExistsException e) {\n            return obtained = false;\n          } catch (RemoteException e) {\n            if (e.getClassName().equals(\n                \"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n              log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n              try {\n                Thread.sleep(5000);\n              } catch (InterruptedException e1) {\n                Thread.interrupted();\n              }\n              continue;\n            }\n            log.error(\"Error creating lock file\", e);\n            return obtained = false;\n          } catch (IOException e) {\n            log.error(\"Error creating lock file\", e);\n            return obtained = false;\n          } finally {\n            IOUtils.closeQuietly(file);\n          }\n        }\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n      return obtained = true;\n    }\n\n","sourceOld":"    @Override\n    public boolean obtain() throws IOException {\n      FSDataOutputStream file = null;\n      FileSystem fs = FileSystem.get(lockPath.toUri(), conf);\n      try {\n        while (true) {\n          try {\n            if (!fs.exists(lockPath)) {\n              boolean success = fs.mkdirs(lockPath);\n              if (!success) {\n                throw new RuntimeException(\"Could not create directory: \" + lockPath);\n              }\n            } else {\n              // just to check for safe mode\n              fs.mkdirs(lockPath);\n            }\n\n            \n            file = fs.create(new Path(lockPath, lockName), false);\n            break;\n          } catch (FileAlreadyExistsException e) {\n            return false;\n          } catch (RemoteException e) {\n            if (e.getClassName().equals(\n                \"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n              log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n              try {\n                Thread.sleep(5000);\n              } catch (InterruptedException e1) {\n                Thread.interrupted();\n              }\n              continue;\n            }\n            log.error(\"Error creating lock file\", e);\n            return false;\n          } catch (IOException e) {\n            log.error(\"Error creating lock file\", e);\n            return false;\n          } finally {\n            IOUtils.closeQuietly(file);\n          }\n        }\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#obtain().mjava","sourceNew":null,"sourceOld":"    @Override\n    public boolean obtain() throws IOException {\n\n      if (obtained) {\n        // Our instance is already locked:\n        throw new LockObtainFailedException(\"this lock instance was already obtained\");\n      }\n\n      FSDataOutputStream file = null;\n      FileSystem fs = FileSystem.get(lockPath.toUri(), conf);\n      try {\n        while (true) {\n          try {\n            if (!fs.exists(lockPath)) {\n              boolean success = fs.mkdirs(lockPath);\n              if (!success) {\n                throw new RuntimeException(\"Could not create directory: \" + lockPath);\n              }\n            } else {\n              // just to check for safe mode\n              fs.mkdirs(lockPath);\n            }\n            \n            file = fs.create(new Path(lockPath, lockName), false);\n            break;\n          } catch (FileAlreadyExistsException e) {\n            return obtained = false;\n          } catch (RemoteException e) {\n            if (e.getClassName().equals(\n                \"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n              log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n              try {\n                Thread.sleep(5000);\n              } catch (InterruptedException e1) {\n                Thread.interrupted();\n              }\n              continue;\n            }\n            log.error(\"Error creating lock file\", e);\n            return obtained = false;\n          } catch (IOException e) {\n            log.error(\"Error creating lock file\", e);\n            return obtained = false;\n          } finally {\n            IOUtils.closeQuietly(file);\n          }\n        }\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n      return obtained = true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["7cd448926db19517b82cc7c775c62c57f7d2ee6a"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c88c33fee958027b9192ef2c6bb54836618b165":["1dfca21e4315cbc5455ab7b5d6530c34f05fee48"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7c88c33fee958027b9192ef2c6bb54836618b165","a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197"],"1dfca21e4315cbc5455ab7b5d6530c34f05fee48":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197":["7c88c33fee958027b9192ef2c6bb54836618b165"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["849494cf2f3a96af5c8c84995108ddd8456fcd04","1dfca21e4315cbc5455ab7b5d6530c34f05fee48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["618635065f043788c9e034f96ca5cd5cea1b4592"],"7cd448926db19517b82cc7c775c62c57f7d2ee6a":["a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["1dfca21e4315cbc5455ab7b5d6530c34f05fee48","37a0f60745e53927c4c876cfe5b5a58170f0646c","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"7c88c33fee958027b9192ef2c6bb54836618b165":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1dfca21e4315cbc5455ab7b5d6530c34f05fee48":["7c88c33fee958027b9192ef2c6bb54836618b165","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7cd448926db19517b82cc7c775c62c57f7d2ee6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"7cd448926db19517b82cc7c775c62c57f7d2ee6a":["618635065f043788c9e034f96ca5cd5cea1b4592"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","37a0f60745e53927c4c876cfe5b5a58170f0646c","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}