{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","commits":[{"id":"10b9c6c42133576daaccbd79bd04c88511b9caca","date":1455930223,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","pathOld":"/dev/null","sourceNew":"  private void getPersistedCheckpoints() throws IOException {\n\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(checkpointCollection);\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    OUTER:\n    for(Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for(Replica replica : replicas) {\n        if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())){\n\n\n          HttpSolrClient httpClient = cache.getHttpSolrClient(replica.getCoreUrl());\n          try {\n\n            SolrDocument doc = httpClient.getById(id);\n            if(doc != null) {\n              List<String> checkpoints = (List<String>)doc.getFieldValue(\"checkpoint_ss\");\n              for (String checkpoint : checkpoints) {\n                String[] pair = checkpoint.split(\"~\");\n                this.checkpoints.put(pair[0], Long.parseLong(pair[1]));\n              }\n            }\n          }catch (Exception e) {\n            throw new IOException(e);\n          }\n          break OUTER;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","sourceNew":"  private void getPersistedCheckpoints() throws IOException {\n\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(checkpointCollection);\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    OUTER:\n    for(Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for(Replica replica : replicas) {\n        if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())){\n\n\n          HttpSolrClient httpClient = streamContext.getSolrClientCache().getHttpSolrClient(replica.getCoreUrl());\n          try {\n\n            SolrDocument doc = httpClient.getById(id);\n            if(doc != null) {\n              List<String> checkpoints = (List<String>)doc.getFieldValue(\"checkpoint_ss\");\n              for (String checkpoint : checkpoints) {\n                String[] pair = checkpoint.split(\"~\");\n                this.checkpoints.put(pair[0], Long.parseLong(pair[1]));\n              }\n            }\n          }catch (Exception e) {\n            throw new IOException(e);\n          }\n          break OUTER;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPersistedCheckpoints() throws IOException {\n\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(checkpointCollection);\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    OUTER:\n    for(Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for(Replica replica : replicas) {\n        if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())){\n\n\n          HttpSolrClient httpClient = cache.getHttpSolrClient(replica.getCoreUrl());\n          try {\n\n            SolrDocument doc = httpClient.getById(id);\n            if(doc != null) {\n              List<String> checkpoints = (List<String>)doc.getFieldValue(\"checkpoint_ss\");\n              for (String checkpoint : checkpoints) {\n                String[] pair = checkpoint.split(\"~\");\n                this.checkpoints.put(pair[0], Long.parseLong(pair[1]));\n              }\n            }\n          }catch (Exception e) {\n            throw new IOException(e);\n          }\n          break OUTER;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","sourceNew":"  private void getPersistedCheckpoints() throws IOException {\n\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(checkpointCollection);\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    OUTER:\n    for(Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for(Replica replica : replicas) {\n        if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())){\n\n\n          HttpSolrClient httpClient = streamContext.getSolrClientCache().getHttpSolrClient(replica.getCoreUrl());\n          try {\n\n            SolrDocument doc = httpClient.getById(id);\n            if(doc != null) {\n              List<String> checkpoints = (List<String>)doc.getFieldValue(\"checkpoint_ss\");\n              for (String checkpoint : checkpoints) {\n                String[] pair = checkpoint.split(\"~\");\n                this.checkpoints.put(pair[0], Long.parseLong(pair[1]));\n              }\n            }\n          }catch (Exception e) {\n            throw new IOException(e);\n          }\n          break OUTER;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPersistedCheckpoints() throws IOException {\n\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(checkpointCollection);\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    OUTER:\n    for(Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for(Replica replica : replicas) {\n        if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())){\n\n\n          HttpSolrClient httpClient = cache.getHttpSolrClient(replica.getCoreUrl());\n          try {\n\n            SolrDocument doc = httpClient.getById(id);\n            if(doc != null) {\n              List<String> checkpoints = (List<String>)doc.getFieldValue(\"checkpoint_ss\");\n              for (String checkpoint : checkpoints) {\n                String[] pair = checkpoint.split(\"~\");\n                this.checkpoints.put(pair[0], Long.parseLong(pair[1]));\n              }\n            }\n          }catch (Exception e) {\n            throw new IOException(e);\n          }\n          break OUTER;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","sourceNew":"  private void getPersistedCheckpoints() throws IOException {\n\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(checkpointCollection);\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    OUTER:\n    for(Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for(Replica replica : replicas) {\n        if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())){\n\n\n          HttpSolrClient httpClient = streamContext.getSolrClientCache().getHttpSolrClient(replica.getCoreUrl());\n          try {\n\n            SolrDocument doc = httpClient.getById(id);\n            if(doc != null) {\n              List<String> checkpoints = (List<String>)doc.getFieldValue(\"checkpoint_ss\");\n              for (String checkpoint : checkpoints) {\n                String[] pair = checkpoint.split(\"~\");\n                this.checkpoints.put(pair[0], Long.parseLong(pair[1]));\n              }\n            }\n          }catch (Exception e) {\n            throw new IOException(e);\n          }\n          break OUTER;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPersistedCheckpoints() throws IOException {\n\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(checkpointCollection);\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    OUTER:\n    for(Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for(Replica replica : replicas) {\n        if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())){\n\n\n          HttpSolrClient httpClient = cache.getHttpSolrClient(replica.getCoreUrl());\n          try {\n\n            SolrDocument doc = httpClient.getById(id);\n            if(doc != null) {\n              List<String> checkpoints = (List<String>)doc.getFieldValue(\"checkpoint_ss\");\n              for (String checkpoint : checkpoints) {\n                String[] pair = checkpoint.split(\"~\");\n                this.checkpoints.put(pair[0], Long.parseLong(pair[1]));\n              }\n            }\n          }catch (Exception e) {\n            throw new IOException(e);\n          }\n          break OUTER;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","sourceNew":"  private void getPersistedCheckpoints() throws IOException {\n\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(checkpointCollection);\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    OUTER:\n    for(Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for(Replica replica : replicas) {\n        if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())){\n\n\n          HttpSolrClient httpClient = streamContext.getSolrClientCache().getHttpSolrClient(replica.getCoreUrl());\n          try {\n\n            SolrDocument doc = httpClient.getById(id);\n            if(doc != null) {\n              List<String> checkpoints = (List<String>)doc.getFieldValue(\"checkpoint_ss\");\n              for (String checkpoint : checkpoints) {\n                String[] pair = checkpoint.split(\"~\");\n                this.checkpoints.put(pair[0], Long.parseLong(pair[1]));\n              }\n            }\n          }catch (Exception e) {\n            throw new IOException(e);\n          }\n          break OUTER;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPersistedCheckpoints() throws IOException {\n\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(checkpointCollection);\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    OUTER:\n    for(Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for(Replica replica : replicas) {\n        if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())){\n\n\n          HttpSolrClient httpClient = cache.getHttpSolrClient(replica.getCoreUrl());\n          try {\n\n            SolrDocument doc = httpClient.getById(id);\n            if(doc != null) {\n              List<String> checkpoints = (List<String>)doc.getFieldValue(\"checkpoint_ss\");\n              for (String checkpoint : checkpoints) {\n                String[] pair = checkpoint.split(\"~\");\n                this.checkpoints.put(pair[0], Long.parseLong(pair[1]));\n              }\n            }\n          }catch (Exception e) {\n            throw new IOException(e);\n          }\n          break OUTER;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","sourceNew":"  private void getPersistedCheckpoints() throws IOException {\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    Collection<Slice> slices = CloudSolrStream.getSlices(checkpointCollection, zkStateReader, false);\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    OUTER:\n    for(Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for(Replica replica : replicas) {\n        if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())){\n          HttpSolrClient httpClient = streamContext.getSolrClientCache().getHttpSolrClient(replica.getCoreUrl());\n          try {\n            SolrDocument doc = httpClient.getById(id);\n            if(doc != null) {\n              List<String> checkpoints = (List<String>)doc.getFieldValue(\"checkpoint_ss\");\n              for (String checkpoint : checkpoints) {\n                String[] pair = checkpoint.split(\"~\");\n                this.checkpoints.put(pair[0], Long.parseLong(pair[1]));\n              }\n            }\n          } catch (Exception e) {\n            throw new IOException(e);\n          }\n          break OUTER;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPersistedCheckpoints() throws IOException {\n\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(checkpointCollection);\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    OUTER:\n    for(Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for(Replica replica : replicas) {\n        if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())){\n\n\n          HttpSolrClient httpClient = streamContext.getSolrClientCache().getHttpSolrClient(replica.getCoreUrl());\n          try {\n\n            SolrDocument doc = httpClient.getById(id);\n            if(doc != null) {\n              List<String> checkpoints = (List<String>)doc.getFieldValue(\"checkpoint_ss\");\n              for (String checkpoint : checkpoints) {\n                String[] pair = checkpoint.split(\"~\");\n                this.checkpoints.put(pair[0], Long.parseLong(pair[1]));\n              }\n            }\n          }catch (Exception e) {\n            throw new IOException(e);\n          }\n          break OUTER;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","sourceNew":"  private void getPersistedCheckpoints() throws IOException {\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    Collection<Slice> slices = CloudSolrStream.getSlices(checkpointCollection, zkStateReader, false);\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    OUTER:\n    for(Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for(Replica replica : replicas) {\n        if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())){\n          HttpSolrClient httpClient = streamContext.getSolrClientCache().getHttpSolrClient(replica.getCoreUrl());\n          try {\n            SolrDocument doc = httpClient.getById(id);\n            if(doc != null) {\n              List<String> checkpoints = (List<String>)doc.getFieldValue(\"checkpoint_ss\");\n              for (String checkpoint : checkpoints) {\n                String[] pair = checkpoint.split(\"~\");\n                this.checkpoints.put(pair[0], Long.parseLong(pair[1]));\n              }\n            }\n          } catch (Exception e) {\n            throw new IOException(e);\n          }\n          break OUTER;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPersistedCheckpoints() throws IOException {\n\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(checkpointCollection);\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    OUTER:\n    for(Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for(Replica replica : replicas) {\n        if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())){\n\n\n          HttpSolrClient httpClient = streamContext.getSolrClientCache().getHttpSolrClient(replica.getCoreUrl());\n          try {\n\n            SolrDocument doc = httpClient.getById(id);\n            if(doc != null) {\n              List<String> checkpoints = (List<String>)doc.getFieldValue(\"checkpoint_ss\");\n              for (String checkpoint : checkpoints) {\n                String[] pair = checkpoint.split(\"~\");\n                this.checkpoints.put(pair[0], Long.parseLong(pair[1]));\n              }\n            }\n          }catch (Exception e) {\n            throw new IOException(e);\n          }\n          break OUTER;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c84df91ca6a2e8d6f26f185663112546a27f6b45","date":1536077760,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","sourceNew":"  private void getPersistedCheckpoints() throws IOException {\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    Slice[] slices = CloudSolrStream.getSlices(checkpointCollection, zkStateReader, false);\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    OUTER:\n    for(Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for(Replica replica : replicas) {\n        if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())){\n          HttpSolrClient httpClient = streamContext.getSolrClientCache().getHttpSolrClient(replica.getCoreUrl());\n          try {\n            SolrDocument doc = httpClient.getById(id);\n            if(doc != null) {\n              List<String> checkpoints = (List<String>)doc.getFieldValue(\"checkpoint_ss\");\n              for (String checkpoint : checkpoints) {\n                String[] pair = checkpoint.split(\"~\");\n                this.checkpoints.put(pair[0], Long.parseLong(pair[1]));\n              }\n            }\n          } catch (Exception e) {\n            throw new IOException(e);\n          }\n          break OUTER;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPersistedCheckpoints() throws IOException {\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    Collection<Slice> slices = CloudSolrStream.getSlices(checkpointCollection, zkStateReader, false);\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    OUTER:\n    for(Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for(Replica replica : replicas) {\n        if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())){\n          HttpSolrClient httpClient = streamContext.getSolrClientCache().getHttpSolrClient(replica.getCoreUrl());\n          try {\n            SolrDocument doc = httpClient.getById(id);\n            if(doc != null) {\n              List<String> checkpoints = (List<String>)doc.getFieldValue(\"checkpoint_ss\");\n              for (String checkpoint : checkpoints) {\n                String[] pair = checkpoint.split(\"~\");\n                this.checkpoints.put(pair[0], Long.parseLong(pair[1]));\n              }\n            }\n          } catch (Exception e) {\n            throw new IOException(e);\n          }\n          break OUTER;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getPersistedCheckpoints().mjava","sourceNew":"  private void getPersistedCheckpoints() throws IOException {\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    Slice[] slices = CloudSolrStream.getSlices(checkpointCollection, zkStateReader, false);\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    OUTER:\n    for(Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for(Replica replica : replicas) {\n        if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())){\n          HttpSolrClient httpClient = streamContext.getSolrClientCache().getHttpSolrClient(replica.getCoreUrl());\n          try {\n            SolrDocument doc = httpClient.getById(id);\n            if(doc != null) {\n              @SuppressWarnings({\"unchecked\"})\n              List<String> checkpoints = (List<String>)doc.getFieldValue(\"checkpoint_ss\");\n              for (String checkpoint : checkpoints) {\n                String[] pair = checkpoint.split(\"~\");\n                this.checkpoints.put(pair[0], Long.parseLong(pair[1]));\n              }\n            }\n          } catch (Exception e) {\n            throw new IOException(e);\n          }\n          break OUTER;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void getPersistedCheckpoints() throws IOException {\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    Slice[] slices = CloudSolrStream.getSlices(checkpointCollection, zkStateReader, false);\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    OUTER:\n    for(Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      for(Replica replica : replicas) {\n        if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())){\n          HttpSolrClient httpClient = streamContext.getSolrClientCache().getHttpSolrClient(replica.getCoreUrl());\n          try {\n            SolrDocument doc = httpClient.getById(id);\n            if(doc != null) {\n              List<String> checkpoints = (List<String>)doc.getFieldValue(\"checkpoint_ss\");\n              for (String checkpoint : checkpoints) {\n                String[] pair = checkpoint.split(\"~\");\n                this.checkpoints.put(pair[0], Long.parseLong(pair[1]));\n              }\n            }\n          } catch (Exception e) {\n            throw new IOException(e);\n          }\n          break OUTER;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10b9c6c42133576daaccbd79bd04c88511b9caca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c84df91ca6a2e8d6f26f185663112546a27f6b45":["8c969f15cd04d31e520319c619a445ae21f02d72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["10b9c6c42133576daaccbd79bd04c88511b9caca","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["c84df91ca6a2e8d6f26f185663112546a27f6b45"],"8c969f15cd04d31e520319c619a445ae21f02d72":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["10b9c6c42133576daaccbd79bd04c88511b9caca","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["10b9c6c42133576daaccbd79bd04c88511b9caca","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"10b9c6c42133576daaccbd79bd04c88511b9caca":["e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"c84df91ca6a2e8d6f26f185663112546a27f6b45":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["c84df91ca6a2e8d6f26f185663112546a27f6b45","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["8c969f15cd04d31e520319c619a445ae21f02d72","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}