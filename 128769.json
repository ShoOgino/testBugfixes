{"path":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    Set<Object> stopWords = new HashSet<Object>(1);\n    stopWords.add(\"on\");\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, stopWords);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    Set<Object> stopWords = new HashSet<Object>(1);\n    stopWords.add(\"on\");\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, stopWords);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, stopWords, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    Set<Object> stopWords = new HashSet<Object>(1);\n    stopWords.add(\"on\");\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, stopWords);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, stopWords, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, stopWords, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, stopWords, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, stopWords, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c7f8e68717c68517265937c911e1ce9f25750247"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"c7f8e68717c68517265937c911e1ce9f25750247":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a3776dccca01c11e7046323cfad46a3b4a471233","91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"c7f8e68717c68517265937c911e1ce9f25750247":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7f8e68717c68517265937c911e1ce9f25750247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}