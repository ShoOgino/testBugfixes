{"path":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testFloatMissingLast().mjava","commits":[{"id":"bf3dbf15ba51a429c1f2bc3239438ff86109a7fd","date":1376934353,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testFloatMissingLast().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests sorting on type float, specifying the missing value should be treated as Float.MAX_VALUE */\n  public void testFloatMissingLast() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatDocValuesField(\"value\", -1.3F));\n    doc.add(newStringField(\"value\", \"-1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatDocValuesField(\"value\", 4.2F));\n    doc.add(newStringField(\"value\", \"4.2\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sortField = new SortField(\"value\", SortField.Type.FLOAT);\n    sortField.setMissingValue(Float.MAX_VALUE);\n    Sort sort = new Sort(sortField);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // null is treated as Float.MAX_VALUE\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testFloatMissingLast().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests sorting on type float, specifying the missing value should be treated as Float.MAX_VALUE */\n  public void testFloatMissingLast() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatDocValuesField(\"value\", -1.3F));\n    doc.add(newStringField(\"value\", \"-1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatDocValuesField(\"value\", 4.2F));\n    doc.add(newStringField(\"value\", \"4.2\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sortField = new SortField(\"value\", SortField.Type.FLOAT);\n    sortField.setMissingValue(Float.MAX_VALUE);\n    Sort sort = new Sort(sortField);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // null is treated as Float.MAX_VALUE\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testFloatMissingLast().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests sorting on type float, specifying the missing value should be treated as Float.MAX_VALUE */\n  public void testFloatMissingLast() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatDocValuesField(\"value\", -1.3F));\n    doc.add(newStringField(\"value\", \"-1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatDocValuesField(\"value\", 4.2F));\n    doc.add(newStringField(\"value\", \"4.2\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sortField = new SortField(\"value\", SortField.Type.FLOAT);\n    sortField.setMissingValue(Float.MAX_VALUE);\n    Sort sort = new Sort(sortField);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // null is treated as Float.MAX_VALUE\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testFloatMissingLast().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testFloatMissingLast().mjava","sourceNew":"  /** Tests sorting on type float, specifying the missing value should be treated as Float.MAX_VALUE */\n  public void testFloatMissingLast() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatDocValuesField(\"value\", -1.3F));\n    doc.add(newStringField(\"value\", \"-1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatDocValuesField(\"value\", 4.2F));\n    doc.add(newStringField(\"value\", \"4.2\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sortField = new SortField(\"value\", SortField.Type.FLOAT);\n    sortField.setMissingValue(Float.MAX_VALUE);\n    Sort sort = new Sort(sortField);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // null is treated as Float.MAX_VALUE\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type float, specifying the missing value should be treated as Float.MAX_VALUE */\n  public void testFloatMissingLast() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatDocValuesField(\"value\", -1.3F));\n    doc.add(newStringField(\"value\", \"-1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatDocValuesField(\"value\", 4.2F));\n    doc.add(newStringField(\"value\", \"4.2\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sortField = new SortField(\"value\", SortField.Type.FLOAT);\n    sortField.setMissingValue(Float.MAX_VALUE);\n    Sort sort = new Sort(sortField);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // null is treated as Float.MAX_VALUE\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testFloatMissingLast().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testFloatMissingLast().mjava","sourceNew":"  /** Tests sorting on type float, specifying the missing value should be treated as Float.MAX_VALUE */\n  public void testFloatMissingLast() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatField(\"value\", -1.3f, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatField(\"value\", 4.2f, Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.FLOAT));\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sortField = new SortField(\"value\", SortField.Type.FLOAT);\n    sortField.setMissingValue(Float.MAX_VALUE);\n    Sort sort = new Sort(sortField);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // null is treated as Float.MAX_VALUE\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type float, specifying the missing value should be treated as Float.MAX_VALUE */\n  public void testFloatMissingLast() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatDocValuesField(\"value\", -1.3F));\n    doc.add(newStringField(\"value\", \"-1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatDocValuesField(\"value\", 4.2F));\n    doc.add(newStringField(\"value\", \"4.2\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sortField = new SortField(\"value\", SortField.Type.FLOAT);\n    sortField.setMissingValue(Float.MAX_VALUE);\n    Sort sort = new Sort(sortField);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // null is treated as Float.MAX_VALUE\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testFloatMissingLast().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testFloatMissingLast().mjava","sourceNew":"  /** Tests sorting on type float, specifying the missing value should be treated as Float.MAX_VALUE */\n  public void testFloatMissingLast() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatField(\"value\", -1.3f, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatField(\"value\", 4.2f, Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.FLOAT));\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sortField = new SortField(\"value\", SortField.Type.FLOAT);\n    sortField.setMissingValue(Float.MAX_VALUE);\n    Sort sort = new Sort(sortField);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // null is treated as Float.MAX_VALUE\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type float, specifying the missing value should be treated as Float.MAX_VALUE */\n  public void testFloatMissingLast() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatDocValuesField(\"value\", -1.3F));\n    doc.add(newStringField(\"value\", \"-1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatDocValuesField(\"value\", 4.2F));\n    doc.add(newStringField(\"value\", \"4.2\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sortField = new SortField(\"value\", SortField.Type.FLOAT);\n    sortField.setMissingValue(Float.MAX_VALUE);\n    Sort sort = new Sort(sortField);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // null is treated as Float.MAX_VALUE\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testFloatMissingLast().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testFloatMissingLast().mjava","sourceNew":"  /** Tests sorting on type float, specifying the missing value should be treated as Float.MAX_VALUE */\n  public void testFloatMissingLast() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatField(\"value\", -1.3f, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatField(\"value\", 4.2f, Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(), \n                     Collections.singletonMap(\"value\", Type.FLOAT));\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sortField = new SortField(\"value\", SortField.Type.FLOAT);\n    sortField.setMissingValue(Float.MAX_VALUE);\n    Sort sort = new Sort(sortField);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // null is treated as Float.MAX_VALUE\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type float, specifying the missing value should be treated as Float.MAX_VALUE */\n  public void testFloatMissingLast() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatDocValuesField(\"value\", -1.3F));\n    doc.add(newStringField(\"value\", \"-1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FloatDocValuesField(\"value\", 4.2F));\n    doc.add(newStringField(\"value\", \"4.2\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    SortField sortField = new SortField(\"value\", SortField.Type.FLOAT);\n    sortField.setMissingValue(Float.MAX_VALUE);\n    Sort sort = new Sort(sortField);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // null is treated as Float.MAX_VALUE\n    assertEquals(\"-1.3\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4.2\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bf3dbf15ba51a429c1f2bc3239438ff86109a7fd"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"bf3dbf15ba51a429c1f2bc3239438ff86109a7fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","bf3dbf15ba51a429c1f2bc3239438ff86109a7fd"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"bf3dbf15ba51a429c1f2bc3239438ff86109a7fd":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}