{"path":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").storePayloads);\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").storePayloads);\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(IndexReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", TextField.TYPE_UNSTORED));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newField(\"f1\", \"This field has no payloads\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f2\", \"This field has payloads in all docs\", TextField.TYPE_UNSTORED));\n        d.add(newField(\"f3\", \"This field has payloads in some docs\", TextField.TYPE_UNSTORED));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4","53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68f4ad0129ad3f60268f3df42c238366082da936","date":1341666620,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(\"UTF-8\"), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(\"UTF-8\"), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(\"UTF-8\"), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(\"UTF-8\"), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(\"UTF-8\"), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(\"UTF-8\"), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(\"UTF-8\"), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(\"UTF-8\"), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(\"UTF-8\"), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(\"UTF-8\"), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(\"UTF-8\"), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(\"UTF-8\"), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(\"UTF-8\"), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(\"UTF-8\"), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(\"UTF-8\"), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(\"UTF-8\"), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(\"UTF-8\"), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(\"UTF-8\"), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.shutdown();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.shutdown();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.shutdown();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig(analyzer)\n                                        .setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.shutdown();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.shutdown();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,\n            analyzer).setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.shutdown();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig(analyzer)\n                                        .setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.shutdown();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig(analyzer)\n                                        .setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.shutdown();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","date":1422781929,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"  // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n  // payload bit in the FieldInfo\n  public void testPayloadFieldBit() throws Exception {\n    Directory ram = newDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(analyzer));\n    Document d = new Document();\n    // this field won't have any payloads\n    d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n    // this field will have payloads in all docs, however not for all term positions,\n    // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n    // even if only some term positions have payloads\n    d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n    d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n    // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n    // enabled in only some documents\n    d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n    // only add payload data for field f2\n    analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n    writer.addDocument(d);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n    assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n    assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n    reader.close();\n        \n    // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n    // enabled payloads for that field\n    analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n    writer = new IndexWriter(ram, newIndexWriterConfig(analyzer)\n                             .setOpenMode(OpenMode.CREATE));\n    d = new Document();\n    d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n    d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n    d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n    d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n    // add payload data for field f2 and f3\n    analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n    analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 3);\n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    fi = reader.getFieldInfos();\n    assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n    assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n    assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"    // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n    // payload bit in the FieldInfo\n    public void testPayloadFieldBit() throws Exception {\n        Directory ram = newDirectory();\n        PayloadAnalyzer analyzer = new PayloadAnalyzer();\n        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(analyzer));\n        Document d = new Document();\n        // this field won't have any payloads\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        // this field will have payloads in all docs, however not for all term positions,\n        // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n        // even if only some term positions have payloads\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n        // enabled in only some documents\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // only add payload data for field f2\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        writer.addDocument(d);\n        // flush\n        writer.close();\n\n      SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        FieldInfos fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        \n        // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n        // enabled payloads for that field\n        analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n        writer = new IndexWriter(ram, newIndexWriterConfig(analyzer)\n                                        .setOpenMode(OpenMode.CREATE));\n        d = new Document();\n        d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n        d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n        // add payload data for field f2 and f3\n        analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n        analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 3);\n        writer.addDocument(d);\n\n        // force merge\n        writer.forceMerge(1);\n        // flush\n        writer.close();\n\n      reader = getOnlySegmentReader(DirectoryReader.open(ram));\n        fi = reader.getFieldInfos();\n        assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n        assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n        reader.close();\n        ram.close();\n    }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayloadFieldBit().mjava","sourceNew":"  // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n  // payload bit in the FieldInfo\n  public void testPayloadFieldBit() throws Exception {\n    Directory ram = newDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(analyzer));\n    Document d = new Document();\n    // this field won't have any payloads\n    d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n    // this field will have payloads in all docs, however not for all term positions,\n    // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n    // even if only some term positions have payloads\n    d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n    d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n    // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n    // enabled in only some documents\n    d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n    // only add payload data for field f2\n    analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n    writer.addDocument(d);\n    // flush\n    writer.close();\n\n    LeafReader reader = getOnlyLeafReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n    assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n    assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n    reader.close();\n        \n    // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n    // enabled payloads for that field\n    analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n    writer = new IndexWriter(ram, newIndexWriterConfig(analyzer)\n                             .setOpenMode(OpenMode.CREATE));\n    d = new Document();\n    d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n    d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n    d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n    d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n    // add payload data for field f2 and f3\n    analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n    analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 3);\n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    reader = getOnlyLeafReader(DirectoryReader.open(ram));\n    fi = reader.getFieldInfos();\n    assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n    assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n    assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter and SegmentMerger correctly enable the\n  // payload bit in the FieldInfo\n  public void testPayloadFieldBit() throws Exception {\n    Directory ram = newDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(analyzer));\n    Document d = new Document();\n    // this field won't have any payloads\n    d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n    // this field will have payloads in all docs, however not for all term positions,\n    // so this field is used to check if the DocumentWriter correctly enables the payloads bit\n    // even if only some term positions have payloads\n    d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n    d.add(newTextField(\"f2\", \"This field has payloads in all docs NO PAYLOAD\", Field.Store.NO));\n    // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads \n    // enabled in only some documents\n    d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n    // only add payload data for field f2\n    analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n    writer.addDocument(d);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n    assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n    assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n    reader.close();\n        \n    // now we add another document which has payloads for field f3 and verify if the SegmentMerger\n    // enabled payloads for that field\n    analyzer = new PayloadAnalyzer(); // Clear payload state for each field\n    writer = new IndexWriter(ram, newIndexWriterConfig(analyzer)\n                             .setOpenMode(OpenMode.CREATE));\n    d = new Document();\n    d.add(newTextField(\"f1\", \"This field has no payloads\", Field.Store.NO));\n    d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n    d.add(newTextField(\"f2\", \"This field has payloads in all docs\", Field.Store.NO));\n    d.add(newTextField(\"f3\", \"This field has payloads in some docs\", Field.Store.NO));\n    // add payload data for field f2 and f3\n    analyzer.setPayloadData(\"f2\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 1);\n    analyzer.setPayloadData(\"f3\", \"somedata\".getBytes(StandardCharsets.UTF_8), 0, 3);\n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    fi = reader.getFieldInfos();\n    assertFalse(\"Payload field bit should not be set.\", fi.fieldInfo(\"f1\").hasPayloads());\n    assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f2\").hasPayloads());\n    assertTrue(\"Payload field bit should be set.\", fi.fieldInfo(\"f3\").hasPayloads());\n    reader.close();\n    ram.close();\n  }\n\n","bugFix":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["2acf500f78aa12b92e371fd89c719291986b6b90","7d89d7e4e5101347833eea558851bf4209218619"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68f4ad0129ad3f60268f3df42c238366082da936":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"2acf500f78aa12b92e371fd89c719291986b6b90":["04f07771a2a7dd3a395700665ed839c3dae2def2","68f4ad0129ad3f60268f3df42c238366082da936"],"7d89d7e4e5101347833eea558851bf4209218619":["2acf500f78aa12b92e371fd89c719291986b6b90"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"46d8ada1fff8d18cb197c38c7983225162599948":["04f07771a2a7dd3a395700665ed839c3dae2def2","2acf500f78aa12b92e371fd89c719291986b6b90"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["04f07771a2a7dd3a395700665ed839c3dae2def2","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7d89d7e4e5101347833eea558851bf4209218619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"68f4ad0129ad3f60268f3df42c238366082da936":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["68f4ad0129ad3f60268f3df42c238366082da936","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}