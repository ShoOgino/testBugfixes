{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","commits":[{"id":"e3a73b15d807e41306466aec106b4cb85b8d5335","date":1326993385,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3a73b15d807e41306466aec106b4cb85b8d5335"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3a73b15d807e41306466aec106b4cb85b8d5335","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fd92b8bcc88e969302510acf77bd6970da3994c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}