{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeStringUnion(Collection[BytesRef]).mjava","commits":[{"id":"8d94feb02e9c604630d8a6758abcb40cbfa91f5d","date":1340964157,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeStringUnion(Collection[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a new (deterministic and minimal) automaton that accepts the union\n   * of the given collection of {@link BytesRef}s representing UTF-8 encoded\n   * strings.\n   * \n   * @param utf8Strings\n   *          The input strings, UTF-8 encoded. The collection must be in sorted\n   *          order.\n   * \n   * @return An {@link Automaton} accepting all input strings. The resulting\n   *         automaton is codepoint based (full unicode codepoints on\n   *         transitions).\n   */\n  public static Automaton makeStringUnion(Collection<BytesRef> utf8Strings) {\n    if (utf8Strings.isEmpty()) {\n      return makeEmpty();\n    } else {\n      return DaciukMihovAutomatonBuilder.build(utf8Strings);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeStringUnion(Collection[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a new (deterministic and minimal) automaton that accepts the union\n   * of the given collection of {@link BytesRef}s representing UTF-8 encoded\n   * strings.\n   * \n   * @param utf8Strings\n   *          The input strings, UTF-8 encoded. The collection must be in sorted\n   *          order.\n   * \n   * @return An {@link Automaton} accepting all input strings. The resulting\n   *         automaton is codepoint based (full unicode codepoints on\n   *         transitions).\n   */\n  public static Automaton makeStringUnion(Collection<BytesRef> utf8Strings) {\n    if (utf8Strings.isEmpty()) {\n      return makeEmpty();\n    } else {\n      return DaciukMihovAutomatonBuilder.build(utf8Strings);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeStringUnion(Collection[BytesRef]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a new (deterministic and minimal) automaton that accepts the union\n   * of the given collection of {@link BytesRef}s representing UTF-8 encoded\n   * strings.\n   * \n   * @param utf8Strings\n   *          The input strings, UTF-8 encoded. The collection must be in sorted\n   *          order.\n   * \n   * @return An {@link Automaton} accepting all input strings. The resulting\n   *         automaton is codepoint based (full unicode codepoints on\n   *         transitions).\n   */\n  public static Automaton makeStringUnion(Collection<BytesRef> utf8Strings) {\n    if (utf8Strings.isEmpty()) {\n      return makeEmpty();\n    } else {\n      return DaciukMihovAutomatonBuilder.build(utf8Strings);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeStringUnion(Collection[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeStringUnion(Collection[BytesRef]).mjava","sourceNew":"  /**\n   * Returns a new (deterministic and minimal) automaton that accepts the union\n   * of the given collection of {@link BytesRef}s representing UTF-8 encoded\n   * strings.\n   * \n   * @param utf8Strings\n   *          The input strings, UTF-8 encoded. The collection must be in sorted\n   *          order.\n   * \n   * @return An {@link Automaton} accepting all input strings. The resulting\n   *         automaton is codepoint based (full unicode codepoints on\n   *         transitions).\n   */\n  public static Automaton makeStringUnion(Collection<BytesRef> utf8Strings) {\n    if (utf8Strings.isEmpty()) {\n      return makeEmpty();\n    } else {\n      return DaciukMihovAutomatonBuilder.build(utf8Strings);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a new (deterministic and minimal) automaton that accepts the union\n   * of the given collection of {@link BytesRef}s representing UTF-8 encoded\n   * strings.\n   * \n   * @param utf8Strings\n   *          The input strings, UTF-8 encoded. The collection must be in sorted\n   *          order.\n   * \n   * @return An {@link Automaton} accepting all input strings. The resulting\n   *         automaton is codepoint based (full unicode codepoints on\n   *         transitions).\n   */\n  public static Automaton makeStringUnion(Collection<BytesRef> utf8Strings) {\n    if (utf8Strings.isEmpty()) {\n      return makeEmpty();\n    } else {\n      return DaciukMihovAutomatonBuilder.build(utf8Strings);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"5c84485629d80d203608e8975a1139de9933cc38":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["fe33227f6805edab2036cbb80645cc4e2d1fa424","7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}