{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/NRTSuggester#getMaxTopNSearcherQueueSize(int,LeafReader,boolean).mjava","commits":[{"id":"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a","date":1427495869,"type":0,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/NRTSuggester#getMaxTopNSearcherQueueSize(int,LeafReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simple heuristics to try to avoid over-pruning potential suggestions by the\n   * TopNSearcher. Since suggestion entries can be rejected if they belong\n   * to a deleted document, the length of the TopNSearcher queue has to\n   * be increased by some factor, to account for the filtered out suggestions.\n   * This heuristic will try to make the searcher admissible, but the search\n   * can still lead to over-pruning\n   * <p>\n   * If a <code>filter</code> is applied, the queue size is increased by\n   * half the number of live documents.\n   * <p>\n   * The maximum queue size is {@link #MAX_TOP_N_QUEUE_SIZE}\n   */\n  private int getMaxTopNSearcherQueueSize(int num, LeafReader reader, boolean filterEnabled) {\n    double liveDocsRatio = calculateLiveDocRatio(reader.numDocs(), reader.maxDoc());\n    if (liveDocsRatio == -1) {\n      return -1;\n    }\n    long maxQueueSize = num * maxAnalyzedPathsPerOutput;\n    // liveDocRatio can be at most 1.0 (if no docs were deleted)\n    assert liveDocsRatio <= 1.0d;\n    maxQueueSize = (long) (maxQueueSize / liveDocsRatio);\n    if (filterEnabled) {\n      maxQueueSize = maxQueueSize + (reader.numDocs()/2);\n    }\n    return (int) Math.min(MAX_TOP_N_QUEUE_SIZE, maxQueueSize);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/NRTSuggester#getMaxTopNSearcherQueueSize(int,LeafReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simple heuristics to try to avoid over-pruning potential suggestions by the\n   * TopNSearcher. Since suggestion entries can be rejected if they belong\n   * to a deleted document, the length of the TopNSearcher queue has to\n   * be increased by some factor, to account for the filtered out suggestions.\n   * This heuristic will try to make the searcher admissible, but the search\n   * can still lead to over-pruning\n   * <p>\n   * If a <code>filter</code> is applied, the queue size is increased by\n   * half the number of live documents.\n   * <p>\n   * The maximum queue size is {@link #MAX_TOP_N_QUEUE_SIZE}\n   */\n  private int getMaxTopNSearcherQueueSize(int num, LeafReader reader, boolean filterEnabled) {\n    double liveDocsRatio = calculateLiveDocRatio(reader.numDocs(), reader.maxDoc());\n    if (liveDocsRatio == -1) {\n      return -1;\n    }\n    long maxQueueSize = num * maxAnalyzedPathsPerOutput;\n    // liveDocRatio can be at most 1.0 (if no docs were deleted)\n    assert liveDocsRatio <= 1.0d;\n    maxQueueSize = (long) (maxQueueSize / liveDocsRatio);\n    if (filterEnabled) {\n      maxQueueSize = maxQueueSize + (reader.numDocs()/2);\n    }\n    return (int) Math.min(MAX_TOP_N_QUEUE_SIZE, maxQueueSize);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/NRTSuggester#getMaxTopNSearcherQueueSize(int,int,double,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/NRTSuggester#getMaxTopNSearcherQueueSize(int,LeafReader,boolean).mjava","sourceNew":"  /**\n   * Simple heuristics to try to avoid over-pruning potential suggestions by the\n   * TopNSearcher. Since suggestion entries can be rejected if they belong\n   * to a deleted document, the length of the TopNSearcher queue has to\n   * be increased by some factor, to account for the filtered out suggestions.\n   * This heuristic will try to make the searcher admissible, but the search\n   * can still lead to over-pruning\n   * <p>\n   * If a <code>filter</code> is applied, the queue size is increased by\n   * half the number of live documents.\n   * <p>\n   * The maximum queue size is {@link #MAX_TOP_N_QUEUE_SIZE}\n   */\n  private int getMaxTopNSearcherQueueSize(int topN, int numDocs, double liveDocsRatio, boolean filterEnabled) {\n    long maxQueueSize = topN * maxAnalyzedPathsPerOutput;\n    // liveDocRatio can be at most 1.0 (if no docs were deleted)\n    assert liveDocsRatio <= 1.0d;\n    maxQueueSize = (long) (maxQueueSize / liveDocsRatio);\n    if (filterEnabled) {\n      maxQueueSize = maxQueueSize + (numDocs/2);\n    }\n    return (int) Math.min(MAX_TOP_N_QUEUE_SIZE, maxQueueSize);\n  }\n\n","sourceOld":"  /**\n   * Simple heuristics to try to avoid over-pruning potential suggestions by the\n   * TopNSearcher. Since suggestion entries can be rejected if they belong\n   * to a deleted document, the length of the TopNSearcher queue has to\n   * be increased by some factor, to account for the filtered out suggestions.\n   * This heuristic will try to make the searcher admissible, but the search\n   * can still lead to over-pruning\n   * <p>\n   * If a <code>filter</code> is applied, the queue size is increased by\n   * half the number of live documents.\n   * <p>\n   * The maximum queue size is {@link #MAX_TOP_N_QUEUE_SIZE}\n   */\n  private int getMaxTopNSearcherQueueSize(int num, LeafReader reader, boolean filterEnabled) {\n    double liveDocsRatio = calculateLiveDocRatio(reader.numDocs(), reader.maxDoc());\n    if (liveDocsRatio == -1) {\n      return -1;\n    }\n    long maxQueueSize = num * maxAnalyzedPathsPerOutput;\n    // liveDocRatio can be at most 1.0 (if no docs were deleted)\n    assert liveDocsRatio <= 1.0d;\n    maxQueueSize = (long) (maxQueueSize / liveDocsRatio);\n    if (filterEnabled) {\n      maxQueueSize = maxQueueSize + (reader.numDocs()/2);\n    }\n    return (int) Math.min(MAX_TOP_N_QUEUE_SIZE, maxQueueSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c33f6677a2078739058f81eca1df69d12cd62b0":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c33f6677a2078739058f81eca1df69d12cd62b0"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8c33f6677a2078739058f81eca1df69d12cd62b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}