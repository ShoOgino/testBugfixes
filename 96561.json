{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","commits":[{"id":"3cdad2c6b6234338031bcc1f24c001a5ad66f714","date":1296866109,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  _TestUtil.getTempDir(\"trecFeedAllTypes\");\n    _TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong numbre of documents created by osurce!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  _TestUtil.getTempDir(\"trecFeedAllTypes\");\n    _TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong numbre of documents created by osurce!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  _TestUtil.getTempDir(\"trecFeedAllTypes\");\n    _TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong numbre of documents created by osurce!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b3318d714d6f6ef82a202fd047277abb43bf171","date":1300812413,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","sourceNew":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  _TestUtil.getTempDir(\"trecFeedAllTypes\");\n    _TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by osurce!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","sourceOld":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  _TestUtil.getTempDir(\"trecFeedAllTypes\");\n    _TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong numbre of documents created by osurce!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2648fff22de2ac1f8adc14e8c6344049b6a3883d","date":1300816980,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","sourceNew":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  _TestUtil.getTempDir(\"trecFeedAllTypes\");\n    _TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","sourceOld":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  _TestUtil.getTempDir(\"trecFeedAllTypes\");\n    _TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by osurce!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","sourceNew":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  _TestUtil.getTempDir(\"trecFeedAllTypes\");\n    _TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","sourceOld":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  _TestUtil.getTempDir(\"trecFeedAllTypes\");\n    _TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong numbre of documents created by osurce!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","sourceNew":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  _TestUtil.getTempDir(\"trecFeedAllTypes\");\n    _TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","sourceOld":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  _TestUtil.getTempDir(\"trecFeedAllTypes\");\n    _TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong numbre of documents created by osurce!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","sourceNew":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  _TestUtil.getTempDir(\"trecFeedAllTypes\");\n    _TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","sourceOld":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  _TestUtil.getTempDir(\"trecFeedAllTypes\");\n    _TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2648fff22de2ac1f8adc14e8c6344049b6a3883d"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","2648fff22de2ac1f8adc14e8c6344049b6a3883d"],"9b3318d714d6f6ef82a202fd047277abb43bf171":["3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","2648fff22de2ac1f8adc14e8c6344049b6a3883d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2648fff22de2ac1f8adc14e8c6344049b6a3883d":["9b3318d714d6f6ef82a202fd047277abb43bf171"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"9b3318d714d6f6ef82a202fd047277abb43bf171":["2648fff22de2ac1f8adc14e8c6344049b6a3883d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","3cdad2c6b6234338031bcc1f24c001a5ad66f714","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["9b3318d714d6f6ef82a202fd047277abb43bf171","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"2648fff22de2ac1f8adc14e8c6344049b6a3883d":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}