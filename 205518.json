{"path":"solr/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","commits":[{"id":"ec3ba1d2792d1ffb27f73257ac395fb32728705e","date":1275503651,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the \"prefered\" default operator for use by Query Parsers, \n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static Operator getQueryParserDefaultOperator(final IndexSchema sch, \n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? Operator.AND : Operator.OR;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","sourceNew":"  /**\n   * Returns the \"prefered\" default operator for use by Query Parsers, \n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static Operator getQueryParserDefaultOperator(final IndexSchema sch, \n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? Operator.AND : Operator.OR;\n  }\n\n","sourceOld":"  /**\n   * Returns the \"prefered\" default operator for use by Query Parsers, \n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static Operator getQueryParserDefaultOperator(final IndexSchema sch, \n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? Operator.AND : Operator.OR;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","sourceNew":"  /**\n   * Returns the \"prefered\" default operator for use by Query Parsers, \n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static Operator getQueryParserDefaultOperator(final IndexSchema sch, \n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? Operator.AND : Operator.OR;\n  }\n\n","sourceOld":"  /**\n   * Returns the \"prefered\" default operator for use by Query Parsers, \n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static Operator getQueryParserDefaultOperator(final IndexSchema sch, \n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? Operator.AND : Operator.OR;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing#getQueryParserDefaultOperator(IndexSchema,String).mjava","sourceNew":"  /**\n   * Returns the \"prefered\" default operator for use by Query Parsers, \n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static Operator getQueryParserDefaultOperator(final IndexSchema sch, \n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? Operator.AND : Operator.OR;\n  }\n\n","sourceOld":"  /**\n   * Returns the \"prefered\" default operator for use by Query Parsers, \n   * based on the settings in the IndexSchema which may be overridden using \n   * an optional String override value.\n   *\n   * @see IndexSchema#getQueryParserDefaultOperator()\n   * @see #OP\n   */\n  public static Operator getQueryParserDefaultOperator(final IndexSchema sch, \n                                                       final String override) {\n    String val = override;\n    if (null == val) val = sch.getQueryParserDefaultOperator();\n    return \"AND\".equals(val) ? Operator.AND : Operator.OR;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["ec3ba1d2792d1ffb27f73257ac395fb32728705e"],"c26f00b574427b55127e869b935845554afde1fa":["ec3ba1d2792d1ffb27f73257ac395fb32728705e","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["ec3ba1d2792d1ffb27f73257ac395fb32728705e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"ec3ba1d2792d1ffb27f73257ac395fb32728705e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec3ba1d2792d1ffb27f73257ac395fb32728705e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ec3ba1d2792d1ffb27f73257ac395fb32728705e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}