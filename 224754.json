{"path":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#computeNextCollTimestamp(Instant,String,TimeZone).mjava","commits":[{"id":"af3e10d8a1fbcc5c79b22f7477e79de467dd326c","date":1515178406,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#computeNextCollTimestamp(Instant,String,TimeZone).mjava","pathOld":"/dev/null","sourceNew":"  /** Computes the timestamp of the next collection given the timestamp of the one before. */\n  public static Instant computeNextCollTimestamp(Instant fromTimestamp, String intervalDateMath, TimeZone intervalTimeZone) {\n    //TODO overload DateMathParser.parseMath to take tz and \"now\"\n    final DateMathParser dateMathParser = new DateMathParser(intervalTimeZone);\n    dateMathParser.setNow(Date.from(fromTimestamp));\n    final Instant nextCollTimestamp;\n    try {\n      nextCollTimestamp = dateMathParser.parseMath(intervalDateMath).toInstant();\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Invalid Date Math String:'\" + intervalDateMath +'\\'', e);\n    }\n    assert nextCollTimestamp.isAfter(fromTimestamp);\n    return nextCollTimestamp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#computeNextCollTimestamp(Instant,String,TimeZone).mjava","pathOld":"/dev/null","sourceNew":"  /** Computes the timestamp of the next collection given the timestamp of the one before. */\n  public static Instant computeNextCollTimestamp(Instant fromTimestamp, String intervalDateMath, TimeZone intervalTimeZone) {\n    //TODO overload DateMathParser.parseMath to take tz and \"now\"\n    final DateMathParser dateMathParser = new DateMathParser(intervalTimeZone);\n    dateMathParser.setNow(Date.from(fromTimestamp));\n    final Instant nextCollTimestamp;\n    try {\n      nextCollTimestamp = dateMathParser.parseMath(intervalDateMath).toInstant();\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Invalid Date Math String:'\" + intervalDateMath +'\\'', e);\n    }\n    assert nextCollTimestamp.isAfter(fromTimestamp);\n    return nextCollTimestamp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46589ed5cc841861bf6b5e2afc55f718ebcd02a0","date":1516984620,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#computeNextCollTimestamp(Instant,String,TimeZone).mjava","sourceNew":null,"sourceOld":"  /** Computes the timestamp of the next collection given the timestamp of the one before. */\n  public static Instant computeNextCollTimestamp(Instant fromTimestamp, String intervalDateMath, TimeZone intervalTimeZone) {\n    //TODO overload DateMathParser.parseMath to take tz and \"now\"\n    final DateMathParser dateMathParser = new DateMathParser(intervalTimeZone);\n    dateMathParser.setNow(Date.from(fromTimestamp));\n    final Instant nextCollTimestamp;\n    try {\n      nextCollTimestamp = dateMathParser.parseMath(intervalDateMath).toInstant();\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Invalid Date Math String:'\" + intervalDateMath +'\\'', e);\n    }\n    assert nextCollTimestamp.isAfter(fromTimestamp);\n    return nextCollTimestamp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}