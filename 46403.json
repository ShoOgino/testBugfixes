{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#getTDistance(String,String).mjava","commits":[{"id":"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab","date":1324934316,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#getTDistance(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private int getTDistance(String target, String other) {\n    char[] sa;\n    int n;\n    int d[][]; // cost array\n\n    sa = target.toCharArray();\n    n = sa.length;\n    final int m = other.length();\n    d = new int[n+1][m+1];\n    \n    if (n == 0 || m == 0) {\n      if (n == m) {\n        return 0;\n      }\n      else {\n        return Math.max(n, m);\n      }\n    } \n\n    // indexes into strings s and t\n    int i; // iterates through s\n    int j; // iterates through t\n\n    char t_j; // jth character of t\n\n    int cost; // cost\n\n    for (i = 0; i<=n; i++) {\n      d[i][0] = i;\n    }\n    \n    for (j = 0; j<=m; j++) {\n      d[0][j] = j;\n    }\n\n      for (j = 1; j<=m; j++) {\n          t_j = other.charAt(j-1);\n\n          for (i=1; i<=n; i++) {\n              cost = sa[i-1]==t_j ? 0 : 1;\n              // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n              d[i][j] = Math.min(Math.min(d[i-1][j]+1, d[i][j-1]+1), d[i-1][j-1]+cost);\n              // transposition\n              if (i > 1 && j > 1 && target.charAt(i-1) == other.charAt(j-2) && target.charAt(i-2) == other.charAt(j-1)) {\n                d[i][j] = Math.min(d[i][j], d[i-2][j-2] + cost);\n              }\n          }\n      }\n\n      // our last action in the above loop was to switch d and p, so p now\n      // actually has the most recent cost counts\n      return Math.abs(d[n][m]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#getTDistance(String,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#getTDistance(String,String).mjava","sourceNew":"  private int getTDistance(String target, String other) {\n    char[] sa;\n    int n;\n    int d[][]; // cost array\n\n    sa = target.toCharArray();\n    n = sa.length;\n    final int m = other.length();\n    d = new int[n+1][m+1];\n    \n    if (n == 0 || m == 0) {\n      if (n == m) {\n        return 0;\n      }\n      else {\n        return Math.max(n, m);\n      }\n    } \n\n    // indexes into strings s and t\n    int i; // iterates through s\n    int j; // iterates through t\n\n    char t_j; // jth character of t\n\n    int cost; // cost\n\n    for (i = 0; i<=n; i++) {\n      d[i][0] = i;\n    }\n    \n    for (j = 0; j<=m; j++) {\n      d[0][j] = j;\n    }\n\n      for (j = 1; j<=m; j++) {\n          t_j = other.charAt(j-1);\n\n          for (i=1; i<=n; i++) {\n              cost = sa[i-1]==t_j ? 0 : 1;\n              // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n              d[i][j] = Math.min(Math.min(d[i-1][j]+1, d[i][j-1]+1), d[i-1][j-1]+cost);\n              // transposition\n              if (i > 1 && j > 1 && target.charAt(i-1) == other.charAt(j-2) && target.charAt(i-2) == other.charAt(j-1)) {\n                d[i][j] = Math.min(d[i][j], d[i-2][j-2] + cost);\n              }\n          }\n      }\n\n      // our last action in the above loop was to switch d and p, so p now\n      // actually has the most recent cost counts\n      return Math.abs(d[n][m]);\n  }\n\n","sourceOld":"  private int getTDistance(String target, String other) {\n    char[] sa;\n    int n;\n    int d[][]; // cost array\n\n    sa = target.toCharArray();\n    n = sa.length;\n    final int m = other.length();\n    d = new int[n+1][m+1];\n    \n    if (n == 0 || m == 0) {\n      if (n == m) {\n        return 0;\n      }\n      else {\n        return Math.max(n, m);\n      }\n    } \n\n    // indexes into strings s and t\n    int i; // iterates through s\n    int j; // iterates through t\n\n    char t_j; // jth character of t\n\n    int cost; // cost\n\n    for (i = 0; i<=n; i++) {\n      d[i][0] = i;\n    }\n    \n    for (j = 0; j<=m; j++) {\n      d[0][j] = j;\n    }\n\n      for (j = 1; j<=m; j++) {\n          t_j = other.charAt(j-1);\n\n          for (i=1; i<=n; i++) {\n              cost = sa[i-1]==t_j ? 0 : 1;\n              // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n              d[i][j] = Math.min(Math.min(d[i-1][j]+1, d[i][j-1]+1), d[i-1][j-1]+cost);\n              // transposition\n              if (i > 1 && j > 1 && target.charAt(i-1) == other.charAt(j-2) && target.charAt(i-2) == other.charAt(j-1)) {\n                d[i][j] = Math.min(d[i][j], d[i-2][j-2] + cost);\n              }\n          }\n      }\n\n      // our last action in the above loop was to switch d and p, so p now\n      // actually has the most recent cost counts\n      return Math.abs(d[n][m]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab"],"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}