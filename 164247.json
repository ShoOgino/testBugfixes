{"path":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testDeletes(boolean,boolean).mjava","commits":[{"id":"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3","date":1533596209,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testDeletes(boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void testDeletes(boolean dbq, boolean withFailures) throws Exception {\n    final HttpSolrClient solrclient = (HttpSolrClient) clients.get(0);\n    solrclient.commit(true, true);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 0)) {\n      if (withFailures) {\n        streamingClients.setExp(Exp.CONNECT_EXCEPTION);\n      }\n      ArrayList<Node> nodes = new ArrayList<>();\n\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n\n      final AtomicInteger retries = new AtomicInteger();\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      Node retryNode = new StdNode(new ZkCoreNodeProps(nodeProps), \"collection1\", \"shard1\", 5) {\n        @Override\n        public boolean checkRetry(Error err) {\n          streamingClients.setExp(null);\n          retries.incrementAndGet();\n          return super.checkRetry(err);\n        }\n      };\n\n\n      nodes.add(retryNode);\n\n      for (int i = 0 ; i < 5 ; i++) {\n        AddUpdateCommand cmd = new AddUpdateCommand(null);\n        int currentId = id.incrementAndGet();\n        cmd.solrDoc = sdoc(\"id\", currentId);\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(cmd, nodes, params);\n        DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n        if (dbq) {\n          dcmd.setQuery(\"id:\" + currentId);\n        } else {\n          dcmd.setId(String.valueOf(currentId));\n        }\n        cmdDistrib.distribDelete(dcmd, nodes, params, false, null, null);\n      }\n      \n\n      CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n      cmdDistrib.distribCommit(ccmd, nodes, new ModifiableSolrParams());\n      cmdDistrib.finish();\n      \n      int expectedRetryCount = 0;\n      if (withFailures) {\n        if (dbq) {\n          expectedRetryCount = 1; // just the first cmd would be retried\n        } else {\n          expectedRetryCount = 10;\n        }\n      }\n      assertEquals(expectedRetryCount, retries.get());\n\n\n      long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n\n      // we will get java.net.ConnectException which we retry on\n      assertEquals(numFoundBefore, numFoundAfter);\n      assertEquals(0, cmdDistrib.getErrors().size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}