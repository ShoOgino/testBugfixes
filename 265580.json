{"path":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,SolrCore,SelectorParams,FieldNameSelector).mjava","commits":[{"id":"b0a19f093878b8ef6d65992a55f7a565549f30ee","date":1370735567,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,SolrCore,SelectorParams,FieldNameSelector).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,SolrCore,Set[String],Set[String],Collection[String],Collection[Pattern],FieldNameSelector).mjava","sourceNew":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init \n   * code.  This may be useful for Factories that wish to define default \n   * selectors in similar terms to what the configuration would look like.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final SolrCore core,\n     final SelectorParams params,\n     final FieldNameSelector defSelector) {\n\n    if (params.noSelectorsSpecified()) {\n      return defSelector;\n    }\n    \n    return new ConfigurableFieldNameSelector(loader, core, params); \n  }\n\n","sourceOld":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init \n   * code.  This may be useful for Factories that wish to define default \n   * selectors in similar terms to what the configuration would look like.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final SolrCore core,\n     final Set<String> fields,\n     final Set<String> typeNames,\n     final Collection<String> typeClasses,\n     final Collection<Pattern> regexes,\n     final FieldNameSelector defSelector) {\n    \n    final Collection<Class> classes \n      = new ArrayList<Class>(typeClasses.size());\n    \n    for (String t : typeClasses) {\n      try {\n        classes.add(loader.findClass(t, Object.class));\n      } catch (Exception e) {\n        throw new SolrException(SERVER_ERROR,\n                                \"Can't resolve typeClass: \" + t, e);\n      }\n    }\n    \n    if (classes.isEmpty() && \n        typeNames.isEmpty() && \n        regexes.isEmpty() && \n        fields.isEmpty()) {\n      return defSelector;\n    }\n    \n    return new ConfigurableFieldNameSelector(core, fields, typeNames, classes, regexes); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f13b9d4c228e77327b284419c8cafd16913a7a19","date":1405437837,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,SolrCore,SelectorParams,FieldNameSelector).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,SolrCore,SelectorParams,FieldNameSelector).mjava","sourceNew":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init\n   * code.  This may be useful for Factories that wish to define default\n   * selectors in similar terms to what the configuration would look like.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final SolrCore core,\n     final SelectorParams params,\n     final FieldNameSelector defSelector) {\n\n    if (params.noSelectorsSpecified()) {\n      return defSelector;\n    }\n\n    final ConfigurableFieldNameSelectorHelper helper =\n      new ConfigurableFieldNameSelectorHelper(loader, params);\n    return new FieldNameSelector() {\n      @Override\n      public boolean shouldMutate(String fieldName) {\n        return helper.shouldMutateBasedOnSchema(fieldName, core.getLatestSchema());\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init \n   * code.  This may be useful for Factories that wish to define default \n   * selectors in similar terms to what the configuration would look like.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final SolrCore core,\n     final SelectorParams params,\n     final FieldNameSelector defSelector) {\n\n    if (params.noSelectorsSpecified()) {\n      return defSelector;\n    }\n    \n    return new ConfigurableFieldNameSelector(loader, core, params); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5ad8cb078811acf9ef38ece78171f1bfe5786de","date":1474538499,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,SolrCore,SelectorParams,FieldNameSelector).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,SolrCore,SelectorParams,FieldNameSelector).mjava","sourceNew":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init\n   * code.  This may be useful for Factories that wish to define default\n   * selectors in similar terms to what the configuration would look like.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final SolrCore core,\n     final SelectorParams params,\n     final FieldNameSelector defSelector) {\n\n    if (params.noSelectorsSpecified()) {\n      return defSelector;\n    }\n\n    final ConfigurableFieldNameSelectorHelper helper =\n      new ConfigurableFieldNameSelectorHelper(loader, params);\n    return fieldName -> helper.shouldMutateBasedOnSchema(fieldName, core.getLatestSchema());\n  }\n\n","sourceOld":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init\n   * code.  This may be useful for Factories that wish to define default\n   * selectors in similar terms to what the configuration would look like.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final SolrCore core,\n     final SelectorParams params,\n     final FieldNameSelector defSelector) {\n\n    if (params.noSelectorsSpecified()) {\n      return defSelector;\n    }\n\n    final ConfigurableFieldNameSelectorHelper helper =\n      new ConfigurableFieldNameSelectorHelper(loader, params);\n    return new FieldNameSelector() {\n      @Override\n      public boolean shouldMutate(String fieldName) {\n        return helper.shouldMutateBasedOnSchema(fieldName, core.getLatestSchema());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,SolrCore,SelectorParams,FieldNameSelector).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,SolrCore,SelectorParams,FieldNameSelector).mjava","sourceNew":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init\n   * code.  This may be useful for Factories that wish to define default\n   * selectors in similar terms to what the configuration would look like.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final SolrCore core,\n     final SelectorParams params,\n     final FieldNameSelector defSelector) {\n\n    if (params.noSelectorsSpecified()) {\n      return defSelector;\n    }\n\n    final ConfigurableFieldNameSelectorHelper helper =\n      new ConfigurableFieldNameSelectorHelper(loader, params);\n    return fieldName -> helper.shouldMutateBasedOnSchema(fieldName, core.getLatestSchema());\n  }\n\n","sourceOld":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init\n   * code.  This may be useful for Factories that wish to define default\n   * selectors in similar terms to what the configuration would look like.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final SolrCore core,\n     final SelectorParams params,\n     final FieldNameSelector defSelector) {\n\n    if (params.noSelectorsSpecified()) {\n      return defSelector;\n    }\n\n    final ConfigurableFieldNameSelectorHelper helper =\n      new ConfigurableFieldNameSelectorHelper(loader, params);\n    return new FieldNameSelector() {\n      @Override\n      public boolean shouldMutate(String fieldName) {\n        return helper.shouldMutateBasedOnSchema(fieldName, core.getLatestSchema());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,SolrCore,SelectorParams,FieldNameSelector).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,SolrCore,SelectorParams,FieldNameSelector).mjava","sourceNew":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init\n   * code.  This may be useful for Factories that wish to define default\n   * selectors in similar terms to what the configuration would look like.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final SolrCore core,\n     final SelectorParams params,\n     final FieldNameSelector defSelector) {\n\n    if (params.noSelectorsSpecified()) {\n      return defSelector;\n    }\n\n    final ConfigurableFieldNameSelectorHelper helper =\n      new ConfigurableFieldNameSelectorHelper(loader, params);\n    return fieldName -> helper.shouldMutateBasedOnSchema(fieldName, core.getLatestSchema());\n  }\n\n","sourceOld":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init\n   * code.  This may be useful for Factories that wish to define default\n   * selectors in similar terms to what the configuration would look like.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final SolrCore core,\n     final SelectorParams params,\n     final FieldNameSelector defSelector) {\n\n    if (params.noSelectorsSpecified()) {\n      return defSelector;\n    }\n\n    final ConfigurableFieldNameSelectorHelper helper =\n      new ConfigurableFieldNameSelectorHelper(loader, params);\n    return new FieldNameSelector() {\n      @Override\n      public boolean shouldMutate(String fieldName) {\n        return helper.shouldMutateBasedOnSchema(fieldName, core.getLatestSchema());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f13b9d4c228e77327b284419c8cafd16913a7a19","c5ad8cb078811acf9ef38ece78171f1bfe5786de"],"b0a19f093878b8ef6d65992a55f7a565549f30ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5ad8cb078811acf9ef38ece78171f1bfe5786de":["f13b9d4c228e77327b284419c8cafd16913a7a19"],"f13b9d4c228e77327b284419c8cafd16913a7a19":["b0a19f093878b8ef6d65992a55f7a565549f30ee"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f13b9d4c228e77327b284419c8cafd16913a7a19","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b0a19f093878b8ef6d65992a55f7a565549f30ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0a19f093878b8ef6d65992a55f7a565549f30ee":["f13b9d4c228e77327b284419c8cafd16913a7a19"],"c5ad8cb078811acf9ef38ece78171f1bfe5786de":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f13b9d4c228e77327b284419c8cafd16913a7a19":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","c5ad8cb078811acf9ef38ece78171f1bfe5786de","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}