{"path":"lucene/facet/src/java/org/apache/lucene/util/encoding/VInt8#decode(BytesRef).mjava","commits":[{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/VInt8#decode(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Decodes an int from the given bytes, starting at {@link BytesRef#offset}.\n   * Returns the decoded bytes and updates {@link BytesRef#offset}.\n   */\n  public static int decode(BytesRef bytes) {\n    /*\n    This is the original code of this method, but a Hotspot bug\n    corrupted the for-loop of DataInput.readVInt() (see LUCENE-2975)\n    so the loop was unwounded here too, to be on the safe side\n    int value = 0;\n    while (true) {\n      byte first = bytes.bytes[bytes.offset++];\n      value |= first & 0x7F;\n      if ((first & 0x80) == 0) {\n        return value;\n      }\n      value <<= 7;\n    }\n    */\n\n    // byte 1\n    byte b = bytes.bytes[bytes.offset++];\n    if (b >= 0) return b;\n    \n    // byte 2\n    int value = b & 0x7F;\n    b = bytes.bytes[bytes.offset++];\n    value = (value << 7) | b & 0x7F;\n    if (b >= 0) return value;\n    \n    // byte 3\n    b = bytes.bytes[bytes.offset++];\n    value = (value << 7) | b & 0x7F;\n    if (b >= 0) return value;\n    \n    // byte 4\n    b = bytes.bytes[bytes.offset++];\n    value = (value << 7) | b & 0x7F;\n    if (b >= 0) return value;\n    \n    // byte 5\n    b = bytes.bytes[bytes.offset++];\n    return (value << 7) | b & 0x7F;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/VInt8#decode(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Decodes an int from the given bytes, starting at {@link BytesRef#offset}.\n   * Returns the decoded bytes and updates {@link BytesRef#offset}.\n   */\n  public static int decode(BytesRef bytes) {\n    /*\n    This is the original code of this method, but a Hotspot bug\n    corrupted the for-loop of DataInput.readVInt() (see LUCENE-2975)\n    so the loop was unwounded here too, to be on the safe side\n    int value = 0;\n    while (true) {\n      byte first = bytes.bytes[bytes.offset++];\n      value |= first & 0x7F;\n      if ((first & 0x80) == 0) {\n        return value;\n      }\n      value <<= 7;\n    }\n    */\n\n    // byte 1\n    byte b = bytes.bytes[bytes.offset++];\n    if (b >= 0) return b;\n    \n    // byte 2\n    int value = b & 0x7F;\n    b = bytes.bytes[bytes.offset++];\n    value = (value << 7) | b & 0x7F;\n    if (b >= 0) return value;\n    \n    // byte 3\n    b = bytes.bytes[bytes.offset++];\n    value = (value << 7) | b & 0x7F;\n    if (b >= 0) return value;\n    \n    // byte 4\n    b = bytes.bytes[bytes.offset++];\n    value = (value << 7) | b & 0x7F;\n    if (b >= 0) return value;\n    \n    // byte 5\n    b = bytes.bytes[bytes.offset++];\n    return (value << 7) | b & 0x7F;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad883775f8b169218a8da5ffeb7ae26459443936","date":1358342713,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/util/encoding/VInt8#decode(BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Decodes an int from the given bytes, starting at {@link BytesRef#offset}.\n   * Returns the decoded bytes and updates {@link BytesRef#offset}.\n   */\n  public static int decode(BytesRef bytes) {\n    /*\n    This is the original code of this method, but a Hotspot bug\n    corrupted the for-loop of DataInput.readVInt() (see LUCENE-2975)\n    so the loop was unwounded here too, to be on the safe side\n    int value = 0;\n    while (true) {\n      byte first = bytes.bytes[bytes.offset++];\n      value |= first & 0x7F;\n      if ((first & 0x80) == 0) {\n        return value;\n      }\n      value <<= 7;\n    }\n    */\n\n    // byte 1\n    byte b = bytes.bytes[bytes.offset++];\n    if (b >= 0) return b;\n    \n    // byte 2\n    int value = b & 0x7F;\n    b = bytes.bytes[bytes.offset++];\n    value = (value << 7) | b & 0x7F;\n    if (b >= 0) return value;\n    \n    // byte 3\n    b = bytes.bytes[bytes.offset++];\n    value = (value << 7) | b & 0x7F;\n    if (b >= 0) return value;\n    \n    // byte 4\n    b = bytes.bytes[bytes.offset++];\n    value = (value << 7) | b & 0x7F;\n    if (b >= 0) return value;\n    \n    // byte 5\n    b = bytes.bytes[bytes.offset++];\n    return (value << 7) | b & 0x7F;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/util/encoding/VInt8#decode(BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Decodes an int from the given bytes, starting at {@link BytesRef#offset}.\n   * Returns the decoded bytes and updates {@link BytesRef#offset}.\n   */\n  public static int decode(BytesRef bytes) {\n    /*\n    This is the original code of this method, but a Hotspot bug\n    corrupted the for-loop of DataInput.readVInt() (see LUCENE-2975)\n    so the loop was unwounded here too, to be on the safe side\n    int value = 0;\n    while (true) {\n      byte first = bytes.bytes[bytes.offset++];\n      value |= first & 0x7F;\n      if ((first & 0x80) == 0) {\n        return value;\n      }\n      value <<= 7;\n    }\n    */\n\n    // byte 1\n    byte b = bytes.bytes[bytes.offset++];\n    if (b >= 0) return b;\n    \n    // byte 2\n    int value = b & 0x7F;\n    b = bytes.bytes[bytes.offset++];\n    value = (value << 7) | b & 0x7F;\n    if (b >= 0) return value;\n    \n    // byte 3\n    b = bytes.bytes[bytes.offset++];\n    value = (value << 7) | b & 0x7F;\n    if (b >= 0) return value;\n    \n    // byte 4\n    b = bytes.bytes[bytes.offset++];\n    value = (value << 7) | b & 0x7F;\n    if (b >= 0) return value;\n    \n    // byte 5\n    b = bytes.bytes[bytes.offset++];\n    return (value << 7) | b & 0x7F;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4015cd39dff8d4dec562d909f9766debac53aa6":["4e6354dd7c71fe122926fc53d7d29f715b1283db","ad883775f8b169218a8da5ffeb7ae26459443936"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad883775f8b169218a8da5ffeb7ae26459443936"],"ad883775f8b169218a8da5ffeb7ae26459443936":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"]},"commit2Childs":{"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["4e6354dd7c71fe122926fc53d7d29f715b1283db","ad883775f8b169218a8da5ffeb7ae26459443936"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"ad883775f8b169218a8da5ffeb7ae26459443936":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}