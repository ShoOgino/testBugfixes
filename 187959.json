{"path":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","commits":[{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","pathOld":"/dev/null","sourceNew":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final AtomicLong trackBytes = new AtomicLong(0);\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\");\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7","date":1309190785,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","sourceNew":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final AtomicLong trackBytes = new AtomicLong(0);\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs);\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final AtomicLong trackBytes = new AtomicLong(0);\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\");\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","pathOld":"/dev/null","sourceNew":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final AtomicLong trackBytes = new AtomicLong(0);\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs);\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","pathOld":"/dev/null","sourceNew":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final AtomicLong trackBytes = new AtomicLong(0);\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","sourceNew":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final AtomicLong trackBytes = new AtomicLong(0);\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final AtomicLong trackBytes = new AtomicLong(0);\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs);\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","sourceNew":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final AtomicLong trackBytes = new AtomicLong(0);\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final AtomicLong trackBytes = new AtomicLong(0);\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs);\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17cc1e690c31c800f83860fbfd0423462962ef01","date":1314789725,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","sourceNew":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final AtomicLong trackBytes = new AtomicLong(0);\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","sourceNew":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","sourceNew":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = getEnum(r);\n        assertEquals(type, iEnum.type());\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          if (i < NUM_VALUES) {\n            assertEquals(values[i], ints.get());\n          } else {\n            assertEquals(0, ints.get());\n          }\n        }\n        assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(Type,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","sourceNew":"  private void testInts(Type type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(Type,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(ValueType,int).mjava","sourceNew":"  private void testInts(Type type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(ValueType type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      IndexDocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["e128967bca58657bc0039d4bfe631e63e81f1977","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"17cc1e690c31c800f83860fbfd0423462962ef01":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["17cc1e690c31c800f83860fbfd0423462962ef01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["e128967bca58657bc0039d4bfe631e63e81f1977"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["2553b00f699380c64959ccb27991289aae87be2e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"e128967bca58657bc0039d4bfe631e63e81f1977":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"]},"commit2Childs":{"2553b00f699380c64959ccb27991289aae87be2e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17cc1e690c31c800f83860fbfd0423462962ef01":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["e128967bca58657bc0039d4bfe631e63e81f1977"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["17cc1e690c31c800f83860fbfd0423462962ef01","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"e128967bca58657bc0039d4bfe631e63e81f1977":["d638301ad1cfcae567b681b893bc8781f0ee48a5","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}