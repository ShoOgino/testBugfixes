{"path":"src/test/org/apache/lucene/index/TestDeletionPolicy.KeepLastNDeletionPolicy#doDeletes(List,boolean).mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy.KeepLastNDeletionPolicy#doDeletes(List,boolean).mjava","pathOld":"/dev/null","sourceNew":"    private void doDeletes(List commits, boolean isCommit) {\n\n      // Assert that we really are only called for each new\n      // commit:\n      if (isCommit) {\n        String fileName = ((IndexCommitPoint) commits.get(commits.size()-1)).getSegmentsFileName();\n        if (seen.contains(fileName)) {\n          throw new RuntimeException(\"onCommit was called twice on the same commit point: \" + fileName);\n        }\n        seen.add(fileName);\n        numOnCommit++;\n      }\n      int size = commits.size();\n      for(int i=0;i<size-numToKeep;i++) {\n        ((IndexCommitPoint) commits.get(i)).delete();\n        numDelete++;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1559506fd82ede79bd8e60facef2a57524e175","date":1204808228,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy.KeepLastNDeletionPolicy#doDeletes(List,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy.KeepLastNDeletionPolicy#doDeletes(List,boolean).mjava","sourceNew":"    private void doDeletes(List commits, boolean isCommit) {\n\n      // Assert that we really are only called for each new\n      // commit:\n      if (isCommit) {\n        String fileName = ((IndexCommit) commits.get(commits.size()-1)).getSegmentsFileName();\n        if (seen.contains(fileName)) {\n          throw new RuntimeException(\"onCommit was called twice on the same commit point: \" + fileName);\n        }\n        seen.add(fileName);\n        numOnCommit++;\n      }\n      int size = commits.size();\n      for(int i=0;i<size-numToKeep;i++) {\n        ((IndexCommit) commits.get(i)).delete();\n        numDelete++;\n      }\n    }\n\n","sourceOld":"    private void doDeletes(List commits, boolean isCommit) {\n\n      // Assert that we really are only called for each new\n      // commit:\n      if (isCommit) {\n        String fileName = ((IndexCommitPoint) commits.get(commits.size()-1)).getSegmentsFileName();\n        if (seen.contains(fileName)) {\n          throw new RuntimeException(\"onCommit was called twice on the same commit point: \" + fileName);\n        }\n        seen.add(fileName);\n        numOnCommit++;\n      }\n      int size = commits.size();\n      for(int i=0;i<size-numToKeep;i++) {\n        ((IndexCommitPoint) commits.get(i)).delete();\n        numDelete++;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy.KeepLastNDeletionPolicy#doDeletes(List[#-extends-IndexCommit],boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy.KeepLastNDeletionPolicy#doDeletes(List,boolean).mjava","sourceNew":"    private void doDeletes(List<? extends IndexCommit> commits, boolean isCommit) {\n\n      // Assert that we really are only called for each new\n      // commit:\n      if (isCommit) {\n        String fileName = ((IndexCommit) commits.get(commits.size()-1)).getSegmentsFileName();\n        if (seen.contains(fileName)) {\n          throw new RuntimeException(\"onCommit was called twice on the same commit point: \" + fileName);\n        }\n        seen.add(fileName);\n        numOnCommit++;\n      }\n      int size = commits.size();\n      for(int i=0;i<size-numToKeep;i++) {\n        ((IndexCommit) commits.get(i)).delete();\n        numDelete++;\n      }\n    }\n\n","sourceOld":"    private void doDeletes(List commits, boolean isCommit) {\n\n      // Assert that we really are only called for each new\n      // commit:\n      if (isCommit) {\n        String fileName = ((IndexCommit) commits.get(commits.size()-1)).getSegmentsFileName();\n        if (seen.contains(fileName)) {\n          throw new RuntimeException(\"onCommit was called twice on the same commit point: \" + fileName);\n        }\n        seen.add(fileName);\n        numOnCommit++;\n      }\n      int size = commits.size();\n      for(int i=0;i<size-numToKeep;i++) {\n        ((IndexCommit) commits.get(i)).delete();\n        numDelete++;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["8a1559506fd82ede79bd8e60facef2a57524e175"],"8a1559506fd82ede79bd8e60facef2a57524e175":["8b6187898fc4413ccd18229711786550a280383c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"8b6187898fc4413ccd18229711786550a280383c":["8a1559506fd82ede79bd8e60facef2a57524e175"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8a1559506fd82ede79bd8e60facef2a57524e175":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}