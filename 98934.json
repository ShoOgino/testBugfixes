{"path":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFieldsAfterClose().mjava","commits":[{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFieldsAfterClose().mjava","pathOld":"/dev/null","sourceNew":"  public void testLazyFieldsAfterClose() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    lazyFieldNames.add(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    reader.close();\n    try {\n      String value = field.stringValue();\n      fail(\"did not hit AlreadyClosedException as expected\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0","date":1185569419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFieldsAfterClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFieldsAfterClose().mjava","sourceNew":"  public void testLazyFieldsAfterClose() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    lazyFieldNames.add(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    reader.close();\n    try {\n      String value = field.stringValue();\n      fail(\"did not hit AlreadyClosedException as expected\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testLazyFieldsAfterClose() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    lazyFieldNames.add(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    reader.close();\n    try {\n      String value = field.stringValue();\n      fail(\"did not hit AlreadyClosedException as expected\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e","date":1205362958,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFieldsAfterClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFieldsAfterClose().mjava","sourceNew":"  public void testLazyFieldsAfterClose() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    lazyFieldNames.add(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    reader.close();\n    try {\n      field.stringValue();\n      fail(\"did not hit AlreadyClosedException as expected\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testLazyFieldsAfterClose() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    lazyFieldNames.add(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    reader.close();\n    try {\n      String value = field.stringValue();\n      fail(\"did not hit AlreadyClosedException as expected\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n  }\n\n","bugFix":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFieldsAfterClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFieldsAfterClose().mjava","sourceNew":"  public void testLazyFieldsAfterClose() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    reader.close();\n    try {\n      field.stringValue();\n      fail(\"did not hit AlreadyClosedException as expected\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testLazyFieldsAfterClose() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    lazyFieldNames.add(DocHelper.COMPRESSED_TEXT_FIELD_2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    reader.close();\n    try {\n      field.stringValue();\n      fail(\"did not hit AlreadyClosedException as expected\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFieldsAfterClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFieldsAfterClose().mjava","sourceNew":"  public void testLazyFieldsAfterClose() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    reader.close();\n    try {\n      field.stringValue();\n      fail(\"did not hit AlreadyClosedException as expected\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testLazyFieldsAfterClose() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set loadFieldNames = new HashSet();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    reader.close();\n    try {\n      field.stringValue();\n      fail(\"did not hit AlreadyClosedException as expected\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFieldsAfterClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFieldsAfterClose().mjava","sourceNew":"  public void testLazyFieldsAfterClose() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    reader.close();\n    try {\n      field.stringValue();\n      fail(\"did not hit AlreadyClosedException as expected\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testLazyFieldsAfterClose() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    reader.close();\n    try {\n      field.stringValue();\n      fail(\"did not hit AlreadyClosedException as expected\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyFieldsAfterClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyFieldsAfterClose().mjava","sourceNew":"  public void testLazyFieldsAfterClose() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    reader.close();\n    try {\n      field.stringValue();\n      fail(\"did not hit AlreadyClosedException as expected\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testLazyFieldsAfterClose() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Set<String> loadFieldNames = new HashSet<String>();\n    loadFieldNames.add(DocHelper.TEXT_FIELD_1_KEY);\n    loadFieldNames.add(DocHelper.TEXT_FIELD_UTF1_KEY);\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_KEY);\n    lazyFieldNames.add(DocHelper.LAZY_FIELD_BINARY_KEY);\n    lazyFieldNames.add(DocHelper.TEXT_FIELD_UTF2_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(loadFieldNames, lazyFieldNames);\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    Fieldable field = doc.getFieldable(DocHelper.LAZY_FIELD_KEY);\n    assertTrue(\"field is null and it shouldn't be\", field != null);\n    assertTrue(\"field is not lazy and it should be\", field.isLazy());\n    reader.close();\n    try {\n      field.stringValue();\n      fail(\"did not hit AlreadyClosedException as expected\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["e0c804f7aa477229414a7e12882af490c241f64d"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e0c804f7aa477229414a7e12882af490c241f64d":["98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e":["e0c804f7aa477229414a7e12882af490c241f64d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"e0c804f7aa477229414a7e12882af490c241f64d":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}