{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#applyTransformer(Map[String,Object]).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#applyTransformer(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    for (Transformer t : transformers) {\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              checkSkipDoc(oMap, t);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              LOG\n                      .log(Level.SEVERE,\n                              \"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            checkSkipDoc(oMap, t);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            LOG\n                    .log(Level.SEVERE,\n                            \"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n\n      } catch (DataImportHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.log(Level.WARNING, \"transformer threw error\", e);\n        throw new DataImportHandlerException(DataImportHandlerException.WARN, e);\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#applyTransformer(Map[String,Object]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    for (Transformer t : transformers) {\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              checkSkipDoc(oMap, t);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            checkSkipDoc(oMap, t);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error( \"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n\n      } catch (DataImportHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        log.warn( \"transformer threw error\", e);\n        throw new DataImportHandlerException(DataImportHandlerException.WARN, e);\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    for (Transformer t : transformers) {\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              checkSkipDoc(oMap, t);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              LOG\n                      .log(Level.SEVERE,\n                              \"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            checkSkipDoc(oMap, t);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            LOG\n                    .log(Level.SEVERE,\n                            \"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n\n      } catch (DataImportHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.log(Level.WARNING, \"transformer threw error\", e);\n        throw new DataImportHandlerException(DataImportHandlerException.WARN, e);\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62","date":1226483472,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#applyTransformer(Map[String,Object]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    for (Transformer t : transformers) {\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              checkSkipDoc(oMap, t);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            checkSkipDoc(oMap, t);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    for (Transformer t : transformers) {\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              checkSkipDoc(oMap, t);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            checkSkipDoc(oMap, t);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error( \"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n\n      } catch (DataImportHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        log.warn( \"transformer threw error\", e);\n        throw new DataImportHandlerException(DataImportHandlerException.WARN, e);\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d183f54b5c7a1c64bd2935a5d5bd71091ebe4198","date":1235539651,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#applyTransformer(Map[String,Object]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    for (Transformer t : transformers) {\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              checkSkipDoc(oMap, t);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            checkSkipDoc(oMap, t);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    for (Transformer t : transformers) {\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              checkSkipDoc(oMap, t);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            checkSkipDoc(oMap, t);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be21b70688b510ce9b71baca540e637755819715","date":1237458453,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#applyTransformer(Map[String,Object]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    for (Transformer t : transformers) {\n      if(stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    for (Transformer t : transformers) {\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              checkSkipDoc(oMap, t);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            checkSkipDoc(oMap, t);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"758fdd153bb361b47f22db79ace6af6f6b7b9330","date":1240213015,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    for (Transformer t : transformers) {\n      if(stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"be21b70688b510ce9b71baca540e637755819715":["d183f54b5c7a1c64bd2935a5d5bd71091ebe4198"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d183f54b5c7a1c64bd2935a5d5bd71091ebe4198":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["be21b70688b510ce9b71baca540e637755819715"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":["d183f54b5c7a1c64bd2935a5d5bd71091ebe4198"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"be21b70688b510ce9b71baca540e637755819715":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d183f54b5c7a1c64bd2935a5d5bd71091ebe4198":["be21b70688b510ce9b71baca540e637755819715"],"758fdd153bb361b47f22db79ace6af6f6b7b9330":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["758fdd153bb361b47f22db79ace6af6f6b7b9330","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}