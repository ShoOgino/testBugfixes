{"path":"lucene/facet/src/java/org/apache/lucene/facet/encoding/FourFlagsIntDecoder#decode(BytesRef,IntsRef).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/encoding/FourFlagsIntDecoder#decode(BytesRef,IntsRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/encoding/FourFlagsIntDecoder#decode(BytesRef,IntsRef).mjava","sourceNew":"  @Override\n  public void decode(BytesRef buf, IntsRef values) {\n    values.offset = values.length = 0;\n    int upto = buf.offset + buf.length;\n    int offset = buf.offset;\n    while (offset < upto) {\n      // read indicator\n      int indicator = buf.bytes[offset++] & 0xFF;\n      int ordinal = 0;\n      \n      int capacityNeeded = values.length + 4;\n      if (values.ints.length < capacityNeeded) {\n        values.grow(capacityNeeded);\n      }\n      \n      while (ordinal != 4) {\n        byte decodeVal = DECODE_TABLE[indicator][ordinal++];\n        if (decodeVal == 0) {\n          if (offset == upto) { // end of buffer\n            return;\n          }\n          // it is better if the decoding is inlined like so, and not e.g.\n          // in a utility method\n          int value = 0;\n          while (true) {\n            byte b = buf.bytes[offset++];\n            if (b >= 0) {\n              values.ints[values.length++] = ((value << 7) | b) + 4;\n              break;\n            } else {\n              value = (value << 7) | (b & 0x7F);\n            }\n          }\n        } else {\n          values.ints[values.length++] = decodeVal;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decode(BytesRef buf, IntsRef values) {\n    values.offset = values.length = 0;\n    int upto = buf.offset + buf.length;\n    int offset = buf.offset;\n    while (offset < upto) {\n      // read indicator\n      int indicator = buf.bytes[offset++] & 0xFF;\n      int ordinal = 0;\n      \n      int capacityNeeded = values.length + 4;\n      if (values.ints.length < capacityNeeded) {\n        values.grow(capacityNeeded);\n      }\n      \n      while (ordinal != 4) {\n        byte decodeVal = DECODE_TABLE[indicator][ordinal++];\n        if (decodeVal == 0) {\n          if (offset == upto) { // end of buffer\n            return;\n          }\n          // it is better if the decoding is inlined like so, and not e.g.\n          // in a utility method\n          int value = 0;\n          while (true) {\n            byte b = buf.bytes[offset++];\n            if (b >= 0) {\n              values.ints[values.length++] = ((value << 7) | b) + 4;\n              break;\n            } else {\n              value = (value << 7) | (b & 0x7F);\n            }\n          }\n        } else {\n          values.ints[values.length++] = decodeVal;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/encoding/FourFlagsIntDecoder#decode(BytesRef,IntsRef).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void decode(BytesRef buf, IntsRef values) {\n    values.offset = values.length = 0;\n    int upto = buf.offset + buf.length;\n    int offset = buf.offset;\n    while (offset < upto) {\n      // read indicator\n      int indicator = buf.bytes[offset++] & 0xFF;\n      int ordinal = 0;\n      \n      int capacityNeeded = values.length + 4;\n      if (values.ints.length < capacityNeeded) {\n        values.grow(capacityNeeded);\n      }\n      \n      while (ordinal != 4) {\n        byte decodeVal = DECODE_TABLE[indicator][ordinal++];\n        if (decodeVal == 0) {\n          if (offset == upto) { // end of buffer\n            return;\n          }\n          // it is better if the decoding is inlined like so, and not e.g.\n          // in a utility method\n          int value = 0;\n          while (true) {\n            byte b = buf.bytes[offset++];\n            if (b >= 0) {\n              values.ints[values.length++] = ((value << 7) | b) + 4;\n              break;\n            } else {\n              value = (value << 7) | (b & 0x7F);\n            }\n          }\n        } else {\n          values.ints[values.length++] = decodeVal;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/encoding/FourFlagsIntDecoder#decode(BytesRef,IntsRef).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void decode(BytesRef buf, IntsRef values) {\n    values.offset = values.length = 0;\n    int upto = buf.offset + buf.length;\n    int offset = buf.offset;\n    while (offset < upto) {\n      // read indicator\n      int indicator = buf.bytes[offset++] & 0xFF;\n      int ordinal = 0;\n      \n      int capacityNeeded = values.length + 4;\n      if (values.ints.length < capacityNeeded) {\n        values.grow(capacityNeeded);\n      }\n      \n      while (ordinal != 4) {\n        byte decodeVal = DECODE_TABLE[indicator][ordinal++];\n        if (decodeVal == 0) {\n          if (offset == upto) { // end of buffer\n            return;\n          }\n          // it is better if the decoding is inlined like so, and not e.g.\n          // in a utility method\n          int value = 0;\n          while (true) {\n            byte b = buf.bytes[offset++];\n            if (b >= 0) {\n              values.ints[values.length++] = ((value << 7) | b) + 4;\n              break;\n            } else {\n              value = (value << 7) | (b & 0x7F);\n            }\n          }\n        } else {\n          values.ints[values.length++] = decodeVal;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}