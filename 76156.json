{"path":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","sourceNew":null,"sourceOld":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","pathOld":"src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#splitIntoClauses(String,boolean).mjava","sourceNew":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public List<Clause> splitIntoClauses(String s, boolean ignoreQuote) {\n    ArrayList<Clause> lst = new ArrayList<Clause>(4);\n    Clause clause = new Clause();\n\n    int pos=0;\n    int end=s.length();\n    char ch=0;\n    int start;\n    outer: while (pos < end) {\n      ch = s.charAt(pos);\n\n      while (Character.isWhitespace(ch)) {\n        if (++pos >= end) break;\n        ch = s.charAt(pos);\n      }\n\n      start = pos;      \n\n      if (ch=='+' || ch=='-') {\n        clause.must = ch;\n        pos++;\n      }\n\n      clause.field = getFieldName(s, pos, end);\n      if (clause.field != null) {\n        pos += clause.field.length(); // skip the field name\n        pos++;  // skip the ':'\n      }\n\n      if (pos>=end) break;\n\n\n      char inString=0;\n\n      ch = s.charAt(pos);\n      if (!ignoreQuote && ch=='\"') {\n        clause.isPhrase = true;\n        inString = '\"';\n        pos++;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      while (pos < end) {\n        ch = s.charAt(pos++);\n        if (ch=='\\\\') {    // skip escaped chars, but leave escaped\n          sb.append(ch);\n          if (pos >= end) {\n            sb.append(ch); // double backslash if we are at the end of the string\n            break;\n          }\n          ch = s.charAt(pos++);\n          sb.append(ch);\n          continue;\n        } else if (inString != 0 && ch == inString) {\n          inString=0;\n          break;\n        } else if (Character.isWhitespace(ch)) {\n          clause.hasWhitespace=true;\n          if (inString == 0) {\n            // end of the token if we aren't in a string, backing\n            // up the position.\n            pos--;\n            break;\n          }\n        }\n\n        if (inString == 0) {\n          switch (ch) {\n            case '!':\n            case '(':\n            case ')':\n            case ':':\n            case '^':\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '~':\n            case '*':\n            case '?':\n            case '\"':\n            case '+':\n            case '-':\n              clause.hasSpecialSyntax = true;\n              sb.append('\\\\');\n          }\n        } else if (ch=='\"') {\n          // only char we need to escape in a string is double quote\n          sb.append('\\\\');\n        }\n        sb.append(ch);\n      }\n      clause.val = sb.toString();\n \n      if (clause.isPhrase) {\n        if (inString != 0) {\n          // detected bad quote balancing... retry\n          // parsing with quotes like any other char\n          return splitIntoClauses(s, true);\n        }\n\n        // special syntax in a string isn't special\n        clause.hasSpecialSyntax = false;        \n      } else {\n        // an empty clause... must be just a + or - on it's own\n        if (clause.val.length() == 0) {\n          clause.syntaxError = true;\n          if (clause.must != 0) {\n            clause.val=\"\\\\\"+clause.must;\n            clause.must = 0;\n            clause.hasSpecialSyntax = true;\n          } else {\n            // uh.. this shouldn't happen.\n            clause=null;\n          }\n        }\n      }\n\n      if (clause != null) {\n        clause.raw = s.substring(start, pos);\n        lst.add(clause);\n      }\n      clause = new Clause();\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}