{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFieldTypes(List[FieldType]).mjava","commits":[{"id":"bdf16ebe435fc9daea90a73b8683ff001c6d3523","date":1409931231,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFieldTypes(List[FieldType]).mjava","pathOld":"/dev/null","sourceNew":"  public ManagedIndexSchema addFieldTypes(List<FieldType> fieldTypeList) {\n    if (!isMutable) {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);    \n    }\n\n    ManagedIndexSchema newSchema = shallowCopy(true);\n\n    // we shallow copied fieldTypes, but since we're changing them, we need to do a true\n    // deep copy before adding the new field types\n    HashMap<String,FieldType> clone =\n        (HashMap<String,FieldType>)((HashMap<String,FieldType>)newSchema.fieldTypes).clone();\n    newSchema.fieldTypes = clone;\n\n    // do a first pass to validate the field types don't exist already\n    for (FieldType fieldType : fieldTypeList) {    \n      String typeName = fieldType.getTypeName();\n      if (newSchema.getFieldTypeByName(typeName) != null) {\n        throw new FieldExistsException(ErrorCode.BAD_REQUEST,\n            \"Field type '\" + typeName + \"' already exists!\");\n      }\n      \n      newSchema.fieldTypes.put(typeName, fieldType);\n    }\n\n    // Run the callbacks on SchemaAware now that everything else is done\n    for (SchemaAware aware : newSchema.schemaAware)\n      aware.inform(newSchema);\n    \n    // looks good for the add, notify ResoureLoaderAware objects\n    for (FieldType fieldType : fieldTypeList) {      \n          \n      // must inform any sub-components used in the \n      // tokenizer chain if they are ResourceLoaderAware    \n      if (fieldType.supportsAnalyzers()) {\n        Analyzer indexAnalyzer = fieldType.getIndexAnalyzer();\n        if (indexAnalyzer != null && indexAnalyzer instanceof TokenizerChain)\n          informResourceLoaderAwareObjectsInChain((TokenizerChain)indexAnalyzer);\n        \n        Analyzer queryAnalyzer = fieldType.getQueryAnalyzer();\n        // ref comparison is correct here (vs. equals) as they may be the same\n        // object in which case, we don't need to inform twice ... however, it's\n        // actually safe to call inform multiple times on an object anyway\n        if (queryAnalyzer != null && \n            queryAnalyzer != indexAnalyzer && \n            queryAnalyzer instanceof TokenizerChain)\n          informResourceLoaderAwareObjectsInChain((TokenizerChain)queryAnalyzer);\n\n        // if fieldType is a TextField, it might have a multi-term analyzer\n        if (fieldType instanceof TextField) {\n          TextField textFieldType = (TextField)fieldType;\n          Analyzer multiTermAnalyzer = textFieldType.getMultiTermAnalyzer();\n          if (multiTermAnalyzer != null && multiTermAnalyzer != indexAnalyzer &&\n              multiTermAnalyzer != queryAnalyzer && multiTermAnalyzer instanceof TokenizerChain)\n            informResourceLoaderAwareObjectsInChain((TokenizerChain)multiTermAnalyzer);\n        }\n      }      \n    }\n\n    newSchema.refreshAnalyzers();\n    \n    boolean success = newSchema.persistManagedSchema(false);\n    if (success) {\n      if (log.isDebugEnabled()) {\n        StringBuilder fieldTypeNames = new StringBuilder();\n        for (int i=0; i < fieldTypeList.size(); i++) {\n          if (i > 0) fieldTypeNames.append(\", \");\n          fieldTypeNames.append(fieldTypeList.get(i).typeName);\n        }\n        log.debug(\"Added field types: {}\", fieldTypeNames.toString());\n      }\n    } else {\n      // this is unlikely to happen as most errors are handled as exceptions in the persist code\n      log.error(\"Failed to add field types: {}\", fieldTypeList);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n          \"Failed to persist updated schema due to underlying storage issue; check log for more details!\");\n    }\n    \n    return newSchema;\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":["39794fb4aa0ff1978711872806f396013716b868","39794fb4aa0ff1978711872806f396013716b868","9d62f72d1c60d2be239222de52d5e7b516da5f6f","9d62f72d1c60d2be239222de52d5e7b516da5f6f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFieldTypes(List[FieldType],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFieldTypes(List[FieldType]).mjava","sourceNew":"  public ManagedIndexSchema addFieldTypes(List<FieldType> fieldTypeList, boolean persist) {\n    if (!isMutable) {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);    \n    }\n\n    ManagedIndexSchema newSchema = shallowCopy(true);\n\n    // we shallow copied fieldTypes, but since we're changing them, we need to do a true\n    // deep copy before adding the new field types\n    HashMap<String,FieldType> clone =\n        (HashMap<String,FieldType>)((HashMap<String,FieldType>)newSchema.fieldTypes).clone();\n    newSchema.fieldTypes = clone;\n\n    // do a first pass to validate the field types don't exist already\n    for (FieldType fieldType : fieldTypeList) {    \n      String typeName = fieldType.getTypeName();\n      if (newSchema.getFieldTypeByName(typeName) != null) {\n        throw new FieldExistsException(ErrorCode.BAD_REQUEST,\n            \"Field type '\" + typeName + \"' already exists!\");\n      }\n      \n      newSchema.fieldTypes.put(typeName, fieldType);\n    }\n\n    // Run the callbacks on SchemaAware now that everything else is done\n    for (SchemaAware aware : newSchema.schemaAware)\n      aware.inform(newSchema);\n    \n    // looks good for the add, notify ResoureLoaderAware objects\n    for (FieldType fieldType : fieldTypeList) {      \n          \n      // must inform any sub-components used in the \n      // tokenizer chain if they are ResourceLoaderAware    \n      if (fieldType.supportsAnalyzers()) {\n        Analyzer indexAnalyzer = fieldType.getIndexAnalyzer();\n        if (indexAnalyzer != null && indexAnalyzer instanceof TokenizerChain)\n          informResourceLoaderAwareObjectsInChain((TokenizerChain)indexAnalyzer);\n        \n        Analyzer queryAnalyzer = fieldType.getQueryAnalyzer();\n        // ref comparison is correct here (vs. equals) as they may be the same\n        // object in which case, we don't need to inform twice ... however, it's\n        // actually safe to call inform multiple times on an object anyway\n        if (queryAnalyzer != null && \n            queryAnalyzer != indexAnalyzer && \n            queryAnalyzer instanceof TokenizerChain)\n          informResourceLoaderAwareObjectsInChain((TokenizerChain)queryAnalyzer);\n\n        // if fieldType is a TextField, it might have a multi-term analyzer\n        if (fieldType instanceof TextField) {\n          TextField textFieldType = (TextField)fieldType;\n          Analyzer multiTermAnalyzer = textFieldType.getMultiTermAnalyzer();\n          if (multiTermAnalyzer != null && multiTermAnalyzer != indexAnalyzer &&\n              multiTermAnalyzer != queryAnalyzer && multiTermAnalyzer instanceof TokenizerChain)\n            informResourceLoaderAwareObjectsInChain((TokenizerChain)multiTermAnalyzer);\n        }\n      }      \n    }\n\n    newSchema.refreshAnalyzers();\n\n    if (persist) {\n      boolean success = newSchema.persistManagedSchema(false);\n      if (success) {\n        if (log.isDebugEnabled()) {\n          StringBuilder fieldTypeNames = new StringBuilder();\n          for (int i=0; i < fieldTypeList.size(); i++) {\n            if (i > 0) fieldTypeNames.append(\", \");\n            fieldTypeNames.append(fieldTypeList.get(i).typeName);\n          }\n          log.debug(\"Added field types: {}\", fieldTypeNames.toString());\n        }\n      } else {\n        // this is unlikely to happen as most errors are handled as exceptions in the persist code\n        log.error(\"Failed to add field types: {}\", fieldTypeList);\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to persist updated schema due to underlying storage issue; check log for more details!\");\n      }\n    }\n\n    return newSchema;\n  }  \n\n","sourceOld":"  public ManagedIndexSchema addFieldTypes(List<FieldType> fieldTypeList) {\n    if (!isMutable) {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);    \n    }\n\n    ManagedIndexSchema newSchema = shallowCopy(true);\n\n    // we shallow copied fieldTypes, but since we're changing them, we need to do a true\n    // deep copy before adding the new field types\n    HashMap<String,FieldType> clone =\n        (HashMap<String,FieldType>)((HashMap<String,FieldType>)newSchema.fieldTypes).clone();\n    newSchema.fieldTypes = clone;\n\n    // do a first pass to validate the field types don't exist already\n    for (FieldType fieldType : fieldTypeList) {    \n      String typeName = fieldType.getTypeName();\n      if (newSchema.getFieldTypeByName(typeName) != null) {\n        throw new FieldExistsException(ErrorCode.BAD_REQUEST,\n            \"Field type '\" + typeName + \"' already exists!\");\n      }\n      \n      newSchema.fieldTypes.put(typeName, fieldType);\n    }\n\n    // Run the callbacks on SchemaAware now that everything else is done\n    for (SchemaAware aware : newSchema.schemaAware)\n      aware.inform(newSchema);\n    \n    // looks good for the add, notify ResoureLoaderAware objects\n    for (FieldType fieldType : fieldTypeList) {      \n          \n      // must inform any sub-components used in the \n      // tokenizer chain if they are ResourceLoaderAware    \n      if (fieldType.supportsAnalyzers()) {\n        Analyzer indexAnalyzer = fieldType.getIndexAnalyzer();\n        if (indexAnalyzer != null && indexAnalyzer instanceof TokenizerChain)\n          informResourceLoaderAwareObjectsInChain((TokenizerChain)indexAnalyzer);\n        \n        Analyzer queryAnalyzer = fieldType.getQueryAnalyzer();\n        // ref comparison is correct here (vs. equals) as they may be the same\n        // object in which case, we don't need to inform twice ... however, it's\n        // actually safe to call inform multiple times on an object anyway\n        if (queryAnalyzer != null && \n            queryAnalyzer != indexAnalyzer && \n            queryAnalyzer instanceof TokenizerChain)\n          informResourceLoaderAwareObjectsInChain((TokenizerChain)queryAnalyzer);\n\n        // if fieldType is a TextField, it might have a multi-term analyzer\n        if (fieldType instanceof TextField) {\n          TextField textFieldType = (TextField)fieldType;\n          Analyzer multiTermAnalyzer = textFieldType.getMultiTermAnalyzer();\n          if (multiTermAnalyzer != null && multiTermAnalyzer != indexAnalyzer &&\n              multiTermAnalyzer != queryAnalyzer && multiTermAnalyzer instanceof TokenizerChain)\n            informResourceLoaderAwareObjectsInChain((TokenizerChain)multiTermAnalyzer);\n        }\n      }      \n    }\n\n    newSchema.refreshAnalyzers();\n    \n    boolean success = newSchema.persistManagedSchema(false);\n    if (success) {\n      if (log.isDebugEnabled()) {\n        StringBuilder fieldTypeNames = new StringBuilder();\n        for (int i=0; i < fieldTypeList.size(); i++) {\n          if (i > 0) fieldTypeNames.append(\", \");\n          fieldTypeNames.append(fieldTypeList.get(i).typeName);\n        }\n        log.debug(\"Added field types: {}\", fieldTypeNames.toString());\n      }\n    } else {\n      // this is unlikely to happen as most errors are handled as exceptions in the persist code\n      log.error(\"Failed to add field types: {}\", fieldTypeList);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n          \"Failed to persist updated schema due to underlying storage issue; check log for more details!\");\n    }\n    \n    return newSchema;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFieldTypes(List[FieldType],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFieldTypes(List[FieldType]).mjava","sourceNew":"  public ManagedIndexSchema addFieldTypes(List<FieldType> fieldTypeList, boolean persist) {\n    if (!isMutable) {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);    \n    }\n\n    ManagedIndexSchema newSchema = shallowCopy(true);\n\n    // we shallow copied fieldTypes, but since we're changing them, we need to do a true\n    // deep copy before adding the new field types\n    HashMap<String,FieldType> clone =\n        (HashMap<String,FieldType>)((HashMap<String,FieldType>)newSchema.fieldTypes).clone();\n    newSchema.fieldTypes = clone;\n\n    // do a first pass to validate the field types don't exist already\n    for (FieldType fieldType : fieldTypeList) {    \n      String typeName = fieldType.getTypeName();\n      if (newSchema.getFieldTypeByName(typeName) != null) {\n        throw new FieldExistsException(ErrorCode.BAD_REQUEST,\n            \"Field type '\" + typeName + \"' already exists!\");\n      }\n      \n      newSchema.fieldTypes.put(typeName, fieldType);\n    }\n\n    // Run the callbacks on SchemaAware now that everything else is done\n    for (SchemaAware aware : newSchema.schemaAware)\n      aware.inform(newSchema);\n    \n    // looks good for the add, notify ResoureLoaderAware objects\n    for (FieldType fieldType : fieldTypeList) {      \n          \n      // must inform any sub-components used in the \n      // tokenizer chain if they are ResourceLoaderAware    \n      if (fieldType.supportsAnalyzers()) {\n        Analyzer indexAnalyzer = fieldType.getIndexAnalyzer();\n        if (indexAnalyzer != null && indexAnalyzer instanceof TokenizerChain)\n          informResourceLoaderAwareObjectsInChain((TokenizerChain)indexAnalyzer);\n        \n        Analyzer queryAnalyzer = fieldType.getQueryAnalyzer();\n        // ref comparison is correct here (vs. equals) as they may be the same\n        // object in which case, we don't need to inform twice ... however, it's\n        // actually safe to call inform multiple times on an object anyway\n        if (queryAnalyzer != null && \n            queryAnalyzer != indexAnalyzer && \n            queryAnalyzer instanceof TokenizerChain)\n          informResourceLoaderAwareObjectsInChain((TokenizerChain)queryAnalyzer);\n\n        // if fieldType is a TextField, it might have a multi-term analyzer\n        if (fieldType instanceof TextField) {\n          TextField textFieldType = (TextField)fieldType;\n          Analyzer multiTermAnalyzer = textFieldType.getMultiTermAnalyzer();\n          if (multiTermAnalyzer != null && multiTermAnalyzer != indexAnalyzer &&\n              multiTermAnalyzer != queryAnalyzer && multiTermAnalyzer instanceof TokenizerChain)\n            informResourceLoaderAwareObjectsInChain((TokenizerChain)multiTermAnalyzer);\n        }\n      }      \n    }\n\n    newSchema.refreshAnalyzers();\n\n    if (persist) {\n      boolean success = newSchema.persistManagedSchema(false);\n      if (success) {\n        if (log.isDebugEnabled()) {\n          StringBuilder fieldTypeNames = new StringBuilder();\n          for (int i=0; i < fieldTypeList.size(); i++) {\n            if (i > 0) fieldTypeNames.append(\", \");\n            fieldTypeNames.append(fieldTypeList.get(i).typeName);\n          }\n          log.debug(\"Added field types: {}\", fieldTypeNames.toString());\n        }\n      } else {\n        // this is unlikely to happen as most errors are handled as exceptions in the persist code\n        log.error(\"Failed to add field types: {}\", fieldTypeList);\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to persist updated schema due to underlying storage issue; check log for more details!\");\n      }\n    }\n\n    return newSchema;\n  }  \n\n","sourceOld":"  public ManagedIndexSchema addFieldTypes(List<FieldType> fieldTypeList) {\n    if (!isMutable) {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);    \n    }\n\n    ManagedIndexSchema newSchema = shallowCopy(true);\n\n    // we shallow copied fieldTypes, but since we're changing them, we need to do a true\n    // deep copy before adding the new field types\n    HashMap<String,FieldType> clone =\n        (HashMap<String,FieldType>)((HashMap<String,FieldType>)newSchema.fieldTypes).clone();\n    newSchema.fieldTypes = clone;\n\n    // do a first pass to validate the field types don't exist already\n    for (FieldType fieldType : fieldTypeList) {    \n      String typeName = fieldType.getTypeName();\n      if (newSchema.getFieldTypeByName(typeName) != null) {\n        throw new FieldExistsException(ErrorCode.BAD_REQUEST,\n            \"Field type '\" + typeName + \"' already exists!\");\n      }\n      \n      newSchema.fieldTypes.put(typeName, fieldType);\n    }\n\n    // Run the callbacks on SchemaAware now that everything else is done\n    for (SchemaAware aware : newSchema.schemaAware)\n      aware.inform(newSchema);\n    \n    // looks good for the add, notify ResoureLoaderAware objects\n    for (FieldType fieldType : fieldTypeList) {      \n          \n      // must inform any sub-components used in the \n      // tokenizer chain if they are ResourceLoaderAware    \n      if (fieldType.supportsAnalyzers()) {\n        Analyzer indexAnalyzer = fieldType.getIndexAnalyzer();\n        if (indexAnalyzer != null && indexAnalyzer instanceof TokenizerChain)\n          informResourceLoaderAwareObjectsInChain((TokenizerChain)indexAnalyzer);\n        \n        Analyzer queryAnalyzer = fieldType.getQueryAnalyzer();\n        // ref comparison is correct here (vs. equals) as they may be the same\n        // object in which case, we don't need to inform twice ... however, it's\n        // actually safe to call inform multiple times on an object anyway\n        if (queryAnalyzer != null && \n            queryAnalyzer != indexAnalyzer && \n            queryAnalyzer instanceof TokenizerChain)\n          informResourceLoaderAwareObjectsInChain((TokenizerChain)queryAnalyzer);\n\n        // if fieldType is a TextField, it might have a multi-term analyzer\n        if (fieldType instanceof TextField) {\n          TextField textFieldType = (TextField)fieldType;\n          Analyzer multiTermAnalyzer = textFieldType.getMultiTermAnalyzer();\n          if (multiTermAnalyzer != null && multiTermAnalyzer != indexAnalyzer &&\n              multiTermAnalyzer != queryAnalyzer && multiTermAnalyzer instanceof TokenizerChain)\n            informResourceLoaderAwareObjectsInChain((TokenizerChain)multiTermAnalyzer);\n        }\n      }      \n    }\n\n    newSchema.refreshAnalyzers();\n    \n    boolean success = newSchema.persistManagedSchema(false);\n    if (success) {\n      if (log.isDebugEnabled()) {\n        StringBuilder fieldTypeNames = new StringBuilder();\n        for (int i=0; i < fieldTypeList.size(); i++) {\n          if (i > 0) fieldTypeNames.append(\", \");\n          fieldTypeNames.append(fieldTypeList.get(i).typeName);\n        }\n        log.debug(\"Added field types: {}\", fieldTypeNames.toString());\n      }\n    } else {\n      // this is unlikely to happen as most errors are handled as exceptions in the persist code\n      log.error(\"Failed to add field types: {}\", fieldTypeList);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n          \"Failed to persist updated schema due to underlying storage issue; check log for more details!\");\n    }\n    \n    return newSchema;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["bdf16ebe435fc9daea90a73b8683ff001c6d3523","4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}