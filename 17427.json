{"path":"src/common/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","pathOld":"src/java/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    String type = nd.getNodeName();\n\n    String name = null;\n    if (nd.hasAttributes()) {\n      NamedNodeMap attrs = nd.getAttributes();\n      Node nameNd = attrs.getNamedItem(\"name\");\n      if (nameNd != null) name=nameNd.getNodeValue();\n    }\n\n    Object val=null;\n\n    if (\"str\".equals(type)) {\n      val = getText(nd);\n    } else if (\"int\".equals(type)) {\n      val = Integer.valueOf(getText(nd));\n    } else if (\"long\".equals(type)) {\n      val = Long.valueOf(getText(nd));\n    } else if (\"float\".equals(type)) {\n      val = Float.valueOf(getText(nd));\n    } else if (\"double\".equals(type)) {\n      val = Double.valueOf(getText(nd));\n    } else if (\"bool\".equals(type)) {\n      val = Boolean.valueOf(getText(nd));\n    } else if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    String type = nd.getNodeName();\n\n    String name = null;\n    if (nd.hasAttributes()) {\n      NamedNodeMap attrs = nd.getAttributes();\n      Node nameNd = attrs.getNamedItem(\"name\");\n      if (nameNd != null) name=nameNd.getNodeValue();\n    }\n\n    Object val=null;\n\n    if (\"str\".equals(type)) {\n      val = getText(nd);\n    } else if (\"int\".equals(type)) {\n      val = Integer.valueOf(getText(nd));\n    } else if (\"long\".equals(type)) {\n      val = Long.valueOf(getText(nd));\n    } else if (\"float\".equals(type)) {\n      val = Float.valueOf(getText(nd));\n    } else if (\"double\".equals(type)) {\n      val = Double.valueOf(getText(nd));\n    } else if (\"bool\".equals(type)) {\n      val = Boolean.valueOf(getText(nd));\n    } else if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634b2cad3477b478f73029f8f5a8d0b5069942d4","date":1239803278,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","pathOld":"src/common/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    String type = nd.getNodeName();\n\n    String name = null;\n    if (nd.hasAttributes()) {\n      NamedNodeMap attrs = nd.getAttributes();\n      Node nameNd = attrs.getNamedItem(\"name\");\n      if (nameNd != null) name=nameNd.getNodeValue();\n    }\n\n    Object val=null;\n\n    if (\"str\".equals(type)) {\n      val = getText(nd);\n    } else if (\"int\".equals(type)) {\n      val = Integer.valueOf(getText(nd));\n    } else if (\"long\".equals(type)) {\n      val = Long.valueOf(getText(nd));\n    } else if (\"float\".equals(type)) {\n      val = Float.valueOf(getText(nd));\n    } else if (\"double\".equals(type)) {\n      val = Double.valueOf(getText(nd));\n    } else if (\"bool\".equals(type)) {\n      val = StrUtils.parseBool(getText(nd));\n    } else if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    String type = nd.getNodeName();\n\n    String name = null;\n    if (nd.hasAttributes()) {\n      NamedNodeMap attrs = nd.getAttributes();\n      Node nameNd = attrs.getNamedItem(\"name\");\n      if (nameNd != null) name=nameNd.getNodeValue();\n    }\n\n    Object val=null;\n\n    if (\"str\".equals(type)) {\n      val = getText(nd);\n    } else if (\"int\".equals(type)) {\n      val = Integer.valueOf(getText(nd));\n    } else if (\"long\".equals(type)) {\n      val = Long.valueOf(getText(nd));\n    } else if (\"float\".equals(type)) {\n      val = Float.valueOf(getText(nd));\n    } else if (\"double\".equals(type)) {\n      val = Double.valueOf(getText(nd));\n    } else if (\"bool\".equals(type)) {\n      val = Boolean.valueOf(getText(nd));\n    } else if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","bugFix":null,"bugIntro":["917331df72f531cce1276d5a977dcb20d186d2b0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"917331df72f531cce1276d5a977dcb20d186d2b0","date":1260313583,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","pathOld":"src/common/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","sourceNew":"  /**\n   * Examines a Node from the DOM representation of a NamedList and adds the\n   * contents of that node to both the specified NamedList and List passed\n   * as arguments.\n   *\n   * @param nd The Node whose type will be used to determine how to parse the\n   *           text content.  If there is a 'name' attribute it will be used\n   *           when adding to the NamedList\n   * @param nlst A NamedList to add the item to with name if application.\n   *             If this param is null it will be ignored.\n   * @param arr A List to add the item to.\n   *             If this param is null it will be ignored.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    final String type = nd.getNodeName();\n\n    final String name = getAttr(nd, \"name\");\n\n    Object val=null;\n\n    if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    } else {\n      final String textValue = getText(nd);\n      try {\n        if (\"str\".equals(type)) {\n          val = textValue;\n        } else if (\"int\".equals(type)) {\n          val = Integer.valueOf(textValue);\n        } else if (\"long\".equals(type)) {\n          val = Long.valueOf(textValue);\n        } else if (\"float\".equals(type)) {\n          val = Float.valueOf(textValue);\n        } else if (\"double\".equals(type)) {\n          val = Double.valueOf(textValue);\n        } else if (\"bool\".equals(type)) {\n          val = StrUtils.parseBool(textValue);\n        }\n        // :NOTE: Unexpected Node names are ignored\n        // :TODO: should we generate an error here?\n      } catch (NumberFormatException nfe) {\n        throw new SolrException\n          (SolrException.ErrorCode.SERVER_ERROR,\n           \"Value \" + (null != name ? (\"of '\" +name+ \"' \") : \"\") +\n           \"can not be parsed as '\" +type+ \"': \\\"\" + textValue + \"\\\"\",\n           nfe);\n      }\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    String type = nd.getNodeName();\n\n    String name = null;\n    if (nd.hasAttributes()) {\n      NamedNodeMap attrs = nd.getAttributes();\n      Node nameNd = attrs.getNamedItem(\"name\");\n      if (nameNd != null) name=nameNd.getNodeValue();\n    }\n\n    Object val=null;\n\n    if (\"str\".equals(type)) {\n      val = getText(nd);\n    } else if (\"int\".equals(type)) {\n      val = Integer.valueOf(getText(nd));\n    } else if (\"long\".equals(type)) {\n      val = Long.valueOf(getText(nd));\n    } else if (\"float\".equals(type)) {\n      val = Float.valueOf(getText(nd));\n    } else if (\"double\".equals(type)) {\n      val = Double.valueOf(getText(nd));\n    } else if (\"bool\".equals(type)) {\n      val = StrUtils.parseBool(getText(nd));\n    } else if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","bugFix":["57e91c86e193010fc38028001cf0590693ad2cd1","0c3e228bf650e96f3002a8fb73dd0c13d55af077","634b2cad3477b478f73029f8f5a8d0b5069942d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","pathOld":"src/common/org/apache/solr/common/util/DOMUtil#addToNamedList(Node,NamedList,List).mjava","sourceNew":"  /**\n   * Examines a Node from the DOM representation of a NamedList and adds the\n   * contents of that node to both the specified NamedList and List passed\n   * as arguments.\n   *\n   * @param nd The Node whose type will be used to determine how to parse the\n   *           text content.  If there is a 'name' attribute it will be used\n   *           when adding to the NamedList\n   * @param nlst A NamedList to add the item to with name if application.\n   *             If this param is null it will be ignored.\n   * @param arr A List to add the item to.\n   *             If this param is null it will be ignored.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    final String type = nd.getNodeName();\n\n    final String name = getAttr(nd, \"name\");\n\n    Object val=null;\n\n    if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    } else {\n      final String textValue = getText(nd);\n      try {\n        if (\"str\".equals(type)) {\n          val = textValue;\n        } else if (\"int\".equals(type)) {\n          val = Integer.valueOf(textValue);\n        } else if (\"long\".equals(type)) {\n          val = Long.valueOf(textValue);\n        } else if (\"float\".equals(type)) {\n          val = Float.valueOf(textValue);\n        } else if (\"double\".equals(type)) {\n          val = Double.valueOf(textValue);\n        } else if (\"bool\".equals(type)) {\n          val = StrUtils.parseBool(textValue);\n        }\n        // :NOTE: Unexpected Node names are ignored\n        // :TODO: should we generate an error here?\n      } catch (NumberFormatException nfe) {\n        throw new SolrException\n          (SolrException.ErrorCode.SERVER_ERROR,\n           \"Value \" + (null != name ? (\"of '\" +name+ \"' \") : \"\") +\n           \"can not be parsed as '\" +type+ \"': \\\"\" + textValue + \"\\\"\",\n           nfe);\n      }\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","sourceOld":"  /**\n   * Examines a Node from the DOM representation of a NamedList and adds the\n   * contents of that node to both the specified NamedList and List passed\n   * as arguments.\n   *\n   * @param nd The Node whose type will be used to determine how to parse the\n   *           text content.  If there is a 'name' attribute it will be used\n   *           when adding to the NamedList\n   * @param nlst A NamedList to add the item to with name if application.\n   *             If this param is null it will be ignored.\n   * @param arr A List to add the item to.\n   *             If this param is null it will be ignored.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static void addToNamedList(Node nd, NamedList nlst, List arr) {\n    // Nodes often include whitespace, etc... so just return if this\n    // is not an Element.\n    if (nd.getNodeType() != Node.ELEMENT_NODE) return;\n\n    final String type = nd.getNodeName();\n\n    final String name = getAttr(nd, \"name\");\n\n    Object val=null;\n\n    if (\"lst\".equals(type)) {\n      val = childNodesToNamedList(nd);\n    } else if (\"arr\".equals(type)) {\n      val = childNodesToList(nd);\n    } else {\n      final String textValue = getText(nd);\n      try {\n        if (\"str\".equals(type)) {\n          val = textValue;\n        } else if (\"int\".equals(type)) {\n          val = Integer.valueOf(textValue);\n        } else if (\"long\".equals(type)) {\n          val = Long.valueOf(textValue);\n        } else if (\"float\".equals(type)) {\n          val = Float.valueOf(textValue);\n        } else if (\"double\".equals(type)) {\n          val = Double.valueOf(textValue);\n        } else if (\"bool\".equals(type)) {\n          val = StrUtils.parseBool(textValue);\n        }\n        // :NOTE: Unexpected Node names are ignored\n        // :TODO: should we generate an error here?\n      } catch (NumberFormatException nfe) {\n        throw new SolrException\n          (SolrException.ErrorCode.SERVER_ERROR,\n           \"Value \" + (null != name ? (\"of '\" +name+ \"' \") : \"\") +\n           \"can not be parsed as '\" +type+ \"': \\\"\" + textValue + \"\\\"\",\n           nfe);\n      }\n    }\n\n    if (nlst != null) nlst.add(name,val);\n    if (arr != null) arr.add(val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"917331df72f531cce1276d5a977dcb20d186d2b0":["634b2cad3477b478f73029f8f5a8d0b5069942d4"],"634b2cad3477b478f73029f8f5a8d0b5069942d4":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"ad94625fb8d088209f46650c8097196fec67f00c":["917331df72f531cce1276d5a977dcb20d186d2b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["634b2cad3477b478f73029f8f5a8d0b5069942d4"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"917331df72f531cce1276d5a977dcb20d186d2b0":["ad94625fb8d088209f46650c8097196fec67f00c"],"634b2cad3477b478f73029f8f5a8d0b5069942d4":["917331df72f531cce1276d5a977dcb20d186d2b0"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}