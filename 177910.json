{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea00b25de0d094d032e218976854c250141e7150","date":1321520110,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) o));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":["cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n      } else if (\"collationInternalRank\".equals(n)){\n        //continue;\n      } else if (\"collation\".equals(n)) {\n        List<Object> collationInfo = sugg.getAll(n);\n        collations = new ArrayList<Collation>(collationInfo.size());\n        for (Object o : collationInfo) {\n          if (o instanceof String) {\n            collations.add(new Collation()\n                .setCollationQueryString((String) o));\n          } else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> expandedCollation = (NamedList<Object>) o;\n            String collationQuery\n              = (String) expandedCollation.get(\"collationQuery\");\n            int hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n            NamedList<String> misspellingsAndCorrections\n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n            Collation collation = new Collation();\n            collation.setCollationQueryString(collationQuery);\n            collation.setNumberOfHits(hits);\n\n            for (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n              String misspelling = misspellingsAndCorrections.getName(ii);\n              String correction = misspellingsAndCorrections.getVal(ii);\n              collation.addMisspellingsAndCorrection(new Correction(\n                  misspelling, correction));\n            }\n            collations.add(collation);\n          } else {\n            throw new AssertionError(\n                \"Should get Lists of Strings or List of NamedLists here.\");\n          }\n        }\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) o));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n      } else if (\"collationInternalRank\".equals(n)){\n        //continue;\n      } else if (\"collation\".equals(n)) {\n        List<Object> collationInfo = sugg.getAll(n);\n        collations = new ArrayList<>(collationInfo.size());\n        for (Object o : collationInfo) {\n          if (o instanceof String) {\n            collations.add(new Collation()\n                .setCollationQueryString((String) o));\n          } else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> expandedCollation = (NamedList<Object>) o;\n            String collationQuery\n              = (String) expandedCollation.get(\"collationQuery\");\n            int hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n            NamedList<String> misspellingsAndCorrections\n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n            Collation collation = new Collation();\n            collation.setCollationQueryString(collationQuery);\n            collation.setNumberOfHits(hits);\n\n            for (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n              String misspelling = misspellingsAndCorrections.getName(ii);\n              String correction = misspellingsAndCorrections.getVal(ii);\n              collation.addMisspellingsAndCorrection(new Correction(\n                  misspelling, correction));\n            }\n            collations.add(collation);\n          } else {\n            throw new AssertionError(\n                \"Should get Lists of Strings or List of NamedLists here.\");\n          }\n        }\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n      } else if (\"collationInternalRank\".equals(n)){\n        //continue;\n      } else if (\"collation\".equals(n)) {\n        List<Object> collationInfo = sugg.getAll(n);\n        collations = new ArrayList<Collation>(collationInfo.size());\n        for (Object o : collationInfo) {\n          if (o instanceof String) {\n            collations.add(new Collation()\n                .setCollationQueryString((String) o));\n          } else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> expandedCollation = (NamedList<Object>) o;\n            String collationQuery\n              = (String) expandedCollation.get(\"collationQuery\");\n            int hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n            NamedList<String> misspellingsAndCorrections\n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n            Collation collation = new Collation();\n            collation.setCollationQueryString(collationQuery);\n            collation.setNumberOfHits(hits);\n\n            for (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n              String misspelling = misspellingsAndCorrections.getName(ii);\n              String correction = misspellingsAndCorrections.getVal(ii);\n              collation.addMisspellingsAndCorrection(new Correction(\n                  misspelling, correction));\n            }\n            collations.add(collation);\n          } else {\n            throw new AssertionError(\n                \"Should get Lists of Strings or List of NamedLists here.\");\n          }\n        }\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"343d2d9477b299075fa3a19a46e654b6c3bf552b","date":1407872410,"type":4,"author":"James Dyer","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","sourceNew":null,"sourceOld":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n      } else if (\"collationInternalRank\".equals(n)){\n        //continue;\n      } else if (\"collation\".equals(n)) {\n        List<Object> collationInfo = sugg.getAll(n);\n        collations = new ArrayList<>(collationInfo.size());\n        for (Object o : collationInfo) {\n          if (o instanceof String) {\n            collations.add(new Collation()\n                .setCollationQueryString((String) o));\n          } else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> expandedCollation = (NamedList<Object>) o;\n            String collationQuery\n              = (String) expandedCollation.get(\"collationQuery\");\n            int hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n            NamedList<String> misspellingsAndCorrections\n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n            Collation collation = new Collation();\n            collation.setCollationQueryString(collationQuery);\n            collation.setNumberOfHits(hits);\n\n            for (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n              String misspelling = misspellingsAndCorrections.getName(ii);\n              String correction = misspellingsAndCorrections.getVal(ii);\n              collation.addMisspellingsAndCorrection(new Correction(\n                  misspelling, correction));\n            }\n            collations.add(collation);\n          } else {\n            throw new AssertionError(\n                \"Should get Lists of Strings or List of NamedLists here.\");\n          }\n        }\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea00b25de0d094d032e218976854c250141e7150":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["ea00b25de0d094d032e218976854c250141e7150"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["ea00b25de0d094d032e218976854c250141e7150"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ea00b25de0d094d032e218976854c250141e7150":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}