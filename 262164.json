{"path":"lucene/core/src/java/org/apache/lucene/util/LongsRef#LongsRef(long[],int,int).mjava","commits":[{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongsRef#LongsRef(long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  public LongsRef(long[] longs, int offset, int length) {\n    assert longs != null;\n    assert offset >= 0;\n    assert length >= 0;\n    assert longs.length >= offset + length;\n    this.longs = longs;\n    this.offset = offset;\n    this.length = length;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongsRef#LongsRef(long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  public LongsRef(long[] longs, int offset, int length) {\n    assert longs != null;\n    assert offset >= 0;\n    assert length >= 0;\n    assert longs.length >= offset + length;\n    this.longs = longs;\n    this.offset = offset;\n    this.length = length;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbf9f32ee03f33929efd5be061d73be3d730f126","date":1348097058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongsRef#LongsRef(long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LongsRef#LongsRef(long[],int,int).mjava","sourceNew":"  /** This instance will directly reference longs w/o making a copy.\n   * longs should not be null */\n  public LongsRef(long[] longs, int offset, int length) {\n    assert longs != null;\n    assert offset >= 0;\n    assert length >= 0;\n    assert longs.length >= offset + length;\n    this.longs = longs;\n    this.offset = offset;\n    this.length = length;\n  }\n\n","sourceOld":"  public LongsRef(long[] longs, int offset, int length) {\n    assert longs != null;\n    assert offset >= 0;\n    assert length >= 0;\n    assert longs.length >= offset + length;\n    this.longs = longs;\n    this.offset = offset;\n    this.length = length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d189fdc8896d2ade49b5f851148067314984ab42","date":1359349780,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongsRef#LongsRef(long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LongsRef#LongsRef(long[],int,int).mjava","sourceNew":"  /** This instance will directly reference longs w/o making a copy.\n   * longs should not be null */\n  public LongsRef(long[] longs, int offset, int length) {\n    this.longs = longs;\n    this.offset = offset;\n    this.length = length;\n    assert isValid();\n  }\n\n","sourceOld":"  /** This instance will directly reference longs w/o making a copy.\n   * longs should not be null */\n  public LongsRef(long[] longs, int offset, int length) {\n    assert longs != null;\n    assert offset >= 0;\n    assert length >= 0;\n    assert longs.length >= offset + length;\n    this.longs = longs;\n    this.offset = offset;\n    this.length = length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongsRef#LongsRef(long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LongsRef#LongsRef(long[],int,int).mjava","sourceNew":"  /** This instance will directly reference longs w/o making a copy.\n   * longs should not be null */\n  public LongsRef(long[] longs, int offset, int length) {\n    this.longs = longs;\n    this.offset = offset;\n    this.length = length;\n    assert isValid();\n  }\n\n","sourceOld":"  /** This instance will directly reference longs w/o making a copy.\n   * longs should not be null */\n  public LongsRef(long[] longs, int offset, int length) {\n    assert longs != null;\n    assert offset >= 0;\n    assert length >= 0;\n    assert longs.length >= offset + length;\n    this.longs = longs;\n    this.offset = offset;\n    this.length = length;\n  }\n\n","bugFix":["55110eb60c5105294fc2ae7912d82b750865aa58"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cbf9f32ee03f33929efd5be061d73be3d730f126","d189fdc8896d2ade49b5f851148067314984ab42"],"55110eb60c5105294fc2ae7912d82b750865aa58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d189fdc8896d2ade49b5f851148067314984ab42":["cbf9f32ee03f33929efd5be061d73be3d730f126"],"cbf9f32ee03f33929efd5be061d73be3d730f126":["55110eb60c5105294fc2ae7912d82b750865aa58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55110eb60c5105294fc2ae7912d82b750865aa58":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cbf9f32ee03f33929efd5be061d73be3d730f126"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"d189fdc8896d2ade49b5f851148067314984ab42":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cbf9f32ee03f33929efd5be061d73be3d730f126":["d4d69c535930b5cce125cff868d40f6373dc27d4","d189fdc8896d2ade49b5f851148067314984ab42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}