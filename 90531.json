{"path":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, 1000).totalHits;\n    assertEquals(1, numHits);\n    IOUtils.close(reader, directory, analyzer);\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, 1000).totalHits;\n    assertEquals(1, numHits);\n    IOUtils.close(reader, directory, analyzer);\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6162e2e0751bef4c7b97a35f1df8349c226b2cd","date":1444489751,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":null,"sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(analyzer));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newTextField(\"field\", \"auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"field\", \"first auto update\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, 1000).totalHits;\n    assertEquals(1, numHits);\n    IOUtils.close(reader, directory, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a6162e2e0751bef4c7b97a35f1df8349c226b2cd":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6162e2e0751bef4c7b97a35f1df8349c226b2cd"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a6162e2e0751bef4c7b97a35f1df8349c226b2cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a6162e2e0751bef4c7b97a35f1df8349c226b2cd","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}