{"path":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestGrowableByteArrayDataOutput#testWriteSmallStrings().mjava","commits":[{"id":"bfde954cd162c74a48f6b035e596f252c9939a73","date":1442329231,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestGrowableByteArrayDataOutput#testWriteSmallStrings().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWriteSmallStrings() throws Exception {\n    int minSizeForDoublePass = GrowableByteArrayDataOutput.MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING;\n\n    // a simple string encoding test\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      // create a small string such that the single pass approach is used\n      int length = TestUtil.nextInt(random(), 1, minSizeForDoublePass - 1);\n      String unicode = TestUtil.randomFixedByteLengthUnicodeString(random(), length);\n      byte[] utf8 = new byte[unicode.length() * UnicodeUtil.MAX_UTF8_BYTES_PER_CHAR];\n      int len = UnicodeUtil.UTF16toUTF8(unicode, 0, unicode.length(), utf8);\n\n      GrowableByteArrayDataOutput dataOutput = new GrowableByteArrayDataOutput(1 << 8);\n      //explicitly write utf8 len so that we know how many bytes it occupies\n      dataOutput.writeVInt(len);\n      int vintLen = dataOutput.length;\n      // now write the string which will internally write number of bytes as a vint and then utf8 bytes\n      dataOutput.writeString(unicode);\n\n      assertEquals(\"GrowableByteArrayDataOutput wrote the wrong length after encode\", len + vintLen * 2, dataOutput.length);\n      for (int j = 0, k = vintLen * 2; j < len; j++, k++) {\n        assertEquals(utf8[j], dataOutput.bytes[k]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c49ea3d4279fbc211c84a5d81ff591b5f8d18e83"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c49ea3d4279fbc211c84a5d81ff591b5f8d18e83","date":1478775068,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestGrowableByteArrayDataOutput#testWriteSmallStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestGrowableByteArrayDataOutput#testWriteSmallStrings().mjava","sourceNew":"  @Test\n  public void testWriteSmallStrings() throws Exception {\n    int minSizeForDoublePass = GrowableByteArrayDataOutput.MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING;\n\n    // a simple string encoding test\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      // create a small string such that the single pass approach is used\n      int length = TestUtil.nextInt(random(), 1, minSizeForDoublePass - 1);\n      String unicode = TestUtil.randomFixedByteLengthUnicodeString(random(), length);\n      byte[] utf8 = new byte[UnicodeUtil.maxUTF8Length(unicode.length())];\n      int len = UnicodeUtil.UTF16toUTF8(unicode, 0, unicode.length(), utf8);\n\n      GrowableByteArrayDataOutput dataOutput = new GrowableByteArrayDataOutput(1 << 8);\n      //explicitly write utf8 len so that we know how many bytes it occupies\n      dataOutput.writeVInt(len);\n      int vintLen = dataOutput.length;\n      // now write the string which will internally write number of bytes as a vint and then utf8 bytes\n      dataOutput.writeString(unicode);\n\n      assertEquals(\"GrowableByteArrayDataOutput wrote the wrong length after encode\", len + vintLen * 2, dataOutput.length);\n      for (int j = 0, k = vintLen * 2; j < len; j++, k++) {\n        assertEquals(utf8[j], dataOutput.bytes[k]);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWriteSmallStrings() throws Exception {\n    int minSizeForDoublePass = GrowableByteArrayDataOutput.MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING;\n\n    // a simple string encoding test\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      // create a small string such that the single pass approach is used\n      int length = TestUtil.nextInt(random(), 1, minSizeForDoublePass - 1);\n      String unicode = TestUtil.randomFixedByteLengthUnicodeString(random(), length);\n      byte[] utf8 = new byte[unicode.length() * UnicodeUtil.MAX_UTF8_BYTES_PER_CHAR];\n      int len = UnicodeUtil.UTF16toUTF8(unicode, 0, unicode.length(), utf8);\n\n      GrowableByteArrayDataOutput dataOutput = new GrowableByteArrayDataOutput(1 << 8);\n      //explicitly write utf8 len so that we know how many bytes it occupies\n      dataOutput.writeVInt(len);\n      int vintLen = dataOutput.length;\n      // now write the string which will internally write number of bytes as a vint and then utf8 bytes\n      dataOutput.writeString(unicode);\n\n      assertEquals(\"GrowableByteArrayDataOutput wrote the wrong length after encode\", len + vintLen * 2, dataOutput.length);\n      for (int j = 0, k = vintLen * 2; j < len; j++, k++) {\n        assertEquals(utf8[j], dataOutput.bytes[k]);\n      }\n    }\n  }\n\n","bugFix":["bfde954cd162c74a48f6b035e596f252c9939a73"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestGrowableByteArrayDataOutput#testWriteSmallStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestGrowableByteArrayDataOutput#testWriteSmallStrings().mjava","sourceNew":"  @Test\n  public void testWriteSmallStrings() throws Exception {\n    int minSizeForDoublePass = GrowableByteArrayDataOutput.MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING;\n\n    // a simple string encoding test\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      // create a small string such that the single pass approach is used\n      int length = TestUtil.nextInt(random(), 1, minSizeForDoublePass - 1);\n      String unicode = TestUtil.randomFixedByteLengthUnicodeString(random(), length);\n      byte[] utf8 = new byte[UnicodeUtil.maxUTF8Length(unicode.length())];\n      int len = UnicodeUtil.UTF16toUTF8(unicode, 0, unicode.length(), utf8);\n\n      GrowableByteArrayDataOutput dataOutput = new GrowableByteArrayDataOutput(1 << 8);\n      //explicitly write utf8 len so that we know how many bytes it occupies\n      dataOutput.writeVInt(len);\n      int vintLen = dataOutput.length;\n      // now write the string which will internally write number of bytes as a vint and then utf8 bytes\n      dataOutput.writeString(unicode);\n\n      assertEquals(\"GrowableByteArrayDataOutput wrote the wrong length after encode\", len + vintLen * 2, dataOutput.length);\n      for (int j = 0, k = vintLen * 2; j < len; j++, k++) {\n        assertEquals(utf8[j], dataOutput.bytes[k]);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWriteSmallStrings() throws Exception {\n    int minSizeForDoublePass = GrowableByteArrayDataOutput.MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING;\n\n    // a simple string encoding test\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      // create a small string such that the single pass approach is used\n      int length = TestUtil.nextInt(random(), 1, minSizeForDoublePass - 1);\n      String unicode = TestUtil.randomFixedByteLengthUnicodeString(random(), length);\n      byte[] utf8 = new byte[unicode.length() * UnicodeUtil.MAX_UTF8_BYTES_PER_CHAR];\n      int len = UnicodeUtil.UTF16toUTF8(unicode, 0, unicode.length(), utf8);\n\n      GrowableByteArrayDataOutput dataOutput = new GrowableByteArrayDataOutput(1 << 8);\n      //explicitly write utf8 len so that we know how many bytes it occupies\n      dataOutput.writeVInt(len);\n      int vintLen = dataOutput.length;\n      // now write the string which will internally write number of bytes as a vint and then utf8 bytes\n      dataOutput.writeString(unicode);\n\n      assertEquals(\"GrowableByteArrayDataOutput wrote the wrong length after encode\", len + vintLen * 2, dataOutput.length);\n      for (int j = 0, k = vintLen * 2; j < len; j++, k++) {\n        assertEquals(utf8[j], dataOutput.bytes[k]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9","date":1481155163,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestGrowableByteArrayDataOutput#testWriteSmallStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestGrowableByteArrayDataOutput#testWriteSmallStrings().mjava","sourceNew":"  @Test\n  public void testWriteSmallStrings() throws Exception {\n    int minSizeForDoublePass = GrowableByteArrayDataOutput.MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING;\n\n    // a simple string encoding test\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      // create a small string such that the single pass approach is used\n      int length = TestUtil.nextInt(random(), 1, minSizeForDoublePass - 1);\n      String unicode = TestUtil.randomFixedByteLengthUnicodeString(random(), length);\n      byte[] utf8 = new byte[UnicodeUtil.maxUTF8Length(unicode.length())];\n      int len = UnicodeUtil.UTF16toUTF8(unicode, 0, unicode.length(), utf8);\n\n      GrowableByteArrayDataOutput dataOutput = new GrowableByteArrayDataOutput(1 << 8);\n      //explicitly write utf8 len so that we know how many bytes it occupies\n      dataOutput.writeVInt(len);\n      int vintLen = dataOutput.getPosition();\n      // now write the string which will internally write number of bytes as a vint and then utf8 bytes\n      dataOutput.writeString(unicode);\n\n      assertEquals(\"GrowableByteArrayDataOutput wrote the wrong length after encode\", len + vintLen * 2, dataOutput.getPosition());\n      for (int j = 0, k = vintLen * 2; j < len; j++, k++) {\n        assertEquals(utf8[j], dataOutput.getBytes()[k]);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWriteSmallStrings() throws Exception {\n    int minSizeForDoublePass = GrowableByteArrayDataOutput.MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING;\n\n    // a simple string encoding test\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      // create a small string such that the single pass approach is used\n      int length = TestUtil.nextInt(random(), 1, minSizeForDoublePass - 1);\n      String unicode = TestUtil.randomFixedByteLengthUnicodeString(random(), length);\n      byte[] utf8 = new byte[UnicodeUtil.maxUTF8Length(unicode.length())];\n      int len = UnicodeUtil.UTF16toUTF8(unicode, 0, unicode.length(), utf8);\n\n      GrowableByteArrayDataOutput dataOutput = new GrowableByteArrayDataOutput(1 << 8);\n      //explicitly write utf8 len so that we know how many bytes it occupies\n      dataOutput.writeVInt(len);\n      int vintLen = dataOutput.length;\n      // now write the string which will internally write number of bytes as a vint and then utf8 bytes\n      dataOutput.writeString(unicode);\n\n      assertEquals(\"GrowableByteArrayDataOutput wrote the wrong length after encode\", len + vintLen * 2, dataOutput.length);\n      for (int j = 0, k = vintLen * 2; j < len; j++, k++) {\n        assertEquals(utf8[j], dataOutput.bytes[k]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestGrowableByteArrayDataOutput#testWriteSmallStrings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestGrowableByteArrayDataOutput#testWriteSmallStrings().mjava","sourceNew":"  @Test\n  public void testWriteSmallStrings() throws Exception {\n    int minSizeForDoublePass = GrowableByteArrayDataOutput.MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING;\n\n    // a simple string encoding test\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      // create a small string such that the single pass approach is used\n      int length = TestUtil.nextInt(random(), 1, minSizeForDoublePass - 1);\n      String unicode = TestUtil.randomFixedByteLengthUnicodeString(random(), length);\n      byte[] utf8 = new byte[UnicodeUtil.maxUTF8Length(unicode.length())];\n      int len = UnicodeUtil.UTF16toUTF8(unicode, 0, unicode.length(), utf8);\n\n      GrowableByteArrayDataOutput dataOutput = new GrowableByteArrayDataOutput(1 << 8);\n      //explicitly write utf8 len so that we know how many bytes it occupies\n      dataOutput.writeVInt(len);\n      int vintLen = dataOutput.getPosition();\n      // now write the string which will internally write number of bytes as a vint and then utf8 bytes\n      dataOutput.writeString(unicode);\n\n      assertEquals(\"GrowableByteArrayDataOutput wrote the wrong length after encode\", len + vintLen * 2, dataOutput.getPosition());\n      for (int j = 0, k = vintLen * 2; j < len; j++, k++) {\n        assertEquals(utf8[j], dataOutput.getBytes()[k]);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWriteSmallStrings() throws Exception {\n    int minSizeForDoublePass = GrowableByteArrayDataOutput.MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING;\n\n    // a simple string encoding test\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      // create a small string such that the single pass approach is used\n      int length = TestUtil.nextInt(random(), 1, minSizeForDoublePass - 1);\n      String unicode = TestUtil.randomFixedByteLengthUnicodeString(random(), length);\n      byte[] utf8 = new byte[UnicodeUtil.maxUTF8Length(unicode.length())];\n      int len = UnicodeUtil.UTF16toUTF8(unicode, 0, unicode.length(), utf8);\n\n      GrowableByteArrayDataOutput dataOutput = new GrowableByteArrayDataOutput(1 << 8);\n      //explicitly write utf8 len so that we know how many bytes it occupies\n      dataOutput.writeVInt(len);\n      int vintLen = dataOutput.length;\n      // now write the string which will internally write number of bytes as a vint and then utf8 bytes\n      dataOutput.writeString(unicode);\n\n      assertEquals(\"GrowableByteArrayDataOutput wrote the wrong length after encode\", len + vintLen * 2, dataOutput.length);\n      for (int j = 0, k = vintLen * 2; j < len; j++, k++) {\n        assertEquals(utf8[j], dataOutput.bytes[k]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfde954cd162c74a48f6b035e596f252c9939a73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c49ea3d4279fbc211c84a5d81ff591b5f8d18e83":["bfde954cd162c74a48f6b035e596f252c9939a73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["bfde954cd162c74a48f6b035e596f252c9939a73","c49ea3d4279fbc211c84a5d81ff591b5f8d18e83"],"9856095f7afb5a607bf5e65077615ed91273508c":["199dfa410f1fdbfd3294106b04096cce5ed34b21","c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["c49ea3d4279fbc211c84a5d81ff591b5f8d18e83"]},"commit2Childs":{"bfde954cd162c74a48f6b035e596f252c9939a73":["c49ea3d4279fbc211c84a5d81ff591b5f8d18e83","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"c49ea3d4279fbc211c84a5d81ff591b5f8d18e83":["199dfa410f1fdbfd3294106b04096cce5ed34b21","c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfde954cd162c74a48f6b035e596f252c9939a73"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}