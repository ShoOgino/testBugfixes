{"path":"solr/core/src/test/org/apache/solr/util/TestUtils#testBinaryCommands().mjava","commits":[{"id":"4d3fc88a06a44fc3112186e9be4562b36713955d","date":1497587751,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testBinaryCommands().mjava","pathOld":"/dev/null","sourceNew":"  public void testBinaryCommands() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal((MapWriter) ew -> {\n      ew.put(\"set-user\", fromJSONString(\"{x:y}\"));\n      ew.put(\"set-user\", fromJSONString(\"{x:y,x1:y1}\"));\n      ew.put(\"single\", Arrays.asList(fromJSONString(\"[{x:y,x1:y1},{x2:y2}]\"), fromJSONString( \"{x2:y2}\")));\n      ew.put(\"multi\", Arrays.asList(fromJSONString(\"{x:y,x1:y1}\"), fromJSONString( \"{x2:y2}\")));\n    }, baos);\n\n    ContentStream stream = new ContentStreamBase.ByteArrayStream(baos.toByteArray(),null, \"application/javabin\");\n    List<CommandOperation> commands = CommandOperation.readCommands(Collections.singletonList(stream), new NamedList(), Collections.singleton(\"single\"));\n\n    assertEquals(5, commands.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testBinaryCommands().mjava","pathOld":"/dev/null","sourceNew":"  public void testBinaryCommands() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal((MapWriter) ew -> {\n      ew.put(\"set-user\", fromJSONString(\"{x:y}\"));\n      ew.put(\"set-user\", fromJSONString(\"{x:y,x1:y1}\"));\n      ew.put(\"single\", Arrays.asList(fromJSONString(\"[{x:y,x1:y1},{x2:y2}]\"), fromJSONString( \"{x2:y2}\")));\n      ew.put(\"multi\", Arrays.asList(fromJSONString(\"{x:y,x1:y1}\"), fromJSONString( \"{x2:y2}\")));\n    }, baos);\n\n    ContentStream stream = new ContentStreamBase.ByteArrayStream(baos.toByteArray(),null, \"application/javabin\");\n    List<CommandOperation> commands = CommandOperation.readCommands(Collections.singletonList(stream), new NamedList(), Collections.singleton(\"single\"));\n\n    assertEquals(5, commands.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testBinaryCommands().mjava","pathOld":"/dev/null","sourceNew":"  public void testBinaryCommands() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal((MapWriter) ew -> {\n      ew.put(\"set-user\", fromJSONString(\"{x:y}\"));\n      ew.put(\"set-user\", fromJSONString(\"{x:y,x1:y1}\"));\n      ew.put(\"single\", Arrays.asList(fromJSONString(\"[{x:y,x1:y1},{x2:y2}]\"), fromJSONString( \"{x2:y2}\")));\n      ew.put(\"multi\", Arrays.asList(fromJSONString(\"{x:y,x1:y1}\"), fromJSONString( \"{x2:y2}\")));\n    }, baos);\n\n    ContentStream stream = new ContentStreamBase.ByteArrayStream(baos.toByteArray(),null, \"application/javabin\");\n    List<CommandOperation> commands = CommandOperation.readCommands(Collections.singletonList(stream), new NamedList(), Collections.singleton(\"single\"));\n\n    assertEquals(5, commands.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"432ae20f31957196983566265f0dae4a9eb8960f","date":1500294156,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testBinaryCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testBinaryCommands().mjava","sourceNew":"  public void testBinaryCommands() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try (final JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal((MapWriter) ew -> {\n        ew.put(\"set-user\", fromJSONString(\"{x:y}\"));\n        ew.put(\"set-user\", fromJSONString(\"{x:y,x1:y1}\"));\n        ew.put(\"single\", Arrays.asList(fromJSONString(\"[{x:y,x1:y1},{x2:y2}]\"), fromJSONString( \"{x2:y2}\")));\n        ew.put(\"multi\", Arrays.asList(fromJSONString(\"{x:y,x1:y1}\"), fromJSONString( \"{x2:y2}\")));\n      }, baos);\n    }\n\n    ContentStream stream = new ContentStreamBase.ByteArrayStream(baos.toByteArray(),null, \"application/javabin\");\n    List<CommandOperation> commands = CommandOperation.readCommands(Collections.singletonList(stream), new NamedList(), Collections.singleton(\"single\"));\n\n    assertEquals(5, commands.size());\n  }\n\n","sourceOld":"  public void testBinaryCommands() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal((MapWriter) ew -> {\n      ew.put(\"set-user\", fromJSONString(\"{x:y}\"));\n      ew.put(\"set-user\", fromJSONString(\"{x:y,x1:y1}\"));\n      ew.put(\"single\", Arrays.asList(fromJSONString(\"[{x:y,x1:y1},{x2:y2}]\"), fromJSONString( \"{x2:y2}\")));\n      ew.put(\"multi\", Arrays.asList(fromJSONString(\"{x:y,x1:y1}\"), fromJSONString( \"{x2:y2}\")));\n    }, baos);\n\n    ContentStream stream = new ContentStreamBase.ByteArrayStream(baos.toByteArray(),null, \"application/javabin\");\n    List<CommandOperation> commands = CommandOperation.readCommands(Collections.singletonList(stream), new NamedList(), Collections.singleton(\"single\"));\n\n    assertEquals(5, commands.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testBinaryCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testBinaryCommands().mjava","sourceNew":"  public void testBinaryCommands() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try (final JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal((MapWriter) ew -> {\n        ew.put(\"set-user\", fromJSONString(\"{x:y}\"));\n        ew.put(\"set-user\", fromJSONString(\"{x:y,x1:y1}\"));\n        ew.put(\"single\", Arrays.asList(fromJSONString(\"[{x:y,x1:y1},{x2:y2}]\"), fromJSONString( \"{x2:y2}\")));\n        ew.put(\"multi\", Arrays.asList(fromJSONString(\"{x:y,x1:y1}\"), fromJSONString( \"{x2:y2}\")));\n      }, baos);\n    }\n\n    ContentStream stream = new ContentStreamBase.ByteArrayStream(baos.toByteArray(),null, \"application/javabin\");\n    List<CommandOperation> commands = CommandOperation.readCommands(Collections.singletonList(stream), new NamedList(), Collections.singleton(\"single\"));\n\n    assertEquals(5, commands.size());\n  }\n\n","sourceOld":"  public void testBinaryCommands() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal((MapWriter) ew -> {\n      ew.put(\"set-user\", fromJSONString(\"{x:y}\"));\n      ew.put(\"set-user\", fromJSONString(\"{x:y,x1:y1}\"));\n      ew.put(\"single\", Arrays.asList(fromJSONString(\"[{x:y,x1:y1},{x2:y2}]\"), fromJSONString( \"{x2:y2}\")));\n      ew.put(\"multi\", Arrays.asList(fromJSONString(\"{x:y,x1:y1}\"), fromJSONString( \"{x2:y2}\")));\n    }, baos);\n\n    ContentStream stream = new ContentStreamBase.ByteArrayStream(baos.toByteArray(),null, \"application/javabin\");\n    List<CommandOperation> commands = CommandOperation.readCommands(Collections.singletonList(stream), new NamedList(), Collections.singleton(\"single\"));\n\n    assertEquals(5, commands.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3167eae3325cf45449a75ab0468b53c0545606a3","date":1538465698,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testBinaryCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testBinaryCommands().mjava","sourceNew":"  public void testBinaryCommands() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try (final JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal((MapWriter) ew -> {\n        ew.put(\"set-user\", fromJSONString(\"{x:y}\"));\n        ew.put(\"set-user\", fromJSONString(\"{x:y,x1:y1}\"));\n        ew.put(\"single\", asList(fromJSONString(\"[{x:y,x1:y1},{x2:y2}]\"), fromJSONString( \"{x2:y2}\")));\n        ew.put(\"multi\", asList(fromJSONString(\"{x:y,x1:y1}\"), fromJSONString( \"{x2:y2}\")));\n      }, baos);\n    }\n\n    ContentStream stream = new ContentStreamBase.ByteArrayStream(baos.toByteArray(),null, \"application/javabin\");\n    List<CommandOperation> commands = CommandOperation.readCommands(Collections.singletonList(stream), new NamedList(), Collections.singleton(\"single\"));\n\n    assertEquals(5, commands.size());\n  }\n\n","sourceOld":"  public void testBinaryCommands() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try (final JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal((MapWriter) ew -> {\n        ew.put(\"set-user\", fromJSONString(\"{x:y}\"));\n        ew.put(\"set-user\", fromJSONString(\"{x:y,x1:y1}\"));\n        ew.put(\"single\", Arrays.asList(fromJSONString(\"[{x:y,x1:y1},{x2:y2}]\"), fromJSONString( \"{x2:y2}\")));\n        ew.put(\"multi\", Arrays.asList(fromJSONString(\"{x:y,x1:y1}\"), fromJSONString( \"{x2:y2}\")));\n      }, baos);\n    }\n\n    ContentStream stream = new ContentStreamBase.ByteArrayStream(baos.toByteArray(),null, \"application/javabin\");\n    List<CommandOperation> commands = CommandOperation.readCommands(Collections.singletonList(stream), new NamedList(), Collections.singleton(\"single\"));\n\n    assertEquals(5, commands.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testBinaryCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testBinaryCommands().mjava","sourceNew":"  public void testBinaryCommands() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try (final JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal((MapWriter) ew -> {\n        ew.put(\"set-user\", fromJSONString(\"{x:y}\"));\n        ew.put(\"set-user\", fromJSONString(\"{x:y,x1:y1}\"));\n        ew.put(\"single\", asList(fromJSONString(\"[{x:y,x1:y1},{x2:y2}]\"), fromJSONString( \"{x2:y2}\")));\n        ew.put(\"multi\", asList(fromJSONString(\"{x:y,x1:y1}\"), fromJSONString( \"{x2:y2}\")));\n      }, baos);\n    }\n\n    ContentStream stream = new ContentStreamBase.ByteArrayStream(baos.toByteArray(),null, \"application/javabin\");\n    @SuppressWarnings({\"rawtypes\"})\n    List<CommandOperation> commands = CommandOperation.readCommands(Collections.singletonList(stream), new NamedList(), Collections.singleton(\"single\"));\n\n    assertEquals(5, commands.size());\n  }\n\n","sourceOld":"  public void testBinaryCommands() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try (final JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal((MapWriter) ew -> {\n        ew.put(\"set-user\", fromJSONString(\"{x:y}\"));\n        ew.put(\"set-user\", fromJSONString(\"{x:y,x1:y1}\"));\n        ew.put(\"single\", asList(fromJSONString(\"[{x:y,x1:y1},{x2:y2}]\"), fromJSONString( \"{x2:y2}\")));\n        ew.put(\"multi\", asList(fromJSONString(\"{x:y,x1:y1}\"), fromJSONString( \"{x2:y2}\")));\n      }, baos);\n    }\n\n    ContentStream stream = new ContentStreamBase.ByteArrayStream(baos.toByteArray(),null, \"application/javabin\");\n    List<CommandOperation> commands = CommandOperation.readCommands(Collections.singletonList(stream), new NamedList(), Collections.singleton(\"single\"));\n\n    assertEquals(5, commands.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d3fc88a06a44fc3112186e9be4562b36713955d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","432ae20f31957196983566265f0dae4a9eb8960f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3167eae3325cf45449a75ab0468b53c0545606a3":["432ae20f31957196983566265f0dae4a9eb8960f"],"432ae20f31957196983566265f0dae4a9eb8960f":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4d3fc88a06a44fc3112186e9be4562b36713955d"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4d3fc88a06a44fc3112186e9be4562b36713955d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["3167eae3325cf45449a75ab0468b53c0545606a3"]},"commit2Childs":{"4d3fc88a06a44fc3112186e9be4562b36713955d":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d3fc88a06a44fc3112186e9be4562b36713955d","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"432ae20f31957196983566265f0dae4a9eb8960f":["aaf90fc29510e72665ac7934f34c3d1c25efad64","3167eae3325cf45449a75ab0468b53c0545606a3"],"3167eae3325cf45449a75ab0468b53c0545606a3":["e98520789adb1d5ad05afb4956eca0944a929688"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"28288370235ed02234a64753cdbf0c6ec096304a":["432ae20f31957196983566265f0dae4a9eb8960f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}