{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPivot().mjava","commits":[{"id":"01b58fc90ed89647d3b14eb044e71e3cbcc26bec","date":1541596457,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPivot().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPivot() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=list(tuple(fx=x1, fy=f1, fv=add(1,1)), \" +\n        \"                      tuple(fx=x1, fy=f2, fv=add(1,3)), \" +\n        \"                      tuple(fx=x2, fy=f1, fv=add(1,7)), \" +\n        \"                      tuple(fx=x3, fy=f1, fv=add(1,4)),\" +\n        \"                      tuple(fx=x3, fy=f3, fv=add(1,7))),\" +\n                   \"    b=pivot(a, fx, fy, fv),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"b\");\n    List<Number> row1 = matrix.get(0);\n    assertEquals(row1.get(0).doubleValue(), 2.0,0);\n    assertEquals(row1.get(1).doubleValue(), 4.0,0);\n    assertEquals(row1.get(2).doubleValue(), 0,0);\n    List<Number> row2 = matrix.get(1);\n    assertEquals(row2.get(0).doubleValue(), 8.0,0);\n    assertEquals(row2.get(1).doubleValue(), 0,0);\n    assertEquals(row2.get(2).doubleValue(), 0,0);\n    List<Number> row3 = matrix.get(2);\n    assertEquals(row3.get(0).doubleValue(), 5.0,0);\n    assertEquals(row3.get(1).doubleValue(), 0,0);\n    assertEquals(row3.get(2).doubleValue(), 8.0,0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.get(0), \"x1\");\n    assertEquals(rowLabels.get(1), \"x2\");\n    assertEquals(rowLabels.get(2), \"x3\");\n    List<String> columnLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.get(0), \"f1\");\n    assertEquals(columnLabels.get(1), \"f2\");\n    assertEquals(columnLabels.get(2), \"f3\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35cc45f54fe95a5534e02f9b8ca2a54af211ded5","date":1564774706,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPivot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPivot().mjava","sourceNew":"  @Test\n  public void testPivot() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=list(tuple(fx=x1, fy=f1, fv=add(1,1)), \" +\n        \"                      tuple(fx=x1, fy=f2, fv=add(1,3)), \" +\n        \"                      tuple(fx=x2, fy=f1, fv=add(1,7)), \" +\n        \"                      tuple(fx=x3, fy=f1, fv=add(1,4)),\" +\n        \"                      tuple(fx=x3, fy=f3, fv=add(1,7))),\" +\n                   \"    b=pivot(a, \\\"fx\\\", \\\"fy\\\", \\\"fv\\\"),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"b\");\n    List<Number> row1 = matrix.get(0);\n    assertEquals(row1.get(0).doubleValue(), 2.0,0);\n    assertEquals(row1.get(1).doubleValue(), 4.0,0);\n    assertEquals(row1.get(2).doubleValue(), 0,0);\n    List<Number> row2 = matrix.get(1);\n    assertEquals(row2.get(0).doubleValue(), 8.0,0);\n    assertEquals(row2.get(1).doubleValue(), 0,0);\n    assertEquals(row2.get(2).doubleValue(), 0,0);\n    List<Number> row3 = matrix.get(2);\n    assertEquals(row3.get(0).doubleValue(), 5.0,0);\n    assertEquals(row3.get(1).doubleValue(), 0,0);\n    assertEquals(row3.get(2).doubleValue(), 8.0,0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.get(0), \"x1\");\n    assertEquals(rowLabels.get(1), \"x2\");\n    assertEquals(rowLabels.get(2), \"x3\");\n    List<String> columnLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.get(0), \"f1\");\n    assertEquals(columnLabels.get(1), \"f2\");\n    assertEquals(columnLabels.get(2), \"f3\");\n  }\n\n","sourceOld":"  @Test\n  public void testPivot() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=list(tuple(fx=x1, fy=f1, fv=add(1,1)), \" +\n        \"                      tuple(fx=x1, fy=f2, fv=add(1,3)), \" +\n        \"                      tuple(fx=x2, fy=f1, fv=add(1,7)), \" +\n        \"                      tuple(fx=x3, fy=f1, fv=add(1,4)),\" +\n        \"                      tuple(fx=x3, fy=f3, fv=add(1,7))),\" +\n                   \"    b=pivot(a, fx, fy, fv),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"b\");\n    List<Number> row1 = matrix.get(0);\n    assertEquals(row1.get(0).doubleValue(), 2.0,0);\n    assertEquals(row1.get(1).doubleValue(), 4.0,0);\n    assertEquals(row1.get(2).doubleValue(), 0,0);\n    List<Number> row2 = matrix.get(1);\n    assertEquals(row2.get(0).doubleValue(), 8.0,0);\n    assertEquals(row2.get(1).doubleValue(), 0,0);\n    assertEquals(row2.get(2).doubleValue(), 0,0);\n    List<Number> row3 = matrix.get(2);\n    assertEquals(row3.get(0).doubleValue(), 5.0,0);\n    assertEquals(row3.get(1).doubleValue(), 0,0);\n    assertEquals(row3.get(2).doubleValue(), 8.0,0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.get(0), \"x1\");\n    assertEquals(rowLabels.get(1), \"x2\");\n    assertEquals(rowLabels.get(2), \"x3\");\n    List<String> columnLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.get(0), \"f1\");\n    assertEquals(columnLabels.get(1), \"f2\");\n    assertEquals(columnLabels.get(2), \"f3\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPivot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPivot().mjava","sourceNew":"  @Test\n  public void testPivot() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=list(tuple(fx=x1, fy=f1, fv=add(1,1)), \" +\n        \"                      tuple(fx=x1, fy=f2, fv=add(1,3)), \" +\n        \"                      tuple(fx=x2, fy=f1, fv=add(1,7)), \" +\n        \"                      tuple(fx=x3, fy=f1, fv=add(1,4)),\" +\n        \"                      tuple(fx=x3, fy=f3, fv=add(1,7))),\" +\n                   \"    b=pivot(a, \\\"fx\\\", \\\"fy\\\", \\\"fv\\\"),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"b\");\n    List<Number> row1 = matrix.get(0);\n    assertEquals(row1.get(0).doubleValue(), 2.0,0);\n    assertEquals(row1.get(1).doubleValue(), 4.0,0);\n    assertEquals(row1.get(2).doubleValue(), 0,0);\n    List<Number> row2 = matrix.get(1);\n    assertEquals(row2.get(0).doubleValue(), 8.0,0);\n    assertEquals(row2.get(1).doubleValue(), 0,0);\n    assertEquals(row2.get(2).doubleValue(), 0,0);\n    List<Number> row3 = matrix.get(2);\n    assertEquals(row3.get(0).doubleValue(), 5.0,0);\n    assertEquals(row3.get(1).doubleValue(), 0,0);\n    assertEquals(row3.get(2).doubleValue(), 8.0,0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.get(0), \"x1\");\n    assertEquals(rowLabels.get(1), \"x2\");\n    assertEquals(rowLabels.get(2), \"x3\");\n    List<String> columnLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.get(0), \"f1\");\n    assertEquals(columnLabels.get(1), \"f2\");\n    assertEquals(columnLabels.get(2), \"f3\");\n  }\n\n","sourceOld":"  @Test\n  public void testPivot() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=list(tuple(fx=x1, fy=f1, fv=add(1,1)), \" +\n        \"                      tuple(fx=x1, fy=f2, fv=add(1,3)), \" +\n        \"                      tuple(fx=x2, fy=f1, fv=add(1,7)), \" +\n        \"                      tuple(fx=x3, fy=f1, fv=add(1,4)),\" +\n        \"                      tuple(fx=x3, fy=f3, fv=add(1,7))),\" +\n                   \"    b=pivot(a, fx, fy, fv),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"b\");\n    List<Number> row1 = matrix.get(0);\n    assertEquals(row1.get(0).doubleValue(), 2.0,0);\n    assertEquals(row1.get(1).doubleValue(), 4.0,0);\n    assertEquals(row1.get(2).doubleValue(), 0,0);\n    List<Number> row2 = matrix.get(1);\n    assertEquals(row2.get(0).doubleValue(), 8.0,0);\n    assertEquals(row2.get(1).doubleValue(), 0,0);\n    assertEquals(row2.get(2).doubleValue(), 0,0);\n    List<Number> row3 = matrix.get(2);\n    assertEquals(row3.get(0).doubleValue(), 5.0,0);\n    assertEquals(row3.get(1).doubleValue(), 0,0);\n    assertEquals(row3.get(2).doubleValue(), 8.0,0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.get(0), \"x1\");\n    assertEquals(rowLabels.get(1), \"x2\");\n    assertEquals(rowLabels.get(2), \"x3\");\n    List<String> columnLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.get(0), \"f1\");\n    assertEquals(columnLabels.get(1), \"f2\");\n    assertEquals(columnLabels.get(2), \"f3\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPivot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPivot().mjava","sourceNew":"  @Test\n  public void testPivot() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=list(tuple(fx=x1, fy=f1, fv=add(1,1)), \" +\n        \"                      tuple(fx=x1, fy=f2, fv=add(1,3)), \" +\n        \"                      tuple(fx=x2, fy=f1, fv=add(1,7)), \" +\n        \"                      tuple(fx=x3, fy=f1, fv=add(1,4)),\" +\n        \"                      tuple(fx=x3, fy=f3, fv=add(1,7))),\" +\n                   \"    b=pivot(a, \\\"fx\\\", \\\"fy\\\", \\\"fv\\\"),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"b\");\n    List<Number> row1 = matrix.get(0);\n    assertEquals(row1.get(0).doubleValue(), 2.0,0);\n    assertEquals(row1.get(1).doubleValue(), 4.0,0);\n    assertEquals(row1.get(2).doubleValue(), 0,0);\n    List<Number> row2 = matrix.get(1);\n    assertEquals(row2.get(0).doubleValue(), 8.0,0);\n    assertEquals(row2.get(1).doubleValue(), 0,0);\n    assertEquals(row2.get(2).doubleValue(), 0,0);\n    List<Number> row3 = matrix.get(2);\n    assertEquals(row3.get(0).doubleValue(), 5.0,0);\n    assertEquals(row3.get(1).doubleValue(), 0,0);\n    assertEquals(row3.get(2).doubleValue(), 8.0,0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.get(0), \"x1\");\n    assertEquals(rowLabels.get(1), \"x2\");\n    assertEquals(rowLabels.get(2), \"x3\");\n    List<String> columnLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.get(0), \"f1\");\n    assertEquals(columnLabels.get(1), \"f2\");\n    assertEquals(columnLabels.get(2), \"f3\");\n  }\n\n","sourceOld":"  @Test\n  public void testPivot() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=list(tuple(fx=x1, fy=f1, fv=add(1,1)), \" +\n        \"                      tuple(fx=x1, fy=f2, fv=add(1,3)), \" +\n        \"                      tuple(fx=x2, fy=f1, fv=add(1,7)), \" +\n        \"                      tuple(fx=x3, fy=f1, fv=add(1,4)),\" +\n        \"                      tuple(fx=x3, fy=f3, fv=add(1,7))),\" +\n                   \"    b=pivot(a, fx, fy, fv),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"b\");\n    List<Number> row1 = matrix.get(0);\n    assertEquals(row1.get(0).doubleValue(), 2.0,0);\n    assertEquals(row1.get(1).doubleValue(), 4.0,0);\n    assertEquals(row1.get(2).doubleValue(), 0,0);\n    List<Number> row2 = matrix.get(1);\n    assertEquals(row2.get(0).doubleValue(), 8.0,0);\n    assertEquals(row2.get(1).doubleValue(), 0,0);\n    assertEquals(row2.get(2).doubleValue(), 0,0);\n    List<Number> row3 = matrix.get(2);\n    assertEquals(row3.get(0).doubleValue(), 5.0,0);\n    assertEquals(row3.get(1).doubleValue(), 0,0);\n    assertEquals(row3.get(2).doubleValue(), 8.0,0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.get(0), \"x1\");\n    assertEquals(rowLabels.get(1), \"x2\");\n    assertEquals(rowLabels.get(2), \"x3\");\n    List<String> columnLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.get(0), \"f1\");\n    assertEquals(columnLabels.get(1), \"f2\");\n    assertEquals(columnLabels.get(2), \"f3\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPivot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPivot().mjava","sourceNew":"  @Test\n  public void testPivot() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=list(tuple(fx=x1, fy=f1, fv=add(1,1)), \" +\n        \"                      tuple(fx=x1, fy=f2, fv=add(1,3)), \" +\n        \"                      tuple(fx=x2, fy=f1, fv=add(1,7)), \" +\n        \"                      tuple(fx=x3, fy=f1, fv=add(1,4)),\" +\n        \"                      tuple(fx=x3, fy=f3, fv=add(1,7))),\" +\n                   \"    b=pivot(a, \\\"fx\\\", \\\"fy\\\", \\\"fv\\\"),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"b\");\n    List<Number> row1 = matrix.get(0);\n    assertEquals(row1.get(0).doubleValue(), 2.0,0);\n    assertEquals(row1.get(1).doubleValue(), 4.0,0);\n    assertEquals(row1.get(2).doubleValue(), 0,0);\n    List<Number> row2 = matrix.get(1);\n    assertEquals(row2.get(0).doubleValue(), 8.0,0);\n    assertEquals(row2.get(1).doubleValue(), 0,0);\n    assertEquals(row2.get(2).doubleValue(), 0,0);\n    List<Number> row3 = matrix.get(2);\n    assertEquals(row3.get(0).doubleValue(), 5.0,0);\n    assertEquals(row3.get(1).doubleValue(), 0,0);\n    assertEquals(row3.get(2).doubleValue(), 8.0,0);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.get(0), \"x1\");\n    assertEquals(rowLabels.get(1), \"x2\");\n    assertEquals(rowLabels.get(2), \"x3\");\n    @SuppressWarnings({\"unchecked\"})\n    List<String> columnLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.get(0), \"f1\");\n    assertEquals(columnLabels.get(1), \"f2\");\n    assertEquals(columnLabels.get(2), \"f3\");\n  }\n\n","sourceOld":"  @Test\n  public void testPivot() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=list(tuple(fx=x1, fy=f1, fv=add(1,1)), \" +\n        \"                      tuple(fx=x1, fy=f2, fv=add(1,3)), \" +\n        \"                      tuple(fx=x2, fy=f1, fv=add(1,7)), \" +\n        \"                      tuple(fx=x3, fy=f1, fv=add(1,4)),\" +\n        \"                      tuple(fx=x3, fy=f3, fv=add(1,7))),\" +\n                   \"    b=pivot(a, \\\"fx\\\", \\\"fy\\\", \\\"fv\\\"),\" +\n        \"               c=getRowLabels(b),\" +\n        \"               d=getColumnLabels(b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"b\");\n    List<Number> row1 = matrix.get(0);\n    assertEquals(row1.get(0).doubleValue(), 2.0,0);\n    assertEquals(row1.get(1).doubleValue(), 4.0,0);\n    assertEquals(row1.get(2).doubleValue(), 0,0);\n    List<Number> row2 = matrix.get(1);\n    assertEquals(row2.get(0).doubleValue(), 8.0,0);\n    assertEquals(row2.get(1).doubleValue(), 0,0);\n    assertEquals(row2.get(2).doubleValue(), 0,0);\n    List<Number> row3 = matrix.get(2);\n    assertEquals(row3.get(0).doubleValue(), 5.0,0);\n    assertEquals(row3.get(1).doubleValue(), 0,0);\n    assertEquals(row3.get(2).doubleValue(), 8.0,0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"c\");\n    assertEquals(rowLabels.get(0), \"x1\");\n    assertEquals(rowLabels.get(1), \"x2\");\n    assertEquals(rowLabels.get(2), \"x3\");\n    List<String> columnLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnLabels.get(0), \"f1\");\n    assertEquals(columnLabels.get(1), \"f2\");\n    assertEquals(columnLabels.get(2), \"f3\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"01b58fc90ed89647d3b14eb044e71e3cbcc26bec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["01b58fc90ed89647d3b14eb044e71e3cbcc26bec","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["01b58fc90ed89647d3b14eb044e71e3cbcc26bec"],"f8061ddd97f3352007d927dae445884a6f3d857b":["01b58fc90ed89647d3b14eb044e71e3cbcc26bec","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"01b58fc90ed89647d3b14eb044e71e3cbcc26bec":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","35cc45f54fe95a5534e02f9b8ca2a54af211ded5","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01b58fc90ed89647d3b14eb044e71e3cbcc26bec"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["9ba1b632c041956c93c41aa1143d16a567014891","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}