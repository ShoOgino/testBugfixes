{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","commits":[{"id":"2a6ee6c302710254b6c2474ccd2755f9f2323ee3","date":1330700384,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","pathOld":"/dev/null","sourceNew":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(\n        PositiveIntOutputs.getSingleton(true), // weight\n        PositiveIntOutputs.getSingleton(true)  // output\n    );\n    \n    final Builder<Pair<Long,Long>> builder = new Builder<Pair<Long,Long>>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.MinResult<Pair<Long,Long>>[] r = Util.shortestPaths(fst,\n                                           fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                           minPairWeightComparator,\n                                           3);\n    assertEquals(3, r.length);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), r[0].input);\n    assertEquals(7L, r[0].output.output1.longValue()); // weight\n    assertEquals(36L, r[0].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), r[1].input);\n    assertEquals(17L, r[1].output.output1.longValue()); // weight\n    assertEquals(85L, r[1].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), r[2].input);\n    assertEquals(22L, r[2].output.output1.longValue()); // weight\n    assertEquals(57L, r[2].output.output2.longValue()); // output\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","pathOld":"/dev/null","sourceNew":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(\n        PositiveIntOutputs.getSingleton(true), // weight\n        PositiveIntOutputs.getSingleton(true)  // output\n    );\n    \n    final Builder<Pair<Long,Long>> builder = new Builder<Pair<Long,Long>>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.MinResult<Pair<Long,Long>>[] r = Util.shortestPaths(fst,\n                                           fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                           minPairWeightComparator,\n                                           3);\n    assertEquals(3, r.length);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), r[0].input);\n    assertEquals(7L, r[0].output.output1.longValue()); // weight\n    assertEquals(36L, r[0].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), r[1].input);\n    assertEquals(17L, r[1].output.output1.longValue()); // weight\n    assertEquals(85L, r[1].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), r[2].input);\n    assertEquals(22L, r[2].output.output1.longValue()); // weight\n    assertEquals(57L, r[2].output.output2.longValue()); // output\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ce825e9276493231308229152c48f755ce1a0a5","date":1348871483,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","sourceNew":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(\n        PositiveIntOutputs.getSingleton(true), // weight\n        PositiveIntOutputs.getSingleton(true)  // output\n    );\n    \n    final Builder<Pair<Long,Long>> builder = new Builder<Pair<Long,Long>>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.MinResult<Pair<Long,Long>>[] r = Util.shortestPaths(fst,\n                                                             fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                                             outputs.getNoOutput(),\n                                                             minPairWeightComparator,\n                                                             3,\n                                                             true);\n    assertEquals(3, r.length);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), r[0].input);\n    assertEquals(7L, r[0].output.output1.longValue()); // weight\n    assertEquals(36L, r[0].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), r[1].input);\n    assertEquals(17L, r[1].output.output1.longValue()); // weight\n    assertEquals(85L, r[1].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), r[2].input);\n    assertEquals(22L, r[2].output.output1.longValue()); // weight\n    assertEquals(57L, r[2].output.output2.longValue()); // output\n  }\n\n","sourceOld":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(\n        PositiveIntOutputs.getSingleton(true), // weight\n        PositiveIntOutputs.getSingleton(true)  // output\n    );\n    \n    final Builder<Pair<Long,Long>> builder = new Builder<Pair<Long,Long>>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.MinResult<Pair<Long,Long>>[] r = Util.shortestPaths(fst,\n                                           fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                           minPairWeightComparator,\n                                           3);\n    assertEquals(3, r.length);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), r[0].input);\n    assertEquals(7L, r[0].output.output1.longValue()); // weight\n    assertEquals(36L, r[0].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), r[1].input);\n    assertEquals(17L, r[1].output.output1.longValue()); // weight\n    assertEquals(85L, r[1].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), r[2].input);\n    assertEquals(22L, r[2].output.output1.longValue()); // weight\n    assertEquals(57L, r[2].output.output2.longValue()); // output\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39","date":1370266419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","sourceNew":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(\n        PositiveIntOutputs.getSingleton(), // weight\n        PositiveIntOutputs.getSingleton()  // output\n    );\n    \n    final Builder<Pair<Long,Long>> builder = new Builder<Pair<Long,Long>>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.MinResult<Pair<Long,Long>>[] r = Util.shortestPaths(fst,\n                                                             fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                                             outputs.getNoOutput(),\n                                                             minPairWeightComparator,\n                                                             3,\n                                                             true);\n    assertEquals(3, r.length);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), r[0].input);\n    assertEquals(7L, r[0].output.output1.longValue()); // weight\n    assertEquals(36L, r[0].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), r[1].input);\n    assertEquals(17L, r[1].output.output1.longValue()); // weight\n    assertEquals(85L, r[1].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), r[2].input);\n    assertEquals(22L, r[2].output.output1.longValue()); // weight\n    assertEquals(57L, r[2].output.output2.longValue()); // output\n  }\n\n","sourceOld":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(\n        PositiveIntOutputs.getSingleton(true), // weight\n        PositiveIntOutputs.getSingleton(true)  // output\n    );\n    \n    final Builder<Pair<Long,Long>> builder = new Builder<Pair<Long,Long>>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.MinResult<Pair<Long,Long>>[] r = Util.shortestPaths(fst,\n                                                             fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                                             outputs.getNoOutput(),\n                                                             minPairWeightComparator,\n                                                             3,\n                                                             true);\n    assertEquals(3, r.length);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), r[0].input);\n    assertEquals(7L, r[0].output.output1.longValue()); // weight\n    assertEquals(36L, r[0].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), r[1].input);\n    assertEquals(17L, r[1].output.output1.longValue()); // weight\n    assertEquals(85L, r[1].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), r[2].input);\n    assertEquals(22L, r[2].output.output1.longValue()); // weight\n    assertEquals(57L, r[2].output.output2.longValue()); // output\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","sourceNew":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<>(\n        PositiveIntOutputs.getSingleton(), // weight\n        PositiveIntOutputs.getSingleton()  // output\n    );\n    \n    final Builder<Pair<Long,Long>> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.MinResult<Pair<Long,Long>>[] r = Util.shortestPaths(fst,\n                                                             fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                                             outputs.getNoOutput(),\n                                                             minPairWeightComparator,\n                                                             3,\n                                                             true);\n    assertEquals(3, r.length);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), r[0].input);\n    assertEquals(7L, r[0].output.output1.longValue()); // weight\n    assertEquals(36L, r[0].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), r[1].input);\n    assertEquals(17L, r[1].output.output1.longValue()); // weight\n    assertEquals(85L, r[1].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), r[2].input);\n    assertEquals(22L, r[2].output.output1.longValue()); // weight\n    assertEquals(57L, r[2].output.output2.longValue()); // output\n  }\n\n","sourceOld":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(\n        PositiveIntOutputs.getSingleton(), // weight\n        PositiveIntOutputs.getSingleton()  // output\n    );\n    \n    final Builder<Pair<Long,Long>> builder = new Builder<Pair<Long,Long>>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.MinResult<Pair<Long,Long>>[] r = Util.shortestPaths(fst,\n                                                             fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                                             outputs.getNoOutput(),\n                                                             minPairWeightComparator,\n                                                             3,\n                                                             true);\n    assertEquals(3, r.length);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), r[0].input);\n    assertEquals(7L, r[0].output.output1.longValue()); // weight\n    assertEquals(36L, r[0].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), r[1].input);\n    assertEquals(17L, r[1].output.output1.longValue()); // weight\n    assertEquals(85L, r[1].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), r[2].input);\n    assertEquals(22L, r[2].output.output1.longValue()); // weight\n    assertEquals(57L, r[2].output.output2.longValue()); // output\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d245db17aaa41b338dae9da5d4edba4dd6f61612","date":1394644847,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","sourceNew":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<>(\n        PositiveIntOutputs.getSingleton(), // weight\n        PositiveIntOutputs.getSingleton()  // output\n    );\n\n    final Builder<Pair<Long,Long>> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.TopResults<Pair<Long,Long>> res = Util.shortestPaths(fst,\n                                                             fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                                             outputs.getNoOutput(),\n                                                             minPairWeightComparator,\n                                                             3,\n                                                             true);\n    assertTrue(res.isComplete);\n    assertEquals(3, res.topN.size());\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.output1.longValue()); // weight\n    assertEquals(36L, res.topN.get(0).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), res.topN.get(1).input);\n    assertEquals(17L, res.topN.get(1).output.output1.longValue()); // weight\n    assertEquals(85L, res.topN.get(1).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), res.topN.get(2).input);\n    assertEquals(22L, res.topN.get(2).output.output1.longValue()); // weight\n    assertEquals(57L, res.topN.get(2).output.output2.longValue()); // output\n  }\n\n","sourceOld":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<>(\n        PositiveIntOutputs.getSingleton(), // weight\n        PositiveIntOutputs.getSingleton()  // output\n    );\n    \n    final Builder<Pair<Long,Long>> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.MinResult<Pair<Long,Long>>[] r = Util.shortestPaths(fst,\n                                                             fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                                             outputs.getNoOutput(),\n                                                             minPairWeightComparator,\n                                                             3,\n                                                             true);\n    assertEquals(3, r.length);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), r[0].input);\n    assertEquals(7L, r[0].output.output1.longValue()); // weight\n    assertEquals(36L, r[0].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), r[1].input);\n    assertEquals(17L, r[1].output.output1.longValue()); // weight\n    assertEquals(85L, r[1].output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), r[2].input);\n    assertEquals(22L, r[2].output.output1.longValue()); // weight\n    assertEquals(57L, r[2].output.output2.longValue()); // output\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","sourceNew":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<>(\n        PositiveIntOutputs.getSingleton(), // weight\n        PositiveIntOutputs.getSingleton()  // output\n    );\n\n    final Builder<Pair<Long,Long>> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.shutdown();\n\n    Util.TopResults<Pair<Long,Long>> res = Util.shortestPaths(fst,\n                                                             fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                                             outputs.getNoOutput(),\n                                                             minPairWeightComparator,\n                                                             3,\n                                                             true);\n    assertTrue(res.isComplete);\n    assertEquals(3, res.topN.size());\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.output1.longValue()); // weight\n    assertEquals(36L, res.topN.get(0).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), res.topN.get(1).input);\n    assertEquals(17L, res.topN.get(1).output.output1.longValue()); // weight\n    assertEquals(85L, res.topN.get(1).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), res.topN.get(2).input);\n    assertEquals(22L, res.topN.get(2).output.output1.longValue()); // weight\n    assertEquals(57L, res.topN.get(2).output.output2.longValue()); // output\n  }\n\n","sourceOld":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<>(\n        PositiveIntOutputs.getSingleton(), // weight\n        PositiveIntOutputs.getSingleton()  // output\n    );\n\n    final Builder<Pair<Long,Long>> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.TopResults<Pair<Long,Long>> res = Util.shortestPaths(fst,\n                                                             fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                                             outputs.getNoOutput(),\n                                                             minPairWeightComparator,\n                                                             3,\n                                                             true);\n    assertTrue(res.isComplete);\n    assertEquals(3, res.topN.size());\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.output1.longValue()); // weight\n    assertEquals(36L, res.topN.get(0).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), res.topN.get(1).input);\n    assertEquals(17L, res.topN.get(1).output.output1.longValue()); // weight\n    assertEquals(85L, res.topN.get(1).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), res.topN.get(2).input);\n    assertEquals(22L, res.topN.get(2).output.output1.longValue()); // weight\n    assertEquals(57L, res.topN.get(2).output.output2.longValue()); // output\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","sourceNew":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<>(\n        PositiveIntOutputs.getSingleton(), // weight\n        PositiveIntOutputs.getSingleton()  // output\n    );\n\n    final Builder<Pair<Long,Long>> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.TopResults<Pair<Long,Long>> res = Util.shortestPaths(fst,\n                                                             fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                                             outputs.getNoOutput(),\n                                                             minPairWeightComparator,\n                                                             3,\n                                                             true);\n    assertTrue(res.isComplete);\n    assertEquals(3, res.topN.size());\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.output1.longValue()); // weight\n    assertEquals(36L, res.topN.get(0).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), res.topN.get(1).input);\n    assertEquals(17L, res.topN.get(1).output.output1.longValue()); // weight\n    assertEquals(85L, res.topN.get(1).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), res.topN.get(2).input);\n    assertEquals(22L, res.topN.get(2).output.output1.longValue()); // weight\n    assertEquals(57L, res.topN.get(2).output.output2.longValue()); // output\n  }\n\n","sourceOld":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<>(\n        PositiveIntOutputs.getSingleton(), // weight\n        PositiveIntOutputs.getSingleton()  // output\n    );\n\n    final Builder<Pair<Long,Long>> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.shutdown();\n\n    Util.TopResults<Pair<Long,Long>> res = Util.shortestPaths(fst,\n                                                             fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                                             outputs.getNoOutput(),\n                                                             minPairWeightComparator,\n                                                             3,\n                                                             true);\n    assertTrue(res.isComplete);\n    assertEquals(3, res.topN.size());\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.output1.longValue()); // weight\n    assertEquals(36L, res.topN.get(0).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), res.topN.get(1).input);\n    assertEquals(17L, res.topN.get(1).output.output1.longValue()); // weight\n    assertEquals(85L, res.topN.get(1).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), res.topN.get(2).input);\n    assertEquals(22L, res.topN.get(2).output.output1.longValue()); // weight\n    assertEquals(57L, res.topN.get(2).output.output2.longValue()); // output\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","sourceNew":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<>(\n        PositiveIntOutputs.getSingleton(), // weight\n        PositiveIntOutputs.getSingleton()  // output\n    );\n\n    final Builder<Pair<Long,Long>> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRefBuilder scratch = new IntsRefBuilder();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.TopResults<Pair<Long,Long>> res = Util.shortestPaths(fst,\n                                                             fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                                             outputs.getNoOutput(),\n                                                             minPairWeightComparator,\n                                                             3,\n                                                             true);\n    assertTrue(res.isComplete);\n    assertEquals(3, res.topN.size());\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.output1.longValue()); // weight\n    assertEquals(36L, res.topN.get(0).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), res.topN.get(1).input);\n    assertEquals(17L, res.topN.get(1).output.output1.longValue()); // weight\n    assertEquals(85L, res.topN.get(1).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), res.topN.get(2).input);\n    assertEquals(22L, res.topN.get(2).output.output1.longValue()); // weight\n    assertEquals(57L, res.topN.get(2).output.output2.longValue()); // output\n  }\n\n","sourceOld":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<>(\n        PositiveIntOutputs.getSingleton(), // weight\n        PositiveIntOutputs.getSingleton()  // output\n    );\n\n    final Builder<Pair<Long,Long>> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRef scratch = new IntsRef();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.TopResults<Pair<Long,Long>> res = Util.shortestPaths(fst,\n                                                             fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                                             outputs.getNoOutput(),\n                                                             minPairWeightComparator,\n                                                             3,\n                                                             true);\n    assertTrue(res.isComplete);\n    assertEquals(3, res.topN.size());\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.output1.longValue()); // weight\n    assertEquals(36L, res.topN.get(0).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), res.topN.get(1).input);\n    assertEquals(17L, res.topN.get(1).output.output1.longValue()); // weight\n    assertEquals(85L, res.topN.get(1).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), res.topN.get(2).input);\n    assertEquals(22L, res.topN.get(2).output.output1.longValue()); // weight\n    assertEquals(57L, res.topN.get(2).output.output2.longValue()); // output\n  }\n\n","bugFix":["2a6ee6c302710254b6c2474ccd2755f9f2323ee3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","sourceNew":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<>(\n        PositiveIntOutputs.getSingleton(), // weight\n        PositiveIntOutputs.getSingleton()  // output\n    );\n\n    final FSTCompiler<Pair<Long,Long>> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRefBuilder scratch = new IntsRefBuilder();\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = fstCompiler.compile();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.TopResults<Pair<Long,Long>> res = Util.shortestPaths(fst,\n                                                             fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                                             outputs.getNoOutput(),\n                                                             minPairWeightComparator,\n                                                             3,\n                                                             true);\n    assertTrue(res.isComplete);\n    assertEquals(3, res.topN.size());\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.output1.longValue()); // weight\n    assertEquals(36L, res.topN.get(0).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), res.topN.get(1).input);\n    assertEquals(17L, res.topN.get(1).output.output1.longValue()); // weight\n    assertEquals(85L, res.topN.get(1).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), res.topN.get(2).input);\n    assertEquals(22L, res.topN.get(2).output.output1.longValue()); // weight\n    assertEquals(57L, res.topN.get(2).output.output2.longValue()); // output\n  }\n\n","sourceOld":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<>(\n        PositiveIntOutputs.getSingleton(), // weight\n        PositiveIntOutputs.getSingleton()  // output\n    );\n\n    final Builder<Pair<Long,Long>> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRefBuilder scratch = new IntsRefBuilder();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.TopResults<Pair<Long,Long>> res = Util.shortestPaths(fst,\n                                                             fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                                             outputs.getNoOutput(),\n                                                             minPairWeightComparator,\n                                                             3,\n                                                             true);\n    assertTrue(res.isComplete);\n    assertEquals(3, res.topN.size());\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.output1.longValue()); // weight\n    assertEquals(36L, res.topN.get(0).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), res.topN.get(1).input);\n    assertEquals(17L, res.topN.get(1).output.output1.longValue()); // weight\n    assertEquals(85L, res.topN.get(1).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), res.topN.get(2).input);\n    assertEquals(22L, res.topN.get(2).output.output1.longValue()); // weight\n    assertEquals(57L, res.topN.get(2).output.output2.longValue()); // output\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testShortestPathsWFST().mjava","sourceNew":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<>(\n        PositiveIntOutputs.getSingleton(), // weight\n        PositiveIntOutputs.getSingleton()  // output\n    );\n\n    final FSTCompiler<Pair<Long,Long>> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRefBuilder scratch = new IntsRefBuilder();\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = fstCompiler.compile();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.TopResults<Pair<Long,Long>> res = Util.shortestPaths(fst,\n                                                             fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                                             outputs.getNoOutput(),\n                                                             minPairWeightComparator,\n                                                             3,\n                                                             true);\n    assertTrue(res.isComplete);\n    assertEquals(3, res.topN.size());\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.output1.longValue()); // weight\n    assertEquals(36L, res.topN.get(0).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), res.topN.get(1).input);\n    assertEquals(17L, res.topN.get(1).output.output1.longValue()); // weight\n    assertEquals(85L, res.topN.get(1).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), res.topN.get(2).input);\n    assertEquals(22L, res.topN.get(2).output.output1.longValue()); // weight\n    assertEquals(57L, res.topN.get(2).output.output2.longValue()); // output\n  }\n\n","sourceOld":"  /** like testShortestPaths, but uses pairoutputs so we have both a weight and an output */\n  public void testShortestPathsWFST() throws Exception {\n\n    PairOutputs<Long,Long> outputs = new PairOutputs<>(\n        PositiveIntOutputs.getSingleton(), // weight\n        PositiveIntOutputs.getSingleton()  // output\n    );\n\n    final Builder<Pair<Long,Long>> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final IntsRefBuilder scratch = new IntsRefBuilder();\n    builder.add(Util.toIntsRef(new BytesRef(\"aab\"), scratch), outputs.newPair(22L, 57L));\n    builder.add(Util.toIntsRef(new BytesRef(\"aac\"), scratch), outputs.newPair(7L, 36L));\n    builder.add(Util.toIntsRef(new BytesRef(\"ax\"), scratch), outputs.newPair(17L, 85L));\n    final FST<Pair<Long,Long>> fst = builder.finish();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n    //Util.toDot(fst, w, false, false);\n    //w.close();\n\n    Util.TopResults<Pair<Long,Long>> res = Util.shortestPaths(fst,\n                                                             fst.getFirstArc(new FST.Arc<Pair<Long,Long>>()),\n                                                             outputs.getNoOutput(),\n                                                             minPairWeightComparator,\n                                                             3,\n                                                             true);\n    assertTrue(res.isComplete);\n    assertEquals(3, res.topN.size());\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aac\"), scratch), res.topN.get(0).input);\n    assertEquals(7L, res.topN.get(0).output.output1.longValue()); // weight\n    assertEquals(36L, res.topN.get(0).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"ax\"), scratch), res.topN.get(1).input);\n    assertEquals(17L, res.topN.get(1).output.output1.longValue()); // weight\n    assertEquals(85L, res.topN.get(1).output.output2.longValue()); // output\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"aab\"), scratch), res.topN.get(2).input);\n    assertEquals(22L, res.topN.get(2).output.output1.longValue()); // weight\n    assertEquals(57L, res.topN.get(2).output.output2.longValue()); // output\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2a6ee6c302710254b6c2474ccd2755f9f2323ee3"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"2a6ee6c302710254b6c2474ccd2755f9f2323ee3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["6ce825e9276493231308229152c48f755ce1a0a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6ce825e9276493231308229152c48f755ce1a0a5":["2a6ee6c302710254b6c2474ccd2755f9f2323ee3"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"2a6ee6c302710254b6c2474ccd2755f9f2323ee3":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6ce825e9276493231308229152c48f755ce1a0a5"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","2a6ee6c302710254b6c2474ccd2755f9f2323ee3"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"6ce825e9276493231308229152c48f755ce1a0a5":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}