{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_INDEX_VERSION);\n    post.addParameter(\"wt\", \"javabin\");\n    return getNamedListResponse(post);\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_INDEX_VERSION);\n    post.addParameter(\"wt\", \"javabin\");\n    return getNamedListResponse(post);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_INDEX_VERSION);\n    post.addParameter(\"wt\", \"javabin\");\n    return getNamedListResponse(post);\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_INDEX_VERSION);\n    post.addParameter(\"wt\", \"javabin\");\n    return getNamedListResponse(post);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_INDEX_VERSION);\n    post.addParameter(\"wt\", \"javabin\");\n    return getNamedListResponse(post);\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_INDEX_VERSION);\n    post.addParameter(\"wt\", \"javabin\");\n    return getNamedListResponse(post);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    HttpPost post = new HttpPost(masterUrl);\n    List<BasicNameValuePair> formparams = new ArrayList<BasicNameValuePair>();\n    formparams.add(new BasicNameValuePair(\"wt\", \"javabin\"));\n    formparams.add(new BasicNameValuePair(COMMAND, CMD_INDEX_VERSION));\n    UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, \"UTF-8\");\n    post.setEntity(entity);\n    return getNamedListResponse(post);\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_INDEX_VERSION);\n    post.addParameter(\"wt\", \"javabin\");\n    return getNamedListResponse(post);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2425308ebcd91b538a601df94ae1551ccaab2bb","date":1340702883,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n    SolrServer server = new HttpSolrServer(masterUrl, myHttpClient); //XXX modify to use shardhandler\n    try {\n      return server.request(req);\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    HttpPost post = new HttpPost(masterUrl);\n    List<BasicNameValuePair> formparams = new ArrayList<BasicNameValuePair>();\n    formparams.add(new BasicNameValuePair(\"wt\", \"javabin\"));\n    formparams.add(new BasicNameValuePair(COMMAND, CMD_INDEX_VERSION));\n    UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, \"UTF-8\");\n    post.setEntity(entity);\n    return getNamedListResponse(post);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n    SolrServer server = new HttpSolrServer(masterUrl, myHttpClient); //XXX modify to use shardhandler\n    try {\n      return server.request(req);\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    HttpPost post = new HttpPost(masterUrl);\n    List<BasicNameValuePair> formparams = new ArrayList<BasicNameValuePair>();\n    formparams.add(new BasicNameValuePair(\"wt\", \"javabin\"));\n    formparams.add(new BasicNameValuePair(COMMAND, CMD_INDEX_VERSION));\n    UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, \"UTF-8\");\n    post.setEntity(entity);\n    return getNamedListResponse(post);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af2cbf9ce9ef2d2be705276fa4b9aec41b5f452","date":1359901062,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n    HttpSolrServer server = new HttpSolrServer(masterUrl, myHttpClient); //XXX modify to use shardhandler\n    server.setSoTimeout(60000);\n    server.setConnectionTimeout(15000);\n    try {\n      return server.request(req);\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n    SolrServer server = new HttpSolrServer(masterUrl, myHttpClient); //XXX modify to use shardhandler\n    try {\n      return server.request(req);\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4d4ec39bf5396230748ca859ff05ab024b6fc5","date":1360112310,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n    HttpSolrServer server = new HttpSolrServer(masterUrl, myHttpClient); //XXX modify to use shardhandler\n    server.setSoTimeout(60000);\n    server.setConnectionTimeout(15000);\n    try {\n      return server.request(req);\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n    SolrServer server = new HttpSolrServer(masterUrl, myHttpClient); //XXX modify to use shardhandler\n    try {\n      return server.request(req);\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d750082a4223c20902ef11ff6a9831d55738ea4","date":1382309916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n    HttpSolrServer server = new HttpSolrServer(masterUrl, myHttpClient); //XXX modify to use shardhandler\n    NamedList rsp;\n    try {\n      server.setSoTimeout(60000);\n      server.setConnectionTimeout(15000);\n      \n      rsp = server.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage());\n    } finally {\n      server.shutdown();\n    }\n    return rsp;\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n    HttpSolrServer server = new HttpSolrServer(masterUrl, myHttpClient); //XXX modify to use shardhandler\n    server.setSoTimeout(60000);\n    server.setConnectionTimeout(15000);\n    try {\n      return server.request(req);\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b30ae49569d5dd880f90086bfbe1cbb5d0e218a6","date":1395516887,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n    HttpSolrServer server = new HttpSolrServer(masterUrl, myHttpClient); //XXX modify to use shardhandler\n    NamedList rsp;\n    try {\n      server.setSoTimeout(60000);\n      server.setConnectionTimeout(15000);\n      \n      rsp = server.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    } finally {\n      server.shutdown();\n    }\n    return rsp;\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n    HttpSolrServer server = new HttpSolrServer(masterUrl, myHttpClient); //XXX modify to use shardhandler\n    NamedList rsp;\n    try {\n      server.setSoTimeout(60000);\n      server.setConnectionTimeout(15000);\n      \n      rsp = server.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage());\n    } finally {\n      server.shutdown();\n    }\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n    HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient); //XXX modify to use shardhandler\n    NamedList rsp;\n    try {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      \n      rsp = client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    } finally {\n      client.shutdown();\n    }\n    return rsp;\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n    HttpSolrServer server = new HttpSolrServer(masterUrl, myHttpClient); //XXX modify to use shardhandler\n    NamedList rsp;\n    try {\n      server.setSoTimeout(60000);\n      server.setConnectionTimeout(15000);\n      \n      rsp = server.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    } finally {\n      server.shutdown();\n    }\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      \n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n    HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient); //XXX modify to use shardhandler\n    NamedList rsp;\n    try {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      \n      rsp = client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    } finally {\n      client.shutdown();\n    }\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      \n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      \n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":5,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      \n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      \n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b30ae49569d5dd880f90086bfbe1cbb5d0e218a6":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["f2425308ebcd91b538a601df94ae1551ccaab2bb","7af2cbf9ce9ef2d2be705276fa4b9aec41b5f452"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["c26f00b574427b55127e869b935845554afde1fa"],"bafca15d8e408346a67f4282ad1143b88023893b":["b30ae49569d5dd880f90086bfbe1cbb5d0e218a6"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["cc3b13b430571c2e169f98fe38e1e7666f88522d","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","f2425308ebcd91b538a601df94ae1551ccaab2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d750082a4223c20902ef11ff6a9831d55738ea4":["7af2cbf9ce9ef2d2be705276fa4b9aec41b5f452"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7af2cbf9ce9ef2d2be705276fa4b9aec41b5f452":["f2425308ebcd91b538a601df94ae1551ccaab2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20f6b7cff3771384f27af0f059795d7e64aff6b9"]},"commit2Childs":{"b30ae49569d5dd880f90086bfbe1cbb5d0e218a6":["bafca15d8e408346a67f4282ad1143b88023893b"],"c26f00b574427b55127e869b935845554afde1fa":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["f2425308ebcd91b538a601df94ae1551ccaab2bb","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","fe33227f6805edab2036cbb80645cc4e2d1fa424","7af2cbf9ce9ef2d2be705276fa4b9aec41b5f452"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2d750082a4223c20902ef11ff6a9831d55738ea4":["b30ae49569d5dd880f90086bfbe1cbb5d0e218a6"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7af2cbf9ce9ef2d2be705276fa4b9aec41b5f452":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","2d750082a4223c20902ef11ff6a9831d55738ea4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}