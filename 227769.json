{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegenerateLongitudeSlice#GeoDegenerateLongitudeSlice(double).mjava","commits":[{"id":"ea1a3e0b93787916a1002c2be9f1043b6575ea69","date":1429103360,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegenerateLongitudeSlice#GeoDegenerateLongitudeSlice(double).mjava","pathOld":"/dev/null","sourceNew":"    /** Accepts only values in the following ranges: lon: {@code -PI -> PI} */\n    public GeoDegenerateLongitudeSlice(double longitude)\n    {\n        // Argument checking\n        if (longitude < -Math.PI || longitude > Math.PI)\n            throw new IllegalArgumentException(\"Longitude out of range\");\n        this.longitude = longitude;\n          \n        this.sinLongitude = Math.sin(longitude);\n        this.cosLongitude = Math.cos(longitude);\n\n        this.plane = new Plane(cosLongitude, sinLongitude);\n        // We need a bounding plane too, which is perpendicular to the longitude plane and sided so that the point (0.0, longitude) is inside.\n        this.interiorPoint = new GeoPoint(cosLongitude, sinLongitude, 0.0);\n        this.boundingPlane = new SidedPlane(interiorPoint, -sinLongitude, cosLongitude);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fb9dbed1415914caa27460f8abb7afadaa61451","date":1429504289,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegenerateLongitudeSlice#GeoDegenerateLongitudeSlice(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegenerateLongitudeSlice#GeoDegenerateLongitudeSlice(double).mjava","sourceNew":"    /** Accepts only values in the following ranges: lon: {@code -PI -> PI} */\n    public GeoDegenerateLongitudeSlice(final double longitude)\n    {\n        // Argument checking\n        if (longitude < -Math.PI || longitude > Math.PI)\n            throw new IllegalArgumentException(\"Longitude out of range\");\n        this.longitude = longitude;\n          \n        this.sinLongitude = Math.sin(longitude);\n        this.cosLongitude = Math.cos(longitude);\n\n        this.plane = new Plane(cosLongitude, sinLongitude);\n        // We need a bounding plane too, which is perpendicular to the longitude plane and sided so that the point (0.0, longitude) is inside.\n        this.interiorPoint = new GeoPoint(cosLongitude, sinLongitude, 0.0);\n        this.boundingPlane = new SidedPlane(interiorPoint, -sinLongitude, cosLongitude);\n        this.edgePoints = new GeoPoint[]{interiorPoint};\n    }\n\n","sourceOld":"    /** Accepts only values in the following ranges: lon: {@code -PI -> PI} */\n    public GeoDegenerateLongitudeSlice(double longitude)\n    {\n        // Argument checking\n        if (longitude < -Math.PI || longitude > Math.PI)\n            throw new IllegalArgumentException(\"Longitude out of range\");\n        this.longitude = longitude;\n          \n        this.sinLongitude = Math.sin(longitude);\n        this.cosLongitude = Math.cos(longitude);\n\n        this.plane = new Plane(cosLongitude, sinLongitude);\n        // We need a bounding plane too, which is perpendicular to the longitude plane and sided so that the point (0.0, longitude) is inside.\n        this.interiorPoint = new GeoPoint(cosLongitude, sinLongitude, 0.0);\n        this.boundingPlane = new SidedPlane(interiorPoint, -sinLongitude, cosLongitude);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegenerateLongitudeSlice#GeoDegenerateLongitudeSlice(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegenerateLongitudeSlice#GeoDegenerateLongitudeSlice(double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}\n   */\n  public GeoDegenerateLongitudeSlice(final double longitude) {\n    // Argument checking\n    if (longitude < -Math.PI || longitude > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n    this.longitude = longitude;\n\n    this.sinLongitude = Math.sin(longitude);\n    this.cosLongitude = Math.cos(longitude);\n\n    this.plane = new Plane(cosLongitude, sinLongitude);\n    // We need a bounding plane too, which is perpendicular to the longitude plane and sided so that the point (0.0, longitude) is inside.\n    this.interiorPoint = new GeoPoint(cosLongitude, sinLongitude, 0.0);\n    this.boundingPlane = new SidedPlane(interiorPoint, -sinLongitude, cosLongitude);\n    this.edgePoints = new GeoPoint[]{interiorPoint};\n  }\n\n","sourceOld":"    /** Accepts only values in the following ranges: lon: {@code -PI -> PI} */\n    public GeoDegenerateLongitudeSlice(final double longitude)\n    {\n        // Argument checking\n        if (longitude < -Math.PI || longitude > Math.PI)\n            throw new IllegalArgumentException(\"Longitude out of range\");\n        this.longitude = longitude;\n          \n        this.sinLongitude = Math.sin(longitude);\n        this.cosLongitude = Math.cos(longitude);\n\n        this.plane = new Plane(cosLongitude, sinLongitude);\n        // We need a bounding plane too, which is perpendicular to the longitude plane and sided so that the point (0.0, longitude) is inside.\n        this.interiorPoint = new GeoPoint(cosLongitude, sinLongitude, 0.0);\n        this.boundingPlane = new SidedPlane(interiorPoint, -sinLongitude, cosLongitude);\n        this.edgePoints = new GeoPoint[]{interiorPoint};\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegenerateLongitudeSlice#GeoDegenerateLongitudeSlice(double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}\n   */\n  public GeoDegenerateLongitudeSlice(final double longitude) {\n    // Argument checking\n    if (longitude < -Math.PI || longitude > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n    this.longitude = longitude;\n\n    this.sinLongitude = Math.sin(longitude);\n    this.cosLongitude = Math.cos(longitude);\n\n    this.plane = new Plane(cosLongitude, sinLongitude);\n    // We need a bounding plane too, which is perpendicular to the longitude plane and sided so that the point (0.0, longitude) is inside.\n    this.interiorPoint = new GeoPoint(cosLongitude, sinLongitude, 0.0);\n    this.boundingPlane = new SidedPlane(interiorPoint, -sinLongitude, cosLongitude);\n    this.edgePoints = new GeoPoint[]{interiorPoint};\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegenerateLongitudeSlice#GeoDegenerateLongitudeSlice(PlanetModel,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegenerateLongitudeSlice#GeoDegenerateLongitudeSlice(double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}\n   */\n  public GeoDegenerateLongitudeSlice(final PlanetModel planetModel, final double longitude) {\n    super(planetModel);\n    // Argument checking\n    if (longitude < -Math.PI || longitude > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n    this.longitude = longitude;\n\n    this.sinLongitude = Math.sin(longitude);\n    this.cosLongitude = Math.cos(longitude);\n\n    this.plane = new Plane(cosLongitude, sinLongitude);\n    // We need a bounding plane too, which is perpendicular to the longitude plane and sided so that the point (0.0, longitude) is inside.\n    this.interiorPoint = new GeoPoint(planetModel, 0.0, sinLongitude, 1.0, cosLongitude);\n    this.boundingPlane = new SidedPlane(interiorPoint, -sinLongitude, cosLongitude);\n    this.edgePoints = new GeoPoint[]{interiorPoint};\n    this.planePoints = new GeoPoint[]{planetModel.NORTH_POLE, planetModel.SOUTH_POLE};\n  }\n\n","sourceOld":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}\n   */\n  public GeoDegenerateLongitudeSlice(final double longitude) {\n    // Argument checking\n    if (longitude < -Math.PI || longitude > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n    this.longitude = longitude;\n\n    this.sinLongitude = Math.sin(longitude);\n    this.cosLongitude = Math.cos(longitude);\n\n    this.plane = new Plane(cosLongitude, sinLongitude);\n    // We need a bounding plane too, which is perpendicular to the longitude plane and sided so that the point (0.0, longitude) is inside.\n    this.interiorPoint = new GeoPoint(cosLongitude, sinLongitude, 0.0);\n    this.boundingPlane = new SidedPlane(interiorPoint, -sinLongitude, cosLongitude);\n    this.edgePoints = new GeoPoint[]{interiorPoint};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":5,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegenerateLongitudeSlice#GeoDegenerateLongitudeSlice(PlanetModel,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoDegenerateLongitudeSlice#GeoDegenerateLongitudeSlice(double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}\n   */\n  public GeoDegenerateLongitudeSlice(final PlanetModel planetModel, final double longitude) {\n    super(planetModel);\n    // Argument checking\n    if (longitude < -Math.PI || longitude > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n    this.longitude = longitude;\n\n    this.sinLongitude = Math.sin(longitude);\n    this.cosLongitude = Math.cos(longitude);\n\n    this.plane = new Plane(cosLongitude, sinLongitude);\n    // We need a bounding plane too, which is perpendicular to the longitude plane and sided so that the point (0.0, longitude) is inside.\n    this.interiorPoint = new GeoPoint(planetModel, 0.0, sinLongitude, 1.0, cosLongitude);\n    this.boundingPlane = new SidedPlane(interiorPoint, -sinLongitude, cosLongitude);\n    this.edgePoints = new GeoPoint[]{interiorPoint};\n    this.planePoints = new GeoPoint[]{planetModel.NORTH_POLE, planetModel.SOUTH_POLE};\n  }\n\n","sourceOld":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}\n   */\n  public GeoDegenerateLongitudeSlice(final double longitude) {\n    // Argument checking\n    if (longitude < -Math.PI || longitude > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n    this.longitude = longitude;\n\n    this.sinLongitude = Math.sin(longitude);\n    this.cosLongitude = Math.cos(longitude);\n\n    this.plane = new Plane(cosLongitude, sinLongitude);\n    // We need a bounding plane too, which is perpendicular to the longitude plane and sided so that the point (0.0, longitude) is inside.\n    this.interiorPoint = new GeoPoint(cosLongitude, sinLongitude, 0.0);\n    this.boundingPlane = new SidedPlane(interiorPoint, -sinLongitude, cosLongitude);\n    this.edgePoints = new GeoPoint[]{interiorPoint};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea1a3e0b93787916a1002c2be9f1043b6575ea69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0fb9dbed1415914caa27460f8abb7afadaa61451":["ea1a3e0b93787916a1002c2be9f1043b6575ea69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fec06d6753751ae302c7d35866763e6cb414112d"]},"commit2Childs":{"ea1a3e0b93787916a1002c2be9f1043b6575ea69":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"0fb9dbed1415914caa27460f8abb7afadaa61451":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea1a3e0b93787916a1002c2be9f1043b6575ea69","c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"fec06d6753751ae302c7d35866763e6cb414112d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}