{"path":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  public NamedList getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.StringIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getStringIndex(searcher.getReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getStringIndex(searcher.getReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n    \n    \n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      String raw = all.getTermText(docID);\n      Double v = null;\n      if( raw != null ) {\n        v = Double.parseDouble( all.ft.indexedToReadable(raw) );\n        allstats.accumulate( v );\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","sourceNew":null,"sourceOld":"  public NamedList getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.StringIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getStringIndex(searcher.getReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getStringIndex(searcher.getReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n    \n    \n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      String raw = all.getTermText(docID);\n      Double v = null;\n      if( raw != null ) {\n        v = Double.parseDouble( all.ft.indexedToReadable(raw) );\n        allstats.accumulate( v );\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","pathOld":"src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","sourceNew":"  public NamedList getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.StringIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getStringIndex(searcher.getReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getStringIndex(searcher.getReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n    \n    \n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      String raw = all.getTermText(docID);\n      Double v = null;\n      if( raw != null ) {\n        v = Double.parseDouble( all.ft.indexedToReadable(raw) );\n        allstats.accumulate( v );\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","sourceOld":"  public NamedList getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.StringIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getStringIndex(searcher.getReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getStringIndex(searcher.getReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n    \n    \n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      String raw = all.getTermText(docID);\n      Double v = null;\n      if( raw != null ) {\n        v = Double.parseDouble( all.ft.indexedToReadable(raw) );\n        allstats.accumulate( v );\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  public NamedList getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.StringIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getStringIndex(searcher.getReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getStringIndex(searcher.getReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n    \n    \n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      String raw = all.getTermText(docID);\n      Double v = null;\n      if( raw != null ) {\n        v = Double.parseDouble( all.ft.indexedToReadable(raw) );\n        allstats.accumulate( v );\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","sourceNew":"  public NamedList getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n\n    final BytesRef tempBR = new BytesRef();\n    final CharArr spare = new CharArr();\n\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        spare.reset();\n        all.ft.indexedToReadable(raw, spare);\n        v = Double.parseDouble(spare.toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","sourceOld":"  public NamedList getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.StringIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getStringIndex(searcher.getReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getStringIndex(searcher.getReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n    \n    \n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      String raw = all.getTermText(docID);\n      Double v = null;\n      if( raw != null ) {\n        v = Double.parseDouble( all.ft.indexedToReadable(raw) );\n        allstats.accumulate( v );\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5f7137bd9491c6596681b1f56e481e17964e581","date":1294458451,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","sourceNew":"  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n\n    final BytesRef tempBR = new BytesRef();\n    final CharArr spare = new CharArr();\n\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        spare.reset();\n        all.ft.indexedToReadable(raw, spare);\n        v = Double.parseDouble(spare.toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","sourceOld":"  public NamedList getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n\n    final BytesRef tempBR = new BytesRef();\n    final CharArr spare = new CharArr();\n\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        spare.reset();\n        all.ft.indexedToReadable(raw, spare);\n        v = Double.parseDouble(spare.toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","sourceNew":"  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n\n    final BytesRef tempBR = new BytesRef();\n    final CharArr spare = new CharArr();\n\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        spare.reset();\n        all.ft.indexedToReadable(raw, spare);\n        v = Double.parseDouble(spare.toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","sourceOld":"  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n\n    final BytesRef tempBR = new BytesRef();\n    final CharArr spare = new CharArr();\n\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        spare.reset();\n        all.ft.indexedToReadable(raw, spare);\n        v = Double.parseDouble(spare.toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","sourceNew":"  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n\n    final BytesRef tempBR = new BytesRef();\n    final CharArr spare = new CharArr();\n\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        spare.reset();\n        all.ft.indexedToReadable(raw, spare);\n        v = Double.parseDouble(spare.toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","sourceOld":"  public NamedList getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n\n    final BytesRef tempBR = new BytesRef();\n    final CharArr spare = new CharArr();\n\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        spare.reset();\n        all.ft.indexedToReadable(raw, spare);\n        v = Double.parseDouble(spare.toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","sourceNew":"  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n\n    final BytesRef tempBR = new BytesRef();\n    final CharArr spare = new CharArr();\n\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        spare.reset();\n        all.ft.indexedToReadable(raw, spare);\n        v = Double.parseDouble(spare.toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","sourceOld":"  public NamedList getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n\n    final BytesRef tempBR = new BytesRef();\n    final CharArr spare = new CharArr();\n\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        spare.reset();\n        all.ft.indexedToReadable(raw, spare);\n        v = Double.parseDouble(spare.toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","sourceNew":"  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n    final CharsRef spare = new CharsRef();\n    final BytesRef tempBR = new BytesRef();\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        v = Double.parseDouble(all.ft.indexedToReadable(raw, spare).toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","sourceOld":"  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n\n    final BytesRef tempBR = new BytesRef();\n    final CharArr spare = new CharArr();\n\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        spare.reset();\n        all.ft.indexedToReadable(raw, spare);\n        v = Double.parseDouble(spare.toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","sourceNew":"  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n    final CharsRef spare = new CharsRef();\n    final BytesRef tempBR = new BytesRef();\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        v = Double.parseDouble(all.ft.indexedToReadable(raw, spare).toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","sourceOld":"  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n\n    final BytesRef tempBR = new BytesRef();\n    final CharArr spare = new CharArr();\n\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        spare.reset();\n        all.ft.indexedToReadable(raw, spare);\n        v = Double.parseDouble(spare.toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","sourceNew":"  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n    final CharsRef spare = new CharsRef();\n    final BytesRef tempBR = new BytesRef();\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        v = Double.parseDouble(all.ft.indexedToReadable(raw, spare).toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","sourceOld":"  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n\n    final BytesRef tempBR = new BytesRef();\n    final CharArr spare = new CharArr();\n\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        spare.reset();\n        all.ft.indexedToReadable(raw, spare);\n        v = Double.parseDouble(spare.toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","sourceNew":"  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n    final CharsRef spare = new CharsRef();\n    final BytesRef tempBR = new BytesRef();\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        v = Double.parseDouble(all.ft.indexedToReadable(raw, spare).toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","sourceOld":"  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n    final CharsRef spare = new CharsRef();\n    final BytesRef tempBR = new BytesRef();\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        v = Double.parseDouble(all.ft.indexedToReadable(raw, spare).toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","sourceNew":"  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n    final CharsRef spare = new CharsRef();\n    final BytesRef tempBR = new BytesRef();\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        v = Double.parseDouble(all.ft.indexedToReadable(raw, spare).toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","sourceOld":"  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n    final CharsRef spare = new CharsRef();\n    final BytesRef tempBR = new BytesRef();\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        v = Double.parseDouble(all.ft.indexedToReadable(raw, spare).toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getFieldCacheStats(String,String[]).mjava","sourceNew":"  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n    final CharsRef spare = new CharsRef();\n    final BytesRef tempBR = new BytesRef();\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        v = Double.parseDouble(all.ft.indexedToReadable(raw, spare).toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","sourceOld":"  public NamedList<?> getFieldCacheStats(String fieldName, String[] facet ) {\n    FieldType ft = searcher.getSchema().getFieldType(fieldName);\n\n    FieldCache.DocTermsIndex si = null;\n    try {\n      si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), fieldName);\n    } \n    catch (IOException e) {\n      throw new RuntimeException( \"failed to open field cache for: \"+fieldName, e );\n    }\n    FieldFacetStats all = new FieldFacetStats( \"all\", si, ft, 0 );\n    StatsValues allstats = new StatsValues();\n    if ( all.nTerms <= 0 || docs.size() <= 0 ) return allstats.getStatsValues();\n\n    // don't worry about faceting if the no documents match...\n    int i=0;\n    final FieldFacetStats[] finfo = new FieldFacetStats[facet.length];\n    for( String f : facet ) {\n      ft = searcher.getSchema().getFieldType(f);\n      try {\n        si = FieldCache.DEFAULT.getTermsIndex(searcher.getIndexReader(), f);\n      } \n      catch (IOException e) {\n        throw new RuntimeException( \"failed to open field cache for: \"+f, e );\n      }\n      finfo[i++] = new FieldFacetStats( f, si, ft, 0 );\n    }\n    final CharsRef spare = new CharsRef();\n    final BytesRef tempBR = new BytesRef();\n    DocIterator iter = docs.iterator();\n    while (iter.hasNext()) {\n      int docID = iter.nextDoc();\n      BytesRef raw = all.getTermText(docID, tempBR);\n      Double v = null;\n      if( raw != null ) {\n        v = Double.parseDouble(all.ft.indexedToReadable(raw, spare).toString());\n        allstats.accumulate(v);\n      }\n      else {\n        allstats.missing++;\n      }\n      \n      // now check the facets\n      for( FieldFacetStats f : finfo ) {\n        f.facet(docID, v);\n      }\n    }\n    \n    if( finfo.length > 0 ) {\n      allstats.facets = new HashMap<String, Map<String,StatsValues>>();\n      for( FieldFacetStats f : finfo ) {\n        allstats.facets.put( f.name, f.facetStatsValues );\n      }\n    }\n    return allstats.getStatsValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5f7137bd9491c6596681b1f56e481e17964e581":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c220849f876de24a79f756f65b3eb045db59f63f":["b5f7137bd9491c6596681b1f56e481e17964e581"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c220849f876de24a79f756f65b3eb045db59f63f","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["c220849f876de24a79f756f65b3eb045db59f63f"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["29ef99d61cda9641b6250bf9567329a6e65f901d","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["b5f7137bd9491c6596681b1f56e481e17964e581","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"b5f7137bd9491c6596681b1f56e481e17964e581":["c220849f876de24a79f756f65b3eb045db59f63f"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"c220849f876de24a79f756f65b3eb045db59f63f":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","29ef99d61cda9641b6250bf9567329a6e65f901d","a1b3a24d5d9b47345473ff564f5cc127a7b526b4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a258fbb26824fd104ed795e5d9033d2d040049ee","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}