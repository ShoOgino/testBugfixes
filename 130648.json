{"path":"src/test/org/apache/solr/TestDistributedSearch#query(Object...).mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/TestDistributedSearch#query(Object...).mjava","pathOld":"/dev/null","sourceNew":"  void query(Object... q) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i=0; i<q.length; i+=2) {\n      params.add(q[i].toString(), q[i+1].toString());\n    }\n\n    QueryResponse controlRsp = controlClient.query(params);\n\n    // query a random server\n    params.set(\"shards\", shards);\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n\n    compareResponses(rsp, controlRsp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"baf85cd7d0ab2cbcfa661515d5ea50b010267aaa","date":1218397858,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/TestDistributedSearch#query(Object...).mjava","pathOld":"src/test/org/apache/solr/TestDistributedSearch#query(Object...).mjava","sourceNew":"  void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i=0; i<q.length; i+=2) {\n      params.add(q[i].toString(), q[i+1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    // query a random server\n    params.set(\"shards\", shards);\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress>0) {\n      System.out.println(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i=0; i<threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j=0; j<stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);                  \n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  void query(Object... q) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i=0; i<q.length; i+=2) {\n      params.add(q[i].toString(), q[i+1].toString());\n    }\n\n    QueryResponse controlRsp = controlClient.query(params);\n\n    // query a random server\n    params.set(\"shards\", shards);\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n\n    compareResponses(rsp, controlRsp);\n  }\n\n","bugFix":null,"bugIntro":["e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22d814598a0c779fda6ee6e216867beffc6366c4","date":1254091430,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/TestDistributedSearch#query(Object...).mjava","pathOld":"src/test/org/apache/solr/TestDistributedSearch#query(Object...).mjava","sourceNew":"  void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i=0; i<q.length; i+=2) {\n      params.add(q[i].toString(), q[i+1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    // query a random server\n    params.set(\"shards\", shards);\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress>0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i=0; i<threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j=0; j<stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);                  \n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i=0; i<q.length; i+=2) {\n      params.add(q[i].toString(), q[i+1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    // query a random server\n    params.set(\"shards\", shards);\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress>0) {\n      System.out.println(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i=0; i<threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j=0; j<stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);                  \n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0b57d1523f42368168ea21982dd84effd69453d3","date":1260216800,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"src/test/org/apache/solr/TestDistributedSearch#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    // query a random server\n    params.set(\"shards\", shards);\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i=0; i<q.length; i+=2) {\n      params.add(q[i].toString(), q[i+1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    // query a random server\n    params.set(\"shards\", shards);\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress>0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i=0; i<threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j=0; j<stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);                  \n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"22d814598a0c779fda6ee6e216867beffc6366c4":["baf85cd7d0ab2cbcfa661515d5ea50b010267aaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"0b57d1523f42368168ea21982dd84effd69453d3":["22d814598a0c779fda6ee6e216867beffc6366c4"],"baf85cd7d0ab2cbcfa661515d5ea50b010267aaa":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"22d814598a0c779fda6ee6e216867beffc6366c4":["0b57d1523f42368168ea21982dd84effd69453d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"0b57d1523f42368168ea21982dd84effd69453d3":[],"baf85cd7d0ab2cbcfa661515d5ea50b010267aaa":["22d814598a0c779fda6ee6e216867beffc6366c4"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["baf85cd7d0ab2cbcfa661515d5ea50b010267aaa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0b57d1523f42368168ea21982dd84effd69453d3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}