{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#checkResult(FacetResultNode,String,double).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#checkResult(FacetResultNode,String,double).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#checkResult(FacetResultNode,String,double).mjava","sourceNew":"  private static void checkResult(FacetResultNode sub, String label, double value) {\n    assertEquals(\"Label of subresult \" + sub.getLabel() + \" was incorrect\",\n        label, sub.getLabel().toString());\n    assertEquals(\n        \"Value for \" + sub.getLabel() + \" subresult was incorrect\",\n        value, sub.getValue(), 0.0);\n  }\n\n","sourceOld":"  private static void checkResult(FacetResultNode sub, String label, double value) {\n    assertEquals(\"Label of subresult \" + sub.getLabel() + \" was incorrect\",\n        label, sub.getLabel().toString());\n    assertEquals(\n        \"Value for \" + sub.getLabel() + \" subresult was incorrect\",\n        value, sub.getValue(), 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#checkResult(FacetResultNode,String,double).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#checkResult(FacetResultNode,String,double).mjava","sourceNew":"  private static void checkResult(FacetResultNode sub, String label, double value) {\n    assertEquals(\"Label of subresult \" + sub.getLabel() + \" was incorrect\", label, sub.getLabel().toString());\n    assertEquals(\"Value for \" + sub.getLabel() + \" subresult was incorrect\", value, sub.getValue(), 0.0);\n  }\n\n","sourceOld":"  private static void checkResult(FacetResultNode sub, String label, double value) {\n    assertEquals(\"Label of subresult \" + sub.getLabel() + \" was incorrect\",\n        label, sub.getLabel().toString());\n    assertEquals(\n        \"Value for \" + sub.getLabel() + \" subresult was incorrect\",\n        value, sub.getValue(), 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#checkResult(FacetResultNode,String,double).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#checkResult(FacetResultNode,String,double).mjava","sourceNew":"  private static void checkResult(FacetResultNode sub, String label, double value) {\n    assertEquals(\"Label of subresult \" + sub.getLabel() + \" was incorrect\", label, sub.getLabel().toString());\n    assertEquals(\"Value for \" + sub.getLabel() + \" subresult was incorrect\", value, sub.getValue(), 0.0);\n  }\n\n","sourceOld":"  private static void checkResult(FacetResultNode sub, String label, double value) {\n    assertEquals(\"Label of subresult \" + sub.getLabel() + \" was incorrect\",\n        label, sub.getLabel().toString());\n    assertEquals(\n        \"Value for \" + sub.getLabel() + \" subresult was incorrect\",\n        value, sub.getValue(), 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#checkResult(FacetResultNode,String,double).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#checkResult(FacetResultNode,String,double).mjava","sourceNew":"  private static void checkResult(FacetResultNode sub, String label, double value) {\n    assertEquals(\"Label of subresult \" + sub.label + \" was incorrect\", label, sub.label.toString());\n    assertEquals(\"Value for \" + sub.label + \" subresult was incorrect\", value, sub.value, 0.0);\n  }\n\n","sourceOld":"  private static void checkResult(FacetResultNode sub, String label, double value) {\n    assertEquals(\"Label of subresult \" + sub.getLabel() + \" was incorrect\", label, sub.getLabel().toString());\n    assertEquals(\"Value for \" + sub.getLabel() + \" subresult was incorrect\", value, sub.getValue(), 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#checkResult(FacetResultNode,String,double).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#checkResult(FacetResultNode,String,double).mjava","sourceNew":"  private static void checkResult(FacetResultNode sub, String label, double value) {\n    assertEquals(\"Label of subresult \" + sub.label + \" was incorrect\", label, sub.label.toString());\n    assertEquals(\"Value for \" + sub.label + \" subresult was incorrect\", value, sub.value, 0.0);\n  }\n\n","sourceOld":"  private static void checkResult(FacetResultNode sub, String label, double value) {\n    assertEquals(\"Label of subresult \" + sub.getLabel() + \" was incorrect\", label, sub.getLabel().toString());\n    assertEquals(\"Value for \" + sub.getLabel() + \" subresult was incorrect\", value, sub.getValue(), 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#checkResult(FacetResultNode,String,double).mjava","sourceNew":null,"sourceOld":"  private static void checkResult(FacetResultNode sub, String label, double value) {\n    assertEquals(\"Label of subresult \" + sub.label + \" was incorrect\", label, sub.label.toString());\n    assertEquals(\"Value for \" + sub.label + \" subresult was incorrect\", value, sub.value, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#checkResult(FacetResultNode,String,double).mjava","sourceNew":null,"sourceOld":"  private static void checkResult(FacetResultNode sub, String label, double value) {\n    assertEquals(\"Label of subresult \" + sub.label + \" was incorrect\", label, sub.label.toString());\n    assertEquals(\"Value for \" + sub.label + \" subresult was incorrect\", value, sub.value, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["811cdb4a80352766eb0c762e48972707a924e5cd","f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["811cdb4a80352766eb0c762e48972707a924e5cd"],"07155cdd910937cdf6877e48884d5782845c8b8b":["c4015cd39dff8d4dec562d909f9766debac53aa6","811cdb4a80352766eb0c762e48972707a924e5cd"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"811cdb4a80352766eb0c762e48972707a924e5cd":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c4015cd39dff8d4dec562d909f9766debac53aa6","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["07155cdd910937cdf6877e48884d5782845c8b8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","811cdb4a80352766eb0c762e48972707a924e5cd"],"811cdb4a80352766eb0c762e48972707a924e5cd":["3cc728b07df73b197e6d940d27f9b08b63918f13","f01616d06510fc630b6ef0ec324bdebc2fc49b3c","07155cdd910937cdf6877e48884d5782845c8b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}