{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#dropBufferedUpdates().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#dropBufferedUpdates().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if we were able to drop buffered updates and return to the ACTIVE state */\n  public boolean dropBufferedUpdates() {\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.BUFFERING) return false;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Dropping buffered updates \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        if (tlog != null) {\n          tlog.rollback(recoveryInfo.positionOfStart);\n        }\n      }\n\n      state = State.ACTIVE;\n    } catch (IOException e) {\n      SolrException.log(log,\"Error attempting to roll back log\", e);\n      return false;\n    }\n    finally {\n      versionInfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#dropBufferedUpdates().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if we were able to drop buffered updates and return to the ACTIVE state */\n  public boolean dropBufferedUpdates() {\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.BUFFERING) return false;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Dropping buffered updates \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        if (tlog != null) {\n          tlog.rollback(recoveryInfo.positionOfStart);\n        }\n      }\n\n      state = State.ACTIVE;\n    } catch (IOException e) {\n      SolrException.log(log,\"Error attempting to roll back log\", e);\n      return false;\n    }\n    finally {\n      versionInfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#dropBufferedUpdates().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if we were able to drop buffered updates and return to the ACTIVE state */\n  public boolean dropBufferedUpdates() {\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.BUFFERING) return false;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Dropping buffered updates \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        if (tlog != null) {\n          tlog.rollback(recoveryInfo.positionOfStart);\n        }\n      }\n\n      state = State.ACTIVE;\n    } catch (IOException e) {\n      SolrException.log(log,\"Error attempting to roll back log\", e);\n      return false;\n    }\n    finally {\n      versionInfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e99829242bceda4cf974ec0eb5d82d713615b3da","date":1337646971,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#dropBufferedUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#dropBufferedUpdates().mjava","sourceNew":"  /** Returns true if we were able to drop buffered updates and return to the ACTIVE state */\n  public boolean dropBufferedUpdates() {\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.BUFFERING) return false;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Dropping buffered updates \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        if (tlog != null) {\n          tlog.rollback(recoveryInfo.positionOfStart);\n        }\n      }\n\n      state = State.ACTIVE;\n      operationFlags &= ~FLAG_GAP;\n    } catch (IOException e) {\n      SolrException.log(log,\"Error attempting to roll back log\", e);\n      return false;\n    }\n    finally {\n      versionInfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Returns true if we were able to drop buffered updates and return to the ACTIVE state */\n  public boolean dropBufferedUpdates() {\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.BUFFERING) return false;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Dropping buffered updates \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        if (tlog != null) {\n          tlog.rollback(recoveryInfo.positionOfStart);\n        }\n      }\n\n      state = State.ACTIVE;\n    } catch (IOException e) {\n      SolrException.log(log,\"Error attempting to roll back log\", e);\n      return false;\n    }\n    finally {\n      versionInfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#dropBufferedUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#dropBufferedUpdates().mjava","sourceNew":"  /** Returns true if we were able to drop buffered updates and return to the ACTIVE state */\n  public boolean dropBufferedUpdates() {\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.BUFFERING) return false;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Dropping buffered updates \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        if (tlog != null) {\n          tlog.rollback(recoveryInfo.positionOfStart);\n        }\n      }\n\n      state = State.ACTIVE;\n      operationFlags &= ~FLAG_GAP;\n    } catch (IOException e) {\n      SolrException.log(log,\"Error attempting to roll back log\", e);\n      return false;\n    }\n    finally {\n      versionInfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Returns true if we were able to drop buffered updates and return to the ACTIVE state */\n  public boolean dropBufferedUpdates() {\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.BUFFERING) return false;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Dropping buffered updates \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        if (tlog != null) {\n          tlog.rollback(recoveryInfo.positionOfStart);\n        }\n      }\n\n      state = State.ACTIVE;\n    } catch (IOException e) {\n      SolrException.log(log,\"Error attempting to roll back log\", e);\n      return false;\n    }\n    finally {\n      versionInfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#dropBufferedUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#dropBufferedUpdates().mjava","sourceNew":"  /** Returns true if we were able to drop buffered updates and return to the ACTIVE state */\n  public boolean dropBufferedUpdates() {\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.BUFFERING) return false;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Dropping buffered updates \" + this);\n      }\n\n      dropBufferTlog();\n\n      state = State.ACTIVE;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Returns true if we were able to drop buffered updates and return to the ACTIVE state */\n  public boolean dropBufferedUpdates() {\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.BUFFERING) return false;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Dropping buffered updates \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        if (tlog != null) {\n          tlog.rollback(recoveryInfo.positionOfStart);\n        }\n      }\n\n      state = State.ACTIVE;\n      operationFlags &= ~FLAG_GAP;\n    } catch (IOException e) {\n      SolrException.log(log,\"Error attempting to roll back log\", e);\n      return false;\n    }\n    finally {\n      versionInfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#dropBufferedUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#dropBufferedUpdates().mjava","sourceNew":"  /** Returns true if we were able to drop buffered updates and return to the ACTIVE state */\n  public boolean dropBufferedUpdates() {\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.BUFFERING) return false;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Dropping buffered updates \" + this);\n      }\n\n      dropBufferTlog();\n\n      state = State.ACTIVE;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Returns true if we were able to drop buffered updates and return to the ACTIVE state */\n  public boolean dropBufferedUpdates() {\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.BUFFERING) return false;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Dropping buffered updates \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        if (tlog != null) {\n          tlog.rollback(recoveryInfo.positionOfStart);\n        }\n      }\n\n      state = State.ACTIVE;\n      operationFlags &= ~FLAG_GAP;\n    } catch (IOException e) {\n      SolrException.log(log,\"Error attempting to roll back log\", e);\n      return false;\n    }\n    finally {\n      versionInfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#dropBufferedUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#dropBufferedUpdates().mjava","sourceNew":"  /** Returns true if we were able to drop buffered updates and return to the ACTIVE state */\n  public boolean dropBufferedUpdates() {\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.BUFFERING) return false;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Dropping buffered updates \" + this);\n      }\n\n      dropBufferTlog();\n\n      state = State.ACTIVE;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Returns true if we were able to drop buffered updates and return to the ACTIVE state */\n  public boolean dropBufferedUpdates() {\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.BUFFERING) return false;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Dropping buffered updates \" + this);\n      }\n\n      // since we blocked updates, this synchronization shouldn't strictly be necessary.\n      synchronized (this) {\n        if (tlog != null) {\n          tlog.rollback(recoveryInfo.positionOfStart);\n        }\n      }\n\n      state = State.ACTIVE;\n      operationFlags &= ~FLAG_GAP;\n    } catch (IOException e) {\n      SolrException.log(log,\"Error attempting to roll back log\", e);\n      return false;\n    }\n    finally {\n      versionInfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#dropBufferedUpdates().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#dropBufferedUpdates().mjava","sourceNew":"  /** Returns true if we were able to drop buffered updates and return to the ACTIVE state */\n  public boolean dropBufferedUpdates() {\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.BUFFERING) return false;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Dropping buffered updates {}\", this);\n      }\n\n      dropBufferTlog();\n\n      state = State.ACTIVE;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Returns true if we were able to drop buffered updates and return to the ACTIVE state */\n  public boolean dropBufferedUpdates() {\n    versionInfo.blockUpdates();\n    try {\n      if (state != State.BUFFERING) return false;\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Dropping buffered updates \" + this);\n      }\n\n      dropBufferTlog();\n\n      state = State.ACTIVE;\n    } finally {\n      versionInfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"740d649f013f07efbeb73ca854f106c60166e7c0":["1455c941cc4ce652efc776fc23471b0e499246f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["e99829242bceda4cf974ec0eb5d82d713615b3da","1455c941cc4ce652efc776fc23471b0e499246f6"],"3599646b4d4c346cf74d334813488b8b337b5bf5":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","e99829242bceda4cf974ec0eb5d82d713615b3da"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e99829242bceda4cf974ec0eb5d82d713615b3da":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f592209545c71895260367152601e9200399776d":["e99829242bceda4cf974ec0eb5d82d713615b3da","1455c941cc4ce652efc776fc23471b0e499246f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"],"1455c941cc4ce652efc776fc23471b0e499246f6":["e99829242bceda4cf974ec0eb5d82d713615b3da"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","3599646b4d4c346cf74d334813488b8b337b5bf5","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","e99829242bceda4cf974ec0eb5d82d713615b3da"],"e99829242bceda4cf974ec0eb5d82d713615b3da":["b70042a8a492f7054d480ccdd2be9796510d4327","3599646b4d4c346cf74d334813488b8b337b5bf5","f592209545c71895260367152601e9200399776d","1455c941cc4ce652efc776fc23471b0e499246f6"],"f592209545c71895260367152601e9200399776d":[],"1455c941cc4ce652efc776fc23471b0e499246f6":["740d649f013f07efbeb73ca854f106c60166e7c0","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","b70042a8a492f7054d480ccdd2be9796510d4327","3599646b4d4c346cf74d334813488b8b337b5bf5","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}