{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#waitForClusterToSync(int,CloudSolrClient,String).mjava","commits":[{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#waitForClusterToSync(int,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#waitForTargetToSync(int,CloudSolrClient).mjava","sourceNew":"  public static long waitForClusterToSync(int numDocs, CloudSolrClient clusterSolrClient, String query) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        clusterSolrClient.commit();\n        response = clusterSolrClient.query(new SolrQuery(query));\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on cluster. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","sourceOld":"  private long waitForTargetToSync(int numDocs, CloudSolrClient targetSolrClient) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        targetSolrClient.commit();\n        response = targetSolrClient.query(new SolrQuery(\"*:*\"));\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on target. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#waitForTargetToSync(int,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#waitForClusterToSync(int,CloudSolrClient,String).mjava","sourceNew":"  private long waitForTargetToSync(int numDocs, CloudSolrClient targetSolrClient) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        targetSolrClient.commit();\n        response = targetSolrClient.query(new SolrQuery(\"*:*\"));\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on target. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","sourceOld":"  public static long waitForClusterToSync(int numDocs, CloudSolrClient clusterSolrClient, String query) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        clusterSolrClient.commit();\n        response = clusterSolrClient.query(new SolrQuery(query));\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on cluster. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#waitForClusterToSync(int,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#waitForTargetToSync(int,CloudSolrClient).mjava","sourceNew":"  protected static long waitForClusterToSync(int numDocs, CloudSolrClient clusterSolrClient, String query) throws Exception {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      clusterSolrClient.commit();\n      response = clusterSolrClient.query(new SolrQuery(query));\n      if (response.getResults().getNumFound() == numDocs) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","sourceOld":"  private long waitForTargetToSync(int numDocs, CloudSolrClient targetSolrClient) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        targetSolrClient.commit();\n        response = targetSolrClient.query(new SolrQuery(\"*:*\"));\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on target. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#waitForClusterToSync(int,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#waitForTargetToSync(int,CloudSolrClient).mjava","sourceNew":"  protected static long waitForClusterToSync(int numDocs, CloudSolrClient clusterSolrClient, String query) throws Exception {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      clusterSolrClient.commit();\n      response = clusterSolrClient.query(new SolrQuery(query));\n      if (response.getResults().getNumFound() == numDocs) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","sourceOld":"  private long waitForTargetToSync(int numDocs, CloudSolrClient targetSolrClient) throws SolrServerException, IOException, InterruptedException {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      try {\n        targetSolrClient.commit();\n        response = targetSolrClient.query(new SolrQuery(\"*:*\"));\n        if (response.getResults().getNumFound() == numDocs) {\n          break;\n        }\n      } catch (Exception e) {\n        log.warn(\"Exception trying to commit on target. This is expected and safe to ignore.\", e);\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11f21773085db637873ba6e0bcd4265b2b4c7730","date":1534756753,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#waitForClusterToSync(int,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#waitForClusterToSync(int,CloudSolrClient,String).mjava","sourceNew":"  protected static long waitForClusterToSync(int numDocs, CloudSolrClient clusterSolrClient, String query) throws Exception {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      clusterSolrClient.commit();\n      response = clusterSolrClient.query(new SolrQuery(query));\n      if (response.getResults().getNumFound() == numDocs) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : null;\n  }\n\n","sourceOld":"  protected static long waitForClusterToSync(int numDocs, CloudSolrClient clusterSolrClient, String query) throws Exception {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      clusterSolrClient.commit();\n      response = clusterSolrClient.query(new SolrQuery(query));\n      if (response.getResults().getNumFound() == numDocs) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","bugFix":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42210058b8ae092085fa2658880b69931512e8bf","date":1579289439,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#waitForClusterToSync(int,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#waitForClusterToSync(int,CloudSolrClient,String).mjava","sourceNew":"  protected static long waitForClusterToSync(int numDocs, CloudSolrClient clusterSolrClient, String query) throws Exception {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      clusterSolrClient.commit();\n      response = clusterSolrClient.query(new SolrQuery(query));\n      if (response.getResults().getNumFound() == numDocs) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","sourceOld":"  protected static long waitForClusterToSync(int numDocs, CloudSolrClient clusterSolrClient, String query) throws Exception {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      clusterSolrClient.commit();\n      response = clusterSolrClient.query(new SolrQuery(query));\n      if (response.getResults().getNumFound() == numDocs) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#waitForClusterToSync(int,CloudSolrClient,String).mjava","sourceNew":null,"sourceOld":"  protected static long waitForClusterToSync(int numDocs, CloudSolrClient clusterSolrClient, String query) throws Exception {\n    long start = System.nanoTime();\n    QueryResponse response = null;\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(120, TimeUnit.SECONDS)) {\n      clusterSolrClient.commit();\n      response = clusterSolrClient.query(new SolrQuery(query));\n      if (response.getResults().getNumFound() == numDocs) {\n        break;\n      }\n      Thread.sleep(1000);\n    }\n    return response != null ? response.getResults().getNumFound() : 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"42210058b8ae092085fa2658880b69931512e8bf":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"e7da9d8536c11576df10e348efa79d2739170936":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["42210058b8ae092085fa2658880b69931512e8bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"42210058b8ae092085fa2658880b69931512e8bf":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7da9d8536c11576df10e348efa79d2739170936"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["42210058b8ae092085fa2658880b69931512e8bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}