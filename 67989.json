{"path":"solr/core/src/test/org/apache/solr/search/TestNoOpRegenerator#testRegeneration().mjava","commits":[{"id":"a5baa1016e29bee986aa8e40a41c8d90f4389271","date":1377211947,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestNoOpRegenerator#testRegeneration().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testRegeneration() throws Exception {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n    \n    // add some items\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      assertEquals(2, searcher.maxDoc());\n      SolrCache<Object,Object> cache = searcher.getCache(\"myPerSegmentCache\");\n      assertEquals(0, cache.size());\n      cache.put(\"key1\", \"value1\");\n      cache.put(\"key2\", \"value2\");\n      assertEquals(2, cache.size());\n    } finally {\n      ref.decref();\n    }\n    \n    // add a doc and commit: we should see our cached items still there\n    assertU(adoc(\"id\", \"3\"));\n    assertU(commit());\n    ref = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      assertEquals(3, searcher.maxDoc());\n      SolrCache<Object,Object> cache = searcher.getCache(\"myPerSegmentCache\");\n      assertEquals(2, cache.size());\n      assertEquals(\"value1\", cache.get(\"key1\"));\n      assertEquals(\"value2\", cache.get(\"key2\"));\n    } finally {\n      ref.decref();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestNoOpRegenerator#testRegeneration().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testRegeneration() throws Exception {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n    \n    // add some items\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      assertEquals(2, searcher.maxDoc());\n      SolrCache<Object,Object> cache = searcher.getCache(\"myPerSegmentCache\");\n      assertEquals(0, cache.size());\n      cache.put(\"key1\", \"value1\");\n      cache.put(\"key2\", \"value2\");\n      assertEquals(2, cache.size());\n    } finally {\n      ref.decref();\n    }\n    \n    // add a doc and commit: we should see our cached items still there\n    assertU(adoc(\"id\", \"3\"));\n    assertU(commit());\n    ref = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      assertEquals(3, searcher.maxDoc());\n      SolrCache<Object,Object> cache = searcher.getCache(\"myPerSegmentCache\");\n      assertEquals(2, cache.size());\n      assertEquals(\"value1\", cache.get(\"key1\"));\n      assertEquals(\"value2\", cache.get(\"key2\"));\n    } finally {\n      ref.decref();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestNoOpRegenerator#testRegeneration().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestNoOpRegenerator#testRegeneration().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testRegeneration() throws Exception {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n    \n    // add some items\n    h.getCore().withSearcher(searcher -> {\n      assertEquals(2, searcher.maxDoc());\n      SolrCache<Object,Object> cache = searcher.getCache(\"myPerSegmentCache\");\n      assertEquals(0, cache.size());\n      cache.put(\"key1\", \"value1\");\n      cache.put(\"key2\", \"value2\");\n      assertEquals(2, cache.size());\n      return null;\n    });\n    \n    // add a doc and commit: we should see our cached items still there\n    assertU(adoc(\"id\", \"3\"));\n    assertU(commit());\n\n    h.getCore().withSearcher(searcher -> {\n      assertEquals(3, searcher.maxDoc());\n      SolrCache<Object,Object> cache = searcher.getCache(\"myPerSegmentCache\");\n      assertEquals(2, cache.size());\n      assertEquals(\"value1\", cache.get(\"key1\"));\n      assertEquals(\"value2\", cache.get(\"key2\"));\n      return null;\n    });\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testRegeneration() throws Exception {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n    \n    // add some items\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      assertEquals(2, searcher.maxDoc());\n      SolrCache<Object,Object> cache = searcher.getCache(\"myPerSegmentCache\");\n      assertEquals(0, cache.size());\n      cache.put(\"key1\", \"value1\");\n      cache.put(\"key2\", \"value2\");\n      assertEquals(2, cache.size());\n    } finally {\n      ref.decref();\n    }\n    \n    // add a doc and commit: we should see our cached items still there\n    assertU(adoc(\"id\", \"3\"));\n    assertU(commit());\n    ref = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      assertEquals(3, searcher.maxDoc());\n      SolrCache<Object,Object> cache = searcher.getCache(\"myPerSegmentCache\");\n      assertEquals(2, cache.size());\n      assertEquals(\"value1\", cache.get(\"key1\"));\n      assertEquals(\"value2\", cache.get(\"key2\"));\n    } finally {\n      ref.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestNoOpRegenerator#testRegeneration().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestNoOpRegenerator#testRegeneration().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testRegeneration() throws Exception {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n    \n    // add some items\n    h.getCore().withSearcher(searcher -> {\n      assertEquals(2, searcher.maxDoc());\n      SolrCache<Object,Object> cache = searcher.getCache(\"myPerSegmentCache\");\n      assertEquals(0, cache.size());\n      cache.put(\"key1\", \"value1\");\n      cache.put(\"key2\", \"value2\");\n      assertEquals(2, cache.size());\n      return null;\n    });\n    \n    // add a doc and commit: we should see our cached items still there\n    assertU(adoc(\"id\", \"3\"));\n    assertU(commit());\n\n    h.getCore().withSearcher(searcher -> {\n      assertEquals(3, searcher.maxDoc());\n      SolrCache<Object,Object> cache = searcher.getCache(\"myPerSegmentCache\");\n      assertEquals(2, cache.size());\n      assertEquals(\"value1\", cache.get(\"key1\"));\n      assertEquals(\"value2\", cache.get(\"key2\"));\n      return null;\n    });\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testRegeneration() throws Exception {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n    \n    // add some items\n    RefCounted<SolrIndexSearcher> ref = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      assertEquals(2, searcher.maxDoc());\n      SolrCache<Object,Object> cache = searcher.getCache(\"myPerSegmentCache\");\n      assertEquals(0, cache.size());\n      cache.put(\"key1\", \"value1\");\n      cache.put(\"key2\", \"value2\");\n      assertEquals(2, cache.size());\n    } finally {\n      ref.decref();\n    }\n    \n    // add a doc and commit: we should see our cached items still there\n    assertU(adoc(\"id\", \"3\"));\n    assertU(commit());\n    ref = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher searcher = ref.get();\n      assertEquals(3, searcher.maxDoc());\n      SolrCache<Object,Object> cache = searcher.getCache(\"myPerSegmentCache\");\n      assertEquals(2, cache.size());\n      assertEquals(\"value1\", cache.get(\"key1\"));\n      assertEquals(\"value2\", cache.get(\"key2\"));\n    } finally {\n      ref.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5baa1016e29bee986aa8e40a41c8d90f4389271"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5baa1016e29bee986aa8e40a41c8d90f4389271":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ab833f2b623042c834458d4cbcad05073a93793":["a5baa1016e29bee986aa8e40a41c8d90f4389271"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["a5baa1016e29bee986aa8e40a41c8d90f4389271","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","a5baa1016e29bee986aa8e40a41c8d90f4389271"],"a5baa1016e29bee986aa8e40a41c8d90f4389271":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}