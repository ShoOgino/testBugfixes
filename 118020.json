{"path":"lucene/core/src/java/org/apache/lucene/util/AttributeFactory.DefaultAttributeFactory#createAttributeInstance(Class[#-extends-Attribute]).mjava","commits":[{"id":"93124590c6e2a8b45898cbae46f96c3a05d9bce0","date":1399415098,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeFactory.DefaultAttributeFactory#createAttributeInstance(Class[#-extends-Attribute]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public AttributeImpl createAttributeInstance(Class<? extends Attribute> attClass) {\n      // first lookup from cache:\n      Object cached = attClassImplMap.get(attClass);\n      if (cached instanceof MethodHandle) {\n        return invokeMethodHandle((MethodHandle) cached);\n      } else if (cached instanceof Reference) {\n        @SuppressWarnings(\"unchecked\") final Class<? extends AttributeImpl> clazz = \n            ((Reference<Class<? extends AttributeImpl>>) cached).get();\n        if (clazz != null) {\n          return invokeReflective(clazz);\n        }\n        cached = null;\n        // fall-through\n      }\n      // No cache hit!\n      // Please note: we have the slight chance that another thread may do the same, but who cares?\n      assert cached == null;\n      final Class<? extends AttributeImpl> implClazz = findImplClass(attClass);\n      // if the attribute impl is from our own ClassLoader, we optimize to use pre-allocated MethodHandle to instantiate the object\n      if (useMethodHandles && implClazz.getClassLoader() == myClassLoader) {\n        final MethodHandle constr = findAttributeImplCtor(implClazz);\n        attClassImplMap.put(attClass, constr);\n        return invokeMethodHandle(constr);\n      } else {\n        // otherwise, to not refer to the class forever (because the MethodHandle strongly\n        // references the class), so it can never be unloaded, we use slower reflection:\n        attClassImplMap.put(attClass, new WeakReference<>(implClazz));\n        return invokeReflective(implClazz);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38fce186d877ee988f82c708a92d9e21343e3bfe","date":1408099813,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeFactory.DefaultAttributeFactory#createAttributeInstance(Class[#-extends-Attribute]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeFactory.DefaultAttributeFactory#createAttributeInstance(Class[#-extends-Attribute]).mjava","sourceNew":"    @Override\n    public AttributeImpl createAttributeInstance(Class<? extends Attribute> attClass) {\n      try {\n        return (AttributeImpl) constructors.get(attClass).invokeExact();\n      } catch (Throwable t) {\n        rethrow(t);\n        throw new AssertionError();\n      }\n    }\n\n","sourceOld":"    @Override\n    public AttributeImpl createAttributeInstance(Class<? extends Attribute> attClass) {\n      // first lookup from cache:\n      Object cached = attClassImplMap.get(attClass);\n      if (cached instanceof MethodHandle) {\n        return invokeMethodHandle((MethodHandle) cached);\n      } else if (cached instanceof Reference) {\n        @SuppressWarnings(\"unchecked\") final Class<? extends AttributeImpl> clazz = \n            ((Reference<Class<? extends AttributeImpl>>) cached).get();\n        if (clazz != null) {\n          return invokeReflective(clazz);\n        }\n        cached = null;\n        // fall-through\n      }\n      // No cache hit!\n      // Please note: we have the slight chance that another thread may do the same, but who cares?\n      assert cached == null;\n      final Class<? extends AttributeImpl> implClazz = findImplClass(attClass);\n      // if the attribute impl is from our own ClassLoader, we optimize to use pre-allocated MethodHandle to instantiate the object\n      if (useMethodHandles && implClazz.getClassLoader() == myClassLoader) {\n        final MethodHandle constr = findAttributeImplCtor(implClazz);\n        attClassImplMap.put(attClass, constr);\n        return invokeMethodHandle(constr);\n      } else {\n        // otherwise, to not refer to the class forever (because the MethodHandle strongly\n        // references the class), so it can never be unloaded, we use slower reflection:\n        attClassImplMap.put(attClass, new WeakReference<>(implClazz));\n        return invokeReflective(implClazz);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d","date":1495118387,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeFactory.DefaultAttributeFactory#createAttributeInstance(Class[#-extends-Attribute]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeFactory.DefaultAttributeFactory#createAttributeInstance(Class[#-extends-Attribute]).mjava","sourceNew":"    @Override\n    public AttributeImpl createAttributeInstance(Class<? extends Attribute> attClass) {\n      try {\n        return (AttributeImpl) constructors.get(attClass).invokeExact();\n      } catch (Error | RuntimeException e) {\n        throw e;\n      } catch (Throwable e) {\n        throw new UndeclaredThrowableException(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public AttributeImpl createAttributeInstance(Class<? extends Attribute> attClass) {\n      try {\n        return (AttributeImpl) constructors.get(attClass).invokeExact();\n      } catch (Throwable t) {\n        rethrow(t);\n        throw new AssertionError();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeFactory.DefaultAttributeFactory#createAttributeInstance(Class[#-extends-Attribute]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeFactory.DefaultAttributeFactory#createAttributeInstance(Class[#-extends-Attribute]).mjava","sourceNew":"    @Override\n    public AttributeImpl createAttributeInstance(Class<? extends Attribute> attClass) {\n      try {\n        return (AttributeImpl) constructors.get(attClass).invokeExact();\n      } catch (Error | RuntimeException e) {\n        throw e;\n      } catch (Throwable e) {\n        throw new UndeclaredThrowableException(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public AttributeImpl createAttributeInstance(Class<? extends Attribute> attClass) {\n      try {\n        return (AttributeImpl) constructors.get(attClass).invokeExact();\n      } catch (Throwable t) {\n        rethrow(t);\n        throw new AssertionError();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93124590c6e2a8b45898cbae46f96c3a05d9bce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["38fce186d877ee988f82c708a92d9e21343e3bfe","8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d":["38fce186d877ee988f82c708a92d9e21343e3bfe"],"38fce186d877ee988f82c708a92d9e21343e3bfe":["93124590c6e2a8b45898cbae46f96c3a05d9bce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d"]},"commit2Childs":{"93124590c6e2a8b45898cbae46f96c3a05d9bce0":["38fce186d877ee988f82c708a92d9e21343e3bfe"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93124590c6e2a8b45898cbae46f96c3a05d9bce0"],"38fce186d877ee988f82c708a92d9e21343e3bfe":["e9017cf144952056066919f1ebc7897ff9bd71b1","8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d"],"8eb6b07bcb86da69c4a188327cf7e1ea8ae4ec0d":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}