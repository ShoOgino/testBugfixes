{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testOperatorsAndMultiWordSynonymsSplitOnWhitespace().mjava","commits":[{"id":"138a352a6d4e54824d0275bc7aa1b784e78c81fe","date":1467756222,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testOperatorsAndMultiWordSynonymsSplitOnWhitespace().mjava","pathOld":"/dev/null","sourceNew":"  public void testOperatorsAndMultiWordSynonymsSplitOnWhitespace() throws Exception {\n    Analyzer a = new MockSynonymAnalyzer();\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = true;\n\n    assertQueryEquals(\"+guinea pig\", a, \"+guinea pig\");\n    assertQueryEquals(\"-guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"!guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea* pig\", a, \"guinea* pig\");\n    assertQueryEquals(\"guinea? pig\", a, \"guinea? pig\");\n    assertQueryEquals(\"guinea~2 pig\", a, \"guinea~2 pig\");\n    assertQueryEquals(\"guinea^2 pig\", a, \"(guinea)^2.0 pig\");\n\n    assertQueryEquals(\"guinea +pig\", a, \"guinea +pig\");\n    assertQueryEquals(\"guinea -pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea !pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea pig*\", a, \"guinea pig*\");\n    assertQueryEquals(\"guinea pig?\", a, \"guinea pig?\");\n    assertQueryEquals(\"guinea pig~2\", a, \"guinea pig~2\");\n    assertQueryEquals(\"guinea pig^2\", a, \"guinea (pig)^2.0\");\n\n    assertQueryEquals(\"field:guinea pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea field:pig\", a, \"guinea pig\");\n\n    assertQueryEquals(\"NOT guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea NOT pig\", a, \"guinea -pig\");\n\n    assertQueryEquals(\"guinea pig AND dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs AND guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n    assertQueryEquals(\"guinea pig && dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs && guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n\n    assertQueryEquals(\"guinea pig OR dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs OR guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n    assertQueryEquals(\"guinea pig || dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs || guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n\n    assertQueryEquals(\"\\\"guinea\\\" pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea \\\"pig\\\"\", a, \"guinea pig\");\n\n    assertQueryEquals(\"(guinea) pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea (pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"/guinea/ pig\", a, \"/guinea/ pig\");\n    assertQueryEquals(\"guinea /pig/\", a, \"guinea /pig/\");\n\n    assertQueryEquals(\"(guinea pig)\", a, \"guinea pig\");\n    assertQueryEquals(\"+(guinea pig)\", a, \"+(guinea pig)\");\n    assertQueryEquals(\"-(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"!(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"NOT (guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"(guinea pig)^2\", a, \"(guinea pig)^2.0\");\n\n    assertQueryEquals(\"field:(guinea pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"+small guinea pig\", a, \"+small guinea pig\");\n    assertQueryEquals(\"-small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"!small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"NOT small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"small* guinea pig\", a, \"small* guinea pig\");\n    assertQueryEquals(\"small? guinea pig\", a, \"small? guinea pig\");\n    assertQueryEquals(\"\\\"small\\\" guinea pig\", a, \"small guinea pig\");\n\n    assertQueryEquals(\"guinea pig +running\", a, \"guinea pig +running\");\n    assertQueryEquals(\"guinea pig -running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig !running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig NOT running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig running*\", a, \"guinea pig running*\");\n    assertQueryEquals(\"guinea pig running?\", a, \"guinea pig running?\");\n    assertQueryEquals(\"guinea pig \\\"running\\\"\", a, \"guinea pig running\");\n\n    assertQueryEquals(\"\\\"guinea pig\\\"~2\", a, \"\\\"(guinea cavy) pig\\\"~2\");\n\n    assertQueryEquals(\"field:\\\"guinea pig\\\"\", a, \"\\\"(guinea cavy) pig\\\"\");\n\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testOperatorsAndMultiWordSynonymsSplitOnWhitespace().mjava","pathOld":"/dev/null","sourceNew":"  public void testOperatorsAndMultiWordSynonymsSplitOnWhitespace() throws Exception {\n    Analyzer a = new MockSynonymAnalyzer();\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = true;\n\n    assertQueryEquals(\"+guinea pig\", a, \"+guinea pig\");\n    assertQueryEquals(\"-guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"!guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea* pig\", a, \"guinea* pig\");\n    assertQueryEquals(\"guinea? pig\", a, \"guinea? pig\");\n    assertQueryEquals(\"guinea~2 pig\", a, \"guinea~2 pig\");\n    assertQueryEquals(\"guinea^2 pig\", a, \"(guinea)^2.0 pig\");\n\n    assertQueryEquals(\"guinea +pig\", a, \"guinea +pig\");\n    assertQueryEquals(\"guinea -pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea !pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea pig*\", a, \"guinea pig*\");\n    assertQueryEquals(\"guinea pig?\", a, \"guinea pig?\");\n    assertQueryEquals(\"guinea pig~2\", a, \"guinea pig~2\");\n    assertQueryEquals(\"guinea pig^2\", a, \"guinea (pig)^2.0\");\n\n    assertQueryEquals(\"field:guinea pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea field:pig\", a, \"guinea pig\");\n\n    assertQueryEquals(\"NOT guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea NOT pig\", a, \"guinea -pig\");\n\n    assertQueryEquals(\"guinea pig AND dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs AND guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n    assertQueryEquals(\"guinea pig && dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs && guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n\n    assertQueryEquals(\"guinea pig OR dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs OR guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n    assertQueryEquals(\"guinea pig || dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs || guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n\n    assertQueryEquals(\"\\\"guinea\\\" pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea \\\"pig\\\"\", a, \"guinea pig\");\n\n    assertQueryEquals(\"(guinea) pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea (pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"/guinea/ pig\", a, \"/guinea/ pig\");\n    assertQueryEquals(\"guinea /pig/\", a, \"guinea /pig/\");\n\n    assertQueryEquals(\"(guinea pig)\", a, \"guinea pig\");\n    assertQueryEquals(\"+(guinea pig)\", a, \"+(guinea pig)\");\n    assertQueryEquals(\"-(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"!(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"NOT (guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"(guinea pig)^2\", a, \"(guinea pig)^2.0\");\n\n    assertQueryEquals(\"field:(guinea pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"+small guinea pig\", a, \"+small guinea pig\");\n    assertQueryEquals(\"-small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"!small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"NOT small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"small* guinea pig\", a, \"small* guinea pig\");\n    assertQueryEquals(\"small? guinea pig\", a, \"small? guinea pig\");\n    assertQueryEquals(\"\\\"small\\\" guinea pig\", a, \"small guinea pig\");\n\n    assertQueryEquals(\"guinea pig +running\", a, \"guinea pig +running\");\n    assertQueryEquals(\"guinea pig -running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig !running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig NOT running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig running*\", a, \"guinea pig running*\");\n    assertQueryEquals(\"guinea pig running?\", a, \"guinea pig running?\");\n    assertQueryEquals(\"guinea pig \\\"running\\\"\", a, \"guinea pig running\");\n\n    assertQueryEquals(\"\\\"guinea pig\\\"~2\", a, \"\\\"(guinea cavy) pig\\\"~2\");\n\n    assertQueryEquals(\"field:\\\"guinea pig\\\"\", a, \"\\\"(guinea cavy) pig\\\"\");\n\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52c30617998e1bc2a946cc226f52e9b35162b1e","date":1483438353,"type":3,"author":"Matt Weber","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testOperatorsAndMultiWordSynonymsSplitOnWhitespace().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testOperatorsAndMultiWordSynonymsSplitOnWhitespace().mjava","sourceNew":"  public void testOperatorsAndMultiWordSynonymsSplitOnWhitespace() throws Exception {\n    Analyzer a = new MockSynonymAnalyzer();\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = true;\n\n    assertQueryEquals(\"+guinea pig\", a, \"+guinea pig\");\n    assertQueryEquals(\"-guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"!guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea* pig\", a, \"guinea* pig\");\n    assertQueryEquals(\"guinea? pig\", a, \"guinea? pig\");\n    assertQueryEquals(\"guinea~2 pig\", a, \"guinea~2 pig\");\n    assertQueryEquals(\"guinea^2 pig\", a, \"(guinea)^2.0 pig\");\n\n    assertQueryEquals(\"guinea +pig\", a, \"guinea +pig\");\n    assertQueryEquals(\"guinea -pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea !pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea pig*\", a, \"guinea pig*\");\n    assertQueryEquals(\"guinea pig?\", a, \"guinea pig?\");\n    assertQueryEquals(\"guinea pig~2\", a, \"guinea pig~2\");\n    assertQueryEquals(\"guinea pig^2\", a, \"guinea (pig)^2.0\");\n\n    assertQueryEquals(\"field:guinea pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea field:pig\", a, \"guinea pig\");\n\n    assertQueryEquals(\"NOT guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea NOT pig\", a, \"guinea -pig\");\n\n    assertQueryEquals(\"guinea pig AND dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs AND guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n    assertQueryEquals(\"guinea pig && dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs && guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n\n    assertQueryEquals(\"guinea pig OR dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs OR guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n    assertQueryEquals(\"guinea pig || dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs || guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n\n    assertQueryEquals(\"\\\"guinea\\\" pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea \\\"pig\\\"\", a, \"guinea pig\");\n\n    assertQueryEquals(\"(guinea) pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea (pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"/guinea/ pig\", a, \"/guinea/ pig\");\n    assertQueryEquals(\"guinea /pig/\", a, \"guinea /pig/\");\n\n    assertQueryEquals(\"(guinea pig)\", a, \"guinea pig\");\n    assertQueryEquals(\"+(guinea pig)\", a, \"+(guinea pig)\");\n    assertQueryEquals(\"-(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"!(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"NOT (guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"(guinea pig)^2\", a, \"(guinea pig)^2.0\");\n\n    assertQueryEquals(\"field:(guinea pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"+small guinea pig\", a, \"+small guinea pig\");\n    assertQueryEquals(\"-small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"!small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"NOT small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"small* guinea pig\", a, \"small* guinea pig\");\n    assertQueryEquals(\"small? guinea pig\", a, \"small? guinea pig\");\n    assertQueryEquals(\"\\\"small\\\" guinea pig\", a, \"small guinea pig\");\n\n    assertQueryEquals(\"guinea pig +running\", a, \"guinea pig +running\");\n    assertQueryEquals(\"guinea pig -running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig !running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig NOT running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig running*\", a, \"guinea pig running*\");\n    assertQueryEquals(\"guinea pig running?\", a, \"guinea pig running?\");\n    assertQueryEquals(\"guinea pig \\\"running\\\"\", a, \"guinea pig running\");\n\n    assertQueryEquals(\"\\\"guinea pig\\\"~2\", a, \"Graph(field:\\\"guinea pig\\\"~2, field:cavy, hasBoolean=false, hasPhrase=true)\");\n\n    assertQueryEquals(\"field:\\\"guinea pig\\\"\", a, \"Graph(field:\\\"guinea pig\\\", field:cavy, hasBoolean=false, hasPhrase=true)\");\n\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","sourceOld":"  public void testOperatorsAndMultiWordSynonymsSplitOnWhitespace() throws Exception {\n    Analyzer a = new MockSynonymAnalyzer();\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = true;\n\n    assertQueryEquals(\"+guinea pig\", a, \"+guinea pig\");\n    assertQueryEquals(\"-guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"!guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea* pig\", a, \"guinea* pig\");\n    assertQueryEquals(\"guinea? pig\", a, \"guinea? pig\");\n    assertQueryEquals(\"guinea~2 pig\", a, \"guinea~2 pig\");\n    assertQueryEquals(\"guinea^2 pig\", a, \"(guinea)^2.0 pig\");\n\n    assertQueryEquals(\"guinea +pig\", a, \"guinea +pig\");\n    assertQueryEquals(\"guinea -pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea !pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea pig*\", a, \"guinea pig*\");\n    assertQueryEquals(\"guinea pig?\", a, \"guinea pig?\");\n    assertQueryEquals(\"guinea pig~2\", a, \"guinea pig~2\");\n    assertQueryEquals(\"guinea pig^2\", a, \"guinea (pig)^2.0\");\n\n    assertQueryEquals(\"field:guinea pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea field:pig\", a, \"guinea pig\");\n\n    assertQueryEquals(\"NOT guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea NOT pig\", a, \"guinea -pig\");\n\n    assertQueryEquals(\"guinea pig AND dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs AND guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n    assertQueryEquals(\"guinea pig && dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs && guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n\n    assertQueryEquals(\"guinea pig OR dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs OR guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n    assertQueryEquals(\"guinea pig || dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs || guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n\n    assertQueryEquals(\"\\\"guinea\\\" pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea \\\"pig\\\"\", a, \"guinea pig\");\n\n    assertQueryEquals(\"(guinea) pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea (pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"/guinea/ pig\", a, \"/guinea/ pig\");\n    assertQueryEquals(\"guinea /pig/\", a, \"guinea /pig/\");\n\n    assertQueryEquals(\"(guinea pig)\", a, \"guinea pig\");\n    assertQueryEquals(\"+(guinea pig)\", a, \"+(guinea pig)\");\n    assertQueryEquals(\"-(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"!(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"NOT (guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"(guinea pig)^2\", a, \"(guinea pig)^2.0\");\n\n    assertQueryEquals(\"field:(guinea pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"+small guinea pig\", a, \"+small guinea pig\");\n    assertQueryEquals(\"-small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"!small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"NOT small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"small* guinea pig\", a, \"small* guinea pig\");\n    assertQueryEquals(\"small? guinea pig\", a, \"small? guinea pig\");\n    assertQueryEquals(\"\\\"small\\\" guinea pig\", a, \"small guinea pig\");\n\n    assertQueryEquals(\"guinea pig +running\", a, \"guinea pig +running\");\n    assertQueryEquals(\"guinea pig -running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig !running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig NOT running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig running*\", a, \"guinea pig running*\");\n    assertQueryEquals(\"guinea pig running?\", a, \"guinea pig running?\");\n    assertQueryEquals(\"guinea pig \\\"running\\\"\", a, \"guinea pig running\");\n\n    assertQueryEquals(\"\\\"guinea pig\\\"~2\", a, \"\\\"(guinea cavy) pig\\\"~2\");\n\n    assertQueryEquals(\"field:\\\"guinea pig\\\"\", a, \"\\\"(guinea cavy) pig\\\"\");\n\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testOperatorsAndMultiWordSynonymsSplitOnWhitespace().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testOperatorsAndMultiWordSynonymsSplitOnWhitespace().mjava","sourceNew":"  public void testOperatorsAndMultiWordSynonymsSplitOnWhitespace() throws Exception {\n    Analyzer a = new MockSynonymAnalyzer();\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = true;\n\n    assertQueryEquals(\"+guinea pig\", a, \"+guinea pig\");\n    assertQueryEquals(\"-guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"!guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea* pig\", a, \"guinea* pig\");\n    assertQueryEquals(\"guinea? pig\", a, \"guinea? pig\");\n    assertQueryEquals(\"guinea~2 pig\", a, \"guinea~2 pig\");\n    assertQueryEquals(\"guinea^2 pig\", a, \"(guinea)^2.0 pig\");\n\n    assertQueryEquals(\"guinea +pig\", a, \"guinea +pig\");\n    assertQueryEquals(\"guinea -pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea !pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea pig*\", a, \"guinea pig*\");\n    assertQueryEquals(\"guinea pig?\", a, \"guinea pig?\");\n    assertQueryEquals(\"guinea pig~2\", a, \"guinea pig~2\");\n    assertQueryEquals(\"guinea pig^2\", a, \"guinea (pig)^2.0\");\n\n    assertQueryEquals(\"field:guinea pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea field:pig\", a, \"guinea pig\");\n\n    assertQueryEquals(\"NOT guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea NOT pig\", a, \"guinea -pig\");\n\n    assertQueryEquals(\"guinea pig AND dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs AND guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n    assertQueryEquals(\"guinea pig && dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs && guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n\n    assertQueryEquals(\"guinea pig OR dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs OR guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n    assertQueryEquals(\"guinea pig || dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs || guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n\n    assertQueryEquals(\"\\\"guinea\\\" pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea \\\"pig\\\"\", a, \"guinea pig\");\n\n    assertQueryEquals(\"(guinea) pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea (pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"/guinea/ pig\", a, \"/guinea/ pig\");\n    assertQueryEquals(\"guinea /pig/\", a, \"guinea /pig/\");\n\n    assertQueryEquals(\"(guinea pig)\", a, \"guinea pig\");\n    assertQueryEquals(\"+(guinea pig)\", a, \"+(guinea pig)\");\n    assertQueryEquals(\"-(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"!(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"NOT (guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"(guinea pig)^2\", a, \"(guinea pig)^2.0\");\n\n    assertQueryEquals(\"field:(guinea pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"+small guinea pig\", a, \"+small guinea pig\");\n    assertQueryEquals(\"-small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"!small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"NOT small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"small* guinea pig\", a, \"small* guinea pig\");\n    assertQueryEquals(\"small? guinea pig\", a, \"small? guinea pig\");\n    assertQueryEquals(\"\\\"small\\\" guinea pig\", a, \"small guinea pig\");\n\n    assertQueryEquals(\"guinea pig +running\", a, \"guinea pig +running\");\n    assertQueryEquals(\"guinea pig -running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig !running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig NOT running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig running*\", a, \"guinea pig running*\");\n    assertQueryEquals(\"guinea pig running?\", a, \"guinea pig running?\");\n    assertQueryEquals(\"guinea pig \\\"running\\\"\", a, \"guinea pig running\");\n\n    assertQueryEquals(\"\\\"guinea pig\\\"~2\", a, \"Graph(field:\\\"guinea pig\\\"~2, field:cavy, hasBoolean=false, hasPhrase=true)\");\n\n    assertQueryEquals(\"field:\\\"guinea pig\\\"\", a, \"Graph(field:\\\"guinea pig\\\", field:cavy, hasBoolean=false, hasPhrase=true)\");\n\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","sourceOld":"  public void testOperatorsAndMultiWordSynonymsSplitOnWhitespace() throws Exception {\n    Analyzer a = new MockSynonymAnalyzer();\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = true;\n\n    assertQueryEquals(\"+guinea pig\", a, \"+guinea pig\");\n    assertQueryEquals(\"-guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"!guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea* pig\", a, \"guinea* pig\");\n    assertQueryEquals(\"guinea? pig\", a, \"guinea? pig\");\n    assertQueryEquals(\"guinea~2 pig\", a, \"guinea~2 pig\");\n    assertQueryEquals(\"guinea^2 pig\", a, \"(guinea)^2.0 pig\");\n\n    assertQueryEquals(\"guinea +pig\", a, \"guinea +pig\");\n    assertQueryEquals(\"guinea -pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea !pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea pig*\", a, \"guinea pig*\");\n    assertQueryEquals(\"guinea pig?\", a, \"guinea pig?\");\n    assertQueryEquals(\"guinea pig~2\", a, \"guinea pig~2\");\n    assertQueryEquals(\"guinea pig^2\", a, \"guinea (pig)^2.0\");\n\n    assertQueryEquals(\"field:guinea pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea field:pig\", a, \"guinea pig\");\n\n    assertQueryEquals(\"NOT guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea NOT pig\", a, \"guinea -pig\");\n\n    assertQueryEquals(\"guinea pig AND dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs AND guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n    assertQueryEquals(\"guinea pig && dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs && guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n\n    assertQueryEquals(\"guinea pig OR dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs OR guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n    assertQueryEquals(\"guinea pig || dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs || guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n\n    assertQueryEquals(\"\\\"guinea\\\" pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea \\\"pig\\\"\", a, \"guinea pig\");\n\n    assertQueryEquals(\"(guinea) pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea (pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"/guinea/ pig\", a, \"/guinea/ pig\");\n    assertQueryEquals(\"guinea /pig/\", a, \"guinea /pig/\");\n\n    assertQueryEquals(\"(guinea pig)\", a, \"guinea pig\");\n    assertQueryEquals(\"+(guinea pig)\", a, \"+(guinea pig)\");\n    assertQueryEquals(\"-(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"!(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"NOT (guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"(guinea pig)^2\", a, \"(guinea pig)^2.0\");\n\n    assertQueryEquals(\"field:(guinea pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"+small guinea pig\", a, \"+small guinea pig\");\n    assertQueryEquals(\"-small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"!small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"NOT small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"small* guinea pig\", a, \"small* guinea pig\");\n    assertQueryEquals(\"small? guinea pig\", a, \"small? guinea pig\");\n    assertQueryEquals(\"\\\"small\\\" guinea pig\", a, \"small guinea pig\");\n\n    assertQueryEquals(\"guinea pig +running\", a, \"guinea pig +running\");\n    assertQueryEquals(\"guinea pig -running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig !running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig NOT running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig running*\", a, \"guinea pig running*\");\n    assertQueryEquals(\"guinea pig running?\", a, \"guinea pig running?\");\n    assertQueryEquals(\"guinea pig \\\"running\\\"\", a, \"guinea pig running\");\n\n    assertQueryEquals(\"\\\"guinea pig\\\"~2\", a, \"\\\"(guinea cavy) pig\\\"~2\");\n\n    assertQueryEquals(\"field:\\\"guinea pig\\\"\", a, \"\\\"(guinea cavy) pig\\\"\");\n\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d79fd791e91f49ce8026885d7b8ac62bee4c8126","date":1487768721,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testOperatorsAndMultiWordSynonymsSplitOnWhitespace().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testOperatorsAndMultiWordSynonymsSplitOnWhitespace().mjava","sourceNew":"  public void testOperatorsAndMultiWordSynonymsSplitOnWhitespace() throws Exception {\n    Analyzer a = new MockSynonymAnalyzer();\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = true;\n\n    assertQueryEquals(\"+guinea pig\", a, \"+guinea pig\");\n    assertQueryEquals(\"-guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"!guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea* pig\", a, \"guinea* pig\");\n    assertQueryEquals(\"guinea? pig\", a, \"guinea? pig\");\n    assertQueryEquals(\"guinea~2 pig\", a, \"guinea~2 pig\");\n    assertQueryEquals(\"guinea^2 pig\", a, \"(guinea)^2.0 pig\");\n\n    assertQueryEquals(\"guinea +pig\", a, \"guinea +pig\");\n    assertQueryEquals(\"guinea -pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea !pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea pig*\", a, \"guinea pig*\");\n    assertQueryEquals(\"guinea pig?\", a, \"guinea pig?\");\n    assertQueryEquals(\"guinea pig~2\", a, \"guinea pig~2\");\n    assertQueryEquals(\"guinea pig^2\", a, \"guinea (pig)^2.0\");\n\n    assertQueryEquals(\"field:guinea pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea field:pig\", a, \"guinea pig\");\n\n    assertQueryEquals(\"NOT guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea NOT pig\", a, \"guinea -pig\");\n\n    assertQueryEquals(\"guinea pig AND dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs AND guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n    assertQueryEquals(\"guinea pig && dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs && guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n\n    assertQueryEquals(\"guinea pig OR dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs OR guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n    assertQueryEquals(\"guinea pig || dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs || guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n\n    assertQueryEquals(\"\\\"guinea\\\" pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea \\\"pig\\\"\", a, \"guinea pig\");\n\n    assertQueryEquals(\"(guinea) pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea (pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"/guinea/ pig\", a, \"/guinea/ pig\");\n    assertQueryEquals(\"guinea /pig/\", a, \"guinea /pig/\");\n\n    assertQueryEquals(\"(guinea pig)\", a, \"guinea pig\");\n    assertQueryEquals(\"+(guinea pig)\", a, \"+(guinea pig)\");\n    assertQueryEquals(\"-(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"!(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"NOT (guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"(guinea pig)^2\", a, \"(guinea pig)^2.0\");\n\n    assertQueryEquals(\"field:(guinea pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"+small guinea pig\", a, \"+small guinea pig\");\n    assertQueryEquals(\"-small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"!small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"NOT small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"small* guinea pig\", a, \"small* guinea pig\");\n    assertQueryEquals(\"small? guinea pig\", a, \"small? guinea pig\");\n    assertQueryEquals(\"\\\"small\\\" guinea pig\", a, \"small guinea pig\");\n\n    assertQueryEquals(\"guinea pig +running\", a, \"guinea pig +running\");\n    assertQueryEquals(\"guinea pig -running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig !running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig NOT running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig running*\", a, \"guinea pig running*\");\n    assertQueryEquals(\"guinea pig running?\", a, \"guinea pig running?\");\n    assertQueryEquals(\"guinea pig \\\"running\\\"\", a, \"guinea pig running\");\n\n    assertQueryEquals(\"\\\"guinea pig\\\"~2\", a, \"spanOr([spanNear([guinea, pig], 0, true), cavy])\");\n\n    assertQueryEquals(\"field:\\\"guinea pig\\\"\", a, \"spanOr([spanNear([guinea, pig], 0, true), cavy])\");\n\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","sourceOld":"  public void testOperatorsAndMultiWordSynonymsSplitOnWhitespace() throws Exception {\n    Analyzer a = new MockSynonymAnalyzer();\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = true;\n\n    assertQueryEquals(\"+guinea pig\", a, \"+guinea pig\");\n    assertQueryEquals(\"-guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"!guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea* pig\", a, \"guinea* pig\");\n    assertQueryEquals(\"guinea? pig\", a, \"guinea? pig\");\n    assertQueryEquals(\"guinea~2 pig\", a, \"guinea~2 pig\");\n    assertQueryEquals(\"guinea^2 pig\", a, \"(guinea)^2.0 pig\");\n\n    assertQueryEquals(\"guinea +pig\", a, \"guinea +pig\");\n    assertQueryEquals(\"guinea -pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea !pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea pig*\", a, \"guinea pig*\");\n    assertQueryEquals(\"guinea pig?\", a, \"guinea pig?\");\n    assertQueryEquals(\"guinea pig~2\", a, \"guinea pig~2\");\n    assertQueryEquals(\"guinea pig^2\", a, \"guinea (pig)^2.0\");\n\n    assertQueryEquals(\"field:guinea pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea field:pig\", a, \"guinea pig\");\n\n    assertQueryEquals(\"NOT guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea NOT pig\", a, \"guinea -pig\");\n\n    assertQueryEquals(\"guinea pig AND dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs AND guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n    assertQueryEquals(\"guinea pig && dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs && guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n\n    assertQueryEquals(\"guinea pig OR dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs OR guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n    assertQueryEquals(\"guinea pig || dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs || guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n\n    assertQueryEquals(\"\\\"guinea\\\" pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea \\\"pig\\\"\", a, \"guinea pig\");\n\n    assertQueryEquals(\"(guinea) pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea (pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"/guinea/ pig\", a, \"/guinea/ pig\");\n    assertQueryEquals(\"guinea /pig/\", a, \"guinea /pig/\");\n\n    assertQueryEquals(\"(guinea pig)\", a, \"guinea pig\");\n    assertQueryEquals(\"+(guinea pig)\", a, \"+(guinea pig)\");\n    assertQueryEquals(\"-(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"!(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"NOT (guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"(guinea pig)^2\", a, \"(guinea pig)^2.0\");\n\n    assertQueryEquals(\"field:(guinea pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"+small guinea pig\", a, \"+small guinea pig\");\n    assertQueryEquals(\"-small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"!small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"NOT small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"small* guinea pig\", a, \"small* guinea pig\");\n    assertQueryEquals(\"small? guinea pig\", a, \"small? guinea pig\");\n    assertQueryEquals(\"\\\"small\\\" guinea pig\", a, \"small guinea pig\");\n\n    assertQueryEquals(\"guinea pig +running\", a, \"guinea pig +running\");\n    assertQueryEquals(\"guinea pig -running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig !running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig NOT running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig running*\", a, \"guinea pig running*\");\n    assertQueryEquals(\"guinea pig running?\", a, \"guinea pig running?\");\n    assertQueryEquals(\"guinea pig \\\"running\\\"\", a, \"guinea pig running\");\n\n    assertQueryEquals(\"\\\"guinea pig\\\"~2\", a, \"Graph(field:\\\"guinea pig\\\"~2, field:cavy, hasBoolean=false, hasPhrase=true)\");\n\n    assertQueryEquals(\"field:\\\"guinea pig\\\"\", a, \"Graph(field:\\\"guinea pig\\\", field:cavy, hasBoolean=false, hasPhrase=true)\");\n\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02bf300ae49caa47cd23550d69d6683a61ad89cb","date":1582727554,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testOperatorsAndMultiWordSynonymsSplitOnWhitespace().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testOperatorsAndMultiWordSynonymsSplitOnWhitespace().mjava","sourceNew":"  public void testOperatorsAndMultiWordSynonymsSplitOnWhitespace() throws Exception {\n    Analyzer a = new MockSynonymAnalyzer();\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = true;\n\n    assertQueryEquals(\"+guinea pig\", a, \"+guinea pig\");\n    assertQueryEquals(\"-guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"!guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea* pig\", a, \"guinea* pig\");\n    assertQueryEquals(\"guinea? pig\", a, \"guinea? pig\");\n    assertQueryEquals(\"guinea~2 pig\", a, \"guinea~2 pig\");\n    assertQueryEquals(\"guinea^2 pig\", a, \"(guinea)^2.0 pig\");\n\n    assertQueryEquals(\"guinea +pig\", a, \"guinea +pig\");\n    assertQueryEquals(\"guinea -pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea !pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea pig*\", a, \"guinea pig*\");\n    assertQueryEquals(\"guinea pig?\", a, \"guinea pig?\");\n    assertQueryEquals(\"guinea pig~2\", a, \"guinea pig~2\");\n    assertQueryEquals(\"guinea pig^2\", a, \"guinea (pig)^2.0\");\n\n    assertQueryEquals(\"field:guinea pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea field:pig\", a, \"guinea pig\");\n\n    assertQueryEquals(\"NOT guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea NOT pig\", a, \"guinea -pig\");\n\n    assertQueryEquals(\"guinea pig AND dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs AND guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n    assertQueryEquals(\"guinea pig && dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs && guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n\n    assertQueryEquals(\"guinea pig OR dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs OR guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n    assertQueryEquals(\"guinea pig || dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs || guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n\n    assertQueryEquals(\"\\\"guinea\\\" pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea \\\"pig\\\"\", a, \"guinea pig\");\n\n    assertQueryEquals(\"(guinea) pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea (pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"/guinea/ pig\", a, \"/guinea/ pig\");\n    assertQueryEquals(\"guinea /pig/\", a, \"guinea /pig/\");\n\n    assertQueryEquals(\"(guinea pig)\", a, \"guinea pig\");\n    assertQueryEquals(\"+(guinea pig)\", a, \"+(guinea pig)\");\n    assertQueryEquals(\"-(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"!(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"NOT (guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"(guinea pig)^2\", a, \"(guinea pig)^2.0\");\n\n    assertQueryEquals(\"field:(guinea pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"+small guinea pig\", a, \"+small guinea pig\");\n    assertQueryEquals(\"-small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"!small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"NOT small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"small* guinea pig\", a, \"small* guinea pig\");\n    assertQueryEquals(\"small? guinea pig\", a, \"small? guinea pig\");\n    assertQueryEquals(\"\\\"small\\\" guinea pig\", a, \"small guinea pig\");\n\n    assertQueryEquals(\"guinea pig +running\", a, \"guinea pig +running\");\n    assertQueryEquals(\"guinea pig -running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig !running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig NOT running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig running*\", a, \"guinea pig running*\");\n    assertQueryEquals(\"guinea pig running?\", a, \"guinea pig running?\");\n    assertQueryEquals(\"guinea pig \\\"running\\\"\", a, \"guinea pig running\");\n\n    assertQueryEquals(\"\\\"guinea pig\\\"~2\", a, \"\\\"guinea pig\\\" cavy\");\n\n    assertQueryEquals(\"field:\\\"guinea pig\\\"\", a, \"\\\"guinea pig\\\" cavy\");\n\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","sourceOld":"  public void testOperatorsAndMultiWordSynonymsSplitOnWhitespace() throws Exception {\n    Analyzer a = new MockSynonymAnalyzer();\n\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = true;\n\n    assertQueryEquals(\"+guinea pig\", a, \"+guinea pig\");\n    assertQueryEquals(\"-guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"!guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea* pig\", a, \"guinea* pig\");\n    assertQueryEquals(\"guinea? pig\", a, \"guinea? pig\");\n    assertQueryEquals(\"guinea~2 pig\", a, \"guinea~2 pig\");\n    assertQueryEquals(\"guinea^2 pig\", a, \"(guinea)^2.0 pig\");\n\n    assertQueryEquals(\"guinea +pig\", a, \"guinea +pig\");\n    assertQueryEquals(\"guinea -pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea !pig\", a, \"guinea -pig\");\n    assertQueryEquals(\"guinea pig*\", a, \"guinea pig*\");\n    assertQueryEquals(\"guinea pig?\", a, \"guinea pig?\");\n    assertQueryEquals(\"guinea pig~2\", a, \"guinea pig~2\");\n    assertQueryEquals(\"guinea pig^2\", a, \"guinea (pig)^2.0\");\n\n    assertQueryEquals(\"field:guinea pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea field:pig\", a, \"guinea pig\");\n\n    assertQueryEquals(\"NOT guinea pig\", a, \"-guinea pig\");\n    assertQueryEquals(\"guinea NOT pig\", a, \"guinea -pig\");\n\n    assertQueryEquals(\"guinea pig AND dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs AND guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n    assertQueryEquals(\"guinea pig && dogs\", a, \"guinea +pig +Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs && guinea pig\", a, \"+Synonym(dog dogs) +guinea pig\");\n\n    assertQueryEquals(\"guinea pig OR dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs OR guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n    assertQueryEquals(\"guinea pig || dogs\", a, \"guinea pig Synonym(dog dogs)\");\n    assertQueryEquals(\"dogs || guinea pig\", a, \"Synonym(dog dogs) guinea pig\");\n\n    assertQueryEquals(\"\\\"guinea\\\" pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea \\\"pig\\\"\", a, \"guinea pig\");\n\n    assertQueryEquals(\"(guinea) pig\", a, \"guinea pig\");\n    assertQueryEquals(\"guinea (pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"/guinea/ pig\", a, \"/guinea/ pig\");\n    assertQueryEquals(\"guinea /pig/\", a, \"guinea /pig/\");\n\n    assertQueryEquals(\"(guinea pig)\", a, \"guinea pig\");\n    assertQueryEquals(\"+(guinea pig)\", a, \"+(guinea pig)\");\n    assertQueryEquals(\"-(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"!(guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"NOT (guinea pig)\", a, \"-(guinea pig)\");\n    assertQueryEquals(\"(guinea pig)^2\", a, \"(guinea pig)^2.0\");\n\n    assertQueryEquals(\"field:(guinea pig)\", a, \"guinea pig\");\n\n    assertQueryEquals(\"+small guinea pig\", a, \"+small guinea pig\");\n    assertQueryEquals(\"-small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"!small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"NOT small guinea pig\", a, \"-small guinea pig\");\n    assertQueryEquals(\"small* guinea pig\", a, \"small* guinea pig\");\n    assertQueryEquals(\"small? guinea pig\", a, \"small? guinea pig\");\n    assertQueryEquals(\"\\\"small\\\" guinea pig\", a, \"small guinea pig\");\n\n    assertQueryEquals(\"guinea pig +running\", a, \"guinea pig +running\");\n    assertQueryEquals(\"guinea pig -running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig !running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig NOT running\", a, \"guinea pig -running\");\n    assertQueryEquals(\"guinea pig running*\", a, \"guinea pig running*\");\n    assertQueryEquals(\"guinea pig running?\", a, \"guinea pig running?\");\n    assertQueryEquals(\"guinea pig \\\"running\\\"\", a, \"guinea pig running\");\n\n    assertQueryEquals(\"\\\"guinea pig\\\"~2\", a, \"spanOr([spanNear([guinea, pig], 0, true), cavy])\");\n\n    assertQueryEquals(\"field:\\\"guinea pig\\\"\", a, \"spanOr([spanNear([guinea, pig], 0, true), cavy])\");\n\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"02bf300ae49caa47cd23550d69d6683a61ad89cb":["d79fd791e91f49ce8026885d7b8ac62bee4c8126"],"e52c30617998e1bc2a946cc226f52e9b35162b1e":["138a352a6d4e54824d0275bc7aa1b784e78c81fe"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d79fd791e91f49ce8026885d7b8ac62bee4c8126":["e52c30617998e1bc2a946cc226f52e9b35162b1e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","138a352a6d4e54824d0275bc7aa1b784e78c81fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02bf300ae49caa47cd23550d69d6683a61ad89cb"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e52c30617998e1bc2a946cc226f52e9b35162b1e"]},"commit2Childs":{"02bf300ae49caa47cd23550d69d6683a61ad89cb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e52c30617998e1bc2a946cc226f52e9b35162b1e":["d79fd791e91f49ce8026885d7b8ac62bee4c8126","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["e52c30617998e1bc2a946cc226f52e9b35162b1e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["138a352a6d4e54824d0275bc7aa1b784e78c81fe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d79fd791e91f49ce8026885d7b8ac62bee4c8126":["02bf300ae49caa47cd23550d69d6683a61ad89cb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}