{"path":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#assertAllIn(Set[String],BytesRefHash).mjava","commits":[{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#assertAllIn(Set[String],BytesRefHash).mjava","pathOld":"/dev/null","sourceNew":"  private void assertAllIn(Set<String> strings, BytesRefHash hash) {\n    BytesRef ref = new BytesRef();\n    int count = hash.size();\n    for (String string : strings) {\n      ref.copy(string);\n      int key  =  hash.add(ref); // add again to check duplicates\n      assertEquals(string, hash.get((-key)-1).utf8ToString());\n      assertEquals(count, hash.size());\n      assertTrue(\"key: \" + key + \" count: \" + count + \" string: \" + string,\n          key < count);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb189bc11e1880ca8686216e1af74536edab3b1c","date":1287051106,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#assertAllIn(Set[String],BytesRefHash).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#assertAllIn(Set[String],BytesRefHash).mjava","sourceNew":"  private void assertAllIn(Set<String> strings, BytesRefHash hash) {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int count = hash.size();\n    for (String string : strings) {\n      ref.copy(string);\n      int key  =  hash.add(ref); // add again to check duplicates\n      assertEquals(string, hash.get((-key)-1, scratch).utf8ToString());\n      assertEquals(count, hash.size());\n      assertTrue(\"key: \" + key + \" count: \" + count + \" string: \" + string,\n          key < count);\n    }\n  }\n\n","sourceOld":"  private void assertAllIn(Set<String> strings, BytesRefHash hash) {\n    BytesRef ref = new BytesRef();\n    int count = hash.size();\n    for (String string : strings) {\n      ref.copy(string);\n      int key  =  hash.add(ref); // add again to check duplicates\n      assertEquals(string, hash.get((-key)-1).utf8ToString());\n      assertEquals(count, hash.size());\n      assertTrue(\"key: \" + key + \" count: \" + count + \" string: \" + string,\n          key < count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#assertAllIn(Set[String],BytesRefHash).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#assertAllIn(Set[String],BytesRefHash).mjava","sourceNew":"  private void assertAllIn(Set<String> strings, BytesRefHash hash) {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int count = hash.size();\n    for (String string : strings) {\n      ref.copy(string);\n      int key  =  hash.add(ref); // add again to check duplicates\n      assertEquals(string, hash.get((-key)-1, scratch).utf8ToString());\n      assertEquals(count, hash.size());\n      assertTrue(\"key: \" + key + \" count: \" + count + \" string: \" + string,\n          key < count);\n    }\n  }\n\n","sourceOld":"  private void assertAllIn(Set<String> strings, BytesRefHash hash) {\n    BytesRef ref = new BytesRef();\n    int count = hash.size();\n    for (String string : strings) {\n      ref.copy(string);\n      int key  =  hash.add(ref); // add again to check duplicates\n      assertEquals(string, hash.get((-key)-1).utf8ToString());\n      assertEquals(count, hash.size());\n      assertTrue(\"key: \" + key + \" count: \" + count + \" string: \" + string,\n          key < count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#assertAllIn(Set[String],BytesRefHash).mjava","pathOld":"/dev/null","sourceNew":"  private void assertAllIn(Set<String> strings, BytesRefHash hash) {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int count = hash.size();\n    for (String string : strings) {\n      ref.copy(string);\n      int key  =  hash.add(ref); // add again to check duplicates\n      assertEquals(string, hash.get((-key)-1, scratch).utf8ToString());\n      assertEquals(count, hash.size());\n      assertTrue(\"key: \" + key + \" count: \" + count + \" string: \" + string,\n          key < count);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#assertAllIn(Set[String],BytesRefHash).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#assertAllIn(Set[String],BytesRefHash).mjava","sourceNew":"  private void assertAllIn(Set<String> strings, BytesRefHash hash) {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int count = hash.size();\n    for (String string : strings) {\n      ref.copyChars(string);\n      int key  =  hash.add(ref); // add again to check duplicates\n      assertEquals(string, hash.get((-key)-1, scratch).utf8ToString());\n      assertEquals(count, hash.size());\n      assertTrue(\"key: \" + key + \" count: \" + count + \" string: \" + string,\n          key < count);\n    }\n  }\n\n","sourceOld":"  private void assertAllIn(Set<String> strings, BytesRefHash hash) {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int count = hash.size();\n    for (String string : strings) {\n      ref.copy(string);\n      int key  =  hash.add(ref); // add again to check duplicates\n      assertEquals(string, hash.get((-key)-1, scratch).utf8ToString());\n      assertEquals(count, hash.size());\n      assertTrue(\"key: \" + key + \" count: \" + count + \" string: \" + string,\n          key < count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#assertAllIn(Set[String],BytesRefHash).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#assertAllIn(Set[String],BytesRefHash).mjava","sourceNew":"  private void assertAllIn(Set<String> strings, BytesRefHash hash) {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int count = hash.size();\n    for (String string : strings) {\n      ref.copyChars(string);\n      int key  =  hash.add(ref); // add again to check duplicates\n      assertEquals(string, hash.get((-key)-1, scratch).utf8ToString());\n      assertEquals(count, hash.size());\n      assertTrue(\"key: \" + key + \" count: \" + count + \" string: \" + string,\n          key < count);\n    }\n  }\n\n","sourceOld":"  private void assertAllIn(Set<String> strings, BytesRefHash hash) {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int count = hash.size();\n    for (String string : strings) {\n      ref.copyChars(string);\n      int key  =  hash.add(ref); // add again to check duplicates\n      assertEquals(string, hash.get((-key)-1, scratch).utf8ToString());\n      assertEquals(count, hash.size());\n      assertTrue(\"key: \" + key + \" count: \" + count + \" string: \" + string,\n          key < count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb189bc11e1880ca8686216e1af74536edab3b1c"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","fb189bc11e1880ca8686216e1af74536edab3b1c"],"e6e919043fa85ee891123768dd655a98edbbf63c":["fb189bc11e1880ca8686216e1af74536edab3b1c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fb189bc11e1880ca8686216e1af74536edab3b1c":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","fb189bc11e1880ca8686216e1af74536edab3b1c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"e6e919043fa85ee891123768dd655a98edbbf63c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fb189bc11e1880ca8686216e1af74536edab3b1c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","e6e919043fa85ee891123768dd655a98edbbf63c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}