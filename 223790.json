{"path":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","sourceNew":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery q = new BooleanQuery(false);\n   q.setBoost(0);\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     q.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(new BytesRef(vals[i + 1]), Integer.valueOf(max--));\n     // System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   return q;\n }\n\n","sourceOld":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery q = new BooleanQuery(false);\n   q.setBoost(0);\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     q.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(new BytesRef(vals[i + 1]), Integer.valueOf(max--));\n     // System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   return q;\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","sourceNew":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery.Builder b = new BooleanQuery.Builder();\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     b.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(new BytesRef(vals[i + 1]), Integer.valueOf(max--));\n     // System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   BooleanQuery q = b.build();\n   q.setBoost(0);\n   return q;\n }\n\n","sourceOld":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery q = new BooleanQuery(false);\n   q.setBoost(0);\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     q.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(new BytesRef(vals[i + 1]), Integer.valueOf(max--));\n     // System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   return q;\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","sourceNew":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery.Builder b = new BooleanQuery.Builder();\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     b.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(new BytesRef(vals[i + 1]), Integer.valueOf(max--));\n     // System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   BooleanQuery q = b.build();\n   return new BoostQuery(q, 0f);\n }\n\n","sourceOld":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery.Builder b = new BooleanQuery.Builder();\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     b.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(new BytesRef(vals[i + 1]), Integer.valueOf(max--));\n     // System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   BooleanQuery q = b.build();\n   q.setBoost(0);\n   return q;\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}