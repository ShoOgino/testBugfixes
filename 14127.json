{"path":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentInfo],boolean,long).mjava","commits":[{"id":"5270fb4f55a1b77663dda53cb8090c083f0a23b3","date":1305050821,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentInfo],boolean,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#score(SegmentInfos,boolean,long).mjava","sourceNew":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(List<SegmentInfo> candidate, boolean hitTooLarge, long mergingBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentInfo info : candidate) {\n      final long segBytes = size(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes(true);\n    }\n\n    // Measure \"skew\" of the merge, which can range\n    // from 1.0/numSegsBeingMerged (good) to 1.0\n    // (poor):\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(size(candidate.get(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= nonDelRatio;\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(\"%.3f\", skew) + \" nonDelRatio=\" + String.format(\"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","sourceOld":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(SegmentInfos candidate, boolean hitTooLarge, long mergingBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentInfo info : candidate) {\n      final long segBytes = size(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes(true);\n    }\n\n    // Measure \"skew\" of the merge, which can range\n    // from 1.0/numSegsBeingMerged (good) to 1.0\n    // (poor):\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(size(candidate.info(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= nonDelRatio;\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(\"%.3f\", skew) + \" nonDelRatio=\" + String.format(\"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentInfo],boolean,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#score(SegmentInfos,boolean,long).mjava","sourceNew":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(List<SegmentInfo> candidate, boolean hitTooLarge, long mergingBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentInfo info : candidate) {\n      final long segBytes = size(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes(true);\n    }\n\n    // Measure \"skew\" of the merge, which can range\n    // from 1.0/numSegsBeingMerged (good) to 1.0\n    // (poor):\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(size(candidate.get(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= nonDelRatio;\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(\"%.3f\", skew) + \" nonDelRatio=\" + String.format(\"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","sourceOld":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(SegmentInfos candidate, boolean hitTooLarge, long mergingBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentInfo info : candidate) {\n      final long segBytes = size(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes(true);\n    }\n\n    // Measure \"skew\" of the merge, which can range\n    // from 1.0/numSegsBeingMerged (good) to 1.0\n    // (poor):\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(size(candidate.info(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= nonDelRatio;\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(\"%.3f\", skew) + \" nonDelRatio=\" + String.format(\"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentInfo],boolean,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(List<SegmentInfo> candidate, boolean hitTooLarge, long mergingBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentInfo info : candidate) {\n      final long segBytes = size(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes(true);\n    }\n\n    // Measure \"skew\" of the merge, which can range\n    // from 1.0/numSegsBeingMerged (good) to 1.0\n    // (poor):\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(size(candidate.get(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= nonDelRatio;\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(\"%.3f\", skew) + \" nonDelRatio=\" + String.format(\"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd689cfe55be97a2d23e2de363cae2d618d73ab7","date":1308350378,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentInfo],boolean,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentInfo],boolean,long).mjava","sourceNew":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(List<SegmentInfo> candidate, boolean hitTooLarge, long mergingBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentInfo info : candidate) {\n      final long segBytes = size(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes(true);\n    }\n\n    // Measure \"skew\" of the merge, which can range\n    // from 1.0/numSegsBeingMerged (good) to 1.0\n    // (poor):\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(size(candidate.get(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= Math.pow(nonDelRatio, reclaimDeletesWeight);\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(\"%.3f\", skew) + \" nonDelRatio=\" + String.format(\"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","sourceOld":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(List<SegmentInfo> candidate, boolean hitTooLarge, long mergingBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentInfo info : candidate) {\n      final long segBytes = size(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes(true);\n    }\n\n    // Measure \"skew\" of the merge, which can range\n    // from 1.0/numSegsBeingMerged (good) to 1.0\n    // (poor):\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(size(candidate.get(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= nonDelRatio;\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(\"%.3f\", skew) + \" nonDelRatio=\" + String.format(\"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7edfc3f7caa7b49a18fe367692768b33b018e9db","date":1308374217,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentInfo],boolean,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentInfo],boolean,long).mjava","sourceNew":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(List<SegmentInfo> candidate, boolean hitTooLarge, long mergingBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentInfo info : candidate) {\n      final long segBytes = size(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes(true);\n    }\n\n    // Measure \"skew\" of the merge, which can range\n    // from 1.0/numSegsBeingMerged (good) to 1.0\n    // (poor):\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(size(candidate.get(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= Math.pow(nonDelRatio, reclaimDeletesWeight);\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(\"%.3f\", skew) + \" nonDelRatio=\" + String.format(\"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","sourceOld":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(List<SegmentInfo> candidate, boolean hitTooLarge, long mergingBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentInfo info : candidate) {\n      final long segBytes = size(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes(true);\n    }\n\n    // Measure \"skew\" of the merge, which can range\n    // from 1.0/numSegsBeingMerged (good) to 1.0\n    // (poor):\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(size(candidate.get(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= nonDelRatio;\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(\"%.3f\", skew) + \" nonDelRatio=\" + String.format(\"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentInfo],boolean,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentInfo],boolean,long).mjava","sourceNew":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(List<SegmentInfo> candidate, boolean hitTooLarge, long mergingBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentInfo info : candidate) {\n      final long segBytes = size(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes();\n    }\n\n    // Measure \"skew\" of the merge, which can range\n    // from 1.0/numSegsBeingMerged (good) to 1.0\n    // (poor):\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(size(candidate.get(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= Math.pow(nonDelRatio, reclaimDeletesWeight);\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(\"%.3f\", skew) + \" nonDelRatio=\" + String.format(\"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","sourceOld":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(List<SegmentInfo> candidate, boolean hitTooLarge, long mergingBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentInfo info : candidate) {\n      final long segBytes = size(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes(true);\n    }\n\n    // Measure \"skew\" of the merge, which can range\n    // from 1.0/numSegsBeingMerged (good) to 1.0\n    // (poor):\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(size(candidate.get(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= Math.pow(nonDelRatio, reclaimDeletesWeight);\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(\"%.3f\", skew) + \" nonDelRatio=\" + String.format(\"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentInfo],boolean,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentInfo],boolean,long).mjava","sourceNew":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(List<SegmentInfo> candidate, boolean hitTooLarge, long mergingBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentInfo info : candidate) {\n      final long segBytes = size(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes();\n    }\n\n    // Measure \"skew\" of the merge, which can range\n    // from 1.0/numSegsBeingMerged (good) to 1.0\n    // (poor):\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(size(candidate.get(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= Math.pow(nonDelRatio, reclaimDeletesWeight);\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(\"%.3f\", skew) + \" nonDelRatio=\" + String.format(\"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","sourceOld":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(List<SegmentInfo> candidate, boolean hitTooLarge, long mergingBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentInfo info : candidate) {\n      final long segBytes = size(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes();\n    }\n\n    // Measure \"skew\" of the merge, which can range\n    // from 1.0/numSegsBeingMerged (good) to 1.0\n    // (poor):\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(size(candidate.get(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= Math.pow(nonDelRatio, reclaimDeletesWeight);\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(\"%.3f\", skew) + \" nonDelRatio=\" + String.format(\"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd689cfe55be97a2d23e2de363cae2d618d73ab7":["5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":["a3776dccca01c11e7046323cfad46a3b4a471233","dd689cfe55be97a2d23e2de363cae2d618d73ab7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["dd689cfe55be97a2d23e2de363cae2d618d73ab7"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"dd689cfe55be97a2d23e2de363cae2d618d73ab7":["7edfc3f7caa7b49a18fe367692768b33b018e9db","3cc749c053615f5871f3b95715fe292f34e70a53"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["7edfc3f7caa7b49a18fe367692768b33b018e9db"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["dd689cfe55be97a2d23e2de363cae2d618d73ab7","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7edfc3f7caa7b49a18fe367692768b33b018e9db","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}