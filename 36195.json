{"path":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(3));\n      ((LogMergePolicy) writer1.getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n      ((LogMergePolicy) writer2.getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(3));\n      ((LogMergePolicy) writer1.getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n      ((LogMergePolicy) writer2.getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(3));\n      ((LogMergePolicy) writer1.getConfig().getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n      ((LogMergePolicy) writer2.getConfig().getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(3));\n      ((LogMergePolicy) writer1.getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n      ((LogMergePolicy) writer2.getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(3));\n      ((LogMergePolicy) writer1.getConfig().getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n      ((LogMergePolicy) writer2.getConfig().getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(3));\n      ((LogMergePolicy) writer1.getConfig().getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n      ((LogMergePolicy) writer2.getConfig().getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, newIndexWriterConfig(RANDOM, TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(3).setMergeScheduler(new ConcurrentMergeScheduler()));\n      ((LogMergePolicy) writer1.getConfig().getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig(RANDOM, TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n      ((LogMergePolicy) writer2.getConfig().getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(3));\n      ((LogMergePolicy) writer1.getConfig().getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n      ((LogMergePolicy) writer2.getConfig().getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(3).setMergeScheduler(new ConcurrentMergeScheduler()));\n      ((LogMergePolicy) writer1.getConfig().getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n      ((LogMergePolicy) writer2.getConfig().getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, newIndexWriterConfig(RANDOM, TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(3).setMergeScheduler(new ConcurrentMergeScheduler()));\n      ((LogMergePolicy) writer1.getConfig().getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig(RANDOM, TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n      ((LogMergePolicy) writer2.getConfig().getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(3).setMergeScheduler(new ConcurrentMergeScheduler()));\n      ((LogMergePolicy) writer1.getConfig().getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n      ((LogMergePolicy) writer2.getConfig().getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(3).setMergeScheduler(new ConcurrentMergeScheduler()));\n      ((LogMergePolicy) writer1.getConfig().getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n      ((LogMergePolicy) writer2.getConfig().getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(3));\n      ((LogMergePolicy) writer1.getConfig().getMergePolicy()).setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n      ((LogMergePolicy) writer2.getConfig().getMergePolicy()).setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(\n          dir1,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(3).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(2))\n      );\n      ((ConcurrentMergeScheduler) writer1.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      IndexWriter writer2 = new IndexWriter(\n          dir2,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(3))\n      );\n      ((ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}