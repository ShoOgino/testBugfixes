{"path":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","sourceNew":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermEnum aprioriTermEnum = aprioriReader.terms(t);\n    TermEnum testTermEnum = testReader.terms(t);\n\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    t = aprioriTermEnum.term();\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    TermDocs aprioriTermDocs = aprioriReader.termDocs(t);\n    TermDocs testTermDocs = testReader.termDocs(t);\n\n    assertEquals(aprioriTermDocs.next(), testTermDocs.next());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n    assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n\n    if (aprioriTermDocs.skipTo(4)) {\n      assertTrue(testTermDocs.skipTo(4));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(4));\n    }\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.skipTo(100)) {\n      assertTrue(testTermDocs.skipTo(100));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(100));\n    }\n\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n    if (aprioriTermDocs.skipTo(110)) {\n      assertTrue(testTermDocs.skipTo(110));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(110));\n    }\n\n    if (aprioriTermDocs.skipTo(10)) {\n      assertTrue(testTermDocs.skipTo(10));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(10));\n    }\n\n\n    if (aprioriTermDocs.skipTo(210)) {\n      assertTrue(testTermDocs.skipTo(210));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(210));\n    }\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n\n    // test seek null (AllTermDocs)\n    aprioriTermDocs = aprioriReader.termDocs(null);\n    testTermDocs = testReader.termDocs(null);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // test seek default\n    aprioriTermDocs = aprioriReader.termDocs();\n    testTermDocs = testReader.termDocs();\n\n    // this is invalid use of the API,\n    // but if the response differs then it's an indication that something might have changed.\n    // in 2.9 and 3.0 the two TermDocs-implementations returned different values at this point.\n//    assertEquals(\"Descripency during invalid use of the TermDocs API, see comments in test code for details.\",\n//        aprioriTermDocs.next(), testTermDocs.next());\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    aprioriTermDocs.seek(t);\n    testTermDocs.seek(t);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","sourceOld":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermEnum aprioriTermEnum = aprioriReader.terms(t);\n    TermEnum testTermEnum = testReader.terms(t);\n\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    t = aprioriTermEnum.term();\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    TermDocs aprioriTermDocs = aprioriReader.termDocs(t);\n    TermDocs testTermDocs = testReader.termDocs(t);\n\n    assertEquals(aprioriTermDocs.next(), testTermDocs.next());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n    assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n\n    if (aprioriTermDocs.skipTo(4)) {\n      assertTrue(testTermDocs.skipTo(4));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(4));\n    }\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.skipTo(100)) {\n      assertTrue(testTermDocs.skipTo(100));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(100));\n    }\n\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n    if (aprioriTermDocs.skipTo(110)) {\n      assertTrue(testTermDocs.skipTo(110));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(110));\n    }\n\n    if (aprioriTermDocs.skipTo(10)) {\n      assertTrue(testTermDocs.skipTo(10));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(10));\n    }\n\n\n    if (aprioriTermDocs.skipTo(210)) {\n      assertTrue(testTermDocs.skipTo(210));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(210));\n    }\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n\n    // test seek null (AllTermDocs)\n    aprioriTermDocs = aprioriReader.termDocs(null);\n    testTermDocs = testReader.termDocs(null);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // test seek default\n    aprioriTermDocs = aprioriReader.termDocs();\n    testTermDocs = testReader.termDocs();\n\n    // this is invalid use of the API,\n    // but if the response differs then it's an indication that something might have changed.\n    // in 2.9 and 3.0 the two TermDocs-implementations returned different values at this point.\n//    assertEquals(\"Descripency during invalid use of the TermDocs API, see comments in test code for details.\",\n//        aprioriTermDocs.next(), testTermDocs.next());\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    aprioriTermDocs.seek(t);\n    testTermDocs.seek(t);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","sourceNew":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermsEnum aprioriTermEnum = MultiFields.getTerms(aprioriReader, t.field()).iterator();\n    aprioriTermEnum.seek(new BytesRef(t.text()));\n    TermsEnum testTermEnum = MultiFields.getTerms(testReader, t.field()).iterator();\n    testTermEnum.seek(new BytesRef(t.text()));\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n    DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n\n    assertEquals(aprioriTermDocs.nextDoc(), testTermDocs.nextDoc());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n\n    if (aprioriTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(4));\n    }\n\n    if (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(100));\n    }\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    FieldsEnum apFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    String apFirstField = apFieldsEnum.next();\n\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n    String testFirstField = testFieldsEnum.next();\n    assertEquals(apFirstField, testFirstField);\n\n    aprioriTermEnum = apFieldsEnum.terms();\n    testTermEnum = testFieldsEnum.terms();\n    \n    assertEquals(aprioriTermEnum.next(), testTermEnum.next());\n    \n    aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n    testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n    while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    }\n    assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","sourceOld":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermEnum aprioriTermEnum = aprioriReader.terms(t);\n    TermEnum testTermEnum = testReader.terms(t);\n\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    t = aprioriTermEnum.term();\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    TermDocs aprioriTermDocs = aprioriReader.termDocs(t);\n    TermDocs testTermDocs = testReader.termDocs(t);\n\n    assertEquals(aprioriTermDocs.next(), testTermDocs.next());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n    assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n\n    if (aprioriTermDocs.skipTo(4)) {\n      assertTrue(testTermDocs.skipTo(4));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(4));\n    }\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.skipTo(100)) {\n      assertTrue(testTermDocs.skipTo(100));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(100));\n    }\n\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n    if (aprioriTermDocs.skipTo(110)) {\n      assertTrue(testTermDocs.skipTo(110));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(110));\n    }\n\n    if (aprioriTermDocs.skipTo(10)) {\n      assertTrue(testTermDocs.skipTo(10));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(10));\n    }\n\n\n    if (aprioriTermDocs.skipTo(210)) {\n      assertTrue(testTermDocs.skipTo(210));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(210));\n    }\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n\n    // test seek null (AllTermDocs)\n    aprioriTermDocs = aprioriReader.termDocs(null);\n    testTermDocs = testReader.termDocs(null);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // test seek default\n    aprioriTermDocs = aprioriReader.termDocs();\n    testTermDocs = testReader.termDocs();\n\n    // this is invalid use of the API,\n    // but if the response differs then it's an indication that something might have changed.\n    // in 2.9 and 3.0 the two TermDocs-implementations returned different values at this point.\n//    assertEquals(\"Descripency during invalid use of the TermDocs API, see comments in test code for details.\",\n//        aprioriTermDocs.next(), testTermDocs.next());\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    aprioriTermDocs.seek(t);\n    testTermDocs.seek(t);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","sourceNew":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermsEnum aprioriTermEnum = MultiFields.getTerms(aprioriReader, t.field()).iterator();\n    aprioriTermEnum.seek(new BytesRef(t.text()));\n    TermsEnum testTermEnum = MultiFields.getTerms(testReader, t.field()).iterator();\n    testTermEnum.seek(new BytesRef(t.text()));\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n    DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n\n    assertEquals(aprioriTermDocs.nextDoc(), testTermDocs.nextDoc());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n\n    if (aprioriTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(4));\n    }\n\n    if (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(100));\n    }\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    FieldsEnum apFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    String apFirstField = apFieldsEnum.next();\n\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n    String testFirstField = testFieldsEnum.next();\n    assertEquals(apFirstField, testFirstField);\n\n    aprioriTermEnum = apFieldsEnum.terms();\n    testTermEnum = testFieldsEnum.terms();\n    \n    assertEquals(aprioriTermEnum.next(), testTermEnum.next());\n    \n    aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n    testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n    while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    }\n    assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","sourceOld":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermEnum aprioriTermEnum = aprioriReader.terms(t);\n    TermEnum testTermEnum = testReader.terms(t);\n\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    t = aprioriTermEnum.term();\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    TermDocs aprioriTermDocs = aprioriReader.termDocs(t);\n    TermDocs testTermDocs = testReader.termDocs(t);\n\n    assertEquals(aprioriTermDocs.next(), testTermDocs.next());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n    assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n\n    if (aprioriTermDocs.skipTo(4)) {\n      assertTrue(testTermDocs.skipTo(4));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(4));\n    }\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.skipTo(100)) {\n      assertTrue(testTermDocs.skipTo(100));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(100));\n    }\n\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n    if (aprioriTermDocs.skipTo(110)) {\n      assertTrue(testTermDocs.skipTo(110));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(110));\n    }\n\n    if (aprioriTermDocs.skipTo(10)) {\n      assertTrue(testTermDocs.skipTo(10));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(10));\n    }\n\n\n    if (aprioriTermDocs.skipTo(210)) {\n      assertTrue(testTermDocs.skipTo(210));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(210));\n    }\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n\n    // test seek null (AllTermDocs)\n    aprioriTermDocs = aprioriReader.termDocs(null);\n    testTermDocs = testReader.termDocs(null);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // test seek default\n    aprioriTermDocs = aprioriReader.termDocs();\n    testTermDocs = testReader.termDocs();\n\n    // this is invalid use of the API,\n    // but if the response differs then it's an indication that something might have changed.\n    // in 2.9 and 3.0 the two TermDocs-implementations returned different values at this point.\n//    assertEquals(\"Descripency during invalid use of the TermDocs API, see comments in test code for details.\",\n//        aprioriTermDocs.next(), testTermDocs.next());\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    aprioriTermDocs.seek(t);\n    testTermDocs.seek(t);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","sourceNew":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermsEnum aprioriTermEnum = MultiFields.getTerms(aprioriReader, t.field()).iterator();\n    aprioriTermEnum.seekCeil(new BytesRef(t.text()));\n    TermsEnum testTermEnum = MultiFields.getTerms(testReader, t.field()).iterator();\n    testTermEnum.seekCeil(new BytesRef(t.text()));\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n    DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n\n    assertEquals(aprioriTermDocs.nextDoc(), testTermDocs.nextDoc());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n\n    if (aprioriTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(4));\n    }\n\n    if (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(100));\n    }\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    FieldsEnum apFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    String apFirstField = apFieldsEnum.next();\n\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n    String testFirstField = testFieldsEnum.next();\n    assertEquals(apFirstField, testFirstField);\n\n    aprioriTermEnum = apFieldsEnum.terms();\n    testTermEnum = testFieldsEnum.terms();\n    \n    assertEquals(aprioriTermEnum.next(), testTermEnum.next());\n    \n    aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n    testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n    while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    }\n    assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","sourceOld":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermsEnum aprioriTermEnum = MultiFields.getTerms(aprioriReader, t.field()).iterator();\n    aprioriTermEnum.seek(new BytesRef(t.text()));\n    TermsEnum testTermEnum = MultiFields.getTerms(testReader, t.field()).iterator();\n    testTermEnum.seek(new BytesRef(t.text()));\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n    DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n\n    assertEquals(aprioriTermDocs.nextDoc(), testTermDocs.nextDoc());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n\n    if (aprioriTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(4));\n    }\n\n    if (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(100));\n    }\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    FieldsEnum apFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    String apFirstField = apFieldsEnum.next();\n\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n    String testFirstField = testFieldsEnum.next();\n    assertEquals(apFirstField, testFirstField);\n\n    aprioriTermEnum = apFieldsEnum.terms();\n    testTermEnum = testFieldsEnum.terms();\n    \n    assertEquals(aprioriTermEnum.next(), testTermEnum.next());\n    \n    aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n    testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n    while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    }\n    assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","sourceNew":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermsEnum aprioriTermEnum = MultiFields.getTerms(aprioriReader, t.field()).iterator();\n    aprioriTermEnum.seekCeil(new BytesRef(t.text()));\n    TermsEnum testTermEnum = MultiFields.getTerms(testReader, t.field()).iterator();\n    testTermEnum.seekCeil(new BytesRef(t.text()));\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n    DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n\n    assertEquals(aprioriTermDocs.nextDoc(), testTermDocs.nextDoc());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n\n    if (aprioriTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(4));\n    }\n\n    if (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(100));\n    }\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    FieldsEnum apFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    String apFirstField = apFieldsEnum.next();\n\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n    String testFirstField = testFieldsEnum.next();\n    assertEquals(apFirstField, testFirstField);\n\n    aprioriTermEnum = apFieldsEnum.terms();\n    testTermEnum = testFieldsEnum.terms();\n    \n    assertEquals(aprioriTermEnum.next(), testTermEnum.next());\n    \n    aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n    testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n    while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    }\n    assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","sourceOld":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermsEnum aprioriTermEnum = MultiFields.getTerms(aprioriReader, t.field()).iterator();\n    aprioriTermEnum.seek(new BytesRef(t.text()));\n    TermsEnum testTermEnum = MultiFields.getTerms(testReader, t.field()).iterator();\n    testTermEnum.seek(new BytesRef(t.text()));\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n    DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n\n    assertEquals(aprioriTermDocs.nextDoc(), testTermDocs.nextDoc());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n\n    if (aprioriTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(4));\n    }\n\n    if (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(100));\n    }\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    FieldsEnum apFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    String apFirstField = apFieldsEnum.next();\n\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n    String testFirstField = testFieldsEnum.next();\n    assertEquals(apFirstField, testFirstField);\n\n    aprioriTermEnum = apFieldsEnum.terms();\n    testTermEnum = testFieldsEnum.terms();\n    \n    assertEquals(aprioriTermEnum.next(), testTermEnum.next());\n    \n    aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n    testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n    while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    }\n    assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","sourceNew":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermsEnum aprioriTermEnum = MultiFields.getTerms(aprioriReader, t.field()).iterator();\n    aprioriTermEnum.seekCeil(new BytesRef(t.text()));\n    TermsEnum testTermEnum = MultiFields.getTerms(testReader, t.field()).iterator();\n    testTermEnum.seekCeil(new BytesRef(t.text()));\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getLiveDocs(aprioriReader), null);\n    DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getLiveDocs(testReader), null);\n\n    assertEquals(aprioriTermDocs.nextDoc(), testTermDocs.nextDoc());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n\n    if (aprioriTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(4));\n    }\n\n    if (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(100));\n    }\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    FieldsEnum apFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    String apFirstField = apFieldsEnum.next();\n\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n    String testFirstField = testFieldsEnum.next();\n    assertEquals(apFirstField, testFirstField);\n\n    aprioriTermEnum = apFieldsEnum.terms();\n    testTermEnum = testFieldsEnum.terms();\n    \n    assertEquals(aprioriTermEnum.next(), testTermEnum.next());\n    \n    aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getLiveDocs(aprioriReader), aprioriTermDocs);\n    testTermDocs = testTermEnum.docs(MultiFields.getLiveDocs(testReader), testTermDocs);\n\n    while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    }\n    assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","sourceOld":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermsEnum aprioriTermEnum = MultiFields.getTerms(aprioriReader, t.field()).iterator();\n    aprioriTermEnum.seekCeil(new BytesRef(t.text()));\n    TermsEnum testTermEnum = MultiFields.getTerms(testReader, t.field()).iterator();\n    testTermEnum.seekCeil(new BytesRef(t.text()));\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n    DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n\n    assertEquals(aprioriTermDocs.nextDoc(), testTermDocs.nextDoc());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n\n    if (aprioriTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(4));\n    }\n\n    if (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(100));\n    }\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    FieldsEnum apFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    String apFirstField = apFieldsEnum.next();\n\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n    String testFirstField = testFieldsEnum.next();\n    assertEquals(apFirstField, testFirstField);\n\n    aprioriTermEnum = apFieldsEnum.terms();\n    testTermEnum = testFieldsEnum.terms();\n    \n    assertEquals(aprioriTermEnum.next(), testTermEnum.next());\n    \n    aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n    testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n    while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    }\n    assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","sourceNew":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermsEnum aprioriTermEnum = MultiFields.getTerms(aprioriReader, t.field()).iterator();\n    aprioriTermEnum.seekCeil(new BytesRef(t.text()));\n    TermsEnum testTermEnum = MultiFields.getTerms(testReader, t.field()).iterator();\n    testTermEnum.seekCeil(new BytesRef(t.text()));\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getLiveDocs(aprioriReader), null);\n    DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getLiveDocs(testReader), null);\n\n    assertEquals(aprioriTermDocs.nextDoc(), testTermDocs.nextDoc());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n\n    if (aprioriTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(4));\n    }\n\n    if (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(100));\n    }\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    FieldsEnum apFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    String apFirstField = apFieldsEnum.next();\n\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n    String testFirstField = testFieldsEnum.next();\n    assertEquals(apFirstField, testFirstField);\n\n    aprioriTermEnum = apFieldsEnum.terms();\n    testTermEnum = testFieldsEnum.terms();\n    \n    assertEquals(aprioriTermEnum.next(), testTermEnum.next());\n    \n    aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getLiveDocs(aprioriReader), aprioriTermDocs);\n    testTermDocs = testTermEnum.docs(MultiFields.getLiveDocs(testReader), testTermDocs);\n\n    while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    }\n    assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","sourceOld":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermsEnum aprioriTermEnum = MultiFields.getTerms(aprioriReader, t.field()).iterator();\n    aprioriTermEnum.seekCeil(new BytesRef(t.text()));\n    TermsEnum testTermEnum = MultiFields.getTerms(testReader, t.field()).iterator();\n    testTermEnum.seekCeil(new BytesRef(t.text()));\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n    DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n\n    assertEquals(aprioriTermDocs.nextDoc(), testTermDocs.nextDoc());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n\n    if (aprioriTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(4));\n    }\n\n    if (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(100));\n    }\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    FieldsEnum apFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    String apFirstField = apFieldsEnum.next();\n\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n    String testFirstField = testFieldsEnum.next();\n    assertEquals(apFirstField, testFirstField);\n\n    aprioriTermEnum = apFieldsEnum.terms();\n    testTermEnum = testFieldsEnum.terms();\n    \n    assertEquals(aprioriTermEnum.next(), testTermEnum.next());\n    \n    aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n    testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n    while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    }\n    assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","sourceNew":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermsEnum aprioriTermEnum = MultiFields.getTerms(aprioriReader, t.field()).iterator();\n    aprioriTermEnum.seekCeil(new BytesRef(t.text()));\n    TermsEnum testTermEnum = MultiFields.getTerms(testReader, t.field()).iterator();\n    testTermEnum.seekCeil(new BytesRef(t.text()));\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getLiveDocs(aprioriReader), null);\n    DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getLiveDocs(testReader), null);\n\n    assertEquals(aprioriTermDocs.nextDoc(), testTermDocs.nextDoc());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n\n    if (aprioriTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(4));\n    }\n\n    if (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(100));\n    }\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    FieldsEnum apFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    String apFirstField = apFieldsEnum.next();\n\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n    String testFirstField = testFieldsEnum.next();\n    assertEquals(apFirstField, testFirstField);\n\n    aprioriTermEnum = apFieldsEnum.terms();\n    testTermEnum = testFieldsEnum.terms();\n    \n    assertEquals(aprioriTermEnum.next(), testTermEnum.next());\n    \n    aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getLiveDocs(aprioriReader), aprioriTermDocs);\n    testTermDocs = testTermEnum.docs(MultiFields.getLiveDocs(testReader), testTermDocs);\n\n    while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    }\n    assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","sourceOld":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermsEnum aprioriTermEnum = MultiFields.getTerms(aprioriReader, t.field()).iterator();\n    aprioriTermEnum.seek(new BytesRef(t.text()));\n    TermsEnum testTermEnum = MultiFields.getTerms(testReader, t.field()).iterator();\n    testTermEnum.seek(new BytesRef(t.text()));\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n    DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n\n    assertEquals(aprioriTermDocs.nextDoc(), testTermDocs.nextDoc());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n\n    if (aprioriTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(4));\n    }\n\n    if (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(100));\n    }\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    FieldsEnum apFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    String apFirstField = apFieldsEnum.next();\n\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n    String testFirstField = testFieldsEnum.next();\n    assertEquals(apFirstField, testFirstField);\n\n    aprioriTermEnum = apFieldsEnum.terms();\n    testTermEnum = testFieldsEnum.terms();\n    \n    assertEquals(aprioriTermEnum.next(), testTermEnum.next());\n    \n    aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n    testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n    while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    }\n    assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","sourceNew":null,"sourceOld":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermsEnum aprioriTermEnum = MultiFields.getTerms(aprioriReader, t.field()).iterator();\n    aprioriTermEnum.seekCeil(new BytesRef(t.text()));\n    TermsEnum testTermEnum = MultiFields.getTerms(testReader, t.field()).iterator();\n    testTermEnum.seekCeil(new BytesRef(t.text()));\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getLiveDocs(aprioriReader), null);\n    DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getLiveDocs(testReader), null);\n\n    assertEquals(aprioriTermDocs.nextDoc(), testTermDocs.nextDoc());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n\n    if (aprioriTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(4));\n    }\n\n    if (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.advance(100) != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    } else {\n      assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.advance(100));\n    }\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    FieldsEnum apFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    String apFirstField = apFieldsEnum.next();\n\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n    String testFirstField = testFieldsEnum.next();\n    assertEquals(apFirstField, testFirstField);\n\n    aprioriTermEnum = apFieldsEnum.terms();\n    testTermEnum = testFieldsEnum.terms();\n    \n    assertEquals(aprioriTermEnum.next(), testTermEnum.next());\n    \n    aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getLiveDocs(aprioriReader), aprioriTermDocs);\n    testTermDocs = testTermEnum.docs(MultiFields.getLiveDocs(testReader), testTermDocs);\n\n    while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n    }\n    assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3cc749c053615f5871f3b95715fe292f34e70a53":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","28427ef110c4c5bf5b4057731b83110bd1e13724"],"2553b00f699380c64959ccb27991289aae87be2e":["28427ef110c4c5bf5b4057731b83110bd1e13724","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["28427ef110c4c5bf5b4057731b83110bd1e13724","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["3cc749c053615f5871f3b95715fe292f34e70a53","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","2553b00f699380c64959ccb27991289aae87be2e","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":[],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","2553b00f699380c64959ccb27991289aae87be2e"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}