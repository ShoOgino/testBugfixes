{"path":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0f1292519c0b69c888ad2e1b51e9af6490fae5","date":1422297583,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(e != null &&  !e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (int i = 0 ; i < threadCount ; i++) {\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          ArrayList errs = new ArrayList();\n          collectErrors.add(errs);\n          try {\n            invokeBulkAddCall(finalI, errs);\n            invokeBulkReplaceCall(finalI, errs);\n            invokeBulkDeleteCall(finalI, errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if (e != null &&  !e.isEmpty()) {\n        success = false;\n        log.error(e.toString());\n      }\n    }\n\n    assertTrue(collectErrors.toString(), success);\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(e != null &&  !e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (int i = 0 ; i < threadCount ; i++) {\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          ArrayList errs = new ArrayList();\n          collectErrors.add(errs);\n          try {\n            invokeBulkAddCall(finalI, errs);\n            invokeBulkReplaceCall(finalI, errs);\n            invokeBulkDeleteCall(finalI, errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if (e != null &&  !e.isEmpty()) {\n        success = false;\n        log.error(e.toString());\n      }\n    }\n\n    assertTrue(collectErrors.toString(), success);\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(e != null &&  !e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0853c291617e0f9d0474b720bf609eb350e9225c","date":1514464265,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    final int threadCount = 5;\n    setupRestTestHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (int i = 0 ; i < threadCount ; i++) {\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          ArrayList errs = new ArrayList();\n          collectErrors.add(errs);\n          try {\n            invokeBulkAddCall(finalI, errs);\n            invokeBulkReplaceCall(finalI, errs);\n            invokeBulkDeleteCall(finalI, errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if (e != null &&  !e.isEmpty()) {\n        success = false;\n        log.error(e.toString());\n      }\n    }\n\n    assertTrue(collectErrors.toString(), success);\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (int i = 0 ; i < threadCount ; i++) {\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          ArrayList errs = new ArrayList();\n          collectErrors.add(errs);\n          try {\n            invokeBulkAddCall(finalI, errs);\n            invokeBulkReplaceCall(finalI, errs);\n            invokeBulkDeleteCall(finalI, errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if (e != null &&  !e.isEmpty()) {\n        success = false;\n        log.error(e.toString());\n      }\n    }\n\n    assertTrue(collectErrors.toString(), success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    final int threadCount = 5;\n    setupRestTestHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = Collections.synchronizedList(new ArrayList<>());\n\n    for (int i = 0 ; i < threadCount ; i++) {\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          ArrayList errs = new ArrayList();\n          collectErrors.add(errs);\n          try {\n            invokeBulkAddCall(finalI, errs);\n            invokeBulkReplaceCall(finalI, errs);\n            invokeBulkDeleteCall(finalI, errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if (e != null &&  !e.isEmpty()) {\n        success = false;\n        log.error(e.toString());\n      }\n    }\n\n    assertTrue(collectErrors.toString(), success);\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    final int threadCount = 5;\n    setupRestTestHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (int i = 0 ; i < threadCount ; i++) {\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          ArrayList errs = new ArrayList();\n          collectErrors.add(errs);\n          try {\n            invokeBulkAddCall(finalI, errs);\n            invokeBulkReplaceCall(finalI, errs);\n            invokeBulkDeleteCall(finalI, errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if (e != null &&  !e.isEmpty()) {\n        success = false;\n        log.error(e.toString());\n      }\n    }\n\n    assertTrue(collectErrors.toString(), success);\n  }\n\n","bugFix":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    final int threadCount = 5;\n    setupRestTestHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = Collections.synchronizedList(new ArrayList<>());\n\n    for (int i = 0 ; i < threadCount ; i++) {\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          ArrayList errs = new ArrayList();\n          collectErrors.add(errs);\n          try {\n            invokeBulkAddCall(finalI, errs);\n            invokeBulkReplaceCall(finalI, errs);\n            invokeBulkDeleteCall(finalI, errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if (e != null &&  !e.isEmpty()) {\n        success = false;\n        log.error(\"{}\", e);\n      }\n    }\n\n    assertTrue(collectErrors.toString(), success);\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    final int threadCount = 5;\n    setupRestTestHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = Collections.synchronizedList(new ArrayList<>());\n\n    for (int i = 0 ; i < threadCount ; i++) {\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          ArrayList errs = new ArrayList();\n          collectErrors.add(errs);\n          try {\n            invokeBulkAddCall(finalI, errs);\n            invokeBulkReplaceCall(finalI, errs);\n            invokeBulkDeleteCall(finalI, errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if (e != null &&  !e.isEmpty()) {\n        success = false;\n        log.error(e.toString());\n      }\n    }\n\n    assertTrue(collectErrors.toString(), success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#test().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void test() throws Exception {\n\n    final int threadCount = 5;\n    setupRestTestHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    @SuppressWarnings({\"rawtypes\"})\n    final List<List> collectErrors = Collections.synchronizedList(new ArrayList<>());\n\n    for (int i = 0 ; i < threadCount ; i++) {\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          @SuppressWarnings({\"rawtypes\"})\n          ArrayList errs = new ArrayList();\n          collectErrors.add(errs);\n          try {\n            invokeBulkAddCall(finalI, errs);\n            invokeBulkReplaceCall(finalI, errs);\n            invokeBulkDeleteCall(finalI, errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (@SuppressWarnings({\"rawtypes\"})List e : collectErrors) {\n      if (e != null &&  !e.isEmpty()) {\n        success = false;\n        log.error(\"{}\", e);\n      }\n    }\n\n    assertTrue(collectErrors.toString(), success);\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    final int threadCount = 5;\n    setupRestTestHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = Collections.synchronizedList(new ArrayList<>());\n\n    for (int i = 0 ; i < threadCount ; i++) {\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          ArrayList errs = new ArrayList();\n          collectErrors.add(errs);\n          try {\n            invokeBulkAddCall(finalI, errs);\n            invokeBulkReplaceCall(finalI, errs);\n            invokeBulkDeleteCall(finalI, errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if (e != null &&  !e.isEmpty()) {\n        success = false;\n        log.error(\"{}\", e);\n      }\n    }\n\n    assertTrue(collectErrors.toString(), success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ca0f1292519c0b69c888ad2e1b51e9af6490fae5","eeeea2295d6355a29e259130a5c48ace73022d7c"],"0853c291617e0f9d0474b720bf609eb350e9225c":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0853c291617e0f9d0474b720bf609eb350e9225c"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["ca0f1292519c0b69c888ad2e1b51e9af6490fae5"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"ca0f1292519c0b69c888ad2e1b51e9af6490fae5":["abb23fcc2461782ab204e61213240feb77d355aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0853c291617e0f9d0474b720bf609eb350e9225c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0853c291617e0f9d0474b720bf609eb350e9225c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"abb23fcc2461782ab204e61213240feb77d355aa":["ca0f1292519c0b69c888ad2e1b51e9af6490fae5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e98520789adb1d5ad05afb4956eca0944a929688"],"ca0f1292519c0b69c888ad2e1b51e9af6490fae5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","eeeea2295d6355a29e259130a5c48ace73022d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}