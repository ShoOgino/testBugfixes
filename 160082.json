{"path":"solr/core/src/java/org/apache/solr/pkg/PackageAPI#registerListener(SolrZkClient).mjava","commits":[{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageAPI#registerListener(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  private void registerListener(SolrZkClient zkClient)\n      throws KeeperException, InterruptedException {\n    String path = SOLR_PKGS_PATH;\n    zkClient.exists(path,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (Event.EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (this) {\n                log.debug(\"Updating [{}] ... \", path);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = zkClient.getData(path, thisWatch, stat, true);\n                pkgs = readPkgsFromZk(data, stat);\n                packageLoader.refreshPackageConf();\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageAPI#registerListener(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageAPI#registerListener(SolrZkClient).mjava","sourceNew":"  private void registerListener(SolrZkClient zkClient)\n      throws KeeperException, InterruptedException {\n    String path = SOLR_PKGS_PATH;\n    zkClient.exists(path,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (Event.EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (this) {\n                log.debug(\"Updating [{}] ... \", path);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = zkClient.getData(path, thisWatch, stat, true);\n                pkgs = readPkgsFromZk(data, stat);\n                packageLoader.refreshPackageConf();\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              if (log.isWarnEnabled()) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n              }\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","sourceOld":"  private void registerListener(SolrZkClient zkClient)\n      throws KeeperException, InterruptedException {\n    String path = SOLR_PKGS_PATH;\n    zkClient.exists(path,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (Event.EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (this) {\n                log.debug(\"Updating [{}] ... \", path);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = zkClient.getData(path, thisWatch, stat, true);\n                pkgs = readPkgsFromZk(data, stat);\n                packageLoader.refreshPackageConf();\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageAPI#registerListener(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageAPI#registerListener(SolrZkClient).mjava","sourceNew":"  private void registerListener(SolrZkClient zkClient)\n      throws KeeperException, InterruptedException {\n    String path = SOLR_PKGS_PATH;\n    zkClient.exists(path,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (Event.EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (this) {\n                log.debug(\"Updating [{}] ... \", path);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = zkClient.getData(path, thisWatch, stat, true);\n                pkgs = readPkgsFromZk(data, stat);\n                packageLoader.refreshPackageConf();\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","sourceOld":"  private void registerListener(SolrZkClient zkClient)\n      throws KeeperException, InterruptedException {\n    String path = SOLR_PKGS_PATH;\n    zkClient.exists(path,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (Event.EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (this) {\n                log.debug(\"Updating [{}] ... \", path);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = zkClient.getData(path, thisWatch, stat, true);\n                pkgs = readPkgsFromZk(data, stat);\n                packageLoader.refreshPackageConf();\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              if (log.isWarnEnabled()) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n              }\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageAPI#registerListener(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageAPI#registerListener(SolrZkClient).mjava","sourceNew":"  private void registerListener(SolrZkClient zkClient)\n      throws KeeperException, InterruptedException {\n    String path = SOLR_PKGS_PATH;\n    zkClient.exists(path,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (Event.EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (this) {\n                log.debug(\"Updating [{}] ... \", path);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = zkClient.getData(path, thisWatch, stat, true);\n                pkgs = readPkgsFromZk(data, stat);\n                packageLoader.refreshPackageConf();\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: \", e);\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","sourceOld":"  private void registerListener(SolrZkClient zkClient)\n      throws KeeperException, InterruptedException {\n    String path = SOLR_PKGS_PATH;\n    zkClient.exists(path,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (Event.EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (this) {\n                log.debug(\"Updating [{}] ... \", path);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = zkClient.getData(path, thisWatch, stat, true);\n                pkgs = readPkgsFromZk(data, stat);\n                packageLoader.refreshPackageConf();\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f67fd8fd2e9ce826d02daa00a0ba2fd1ba1ba6c2","date":1600737649,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageAPI#registerListener(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageAPI#registerListener(SolrZkClient).mjava","sourceNew":"  private void registerListener(SolrZkClient zkClient)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_PKGS_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (Event.EventType.None.equals(event.getType())) {\n              return;\n            }\n            synchronized (this) {\n              log.debug(\"Updating [{}] ... \", SOLR_PKGS_PATH);\n              // remake watch\n              final Watcher thisWatch = this;\n              refreshPackages(thisWatch);\n            }\n          }\n        }, true);\n  }\n\n","sourceOld":"  private void registerListener(SolrZkClient zkClient)\n      throws KeeperException, InterruptedException {\n    String path = SOLR_PKGS_PATH;\n    zkClient.exists(path,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (Event.EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (this) {\n                log.debug(\"Updating [{}] ... \", path);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = zkClient.getData(path, thisWatch, stat, true);\n                pkgs = readPkgsFromZk(data, stat);\n                packageLoader.refreshPackageConf();\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: \", e);\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f67fd8fd2e9ce826d02daa00a0ba2fd1ba1ba6c2":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57c238f5fb83803b49b37b3a1a12224a64d47542":["575e66bd4b2349209027f6801184da7fc3cba13f"],"575e66bd4b2349209027f6801184da7fc3cba13f":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f67fd8fd2e9ce826d02daa00a0ba2fd1ba1ba6c2"]},"commit2Childs":{"f67fd8fd2e9ce826d02daa00a0ba2fd1ba1ba6c2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["575e66bd4b2349209027f6801184da7fc3cba13f"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["f67fd8fd2e9ce826d02daa00a0ba2fd1ba1ba6c2"],"575e66bd4b2349209027f6801184da7fc3cba13f":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}