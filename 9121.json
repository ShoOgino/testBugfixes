{"path":"solr/core/src/java/org/apache/solr/handler/XMLLoader#readDoc(XMLStreamReader).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            if (!isNull) {\n              doc.addField(name, text.toString(), boost);\n              boost = 1.0f;\n            }\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else {\n              XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            if (!isNull) {\n              doc.addField(name, text.toString(), boost);\n              boost = 1.0f;\n            }\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else {\n              XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            if (!isNull) {\n              doc.addField(name, text.toString(), boost);\n              boost = 1.0f;\n            }\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else {\n              XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            if (!isNull) {\n              doc.addField(name, text.toString(), boost);\n              boost = 1.0f;\n            }\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else {\n              XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            if (!isNull) {\n              doc.addField(name, text.toString(), boost);\n              boost = 1.0f;\n            }\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else {\n              XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            if (!isNull) {\n              doc.addField(name, text.toString(), boost);\n              boost = 1.0f;\n            }\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else {\n              XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bea3922196318026c4274f2013416acb60c691e","date":1336496433,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              Map<String,Object> extendedValue = new HashMap<String,Object>(1);\n              extendedValue.put(update, v);\n              v = extendedValue;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          update = null;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else if (\"update\".equals(attrName)) {\n              update = attrVal;\n            } else {\n              XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            if (!isNull) {\n              doc.addField(name, text.toString(), boost);\n              boost = 1.0f;\n            }\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else {\n              XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#readDoc(XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/XMLLoader#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              Map<String,Object> extendedValue = new HashMap<String,Object>(1);\n              extendedValue.put(update, v);\n              v = extendedValue;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          update = null;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else if (\"update\".equals(attrName)) {\n              update = attrVal;\n            } else {\n              log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   *\n   * @since solr 1.3\n   */\n  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n\n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    String name = null;\n    float boost = 1.0f;\n    boolean isNull = false;\n    String update = null;\n\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          if (\"doc\".equals(parser.getLocalName())) {\n            return doc;\n          } else if (\"field\".equals(parser.getLocalName())) {\n            Object v = isNull ? null : text.toString();\n            if (update != null) {\n              Map<String,Object> extendedValue = new HashMap<String,Object>(1);\n              extendedValue.put(update, v);\n              v = extendedValue;\n            }\n            doc.addField(name, v, boost);\n            boost = 1.0f;\n          }\n          break;\n\n        case XMLStreamConstants.START_ELEMENT:\n          text.setLength(0);\n          String localName = parser.getLocalName();\n          if (!\"field\".equals(localName)) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag doc/\" + localName);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag doc/\" + localName);\n          }\n          boost = 1.0f;\n          update = null;\n          String attrVal = \"\";\n          for (int i = 0; i < parser.getAttributeCount(); i++) {\n            attrName = parser.getAttributeLocalName(i);\n            attrVal = parser.getAttributeValue(i);\n            if (\"name\".equals(attrName)) {\n              name = attrVal;\n            } else if (\"boost\".equals(attrName)) {\n              boost = Float.parseFloat(attrVal);\n            } else if (\"null\".equals(attrName)) {\n              isNull = StrUtils.parseBoolean(attrVal);\n            } else if (\"update\".equals(attrName)) {\n              update = attrVal;\n            } else {\n              XmlUpdateRequestHandler.log.warn(\"Unknown attribute doc/field/@\" + attrName);\n            }\n          }\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042e4d934397657ba04c82b46cc5665076bc5c58":["1bea3922196318026c4274f2013416acb60c691e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1bea3922196318026c4274f2013416acb60c691e":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["042e4d934397657ba04c82b46cc5665076bc5c58"]},"commit2Childs":{"042e4d934397657ba04c82b46cc5665076bc5c58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1bea3922196318026c4274f2013416acb60c691e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1bea3922196318026c4274f2013416acb60c691e":["042e4d934397657ba04c82b46cc5665076bc5c58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}