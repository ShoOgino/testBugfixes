{"path":"contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"65c941e8dcb3bb0ee6b785e349a931111c65e8ff","date":1268850890,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\",new PageTool(request,response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper !=null);\n    \n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n      \n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n      \n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0c840fcaa8a53dc8e038a0f7776c84283637f9","date":1268855982,"type":1,"author":"Yonik Seeley","isMerge":true,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    // TODO: Add layout capability, render to string buffer, then render layout\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\",new PageTool(request,response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper !=null);\n    \n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n      \n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n      \n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65c941e8dcb3bb0ee6b785e349a931111c65e8ff":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["fb0c840fcaa8a53dc8e038a0f7776c84283637f9"],"fb0c840fcaa8a53dc8e038a0f7776c84283637f9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","65c941e8dcb3bb0ee6b785e349a931111c65e8ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"65c941e8dcb3bb0ee6b785e349a931111c65e8ff":["fb0c840fcaa8a53dc8e038a0f7776c84283637f9"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["65c941e8dcb3bb0ee6b785e349a931111c65e8ff","fb0c840fcaa8a53dc8e038a0f7776c84283637f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"fb0c840fcaa8a53dc8e038a0f7776c84283637f9":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}