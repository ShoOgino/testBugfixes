{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAlias(String).mjava","commits":[{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAlias(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAlias(String).mjava","sourceNew":"  private void parseAlias(String line) {\n    String ruleArgs[] = line.split(\"\\\\s+\");\n    if (aliases == null) {\n      //first line should be the aliases count\n      final int count = Integer.parseInt(ruleArgs[1]);\n      aliases = new String[count];\n    } else {\n      aliases[aliasCount++] = ruleArgs[1];\n    }\n  }\n\n","sourceOld":"  private void parseAlias(String line) {\n    String ruleArgs[] = line.split(\"\\\\s+\");\n    if (aliases == null) {\n      //first line should be the aliases count\n      final int count = Integer.parseInt(ruleArgs[1]);\n      aliases = new String[count];\n    } else {\n      aliases[aliasCount++] = ruleArgs[1];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAlias(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAlias(String).mjava","sourceNew":"  private void parseAlias(String line) {\n    String ruleArgs[] = line.split(\"\\\\s+\");\n    if (aliases == null) {\n      //first line should be the aliases count\n      final int count = Integer.parseInt(ruleArgs[1]);\n      aliases = new String[count];\n    } else {\n      aliases[aliasCount++] = ruleArgs[1];\n    }\n  }\n\n","sourceOld":"  private void parseAlias(String line) {\n    String ruleArgs[] = line.split(\"\\\\s+\");\n    if (aliases == null) {\n      //first line should be the aliases count\n      final int count = Integer.parseInt(ruleArgs[1]);\n      aliases = new String[count];\n    } else {\n      aliases[aliasCount++] = ruleArgs[1];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d4fb2cc011096cc0cff79f0adcf03dc734b9352","date":1394386069,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAlias(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAlias(String).mjava","sourceNew":"  private void parseAlias(String line) {\n    String ruleArgs[] = line.split(\"\\\\s+\");\n    if (aliases == null) {\n      //first line should be the aliases count\n      final int count = Integer.parseInt(ruleArgs[1]);\n      aliases = new String[count];\n    } else {\n      // an alias can map to no flags\n      String aliasValue = ruleArgs.length == 1 ? \"\" : ruleArgs[1];\n      aliases[aliasCount++] = aliasValue;\n    }\n  }\n\n","sourceOld":"  private void parseAlias(String line) {\n    String ruleArgs[] = line.split(\"\\\\s+\");\n    if (aliases == null) {\n      //first line should be the aliases count\n      final int count = Integer.parseInt(ruleArgs[1]);\n      aliases = new String[count];\n    } else {\n      aliases[aliasCount++] = ruleArgs[1];\n    }\n  }\n\n","bugFix":["640a015a5b43a8d9d05b311071bf93beb685e6b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAlias(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAlias(String).mjava","sourceNew":"  private void parseAlias(String line) {\n    String ruleArgs[] = line.split(\"\\\\s+\");\n    if (aliases == null) {\n      //first line should be the aliases count\n      final int count = Integer.parseInt(ruleArgs[1]);\n      aliases = new String[count];\n    } else {\n      // an alias can map to no flags\n      String aliasValue = ruleArgs.length == 1 ? \"\" : ruleArgs[1];\n      aliases[aliasCount++] = aliasValue;\n    }\n  }\n\n","sourceOld":"  private void parseAlias(String line) {\n    String ruleArgs[] = line.split(\"\\\\s+\");\n    if (aliases == null) {\n      //first line should be the aliases count\n      final int count = Integer.parseInt(ruleArgs[1]);\n      aliases = new String[count];\n    } else {\n      aliases[aliasCount++] = ruleArgs[1];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["ba791bce8103c79e38f957e9c5a53a75871bd918","6d4fb2cc011096cc0cff79f0adcf03dc734b9352"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6d4fb2cc011096cc0cff79f0adcf03dc734b9352":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6d4fb2cc011096cc0cff79f0adcf03dc734b9352"]},"commit2Childs":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","6d4fb2cc011096cc0cff79f0adcf03dc734b9352"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"6d4fb2cc011096cc0cff79f0adcf03dc734b9352":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}