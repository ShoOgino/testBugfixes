{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#outsideDistance(DistanceStyle,double,double,double).mjava","commits":[{"id":"40aa98241c87d86a0077beb8023713d93a0becfe","date":1459784560,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#outsideDistance(DistanceStyle,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected double outsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    double minimumDistance = Double.MAX_VALUE;\n    for (final GeoPoint edgePoint : points) {\n      final double newDist = distanceStyle.computeDistance(edgePoint, x,y,z);\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    for (final SidedPlane edgePlane : edges) {\n      final double newDist = distanceStyle.computeDistance(planetModel, edgePlane, x, y, z, eitherBounds.get(edgePlane));\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    return minimumDistance;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#outsideDistance(DistanceStyle,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected double outsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    double minimumDistance = Double.MAX_VALUE;\n    for (final GeoPoint edgePoint : points) {\n      final double newDist = distanceStyle.computeDistance(edgePoint, x,y,z);\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    for (final SidedPlane edgePlane : edges) {\n      final double newDist = distanceStyle.computeDistance(planetModel, edgePlane, x, y, z, eitherBounds.get(edgePlane));\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    return minimumDistance;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba81c43c13d92ea74a6388471cf358eb7068744d","date":1461408282,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#outsideDistance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#outsideDistance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  protected double outsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    double minimumDistance = Double.MAX_VALUE;\n    for (final GeoPoint edgePoint : points) {\n      final double newDist = distanceStyle.computeDistance(edgePoint, x,y,z);\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    for (final SidedPlane edgePlane : edges) {\n      final double newDist = distanceStyle.computeDistance(planetModel, edgePlane, x, y, z, eitherBounds.get(edgePlane));\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    if (holes != null) {\n      for (final GeoPolygon hole : holes) {\n        double holeDistance = hole.computeOutsideDistance(distanceStyle, x, y, z);\n        if (holeDistance != 0.0 && holeDistance < minimumDistance) {\n          minimumDistance = holeDistance;\n        }\n      }\n    }\n    return minimumDistance;\n  }\n\n","sourceOld":"  @Override\n  protected double outsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    double minimumDistance = Double.MAX_VALUE;\n    for (final GeoPoint edgePoint : points) {\n      final double newDist = distanceStyle.computeDistance(edgePoint, x,y,z);\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    for (final SidedPlane edgePlane : edges) {\n      final double newDist = distanceStyle.computeDistance(planetModel, edgePlane, x, y, z, eitherBounds.get(edgePlane));\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    return minimumDistance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#outsideDistance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#outsideDistance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  protected double outsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    double minimumDistance = Double.MAX_VALUE;\n    for (final GeoPoint edgePoint : points) {\n      final double newDist = distanceStyle.computeDistance(edgePoint, x,y,z);\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    for (final SidedPlane edgePlane : edges) {\n      final double newDist = distanceStyle.computeDistance(planetModel, edgePlane, x, y, z, eitherBounds.get(edgePlane));\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    if (holes != null) {\n      for (final GeoPolygon hole : holes) {\n        double holeDistance = hole.computeOutsideDistance(distanceStyle, x, y, z);\n        if (holeDistance != 0.0 && holeDistance < minimumDistance) {\n          minimumDistance = holeDistance;\n        }\n      }\n    }\n    return minimumDistance;\n  }\n\n","sourceOld":"  @Override\n  protected double outsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    double minimumDistance = Double.MAX_VALUE;\n    for (final GeoPoint edgePoint : points) {\n      final double newDist = distanceStyle.computeDistance(edgePoint, x,y,z);\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    for (final SidedPlane edgePlane : edges) {\n      final double newDist = distanceStyle.computeDistance(planetModel, edgePlane, x, y, z, eitherBounds.get(edgePlane));\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    return minimumDistance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae0a2a645db6ae8e4aca176aefd05f400689d2f4","date":1463569628,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#outsideDistance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#outsideDistance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  protected double outsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    double minimumDistance = Double.POSITIVE_INFINITY;\n    for (final GeoPoint edgePoint : points) {\n      final double newDist = distanceStyle.computeDistance(edgePoint, x,y,z);\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    for (final SidedPlane edgePlane : edges) {\n      final double newDist = distanceStyle.computeDistance(planetModel, edgePlane, x, y, z, eitherBounds.get(edgePlane));\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    if (holes != null) {\n      for (final GeoPolygon hole : holes) {\n        double holeDistance = hole.computeOutsideDistance(distanceStyle, x, y, z);\n        if (holeDistance != 0.0 && holeDistance < minimumDistance) {\n          minimumDistance = holeDistance;\n        }\n      }\n    }\n    return minimumDistance;\n  }\n\n","sourceOld":"  @Override\n  protected double outsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    double minimumDistance = Double.MAX_VALUE;\n    for (final GeoPoint edgePoint : points) {\n      final double newDist = distanceStyle.computeDistance(edgePoint, x,y,z);\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    for (final SidedPlane edgePlane : edges) {\n      final double newDist = distanceStyle.computeDistance(planetModel, edgePlane, x, y, z, eitherBounds.get(edgePlane));\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    if (holes != null) {\n      for (final GeoPolygon hole : holes) {\n        double holeDistance = hole.computeOutsideDistance(distanceStyle, x, y, z);\n        if (holeDistance != 0.0 && holeDistance < minimumDistance) {\n          minimumDistance = holeDistance;\n        }\n      }\n    }\n    return minimumDistance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#outsideDistance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#outsideDistance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  protected double outsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    double minimumDistance = Double.POSITIVE_INFINITY;\n    for (final GeoPoint edgePoint : points) {\n      final double newDist = distanceStyle.computeDistance(edgePoint, x,y,z);\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    for (final SidedPlane edgePlane : edges) {\n      final double newDist = distanceStyle.computeDistance(planetModel, edgePlane, x, y, z, eitherBounds.get(edgePlane));\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    if (holes != null) {\n      for (final GeoPolygon hole : holes) {\n        double holeDistance = hole.computeOutsideDistance(distanceStyle, x, y, z);\n        if (holeDistance != 0.0 && holeDistance < minimumDistance) {\n          minimumDistance = holeDistance;\n        }\n      }\n    }\n    return minimumDistance;\n  }\n\n","sourceOld":"  @Override\n  protected double outsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    double minimumDistance = Double.MAX_VALUE;\n    for (final GeoPoint edgePoint : points) {\n      final double newDist = distanceStyle.computeDistance(edgePoint, x,y,z);\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    for (final SidedPlane edgePlane : edges) {\n      final double newDist = distanceStyle.computeDistance(planetModel, edgePlane, x, y, z, eitherBounds.get(edgePlane));\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    if (holes != null) {\n      for (final GeoPolygon hole : holes) {\n        double holeDistance = hole.computeOutsideDistance(distanceStyle, x, y, z);\n        if (holeDistance != 0.0 && holeDistance < minimumDistance) {\n          minimumDistance = holeDistance;\n        }\n      }\n    }\n    return minimumDistance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#outsideDistance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#outsideDistance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  protected double outsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    double minimumDistance = Double.POSITIVE_INFINITY;\n    for (final GeoPoint edgePoint : points) {\n      final double newDist = distanceStyle.computeDistance(edgePoint, x,y,z);\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    for (final SidedPlane edgePlane : edges) {\n      final double newDist = distanceStyle.computeDistance(planetModel, edgePlane, x, y, z, eitherBounds.get(edgePlane));\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    if (holes != null) {\n      for (final GeoPolygon hole : holes) {\n        double holeDistance = hole.computeOutsideDistance(distanceStyle, x, y, z);\n        if (holeDistance != 0.0 && holeDistance < minimumDistance) {\n          minimumDistance = holeDistance;\n        }\n      }\n    }\n    return minimumDistance;\n  }\n\n","sourceOld":"  @Override\n  protected double outsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    double minimumDistance = Double.MAX_VALUE;\n    for (final GeoPoint edgePoint : points) {\n      final double newDist = distanceStyle.computeDistance(edgePoint, x,y,z);\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    for (final SidedPlane edgePlane : edges) {\n      final double newDist = distanceStyle.computeDistance(planetModel, edgePlane, x, y, z, eitherBounds.get(edgePlane));\n      if (newDist < minimumDistance) {\n        minimumDistance = newDist;\n      }\n    }\n    if (holes != null) {\n      for (final GeoPolygon hole : holes) {\n        double holeDistance = hole.computeOutsideDistance(distanceStyle, x, y, z);\n        if (holeDistance != 0.0 && holeDistance < minimumDistance) {\n          minimumDistance = holeDistance;\n        }\n      }\n    }\n    return minimumDistance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","40aa98241c87d86a0077beb8023713d93a0becfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["40aa98241c87d86a0077beb8023713d93a0becfe","ba81c43c13d92ea74a6388471cf358eb7068744d"],"40aa98241c87d86a0077beb8023713d93a0becfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae0a2a645db6ae8e4aca176aefd05f400689d2f4":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"ba81c43c13d92ea74a6388471cf358eb7068744d":["40aa98241c87d86a0077beb8023713d93a0becfe"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","ae0a2a645db6ae8e4aca176aefd05f400689d2f4"]},"commit2Childs":{"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09af2c9610ce53a4b25fd99344299b40318a4a1a","40aa98241c87d86a0077beb8023713d93a0becfe"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["ae0a2a645db6ae8e4aca176aefd05f400689d2f4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"40aa98241c87d86a0077beb8023713d93a0becfe":["09af2c9610ce53a4b25fd99344299b40318a4a1a","f7f901826e47f75f810d7aae24b0455d21ea1fe2","ba81c43c13d92ea74a6388471cf358eb7068744d"],"ae0a2a645db6ae8e4aca176aefd05f400689d2f4":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ba81c43c13d92ea74a6388471cf358eb7068744d":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}