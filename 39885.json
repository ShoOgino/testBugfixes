{"path":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery#getShallowInverseDenseVisitor(ShapeQuery,FixedBitSet).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery#getShallowInverseDenseVisitor(ShapeQuery,FixedBitSet).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery#getShallowInverseDenseVisitor(ShapeQuery,FixedBitSet).mjava","sourceNew":"  /** create a visitor that clears documents that do not match the polygon query using a dense bitset; used with WITHIN & DISJOINT.\n   * This visitor only takes into account inner nodes */\n  private static IntersectVisitor getShallowInverseDenseVisitor(final ShapeQuery query, final FixedBitSet result) {\n    return new IntersectVisitor() {\n\n      @Override\n      public void visit(int docID) {\n        result.clear(docID);\n      }\n\n      @Override\n      public void visit(int docID, byte[] packedTriangle) {\n        //NO-OP\n      }\n\n      @Override\n      public void visit(DocIdSetIterator iterator, byte[] t) {\n        //NO-OP\n      }\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue, query.getQueryRelation()));\n      }\n    };\n  }\n\n","sourceOld":"  /** create a visitor that clears documents that do not match the polygon query using a dense bitset; used with WITHIN & DISJOINT.\n   * This visitor only takes into account inner nodes */\n  private static IntersectVisitor getShallowInverseDenseVisitor(final ShapeQuery query, final FixedBitSet result) {\n    return new IntersectVisitor() {\n\n      @Override\n      public void visit(int docID) {\n        result.clear(docID);\n      }\n\n      @Override\n      public void visit(int docID, byte[] packedTriangle) {\n        //NO-OP\n      }\n\n      @Override\n      public void visit(DocIdSetIterator iterator, byte[] t) {\n        //NO-OP\n      }\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue, query.getQueryRelation()));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}