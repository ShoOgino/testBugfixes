{"path":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","commits":[{"id":"02f9424edb9eccc558626693e4a4cd43f8ce2622","date":1288987640,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests if wildcard escaping works\n   */\n  public void testEscapes() throws Exception {\n    Directory indexStore = getIndexStore(\"field\", \n        new String[]{\"foo*bar\", \"foo??bar\", \"fooCDbar\", \"fooSOMETHINGbar\", \"foo\\\\\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // without escape: matches foo??bar, fooCDbar, foo*bar, and fooSOMETHINGbar\n    WildcardQuery unescaped = new WildcardQuery(new Term(\"field\", \"foo*bar\"));\n    assertMatches(searcher, unescaped, 4);\n    \n    // with escape: only matches foo*bar\n    WildcardQuery escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\*bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // without escape: matches foo??bar and fooCDbar\n    unescaped = new WildcardQuery(new Term(\"field\", \"foo??bar\"));\n    assertMatches(searcher, unescaped, 2);\n    \n    // with escape: matches foo??bar only\n    escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\?\\\\?bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // check escaping at end: lenient parse yields \"foo\\\"\n    WildcardQuery atEnd = new WildcardQuery(new Term(\"field\", \"foo\\\\\"));\n    assertMatches(searcher, atEnd, 1);\n    \n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests if wildcard escaping works\n   */\n  public void testEscapes() throws Exception {\n    Directory indexStore = getIndexStore(\"field\", \n        new String[]{\"foo*bar\", \"foo??bar\", \"fooCDbar\", \"fooSOMETHINGbar\", \"foo\\\\\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // without escape: matches foo??bar, fooCDbar, foo*bar, and fooSOMETHINGbar\n    WildcardQuery unescaped = new WildcardQuery(new Term(\"field\", \"foo*bar\"));\n    assertMatches(searcher, unescaped, 4);\n    \n    // with escape: only matches foo*bar\n    WildcardQuery escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\*bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // without escape: matches foo??bar and fooCDbar\n    unescaped = new WildcardQuery(new Term(\"field\", \"foo??bar\"));\n    assertMatches(searcher, unescaped, 2);\n    \n    // with escape: matches foo??bar only\n    escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\?\\\\?bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // check escaping at end: lenient parse yields \"foo\\\"\n    WildcardQuery atEnd = new WildcardQuery(new Term(\"field\", \"foo\\\\\"));\n    assertMatches(searcher, atEnd, 1);\n    \n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests if wildcard escaping works\n   */\n  public void testEscapes() throws Exception {\n    Directory indexStore = getIndexStore(\"field\", \n        new String[]{\"foo*bar\", \"foo??bar\", \"fooCDbar\", \"fooSOMETHINGbar\", \"foo\\\\\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // without escape: matches foo??bar, fooCDbar, foo*bar, and fooSOMETHINGbar\n    WildcardQuery unescaped = new WildcardQuery(new Term(\"field\", \"foo*bar\"));\n    assertMatches(searcher, unescaped, 4);\n    \n    // with escape: only matches foo*bar\n    WildcardQuery escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\*bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // without escape: matches foo??bar and fooCDbar\n    unescaped = new WildcardQuery(new Term(\"field\", \"foo??bar\"));\n    assertMatches(searcher, unescaped, 2);\n    \n    // with escape: matches foo??bar only\n    escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\?\\\\?bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // check escaping at end: lenient parse yields \"foo\\\"\n    WildcardQuery atEnd = new WildcardQuery(new Term(\"field\", \"foo\\\\\"));\n    assertMatches(searcher, atEnd, 1);\n    \n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","sourceNew":"  /**\n   * Tests if wildcard escaping works\n   */\n  public void testEscapes() throws Exception {\n    Directory indexStore = getIndexStore(\"field\", \n        new String[]{\"foo*bar\", \"foo??bar\", \"fooCDbar\", \"fooSOMETHINGbar\", \"foo\\\\\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // without escape: matches foo??bar, fooCDbar, foo*bar, and fooSOMETHINGbar\n    WildcardQuery unescaped = new WildcardQuery(new Term(\"field\", \"foo*bar\"));\n    assertMatches(searcher, unescaped, 4);\n    \n    // with escape: only matches foo*bar\n    WildcardQuery escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\*bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // without escape: matches foo??bar and fooCDbar\n    unescaped = new WildcardQuery(new Term(\"field\", \"foo??bar\"));\n    assertMatches(searcher, unescaped, 2);\n    \n    // with escape: matches foo??bar only\n    escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\?\\\\?bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // check escaping at end: lenient parse yields \"foo\\\"\n    WildcardQuery atEnd = new WildcardQuery(new Term(\"field\", \"foo\\\\\"));\n    assertMatches(searcher, atEnd, 1);\n    \n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if wildcard escaping works\n   */\n  public void testEscapes() throws Exception {\n    Directory indexStore = getIndexStore(\"field\", \n        new String[]{\"foo*bar\", \"foo??bar\", \"fooCDbar\", \"fooSOMETHINGbar\", \"foo\\\\\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // without escape: matches foo??bar, fooCDbar, foo*bar, and fooSOMETHINGbar\n    WildcardQuery unescaped = new WildcardQuery(new Term(\"field\", \"foo*bar\"));\n    assertMatches(searcher, unescaped, 4);\n    \n    // with escape: only matches foo*bar\n    WildcardQuery escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\*bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // without escape: matches foo??bar and fooCDbar\n    unescaped = new WildcardQuery(new Term(\"field\", \"foo??bar\"));\n    assertMatches(searcher, unescaped, 2);\n    \n    // with escape: matches foo??bar only\n    escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\?\\\\?bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // check escaping at end: lenient parse yields \"foo\\\"\n    WildcardQuery atEnd = new WildcardQuery(new Term(\"field\", \"foo\\\\\"));\n    assertMatches(searcher, atEnd, 1);\n    \n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","sourceNew":"  /**\n   * Tests if wildcard escaping works\n   */\n  public void testEscapes() throws Exception {\n    Directory indexStore = getIndexStore(\"field\", \n        new String[]{\"foo*bar\", \"foo??bar\", \"fooCDbar\", \"fooSOMETHINGbar\", \"foo\\\\\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // without escape: matches foo??bar, fooCDbar, foo*bar, and fooSOMETHINGbar\n    WildcardQuery unescaped = new WildcardQuery(new Term(\"field\", \"foo*bar\"));\n    assertMatches(searcher, unescaped, 4);\n    \n    // with escape: only matches foo*bar\n    WildcardQuery escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\*bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // without escape: matches foo??bar and fooCDbar\n    unescaped = new WildcardQuery(new Term(\"field\", \"foo??bar\"));\n    assertMatches(searcher, unescaped, 2);\n    \n    // with escape: matches foo??bar only\n    escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\?\\\\?bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // check escaping at end: lenient parse yields \"foo\\\"\n    WildcardQuery atEnd = new WildcardQuery(new Term(\"field\", \"foo\\\\\"));\n    assertMatches(searcher, atEnd, 1);\n    \n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if wildcard escaping works\n   */\n  public void testEscapes() throws Exception {\n    Directory indexStore = getIndexStore(\"field\", \n        new String[]{\"foo*bar\", \"foo??bar\", \"fooCDbar\", \"fooSOMETHINGbar\", \"foo\\\\\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // without escape: matches foo??bar, fooCDbar, foo*bar, and fooSOMETHINGbar\n    WildcardQuery unescaped = new WildcardQuery(new Term(\"field\", \"foo*bar\"));\n    assertMatches(searcher, unescaped, 4);\n    \n    // with escape: only matches foo*bar\n    WildcardQuery escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\*bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // without escape: matches foo??bar and fooCDbar\n    unescaped = new WildcardQuery(new Term(\"field\", \"foo??bar\"));\n    assertMatches(searcher, unescaped, 2);\n    \n    // with escape: matches foo??bar only\n    escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\?\\\\?bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // check escaping at end: lenient parse yields \"foo\\\"\n    WildcardQuery atEnd = new WildcardQuery(new Term(\"field\", \"foo\\\\\"));\n    assertMatches(searcher, atEnd, 1);\n    \n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","sourceNew":"  /**\n   * Tests if wildcard escaping works\n   */\n  public void testEscapes() throws Exception {\n    Directory indexStore = getIndexStore(\"field\", \n        new String[]{\"foo*bar\", \"foo??bar\", \"fooCDbar\", \"fooSOMETHINGbar\", \"foo\\\\\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // without escape: matches foo??bar, fooCDbar, foo*bar, and fooSOMETHINGbar\n    WildcardQuery unescaped = new WildcardQuery(new Term(\"field\", \"foo*bar\"));\n    assertMatches(searcher, unescaped, 4);\n    \n    // with escape: only matches foo*bar\n    WildcardQuery escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\*bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // without escape: matches foo??bar and fooCDbar\n    unescaped = new WildcardQuery(new Term(\"field\", \"foo??bar\"));\n    assertMatches(searcher, unescaped, 2);\n    \n    // with escape: matches foo??bar only\n    escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\?\\\\?bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // check escaping at end: lenient parse yields \"foo\\\"\n    WildcardQuery atEnd = new WildcardQuery(new Term(\"field\", \"foo\\\\\"));\n    assertMatches(searcher, atEnd, 1);\n    \n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if wildcard escaping works\n   */\n  public void testEscapes() throws Exception {\n    Directory indexStore = getIndexStore(\"field\", \n        new String[]{\"foo*bar\", \"foo??bar\", \"fooCDbar\", \"fooSOMETHINGbar\", \"foo\\\\\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // without escape: matches foo??bar, fooCDbar, foo*bar, and fooSOMETHINGbar\n    WildcardQuery unescaped = new WildcardQuery(new Term(\"field\", \"foo*bar\"));\n    assertMatches(searcher, unescaped, 4);\n    \n    // with escape: only matches foo*bar\n    WildcardQuery escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\*bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // without escape: matches foo??bar and fooCDbar\n    unescaped = new WildcardQuery(new Term(\"field\", \"foo??bar\"));\n    assertMatches(searcher, unescaped, 2);\n    \n    // with escape: matches foo??bar only\n    escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\?\\\\?bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // check escaping at end: lenient parse yields \"foo\\\"\n    WildcardQuery atEnd = new WildcardQuery(new Term(\"field\", \"foo\\\\\"));\n    assertMatches(searcher, atEnd, 1);\n    \n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","sourceNew":"  /**\n   * Tests if wildcard escaping works\n   */\n  public void testEscapes() throws Exception {\n    Directory indexStore = getIndexStore(\"field\", \n        new String[]{\"foo*bar\", \"foo??bar\", \"fooCDbar\", \"fooSOMETHINGbar\", \"foo\\\\\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // without escape: matches foo??bar, fooCDbar, foo*bar, and fooSOMETHINGbar\n    WildcardQuery unescaped = new WildcardQuery(new Term(\"field\", \"foo*bar\"));\n    assertMatches(searcher, unescaped, 4);\n    \n    // with escape: only matches foo*bar\n    WildcardQuery escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\*bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // without escape: matches foo??bar and fooCDbar\n    unescaped = new WildcardQuery(new Term(\"field\", \"foo??bar\"));\n    assertMatches(searcher, unescaped, 2);\n    \n    // with escape: matches foo??bar only\n    escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\?\\\\?bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // check escaping at end: lenient parse yields \"foo\\\"\n    WildcardQuery atEnd = new WildcardQuery(new Term(\"field\", \"foo\\\\\"));\n    assertMatches(searcher, atEnd, 1);\n    \n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if wildcard escaping works\n   */\n  public void testEscapes() throws Exception {\n    Directory indexStore = getIndexStore(\"field\", \n        new String[]{\"foo*bar\", \"foo??bar\", \"fooCDbar\", \"fooSOMETHINGbar\", \"foo\\\\\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // without escape: matches foo??bar, fooCDbar, foo*bar, and fooSOMETHINGbar\n    WildcardQuery unescaped = new WildcardQuery(new Term(\"field\", \"foo*bar\"));\n    assertMatches(searcher, unescaped, 4);\n    \n    // with escape: only matches foo*bar\n    WildcardQuery escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\*bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // without escape: matches foo??bar and fooCDbar\n    unescaped = new WildcardQuery(new Term(\"field\", \"foo??bar\"));\n    assertMatches(searcher, unescaped, 2);\n    \n    // with escape: matches foo??bar only\n    escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\?\\\\?bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // check escaping at end: lenient parse yields \"foo\\\"\n    WildcardQuery atEnd = new WildcardQuery(new Term(\"field\", \"foo\\\\\"));\n    assertMatches(searcher, atEnd, 1);\n    \n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["02f9424edb9eccc558626693e4a4cd43f8ce2622"],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","02f9424edb9eccc558626693e4a4cd43f8ce2622","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"85a883878c0af761245ab048babc63d099f835f3":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["85a883878c0af761245ab048babc63d099f835f3","a3a0403b45dfe384fae4a1b6e96c3265d000c498","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}