{"path":"solr/core/src/test/org/apache/solr/cloud/CloudTestUtils#waitForTriggerToBeScheduled(SolrCloudManager,String).mjava","commits":[{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudTestUtils#waitForTriggerToBeScheduled(SolrCloudManager,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wait for a particular named trigger to be scheduled.\n   * <p>\n   * This is a convenience method that polls the autoscaling API looking for a trigger with the \n   * specified name using the {@link #DEFAULT_TIMEOUT}.  It is particularly useful for tests \n   * that want to know when the Overseer has finished scheduling the automatic triggers on startup.\n   * </p>\n   *\n   * @param cloudManager current instance of {@link SolrCloudManager}\n   * @param triggerName the name of the trigger we need to see sheduled in order to return successfully\n   */\n  public static long waitForTriggerToBeScheduled(final SolrCloudManager cloudManager,\n                                                 final String triggerName)\n    throws InterruptedException, TimeoutException, IOException {\n\n    TimeOut timeout = new TimeOut(DEFAULT_TIMEOUT, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (!timeout.hasTimedOut()) {\n      final SolrResponse response = cloudManager.request(AutoScalingRequest.create(SolrRequest.METHOD.GET, null));\n      final Map<String,?> triggers = (Map<String,?>) response.getResponse().get(\"triggers\");\n      Assert.assertNotNull(\"null triggers in response from autoscaling request\", triggers);\n      \n      if ( triggers.containsKey(triggerName) ) {\n        return timeout.timeElapsed(TimeUnit.MILLISECONDS);\n      }\n      timeout.sleep(100);\n    }\n    throw new TimeoutException(\"Never saw trigger with name: \" + triggerName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"914270355efc1f9583010cb165bb031a1e698f84","date":1546908784,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudTestUtils#waitForTriggerToBeScheduled(SolrCloudManager,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudTestUtils#waitForTriggerToBeScheduled(SolrCloudManager,String).mjava","sourceNew":"  /**\n   * Wait for a particular named trigger to be scheduled.\n   * <p>\n   * This is a convenience method that polls the autoscaling API looking for a trigger with the \n   * specified name using the {@link #DEFAULT_TIMEOUT}.  It is particularly useful for tests \n   * that want to know when the Overseer has finished scheduling the automatic triggers on startup.\n   * </p>\n   *\n   * @param cloudManager current instance of {@link SolrCloudManager}\n   * @param triggerName the name of the trigger we need to see sheduled in order to return successfully\n   * @see #suspendTrigger\n   */\n  public static long waitForTriggerToBeScheduled(final SolrCloudManager cloudManager,\n                                                 final String triggerName)\n    throws InterruptedException, TimeoutException, IOException {\n\n    TimeOut timeout = new TimeOut(DEFAULT_TIMEOUT, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (!timeout.hasTimedOut()) {\n      final SolrResponse response = cloudManager.request(AutoScalingRequest.create(SolrRequest.METHOD.GET, null));\n      final Map<String,?> triggers = (Map<String,?>) response.getResponse().get(\"triggers\");\n      Assert.assertNotNull(\"null triggers in response from autoscaling request\", triggers);\n      \n      if ( triggers.containsKey(triggerName) ) {\n        return timeout.timeElapsed(TimeUnit.MILLISECONDS);\n      }\n      timeout.sleep(100);\n    }\n    throw new TimeoutException(\"Never saw trigger with name: \" + triggerName);\n  }\n\n","sourceOld":"  /**\n   * Wait for a particular named trigger to be scheduled.\n   * <p>\n   * This is a convenience method that polls the autoscaling API looking for a trigger with the \n   * specified name using the {@link #DEFAULT_TIMEOUT}.  It is particularly useful for tests \n   * that want to know when the Overseer has finished scheduling the automatic triggers on startup.\n   * </p>\n   *\n   * @param cloudManager current instance of {@link SolrCloudManager}\n   * @param triggerName the name of the trigger we need to see sheduled in order to return successfully\n   */\n  public static long waitForTriggerToBeScheduled(final SolrCloudManager cloudManager,\n                                                 final String triggerName)\n    throws InterruptedException, TimeoutException, IOException {\n\n    TimeOut timeout = new TimeOut(DEFAULT_TIMEOUT, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (!timeout.hasTimedOut()) {\n      final SolrResponse response = cloudManager.request(AutoScalingRequest.create(SolrRequest.METHOD.GET, null));\n      final Map<String,?> triggers = (Map<String,?>) response.getResponse().get(\"triggers\");\n      Assert.assertNotNull(\"null triggers in response from autoscaling request\", triggers);\n      \n      if ( triggers.containsKey(triggerName) ) {\n        return timeout.timeElapsed(TimeUnit.MILLISECONDS);\n      }\n      timeout.sleep(100);\n    }\n    throw new TimeoutException(\"Never saw trigger with name: \" + triggerName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudTestUtils#waitForTriggerToBeScheduled(SolrCloudManager,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudTestUtils#waitForTriggerToBeScheduled(SolrCloudManager,String).mjava","sourceNew":"  /**\n   * Wait for a particular named trigger to be scheduled.\n   * <p>\n   * This is a convenience method that polls the autoscaling API looking for a trigger with the \n   * specified name using the {@link #DEFAULT_TIMEOUT}.  It is particularly useful for tests \n   * that want to know when the Overseer has finished scheduling the automatic triggers on startup.\n   * </p>\n   *\n   * @param cloudManager current instance of {@link SolrCloudManager}\n   * @param triggerName the name of the trigger we need to see sheduled in order to return successfully\n   * @see #suspendTrigger\n   */\n  public static long waitForTriggerToBeScheduled(final SolrCloudManager cloudManager,\n                                                 final String triggerName)\n    throws InterruptedException, TimeoutException, IOException {\n\n    TimeOut timeout = new TimeOut(DEFAULT_TIMEOUT, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (!timeout.hasTimedOut()) {\n      final SolrResponse response = cloudManager.request(AutoScalingRequest.create(SolrRequest.METHOD.GET, null));\n      @SuppressWarnings({\"unchecked\"})\n      final Map<String,?> triggers = (Map<String,?>) response.getResponse().get(\"triggers\");\n      Assert.assertNotNull(\"null triggers in response from autoscaling request\", triggers);\n      \n      if ( triggers.containsKey(triggerName) ) {\n        return timeout.timeElapsed(TimeUnit.MILLISECONDS);\n      }\n      timeout.sleep(100);\n    }\n    throw new TimeoutException(\"Never saw trigger with name: \" + triggerName);\n  }\n\n","sourceOld":"  /**\n   * Wait for a particular named trigger to be scheduled.\n   * <p>\n   * This is a convenience method that polls the autoscaling API looking for a trigger with the \n   * specified name using the {@link #DEFAULT_TIMEOUT}.  It is particularly useful for tests \n   * that want to know when the Overseer has finished scheduling the automatic triggers on startup.\n   * </p>\n   *\n   * @param cloudManager current instance of {@link SolrCloudManager}\n   * @param triggerName the name of the trigger we need to see sheduled in order to return successfully\n   * @see #suspendTrigger\n   */\n  public static long waitForTriggerToBeScheduled(final SolrCloudManager cloudManager,\n                                                 final String triggerName)\n    throws InterruptedException, TimeoutException, IOException {\n\n    TimeOut timeout = new TimeOut(DEFAULT_TIMEOUT, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (!timeout.hasTimedOut()) {\n      final SolrResponse response = cloudManager.request(AutoScalingRequest.create(SolrRequest.METHOD.GET, null));\n      final Map<String,?> triggers = (Map<String,?>) response.getResponse().get(\"triggers\");\n      Assert.assertNotNull(\"null triggers in response from autoscaling request\", triggers);\n      \n      if ( triggers.containsKey(triggerName) ) {\n        return timeout.timeElapsed(TimeUnit.MILLISECONDS);\n      }\n      timeout.sleep(100);\n    }\n    throw new TimeoutException(\"Never saw trigger with name: \" + triggerName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudTestUtils#waitForTriggerToBeScheduled(SolrCloudManager,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Wait for a particular named trigger to be scheduled.\n   * <p>\n   * This is a convenience method that polls the autoscaling API looking for a trigger with the \n   * specified name using the {@link #DEFAULT_TIMEOUT}.  It is particularly useful for tests \n   * that want to know when the Overseer has finished scheduling the automatic triggers on startup.\n   * </p>\n   *\n   * @param cloudManager current instance of {@link SolrCloudManager}\n   * @param triggerName the name of the trigger we need to see sheduled in order to return successfully\n   * @see #suspendTrigger\n   */\n  public static long waitForTriggerToBeScheduled(final SolrCloudManager cloudManager,\n                                                 final String triggerName)\n    throws InterruptedException, TimeoutException, IOException {\n\n    TimeOut timeout = new TimeOut(DEFAULT_TIMEOUT, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (!timeout.hasTimedOut()) {\n      final SolrResponse response = cloudManager.request(AutoScalingRequest.create(SolrRequest.METHOD.GET, null));\n      @SuppressWarnings({\"unchecked\"})\n      final Map<String,?> triggers = (Map<String,?>) response.getResponse().get(\"triggers\");\n      Assert.assertNotNull(\"null triggers in response from autoscaling request\", triggers);\n      \n      if ( triggers.containsKey(triggerName) ) {\n        return timeout.timeElapsed(TimeUnit.MILLISECONDS);\n      }\n      timeout.sleep(100);\n    }\n    throw new TimeoutException(\"Never saw trigger with name: \" + triggerName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"914270355efc1f9583010cb165bb031a1e698f84":["89948af0461fead48f44ba8fb7866f107ce83f22"],"3f504512a03d978990cbff30db0522b354e846db":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89948af0461fead48f44ba8fb7866f107ce83f22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"e98520789adb1d5ad05afb4956eca0944a929688":["914270355efc1f9583010cb165bb031a1e698f84"]},"commit2Childs":{"914270355efc1f9583010cb165bb031a1e698f84":["e98520789adb1d5ad05afb4956eca0944a929688"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89948af0461fead48f44ba8fb7866f107ce83f22"],"89948af0461fead48f44ba8fb7866f107ce83f22":["914270355efc1f9583010cb165bb031a1e698f84"],"e98520789adb1d5ad05afb4956eca0944a929688":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}