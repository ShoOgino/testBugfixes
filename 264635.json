{"path":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testPhraseQueryPositionIncrements().mjava","commits":[{"id":"c1c1dd5dce93e4fa48898dabc7e012560acda425","date":1381334364,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testPhraseQueryPositionIncrements().mjava","pathOld":"/dev/null","sourceNew":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    PhraseQuery expected = new PhraseQuery();\n    expected.add(new Term(\"field\", \"1\"));\n    expected.add(new Term(\"field\", \"2\"), 2);\n    \n    CharacterRunAutomaton stopList = new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopList);\n\n    QueryBuilder builder = new QueryBuilder(analyzer);\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"1 stop 2\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testPhraseQueryPositionIncrements().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testPhraseQueryPositionIncrements().mjava","sourceNew":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    PhraseQuery expected = new PhraseQuery();\n    expected.add(new Term(\"field\", \"1\"));\n    expected.add(new Term(\"field\", \"2\"), 2);\n    \n    CharacterRunAutomaton stopList = new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toLightAutomaton());\n\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopList);\n\n    QueryBuilder builder = new QueryBuilder(analyzer);\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"1 stop 2\"));\n  }\n\n","sourceOld":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    PhraseQuery expected = new PhraseQuery();\n    expected.add(new Term(\"field\", \"1\"));\n    expected.add(new Term(\"field\", \"2\"), 2);\n    \n    CharacterRunAutomaton stopList = new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopList);\n\n    QueryBuilder builder = new QueryBuilder(analyzer);\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"1 stop 2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testPhraseQueryPositionIncrements().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testPhraseQueryPositionIncrements().mjava","sourceNew":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    PhraseQuery expected = new PhraseQuery();\n    expected.add(new Term(\"field\", \"1\"));\n    expected.add(new Term(\"field\", \"2\"), 2);\n    \n    CharacterRunAutomaton stopList = new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopList);\n\n    QueryBuilder builder = new QueryBuilder(analyzer);\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"1 stop 2\"));\n  }\n\n","sourceOld":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    PhraseQuery expected = new PhraseQuery();\n    expected.add(new Term(\"field\", \"1\"));\n    expected.add(new Term(\"field\", \"2\"), 2);\n    \n    CharacterRunAutomaton stopList = new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toLightAutomaton());\n\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopList);\n\n    QueryBuilder builder = new QueryBuilder(analyzer);\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"1 stop 2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testPhraseQueryPositionIncrements().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testPhraseQueryPositionIncrements().mjava","sourceNew":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    PhraseQuery.Builder pqBuilder = new PhraseQuery.Builder();\n    pqBuilder.add(new Term(\"field\", \"1\"), 0);\n    pqBuilder.add(new Term(\"field\", \"2\"), 2);\n    PhraseQuery expected = pqBuilder.build();\n    CharacterRunAutomaton stopList = new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopList);\n\n    QueryBuilder builder = new QueryBuilder(analyzer);\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"1 stop 2\"));\n  }\n\n","sourceOld":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    PhraseQuery expected = new PhraseQuery();\n    expected.add(new Term(\"field\", \"1\"));\n    expected.add(new Term(\"field\", \"2\"), 2);\n    \n    CharacterRunAutomaton stopList = new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopList);\n\n    QueryBuilder builder = new QueryBuilder(analyzer);\n    assertEquals(expected, builder.createPhraseQuery(\"field\", \"1 stop 2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9e1499c5d26c936238506df90a3c02c76707722":["c1c1dd5dce93e4fa48898dabc7e012560acda425"],"c1c1dd5dce93e4fa48898dabc7e012560acda425":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["c1c1dd5dce93e4fa48898dabc7e012560acda425"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9e1499c5d26c936238506df90a3c02c76707722"]},"commit2Childs":{"e9e1499c5d26c936238506df90a3c02c76707722":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1c1dd5dce93e4fa48898dabc7e012560acda425":["e9e1499c5d26c936238506df90a3c02c76707722","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1c1dd5dce93e4fa48898dabc7e012560acda425"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}