{"path":"lucene/backwards/src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","sourceNew":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n\n    if (vectors != null) {\n      final int numFields = vectors.length;\n      tvd.writeVInt(numFields);\n\n      long[] fieldPointers = new long[numFields];\n\n      for (int i=0; i<numFields; i++) {\n        fieldPointers[i] = tvf.getFilePointer();\n\n        final int fieldNumber = fieldInfos.fieldNumber(vectors[i].getField());\n\n        // 1st pass: write field numbers to tvd\n        tvd.writeVInt(fieldNumber);\n\n        final int numTerms = vectors[i].size();\n        tvf.writeVInt(numTerms);\n\n        final TermPositionVector tpVector;\n\n        final byte bits;\n        final boolean storePositions;\n        final boolean storeOffsets;\n\n        if (vectors[i] instanceof TermPositionVector) {\n          // May have positions & offsets\n          tpVector = (TermPositionVector) vectors[i];\n          storePositions = tpVector.size() > 0 && tpVector.getTermPositions(0) != null;\n          storeOffsets = tpVector.size() > 0 && tpVector.getOffsets(0) != null;\n          bits = (byte) ((storePositions ? TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR : 0) +\n                         (storeOffsets ? TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR : 0));\n        } else {\n          tpVector = null;\n          bits = 0;\n          storePositions = false;\n          storeOffsets = false;\n        }\n\n        tvf.writeVInt(bits);\n\n        final String[] terms = vectors[i].getTerms();\n        final int[] freqs = vectors[i].getTermFrequencies();\n\n        int utf8Upto = 0;\n        utf8Results[1].length = 0;\n\n        for (int j=0; j<numTerms; j++) {\n\n          UnicodeUtil.UTF16toUTF8(terms[j], 0, terms[j].length(), utf8Results[utf8Upto]);\n          \n          int start = StringHelper.bytesDifference(utf8Results[1-utf8Upto].result,\n                                                   utf8Results[1-utf8Upto].length,\n                                                   utf8Results[utf8Upto].result,\n                                                   utf8Results[utf8Upto].length);\n          int length = utf8Results[utf8Upto].length - start;\n          tvf.writeVInt(start);       // write shared prefix length\n          tvf.writeVInt(length);        // write delta length\n          tvf.writeBytes(utf8Results[utf8Upto].result, start, length);  // write delta bytes\n          utf8Upto = 1-utf8Upto;\n\n          final int termFreq = freqs[j];\n\n          tvf.writeVInt(termFreq);\n\n          if (storePositions) {\n            final int[] positions = tpVector.getTermPositions(j);\n            if (positions == null)\n              throw new IllegalStateException(\"Trying to write positions that are null!\");\n            assert positions.length == termFreq;\n\n            // use delta encoding for positions\n            int lastPosition = 0;\n            for(int k=0;k<positions.length;k++) {\n              final int position = positions[k];\n              tvf.writeVInt(position-lastPosition);\n              lastPosition = position;\n            }\n          }\n\n          if (storeOffsets) {\n            final TermVectorOffsetInfo[] offsets = tpVector.getOffsets(j);\n            if (offsets == null)\n              throw new IllegalStateException(\"Trying to write offsets that are null!\");\n            assert offsets.length == termFreq;\n\n            // use delta encoding for offsets\n            int lastEndOffset = 0;\n            for(int k=0;k<offsets.length;k++) {\n              final int startOffset = offsets[k].getStartOffset();\n              final int endOffset = offsets[k].getEndOffset();\n              tvf.writeVInt(startOffset-lastEndOffset);\n              tvf.writeVInt(endOffset-startOffset);\n              lastEndOffset = endOffset;\n            }\n          }\n        }\n      }\n\n      // 2nd pass: write field pointers to tvd\n      if (numFields > 1) {\n        long lastFieldPointer = fieldPointers[0];\n        for (int i=1; i<numFields; i++) {\n          final long fieldPointer = fieldPointers[i];\n          tvd.writeVLong(fieldPointer-lastFieldPointer);\n          lastFieldPointer = fieldPointer;\n        }\n      }\n    } else\n      tvd.writeVInt(0);\n  }\n\n","sourceOld":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n\n    if (vectors != null) {\n      final int numFields = vectors.length;\n      tvd.writeVInt(numFields);\n\n      long[] fieldPointers = new long[numFields];\n\n      for (int i=0; i<numFields; i++) {\n        fieldPointers[i] = tvf.getFilePointer();\n\n        final int fieldNumber = fieldInfos.fieldNumber(vectors[i].getField());\n\n        // 1st pass: write field numbers to tvd\n        tvd.writeVInt(fieldNumber);\n\n        final int numTerms = vectors[i].size();\n        tvf.writeVInt(numTerms);\n\n        final TermPositionVector tpVector;\n\n        final byte bits;\n        final boolean storePositions;\n        final boolean storeOffsets;\n\n        if (vectors[i] instanceof TermPositionVector) {\n          // May have positions & offsets\n          tpVector = (TermPositionVector) vectors[i];\n          storePositions = tpVector.size() > 0 && tpVector.getTermPositions(0) != null;\n          storeOffsets = tpVector.size() > 0 && tpVector.getOffsets(0) != null;\n          bits = (byte) ((storePositions ? TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR : 0) +\n                         (storeOffsets ? TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR : 0));\n        } else {\n          tpVector = null;\n          bits = 0;\n          storePositions = false;\n          storeOffsets = false;\n        }\n\n        tvf.writeVInt(bits);\n\n        final String[] terms = vectors[i].getTerms();\n        final int[] freqs = vectors[i].getTermFrequencies();\n\n        int utf8Upto = 0;\n        utf8Results[1].length = 0;\n\n        for (int j=0; j<numTerms; j++) {\n\n          UnicodeUtil.UTF16toUTF8(terms[j], 0, terms[j].length(), utf8Results[utf8Upto]);\n          \n          int start = StringHelper.bytesDifference(utf8Results[1-utf8Upto].result,\n                                                   utf8Results[1-utf8Upto].length,\n                                                   utf8Results[utf8Upto].result,\n                                                   utf8Results[utf8Upto].length);\n          int length = utf8Results[utf8Upto].length - start;\n          tvf.writeVInt(start);       // write shared prefix length\n          tvf.writeVInt(length);        // write delta length\n          tvf.writeBytes(utf8Results[utf8Upto].result, start, length);  // write delta bytes\n          utf8Upto = 1-utf8Upto;\n\n          final int termFreq = freqs[j];\n\n          tvf.writeVInt(termFreq);\n\n          if (storePositions) {\n            final int[] positions = tpVector.getTermPositions(j);\n            if (positions == null)\n              throw new IllegalStateException(\"Trying to write positions that are null!\");\n            assert positions.length == termFreq;\n\n            // use delta encoding for positions\n            int lastPosition = 0;\n            for(int k=0;k<positions.length;k++) {\n              final int position = positions[k];\n              tvf.writeVInt(position-lastPosition);\n              lastPosition = position;\n            }\n          }\n\n          if (storeOffsets) {\n            final TermVectorOffsetInfo[] offsets = tpVector.getOffsets(j);\n            if (offsets == null)\n              throw new IllegalStateException(\"Trying to write offsets that are null!\");\n            assert offsets.length == termFreq;\n\n            // use delta encoding for offsets\n            int lastEndOffset = 0;\n            for(int k=0;k<offsets.length;k++) {\n              final int startOffset = offsets[k].getStartOffset();\n              final int endOffset = offsets[k].getEndOffset();\n              tvf.writeVInt(startOffset-lastEndOffset);\n              tvf.writeVInt(endOffset-startOffset);\n              lastEndOffset = endOffset;\n            }\n          }\n        }\n      }\n\n      // 2nd pass: write field pointers to tvd\n      if (numFields > 1) {\n        long lastFieldPointer = fieldPointers[0];\n        for (int i=1; i<numFields; i++) {\n          final long fieldPointer = fieldPointers[i];\n          tvd.writeVLong(fieldPointer-lastFieldPointer);\n          lastFieldPointer = fieldPointer;\n        }\n      }\n    } else\n      tvd.writeVInt(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/TermVectorsWriter#addAllDocVectors(TermFreqVector[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add a complete document specified by all its term vectors. If document has no\n   * term vectors, add value for tvx.\n   * \n   * @param vectors\n   * @throws IOException\n   */\n  public final void addAllDocVectors(TermFreqVector[] vectors)\n      throws IOException {\n\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n\n    if (vectors != null) {\n      final int numFields = vectors.length;\n      tvd.writeVInt(numFields);\n\n      long[] fieldPointers = new long[numFields];\n\n      for (int i=0; i<numFields; i++) {\n        fieldPointers[i] = tvf.getFilePointer();\n\n        final int fieldNumber = fieldInfos.fieldNumber(vectors[i].getField());\n\n        // 1st pass: write field numbers to tvd\n        tvd.writeVInt(fieldNumber);\n\n        final int numTerms = vectors[i].size();\n        tvf.writeVInt(numTerms);\n\n        final TermPositionVector tpVector;\n\n        final byte bits;\n        final boolean storePositions;\n        final boolean storeOffsets;\n\n        if (vectors[i] instanceof TermPositionVector) {\n          // May have positions & offsets\n          tpVector = (TermPositionVector) vectors[i];\n          storePositions = tpVector.size() > 0 && tpVector.getTermPositions(0) != null;\n          storeOffsets = tpVector.size() > 0 && tpVector.getOffsets(0) != null;\n          bits = (byte) ((storePositions ? TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR : 0) +\n                         (storeOffsets ? TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR : 0));\n        } else {\n          tpVector = null;\n          bits = 0;\n          storePositions = false;\n          storeOffsets = false;\n        }\n\n        tvf.writeVInt(bits);\n\n        final String[] terms = vectors[i].getTerms();\n        final int[] freqs = vectors[i].getTermFrequencies();\n\n        int utf8Upto = 0;\n        utf8Results[1].length = 0;\n\n        for (int j=0; j<numTerms; j++) {\n\n          UnicodeUtil.UTF16toUTF8(terms[j], 0, terms[j].length(), utf8Results[utf8Upto]);\n          \n          int start = StringHelper.bytesDifference(utf8Results[1-utf8Upto].result,\n                                                   utf8Results[1-utf8Upto].length,\n                                                   utf8Results[utf8Upto].result,\n                                                   utf8Results[utf8Upto].length);\n          int length = utf8Results[utf8Upto].length - start;\n          tvf.writeVInt(start);       // write shared prefix length\n          tvf.writeVInt(length);        // write delta length\n          tvf.writeBytes(utf8Results[utf8Upto].result, start, length);  // write delta bytes\n          utf8Upto = 1-utf8Upto;\n\n          final int termFreq = freqs[j];\n\n          tvf.writeVInt(termFreq);\n\n          if (storePositions) {\n            final int[] positions = tpVector.getTermPositions(j);\n            if (positions == null)\n              throw new IllegalStateException(\"Trying to write positions that are null!\");\n            assert positions.length == termFreq;\n\n            // use delta encoding for positions\n            int lastPosition = 0;\n            for(int k=0;k<positions.length;k++) {\n              final int position = positions[k];\n              tvf.writeVInt(position-lastPosition);\n              lastPosition = position;\n            }\n          }\n\n          if (storeOffsets) {\n            final TermVectorOffsetInfo[] offsets = tpVector.getOffsets(j);\n            if (offsets == null)\n              throw new IllegalStateException(\"Trying to write offsets that are null!\");\n            assert offsets.length == termFreq;\n\n            // use delta encoding for offsets\n            int lastEndOffset = 0;\n            for(int k=0;k<offsets.length;k++) {\n              final int startOffset = offsets[k].getStartOffset();\n              final int endOffset = offsets[k].getEndOffset();\n              tvf.writeVInt(startOffset-lastEndOffset);\n              tvf.writeVInt(endOffset-startOffset);\n              lastEndOffset = endOffset;\n            }\n          }\n        }\n      }\n\n      // 2nd pass: write field pointers to tvd\n      if (numFields > 1) {\n        long lastFieldPointer = fieldPointers[0];\n        for (int i=1; i<numFields; i++) {\n          final long fieldPointer = fieldPointers[i];\n          tvd.writeVLong(fieldPointer-lastFieldPointer);\n          lastFieldPointer = fieldPointer;\n        }\n      }\n    } else\n      tvd.writeVInt(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}