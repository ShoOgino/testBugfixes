{"path":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#lessThan(Object,Object).mjava","commits":[{"id":"c6691cb6747f9e850337c706c06b92e9ddf816e1","date":1077044431,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#lessThan(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Returns whether <code>a</code> is less relevant than <code>b</code>.\n\t * @param a ScoreDoc\n\t * @param b ScoreDoc\n\t * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.\n\t */\n\tprotected final boolean lessThan (final Object a, final Object b) {\n\t\tfinal ScoreDoc docA = (ScoreDoc) a;\n\t\tfinal ScoreDoc docB = (ScoreDoc) b;\n\t\tfinal int n = comparators.length;\n\t\tint c = 0;\n\t\tfor (int i=0; i<n && c==0; ++i) {\n\t\t\tc = (fields[i].reverse) ? comparators[i].compareReverse (docA, docB)\n\t\t\t                        : comparators[i].compare (docA, docB);\n\t\t}\n\t\treturn c > 0;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b1460ee2827b26dc3a41a6c403bb5872f87ddaa","date":1080060596,"type":3,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#lessThan(Object,Object).mjava","pathOld":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#lessThan(Object,Object).mjava","sourceNew":"\t/**\n\t * Returns whether <code>a</code> is less relevant than <code>b</code>.\n\t * @param a ScoreDoc\n\t * @param b ScoreDoc\n\t * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.\n\t */\n\tprotected final boolean lessThan (final Object a, final Object b) {\n\t\tfinal ScoreDoc docA = (ScoreDoc) a;\n\t\tfinal ScoreDoc docB = (ScoreDoc) b;\n\n\t\t// keep track of maximum score\n\t\tif (docA.score > maxscore) maxscore = docA.score;\n\t\tif (docB.score > maxscore) maxscore = docB.score;\n\n\t\t// run comparators\n\t\tfinal int n = comparators.length;\n\t\tint c = 0;\n\t\tfor (int i=0; i<n && c==0; ++i) {\n\t\t\tc = (fields[i].reverse) ? comparators[i].compareReverse (docA, docB)\n\t\t\t                        : comparators[i].compare (docA, docB);\n\t\t}\n\t\treturn c > 0;\n\t}\n\n","sourceOld":"\t/**\n\t * Returns whether <code>a</code> is less relevant than <code>b</code>.\n\t * @param a ScoreDoc\n\t * @param b ScoreDoc\n\t * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.\n\t */\n\tprotected final boolean lessThan (final Object a, final Object b) {\n\t\tfinal ScoreDoc docA = (ScoreDoc) a;\n\t\tfinal ScoreDoc docB = (ScoreDoc) b;\n\t\tfinal int n = comparators.length;\n\t\tint c = 0;\n\t\tfor (int i=0; i<n && c==0; ++i) {\n\t\t\tc = (fields[i].reverse) ? comparators[i].compareReverse (docA, docB)\n\t\t\t                        : comparators[i].compare (docA, docB);\n\t\t}\n\t\treturn c > 0;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99ee715b9c02dd47d9e69a18607a5192c1ebd82b","date":1085007927,"type":4,"author":"Tim Jones","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#lessThan(Object,Object).mjava","sourceNew":null,"sourceOld":"\t/**\n\t * Returns whether <code>a</code> is less relevant than <code>b</code>.\n\t * @param a ScoreDoc\n\t * @param b ScoreDoc\n\t * @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.\n\t */\n\tprotected final boolean lessThan (final Object a, final Object b) {\n\t\tfinal ScoreDoc docA = (ScoreDoc) a;\n\t\tfinal ScoreDoc docB = (ScoreDoc) b;\n\n\t\t// keep track of maximum score\n\t\tif (docA.score > maxscore) maxscore = docA.score;\n\t\tif (docB.score > maxscore) maxscore = docB.score;\n\n\t\t// run comparators\n\t\tfinal int n = comparators.length;\n\t\tint c = 0;\n\t\tfor (int i=0; i<n && c==0; ++i) {\n\t\t\tc = (fields[i].reverse) ? comparators[i].compareReverse (docA, docB)\n\t\t\t                        : comparators[i].compare (docA, docB);\n\t\t}\n\t\treturn c > 0;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6691cb6747f9e850337c706c06b92e9ddf816e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["0b1460ee2827b26dc3a41a6c403bb5872f87ddaa"],"0b1460ee2827b26dc3a41a6c403bb5872f87ddaa":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"]},"commit2Childs":{"c6691cb6747f9e850337c706c06b92e9ddf816e1":["0b1460ee2827b26dc3a41a6c403bb5872f87ddaa"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0b1460ee2827b26dc3a41a6c403bb5872f87ddaa":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}