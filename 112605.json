{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ZkClientClusterStateProvider#buildZkHostString(Collection[String],String).mjava","commits":[{"id":"c9eee76c6a8ac63dd88a66571d553973ea0a1131","date":1480015269,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ZkClientClusterStateProvider#buildZkHostString(Collection[String],String).mjava","pathOld":"/dev/null","sourceNew":"  static String buildZkHostString(Collection<String> zkHosts, String chroot) {\n    if (zkHosts == null || zkHosts.isEmpty()) {\n      throw new IllegalArgumentException(\"Cannot create CloudSearchClient without valid ZooKeeper host; none specified!\");\n    }\n\n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n\n    /* Log the constructed connection string and then initialize. */\n    final String zkHostString = zkBuilder.toString();\n    log.debug(\"Final constructed zkHost string: \" + zkHostString);\n    return zkHostString;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ZkClientClusterStateProvider#buildZkHostString(Collection[String],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildZkHostString(Collection[String],String).mjava","sourceNew":"  static String buildZkHostString(Collection<String> zkHosts, String chroot) {\n    if (zkHosts == null || zkHosts.isEmpty()) {\n      throw new IllegalArgumentException(\"Cannot create CloudSearchClient without valid ZooKeeper host; none specified!\");\n    }\n\n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n\n    /* Log the constructed connection string and then initialize. */\n    final String zkHostString = zkBuilder.toString();\n    log.debug(\"Final constructed zkHost string: \" + zkHostString);\n    return zkHostString;\n  }\n\n","sourceOld":"  private static String buildZkHostString(Collection<String> zkHosts, String chroot) {\n    if (zkHosts == null || zkHosts.isEmpty()) {\n      throw new IllegalArgumentException(\"Cannot create CloudSearchClient without valid ZooKeeper host; none specified!\");\n    }\n    \n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n\n    /* Log the constructed connection string and then initialize. */\n    final String zkHostString = zkBuilder.toString();\n    log.debug(\"Final constructed zkHost string: \" + zkHostString);\n    return zkHostString;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ZkClientClusterStateProvider#buildZkHostString(Collection[String],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ZkClientClusterStateProvider#buildZkHostString(Collection[String],String).mjava","sourceNew":"  static String buildZkHostString(Collection<String> zkHosts, String chroot) {\n    if (zkHosts == null || zkHosts.isEmpty()) {\n      throw new IllegalArgumentException(\"Cannot create CloudSearchClient without valid ZooKeeper host; none specified!\");\n    }\n\n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n\n    /* Log the constructed connection string and then initialize. */\n    final String zkHostString = zkBuilder.toString();\n    log.debug(\"Final constructed zkHost string: {}\", zkHostString);\n    return zkHostString;\n  }\n\n","sourceOld":"  static String buildZkHostString(Collection<String> zkHosts, String chroot) {\n    if (zkHosts == null || zkHosts.isEmpty()) {\n      throw new IllegalArgumentException(\"Cannot create CloudSearchClient without valid ZooKeeper host; none specified!\");\n    }\n\n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n\n    /* Log the constructed connection string and then initialize. */\n    final String zkHostString = zkBuilder.toString();\n    log.debug(\"Final constructed zkHost string: \" + zkHostString);\n    return zkHostString;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["c9eee76c6a8ac63dd88a66571d553973ea0a1131"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c9eee76c6a8ac63dd88a66571d553973ea0a1131"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9eee76c6a8ac63dd88a66571d553973ea0a1131":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","c9eee76c6a8ac63dd88a66571d553973ea0a1131"],"c9eee76c6a8ac63dd88a66571d553973ea0a1131":["6dc613ed6f75d1988140301ee8de8fdb056fa337","727bb765ff2542275f6d31f67be18d7104bae148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}