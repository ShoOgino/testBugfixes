{"path":"lucene/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","pathOld":"/dev/null","sourceNew":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = BasicOperations.intersection(termsAutomaton, automaton);\n      TreeSet<BytesRef> found = new TreeSet<BytesRef>();\n      while (te.next() != null) {\n        found.add(new BytesRef(te.term()));\n      }\n      \n      Automaton actual = DaciukMihovAutomatonBuilder.build(found);     \n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","sourceNew":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = BasicOperations.intersection(termsAutomaton, automaton);\n      TreeSet<BytesRef> found = new TreeSet<BytesRef>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = DaciukMihovAutomatonBuilder.build(found);     \n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","sourceOld":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = BasicOperations.intersection(termsAutomaton, automaton);\n      TreeSet<BytesRef> found = new TreeSet<BytesRef>();\n      while (te.next() != null) {\n        found.add(new BytesRef(te.term()));\n      }\n      \n      Automaton actual = DaciukMihovAutomatonBuilder.build(found);     \n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","sourceNew":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = BasicOperations.intersection(termsAutomaton, automaton);\n      TreeSet<BytesRef> found = new TreeSet<BytesRef>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = DaciukMihovAutomatonBuilder.build(found);     \n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","sourceOld":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = BasicOperations.intersection(termsAutomaton, automaton);\n      TreeSet<BytesRef> found = new TreeSet<BytesRef>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = DaciukMihovAutomatonBuilder.build(found);     \n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6e919043fa85ee891123768dd655a98edbbf63c":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["e6e919043fa85ee891123768dd655a98edbbf63c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"e6e919043fa85ee891123768dd655a98edbbf63c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}