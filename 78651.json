{"path":"src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","commits":[{"id":"ce877199e67ce181d609aede33e85656c0cf48ab","date":1217829826,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"61\\\" width=\\\"142\\\" src=\\\"solr-head.gif\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form action='\");\n    out.write(request.getRequestURI());\n    out.write(\"' method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ef846ff83222161f1e2e5992132802d199ae716e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae4206fa7c08686107dcc684593ecda522512e62","date":1229996723,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form action='\");\n    out.write(request.getRequestURI());\n    out.write(\"' method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"61\\\" width=\\\"142\\\" src=\\\"solr-head.gif\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form action='\");\n    out.write(request.getRequestURI());\n    out.write(\"' method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef846ff83222161f1e2e5992132802d199ae716e","date":1242890259,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form action='\");\n    out.write(request.getRequestURI());\n    out.write(\"' method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":["ce877199e67ce181d609aede33e85656c0cf48ab"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ce877199e67ce181d609aede33e85656c0cf48ab":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ef846ff83222161f1e2e5992132802d199ae716e":["ae4206fa7c08686107dcc684593ecda522512e62"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ef846ff83222161f1e2e5992132802d199ae716e"],"ae4206fa7c08686107dcc684593ecda522512e62":["ce877199e67ce181d609aede33e85656c0cf48ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ce877199e67ce181d609aede33e85656c0cf48ab":["ae4206fa7c08686107dcc684593ecda522512e62"],"ef846ff83222161f1e2e5992132802d199ae716e":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ce877199e67ce181d609aede33e85656c0cf48ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae4206fa7c08686107dcc684593ecda522512e62":["ef846ff83222161f1e2e5992132802d199ae716e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}