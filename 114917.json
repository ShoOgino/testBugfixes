{"path":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/DutchStemFilter#next().mjava","commits":[{"id":"a684698d2d785b642cc0dda9c81091abc2bd90b5","date":1078844108,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/DutchStemFilter#next().mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * @return Returns the next token in the stream, or null at EOS\n\t */\n\tpublic Token next() throws IOException\n\n\t{\n\t\tif ( ( token = input.next() ) == null )\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\t// Check the exclusiontable\n\t\telse if ( exclusions != null && exclusions.contains( token.termText() ) )\n\t\t{\n\t\t\treturn token;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tString s = stemmer.stem( token.termText() );\n\t\t\t// If not stemmed, dont waste the time creating a new token\n\t\t\tif ( !s.equals( token.termText() ) )\n\t\t\t{\n\t\t\t\treturn new Token( s, token.startOffset(),\n\t\t\t\t\ttoken.endOffset(), token.type() );\n\t\t\t}\n\t\t\treturn token;\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9","date":1078974336,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/DutchStemFilter#next().mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/DutchStemFilter#next().mjava","sourceNew":"  /**\n   * @return Returns the next token in the stream, or null at EOS\n   */\n  public Token next() throws IOException {\n    if ((token = input.next()) == null) {\n      return null;\n    }\n\n    // Check the exclusiontable\n    else if (exclusions != null && exclusions.contains(token.termText())) {\n      return token;\n    } else {\n      String s = stemmer.stem(token.termText());\n      // If not stemmed, dont waste the time creating a new token\n      if (!s.equals(token.termText())) {\n        return new Token(s, token.startOffset(),\n            token.endOffset(), token.type());\n      }\n      return token;\n    }\n  }\n\n","sourceOld":"\t/**\n\t * @return Returns the next token in the stream, or null at EOS\n\t */\n\tpublic Token next() throws IOException\n\n\t{\n\t\tif ( ( token = input.next() ) == null )\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\t// Check the exclusiontable\n\t\telse if ( exclusions != null && exclusions.contains( token.termText() ) )\n\t\t{\n\t\t\treturn token;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tString s = stemmer.stem( token.termText() );\n\t\t\t// If not stemmed, dont waste the time creating a new token\n\t\t\tif ( !s.equals( token.termText() ) )\n\t\t\t{\n\t\t\t\treturn new Token( s, token.startOffset(),\n\t\t\t\t\ttoken.endOffset(), token.type() );\n\t\t\t}\n\t\t\treturn token;\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/nl/DutchStemFilter#next().mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/DutchStemFilter#next().mjava","sourceNew":"  /**\n   * @return Returns the next token in the stream, or null at EOS\n   */\n  public Token next() throws IOException {\n    if ((token = input.next()) == null) {\n      return null;\n    }\n\n    // Check the exclusiontable\n    else if (exclusions != null && exclusions.contains(token.termText())) {\n      return token;\n    } else {\n      String s = stemmer.stem(token.termText());\n      // If not stemmed, dont waste the time creating a new token\n      if (!s.equals(token.termText())) {\n        return new Token(s, token.startOffset(),\n            token.endOffset(), token.type());\n      }\n      return token;\n    }\n  }\n\n","sourceOld":"  /**\n   * @return Returns the next token in the stream, or null at EOS\n   */\n  public Token next() throws IOException {\n    if ((token = input.next()) == null) {\n      return null;\n    }\n\n    // Check the exclusiontable\n    else if (exclusions != null && exclusions.contains(token.termText())) {\n      return token;\n    } else {\n      String s = stemmer.stem(token.termText());\n      // If not stemmed, dont waste the time creating a new token\n      if (!s.equals(token.termText())) {\n        return new Token(s, token.startOffset(),\n            token.endOffset(), token.type());\n      }\n      return token;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a684698d2d785b642cc0dda9c81091abc2bd90b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9":["a684698d2d785b642cc0dda9c81091abc2bd90b5"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a684698d2d785b642cc0dda9c81091abc2bd90b5"],"a684698d2d785b642cc0dda9c81091abc2bd90b5":["37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9"],"37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}