{"path":"backwards/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"    private void merge(int lo, int pivot, int hi, int len1, int len2) {\n        if (len1 == 0 || len2 == 0) {\n            return;\n        }\n        if (len1 + len2 == 2) {\n            if (compare(pivot, lo) < 0) {\n                swap(pivot, lo);\n            }\n            return;\n        }\n        int first_cut, second_cut;\n        int len11, len22;\n        if (len1 > len2) {\n            len11 = len1 / 2;\n            first_cut = lo + len11;\n            second_cut = lower(pivot, hi, first_cut);\n            len22 = second_cut - pivot;\n        } else {\n            len22 = len2 / 2;\n            second_cut = pivot + len22;\n            first_cut = upper(lo, pivot, second_cut);\n            len11 = first_cut - lo;\n        }\n        rotate(first_cut, pivot, second_cut);\n        int new_mid = first_cut + len22;\n        merge(lo, first_cut, new_mid, len11, len22);\n        merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","sourceNew":"    private void merge(int lo, int pivot, int hi, int len1, int len2) {\n        if (len1 == 0 || len2 == 0) {\n            return;\n        }\n        if (len1 + len2 == 2) {\n            if (compare(pivot, lo) < 0) {\n                swap(pivot, lo);\n            }\n            return;\n        }\n        int first_cut, second_cut;\n        int len11, len22;\n        if (len1 > len2) {\n            len11 = len1 / 2;\n            first_cut = lo + len11;\n            second_cut = lower(pivot, hi, first_cut);\n            len22 = second_cut - pivot;\n        } else {\n            len22 = len2 / 2;\n            second_cut = pivot + len22;\n            first_cut = upper(lo, pivot, second_cut);\n            len11 = first_cut - lo;\n        }\n        rotate(first_cut, pivot, second_cut);\n        int new_mid = first_cut + len22;\n        merge(lo, first_cut, new_mid, len11, len22);\n        merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n    }\n\n","sourceOld":"    private void merge(int lo, int pivot, int hi, int len1, int len2) {\n        if (len1 == 0 || len2 == 0) {\n            return;\n        }\n        if (len1 + len2 == 2) {\n            if (compare(pivot, lo) < 0) {\n                swap(pivot, lo);\n            }\n            return;\n        }\n        int first_cut, second_cut;\n        int len11, len22;\n        if (len1 > len2) {\n            len11 = len1 / 2;\n            first_cut = lo + len11;\n            second_cut = lower(pivot, hi, first_cut);\n            len22 = second_cut - pivot;\n        } else {\n            len22 = len2 / 2;\n            second_cut = pivot + len22;\n            first_cut = upper(lo, pivot, second_cut);\n            len11 = first_cut - lo;\n        }\n        rotate(first_cut, pivot, second_cut);\n        int new_mid = first_cut + len22;\n        merge(lo, first_cut, new_mid, len11, len22);\n        merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}