{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","commits":[{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  protected ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    final Iterator<ThreadState> it = getActivePerThreadsIterator();\n    while (it.hasNext()) {\n      final ThreadState state = it.next();\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fd18e8dd80ee53bb846d52602f7a69a1ae048b7","date":1303820310,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","sourceNew":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  protected ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    // TODO: new Iterator per indexed doc is overkill...?\n    final Iterator<ThreadState> it = getActivePerThreadsIterator();\n    while (it.hasNext()) {\n      final ThreadState state = it.next();\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","sourceOld":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  protected ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    final Iterator<ThreadState> it = getActivePerThreadsIterator();\n    while (it.hasNext()) {\n      final ThreadState state = it.next();\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  protected ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    // TODO: new Iterator per indexed doc is overkill...?\n    final Iterator<ThreadState> it = getActivePerThreadsIterator();\n    while (it.hasNext()) {\n      final ThreadState state = it.next();\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  protected ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    // TODO: new Iterator per indexed doc is overkill...?\n    final Iterator<ThreadState> it = getActivePerThreadsIterator();\n    while (it.hasNext()) {\n      final ThreadState state = it.next();\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  protected ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    // TODO: new Iterator per indexed doc is overkill...?\n    final Iterator<ThreadState> it = getActivePerThreadsIterator();\n    while (it.hasNext()) {\n      final ThreadState state = it.next();\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#minContendedThreadState().mjava","sourceNew":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  protected ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    // TODO: new Iterator per indexed doc is overkill...?\n    final Iterator<ThreadState> it = getActivePerThreadsIterator();\n    while (it.hasNext()) {\n      final ThreadState state = it.next();\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","sourceOld":"  /**\n   * Returns the ThreadState with the minimum estimated number of threads\n   * waiting to acquire its lock or <code>null</code> if no {@link ThreadState}\n   * is yet visible to the calling thread.\n   */\n  protected ThreadState minContendedThreadState() {\n    ThreadState minThreadState = null;\n    // TODO: new Iterator per indexed doc is overkill...?\n    final Iterator<ThreadState> it = getActivePerThreadsIterator();\n    while (it.hasNext()) {\n      final ThreadState state = it.next();\n      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {\n        minThreadState = state;\n      }\n    }\n    return minThreadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"6fd18e8dd80ee53bb846d52602f7a69a1ae048b7":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6fd18e8dd80ee53bb846d52602f7a69a1ae048b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["6fd18e8dd80ee53bb846d52602f7a69a1ae048b7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"6fd18e8dd80ee53bb846d52602f7a69a1ae048b7":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}