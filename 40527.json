{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","commits":[{"id":"c5947ccd7ba3770dcba5a0713dbd5496678256d9","date":1291744634,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      IndexReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.optimize(); // make sure all merging is done etc.\n    IndexReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["527cc14542789f47d75da436cb4287d1ab887e34"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","date":1291778725,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      IndexReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.optimize(); // make sure all merging is done etc.\n    IndexReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      IndexReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.optimize(); // make sure all merging is done etc.\n    IndexReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      IndexReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.optimize(); // make sure all merging is done etc.\n    IndexReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      IndexReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.optimize(); // make sure all merging is done etc.\n    IndexReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      IndexReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.optimize(); // make sure all merging is done etc.\n    IndexReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      IndexReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.optimize(); // make sure all merging is done etc.\n    IndexReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      IndexReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.optimize(); // make sure all merging is done etc.\n    IndexReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      IndexReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.optimize(); // make sure all merging is done etc.\n    IndexReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      IndexReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.optimize(); // make sure all merging is done etc.\n    IndexReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      IndexReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.optimize(); // make sure all merging is done etc.\n    IndexReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00743482822ec0841b0344a37944b666e6a0228d","date":1313588663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      IndexReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.optimize(); // make sure all merging is done etc.\n    IndexReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      IndexReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.optimize(); // make sure all merging is done etc.\n    IndexReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      IndexReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    IndexReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      IndexReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.optimize(); // make sure all merging is done etc.\n    IndexReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","date":1327857288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      IndexReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    IndexReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      IndexReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    IndexReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5947ccd7ba3770dcba5a0713dbd5496678256d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["00743482822ec0841b0344a37944b666e6a0228d"],"00743482822ec0841b0344a37944b666e6a0228d":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5947ccd7ba3770dcba5a0713dbd5496678256d9"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","55c2bb1bcc0edd142e63b9230976dfc3e500dbe8"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c5947ccd7ba3770dcba5a0713dbd5496678256d9"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c5947ccd7ba3770dcba5a0713dbd5496678256d9","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c5947ccd7ba3770dcba5a0713dbd5496678256d9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","5cab9a86bd67202d20b6adc463008c8e982b070a"],"00743482822ec0841b0344a37944b666e6a0228d":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","00743482822ec0841b0344a37944b666e6a0228d","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5947ccd7ba3770dcba5a0713dbd5496678256d9","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}