{"path":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6133e5d5a3f75167f8c5580d5c45c55876f15075","date":1312804503,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    // setup analyzer for field\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      LOG.info(\"Using WhitespaceAnalyzer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":["ef7724982540101e7fe429e8eb67b97f3dcac862"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef7724982540101e7fe429e8eb67b97f3dcac862","date":1316184142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    // setup analyzer for field\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      LOG.info(\"Using WhitespaceAnalyzer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":["6133e5d5a3f75167f8c5580d5c45c55876f15075","1774e2854ef0f77de7f31ba1d9586139928e06fe"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","date":1334628185,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e665d0b783c489bf77410a97d94a92cea421df3","date":1483313558,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n\n    SolrParams params = SolrParams.toSolrParams(config);\n\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = params.getFloat(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = params.getInt(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = params.getInt(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = params.getInt(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = params.getFloat(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = params.getInt(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = params.getFloat(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":["b1f73d659ca2ba1a1656881663797f0e5b61f3fc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4062c48c67245d14e4c4d776cb7b290822ddbcb","date":1483428214,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n\n    SolrParams params = SolrParams.toSolrParams(config);\n\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = params.getFloat(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = params.getInt(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = params.getInt(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = params.getInt(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = params.getFloat(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = params.getInt(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = params.getFloat(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n\n    SolrParams params = SolrParams.toSolrParams(config);\n\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = params.getFloat(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = params.getInt(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = params.getInt(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = params.getInt(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = params.getFloat(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = params.getInt(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = params.getFloat(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129e5b874f99ae4e04f39c337c940dda690f2d38","date":1524504409,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n\n    SolrParams params = config.toSolrParams();\n\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = params.getFloat(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = params.getInt(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = params.getInt(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = params.getInt(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = params.getFloat(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = params.getInt(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = params.getFloat(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n\n    SolrParams params = SolrParams.toSolrParams(config);\n\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = params.getFloat(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = params.getInt(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = params.getInt(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = params.getInt(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = params.getFloat(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = params.getInt(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = params.getFloat(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n\n    SolrParams params = config.toSolrParams();\n\n    log.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = params.getFloat(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = params.getInt(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = params.getInt(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = params.getInt(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = params.getFloat(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = params.getInt(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = params.getFloat(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n\n    SolrParams params = config.toSolrParams();\n\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = params.getFloat(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = params.getInt(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = params.getInt(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = params.getInt(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = params.getFloat(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = params.getInt(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = params.getFloat(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438117c5355b74dcb5b01197e08f16858e726c7d","date":1577196300,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n\n    SolrParams params = config.toSolrParams();\n\n    log.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = params.getFloat(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = params.getInt(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = params.getInt(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = params.getInt(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = params.getFloat(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = params.getInt(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n\n    int maxQueryLength = DEFAULT_MAXQUERYLENGTH;\n    Integer overriddenMaxQueryLength = params.getInt(MAXQUERYLENGTH);\n    if (overriddenMaxQueryLength != null)\n      maxQueryLength = overriddenMaxQueryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = params.getFloat(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryLength(maxQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n\n    SolrParams params = config.toSolrParams();\n\n    log.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = params.getFloat(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = params.getInt(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = params.getInt(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = params.getInt(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = params.getFloat(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = params.getInt(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = params.getFloat(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","date":1577276097,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n\n    SolrParams params = config.toSolrParams();\n\n    log.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = params.getFloat(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = params.getInt(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = params.getInt(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = params.getInt(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = params.getFloat(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = params.getInt(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n\n    int maxQueryLength = DEFAULT_MAXQUERYLENGTH;\n    Integer overriddenMaxQueryLength = params.getInt(MAXQUERYLENGTH);\n    if (overriddenMaxQueryLength != null)\n      maxQueryLength = overriddenMaxQueryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = params.getFloat(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryLength(maxQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n\n    SolrParams params = config.toSolrParams();\n\n    log.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = params.getFloat(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = params.getInt(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = params.getInt(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = params.getInt(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = params.getFloat(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = params.getInt(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = params.getFloat(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n\n    SolrParams params = config.toSolrParams();\n\n    log.info(\"init: {}\", config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = params.getFloat(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = params.getInt(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = params.getInt(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = params.getInt(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = params.getFloat(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = params.getInt(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n\n    int maxQueryLength = DEFAULT_MAXQUERYLENGTH;\n    Integer overriddenMaxQueryLength = params.getInt(MAXQUERYLENGTH);\n    if (overriddenMaxQueryLength != null)\n      maxQueryLength = overriddenMaxQueryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = params.getFloat(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryLength(maxQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n\n    SolrParams params = config.toSolrParams();\n\n    log.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = params.getFloat(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = params.getInt(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = params.getInt(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = params.getInt(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = params.getFloat(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = params.getInt(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n\n    int maxQueryLength = DEFAULT_MAXQUERYLENGTH;\n    Integer overriddenMaxQueryLength = params.getInt(MAXQUERYLENGTH);\n    if (overriddenMaxQueryLength != null)\n      maxQueryLength = overriddenMaxQueryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = params.getFloat(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryLength(maxQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public String init(@SuppressWarnings({\"rawtypes\"})NamedList config, SolrCore core) {\n\n    SolrParams params = config.toSolrParams();\n\n    log.info(\"init: {}\", config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = params.getFloat(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = params.getInt(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = params.getInt(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = params.getInt(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = params.getFloat(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = params.getInt(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n\n    int maxQueryLength = DEFAULT_MAXQUERYLENGTH;\n    Integer overriddenMaxQueryLength = params.getInt(MAXQUERYLENGTH);\n    if (overriddenMaxQueryLength != null)\n      maxQueryLength = overriddenMaxQueryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = params.getFloat(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryLength(maxQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n\n    SolrParams params = config.toSolrParams();\n\n    log.info(\"init: {}\", config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass, Comparator.class);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = core.getResourceLoader().newInstance(distClass, StringDistance.class);\n\n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = params.getFloat(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = params.getInt(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = params.getInt(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = params.getInt(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = params.getFloat(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = params.getInt(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n\n    int maxQueryLength = DEFAULT_MAXQUERYLENGTH;\n    Integer overriddenMaxQueryLength = params.getInt(MAXQUERYLENGTH);\n    if (overriddenMaxQueryLength != null)\n      maxQueryLength = overriddenMaxQueryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = params.getFloat(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryLength(maxQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6133e5d5a3f75167f8c5580d5c45c55876f15075":["c26f00b574427b55127e869b935845554afde1fa"],"b4062c48c67245d14e4c4d776cb7b290822ddbcb":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","6e665d0b783c489bf77410a97d94a92cea421df3"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"6e665d0b783c489bf77410a97d94a92cea421df3":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","b4062c48c67245d14e4c4d776cb7b290822ddbcb"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","438117c5355b74dcb5b01197e08f16858e726c7d"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["438117c5355b74dcb5b01197e08f16858e726c7d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["b4062c48c67245d14e4c4d776cb7b290822ddbcb"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["ef7724982540101e7fe429e8eb67b97f3dcac862"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"ef7724982540101e7fe429e8eb67b97f3dcac862":["6133e5d5a3f75167f8c5580d5c45c55876f15075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"438117c5355b74dcb5b01197e08f16858e726c7d":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["129e5b874f99ae4e04f39c337c940dda690f2d38"]},"commit2Childs":{"6133e5d5a3f75167f8c5580d5c45c55876f15075":["ef7724982540101e7fe429e8eb67b97f3dcac862"],"b4062c48c67245d14e4c4d776cb7b290822ddbcb":["f03e4bed5023ec3ef93a771b8888cae991cf448d","129e5b874f99ae4e04f39c337c940dda690f2d38"],"c26f00b574427b55127e869b935845554afde1fa":["6133e5d5a3f75167f8c5580d5c45c55876f15075"],"6e665d0b783c489bf77410a97d94a92cea421df3":["b4062c48c67245d14e4c4d776cb7b290822ddbcb"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":[],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["b4062c48c67245d14e4c4d776cb7b290822ddbcb","6e665d0b783c489bf77410a97d94a92cea421df3","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef7724982540101e7fe429e8eb67b97f3dcac862":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","438117c5355b74dcb5b01197e08f16858e726c7d"],"438117c5355b74dcb5b01197e08f16858e726c7d":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}