{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();  \n      dir.setPreventDoubleWrite(false); // TODO: should this be disabled here?\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e06ff2ed50322a4aa861ce6a8af2ea089eabacd","date":1281478593,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();  \n      dir.setPreventDoubleWrite(false); // TODO: should this be disabled here?\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockRAMDirectory dir = newDirectory(random);  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory(random);  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockRAMDirectory dir = newDirectory(random);  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory(random);  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","date":1290247889,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();  \n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":null,"sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":null,"sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":null,"sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      // Must disable throwing exc on double-write: this\n      // test uses IW.rollback which easily results in\n      // writing to same file more than once\n      dir.setPreventDoubleWrite(false);\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: do real optimize\");\n      }\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n      if (VERBOSE) {\n        writer.setInfoStream(System.out);\n      }\n      writer.optimize();\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: writer closed\");\n      }\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["6e06ff2ed50322a4aa861ce6a8af2ea089eabacd"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"6e06ff2ed50322a4aa861ce6a8af2ea089eabacd":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"6e06ff2ed50322a4aa861ce6a8af2ea089eabacd":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","3bb13258feba31ab676502787ab2e1779f129b7a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["6e06ff2ed50322a4aa861ce6a8af2ea089eabacd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}