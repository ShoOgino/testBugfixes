{"path":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#writeCollectionState(URI,String,String,DocCollection).mjava","commits":[{"id":"af3193c66df8e8324d4bce9f66df967af9e8c602","date":1472772499,"type":1,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#writeCollectionState(URI,String,String,DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#writeCollectionState(String,String,String,DocCollection).mjava","sourceNew":"  /**\n   * This method writes the collection meta-data to the specified location in the repository.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId  The unique name for the backup.\n   * @param collectionName The name of the collection whose meta-data is being stored.\n   * @param collectionState The collection meta-data to be stored.\n   * @throws IOException in case of I/O errors.\n   */\n  public void writeCollectionState(URI backupLoc, String backupId, String collectionName,\n                                   DocCollection collectionState) throws IOException {\n    URI dest = repository.resolve(backupLoc, backupId, ZK_STATE_DIR, COLLECTION_PROPS_FILE);\n    try (OutputStream collectionStateOs = repository.createOutput(dest)) {\n      collectionStateOs.write(Utils.toJSON(Collections.singletonMap(collectionName, collectionState)));\n    }\n  }\n\n","sourceOld":"  /**\n   * This method writes the collection meta-data to the specified location in the repository.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId  The unique name for the backup.\n   * @param collectionName The name of the collection whose meta-data is being stored.\n   * @param collectionState The collection meta-data to be stored.\n   * @throws IOException in case of I/O errors.\n   */\n  public void writeCollectionState(String backupLoc, String backupId, String collectionName,\n                                   DocCollection collectionState) throws IOException {\n    URI dest = repository.createURI(backupLoc, backupId, ZK_STATE_DIR, COLLECTION_PROPS_FILE);\n    try (OutputStream collectionStateOs = repository.createOutput(dest)) {\n      collectionStateOs.write(Utils.toJSON(Collections.singletonMap(collectionName, collectionState)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da02fc41cfc83eaee66abb7c926f2c909bda6d26","date":1472818509,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#writeCollectionState(URI,String,String,DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#writeCollectionState(String,String,String,DocCollection).mjava","sourceNew":"  /**\n   * This method writes the collection meta-data to the specified location in the repository.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId  The unique name for the backup.\n   * @param collectionName The name of the collection whose meta-data is being stored.\n   * @param collectionState The collection meta-data to be stored.\n   * @throws IOException in case of I/O errors.\n   */\n  public void writeCollectionState(URI backupLoc, String backupId, String collectionName,\n                                   DocCollection collectionState) throws IOException {\n    URI dest = repository.resolve(backupLoc, backupId, ZK_STATE_DIR, COLLECTION_PROPS_FILE);\n    try (OutputStream collectionStateOs = repository.createOutput(dest)) {\n      collectionStateOs.write(Utils.toJSON(Collections.singletonMap(collectionName, collectionState)));\n    }\n  }\n\n","sourceOld":"  /**\n   * This method writes the collection meta-data to the specified location in the repository.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId  The unique name for the backup.\n   * @param collectionName The name of the collection whose meta-data is being stored.\n   * @param collectionState The collection meta-data to be stored.\n   * @throws IOException in case of I/O errors.\n   */\n  public void writeCollectionState(String backupLoc, String backupId, String collectionName,\n                                   DocCollection collectionState) throws IOException {\n    URI dest = repository.createURI(backupLoc, backupId, ZK_STATE_DIR, COLLECTION_PROPS_FILE);\n    try (OutputStream collectionStateOs = repository.createOutput(dest)) {\n      collectionStateOs.write(Utils.toJSON(Collections.singletonMap(collectionName, collectionState)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#writeCollectionState(URI,String,String,DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#writeCollectionState(String,String,String,DocCollection).mjava","sourceNew":"  /**\n   * This method writes the collection meta-data to the specified location in the repository.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId  The unique name for the backup.\n   * @param collectionName The name of the collection whose meta-data is being stored.\n   * @param collectionState The collection meta-data to be stored.\n   * @throws IOException in case of I/O errors.\n   */\n  public void writeCollectionState(URI backupLoc, String backupId, String collectionName,\n                                   DocCollection collectionState) throws IOException {\n    URI dest = repository.resolve(backupLoc, backupId, ZK_STATE_DIR, COLLECTION_PROPS_FILE);\n    try (OutputStream collectionStateOs = repository.createOutput(dest)) {\n      collectionStateOs.write(Utils.toJSON(Collections.singletonMap(collectionName, collectionState)));\n    }\n  }\n\n","sourceOld":"  /**\n   * This method writes the collection meta-data to the specified location in the repository.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId  The unique name for the backup.\n   * @param collectionName The name of the collection whose meta-data is being stored.\n   * @param collectionState The collection meta-data to be stored.\n   * @throws IOException in case of I/O errors.\n   */\n  public void writeCollectionState(String backupLoc, String backupId, String collectionName,\n                                   DocCollection collectionState) throws IOException {\n    URI dest = repository.createURI(backupLoc, backupId, ZK_STATE_DIR, COLLECTION_PROPS_FILE);\n    try (OutputStream collectionStateOs = repository.createOutput(dest)) {\n      collectionStateOs.write(Utils.toJSON(Collections.singletonMap(collectionName, collectionState)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#writeCollectionState(URI,String,String,DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method writes the collection meta-data to the specified location in the repository.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId  The unique name for the backup.\n   * @param collectionName The name of the collection whose meta-data is being stored.\n   * @param collectionState The collection meta-data to be stored.\n   * @throws IOException in case of I/O errors.\n   */\n  public void writeCollectionState(URI backupLoc, String backupId, String collectionName,\n                                   DocCollection collectionState) throws IOException {\n    URI dest = repository.resolve(backupLoc, backupId, ZK_STATE_DIR, COLLECTION_PROPS_FILE);\n    try (OutputStream collectionStateOs = repository.createOutput(dest)) {\n      collectionStateOs.write(Utils.toJSON(Collections.singletonMap(collectionName, collectionState)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#writeCollectionState(URI,String,String,DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method writes the collection meta-data to the specified location in the repository.\n   *\n   * @param backupLoc The base path used to store the backup data.\n   * @param backupId  The unique name for the backup.\n   * @param collectionName The name of the collection whose meta-data is being stored.\n   * @param collectionState The collection meta-data to be stored.\n   * @throws IOException in case of I/O errors.\n   */\n  public void writeCollectionState(URI backupLoc, String backupId, String collectionName,\n                                   DocCollection collectionState) throws IOException {\n    URI dest = repository.resolve(backupLoc, backupId, ZK_STATE_DIR, COLLECTION_PROPS_FILE);\n    try (OutputStream collectionStateOs = repository.createOutput(dest)) {\n      collectionStateOs.write(Utils.toJSON(Collections.singletonMap(collectionName, collectionState)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af3193c66df8e8324d4bce9f66df967af9e8c602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da02fc41cfc83eaee66abb7c926f2c909bda6d26","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","af3193c66df8e8324d4bce9f66df967af9e8c602","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}