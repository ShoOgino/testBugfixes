{"path":"solr/core/src/test/org/apache/solr/handler/admin/SplitHandlerTest#doRandomSplitRecommendation(Random).mjava","commits":[{"id":"a05f3f5161c62339ec5560b8f6958f3df8483618","date":1563550501,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SplitHandlerTest#doRandomSplitRecommendation(Random).mjava","pathOld":"/dev/null","sourceNew":"  public void doRandomSplitRecommendation(Random rand) throws Exception {\n    int low = 0;\n    int high = 0;\n\n    while (high-low < 10) {\n      low = randomBound(rand);\n      high = randomBound(rand);\n      if (low > high) {\n        int tmp = low;\n        low = high;\n        high = tmp;\n      }\n    }\n\n    DocRouter.Range curr = new DocRouter.Range(low,high);\n\n\n    int maxRanges = rand.nextInt(20);\n\n    int start = low;\n\n    // bucket can start before or after\n    if (rand.nextBoolean()) {\n        start += rand.nextInt(200) - 100;\n        if (start > low) {\n          // underflow\n          start = Integer.MIN_VALUE;\n        }\n    }\n\n    List<SplitOp.RangeCount> counts = new ArrayList<>(maxRanges);\n    for (;;) {\n      int end = start + rand.nextInt(100) + 1;\n      if (end < start) {\n        // overflow\n        end = Integer.MAX_VALUE;\n      }\n      counts.add( new SplitOp.RangeCount(new DocRouter.Range(start, end), rand.nextInt(1000)+1));\n      if (counts.size() >= maxRanges) break;\n      if (counts.size() == maxRanges / 2 && rand.nextBoolean()) {\n        // transition toward the end of the range (more boundary cases for large ranges)\n        start = high - rand.nextInt(100);\n        start = Math.max(start, end+1);\n      } else {\n        start = end + 1;\n      }\n      if (rand.nextBoolean()) {\n        start += rand.nextInt(100);\n      }\n      if (start < end) {\n        // overflow\n        break;\n      }\n    }\n\n    try {\n      Collection<DocRouter.Range> results = SplitOp.getSplits(counts, curr);\n      verifyContiguous(results, curr);\n    } catch (Throwable e) {\n      // System.err.println(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05f3f5161c62339ec5560b8f6958f3df8483618":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a05f3f5161c62339ec5560b8f6958f3df8483618"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a05f3f5161c62339ec5560b8f6958f3df8483618"],"a05f3f5161c62339ec5560b8f6958f3df8483618":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}