{"path":"src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordtable(File).mjava","commits":[{"id":"3ee067e27d1cce6d2d5d64280007410c2e1a38d8","date":1001438945,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordtable(File).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * @param wordfile  File containing the wordlist.\n\t */\n\tpublic static Hashtable getWordtable( File wordfile ) {\n\t\tif ( wordfile == null ) {\n\t\t\treturn new Hashtable();\n\t\t}\n\t\tHashtable result = null;\n\t\ttry {\n\t\t\tLineNumberReader lnr = new LineNumberReader( new FileReader( wordfile ) );\n\t\t\tString word = null;\n\t\t\tString[] stopwords = new String[100];\n\t\t\tint wordcount = 0;\n\t\t\twhile ( ( word = lnr.readLine() ) != null ) {\n\t\t\t\twordcount++;\n\t\t\t\tif ( wordcount == stopwords.length ) {\n\t\t\t\t\tString[] tmp = new String[stopwords.length + 50];\n\t\t\t\t\tSystem.arraycopy( stopwords, 0, tmp, 0, wordcount );\n\t\t\t\t\tstopwords = tmp;\n\t\t\t\t}\n\t\t\t\tstopwords[wordcount] = word;\n\t\t\t}\n\t\t\tresult = makeWordTable( stopwords, wordcount );\n\t\t}\n\t\t// On error, use an empty table.\n\t\tcatch ( IOException e ) {\n\t\t\tresult = new Hashtable();\n\t\t}\n\t\treturn result;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b027969b494a02d6f7a03a43537cc6935afce2a","date":1008019104,"type":3,"author":"gschwarz","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordtable(File).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordtable(File).mjava","sourceNew":"\t/**\n\t * @param wordfile  File containing the wordlist\n\t */\n\tpublic static Hashtable getWordtable( File wordfile ) {\n\t\tif ( wordfile == null ) {\n\t\t\treturn new Hashtable();\n\t\t}\n\t\tHashtable result = null;\n\t\ttry {\n\t\t\tLineNumberReader lnr = new LineNumberReader( new FileReader( wordfile ) );\n\t\t\tString word = null;\n\t\t\tString[] stopwords = new String[100];\n\t\t\tint wordcount = 0;\n\t\t\twhile ( ( word = lnr.readLine() ) != null ) {\n\t\t\t\twordcount++;\n\t\t\t\tif ( wordcount == stopwords.length ) {\n\t\t\t\t\tString[] tmp = new String[stopwords.length + 50];\n\t\t\t\t\tSystem.arraycopy( stopwords, 0, tmp, 0, wordcount );\n\t\t\t\t\tstopwords = tmp;\n\t\t\t\t}\n\t\t\t\tstopwords[wordcount-1] = word;\n\t\t\t}\n\t\t\tresult = makeWordTable( stopwords, wordcount );\n\t\t}\n\t\t// On error, use an empty table\n\t\tcatch ( IOException e ) {\n\t\t\tresult = new Hashtable();\n\t\t}\n\t\treturn result;\n\t}\n\n","sourceOld":"\t/**\n\t * @param wordfile  File containing the wordlist.\n\t */\n\tpublic static Hashtable getWordtable( File wordfile ) {\n\t\tif ( wordfile == null ) {\n\t\t\treturn new Hashtable();\n\t\t}\n\t\tHashtable result = null;\n\t\ttry {\n\t\t\tLineNumberReader lnr = new LineNumberReader( new FileReader( wordfile ) );\n\t\t\tString word = null;\n\t\t\tString[] stopwords = new String[100];\n\t\t\tint wordcount = 0;\n\t\t\twhile ( ( word = lnr.readLine() ) != null ) {\n\t\t\t\twordcount++;\n\t\t\t\tif ( wordcount == stopwords.length ) {\n\t\t\t\t\tString[] tmp = new String[stopwords.length + 50];\n\t\t\t\t\tSystem.arraycopy( stopwords, 0, tmp, 0, wordcount );\n\t\t\t\t\tstopwords = tmp;\n\t\t\t\t}\n\t\t\t\tstopwords[wordcount] = word;\n\t\t\t}\n\t\t\tresult = makeWordTable( stopwords, wordcount );\n\t\t}\n\t\t// On error, use an empty table.\n\t\tcatch ( IOException e ) {\n\t\t\tresult = new Hashtable();\n\t\t}\n\t\treturn result;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e","date":1029691996,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordtable(File).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordtable(File).mjava","sourceNew":"    /**\n     * @param wordfile  File containing the wordlist\n     */\n    public static Hashtable getWordtable( File wordfile ) {\n\tif ( wordfile == null ) {\n\t    return new Hashtable();\n\t}\n\tHashtable result = null;\n\ttry {\n\t    LineNumberReader lnr = new LineNumberReader( new FileReader( wordfile ) );\n\t    String word = null;\n\t    String[] stopwords = new String[100];\n\t    int wordcount = 0;\n\t    while ( ( word = lnr.readLine() ) != null ) {\n\t\twordcount++;\n\t\tif ( wordcount == stopwords.length ) {\n\t\t    String[] tmp = new String[stopwords.length + 50];\n\t\t    System.arraycopy( stopwords, 0, tmp, 0, wordcount );\n\t\t    stopwords = tmp;\n\t\t}\n\t\tstopwords[wordcount-1] = word;\n\t    }\n\t    result = makeWordTable( stopwords, wordcount );\n\t}\n\t// On error, use an empty table\n\tcatch ( IOException e ) {\n\t    result = new Hashtable();\n\t}\n\treturn result;\n    }\n\n","sourceOld":"\t/**\n\t * @param wordfile  File containing the wordlist\n\t */\n\tpublic static Hashtable getWordtable( File wordfile ) {\n\t\tif ( wordfile == null ) {\n\t\t\treturn new Hashtable();\n\t\t}\n\t\tHashtable result = null;\n\t\ttry {\n\t\t\tLineNumberReader lnr = new LineNumberReader( new FileReader( wordfile ) );\n\t\t\tString word = null;\n\t\t\tString[] stopwords = new String[100];\n\t\t\tint wordcount = 0;\n\t\t\twhile ( ( word = lnr.readLine() ) != null ) {\n\t\t\t\twordcount++;\n\t\t\t\tif ( wordcount == stopwords.length ) {\n\t\t\t\t\tString[] tmp = new String[stopwords.length + 50];\n\t\t\t\t\tSystem.arraycopy( stopwords, 0, tmp, 0, wordcount );\n\t\t\t\t\tstopwords = tmp;\n\t\t\t\t}\n\t\t\t\tstopwords[wordcount-1] = word;\n\t\t\t}\n\t\t\tresult = makeWordTable( stopwords, wordcount );\n\t\t}\n\t\t// On error, use an empty table\n\t\tcatch ( IOException e ) {\n\t\t\tresult = new Hashtable();\n\t\t}\n\t\treturn result;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da84b655ba7795af0018633fd31fba21fb61e9c1","date":1078877882,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordtable(File).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordtable(File).mjava","sourceNew":"  /**\n   * @param wordfile  File containing the wordlist\n   */\n  public static Hashtable getWordtable(File wordfile) {\n    if (wordfile == null) {\n      return new Hashtable();\n    }\n    Hashtable result = null;\n    try {\n      LineNumberReader lnr = new LineNumberReader(new FileReader(wordfile));\n      String word = null;\n      String[] stopwords = new String[100];\n      int wordcount = 0;\n      while ((word = lnr.readLine()) != null) {\n        wordcount++;\n        if (wordcount == stopwords.length) {\n          String[] tmp = new String[stopwords.length + 50];\n          System.arraycopy(stopwords, 0, tmp, 0, wordcount);\n          stopwords = tmp;\n        }\n        stopwords[wordcount - 1] = word;\n      }\n      result = makeWordTable(stopwords, wordcount);\n    }\n// On error, use an empty table\n    catch (IOException e) {\n      result = new Hashtable();\n    }\n    return result;\n  }\n\n","sourceOld":"    /**\n     * @param wordfile  File containing the wordlist\n     */\n    public static Hashtable getWordtable( File wordfile ) {\n\tif ( wordfile == null ) {\n\t    return new Hashtable();\n\t}\n\tHashtable result = null;\n\ttry {\n\t    LineNumberReader lnr = new LineNumberReader( new FileReader( wordfile ) );\n\t    String word = null;\n\t    String[] stopwords = new String[100];\n\t    int wordcount = 0;\n\t    while ( ( word = lnr.readLine() ) != null ) {\n\t\twordcount++;\n\t\tif ( wordcount == stopwords.length ) {\n\t\t    String[] tmp = new String[stopwords.length + 50];\n\t\t    System.arraycopy( stopwords, 0, tmp, 0, wordcount );\n\t\t    stopwords = tmp;\n\t\t}\n\t\tstopwords[wordcount-1] = word;\n\t    }\n\t    result = makeWordTable( stopwords, wordcount );\n\t}\n\t// On error, use an empty table\n\tcatch ( IOException e ) {\n\t    result = new Hashtable();\n\t}\n\treturn result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14dd1f81165dd4704a95f7427639ada7c3047f7","date":1079084628,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordtable(File).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordtable(File).mjava","sourceNew":"  /**\n   * @param wordfile  File containing the wordlist\n   * @todo Create a Set version of this method\n   */\n  public static Hashtable getWordtable(File wordfile) {\n    if (wordfile == null) {\n      return new Hashtable();\n    }\n    Hashtable result = null;\n    try {\n      LineNumberReader lnr = new LineNumberReader(new FileReader(wordfile));\n      String word = null;\n      String[] stopwords = new String[100];\n      int wordcount = 0;\n      while ((word = lnr.readLine()) != null) {\n        wordcount++;\n        if (wordcount == stopwords.length) {\n          String[] tmp = new String[stopwords.length + 50];\n          System.arraycopy(stopwords, 0, tmp, 0, wordcount);\n          stopwords = tmp;\n        }\n        stopwords[wordcount - 1] = word;\n      }\n      result = makeWordTable(stopwords, wordcount);\n    }\n// On error, use an empty table\n    catch (IOException e) {\n      result = new Hashtable();\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * @param wordfile  File containing the wordlist\n   */\n  public static Hashtable getWordtable(File wordfile) {\n    if (wordfile == null) {\n      return new Hashtable();\n    }\n    Hashtable result = null;\n    try {\n      LineNumberReader lnr = new LineNumberReader(new FileReader(wordfile));\n      String word = null;\n      String[] stopwords = new String[100];\n      int wordcount = 0;\n      while ((word = lnr.readLine()) != null) {\n        wordcount++;\n        if (wordcount == stopwords.length) {\n          String[] tmp = new String[stopwords.length + 50];\n          System.arraycopy(stopwords, 0, tmp, 0, wordcount);\n          stopwords = tmp;\n        }\n        stopwords[wordcount - 1] = word;\n      }\n      result = makeWordTable(stopwords, wordcount);\n    }\n// On error, use an empty table\n    catch (IOException e) {\n      result = new Hashtable();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d228cde601d14f5ebb8739acab29a9b9a3a8098e","date":1080579215,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordtable(File).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordtable(File).mjava","sourceNew":"  /**\n   * @param wordfile File containing the wordlist\n   * @todo Create a Set version of this method\n   */\n  public static Hashtable getWordtable(File wordfile) throws IOException {\n    if (wordfile == null) {\n      return new Hashtable();\n    }\n    Hashtable result = null;\n    FileReader freader = null;\n    LineNumberReader lnr = null;\n    try {\n      freader = new FileReader(wordfile);\n      lnr = new LineNumberReader(freader);\n      String word = null;\n      String[] stopwords = new String[100];\n      int wordcount = 0;\n      while ((word = lnr.readLine()) != null) {\n        wordcount++;\n        if (wordcount == stopwords.length) {\n          String[] tmp = new String[stopwords.length + 50];\n          System.arraycopy(stopwords, 0, tmp, 0, wordcount);\n          stopwords = tmp;\n        }\n        stopwords[wordcount - 1] = word;\n      }\n      result = makeWordTable(stopwords, wordcount);\n    } finally {\n      if (lnr != null)\n        lnr.close();\n      if (freader != null)\n        freader.close();\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * @param wordfile  File containing the wordlist\n   * @todo Create a Set version of this method\n   */\n  public static Hashtable getWordtable(File wordfile) {\n    if (wordfile == null) {\n      return new Hashtable();\n    }\n    Hashtable result = null;\n    try {\n      LineNumberReader lnr = new LineNumberReader(new FileReader(wordfile));\n      String word = null;\n      String[] stopwords = new String[100];\n      int wordcount = 0;\n      while ((word = lnr.readLine()) != null) {\n        wordcount++;\n        if (wordcount == stopwords.length) {\n          String[] tmp = new String[stopwords.length + 50];\n          System.arraycopy(stopwords, 0, tmp, 0, wordcount);\n          stopwords = tmp;\n        }\n        stopwords[wordcount - 1] = word;\n      }\n      result = makeWordTable(stopwords, wordcount);\n    }\n// On error, use an empty table\n    catch (IOException e) {\n      result = new Hashtable();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4230eef3a047e2a85e989e7ced62bf7fd4a9f859","date":1080661498,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordtable(File).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordtable(File).mjava","sourceNew":"  /**\n   * @param wordfile  File object that points to the wordlist\n   *\n   * @deprecated Use {@link #getWordSet(File)} getWordSet(File)} instead\n   */\n  public static Hashtable getWordtable(File wordfile) throws IOException {\n    HashSet wordSet = (HashSet)getWordSet(wordfile);\n    Hashtable result = makeWordTable(wordSet);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * @param wordfile File containing the wordlist\n   * @todo Create a Set version of this method\n   */\n  public static Hashtable getWordtable(File wordfile) throws IOException {\n    if (wordfile == null) {\n      return new Hashtable();\n    }\n    Hashtable result = null;\n    FileReader freader = null;\n    LineNumberReader lnr = null;\n    try {\n      freader = new FileReader(wordfile);\n      lnr = new LineNumberReader(freader);\n      String word = null;\n      String[] stopwords = new String[100];\n      int wordcount = 0;\n      while ((word = lnr.readLine()) != null) {\n        wordcount++;\n        if (wordcount == stopwords.length) {\n          String[] tmp = new String[stopwords.length + 50];\n          System.arraycopy(stopwords, 0, tmp, 0, wordcount);\n          stopwords = tmp;\n        }\n        stopwords[wordcount - 1] = word;\n      }\n      result = makeWordTable(stopwords, wordcount);\n    } finally {\n      if (lnr != null)\n        lnr.close();\n      if (freader != null)\n        freader.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2","date":1092688309,"type":4,"author":"Daniel Naber","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordtable(File).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param wordfile  File object that points to the wordlist\n   *\n   * @deprecated Use {@link #getWordSet(File)} getWordSet(File)} instead\n   */\n  public static Hashtable getWordtable(File wordfile) throws IOException {\n    HashSet wordSet = (HashSet)getWordSet(wordfile);\n    Hashtable result = makeWordTable(wordSet);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"266fc7afc9269ff0e59f58194b01d4b42784ba3a","date":1095708421,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordtable(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param wordfile  File object that points to the wordlist\n   *\n   * @deprecated Use {@link #getWordSet(File)} getWordSet(File)} instead\n   */\n  public static Hashtable getWordtable(File wordfile) throws IOException {\n    HashSet wordSet = (HashSet)getWordSet(wordfile);\n    Hashtable result = makeWordTable(wordSet);\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/de/WordlistLoader#getWordtable(File).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param wordfile  File object that points to the wordlist\n   *\n   * @deprecated Use {@link #getWordSet(File)} getWordSet(File)} instead\n   */\n  public static Hashtable getWordtable(File wordfile) throws IOException {\n    HashSet wordSet = (HashSet)getWordSet(wordfile);\n    Hashtable result = makeWordTable(wordSet);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee067e27d1cce6d2d5d64280007410c2e1a38d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2":["4230eef3a047e2a85e989e7ced62bf7fd4a9f859"],"4230eef3a047e2a85e989e7ced62bf7fd4a9f859":["d228cde601d14f5ebb8739acab29a9b9a3a8098e"],"da84b655ba7795af0018633fd31fba21fb61e9c1":["f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["266fc7afc9269ff0e59f58194b01d4b42784ba3a"],"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e":["9b027969b494a02d6f7a03a43537cc6935afce2a"],"9b027969b494a02d6f7a03a43537cc6935afce2a":["3ee067e27d1cce6d2d5d64280007410c2e1a38d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d228cde601d14f5ebb8739acab29a9b9a3a8098e":["d14dd1f81165dd4704a95f7427639ada7c3047f7"],"d14dd1f81165dd4704a95f7427639ada7c3047f7":["da84b655ba7795af0018633fd31fba21fb61e9c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"266fc7afc9269ff0e59f58194b01d4b42784ba3a":["eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2"]},"commit2Childs":{"3ee067e27d1cce6d2d5d64280007410c2e1a38d8":["9b027969b494a02d6f7a03a43537cc6935afce2a"],"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2":["266fc7afc9269ff0e59f58194b01d4b42784ba3a"],"4230eef3a047e2a85e989e7ced62bf7fd4a9f859":["eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2"],"da84b655ba7795af0018633fd31fba21fb61e9c1":["d14dd1f81165dd4704a95f7427639ada7c3047f7"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ee067e27d1cce6d2d5d64280007410c2e1a38d8"],"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e":["da84b655ba7795af0018633fd31fba21fb61e9c1"],"9b027969b494a02d6f7a03a43537cc6935afce2a":["f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e"],"d228cde601d14f5ebb8739acab29a9b9a3a8098e":["4230eef3a047e2a85e989e7ced62bf7fd4a9f859"],"d14dd1f81165dd4704a95f7427639ada7c3047f7":["d228cde601d14f5ebb8739acab29a9b9a3a8098e"],"266fc7afc9269ff0e59f58194b01d4b42784ba3a":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}