{"path":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFuzzyQuery(String,String,float).mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFuzzyQuery(String,String,float).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFuzzyQuery(String,String,float).mjava","sourceNew":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new FuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","sourceOld":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new FuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFuzzyQuery(String,String,float).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFuzzyQuery(String,String,float).mjava","sourceNew":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new FuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","sourceOld":"   /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses\n   * an input term token that has the fuzzy suffix (~) appended.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new FuzzyQuery(t, minSimilarity, fuzzyPrefixLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}