{"path":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","commits":[{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,MockRAMDirectory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexSearcher ram = new IndexSearcher(ramdir);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    ram.close();\n    mem.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, MockRAMDirectory ramdir, Analyzer analyzer) throws Exception {\n    IndexSearcher ram = new IndexSearcher(ramdir);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    ram.close();\n    mem.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexSearcher ram = new IndexSearcher(ramdir);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    ram.close();\n    mem.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = IndexReader.open(ramdir);\n    IndexSearcher ram = new IndexSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    ram.close();\n    reader.close();\n    mem.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexSearcher ram = new IndexSearcher(ramdir);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    ram.close();\n    mem.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = IndexReader.open(ramdir);\n    IndexSearcher ram = new IndexSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = IndexReader.open(ramdir);\n    IndexSearcher ram = new IndexSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    ram.close();\n    reader.close();\n    mem.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = IndexReader.open(ramdir);\n    IndexSearcher ram = new IndexSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = IndexReader.open(ramdir);\n    IndexSearcher ram = new IndexSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    ram.close();\n    reader.close();\n    mem.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bfa39296944e5fddc334aa89243d91f9cbb8367","date":1330973284,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = new IndexSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = IndexReader.open(ramdir);\n    IndexSearcher ram = new IndexSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = new IndexSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = IndexReader.open(ramdir);\n    IndexSearcher ram = new IndexSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = new IndexSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = new IndexSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8bfa39296944e5fddc334aa89243d91f9cbb8367"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["0e7c2454a6a8237bfd0e953f5b940838408c9055","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["a05409176bd65129d67a785ee70e881e238a9aef"],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a05409176bd65129d67a785ee70e881e238a9aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a05409176bd65129d67a785ee70e881e238a9aef","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a05409176bd65129d67a785ee70e881e238a9aef":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}