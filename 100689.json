{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testInvalidValues().mjava","commits":[{"id":"40b789607c421011dabf36a935528a74fb8b2032","date":1492023606,"type":1,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testInvalidValues().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DateEvaluatorTest#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid field a - The field must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid field a - The field must be a string formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid field a - The field must be a string formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid field a - The field must be a string formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b70b3ba150f93fa94768c7b0f2098a039ab59c5","date":1492023606,"type":3,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testInvalidValues().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid parameter 12 - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid parameter 1995-12-31 - The String must be formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid field a - The field must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid field a - The field must be a string formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2adf666c5966009065f122b1f8bbb8f777db9fd1","date":1492023606,"type":3,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testInvalidValues().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid parameter 12 - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid parameter 1995-12-31 - The String must be formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid parameter  - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid parameter 12 - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid parameter 1995-12-31 - The String must be formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33835f41305f4d46c2a650da7c564ac99f485ab1","date":1492023606,"type":3,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testInvalidValues().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 12 - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 1995-12-31 - The String must be formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter  - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid parameter 12 - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid parameter 1995-12-31 - The String must be formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid parameter  - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64ff6b743fd4051da7ebb3d397d1ef80833a741a","date":1492023891,"type":5,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidValues().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 12 - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 1995-12-31 - The String must be formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter  - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 12 - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 1995-12-31 - The String must be formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter  - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64ff6b743fd4051da7ebb3d397d1ef80833a741a":["33835f41305f4d46c2a650da7c564ac99f485ab1"],"33835f41305f4d46c2a650da7c564ac99f485ab1":["2adf666c5966009065f122b1f8bbb8f777db9fd1"],"1b70b3ba150f93fa94768c7b0f2098a039ab59c5":["40b789607c421011dabf36a935528a74fb8b2032"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2adf666c5966009065f122b1f8bbb8f777db9fd1":["1b70b3ba150f93fa94768c7b0f2098a039ab59c5"],"40b789607c421011dabf36a935528a74fb8b2032":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64ff6b743fd4051da7ebb3d397d1ef80833a741a"]},"commit2Childs":{"64ff6b743fd4051da7ebb3d397d1ef80833a741a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33835f41305f4d46c2a650da7c564ac99f485ab1":["64ff6b743fd4051da7ebb3d397d1ef80833a741a"],"1b70b3ba150f93fa94768c7b0f2098a039ab59c5":["2adf666c5966009065f122b1f8bbb8f777db9fd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40b789607c421011dabf36a935528a74fb8b2032"],"2adf666c5966009065f122b1f8bbb8f777db9fd1":["33835f41305f4d46c2a650da7c564ac99f485ab1"],"40b789607c421011dabf36a935528a74fb8b2032":["1b70b3ba150f93fa94768c7b0f2098a039ab59c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}