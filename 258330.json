{"path":"solr/core/src/java/org/apache/solr/cloud/Assign#incAndGetId(SolrZkClient,String).mjava","commits":[{"id":"9f100e4a037a938ee4b027674f1ca80fc208badf","date":1500526196,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#incAndGetId(SolrZkClient,String).mjava","pathOld":"/dev/null","sourceNew":"  public static int incAndGetId(SolrZkClient zkClient, String collection) {\n    String path = \"/collections/\"+collection;\n    try {\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.makePath(path, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.create(path, NumberUtils.intToBytes(0), CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      Stat stat = new Stat();\n      try {\n        byte[] data = zkClient.getData(path, null, stat, true);\n        int currentId = NumberUtils.bytesToInt(data);\n        data = NumberUtils.intToBytes(++currentId);\n        zkClient.setData(path, data, stat.getVersion(), true);\n        return currentId;\n      } catch (KeeperException e) {\n        if (e.code() != KeeperException.Code.BADVERSION) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n        }\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651c3ddf5bc1266d9de0a972ec05e59d77099a4c","date":1500969855,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#incAndGetId(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#incAndGetId(SolrZkClient,String).mjava","sourceNew":"  public static int incAndGetId(SolrZkClient zkClient, String collection, int defaultValue) {\n    String path = \"/collections/\"+collection;\n    try {\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.makePath(path, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.create(path, NumberUtils.intToBytes(defaultValue), CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      Stat stat = new Stat();\n      try {\n        byte[] data = zkClient.getData(path, null, stat, true);\n        int currentId = NumberUtils.bytesToInt(data);\n        data = NumberUtils.intToBytes(++currentId);\n        zkClient.setData(path, data, stat.getVersion(), true);\n        return currentId;\n      } catch (KeeperException e) {\n        if (e.code() != KeeperException.Code.BADVERSION) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n        }\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  public static int incAndGetId(SolrZkClient zkClient, String collection) {\n    String path = \"/collections/\"+collection;\n    try {\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.makePath(path, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.create(path, NumberUtils.intToBytes(0), CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      Stat stat = new Stat();\n      try {\n        byte[] data = zkClient.getData(path, null, stat, true);\n        int currentId = NumberUtils.bytesToInt(data);\n        data = NumberUtils.intToBytes(++currentId);\n        zkClient.setData(path, data, stat.getVersion(), true);\n        return currentId;\n      } catch (KeeperException e) {\n        if (e.code() != KeeperException.Code.BADVERSION) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n        }\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#incAndGetId(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#incAndGetId(SolrZkClient,String).mjava","sourceNew":"  public static int incAndGetId(SolrZkClient zkClient, String collection, int defaultValue) {\n    String path = \"/collections/\"+collection;\n    try {\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.makePath(path, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.create(path, NumberUtils.intToBytes(defaultValue), CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      Stat stat = new Stat();\n      try {\n        byte[] data = zkClient.getData(path, null, stat, true);\n        int currentId = NumberUtils.bytesToInt(data);\n        data = NumberUtils.intToBytes(++currentId);\n        zkClient.setData(path, data, stat.getVersion(), true);\n        return currentId;\n      } catch (KeeperException e) {\n        if (e.code() != KeeperException.Code.BADVERSION) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n        }\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  public static int incAndGetId(SolrZkClient zkClient, String collection) {\n    String path = \"/collections/\"+collection;\n    try {\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.makePath(path, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!zkClient.exists(path, true)) {\n        try {\n          zkClient.create(path, NumberUtils.intToBytes(0), CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      Stat stat = new Stat();\n      try {\n        byte[] data = zkClient.getData(path, null, stat, true);\n        int currentId = NumberUtils.bytesToInt(data);\n        data = NumberUtils.intToBytes(++currentId);\n        zkClient.setData(path, data, stat.getVersion(), true);\n        return currentId;\n      } catch (KeeperException e) {\n        if (e.code() != KeeperException.Code.BADVERSION) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n        }\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["9f100e4a037a938ee4b027674f1ca80fc208badf"],"a52341299179de5479672f7cf518bf4b173f34b3":["9f100e4a037a938ee4b027674f1ca80fc208badf","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"9f100e4a037a938ee4b027674f1ca80fc208badf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a52341299179de5479672f7cf518bf4b173f34b3"]},"commit2Childs":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9f100e4a037a938ee4b027674f1ca80fc208badf":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c","a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9f100e4a037a938ee4b027674f1ca80fc208badf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}