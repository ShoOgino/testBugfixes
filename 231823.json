{"path":"backwards/src/java/org/apache/lucene/search/SloppyPhraseScorer#phraseFreq().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/SloppyPhraseScorer#phraseFreq().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Score a candidate doc for all slop-valid position-combinations (matches) \n     * encountered while traversing/hopping the PhrasePositions.\n     * <br> The score contribution of a match depends on the distance: \n     * <br> - highest score for distance=0 (exact match).\n     * <br> - score gets lower as distance gets higher.\n     * <br>Example: for query \"a b\"~2, a document \"x a b a y\" can be scored twice: \n     * once for \"a b\" (distance=0), and once for \"b a\" (distance=2).\n     * <br>Possibly not all valid combinations are encountered, because for efficiency  \n     * we always propagate the least PhrasePosition. This allows to base on \n     * PriorityQueue and move forward faster. \n     * As result, for example, document \"a b c b a\"\n     * would score differently for queries \"a b c\"~4 and \"c b a\"~4, although \n     * they really are equivalent. \n     * Similarly, for doc \"a b c b a f g\", query \"c b\"~2 \n     * would get same score as \"g f\"~2, although \"c b\"~2 could be matched twice.\n     * We may want to fix this in the future (currently not, for performance reasons).\n     */\n    @Override\n    protected final float phraseFreq() throws IOException {\n        int end = initPhrasePositions();\n        \n        float freq = 0.0f;\n        boolean done = (end<0);\n        while (!done) {\n            PhrasePositions pp = pq.pop();\n            int start = pp.position;\n            int next = pq.top().position;\n\n            boolean tpsDiffer = true;\n            for (int pos = start; pos <= next || !tpsDiffer; pos = pp.position) {\n                if (pos<=next && tpsDiffer)\n                    start = pos;                  // advance pp to min window\n                if (!pp.nextPosition()) {\n                    done = true;          // ran out of a term -- done\n                    break;\n                }\n                PhrasePositions pp2 = null;\n                tpsDiffer = !pp.repeats || (pp2 = termPositionsDiffer(pp))==null;\n                if (pp2!=null && pp2!=pp) {\n                  pp = flip(pp,pp2); // flip pp to pp2\n                }\n            }\n\n            int matchLength = end - start;\n            if (matchLength <= slop)\n                freq += getSimilarity().sloppyFreq(matchLength); // score match\n\n            if (pp.position > end)\n                end = pp.position;\n            pq.add(pp);               // restore pq\n        }\n\n        return freq;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/SloppyPhraseScorer#phraseFreq().mjava","pathOld":"backwards/src/java/org/apache/lucene/search/SloppyPhraseScorer#phraseFreq().mjava","sourceNew":"    /**\n     * Score a candidate doc for all slop-valid position-combinations (matches) \n     * encountered while traversing/hopping the PhrasePositions.\n     * <br> The score contribution of a match depends on the distance: \n     * <br> - highest score for distance=0 (exact match).\n     * <br> - score gets lower as distance gets higher.\n     * <br>Example: for query \"a b\"~2, a document \"x a b a y\" can be scored twice: \n     * once for \"a b\" (distance=0), and once for \"b a\" (distance=2).\n     * <br>Possibly not all valid combinations are encountered, because for efficiency  \n     * we always propagate the least PhrasePosition. This allows to base on \n     * PriorityQueue and move forward faster. \n     * As result, for example, document \"a b c b a\"\n     * would score differently for queries \"a b c\"~4 and \"c b a\"~4, although \n     * they really are equivalent. \n     * Similarly, for doc \"a b c b a f g\", query \"c b\"~2 \n     * would get same score as \"g f\"~2, although \"c b\"~2 could be matched twice.\n     * We may want to fix this in the future (currently not, for performance reasons).\n     */\n    @Override\n    protected final float phraseFreq() throws IOException {\n        int end = initPhrasePositions();\n        \n        float freq = 0.0f;\n        boolean done = (end<0);\n        while (!done) {\n            PhrasePositions pp = pq.pop();\n            int start = pp.position;\n            int next = pq.top().position;\n\n            boolean tpsDiffer = true;\n            for (int pos = start; pos <= next || !tpsDiffer; pos = pp.position) {\n                if (pos<=next && tpsDiffer)\n                    start = pos;                  // advance pp to min window\n                if (!pp.nextPosition()) {\n                    done = true;          // ran out of a term -- done\n                    break;\n                }\n                PhrasePositions pp2 = null;\n                tpsDiffer = !pp.repeats || (pp2 = termPositionsDiffer(pp))==null;\n                if (pp2!=null && pp2!=pp) {\n                  pp = flip(pp,pp2); // flip pp to pp2\n                }\n            }\n\n            int matchLength = end - start;\n            if (matchLength <= slop)\n                freq += getSimilarity().sloppyFreq(matchLength); // score match\n\n            if (pp.position > end)\n                end = pp.position;\n            pq.add(pp);               // restore pq\n        }\n\n        return freq;\n    }\n\n","sourceOld":"    /**\n     * Score a candidate doc for all slop-valid position-combinations (matches) \n     * encountered while traversing/hopping the PhrasePositions.\n     * <br> The score contribution of a match depends on the distance: \n     * <br> - highest score for distance=0 (exact match).\n     * <br> - score gets lower as distance gets higher.\n     * <br>Example: for query \"a b\"~2, a document \"x a b a y\" can be scored twice: \n     * once for \"a b\" (distance=0), and once for \"b a\" (distance=2).\n     * <br>Possibly not all valid combinations are encountered, because for efficiency  \n     * we always propagate the least PhrasePosition. This allows to base on \n     * PriorityQueue and move forward faster. \n     * As result, for example, document \"a b c b a\"\n     * would score differently for queries \"a b c\"~4 and \"c b a\"~4, although \n     * they really are equivalent. \n     * Similarly, for doc \"a b c b a f g\", query \"c b\"~2 \n     * would get same score as \"g f\"~2, although \"c b\"~2 could be matched twice.\n     * We may want to fix this in the future (currently not, for performance reasons).\n     */\n    @Override\n    protected final float phraseFreq() throws IOException {\n        int end = initPhrasePositions();\n        \n        float freq = 0.0f;\n        boolean done = (end<0);\n        while (!done) {\n            PhrasePositions pp = pq.pop();\n            int start = pp.position;\n            int next = pq.top().position;\n\n            boolean tpsDiffer = true;\n            for (int pos = start; pos <= next || !tpsDiffer; pos = pp.position) {\n                if (pos<=next && tpsDiffer)\n                    start = pos;                  // advance pp to min window\n                if (!pp.nextPosition()) {\n                    done = true;          // ran out of a term -- done\n                    break;\n                }\n                PhrasePositions pp2 = null;\n                tpsDiffer = !pp.repeats || (pp2 = termPositionsDiffer(pp))==null;\n                if (pp2!=null && pp2!=pp) {\n                  pp = flip(pp,pp2); // flip pp to pp2\n                }\n            }\n\n            int matchLength = end - start;\n            if (matchLength <= slop)\n                freq += getSimilarity().sloppyFreq(matchLength); // score match\n\n            if (pp.position > end)\n                end = pp.position;\n            pq.add(pp);               // restore pq\n        }\n\n        return freq;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}