{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getReaderForField(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getReaderForField(String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getReaderForField(String).mjava","sourceNew":"  private IndexReader getReaderForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(tokenStream);\n      cachedTokenStream = true;\n    }\n    IndexReader reader = readers.get(field);\n    if (reader == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, tokenStream);\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      reader = searcher.getIndexReader();\n      readers.put(field, reader);\n    }\n\n    return reader;\n  }\n\n","sourceOld":"  private IndexReader getReaderForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(tokenStream);\n      cachedTokenStream = true;\n    }\n    IndexReader reader = readers.get(field);\n    if (reader == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, tokenStream);\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      reader = searcher.getIndexReader();\n      readers.put(field, reader);\n    }\n\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getReaderForField(String).mjava","sourceNew":"  private AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(tokenStream);\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, tokenStream);\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","sourceOld":"  private IndexReader getReaderForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(tokenStream);\n      cachedTokenStream = true;\n    }\n    IndexReader reader = readers.get(field);\n    if (reader == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, tokenStream);\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      reader = searcher.getIndexReader();\n      readers.put(field, reader);\n    }\n\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":["c45bbf26db88631f7a389cbff0f4eab70f55ec64","c45bbf26db88631f7a389cbff0f4eab70f55ec64"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getReaderForField(String).mjava","sourceNew":"  private AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(tokenStream);\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, tokenStream);\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","sourceOld":"  private IndexReader getReaderForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(tokenStream);\n      cachedTokenStream = true;\n    }\n    IndexReader reader = readers.get(field);\n    if (reader == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, tokenStream);\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      reader = searcher.getIndexReader();\n      readers.put(field, reader);\n    }\n\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getReaderForField(String).mjava","sourceNew":null,"sourceOld":"  private IndexReader getReaderForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(tokenStream);\n      cachedTokenStream = true;\n    }\n    IndexReader reader = readers.get(field);\n    if (reader == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, tokenStream);\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      reader = searcher.getIndexReader();\n      readers.put(field, reader);\n    }\n\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8323d210478d76a02372693d254b69aac614689":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","c8323d210478d76a02372693d254b69aac614689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8323d210478d76a02372693d254b69aac614689"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["9454a6510e2db155fb01faa5c049b06ece95fab9","c8323d210478d76a02372693d254b69aac614689"]},"commit2Childs":{"c8323d210478d76a02372693d254b69aac614689":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c8323d210478d76a02372693d254b69aac614689","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}