{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String,Object> json = rb.req.getJSON();\n    Map<String,Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\",1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      jsonFacet = (Map<String, Object>) json.get(\"facet\");\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (isShard) {\n      String jfacet = params.get(FACET_STATE);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no facet state, then don't do anything.\n        return;\n      }\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetParser parser = new FacetTopParser(rb.req);\n    FacetRequest facetRequest = null;\n    try {\n      facetRequest = parser.parse(jsonFacet);\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n    }\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String,Object> json = rb.req.getJSON();\n    Map<String,Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\",1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      jsonFacet = (Map<String, Object>) json.get(\"facet\");\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (isShard) {\n      String jfacet = params.get(FACET_STATE);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no facet state, then don't do anything.\n        return;\n      }\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetParser parser = new FacetTopParser(rb.req);\n    FacetRequest facetRequest = null;\n    try {\n      facetRequest = parser.parse(jsonFacet);\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n    }\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ec805ca8fedc0166461148c7182f1bcbbd18ee1","date":1489767223,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String,Object> json = rb.req.getJSON();\n    Map<String,Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\",1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      jsonFacet = (Map<String, Object>) json.get(\"facet\");\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    Map<String,Object> facetInfo = null;\n    if (isShard) {\n      String jfacet = params.get(FACET_INFO);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no _facet_ info, then don't do anything.\n        return;\n      }\n      facetInfo = (Map<String,Object>) ObjectBuilder.fromJSON(jfacet);\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetParser parser = new FacetTopParser(rb.req);\n    FacetRequest facetRequest = null;\n    try {\n      facetRequest = parser.parse(jsonFacet);\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n    }\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetInfo = facetInfo;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String,Object> json = rb.req.getJSON();\n    Map<String,Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\",1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      jsonFacet = (Map<String, Object>) json.get(\"facet\");\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (isShard) {\n      String jfacet = params.get(FACET_STATE);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no facet state, then don't do anything.\n        return;\n      }\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetParser parser = new FacetTopParser(rb.req);\n    FacetRequest facetRequest = null;\n    try {\n      facetRequest = parser.parse(jsonFacet);\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n    }\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ab475c994c79138885cc8a30b2641d929cdc43","date":1490280010,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String,Object> json = rb.req.getJSON();\n    Map<String,Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\",1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      jsonFacet = (Map<String, Object>) json.get(\"facet\");\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    Map<String,Object> facetInfo = null;\n    if (isShard) {\n      String jfacet = params.get(FACET_INFO);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no _facet_ info, then don't do anything.\n        return;\n      }\n      facetInfo = (Map<String,Object>) ObjectBuilder.fromJSON(jfacet);\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetParser parser = new FacetTopParser(rb.req);\n    FacetRequest facetRequest = null;\n    try {\n      facetRequest = parser.parse(jsonFacet);\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n    }\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetInfo = facetInfo;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String,Object> json = rb.req.getJSON();\n    Map<String,Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\",1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      jsonFacet = (Map<String, Object>) json.get(\"facet\");\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (isShard) {\n      String jfacet = params.get(FACET_STATE);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no facet state, then don't do anything.\n        return;\n      }\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetParser parser = new FacetTopParser(rb.req);\n    FacetRequest facetRequest = null;\n    try {\n      facetRequest = parser.parse(jsonFacet);\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n    }\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ab027bdfe663227636ccbeda13ae82add302939","date":1529980633,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String,Object> json = rb.req.getJSON();\n    Map<String,Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\",1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      jsonFacet = (Map<String, Object>) json.get(\"facet\");\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    Map<String,Object> facetInfo = null;\n    if (isShard) {\n      String jfacet = params.get(FACET_INFO);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no _facet_ info, then don't do anything.\n        return;\n      }\n      facetInfo = (Map<String,Object>) ObjectBuilder.fromJSON(jfacet);\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetRequest facetRequest = FacetRequest.parse(rb.req, jsonFacet);\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetInfo = facetInfo;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String,Object> json = rb.req.getJSON();\n    Map<String,Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\",1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      jsonFacet = (Map<String, Object>) json.get(\"facet\");\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    Map<String,Object> facetInfo = null;\n    if (isShard) {\n      String jfacet = params.get(FACET_INFO);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no _facet_ info, then don't do anything.\n        return;\n      }\n      facetInfo = (Map<String,Object>) ObjectBuilder.fromJSON(jfacet);\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetParser parser = new FacetTopParser(rb.req);\n    FacetRequest facetRequest = null;\n    try {\n      facetRequest = parser.parse(jsonFacet);\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n    }\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetInfo = facetInfo;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String,Object> json = rb.req.getJSON();\n    Map<String,Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\",1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      jsonFacet = (Map<String, Object>) json.get(\"facet\");\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    Map<String,Object> facetInfo = null;\n    if (isShard) {\n      String jfacet = params.get(FACET_INFO);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no _facet_ info, then don't do anything.\n        return;\n      }\n      facetInfo = (Map<String,Object>) ObjectBuilder.fromJSON(jfacet);\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetRequest facetRequest = FacetRequest.parse(rb.req, jsonFacet);\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetInfo = facetInfo;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String,Object> json = rb.req.getJSON();\n    Map<String,Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\",1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      jsonFacet = (Map<String, Object>) json.get(\"facet\");\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    Map<String,Object> facetInfo = null;\n    if (isShard) {\n      String jfacet = params.get(FACET_INFO);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no _facet_ info, then don't do anything.\n        return;\n      }\n      facetInfo = (Map<String,Object>) ObjectBuilder.fromJSON(jfacet);\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetParser parser = new FacetTopParser(rb.req);\n    FacetRequest facetRequest = null;\n    try {\n      facetRequest = parser.parse(jsonFacet);\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n    }\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetInfo = facetInfo;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String,Object> json = rb.req.getJSON();\n    Map<String,Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\",1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      jsonFacet = (Map<String, Object>) json.get(\"facet\");\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    Map<String,Object> facetInfo = null;\n    if (isShard) {\n      String jfacet = params.get(FACET_INFO);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no _facet_ info, then don't do anything.\n        return;\n      }\n      facetInfo = (Map<String,Object>) ObjectBuilder.fromJSON(jfacet);\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetRequest facetRequest = FacetRequest.parse(rb.req, jsonFacet);\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetInfo = facetInfo;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String,Object> json = rb.req.getJSON();\n    Map<String,Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\",1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      jsonFacet = (Map<String, Object>) json.get(\"facet\");\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    Map<String,Object> facetInfo = null;\n    if (isShard) {\n      String jfacet = params.get(FACET_INFO);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no _facet_ info, then don't do anything.\n        return;\n      }\n      facetInfo = (Map<String,Object>) ObjectBuilder.fromJSON(jfacet);\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetParser parser = new FacetTopParser(rb.req);\n    FacetRequest facetRequest = null;\n    try {\n      facetRequest = parser.parse(jsonFacet);\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n    }\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetInfo = facetInfo;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1918d03541b875664e27eae44b6b157da044f0b8","date":1549745850,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String,Object> json = rb.req.getJSON();\n    Map<String,Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\",1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      Object jsonObj = json.get(\"facet\");\n      if (jsonObj instanceof Map) {\n        jsonFacet = (Map<String, Object>) jsonObj;\n      } else if (jsonObj != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Expected Map for 'facet', received \" + jsonObj.getClass().getSimpleName() + \"=\" + jsonObj);\n      }\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    Map<String,Object> facetInfo = null;\n    if (isShard) {\n      String jfacet = params.get(FACET_INFO);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no _facet_ info, then don't do anything.\n        return;\n      }\n      facetInfo = (Map<String,Object>) ObjectBuilder.fromJSON(jfacet);\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetRequest facetRequest = FacetRequest.parse(rb.req, jsonFacet);\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetInfo = facetInfo;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String,Object> json = rb.req.getJSON();\n    Map<String,Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\",1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      jsonFacet = (Map<String, Object>) json.get(\"facet\");\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    Map<String,Object> facetInfo = null;\n    if (isShard) {\n      String jfacet = params.get(FACET_INFO);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no _facet_ info, then don't do anything.\n        return;\n      }\n      facetInfo = (Map<String,Object>) ObjectBuilder.fromJSON(jfacet);\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetRequest facetRequest = FacetRequest.parse(rb.req, jsonFacet);\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetInfo = facetInfo;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String,Object> json = rb.req.getJSON();\n    Map<String,Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\",1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      Object jsonObj = json.get(\"facet\");\n      if (jsonObj instanceof Map) {\n        jsonFacet = (Map<String, Object>) jsonObj;\n      } else if (jsonObj != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Expected Map for 'facet', received \" + jsonObj.getClass().getSimpleName() + \"=\" + jsonObj);\n      }\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    Map<String,Object> facetInfo = null;\n    if (isShard) {\n      String jfacet = params.get(FACET_INFO);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no _facet_ info, then don't do anything.\n        return;\n      }\n      facetInfo = (Map<String,Object>) fromJSONString(jfacet);\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetRequest facetRequest = FacetRequest.parse(rb.req, jsonFacet);\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetInfo = facetInfo;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String,Object> json = rb.req.getJSON();\n    Map<String,Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\",1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      Object jsonObj = json.get(\"facet\");\n      if (jsonObj instanceof Map) {\n        jsonFacet = (Map<String, Object>) jsonObj;\n      } else if (jsonObj != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Expected Map for 'facet', received \" + jsonObj.getClass().getSimpleName() + \"=\" + jsonObj);\n      }\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    Map<String,Object> facetInfo = null;\n    if (isShard) {\n      String jfacet = params.get(FACET_INFO);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no _facet_ info, then don't do anything.\n        return;\n      }\n      facetInfo = (Map<String,Object>) ObjectBuilder.fromJSON(jfacet);\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetRequest facetRequest = FacetRequest.parse(rb.req, jsonFacet);\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetInfo = facetInfo;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String, Object> json = rb.req.getJSON();\n    Map<String, Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\", 1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      Object jsonObj = json.get(\"facet\");\n      if (jsonObj instanceof Map) {\n        jsonFacet = (Map<String, Object>) jsonObj;\n      } else if (jsonObj != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Expected Map for 'facet', received \" + jsonObj.getClass().getSimpleName() + \"=\" + jsonObj);\n      }\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> facetInfo = null;\n    if (isShard) {\n      String jfacet = params.get(FACET_INFO);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no _facet_ info, then don't do anything.\n        return;\n      }\n      facetInfo = (Map<String, Object>) fromJSONString(jfacet);\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetRequest facetRequest = FacetRequest.parse(rb.req, jsonFacet);\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetInfo = facetInfo;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    Map<String,Object> json = rb.req.getJSON();\n    Map<String,Object> jsonFacet = null;\n    if (json == null) {\n      int version = rb.req.getParams().getInt(\"facet.version\",1);\n      if (version <= 1) return;\n      boolean facetsEnabled = rb.req.getParams().getBool(FacetParams.FACET, false);\n      if (!facetsEnabled) return;\n      jsonFacet = new LegacyFacet(rb.req.getParams()).getLegacy();\n    } else {\n      Object jsonObj = json.get(\"facet\");\n      if (jsonObj instanceof Map) {\n        jsonFacet = (Map<String, Object>) jsonObj;\n      } else if (jsonObj != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Expected Map for 'facet', received \" + jsonObj.getClass().getSimpleName() + \"=\" + jsonObj);\n      }\n    }\n    if (jsonFacet == null) return;\n\n    SolrParams params = rb.req.getParams();\n\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    Map<String,Object> facetInfo = null;\n    if (isShard) {\n      String jfacet = params.get(FACET_INFO);\n      if (jfacet == null) {\n        // if this is a shard request, but there is no _facet_ info, then don't do anything.\n        return;\n      }\n      facetInfo = (Map<String,Object>) fromJSONString(jfacet);\n    }\n\n    // At this point, we know we need to do something.  Create and save the state.\n    rb.setNeedDocSet(true);\n\n    // Parse the facet in the prepare phase?\n    FacetRequest facetRequest = FacetRequest.parse(rb.req, jsonFacet);\n\n    FacetComponentState fcState = new FacetComponentState();\n    fcState.rb = rb;\n    fcState.isShard = isShard;\n    fcState.facetInfo = facetInfo;\n    fcState.facetCommands = jsonFacet;\n    fcState.facetRequest = facetRequest;\n\n    rb.req.getContext().put(FacetComponentState.class, fcState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ab027bdfe663227636ccbeda13ae82add302939":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"1918d03541b875664e27eae44b6b157da044f0b8":["2ab027bdfe663227636ccbeda13ae82add302939"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1","2ab027bdfe663227636ccbeda13ae82add302939"],"11ab475c994c79138885cc8a30b2641d929cdc43":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["1918d03541b875664e27eae44b6b157da044f0b8"],"8ec805ca8fedc0166461148c7182f1bcbbd18ee1":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1","2ab027bdfe663227636ccbeda13ae82add302939"]},"commit2Childs":{"2ab027bdfe663227636ccbeda13ae82add302939":["1918d03541b875664e27eae44b6b157da044f0b8","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1918d03541b875664e27eae44b6b157da044f0b8":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"11ab475c994c79138885cc8a30b2641d929cdc43":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","11ab475c994c79138885cc8a30b2641d929cdc43","8ec805ca8fedc0166461148c7182f1bcbbd18ee1"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"8ec805ca8fedc0166461148c7182f1bcbbd18ee1":["2ab027bdfe663227636ccbeda13ae82add302939","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","11ab475c994c79138885cc8a30b2641d929cdc43","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}