{"path":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","commits":[{"id":"eb2037f0b6c95cf65a182dc85883bca429889705","date":1314326112,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n    if (VERBOSE) {\n      System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n    }\n    \n    // only print iteration info if the user requested more than one iterations\n    final boolean verbose = VERBOSE && TEST_ITER > 1;\n    \n    final int currentIter[] = new int[1];\n    arg1.addListener(new RunListener() {\n      @Override\n      public void testFailure(Failure failure) throws Exception {\n        if (verbose) {\n          System.out.println(\"\\nNOTE: iteration \" + currentIter[0] + \" failed! \");\n        }\n      }\n    });\n    for (int i = 0; i < TEST_ITER; i++) {\n      currentIter[0] = i;\n      if (verbose) {\n        System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n      }\n      super.runChild(arg0, arg1);\n      if (LuceneTestCase.testsFailed) {\n        if (i >= TEST_ITER_MIN - 1) { // XXX is this still off-by-one?\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","sourceNew":"  @Override\n  protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n    if (VERBOSE) {\n      System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n    }\n    \n    // only print iteration info if the user requested more than one iterations\n    final boolean verbose = VERBOSE && TEST_ITER > 1;\n    \n    final int currentIter[] = new int[1];\n    arg1.addListener(new RunListener() {\n      @Override\n      public void testFailure(Failure failure) throws Exception {\n        if (verbose) {\n          System.out.println(\"\\nNOTE: iteration \" + currentIter[0] + \" failed! \");\n        }\n      }\n    });\n    for (int i = 0; i < TEST_ITER; i++) {\n      currentIter[0] = i;\n      if (verbose) {\n        System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n      }\n      super.runChild(arg0, arg1);\n      if (LuceneTestCase.testsFailed) {\n        if (i >= TEST_ITER_MIN - 1) { // XXX is this still off-by-one?\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n    if (VERBOSE) {\n      System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n    }\n    \n    // only print iteration info if the user requested more than one iterations\n    final boolean verbose = VERBOSE && TEST_ITER > 1;\n    \n    final int currentIter[] = new int[1];\n    arg1.addListener(new RunListener() {\n      @Override\n      public void testFailure(Failure failure) throws Exception {\n        if (verbose) {\n          System.out.println(\"\\nNOTE: iteration \" + currentIter[0] + \" failed! \");\n        }\n      }\n    });\n    for (int i = 0; i < TEST_ITER; i++) {\n      currentIter[0] = i;\n      if (verbose) {\n        System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n      }\n      super.runChild(arg0, arg1);\n      if (LuceneTestCase.testsFailed) {\n        if (i >= TEST_ITER_MIN - 1) { // XXX is this still off-by-one?\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["eb2037f0b6c95cf65a182dc85883bca429889705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eb2037f0b6c95cf65a182dc85883bca429889705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eb2037f0b6c95cf65a182dc85883bca429889705"],"eb2037f0b6c95cf65a182dc85883bca429889705":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}