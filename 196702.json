{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#convertTupleToSolrDocument(Tuple).mjava","commits":[{"id":"a027750b86452a8dcd054ac993d54b203dae9102","date":1451953949,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#convertTupleToSolrDocument(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  private SolrInputDocument convertTupleToSolrDocument(Tuple tuple) {\n    SolrInputDocument doc = new SolrInputDocument();\n    for (Object field : tuple.fields.keySet()) {\n      if (! ((String)field).equals(\"_version_\")) {\n        Object value = tuple.get(field);\n        if (value instanceof List) {\n          addMultivaluedField(doc, (String)field, (List<Object>)value);\n        } else {\n          doc.addField((String)field, tuple.get(field));\n        }\n      }\n    }\n    LOG.debug(\"Tuple [{}] was converted into SolrInputDocument [{}].\", tuple, doc);\n    \n    return doc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#convertTupleToSolrDocument(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#convertTupleToSolrDocument(Tuple).mjava","sourceNew":"  private SolrInputDocument convertTupleToSolrDocument(Tuple tuple) {\n    SolrInputDocument doc = new SolrInputDocument();\n    for (Object field : tuple.fields.keySet()) {\n      if (! field.equals(VERSION_FIELD)) {\n        Object value = tuple.get(field);\n        if (value instanceof List) {\n          addMultivaluedField(doc, (String)field, (List<Object>)value);\n        } else {\n          doc.addField((String)field, tuple.get(field));\n        }\n      }\n    }\n    LOG.debug(\"Tuple [{}] was converted into SolrInputDocument [{}].\", tuple, doc);\n    \n    return doc;\n  }\n\n","sourceOld":"  private SolrInputDocument convertTupleToSolrDocument(Tuple tuple) {\n    SolrInputDocument doc = new SolrInputDocument();\n    for (Object field : tuple.fields.keySet()) {\n      if (! ((String)field).equals(\"_version_\")) {\n        Object value = tuple.get(field);\n        if (value instanceof List) {\n          addMultivaluedField(doc, (String)field, (List<Object>)value);\n        } else {\n          doc.addField((String)field, tuple.get(field));\n        }\n      }\n    }\n    LOG.debug(\"Tuple [{}] was converted into SolrInputDocument [{}].\", tuple, doc);\n    \n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#convertTupleToSolrDocument(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#convertTupleToSolrDocument(Tuple).mjava","sourceNew":"  private SolrInputDocument convertTupleToSolrDocument(Tuple tuple) {\n    SolrInputDocument doc = new SolrInputDocument();\n    for (Object field : tuple.fields.keySet()) {\n      if (! field.equals(VERSION_FIELD)) {\n        Object value = tuple.get(field);\n        if (value instanceof List) {\n          addMultivaluedField(doc, (String)field, (List<Object>)value);\n        } else {\n          doc.addField((String)field, tuple.get(field));\n        }\n      }\n    }\n    LOG.debug(\"Tuple [{}] was converted into SolrInputDocument [{}].\", tuple, doc);\n    \n    return doc;\n  }\n\n","sourceOld":"  private SolrInputDocument convertTupleToSolrDocument(Tuple tuple) {\n    SolrInputDocument doc = new SolrInputDocument();\n    for (Object field : tuple.fields.keySet()) {\n      if (! ((String)field).equals(\"_version_\")) {\n        Object value = tuple.get(field);\n        if (value instanceof List) {\n          addMultivaluedField(doc, (String)field, (List<Object>)value);\n        } else {\n          doc.addField((String)field, tuple.get(field));\n        }\n      }\n    }\n    LOG.debug(\"Tuple [{}] was converted into SolrInputDocument [{}].\", tuple, doc);\n    \n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#convertTupleToSolrDocument(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#convertTupleToSolrDocument(Tuple).mjava","sourceNew":"  private SolrInputDocument convertTupleToSolrDocument(Tuple tuple) {\n    SolrInputDocument doc = new SolrInputDocument();\n    for (Object field : tuple.fields.keySet()) {\n      if (! field.equals(VERSION_FIELD)) {\n        Object value = tuple.get(field);\n        if (value instanceof List) {\n          addMultivaluedField(doc, (String)field, (List<Object>)value);\n        } else {\n          doc.addField((String)field, tuple.get(field));\n        }\n      }\n    }\n    log.debug(\"Tuple [{}] was converted into SolrInputDocument [{}].\", tuple, doc);\n    \n    return doc;\n  }\n\n","sourceOld":"  private SolrInputDocument convertTupleToSolrDocument(Tuple tuple) {\n    SolrInputDocument doc = new SolrInputDocument();\n    for (Object field : tuple.fields.keySet()) {\n      if (! field.equals(VERSION_FIELD)) {\n        Object value = tuple.get(field);\n        if (value instanceof List) {\n          addMultivaluedField(doc, (String)field, (List<Object>)value);\n        } else {\n          doc.addField((String)field, tuple.get(field));\n        }\n      }\n    }\n    LOG.debug(\"Tuple [{}] was converted into SolrInputDocument [{}].\", tuple, doc);\n    \n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140a95988ddfbe87c2376f5fed6acae475ea11fc","date":1580924964,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#convertTupleToSolrDocument(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#convertTupleToSolrDocument(Tuple).mjava","sourceNew":"  private SolrInputDocument convertTupleToSolrDocument(Tuple tuple) {\n    SolrInputDocument doc = new SolrInputDocument();\n    for (Object field : tuple.fields.keySet()) {\n\n      if (! (field.equals(CommonParams.VERSION_FIELD) && pruneVersionField)) {\n        Object value = tuple.get(field);\n        if (value instanceof List) {\n          addMultivaluedField(doc, (String)field, (List<Object>)value);\n        } else {\n          doc.addField((String)field, tuple.get(field));\n        }\n      }\n    }\n    log.debug(\"Tuple [{}] was converted into SolrInputDocument [{}].\", tuple, doc);\n    \n    return doc;\n  }\n\n","sourceOld":"  private SolrInputDocument convertTupleToSolrDocument(Tuple tuple) {\n    SolrInputDocument doc = new SolrInputDocument();\n    for (Object field : tuple.fields.keySet()) {\n      if (! field.equals(VERSION_FIELD)) {\n        Object value = tuple.get(field);\n        if (value instanceof List) {\n          addMultivaluedField(doc, (String)field, (List<Object>)value);\n        } else {\n          doc.addField((String)field, tuple.get(field));\n        }\n      }\n    }\n    log.debug(\"Tuple [{}] was converted into SolrInputDocument [{}].\", tuple, doc);\n    \n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#convertTupleToSolrDocument(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#convertTupleToSolrDocument(Tuple).mjava","sourceNew":"  private SolrInputDocument convertTupleToSolrDocument(Tuple tuple) {\n    SolrInputDocument doc = new SolrInputDocument();\n    for (Object field : tuple.getFields().keySet()) {\n\n      if (! (field.equals(CommonParams.VERSION_FIELD) && pruneVersionField)) {\n        Object value = tuple.get(field);\n        if (value instanceof List) {\n          addMultivaluedField(doc, (String)field, (List<Object>)value);\n        } else {\n          doc.addField((String)field, tuple.get(field));\n        }\n      }\n    }\n    log.debug(\"Tuple [{}] was converted into SolrInputDocument [{}].\", tuple, doc);\n    \n    return doc;\n  }\n\n","sourceOld":"  private SolrInputDocument convertTupleToSolrDocument(Tuple tuple) {\n    SolrInputDocument doc = new SolrInputDocument();\n    for (Object field : tuple.fields.keySet()) {\n\n      if (! (field.equals(CommonParams.VERSION_FIELD) && pruneVersionField)) {\n        Object value = tuple.get(field);\n        if (value instanceof List) {\n          addMultivaluedField(doc, (String)field, (List<Object>)value);\n        } else {\n          doc.addField((String)field, tuple.get(field));\n        }\n      }\n    }\n    log.debug(\"Tuple [{}] was converted into SolrInputDocument [{}].\", tuple, doc);\n    \n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#convertTupleToSolrDocument(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UpdateStream#convertTupleToSolrDocument(Tuple).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private SolrInputDocument convertTupleToSolrDocument(Tuple tuple) {\n    SolrInputDocument doc = new SolrInputDocument();\n    for (Object field : tuple.getFields().keySet()) {\n\n      if (! (field.equals(CommonParams.VERSION_FIELD) && pruneVersionField)) {\n        Object value = tuple.get(field);\n        if (value instanceof List) {\n          addMultivaluedField(doc, (String)field, (List<Object>)value);\n        } else {\n          doc.addField((String)field, tuple.get(field));\n        }\n      }\n    }\n    log.debug(\"Tuple [{}] was converted into SolrInputDocument [{}].\", tuple, doc);\n    \n    return doc;\n  }\n\n","sourceOld":"  private SolrInputDocument convertTupleToSolrDocument(Tuple tuple) {\n    SolrInputDocument doc = new SolrInputDocument();\n    for (Object field : tuple.getFields().keySet()) {\n\n      if (! (field.equals(CommonParams.VERSION_FIELD) && pruneVersionField)) {\n        Object value = tuple.get(field);\n        if (value instanceof List) {\n          addMultivaluedField(doc, (String)field, (List<Object>)value);\n        } else {\n          doc.addField((String)field, tuple.get(field));\n        }\n      }\n    }\n    log.debug(\"Tuple [{}] was converted into SolrInputDocument [{}].\", tuple, doc);\n    \n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["a027750b86452a8dcd054ac993d54b203dae9102"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["a027750b86452a8dcd054ac993d54b203dae9102"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"140a95988ddfbe87c2376f5fed6acae475ea11fc":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["804a8d5358fe7b7563b85ee7838714d720b89272"],"804a8d5358fe7b7563b85ee7838714d720b89272":["140a95988ddfbe87c2376f5fed6acae475ea11fc"],"a027750b86452a8dcd054ac993d54b203dae9102":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["6d2dadc1f5ca8703d8659f4964961f9967935d75"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a027750b86452a8dcd054ac993d54b203dae9102"],"140a95988ddfbe87c2376f5fed6acae475ea11fc":["804a8d5358fe7b7563b85ee7838714d720b89272"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a027750b86452a8dcd054ac993d54b203dae9102":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75"],"804a8d5358fe7b7563b85ee7838714d720b89272":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["140a95988ddfbe87c2376f5fed6acae475ea11fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}