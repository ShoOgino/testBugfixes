{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testLUCENE8227().mjava","commits":[{"id":"2bc94776f916d82610a187b5a0b025589659621b","date":1522334248,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testLUCENE8227().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   [lat=-0.63542308910253, lon=0.9853722928232957([X=0.4446759777403525, Y=0.6707549854468698, Z=-0.5934780737681111])], \n  [lat=0.0, lon=0.0([X=1.0011188539924791, Y=0.0, Z=0.0])], \n  [lat=0.45435018176633574, lon=3.141592653589793([X=-0.8989684544372841, Y=1.1009188402610632E-16, Z=0.4390846549572752])], \n  [lat=-0.375870856827283, lon=2.9129132647718414([X=-0.9065744420970767, Y=0.21100590938346708, Z=-0.36732668582405886])], \n  [lat=-1.2205765069413237, lon=3.141592653589793([X=-0.3424714964202101, Y=4.194066218902145E-17, Z=-0.9375649457139603])]}}\n  \n   [junit4]   1>       unquantized=[lat=-3.1780051348770987E-74, lon=-3.032608859187692([X=-0.9951793580358298, Y=-0.1088898762907205, Z=-3.181560858610375E-74])]\n   [junit4]   1>       quantized=[X=-0.9951793580415914, Y=-0.10888987641797832, Z=-2.3309121299774915E-10]\n  */\n  @Test\n  @Ignore\n  public void testLUCENE8227() throws Exception {\n    List<GeoPoint> points = new ArrayList<>();\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.63542308910253, 0.9853722928232957));\n    points.add(new GeoPoint(PlanetModel.WGS84, 0.0, 0.0));\n    points.add(new GeoPoint(PlanetModel.WGS84, 0.45435018176633574, 3.141592653589793));\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.375870856827283, 2.9129132647718414));\n    points.add(new GeoPoint(PlanetModel.WGS84, -1.2205765069413237, 3.141592653589793));\n    GeoPolygonFactory.PolygonDescription pd = new GeoPolygonFactory.PolygonDescription(points);\n    \n    for (int i = 0; i < points.size(); i++) {\n      System.out.println(\"Point \"+i+\": \"+points.get(i));\n    }\n\n    final GeoPoint unquantized = new GeoPoint(PlanetModel.WGS84, -3.1780051348770987E-74, -3.032608859187692);\n    final GeoPoint quantized = new GeoPoint(-0.9951793580415914, -0.10888987641797832, -2.3309121299774915E-10);\n    \n    final GeoPoint negativeX = new GeoPoint(PlanetModel.WGS84, 0.0, Math.PI);\n    final GeoPoint negativeY = new GeoPoint(PlanetModel.WGS84, 0.0, -Math.PI * 0.5);\n    \n    // Construct a standard polygon first to see what that does\n    GeoPolygon standard = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, pd);\n    \n    System.out.println(\"Standard polygon: \"+standard);\n    \n    // This shows y < 0 hemisphere is all in-set\n    //assertTrue(standard.isWithin(negativeY));\n    // This should be in-set too, but isn't!!\n    assertTrue(standard.isWithin(negativeX));\n    \n/*\n    final XYZBounds standardBounds = new XYZBounds();\n    standard.getBounds(standardBounds);\n    final XYZSolid standardSolid = XYZSolidFactory.makeXYZSolid(PlanetModel.WGS84, standardBounds);\n\n    System.out.println(\"Standard bounds: \"+standardBounds);\n    \n    assertFalse(standardSolid.isWithin(quantized));\n    assertFalse(standardSolid.isWithin(unquantized));\n*/\n    // Now, both points should also not be in the poly\n    assertFalse(standard.isWithin(unquantized));\n    assertFalse(standard.isWithin(quantized));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b879b14da40ab73551b75835099a61e622a83d3","date":1522406622,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testLUCENE8227().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testLUCENE8227().mjava","sourceNew":"  /*\n   [lat=-0.63542308910253, lon=0.9853722928232957([X=0.4446759777403525, Y=0.6707549854468698, Z=-0.5934780737681111])], \n  [lat=0.0, lon=0.0([X=1.0011188539924791, Y=0.0, Z=0.0])], \n  [lat=0.45435018176633574, lon=3.141592653589793([X=-0.8989684544372841, Y=1.1009188402610632E-16, Z=0.4390846549572752])], \n  [lat=-0.375870856827283, lon=2.9129132647718414([X=-0.9065744420970767, Y=0.21100590938346708, Z=-0.36732668582405886])], \n  [lat=-1.2205765069413237, lon=3.141592653589793([X=-0.3424714964202101, Y=4.194066218902145E-17, Z=-0.9375649457139603])]}}\n  \n   [junit4]   1>       unquantized=[lat=-3.1780051348770987E-74, lon=-3.032608859187692([X=-0.9951793580358298, Y=-0.1088898762907205, Z=-3.181560858610375E-74])]\n   [junit4]   1>       quantized=[X=-0.9951793580415914, Y=-0.10888987641797832, Z=-2.3309121299774915E-10]\n  */\n  @Test\n  public void testLUCENE8227() throws Exception {\n    List<GeoPoint> points = new ArrayList<>();\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.63542308910253, 0.9853722928232957));\n    points.add(new GeoPoint(PlanetModel.WGS84, 0.0, 0.0));\n    points.add(new GeoPoint(PlanetModel.WGS84, 0.45435018176633574, 3.141592653589793));\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.375870856827283, 2.9129132647718414));\n    points.add(new GeoPoint(PlanetModel.WGS84, -1.2205765069413237, 3.141592653589793));\n    GeoPolygonFactory.PolygonDescription pd = new GeoPolygonFactory.PolygonDescription(points);\n    \n    /*\n    for (int i = 0; i < points.size(); i++) {\n      System.out.println(\"Point \"+i+\": \"+points.get(i));\n    }\n    */\n\n    final GeoPoint unquantized = new GeoPoint(PlanetModel.WGS84, -3.1780051348770987E-74, -3.032608859187692);\n    final GeoPoint quantized = new GeoPoint(-0.9951793580415914, -0.10888987641797832, -2.3309121299774915E-10);\n    \n    final GeoPoint negativeX = new GeoPoint(PlanetModel.WGS84, 0.0, Math.PI);\n    final GeoPoint negativeY = new GeoPoint(PlanetModel.WGS84, 0.0, -Math.PI * 0.5);\n    \n    // Construct a standard polygon first to see what that does.  This winds up being a large polygon under the covers.\n    GeoPolygon standard = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, pd);\n    \n    // This shows y < 0 hemisphere is all in-set\n    //assertTrue(standard.isWithin(negativeY));\n    // This should be in-set too, but isn't!!\n    assertTrue(standard.isWithin(negativeX));\n    \n    final XYZBounds standardBounds = new XYZBounds();\n    standard.getBounds(standardBounds);\n    final XYZSolid standardSolid = XYZSolidFactory.makeXYZSolid(PlanetModel.WGS84, standardBounds);\n\n    // If within shape, should be within bounds\n    assertTrue(standard.isWithin(quantized)?standardSolid.isWithin(quantized):true);\n    assertTrue(standard.isWithin(unquantized)?standardSolid.isWithin(unquantized):true);\n    \n  }\n\n","sourceOld":"  /*\n   [lat=-0.63542308910253, lon=0.9853722928232957([X=0.4446759777403525, Y=0.6707549854468698, Z=-0.5934780737681111])], \n  [lat=0.0, lon=0.0([X=1.0011188539924791, Y=0.0, Z=0.0])], \n  [lat=0.45435018176633574, lon=3.141592653589793([X=-0.8989684544372841, Y=1.1009188402610632E-16, Z=0.4390846549572752])], \n  [lat=-0.375870856827283, lon=2.9129132647718414([X=-0.9065744420970767, Y=0.21100590938346708, Z=-0.36732668582405886])], \n  [lat=-1.2205765069413237, lon=3.141592653589793([X=-0.3424714964202101, Y=4.194066218902145E-17, Z=-0.9375649457139603])]}}\n  \n   [junit4]   1>       unquantized=[lat=-3.1780051348770987E-74, lon=-3.032608859187692([X=-0.9951793580358298, Y=-0.1088898762907205, Z=-3.181560858610375E-74])]\n   [junit4]   1>       quantized=[X=-0.9951793580415914, Y=-0.10888987641797832, Z=-2.3309121299774915E-10]\n  */\n  @Test\n  @Ignore\n  public void testLUCENE8227() throws Exception {\n    List<GeoPoint> points = new ArrayList<>();\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.63542308910253, 0.9853722928232957));\n    points.add(new GeoPoint(PlanetModel.WGS84, 0.0, 0.0));\n    points.add(new GeoPoint(PlanetModel.WGS84, 0.45435018176633574, 3.141592653589793));\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.375870856827283, 2.9129132647718414));\n    points.add(new GeoPoint(PlanetModel.WGS84, -1.2205765069413237, 3.141592653589793));\n    GeoPolygonFactory.PolygonDescription pd = new GeoPolygonFactory.PolygonDescription(points);\n    \n    for (int i = 0; i < points.size(); i++) {\n      System.out.println(\"Point \"+i+\": \"+points.get(i));\n    }\n\n    final GeoPoint unquantized = new GeoPoint(PlanetModel.WGS84, -3.1780051348770987E-74, -3.032608859187692);\n    final GeoPoint quantized = new GeoPoint(-0.9951793580415914, -0.10888987641797832, -2.3309121299774915E-10);\n    \n    final GeoPoint negativeX = new GeoPoint(PlanetModel.WGS84, 0.0, Math.PI);\n    final GeoPoint negativeY = new GeoPoint(PlanetModel.WGS84, 0.0, -Math.PI * 0.5);\n    \n    // Construct a standard polygon first to see what that does\n    GeoPolygon standard = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, pd);\n    \n    System.out.println(\"Standard polygon: \"+standard);\n    \n    // This shows y < 0 hemisphere is all in-set\n    //assertTrue(standard.isWithin(negativeY));\n    // This should be in-set too, but isn't!!\n    assertTrue(standard.isWithin(negativeX));\n    \n/*\n    final XYZBounds standardBounds = new XYZBounds();\n    standard.getBounds(standardBounds);\n    final XYZSolid standardSolid = XYZSolidFactory.makeXYZSolid(PlanetModel.WGS84, standardBounds);\n\n    System.out.println(\"Standard bounds: \"+standardBounds);\n    \n    assertFalse(standardSolid.isWithin(quantized));\n    assertFalse(standardSolid.isWithin(unquantized));\n*/\n    // Now, both points should also not be in the poly\n    assertFalse(standard.isWithin(unquantized));\n    assertFalse(standard.isWithin(quantized));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e456381ade0a256838cbf558702284e345c8d3d6","date":1524920804,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testLUCENE8227().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testLUCENE8227().mjava","sourceNew":"  /*\n   [lat=-0.63542308910253, lon=0.9853722928232957([X=0.4446759777403525, Y=0.6707549854468698, Z=-0.5934780737681111])], \n  [lat=0.0, lon=0.0([X=1.0011188539924791, Y=0.0, Z=0.0])], \n  [lat=0.45435018176633574, lon=3.141592653589793([X=-0.8989684544372841, Y=1.1009188402610632E-16, Z=0.4390846549572752])], \n  [lat=-0.375870856827283, lon=2.9129132647718414([X=-0.9065744420970767, Y=0.21100590938346708, Z=-0.36732668582405886])], \n  [lat=-1.2205765069413237, lon=3.141592653589793([X=-0.3424714964202101, Y=4.194066218902145E-17, Z=-0.9375649457139603])]}}\n  \n   [junit4]   1>       unquantized=[lat=-3.1780051348770987E-74, lon=-3.032608859187692([X=-0.9951793580358298, Y=-0.1088898762907205, Z=-3.181560858610375E-74])]\n   [junit4]   1>       quantized=[X=-0.9951793580415914, Y=-0.10888987641797832, Z=-2.3309121299774915E-10]\n  */\n  @Test\n  public void testLUCENE8227() throws Exception {\n    List<GeoPoint> points = new ArrayList<>();\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.63542308910253, 0.9853722928232957));\n    points.add(new GeoPoint(PlanetModel.WGS84, 0.0, 0.0));\n    points.add(new GeoPoint(PlanetModel.WGS84, 0.45435018176633574, 3.141592653589793));\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.375870856827283, 2.9129132647718414));\n    points.add(new GeoPoint(PlanetModel.WGS84, -1.2205765069413237, 3.141592653589793));\n    GeoPolygonFactory.PolygonDescription pd = new GeoPolygonFactory.PolygonDescription(points);\n    \n    /*\n    for (int i = 0; i < points.size(); i++) {\n      System.out.println(\"Point \"+i+\": \"+points.get(i));\n    }\n    */\n\n    final GeoPoint unquantized = new GeoPoint(PlanetModel.WGS84, -3.1780051348770987E-74, -3.032608859187692);\n    //final GeoPoint quantized = new GeoPoint(-0.9951793580415914, -0.10888987641797832, -2.3309121299774915E-10);\n    \n    // Construct a standard polygon first to see what that does.  This winds up being a large polygon under the covers.\n    GeoPolygon standard = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, pd);\n    \n    // This should be in-set too, but isn't!!\n    assertTrue(standard.isWithin(PlanetModel.WGS84.MIN_X_POLE));\n    \n    final XYZBounds standardBounds = new XYZBounds();\n    standard.getBounds(standardBounds);\n    final XYZSolid standardSolid = XYZSolidFactory.makeXYZSolid(PlanetModel.WGS84, standardBounds);\n\n    // If within shape, should be within bounds\n    //assertTrue(standard.isWithin(quantized)?standardSolid.isWithin(quantized):true);\n    assertTrue(standard.isWithin(unquantized)?standardSolid.isWithin(unquantized):true);\n    \n  }\n\n","sourceOld":"  /*\n   [lat=-0.63542308910253, lon=0.9853722928232957([X=0.4446759777403525, Y=0.6707549854468698, Z=-0.5934780737681111])], \n  [lat=0.0, lon=0.0([X=1.0011188539924791, Y=0.0, Z=0.0])], \n  [lat=0.45435018176633574, lon=3.141592653589793([X=-0.8989684544372841, Y=1.1009188402610632E-16, Z=0.4390846549572752])], \n  [lat=-0.375870856827283, lon=2.9129132647718414([X=-0.9065744420970767, Y=0.21100590938346708, Z=-0.36732668582405886])], \n  [lat=-1.2205765069413237, lon=3.141592653589793([X=-0.3424714964202101, Y=4.194066218902145E-17, Z=-0.9375649457139603])]}}\n  \n   [junit4]   1>       unquantized=[lat=-3.1780051348770987E-74, lon=-3.032608859187692([X=-0.9951793580358298, Y=-0.1088898762907205, Z=-3.181560858610375E-74])]\n   [junit4]   1>       quantized=[X=-0.9951793580415914, Y=-0.10888987641797832, Z=-2.3309121299774915E-10]\n  */\n  @Test\n  public void testLUCENE8227() throws Exception {\n    List<GeoPoint> points = new ArrayList<>();\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.63542308910253, 0.9853722928232957));\n    points.add(new GeoPoint(PlanetModel.WGS84, 0.0, 0.0));\n    points.add(new GeoPoint(PlanetModel.WGS84, 0.45435018176633574, 3.141592653589793));\n    points.add(new GeoPoint(PlanetModel.WGS84, -0.375870856827283, 2.9129132647718414));\n    points.add(new GeoPoint(PlanetModel.WGS84, -1.2205765069413237, 3.141592653589793));\n    GeoPolygonFactory.PolygonDescription pd = new GeoPolygonFactory.PolygonDescription(points);\n    \n    /*\n    for (int i = 0; i < points.size(); i++) {\n      System.out.println(\"Point \"+i+\": \"+points.get(i));\n    }\n    */\n\n    final GeoPoint unquantized = new GeoPoint(PlanetModel.WGS84, -3.1780051348770987E-74, -3.032608859187692);\n    final GeoPoint quantized = new GeoPoint(-0.9951793580415914, -0.10888987641797832, -2.3309121299774915E-10);\n    \n    final GeoPoint negativeX = new GeoPoint(PlanetModel.WGS84, 0.0, Math.PI);\n    final GeoPoint negativeY = new GeoPoint(PlanetModel.WGS84, 0.0, -Math.PI * 0.5);\n    \n    // Construct a standard polygon first to see what that does.  This winds up being a large polygon under the covers.\n    GeoPolygon standard = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, pd);\n    \n    // This shows y < 0 hemisphere is all in-set\n    //assertTrue(standard.isWithin(negativeY));\n    // This should be in-set too, but isn't!!\n    assertTrue(standard.isWithin(negativeX));\n    \n    final XYZBounds standardBounds = new XYZBounds();\n    standard.getBounds(standardBounds);\n    final XYZSolid standardSolid = XYZSolidFactory.makeXYZSolid(PlanetModel.WGS84, standardBounds);\n\n    // If within shape, should be within bounds\n    assertTrue(standard.isWithin(quantized)?standardSolid.isWithin(quantized):true);\n    assertTrue(standard.isWithin(unquantized)?standardSolid.isWithin(unquantized):true);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2bc94776f916d82610a187b5a0b025589659621b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b879b14da40ab73551b75835099a61e622a83d3":["2bc94776f916d82610a187b5a0b025589659621b"],"e456381ade0a256838cbf558702284e345c8d3d6":["8b879b14da40ab73551b75835099a61e622a83d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e456381ade0a256838cbf558702284e345c8d3d6"]},"commit2Childs":{"2bc94776f916d82610a187b5a0b025589659621b":["8b879b14da40ab73551b75835099a61e622a83d3"],"8b879b14da40ab73551b75835099a61e622a83d3":["e456381ade0a256838cbf558702284e345c8d3d6"],"e456381ade0a256838cbf558702284e345c8d3d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2bc94776f916d82610a187b5a0b025589659621b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}