{"path":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/MatchRegionRetriever#computeOffsetRetrievalStrategies(IndexReader,Analyzer).mjava","commits":[{"id":"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c","date":1597407672,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/MatchRegionRetriever#computeOffsetRetrievalStrategies(IndexReader,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compute default strategies for retrieving offsets from {@link MatchesIterator}\n   * instances for a set of given fields.\n   */\n  public static OffsetsRetrievalStrategySupplier computeOffsetRetrievalStrategies(\n      IndexReader reader, Analyzer analyzer) {\n    FieldInfos fieldInfos = FieldInfos.getMergedFieldInfos(reader);\n    return (field) -> {\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n      if (fieldInfo == null) {\n        return (mi, doc) -> {\n          throw new IOException(\"FieldInfo is null for field: \" + field);\n        };\n      }\n\n      switch (fieldInfo.getIndexOptions()) {\n        case DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS:\n          return new OffsetsFromMatchIterator(field);\n\n        case DOCS_AND_FREQS_AND_POSITIONS:\n          return new OffsetsFromPositions(field, analyzer);\n\n        case DOCS_AND_FREQS:\n        case DOCS:\n          // By default retrieve offsets from individual tokens\n          // retrieved by the analyzer (possibly narrowed down to\n          // only those terms that the query hinted at when passed\n          // a QueryVisitor.\n          //\n          // Alternative straties are also possible and may make sense\n          // depending on the use case (OffsetsFromValues, for example).\n          return new OffsetsFromTokens(field, analyzer);\n\n        default:\n          return\n              (matchesIterator, doc) -> {\n                throw new IOException(\n                    \"Field is indexed without positions and/or offsets: \"\n                        + field\n                        + \", \"\n                        + fieldInfo.getIndexOptions());\n              };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"]},"commit2Childs":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}