{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    CloudState cloudState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getCloudState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + cloudState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n      \n      Map<String,ZkNodeProps> shardMap = replicas.getShards();\n      \n      for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    CloudState cloudState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getCloudState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + cloudState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n      \n      Map<String,ZkNodeProps> shardMap = replicas.getShards();\n      \n      for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    CloudState cloudState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getCloudState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + cloudState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n      \n      Map<String,ZkNodeProps> shardMap = replicas.getShards();\n      \n      for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df5e4eb47076636341c2cfdc58472477477d7e96","date":1329187541,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    CloudState cloudState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getCloudState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + cloudState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,ZkNodeProps> shardMap = replicas.getShards();\n      \n      for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    CloudState cloudState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getCloudState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + cloudState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n      \n      Map<String,ZkNodeProps> shardMap = replicas.getShards();\n      \n      for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,ZkNodeProps> shardMap = replicas.getShards();\n      \n      for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    CloudState cloudState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getCloudState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + cloudState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,ZkNodeProps> shardMap = replicas.getShards();\n      \n      for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,ZkNodeProps> shardMap = replicas.getShards();\n      \n      for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    CloudState cloudState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getCloudState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + cloudState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,ZkNodeProps> shardMap = replicas.getShards();\n      \n      for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,ZkNodeProps> shardMap = replicas.getShards();\n      \n      for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    CloudState cloudState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getCloudState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + cloudState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,ZkNodeProps> shardMap = replicas.getShards();\n      \n      for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,ZkNodeProps> shardMap = replicas.getShards();\n      \n      for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String coreNodeName) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        System.out.println(\"Key:\" + entry.getKey() + \" cnn:\" + coreNodeName);\n        if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(coreNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08d9bd48e30944cad98076e63887cbf9bbd963a1","date":1361938681,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String coreNodeName) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(coreNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String coreNodeName) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        System.out.println(\"Key:\" + entry.getKey() + \" cnn:\" + coreNodeName);\n        if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(coreNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","date":1371479482,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","sourceNew":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String coreNodeName) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(coreNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,String).mjava","sourceNew":null,"sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, String coreNodeName) {\n    ClusterState clusterState = req.getCore().getCoreDescriptor()\n        .getCoreContainer().getZkController().getClusterState();\n    List<Node> urls = new ArrayList<Node>();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(coreNodeName)) {\n          urls.add(new StdNode(nodeProps));\n        }\n      }\n    }\n    if (urls.size() == 0) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["08d9bd48e30944cad98076e63887cbf9bbd963a1"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["08d9bd48e30944cad98076e63887cbf9bbd963a1","2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"407687e67faf6e1f02a211ca078d8e3eed631027":["fa64435b5902ce266c23755a4a00691a3285dab8","c5a558d54519c651068ddb202f03befefb1514a7"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["df5e4eb47076636341c2cfdc58472477477d7e96","3f767f8c99eaedb984df754fe61f21c5de260f94"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["df5e4eb47076636341c2cfdc58472477477d7e96"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c5a558d54519c651068ddb202f03befefb1514a7":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["df5e4eb47076636341c2cfdc58472477477d7e96","3f767f8c99eaedb984df754fe61f21c5de260f94"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"df5e4eb47076636341c2cfdc58472477477d7e96":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"08d9bd48e30944cad98076e63887cbf9bbd963a1":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["c5a558d54519c651068ddb202f03befefb1514a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"]},"commit2Childs":{"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","df5e4eb47076636341c2cfdc58472477477d7e96"],"df5e4eb47076636341c2cfdc58472477477d7e96":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"08d9bd48e30944cad98076e63887cbf9bbd963a1":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["08d9bd48e30944cad98076e63887cbf9bbd963a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","0d22ac6a4146774c1bc8400160fc0b6150294e92","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}