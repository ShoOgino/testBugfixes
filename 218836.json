{"path":"lucene/core/src/java/org/apache/lucene/index/LeafMetaData#LeafMetaData(int,Version,Sort).mjava","commits":[{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LeafMetaData#LeafMetaData(int,Version,Sort).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: Sole constructor. Public for use by custom {@link LeafReader} impls. */\n  public LeafMetaData(int createdVersionMajor, Version minVersion, Sort sort) {\n    this.createdVersionMajor = createdVersionMajor;\n    if (createdVersionMajor > Version.LATEST.major) {\n      throw new IllegalArgumentException(\"createdVersionMajor is in the future: \" + createdVersionMajor);\n    }\n    if (createdVersionMajor < 6) {\n      throw new IllegalArgumentException(\"createdVersionMajor must be >= 6, got: \" + createdVersionMajor);\n    }\n    if (minVersion != null && minVersion.onOrAfter(Version.LUCENE_7_0_0) == false) {\n      throw new IllegalArgumentException(\"minVersion must be >= 7.0.0: \" + minVersion);\n    }\n    if (createdVersionMajor >= 7 && minVersion == null) {\n      throw new IllegalArgumentException(\"minVersion must be set when createdVersionMajor is >= 7\");\n    }\n    this.minVersion = minVersion;\n    this.sort = sort;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LeafMetaData#LeafMetaData(int,Version,Sort).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: Sole constructor. Public for use by custom {@link LeafReader} impls. */\n  public LeafMetaData(int createdVersionMajor, Version minVersion, Sort sort) {\n    this.createdVersionMajor = createdVersionMajor;\n    if (createdVersionMajor > Version.LATEST.major) {\n      throw new IllegalArgumentException(\"createdVersionMajor is in the future: \" + createdVersionMajor);\n    }\n    if (createdVersionMajor < 6) {\n      throw new IllegalArgumentException(\"createdVersionMajor must be >= 6, got: \" + createdVersionMajor);\n    }\n    if (minVersion != null && minVersion.onOrAfter(Version.LUCENE_7_0_0) == false) {\n      throw new IllegalArgumentException(\"minVersion must be >= 7.0.0: \" + minVersion);\n    }\n    if (createdVersionMajor >= 7 && minVersion == null) {\n      throw new IllegalArgumentException(\"minVersion must be set when createdVersionMajor is >= 7\");\n    }\n    this.minVersion = minVersion;\n    this.sort = sort;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d722b735bc69d2234e957cb69cf96ad28ea7e1c3","date":1546867201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LeafMetaData#LeafMetaData(int,Version,Sort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LeafMetaData#LeafMetaData(int,Version,Sort).mjava","sourceNew":"  /** Expert: Sole constructor. Public for use by custom {@link LeafReader} impls. */\n  public LeafMetaData(int createdVersionMajor, Version minVersion, Sort sort) {\n    this.createdVersionMajor = createdVersionMajor;\n    if (createdVersionMajor > Version.LATEST.major) {\n      throw new IllegalArgumentException(\"createdVersionMajor is in the future: \" + createdVersionMajor);\n    }\n    if (createdVersionMajor < 6) {\n      throw new IllegalArgumentException(\"createdVersionMajor must be >= 6, got: \" + createdVersionMajor);\n    }\n    if (createdVersionMajor >= 7 && minVersion == null) {\n      throw new IllegalArgumentException(\"minVersion must be set when createdVersionMajor is >= 7\");\n    }\n    this.minVersion = minVersion;\n    this.sort = sort;\n  }\n\n","sourceOld":"  /** Expert: Sole constructor. Public for use by custom {@link LeafReader} impls. */\n  public LeafMetaData(int createdVersionMajor, Version minVersion, Sort sort) {\n    this.createdVersionMajor = createdVersionMajor;\n    if (createdVersionMajor > Version.LATEST.major) {\n      throw new IllegalArgumentException(\"createdVersionMajor is in the future: \" + createdVersionMajor);\n    }\n    if (createdVersionMajor < 6) {\n      throw new IllegalArgumentException(\"createdVersionMajor must be >= 6, got: \" + createdVersionMajor);\n    }\n    if (minVersion != null && minVersion.onOrAfter(Version.LUCENE_7_0_0) == false) {\n      throw new IllegalArgumentException(\"minVersion must be >= 7.0.0: \" + minVersion);\n    }\n    if (createdVersionMajor >= 7 && minVersion == null) {\n      throw new IllegalArgumentException(\"minVersion must be set when createdVersionMajor is >= 7\");\n    }\n    this.minVersion = minVersion;\n    this.sort = sort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d722b735bc69d2234e957cb69cf96ad28ea7e1c3"],"d722b735bc69d2234e957cb69cf96ad28ea7e1c3":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","31741cf1390044e38a2ec3127cf302ba841bfd75"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d722b735bc69d2234e957cb69cf96ad28ea7e1c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["d722b735bc69d2234e957cb69cf96ad28ea7e1c3"]},"heads":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}