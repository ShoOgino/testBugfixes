{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","commits":[{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","pathOld":"/dev/null","sourceNew":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        DocsEnum docsEnum = termsEnum.docs(null, null);\n        assertTrue(docsEnum.nextDoc() == DocsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","pathOld":"/dev/null","sourceNew":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        DocsEnum docsEnum = termsEnum.docs(null, null);\n        assertTrue(docsEnum.nextDoc() == DocsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","sourceNew":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        DocsEnum docsEnum = termsEnum.docs(null, null);\n        assertTrue(docsEnum.nextDoc() == DocsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        DocsEnum docsEnum = termsEnum.docs(null, null);\n        assertTrue(docsEnum.nextDoc() == DocsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","sourceNew":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        DocsEnum docsEnum = termsEnum.docs(null, null);\n        assertTrue(docsEnum.nextDoc() == DocsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        DocsEnum docsEnum = termsEnum.docs(null, null);\n        assertTrue(docsEnum.nextDoc() == DocsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","sourceNew":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        DocsEnum docsEnum = termsEnum.docs(null, null);\n        assertTrue(docsEnum.nextDoc() == DocsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        DocsEnum docsEnum = termsEnum.docs(null, null);\n        assertTrue(docsEnum.nextDoc() == DocsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","sourceNew":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        DocsEnum docsEnum = termsEnum.docs(null, null);\n        assertTrue(docsEnum.nextDoc() == DocsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        DocsEnum docsEnum = termsEnum.docs(null, null);\n        assertTrue(docsEnum.nextDoc() == DocsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","sourceNew":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        PostingsEnum postingsEnum = termsEnum.postings(null, null);\n        assertTrue(postingsEnum.nextDoc() == PostingsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        DocsEnum docsEnum = termsEnum.docs(null, null);\n        assertTrue(docsEnum.nextDoc() == DocsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","sourceNew":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        PostingsEnum postingsEnum = termsEnum.postings(null, null);\n        assertTrue(postingsEnum.nextDoc() == PostingsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        PostingsEnum postingsEnum = termsEnum.postings(null, null);\n        assertTrue(postingsEnum.nextDoc() == PostingsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","sourceNew":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        PostingsEnum postingsEnum = termsEnum.postings(null);\n        assertTrue(postingsEnum.nextDoc() == PostingsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        PostingsEnum postingsEnum = termsEnum.postings(null, null);\n        assertTrue(postingsEnum.nextDoc() == PostingsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","sourceNew":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        PostingsEnum postingsEnum = termsEnum.postings(null);\n        assertTrue(postingsEnum.nextDoc() == PostingsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        PostingsEnum postingsEnum = termsEnum.postings(null);\n        assertTrue(postingsEnum.nextDoc() == PostingsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b6f36bb733c575dd04fdfa785127ebf82b0033f","date":1497502741,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","sourceNew":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(ar.getFieldInfos().size() <= 1);\n    Terms terms = ar.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        PostingsEnum postingsEnum = termsEnum.postings(null);\n        assertTrue(postingsEnum.nextDoc() == PostingsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        PostingsEnum postingsEnum = termsEnum.postings(null);\n        assertTrue(postingsEnum.nextDoc() == PostingsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","sourceNew":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(ar.getFieldInfos().size() <= 1);\n    Terms terms = ar.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        PostingsEnum postingsEnum = termsEnum.postings(null);\n        assertTrue(postingsEnum.nextDoc() == PostingsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        PostingsEnum postingsEnum = termsEnum.postings(null);\n        assertTrue(postingsEnum.nextDoc() == PostingsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testGhosts().mjava","sourceNew":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(ar.getFieldInfos().size() <= 1);\n    Terms terms = ar.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        PostingsEnum postingsEnum = termsEnum.postings(null);\n        assertTrue(postingsEnum.nextDoc() == PostingsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // tests that ghost fields still work\n  // TODO: can this be improved?\n  public void testGhosts() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    iwc.setCodec(getCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    doc.add(newStringField(\"ghostField\", \"something\", Field.Store.NO));\n    iw.addDocument(doc);\n    iw.forceMerge(1);\n    iw.deleteDocuments(new Term(\"ghostField\", \"something\")); // delete the only term for the field\n    iw.forceMerge(1);\n    DirectoryReader ir = iw.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    Fields fields = ar.fields();\n    // Ghost busting terms dict impls will have\n    // fields.size() == 0; all others must be == 1:\n    assertTrue(fields.size() <= 1);\n    Terms terms = fields.terms(\"ghostField\");\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      BytesRef term = termsEnum.next();\n      if (term != null) {\n        PostingsEnum postingsEnum = termsEnum.postings(null);\n        assertTrue(postingsEnum.nextDoc() == PostingsEnum.NO_MORE_DOCS);\n      }\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["51f5280f31484820499077f41fcdfe92d527d9dc"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a45bec74b98f6fc05f52770cfb425739e6563960":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2b6f36bb733c575dd04fdfa785127ebf82b0033f":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"51f5280f31484820499077f41fcdfe92d527d9dc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"28288370235ed02234a64753cdbf0c6ec096304a":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","2b6f36bb733c575dd04fdfa785127ebf82b0033f"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["a45bec74b98f6fc05f52770cfb425739e6563960"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","2b6f36bb733c575dd04fdfa785127ebf82b0033f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a45bec74b98f6fc05f52770cfb425739e6563960":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"2b6f36bb733c575dd04fdfa785127ebf82b0033f":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["51f5280f31484820499077f41fcdfe92d527d9dc"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["2b6f36bb733c575dd04fdfa785127ebf82b0033f","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}