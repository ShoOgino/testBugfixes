{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","sourceNew":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means closing the current\n   * {@link OverseerTriggerThread} (and optionally killing a node) then starting a new \n   * {@link OverseerTriggerThread}.\n   * All background tasks currently in progress will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   * @see #getOverseerTriggerThread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    log.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      log.info(\"  = killing node \" + killNodeId);\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new DefaultSolrThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this,\n        new CloudConfig.CloudConfigBuilder(\"nonexistent\", 0, \"sim\").build());\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","sourceOld":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means closing the current\n   * {@link OverseerTriggerThread} (and optionally killing a node) then starting a new \n   * {@link OverseerTriggerThread}.\n   * All background tasks currently in progress will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   * @see #getOverseerTriggerThread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    log.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      log.info(\"  = killing node \" + killNodeId);\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new DefaultSolrThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this,\n        new CloudConfig.CloudConfigBuilder(\"nonexistent\", 0, \"sim\").build());\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca","date":1586138114,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","sourceNew":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means closing the current\n   * {@link OverseerTriggerThread} (and optionally killing a node) then starting a new \n   * {@link OverseerTriggerThread}.\n   * All background tasks currently in progress will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   * @see #getOverseerTriggerThread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    log.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      log.info(\"  = killing node \" + killNodeId);\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new DefaultSolrThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this);\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","sourceOld":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means closing the current\n   * {@link OverseerTriggerThread} (and optionally killing a node) then starting a new \n   * {@link OverseerTriggerThread}.\n   * All background tasks currently in progress will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   * @see #getOverseerTriggerThread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    log.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      log.info(\"  = killing node \" + killNodeId);\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new DefaultSolrThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this,\n        new CloudConfig.CloudConfigBuilder(\"nonexistent\", 0, \"sim\").build());\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","sourceNew":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means closing the current\n   * {@link OverseerTriggerThread} (and optionally killing a node) then starting a new \n   * {@link OverseerTriggerThread}.\n   * All background tasks currently in progress will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   * @see #getOverseerTriggerThread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    log.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      log.info(\"  = killing node \" + killNodeId);\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new SolrNamedThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this);\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","sourceOld":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means closing the current\n   * {@link OverseerTriggerThread} (and optionally killing a node) then starting a new \n   * {@link OverseerTriggerThread}.\n   * All background tasks currently in progress will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   * @see #getOverseerTriggerThread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    log.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      log.info(\"  = killing node \" + killNodeId);\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new DefaultSolrThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this);\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","sourceNew":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means closing the current\n   * {@link OverseerTriggerThread} (and optionally killing a node) then starting a new \n   * {@link OverseerTriggerThread}.\n   * All background tasks currently in progress will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   * @see #getOverseerTriggerThread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    log.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      log.info(\"  = killing node {}\", killNodeId);\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new SolrNamedThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this);\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","sourceOld":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means closing the current\n   * {@link OverseerTriggerThread} (and optionally killing a node) then starting a new \n   * {@link OverseerTriggerThread}.\n   * All background tasks currently in progress will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   * @see #getOverseerTriggerThread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    log.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      log.info(\"  = killing node \" + killNodeId);\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new SolrNamedThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this);\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means closing the current\n   * {@link OverseerTriggerThread} (and optionally killing a node) then starting a new \n   * {@link OverseerTriggerThread}.\n   * All background tasks currently in progress will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   * @see #getOverseerTriggerThread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    log.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      log.info(\"  = killing node {}\", killNodeId);\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new SolrNamedThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this);\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca"],"e35f2dde06b35aa9904949a3a93fabd090371077":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["e35f2dde06b35aa9904949a3a93fabd090371077"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}