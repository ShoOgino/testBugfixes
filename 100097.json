{"path":"src/java/org/apache/lucene/analysis/ReusableAnalyzerBase#reusableTokenStream(String,Reader).mjava","commits":[{"id":"ddc5fbfd4c64963aba52713a4496522540294d69","date":1262508497,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/ReusableAnalyzerBase#reusableTokenStream(String,Reader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components if and only if the\n   * {@link TokenStreamComponents#reset(Reader)} method returned\n   * <code>true</code>. Otherwise a new instance of\n   * {@link TokenStreamComponents} is created.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   */\n  @Override\n  public final TokenStream reusableTokenStream(final String fieldName,\n      final Reader reader) throws IOException {\n    TokenStreamComponents streamChain = (TokenStreamComponents)\n    getPreviousTokenStream();\n    if (streamChain == null || !streamChain.reset(reader)) {\n      streamChain = createComponents(fieldName, reader);\n      setPreviousTokenStream(streamChain);\n    }\n    return streamChain.getTokenStream();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/ReusableAnalyzerBase#reusableTokenStream(String,Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/ReusableAnalyzerBase#reusableTokenStream(String,Reader).mjava","sourceNew":"  /**\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components if and only if the\n   * {@link TokenStreamComponents#reset(Reader)} method returned\n   * <code>true</code>. Otherwise a new instance of\n   * {@link TokenStreamComponents} is created.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   */\n  @Override\n  public final TokenStream reusableTokenStream(final String fieldName,\n      final Reader reader) throws IOException {\n    TokenStreamComponents streamChain = (TokenStreamComponents)\n    getPreviousTokenStream();\n    if (streamChain == null || !streamChain.reset(reader)) {\n      streamChain = createComponents(fieldName, reader);\n      setPreviousTokenStream(streamChain);\n    }\n    return streamChain.getTokenStream();\n  }\n\n","sourceOld":"  /**\n   * This method uses {@link #createComponents(String, Reader)} to obtain an\n   * instance of {@link TokenStreamComponents}. It returns the sink of the\n   * components and stores the components internally. Subsequent calls to this\n   * method will reuse the previously stored components if and only if the\n   * {@link TokenStreamComponents#reset(Reader)} method returned\n   * <code>true</code>. Otherwise a new instance of\n   * {@link TokenStreamComponents} is created.\n   * \n   * @param fieldName the name of the field the created TokenStream is used for\n   * @param reader the reader the streams source reads from\n   */\n  @Override\n  public final TokenStream reusableTokenStream(final String fieldName,\n      final Reader reader) throws IOException {\n    TokenStreamComponents streamChain = (TokenStreamComponents)\n    getPreviousTokenStream();\n    if (streamChain == null || !streamChain.reset(reader)) {\n      streamChain = createComponents(fieldName, reader);\n      setPreviousTokenStream(streamChain);\n    }\n    return streamChain.getTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ddc5fbfd4c64963aba52713a4496522540294d69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ddc5fbfd4c64963aba52713a4496522540294d69"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddc5fbfd4c64963aba52713a4496522540294d69"],"ddc5fbfd4c64963aba52713a4496522540294d69":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}