{"path":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testInvalidDocument().mjava","commits":[{"id":"19d28b1683d6453ee94a9205e2d32206d2dde868","date":1429661373,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testInvalidDocument().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInvalidDocument() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}nonexistentdocid\");\n    try {\n      cloudClient.query(params);\n      fail(\"The above query is supposed to throw an exception.\");\n    } catch (SolrServerException e) {\n      // Do nothing.\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"776417a20af3930a363a226c989867f65e93ee91","date":1434582735,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testInvalidDocument().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testInvalidDocument().mjava","sourceNew":"  @Test(expected=SolrException.class)\n  public void testInvalidDocument() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}999999\");\n    try {\n      cloudClient.query(params);\n      fail(\"The above query is supposed to throw an exception.\");\n    } catch (SolrServerException e) {\n      // Do nothing.\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidDocument() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}nonexistentdocid\");\n    try {\n      cloudClient.query(params);\n      fail(\"The above query is supposed to throw an exception.\");\n    } catch (SolrServerException e) {\n      // Do nothing.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebf70dabe6279454c5ff460bdea3f0dc2814a86","date":1463672611,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testInvalidDocument().mjava","sourceNew":null,"sourceOld":"  @Test(expected=SolrException.class)\n  public void testInvalidDocument() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}999999\");\n    try {\n      cloudClient.query(params);\n      fail(\"The above query is supposed to throw an exception.\");\n    } catch (SolrServerException e) {\n      // Do nothing.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testInvalidDocument().mjava","sourceNew":null,"sourceOld":"  @Test(expected=SolrException.class)\n  public void testInvalidDocument() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}999999\");\n    try {\n      cloudClient.query(params);\n      fail(\"The above query is supposed to throw an exception.\");\n    } catch (SolrServerException e) {\n      // Do nothing.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testInvalidDocument().mjava","sourceNew":null,"sourceOld":"  @Test(expected=SolrException.class)\n  public void testInvalidDocument() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.Q, \"{!mlt qf=lowerfilt}999999\");\n    try {\n      cloudClient.query(params);\n      fail(\"The above query is supposed to throw an exception.\");\n    } catch (SolrServerException e) {\n      // Do nothing.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19d28b1683d6453ee94a9205e2d32206d2dde868":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"776417a20af3930a363a226c989867f65e93ee91":["19d28b1683d6453ee94a9205e2d32206d2dde868"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["776417a20af3930a363a226c989867f65e93ee91"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["776417a20af3930a363a226c989867f65e93ee91","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["776417a20af3930a363a226c989867f65e93ee91","5ebf70dabe6279454c5ff460bdea3f0dc2814a86"]},"commit2Childs":{"19d28b1683d6453ee94a9205e2d32206d2dde868":["776417a20af3930a363a226c989867f65e93ee91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19d28b1683d6453ee94a9205e2d32206d2dde868"],"776417a20af3930a363a226c989867f65e93ee91":["5ebf70dabe6279454c5ff460bdea3f0dc2814a86","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}