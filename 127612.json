{"path":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","sourceNew":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      props.setProperty(\"mail.store.protocol\", protocol);\n      props.setProperty(\"mail.imap.fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.imap.timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.imap.connectiontimeout\", \"\" + cTimeout);\n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      mailbox.connect(host, user, password);\n      LOG.info(\"Connected to mailbox\");\n      return true;\n    } catch (MessagingException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Connection failed\", e);\n    }\n  }\n\n","sourceOld":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      props.setProperty(\"mail.store.protocol\", protocol);\n      props.setProperty(\"mail.imap.fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.imap.timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.imap.connectiontimeout\", \"\" + cTimeout);\n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      mailbox.connect(host, user, password);\n      LOG.info(\"Connected to mailbox\");\n      return true;\n    } catch (MessagingException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Connection failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","sourceNew":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      props.setProperty(\"mail.store.protocol\", protocol);\n      props.setProperty(\"mail.imap.fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.imap.timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.imap.connectiontimeout\", \"\" + cTimeout);\n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      mailbox.connect(host, user, password);\n      LOG.info(\"Connected to mailbox\");\n      return true;\n    } catch (MessagingException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Connection failed\", e);\n    }\n  }\n\n","sourceOld":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      props.setProperty(\"mail.store.protocol\", protocol);\n      props.setProperty(\"mail.imap.fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.imap.timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.imap.connectiontimeout\", \"\" + cTimeout);\n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      mailbox.connect(host, user, password);\n      LOG.info(\"Connected to mailbox\");\n      return true;\n    } catch (MessagingException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Connection failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36113efe922ae370819b20fba837a1a37d3dd2d8","date":1404234826,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","sourceNew":"  private boolean connectToMailBox() {\n    // this is needed to load the activation mail stuff correctly\n    // otherwise, the JavaMail multipart support doesn't get configured\n    // correctly, which leads to a class cast exception when processing\n    // multipart messages: IMAPInputStream cannot be cast to\n    // javax.mail.Multipart\n    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n    \n    try {\n      Properties props = new Properties();\n      if (System.getProperty(\"mail.debug\") != null) \n        props.setProperty(\"mail.debug\", System.getProperty(\"mail.debug\"));\n      \n      if ((\"imap\".equals(protocol) || \"imaps\".equals(protocol))\n          && \"imap.gmail.com\".equals(host)) {\n        LOG.info(\"Consider using 'gimaps' protocol instead of '\" + protocol\n            + \"' for enabling GMail specific extensions for \" + host);\n      }\n      \n      props.setProperty(\"mail.store.protocol\", protocol);\n      \n      String imapPropPrefix = protocol.startsWith(\"gimap\") ? \"gimap\" : \"imap\";\n      props.setProperty(\"mail.\" + imapPropPrefix + \".fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".connectiontimeout\", \"\" + cTimeout);\n      \n      int port = -1;\n      int colonAt = host.indexOf(\":\");\n      if (colonAt != -1) {\n        port = Integer.parseInt(host.substring(colonAt + 1));\n        host = host.substring(0, colonAt);\n      }\n      \n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      if (port != -1) {\n        mailbox.connect(host, port, user, password);\n      } else {\n        mailbox.connect(host, user, password);\n      }\n      LOG.info(\"Connected to \" + user + \"'s mailbox on \" + host);\n      \n      return true;\n    } catch (MessagingException e) {      \n      String errMsg = String.format(Locale.ENGLISH,\n          \"Failed to connect to %s server %s as user %s due to: %s\", protocol,\n          host, user, e.toString());\n      LOG.error(errMsg, e);\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          errMsg, e);\n    }\n  }\n\n","sourceOld":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      props.setProperty(\"mail.store.protocol\", protocol);\n      props.setProperty(\"mail.imap.fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.imap.timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.imap.connectiontimeout\", \"\" + cTimeout);\n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      mailbox.connect(host, user, password);\n      LOG.info(\"Connected to mailbox\");\n      return true;\n    } catch (MessagingException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Connection failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bac5e4f5082317c9a942b1deeeb22d6700ecff7","date":1404338458,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","sourceNew":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      props.setProperty(\"mail.store.protocol\", protocol);\n      props.setProperty(\"mail.imap.fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.imap.timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.imap.connectiontimeout\", \"\" + cTimeout);\n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      mailbox.connect(host, user, password);\n      LOG.info(\"Connected to mailbox\");\n      return true;\n    } catch (MessagingException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Connection failed\", e);\n    }\n  }\n\n","sourceOld":"  private boolean connectToMailBox() {\n    // this is needed to load the activation mail stuff correctly\n    // otherwise, the JavaMail multipart support doesn't get configured\n    // correctly, which leads to a class cast exception when processing\n    // multipart messages: IMAPInputStream cannot be cast to\n    // javax.mail.Multipart\n    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n    \n    try {\n      Properties props = new Properties();\n      if (System.getProperty(\"mail.debug\") != null) \n        props.setProperty(\"mail.debug\", System.getProperty(\"mail.debug\"));\n      \n      if ((\"imap\".equals(protocol) || \"imaps\".equals(protocol))\n          && \"imap.gmail.com\".equals(host)) {\n        LOG.info(\"Consider using 'gimaps' protocol instead of '\" + protocol\n            + \"' for enabling GMail specific extensions for \" + host);\n      }\n      \n      props.setProperty(\"mail.store.protocol\", protocol);\n      \n      String imapPropPrefix = protocol.startsWith(\"gimap\") ? \"gimap\" : \"imap\";\n      props.setProperty(\"mail.\" + imapPropPrefix + \".fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".connectiontimeout\", \"\" + cTimeout);\n      \n      int port = -1;\n      int colonAt = host.indexOf(\":\");\n      if (colonAt != -1) {\n        port = Integer.parseInt(host.substring(colonAt + 1));\n        host = host.substring(0, colonAt);\n      }\n      \n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      if (port != -1) {\n        mailbox.connect(host, port, user, password);\n      } else {\n        mailbox.connect(host, user, password);\n      }\n      LOG.info(\"Connected to \" + user + \"'s mailbox on \" + host);\n      \n      return true;\n    } catch (MessagingException e) {      \n      String errMsg = String.format(Locale.ENGLISH,\n          \"Failed to connect to %s server %s as user %s due to: %s\", protocol,\n          host, user, e.toString());\n      LOG.error(errMsg, e);\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          errMsg, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cd303657ee7726e12c45f9fd39b0285acf10c07","date":1405460668,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","sourceNew":"  private boolean connectToMailBox() {\n    // this is needed to load the activation mail stuff correctly\n    // otherwise, the JavaMail multipart support doesn't get configured\n    // correctly, which leads to a class cast exception when processing\n    // multipart messages: IMAPInputStream cannot be cast to\n    // javax.mail.Multipart\n    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n    \n    try {\n      Properties props = new Properties();\n      if (System.getProperty(\"mail.debug\") != null) \n        props.setProperty(\"mail.debug\", System.getProperty(\"mail.debug\"));\n      \n      if ((\"imap\".equals(protocol) || \"imaps\".equals(protocol))\n          && \"imap.gmail.com\".equals(host)) {\n        LOG.info(\"Consider using 'gimaps' protocol instead of '\" + protocol\n            + \"' for enabling GMail specific extensions for \" + host);\n      }\n      \n      props.setProperty(\"mail.store.protocol\", protocol);\n      \n      String imapPropPrefix = protocol.startsWith(\"gimap\") ? \"gimap\" : \"imap\";\n      props.setProperty(\"mail.\" + imapPropPrefix + \".fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".connectiontimeout\", \"\" + cTimeout);\n      \n      int port = -1;\n      int colonAt = host.indexOf(\":\");\n      if (colonAt != -1) {\n        port = Integer.parseInt(host.substring(colonAt + 1));\n        host = host.substring(0, colonAt);\n      }\n      \n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      if (port != -1) {\n        mailbox.connect(host, port, user, password);\n      } else {\n        mailbox.connect(host, user, password);\n      }\n      LOG.info(\"Connected to \" + user + \"'s mailbox on \" + host);\n      \n      return true;\n    } catch (MessagingException e) {      \n      String errMsg = String.format(Locale.ENGLISH,\n          \"Failed to connect to %s server %s as user %s due to: %s\", protocol,\n          host, user, e.toString());\n      LOG.error(errMsg, e);\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          errMsg, e);\n    }\n  }\n\n","sourceOld":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      props.setProperty(\"mail.store.protocol\", protocol);\n      props.setProperty(\"mail.imap.fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.imap.timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.imap.connectiontimeout\", \"\" + cTimeout);\n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      mailbox.connect(host, user, password);\n      LOG.info(\"Connected to mailbox\");\n      return true;\n    } catch (MessagingException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Connection failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a2748831fb25b0e9d5a4c315047bf877c887460","date":1498155650,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","sourceNew":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      if (System.getProperty(\"mail.debug\") != null) \n        props.setProperty(\"mail.debug\", System.getProperty(\"mail.debug\"));\n      \n      if ((\"imap\".equals(protocol) || \"imaps\".equals(protocol))\n          && \"imap.gmail.com\".equals(host)) {\n        LOG.info(\"Consider using 'gimaps' protocol instead of '\" + protocol\n            + \"' for enabling GMail specific extensions for \" + host);\n      }\n      \n      props.setProperty(\"mail.store.protocol\", protocol);\n      \n      String imapPropPrefix = protocol.startsWith(\"gimap\") ? \"gimap\" : \"imap\";\n      props.setProperty(\"mail.\" + imapPropPrefix + \".fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".connectiontimeout\", \"\" + cTimeout);\n      \n      int port = -1;\n      int colonAt = host.indexOf(\":\");\n      if (colonAt != -1) {\n        port = Integer.parseInt(host.substring(colonAt + 1));\n        host = host.substring(0, colonAt);\n      }\n      \n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      if (port != -1) {\n        mailbox.connect(host, port, user, password);\n      } else {\n        mailbox.connect(host, user, password);\n      }\n      LOG.info(\"Connected to \" + user + \"'s mailbox on \" + host);\n      \n      return true;\n    } catch (MessagingException e) {      \n      String errMsg = String.format(Locale.ENGLISH,\n          \"Failed to connect to %s server %s as user %s due to: %s\", protocol,\n          host, user, e.toString());\n      LOG.error(errMsg, e);\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          errMsg, e);\n    }\n  }\n\n","sourceOld":"  private boolean connectToMailBox() {\n    // this is needed to load the activation mail stuff correctly\n    // otherwise, the JavaMail multipart support doesn't get configured\n    // correctly, which leads to a class cast exception when processing\n    // multipart messages: IMAPInputStream cannot be cast to\n    // javax.mail.Multipart\n    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n    \n    try {\n      Properties props = new Properties();\n      if (System.getProperty(\"mail.debug\") != null) \n        props.setProperty(\"mail.debug\", System.getProperty(\"mail.debug\"));\n      \n      if ((\"imap\".equals(protocol) || \"imaps\".equals(protocol))\n          && \"imap.gmail.com\".equals(host)) {\n        LOG.info(\"Consider using 'gimaps' protocol instead of '\" + protocol\n            + \"' for enabling GMail specific extensions for \" + host);\n      }\n      \n      props.setProperty(\"mail.store.protocol\", protocol);\n      \n      String imapPropPrefix = protocol.startsWith(\"gimap\") ? \"gimap\" : \"imap\";\n      props.setProperty(\"mail.\" + imapPropPrefix + \".fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".connectiontimeout\", \"\" + cTimeout);\n      \n      int port = -1;\n      int colonAt = host.indexOf(\":\");\n      if (colonAt != -1) {\n        port = Integer.parseInt(host.substring(colonAt + 1));\n        host = host.substring(0, colonAt);\n      }\n      \n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      if (port != -1) {\n        mailbox.connect(host, port, user, password);\n      } else {\n        mailbox.connect(host, user, password);\n      }\n      LOG.info(\"Connected to \" + user + \"'s mailbox on \" + host);\n      \n      return true;\n    } catch (MessagingException e) {      \n      String errMsg = String.format(Locale.ENGLISH,\n          \"Failed to connect to %s server %s as user %s due to: %s\", protocol,\n          host, user, e.toString());\n      LOG.error(errMsg, e);\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          errMsg, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","sourceNew":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      if (System.getProperty(\"mail.debug\") != null) \n        props.setProperty(\"mail.debug\", System.getProperty(\"mail.debug\"));\n      \n      if ((\"imap\".equals(protocol) || \"imaps\".equals(protocol))\n          && \"imap.gmail.com\".equals(host)) {\n        LOG.info(\"Consider using 'gimaps' protocol instead of '\" + protocol\n            + \"' for enabling GMail specific extensions for \" + host);\n      }\n      \n      props.setProperty(\"mail.store.protocol\", protocol);\n      \n      String imapPropPrefix = protocol.startsWith(\"gimap\") ? \"gimap\" : \"imap\";\n      props.setProperty(\"mail.\" + imapPropPrefix + \".fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".connectiontimeout\", \"\" + cTimeout);\n      \n      int port = -1;\n      int colonAt = host.indexOf(\":\");\n      if (colonAt != -1) {\n        port = Integer.parseInt(host.substring(colonAt + 1));\n        host = host.substring(0, colonAt);\n      }\n      \n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      if (port != -1) {\n        mailbox.connect(host, port, user, password);\n      } else {\n        mailbox.connect(host, user, password);\n      }\n      LOG.info(\"Connected to \" + user + \"'s mailbox on \" + host);\n      \n      return true;\n    } catch (MessagingException e) {      \n      String errMsg = String.format(Locale.ENGLISH,\n          \"Failed to connect to %s server %s as user %s due to: %s\", protocol,\n          host, user, e.toString());\n      LOG.error(errMsg, e);\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          errMsg, e);\n    }\n  }\n\n","sourceOld":"  private boolean connectToMailBox() {\n    // this is needed to load the activation mail stuff correctly\n    // otherwise, the JavaMail multipart support doesn't get configured\n    // correctly, which leads to a class cast exception when processing\n    // multipart messages: IMAPInputStream cannot be cast to\n    // javax.mail.Multipart\n    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n    \n    try {\n      Properties props = new Properties();\n      if (System.getProperty(\"mail.debug\") != null) \n        props.setProperty(\"mail.debug\", System.getProperty(\"mail.debug\"));\n      \n      if ((\"imap\".equals(protocol) || \"imaps\".equals(protocol))\n          && \"imap.gmail.com\".equals(host)) {\n        LOG.info(\"Consider using 'gimaps' protocol instead of '\" + protocol\n            + \"' for enabling GMail specific extensions for \" + host);\n      }\n      \n      props.setProperty(\"mail.store.protocol\", protocol);\n      \n      String imapPropPrefix = protocol.startsWith(\"gimap\") ? \"gimap\" : \"imap\";\n      props.setProperty(\"mail.\" + imapPropPrefix + \".fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".connectiontimeout\", \"\" + cTimeout);\n      \n      int port = -1;\n      int colonAt = host.indexOf(\":\");\n      if (colonAt != -1) {\n        port = Integer.parseInt(host.substring(colonAt + 1));\n        host = host.substring(0, colonAt);\n      }\n      \n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      if (port != -1) {\n        mailbox.connect(host, port, user, password);\n      } else {\n        mailbox.connect(host, user, password);\n      }\n      LOG.info(\"Connected to \" + user + \"'s mailbox on \" + host);\n      \n      return true;\n    } catch (MessagingException e) {      \n      String errMsg = String.format(Locale.ENGLISH,\n          \"Failed to connect to %s server %s as user %s due to: %s\", protocol,\n          host, user, e.toString());\n      LOG.error(errMsg, e);\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          errMsg, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","sourceNew":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      if (System.getProperty(\"mail.debug\") != null) \n        props.setProperty(\"mail.debug\", System.getProperty(\"mail.debug\"));\n      \n      if ((\"imap\".equals(protocol) || \"imaps\".equals(protocol))\n          && \"imap.gmail.com\".equals(host)) {\n        LOG.info(\"Consider using 'gimaps' protocol instead of '\" + protocol\n            + \"' for enabling GMail specific extensions for \" + host);\n      }\n      \n      props.setProperty(\"mail.store.protocol\", protocol);\n      \n      String imapPropPrefix = protocol.startsWith(\"gimap\") ? \"gimap\" : \"imap\";\n      props.setProperty(\"mail.\" + imapPropPrefix + \".fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".connectiontimeout\", \"\" + cTimeout);\n      \n      int port = -1;\n      int colonAt = host.indexOf(\":\");\n      if (colonAt != -1) {\n        port = Integer.parseInt(host.substring(colonAt + 1));\n        host = host.substring(0, colonAt);\n      }\n      \n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      if (port != -1) {\n        mailbox.connect(host, port, user, password);\n      } else {\n        mailbox.connect(host, user, password);\n      }\n      LOG.info(\"Connected to \" + user + \"'s mailbox on \" + host);\n      \n      return true;\n    } catch (MessagingException e) {      \n      String errMsg = String.format(Locale.ENGLISH,\n          \"Failed to connect to %s server %s as user %s due to: %s\", protocol,\n          host, user, e.toString());\n      LOG.error(errMsg, e);\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          errMsg, e);\n    }\n  }\n\n","sourceOld":"  private boolean connectToMailBox() {\n    // this is needed to load the activation mail stuff correctly\n    // otherwise, the JavaMail multipart support doesn't get configured\n    // correctly, which leads to a class cast exception when processing\n    // multipart messages: IMAPInputStream cannot be cast to\n    // javax.mail.Multipart\n    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n    \n    try {\n      Properties props = new Properties();\n      if (System.getProperty(\"mail.debug\") != null) \n        props.setProperty(\"mail.debug\", System.getProperty(\"mail.debug\"));\n      \n      if ((\"imap\".equals(protocol) || \"imaps\".equals(protocol))\n          && \"imap.gmail.com\".equals(host)) {\n        LOG.info(\"Consider using 'gimaps' protocol instead of '\" + protocol\n            + \"' for enabling GMail specific extensions for \" + host);\n      }\n      \n      props.setProperty(\"mail.store.protocol\", protocol);\n      \n      String imapPropPrefix = protocol.startsWith(\"gimap\") ? \"gimap\" : \"imap\";\n      props.setProperty(\"mail.\" + imapPropPrefix + \".fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".connectiontimeout\", \"\" + cTimeout);\n      \n      int port = -1;\n      int colonAt = host.indexOf(\":\");\n      if (colonAt != -1) {\n        port = Integer.parseInt(host.substring(colonAt + 1));\n        host = host.substring(0, colonAt);\n      }\n      \n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      if (port != -1) {\n        mailbox.connect(host, port, user, password);\n      } else {\n        mailbox.connect(host, user, password);\n      }\n      LOG.info(\"Connected to \" + user + \"'s mailbox on \" + host);\n      \n      return true;\n    } catch (MessagingException e) {      \n      String errMsg = String.format(Locale.ENGLISH,\n          \"Failed to connect to %s server %s as user %s due to: %s\", protocol,\n          host, user, e.toString());\n      LOG.error(errMsg, e);\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          errMsg, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","sourceNew":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      if (System.getProperty(\"mail.debug\") != null) \n        props.setProperty(\"mail.debug\", System.getProperty(\"mail.debug\"));\n      \n      if ((\"imap\".equals(protocol) || \"imaps\".equals(protocol))\n          && \"imap.gmail.com\".equals(host)) {\n        log.info(\"Consider using 'gimaps' protocol instead of '\" + protocol\n            + \"' for enabling GMail specific extensions for \" + host);\n      }\n      \n      props.setProperty(\"mail.store.protocol\", protocol);\n      \n      String imapPropPrefix = protocol.startsWith(\"gimap\") ? \"gimap\" : \"imap\";\n      props.setProperty(\"mail.\" + imapPropPrefix + \".fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".connectiontimeout\", \"\" + cTimeout);\n      \n      int port = -1;\n      int colonAt = host.indexOf(\":\");\n      if (colonAt != -1) {\n        port = Integer.parseInt(host.substring(colonAt + 1));\n        host = host.substring(0, colonAt);\n      }\n      \n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      if (port != -1) {\n        mailbox.connect(host, port, user, password);\n      } else {\n        mailbox.connect(host, user, password);\n      }\n      log.info(\"Connected to \" + user + \"'s mailbox on \" + host);\n      \n      return true;\n    } catch (MessagingException e) {      \n      String errMsg = String.format(Locale.ENGLISH,\n          \"Failed to connect to %s server %s as user %s due to: %s\", protocol,\n          host, user, e.toString());\n      log.error(errMsg, e);\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          errMsg, e);\n    }\n  }\n\n","sourceOld":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      if (System.getProperty(\"mail.debug\") != null) \n        props.setProperty(\"mail.debug\", System.getProperty(\"mail.debug\"));\n      \n      if ((\"imap\".equals(protocol) || \"imaps\".equals(protocol))\n          && \"imap.gmail.com\".equals(host)) {\n        LOG.info(\"Consider using 'gimaps' protocol instead of '\" + protocol\n            + \"' for enabling GMail specific extensions for \" + host);\n      }\n      \n      props.setProperty(\"mail.store.protocol\", protocol);\n      \n      String imapPropPrefix = protocol.startsWith(\"gimap\") ? \"gimap\" : \"imap\";\n      props.setProperty(\"mail.\" + imapPropPrefix + \".fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".connectiontimeout\", \"\" + cTimeout);\n      \n      int port = -1;\n      int colonAt = host.indexOf(\":\");\n      if (colonAt != -1) {\n        port = Integer.parseInt(host.substring(colonAt + 1));\n        host = host.substring(0, colonAt);\n      }\n      \n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      if (port != -1) {\n        mailbox.connect(host, port, user, password);\n      } else {\n        mailbox.connect(host, user, password);\n      }\n      LOG.info(\"Connected to \" + user + \"'s mailbox on \" + host);\n      \n      return true;\n    } catch (MessagingException e) {      \n      String errMsg = String.format(Locale.ENGLISH,\n          \"Failed to connect to %s server %s as user %s due to: %s\", protocol,\n          host, user, e.toString());\n      LOG.error(errMsg, e);\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          errMsg, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","sourceNew":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      if (System.getProperty(\"mail.debug\") != null) \n        props.setProperty(\"mail.debug\", System.getProperty(\"mail.debug\"));\n      \n      if ((\"imap\".equals(protocol) || \"imaps\".equals(protocol))\n          && \"imap.gmail.com\".equals(host)) {\n        log.info(\"Consider using 'gimaps' protocol instead of '{}' for enabling GMail specific extensions for {}\"\n            , protocol, host);\n      }\n      \n      props.setProperty(\"mail.store.protocol\", protocol);\n      \n      String imapPropPrefix = protocol.startsWith(\"gimap\") ? \"gimap\" : \"imap\";\n      props.setProperty(\"mail.\" + imapPropPrefix + \".fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".connectiontimeout\", \"\" + cTimeout);\n      \n      int port = -1;\n      int colonAt = host.indexOf(\":\");\n      if (colonAt != -1) {\n        port = Integer.parseInt(host.substring(colonAt + 1));\n        host = host.substring(0, colonAt);\n      }\n      \n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      if (port != -1) {\n        mailbox.connect(host, port, user, password);\n      } else {\n        mailbox.connect(host, user, password);\n      }\n      log.info(\"Connected to {}'s mailbox on {}\", user, host);\n      \n      return true;\n    } catch (MessagingException e) {      \n      String errMsg = String.format(Locale.ENGLISH,\n          \"Failed to connect to %s server %s as user %s due to: %s\", protocol,\n          host, user, e.toString());\n      log.error(errMsg, e);\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          errMsg, e);\n    }\n  }\n\n","sourceOld":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      if (System.getProperty(\"mail.debug\") != null) \n        props.setProperty(\"mail.debug\", System.getProperty(\"mail.debug\"));\n      \n      if ((\"imap\".equals(protocol) || \"imaps\".equals(protocol))\n          && \"imap.gmail.com\".equals(host)) {\n        log.info(\"Consider using 'gimaps' protocol instead of '\" + protocol\n            + \"' for enabling GMail specific extensions for \" + host);\n      }\n      \n      props.setProperty(\"mail.store.protocol\", protocol);\n      \n      String imapPropPrefix = protocol.startsWith(\"gimap\") ? \"gimap\" : \"imap\";\n      props.setProperty(\"mail.\" + imapPropPrefix + \".fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".connectiontimeout\", \"\" + cTimeout);\n      \n      int port = -1;\n      int colonAt = host.indexOf(\":\");\n      if (colonAt != -1) {\n        port = Integer.parseInt(host.substring(colonAt + 1));\n        host = host.substring(0, colonAt);\n      }\n      \n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      if (port != -1) {\n        mailbox.connect(host, port, user, password);\n      } else {\n        mailbox.connect(host, user, password);\n      }\n      log.info(\"Connected to \" + user + \"'s mailbox on \" + host);\n      \n      return true;\n    } catch (MessagingException e) {      \n      String errMsg = String.format(Locale.ENGLISH,\n          \"Failed to connect to %s server %s as user %s due to: %s\", protocol,\n          host, user, e.toString());\n      log.error(errMsg, e);\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          errMsg, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","sourceNew":null,"sourceOld":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      if (System.getProperty(\"mail.debug\") != null) \n        props.setProperty(\"mail.debug\", System.getProperty(\"mail.debug\"));\n      \n      if ((\"imap\".equals(protocol) || \"imaps\".equals(protocol))\n          && \"imap.gmail.com\".equals(host)) {\n        log.info(\"Consider using 'gimaps' protocol instead of '{}' for enabling GMail specific extensions for {}\"\n            , protocol, host);\n      }\n      \n      props.setProperty(\"mail.store.protocol\", protocol);\n      \n      String imapPropPrefix = protocol.startsWith(\"gimap\") ? \"gimap\" : \"imap\";\n      props.setProperty(\"mail.\" + imapPropPrefix + \".fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.\" + imapPropPrefix + \".connectiontimeout\", \"\" + cTimeout);\n      \n      int port = -1;\n      int colonAt = host.indexOf(\":\");\n      if (colonAt != -1) {\n        port = Integer.parseInt(host.substring(colonAt + 1));\n        host = host.substring(0, colonAt);\n      }\n      \n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      if (port != -1) {\n        mailbox.connect(host, port, user, password);\n      } else {\n        mailbox.connect(host, user, password);\n      }\n      log.info(\"Connected to {}'s mailbox on {}\", user, host);\n      \n      return true;\n    } catch (MessagingException e) {      \n      String errMsg = String.format(Locale.ENGLISH,\n          \"Failed to connect to %s server %s as user %s due to: %s\", protocol,\n          host, user, e.toString());\n      log.error(errMsg, e);\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n          errMsg, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36113efe922ae370819b20fba837a1a37d3dd2d8":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"0bac5e4f5082317c9a942b1deeeb22d6700ecff7":["36113efe922ae370819b20fba837a1a37d3dd2d8"],"0cd303657ee7726e12c45f9fd39b0285acf10c07":["0bac5e4f5082317c9a942b1deeeb22d6700ecff7"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["0cd303657ee7726e12c45f9fd39b0285acf10c07","5a2748831fb25b0e9d5a4c315047bf877c887460"],"28288370235ed02234a64753cdbf0c6ec096304a":["0cd303657ee7726e12c45f9fd39b0285acf10c07","5a2748831fb25b0e9d5a4c315047bf877c887460"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a2748831fb25b0e9d5a4c315047bf877c887460":["0cd303657ee7726e12c45f9fd39b0285acf10c07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"36113efe922ae370819b20fba837a1a37d3dd2d8":["0bac5e4f5082317c9a942b1deeeb22d6700ecff7"],"c26f00b574427b55127e869b935845554afde1fa":["36113efe922ae370819b20fba837a1a37d3dd2d8"],"0bac5e4f5082317c9a942b1deeeb22d6700ecff7":["0cd303657ee7726e12c45f9fd39b0285acf10c07"],"0cd303657ee7726e12c45f9fd39b0285acf10c07":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","5a2748831fb25b0e9d5a4c315047bf877c887460"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"5a2748831fb25b0e9d5a4c315047bf877c887460":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}