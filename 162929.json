{"path":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionWithEmptyReplica#test().mjava","commits":[{"id":"bb62cc3362417c3e5136f2f26d34a1072ad633eb","date":1475149102,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionWithEmptyReplica#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    solrClient.setDefaultCollection(COLLECTION_NAME);\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(i));\n      solrClient.add(doc);\n    }\n    solrClient.commit();\n\n    // find the leader node\n    Replica replica = solrClient.getZkStateReader().getLeaderRetry(COLLECTION_NAME, \"shard1\");\n    JettySolrRunner replicaJetty = null;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (JettySolrRunner jettySolrRunner : jettySolrRunners) {\n      int port = jettySolrRunner.getBaseUrl().getPort();\n      if (replica.getStr(BASE_URL_PROP).contains(\":\" + port))  {\n        replicaJetty = jettySolrRunner;\n        break;\n      }\n    }\n\n    // kill the leader\n    ChaosMonkey.kill(replicaJetty);\n\n    // add a replica (asynchronously)\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(COLLECTION_NAME, \"shard1\");\n    String asyncId = addReplica.processAsync(solrClient);\n\n    // wait a bit\n    Thread.sleep(1000);\n\n    // bring the old leader node back up\n    ChaosMonkey.start(replicaJetty);\n\n    // wait until everyone is active\n    solrClient.waitForState(COLLECTION_NAME, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 2));\n\n    // now query each replica and check for consistency\n    assertConsistentReplicas(solrClient, solrClient.getZkStateReader().getClusterState().getSlice(COLLECTION_NAME, \"shard1\"));\n\n    // sanity check that documents still exist\n    QueryResponse response = solrClient.query(new SolrQuery(\"*:*\"));\n    assertEquals(\"Indexed documents not found\", 10, response.getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionWithEmptyReplica#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    solrClient.setDefaultCollection(COLLECTION_NAME);\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(i));\n      solrClient.add(doc);\n    }\n    solrClient.commit();\n\n    // find the leader node\n    Replica replica = solrClient.getZkStateReader().getLeaderRetry(COLLECTION_NAME, \"shard1\");\n    JettySolrRunner replicaJetty = null;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (JettySolrRunner jettySolrRunner : jettySolrRunners) {\n      int port = jettySolrRunner.getBaseUrl().getPort();\n      if (replica.getStr(BASE_URL_PROP).contains(\":\" + port))  {\n        replicaJetty = jettySolrRunner;\n        break;\n      }\n    }\n\n    // kill the leader\n    ChaosMonkey.kill(replicaJetty);\n\n    // add a replica (asynchronously)\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(COLLECTION_NAME, \"shard1\");\n    String asyncId = addReplica.processAsync(solrClient);\n\n    // wait a bit\n    Thread.sleep(1000);\n\n    // bring the old leader node back up\n    ChaosMonkey.start(replicaJetty);\n\n    // wait until everyone is active\n    solrClient.waitForState(COLLECTION_NAME, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 2));\n\n    // now query each replica and check for consistency\n    assertConsistentReplicas(solrClient, solrClient.getZkStateReader().getClusterState().getSlice(COLLECTION_NAME, \"shard1\"));\n\n    // sanity check that documents still exist\n    QueryResponse response = solrClient.query(new SolrQuery(\"*:*\"));\n    assertEquals(\"Indexed documents not found\", 10, response.getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionWithEmptyReplica#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    solrClient.setDefaultCollection(COLLECTION_NAME);\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(i));\n      solrClient.add(doc);\n    }\n    solrClient.commit();\n\n    // find the leader node\n    Replica replica = solrClient.getZkStateReader().getLeaderRetry(COLLECTION_NAME, \"shard1\");\n    JettySolrRunner replicaJetty = null;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (JettySolrRunner jettySolrRunner : jettySolrRunners) {\n      int port = jettySolrRunner.getBaseUrl().getPort();\n      if (replica.getStr(BASE_URL_PROP).contains(\":\" + port))  {\n        replicaJetty = jettySolrRunner;\n        break;\n      }\n    }\n\n    // kill the leader\n    ChaosMonkey.kill(replicaJetty);\n\n    // add a replica (asynchronously)\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(COLLECTION_NAME, \"shard1\");\n    String asyncId = addReplica.processAsync(solrClient);\n\n    // wait a bit\n    Thread.sleep(1000);\n\n    // bring the old leader node back up\n    ChaosMonkey.start(replicaJetty);\n\n    // wait until everyone is active\n    solrClient.waitForState(COLLECTION_NAME, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 2));\n\n    // now query each replica and check for consistency\n    assertConsistentReplicas(solrClient, solrClient.getZkStateReader().getClusterState().getSlice(COLLECTION_NAME, \"shard1\"));\n\n    // sanity check that documents still exist\n    QueryResponse response = solrClient.query(new SolrQuery(\"*:*\"));\n    assertEquals(\"Indexed documents not found\", 10, response.getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionWithEmptyReplica#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionWithEmptyReplica#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    solrClient.setDefaultCollection(COLLECTION_NAME);\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(i));\n      solrClient.add(doc);\n    }\n    solrClient.commit();\n\n    // find the leader node\n    Replica replica = solrClient.getZkStateReader().getLeaderRetry(COLLECTION_NAME, \"shard1\");\n    JettySolrRunner replicaJetty = null;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (JettySolrRunner jettySolrRunner : jettySolrRunners) {\n      int port = jettySolrRunner.getBaseUrl().getPort();\n      if (replica.getStr(BASE_URL_PROP).contains(\":\" + port))  {\n        replicaJetty = jettySolrRunner;\n        break;\n      }\n    }\n\n    // kill the leader\n    ChaosMonkey.kill(replicaJetty);\n\n    // add a replica (asynchronously)\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(COLLECTION_NAME, \"shard1\");\n    String asyncId = addReplica.processAsync(solrClient);\n\n    // wait a bit\n    Thread.sleep(1000);\n\n    // bring the old leader node back up\n    ChaosMonkey.start(replicaJetty);\n\n    // wait until everyone is active\n    solrClient.waitForState(COLLECTION_NAME, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 2));\n\n    // now query each replica and check for consistency\n    assertConsistentReplicas(solrClient, solrClient.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlice(\"shard1\"));\n\n    // sanity check that documents still exist\n    QueryResponse response = solrClient.query(new SolrQuery(\"*:*\"));\n    assertEquals(\"Indexed documents not found\", 10, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    solrClient.setDefaultCollection(COLLECTION_NAME);\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(i));\n      solrClient.add(doc);\n    }\n    solrClient.commit();\n\n    // find the leader node\n    Replica replica = solrClient.getZkStateReader().getLeaderRetry(COLLECTION_NAME, \"shard1\");\n    JettySolrRunner replicaJetty = null;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (JettySolrRunner jettySolrRunner : jettySolrRunners) {\n      int port = jettySolrRunner.getBaseUrl().getPort();\n      if (replica.getStr(BASE_URL_PROP).contains(\":\" + port))  {\n        replicaJetty = jettySolrRunner;\n        break;\n      }\n    }\n\n    // kill the leader\n    ChaosMonkey.kill(replicaJetty);\n\n    // add a replica (asynchronously)\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(COLLECTION_NAME, \"shard1\");\n    String asyncId = addReplica.processAsync(solrClient);\n\n    // wait a bit\n    Thread.sleep(1000);\n\n    // bring the old leader node back up\n    ChaosMonkey.start(replicaJetty);\n\n    // wait until everyone is active\n    solrClient.waitForState(COLLECTION_NAME, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 2));\n\n    // now query each replica and check for consistency\n    assertConsistentReplicas(solrClient, solrClient.getZkStateReader().getClusterState().getSlice(COLLECTION_NAME, \"shard1\"));\n\n    // sanity check that documents still exist\n    QueryResponse response = solrClient.query(new SolrQuery(\"*:*\"));\n    assertEquals(\"Indexed documents not found\", 10, response.getResults().getNumFound());\n  }\n\n","bugFix":["bb62cc3362417c3e5136f2f26d34a1072ad633eb"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionWithEmptyReplica#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionWithEmptyReplica#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    solrClient.setDefaultCollection(COLLECTION_NAME);\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(i));\n      solrClient.add(doc);\n    }\n    solrClient.commit();\n\n    // find the leader node\n    Replica replica = solrClient.getZkStateReader().getLeaderRetry(COLLECTION_NAME, \"shard1\");\n    JettySolrRunner replicaJetty = null;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (JettySolrRunner jettySolrRunner : jettySolrRunners) {\n      int port = jettySolrRunner.getBaseUrl().getPort();\n      if (replica.getStr(BASE_URL_PROP).contains(\":\" + port))  {\n        replicaJetty = jettySolrRunner;\n        break;\n      }\n    }\n\n    // kill the leader\n    ChaosMonkey.kill(replicaJetty);\n\n    // add a replica (asynchronously)\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(COLLECTION_NAME, \"shard1\");\n    String asyncId = addReplica.processAsync(solrClient);\n\n    // wait a bit\n    Thread.sleep(1000);\n\n    // bring the old leader node back up\n    ChaosMonkey.start(replicaJetty);\n\n    // wait until everyone is active\n    solrClient.waitForState(COLLECTION_NAME, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 2));\n\n    // now query each replica and check for consistency\n    assertConsistentReplicas(solrClient, solrClient.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlice(\"shard1\"));\n\n    // sanity check that documents still exist\n    QueryResponse response = solrClient.query(new SolrQuery(\"*:*\"));\n    assertEquals(\"Indexed documents not found\", 10, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    solrClient.setDefaultCollection(COLLECTION_NAME);\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(i));\n      solrClient.add(doc);\n    }\n    solrClient.commit();\n\n    // find the leader node\n    Replica replica = solrClient.getZkStateReader().getLeaderRetry(COLLECTION_NAME, \"shard1\");\n    JettySolrRunner replicaJetty = null;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (JettySolrRunner jettySolrRunner : jettySolrRunners) {\n      int port = jettySolrRunner.getBaseUrl().getPort();\n      if (replica.getStr(BASE_URL_PROP).contains(\":\" + port))  {\n        replicaJetty = jettySolrRunner;\n        break;\n      }\n    }\n\n    // kill the leader\n    ChaosMonkey.kill(replicaJetty);\n\n    // add a replica (asynchronously)\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(COLLECTION_NAME, \"shard1\");\n    String asyncId = addReplica.processAsync(solrClient);\n\n    // wait a bit\n    Thread.sleep(1000);\n\n    // bring the old leader node back up\n    ChaosMonkey.start(replicaJetty);\n\n    // wait until everyone is active\n    solrClient.waitForState(COLLECTION_NAME, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 2));\n\n    // now query each replica and check for consistency\n    assertConsistentReplicas(solrClient, solrClient.getZkStateReader().getClusterState().getSlice(COLLECTION_NAME, \"shard1\"));\n\n    // sanity check that documents still exist\n    QueryResponse response = solrClient.query(new SolrQuery(\"*:*\"));\n    assertEquals(\"Indexed documents not found\", 10, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionWithEmptyReplica#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionWithEmptyReplica#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    solrClient.setDefaultCollection(COLLECTION_NAME);\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(i));\n      solrClient.add(doc);\n    }\n    solrClient.commit();\n\n    // find the leader node\n    Replica replica = solrClient.getZkStateReader().getLeaderRetry(COLLECTION_NAME, \"shard1\");\n    JettySolrRunner replicaJetty = null;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (JettySolrRunner jettySolrRunner : jettySolrRunners) {\n      int port = jettySolrRunner.getBaseUrl().getPort();\n      if (replica.getStr(BASE_URL_PROP).contains(\":\" + port))  {\n        replicaJetty = jettySolrRunner;\n        break;\n      }\n    }\n\n    // kill the leader\n    replicaJetty.stop();\n\n    // add a replica (asynchronously)\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(COLLECTION_NAME, \"shard1\");\n    String asyncId = addReplica.processAsync(solrClient);\n\n    // wait a bit\n    Thread.sleep(1000);\n\n    // bring the old leader node back up\n    replicaJetty.start();\n\n    // wait until everyone is active\n    solrClient.waitForState(COLLECTION_NAME, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 2));\n\n    // now query each replica and check for consistency\n    assertConsistentReplicas(solrClient, solrClient.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlice(\"shard1\"));\n\n    // sanity check that documents still exist\n    QueryResponse response = solrClient.query(new SolrQuery(\"*:*\"));\n    assertEquals(\"Indexed documents not found\", 10, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    solrClient.setDefaultCollection(COLLECTION_NAME);\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(i));\n      solrClient.add(doc);\n    }\n    solrClient.commit();\n\n    // find the leader node\n    Replica replica = solrClient.getZkStateReader().getLeaderRetry(COLLECTION_NAME, \"shard1\");\n    JettySolrRunner replicaJetty = null;\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    for (JettySolrRunner jettySolrRunner : jettySolrRunners) {\n      int port = jettySolrRunner.getBaseUrl().getPort();\n      if (replica.getStr(BASE_URL_PROP).contains(\":\" + port))  {\n        replicaJetty = jettySolrRunner;\n        break;\n      }\n    }\n\n    // kill the leader\n    ChaosMonkey.kill(replicaJetty);\n\n    // add a replica (asynchronously)\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(COLLECTION_NAME, \"shard1\");\n    String asyncId = addReplica.processAsync(solrClient);\n\n    // wait a bit\n    Thread.sleep(1000);\n\n    // bring the old leader node back up\n    ChaosMonkey.start(replicaJetty);\n\n    // wait until everyone is active\n    solrClient.waitForState(COLLECTION_NAME, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 2));\n\n    // now query each replica and check for consistency\n    assertConsistentReplicas(solrClient, solrClient.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlice(\"shard1\"));\n\n    // sanity check that documents still exist\n    QueryResponse response = solrClient.query(new SolrQuery(\"*:*\"));\n    assertEquals(\"Indexed documents not found\", 10, response.getResults().getNumFound());\n  }\n\n","bugFix":["bb62cc3362417c3e5136f2f26d34a1072ad633eb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","344b0840364d990b29b97467bfcc766ff8325d11"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bb62cc3362417c3e5136f2f26d34a1072ad633eb"],"bb62cc3362417c3e5136f2f26d34a1072ad633eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","344b0840364d990b29b97467bfcc766ff8325d11","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bb62cc3362417c3e5136f2f26d34a1072ad633eb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bb62cc3362417c3e5136f2f26d34a1072ad633eb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}