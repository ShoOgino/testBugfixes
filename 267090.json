{"path":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","sourceOld":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","sourceOld":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","sourceOld":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09517fe4d278fb37c05202d2a897d77a48f3e002","date":1332454823,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    MergePolicy policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","sourceOld":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    MergePolicy policy;\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    try {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});\n    } catch (Exception e) {\n      policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n    }\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","bugFix":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","date":1334628185,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    MergePolicy policy = schema.getResourceLoader().newInstance(mpClassName, MergePolicy.class);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","sourceOld":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    MergePolicy policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    MergePolicy policy = schema.getResourceLoader().newInstance(mpClassName, MergePolicy.class);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","sourceOld":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    MergePolicy policy = schema.getResourceLoader().newInstance(mpClassName, MergePolicy.class);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setUseCompoundFile(useCompoundFile);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setUseCompoundFile(useCompoundFile);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","bugFix":null,"bugIntro":["0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d0fc107895562138b4cc92eccac979d28579b98","date":1371594707,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    MergePolicy policy = schema.getResourceLoader().newInstance(mpClassName, MergePolicy.class);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n\n      fixUseCFInitArg(LogMergePolicy.class);\n\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n\n      fixUseCFInitArg(TieredMergePolicy.class);\n\n    } else if (useCompoundFile && (mergeFactor != -1)) {\n      log.warn(\"Use of <useCompoundFile> or <mergeFactor> cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","sourceOld":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    MergePolicy policy = schema.getResourceLoader().newInstance(mpClassName, MergePolicy.class);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","bugFix":["a3800dc8cdd8c46b4863712aacac0db52566f146","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bugIntro":["0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e10d5539266ae943f9fa6befa6ac3481a2419c8","date":1371692194,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  /**\n   * Builds a MergePolicy, may also modify the value returned by\n   * getUseCompoundFile() for use by the IndexWriterConfig if \n   * \"useCompoundFile\" is specified as an init arg for \n   * an out of the box MergePolicy that no longer supports it\n   *\n   * @see #fixUseCFMergePolicyInitArg\n   * @see #getUseCompoundFile\n   */\n  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    MergePolicy policy = schema.getResourceLoader().newInstance(mpClassName, MergePolicy.class);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n      fixUseCFMergePolicyInitArg(LogMergePolicy.class);\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setNoCFSRatio(getUseCompoundFile() ? 1.0 : 0.0);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n\n\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      fixUseCFMergePolicyInitArg(TieredMergePolicy.class);\n      \n      tieredMergePolicy.setNoCFSRatio(getUseCompoundFile() ? 1.0 : 0.0);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n\n\n    } else if (mergeFactor != -1) {\n      log.warn(\"Use of <mergeFactor> cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","sourceOld":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    MergePolicy policy = schema.getResourceLoader().newInstance(mpClassName, MergePolicy.class);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n\n      fixUseCFInitArg(LogMergePolicy.class);\n\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n\n      fixUseCFInitArg(TieredMergePolicy.class);\n\n    } else if (useCompoundFile && (mergeFactor != -1)) {\n      log.warn(\"Use of <useCompoundFile> or <mergeFactor> cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","bugFix":["6d0fc107895562138b4cc92eccac979d28579b98","088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  /**\n   * Builds a MergePolicy, may also modify the value returned by\n   * getUseCompoundFile() for use by the IndexWriterConfig if \n   * \"useCompoundFile\" is specified as an init arg for \n   * an out of the box MergePolicy that no longer supports it\n   *\n   * @see #fixUseCFMergePolicyInitArg\n   * @see #getUseCompoundFile\n   */\n  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    MergePolicy policy = schema.getResourceLoader().newInstance(mpClassName, MergePolicy.class);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n      fixUseCFMergePolicyInitArg(LogMergePolicy.class);\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setNoCFSRatio(getUseCompoundFile() ? 1.0 : 0.0);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n\n\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      fixUseCFMergePolicyInitArg(TieredMergePolicy.class);\n      \n      tieredMergePolicy.setNoCFSRatio(getUseCompoundFile() ? 1.0 : 0.0);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n\n\n    } else if (mergeFactor != -1) {\n      log.warn(\"Use of <mergeFactor> cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","sourceOld":"  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    MergePolicy policy = schema.getResourceLoader().newInstance(mpClassName, MergePolicy.class);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      \n      tieredMergePolicy.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n    } else {\n      log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d02cd5e26c3667f84cdedfc0e6f9e92f381a9b5d","date":1432150334,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  /**\n   * Builds a MergePolicy, may also modify the value returned by\n   * getUseCompoundFile() for use by the IndexWriterConfig if \n   * \"useCompoundFile\" is specified as an init arg for \n   * an out of the box MergePolicy that no longer supports it\n   *\n   * @see #fixUseCFMergePolicyInitArg\n   * @see #getUseCompoundFile\n   */\n  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    MergePolicy policy = schema.getResourceLoader().newInstance(mpClassName, MergePolicy.class);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n      fixUseCFMergePolicyInitArg(LogMergePolicy.class);\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      fixUseCFMergePolicyInitArg(TieredMergePolicy.class);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n\n\n    } else if (mergeFactor != -1) {\n      log.warn(\"Use of <mergeFactor> cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","sourceOld":"  /**\n   * Builds a MergePolicy, may also modify the value returned by\n   * getUseCompoundFile() for use by the IndexWriterConfig if \n   * \"useCompoundFile\" is specified as an init arg for \n   * an out of the box MergePolicy that no longer supports it\n   *\n   * @see #fixUseCFMergePolicyInitArg\n   * @see #getUseCompoundFile\n   */\n  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    MergePolicy policy = schema.getResourceLoader().newInstance(mpClassName, MergePolicy.class);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n      fixUseCFMergePolicyInitArg(LogMergePolicy.class);\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      logMergePolicy.setNoCFSRatio(getUseCompoundFile() ? 1.0 : 0.0);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n\n\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      fixUseCFMergePolicyInitArg(TieredMergePolicy.class);\n      \n      tieredMergePolicy.setNoCFSRatio(getUseCompoundFile() ? 1.0 : 0.0);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n\n\n    } else if (mergeFactor != -1) {\n      log.warn(\"Use of <mergeFactor> cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e02c0d6a64df9c63897458b31d88b5ec3b854a5","date":1454964111,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  /**\n   * Builds a MergePolicy using the configured MergePolicyFactory\n   * or if no factory is configured uses the configured mergePolicy PluginInfo.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n    if (useMergePolicyInfo()) {\n      return buildMergePolicyFromInfo(schema);\n    }\n\n    final MergePolicyFactory mpf;\n    if (mergePolicyFactoryInfo == null) {\n      mpf = defaultMergePolicyFactory;\n    } else {\n      final String mpfClassName = mergePolicyFactoryInfo.className;\n      final MergePolicyFactoryArgs mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n      final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n      mpf = resourceLoader.newInstance(\n          mpfClassName,\n          MergePolicyFactory.class,\n          NO_SUB_PACKAGES,\n          new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class },\n          new Object[] { resourceLoader, mpfArgs });\n    }\n\n    return mpf.getMergePolicy();\n  }\n\n","sourceOld":"  /**\n   * Builds a MergePolicy, may also modify the value returned by\n   * getUseCompoundFile() for use by the IndexWriterConfig if \n   * \"useCompoundFile\" is specified as an init arg for \n   * an out of the box MergePolicy that no longer supports it\n   *\n   * @see #fixUseCFMergePolicyInitArg\n   * @see #getUseCompoundFile\n   */\n  private MergePolicy buildMergePolicy(IndexSchema schema) {\n    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;\n\n    MergePolicy policy = schema.getResourceLoader().newInstance(mpClassName, MergePolicy.class);\n\n    if (policy instanceof LogMergePolicy) {\n      LogMergePolicy logMergePolicy = (LogMergePolicy) policy;\n      fixUseCFMergePolicyInitArg(LogMergePolicy.class);\n\n      if (maxMergeDocs != -1)\n        logMergePolicy.setMaxMergeDocs(maxMergeDocs);\n\n      if (mergeFactor != -1)\n        logMergePolicy.setMergeFactor(mergeFactor);\n\n    } else if (policy instanceof TieredMergePolicy) {\n      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;\n      fixUseCFMergePolicyInitArg(TieredMergePolicy.class);\n      \n      if (mergeFactor != -1) {\n        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);\n        tieredMergePolicy.setSegmentsPerTier(mergeFactor);\n      }\n\n\n    } else if (mergeFactor != -1) {\n      log.warn(\"Use of <mergeFactor> cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.\");\n    }\n\n    if (mergePolicyInfo != null)\n      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);\n\n    return policy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b531d6853cf691cd84ab58193ce7a89a424289e","date":1455121686,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  /**\n   * Builds a MergePolicy using the configured MergePolicyFactory\n   * or if no factory is configured uses the configured mergePolicy PluginInfo.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n    if (useMergePolicyInfo()) {\n      return buildMergePolicyFromInfo(schema);\n    }\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] { resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n\n","sourceOld":"  /**\n   * Builds a MergePolicy using the configured MergePolicyFactory\n   * or if no factory is configured uses the configured mergePolicy PluginInfo.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n    if (useMergePolicyInfo()) {\n      return buildMergePolicyFromInfo(schema);\n    }\n\n    final MergePolicyFactory mpf;\n    if (mergePolicyFactoryInfo == null) {\n      mpf = defaultMergePolicyFactory;\n    } else {\n      final String mpfClassName = mergePolicyFactoryInfo.className;\n      final MergePolicyFactoryArgs mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n      final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n      mpf = resourceLoader.newInstance(\n          mpfClassName,\n          MergePolicyFactory.class,\n          NO_SUB_PACKAGES,\n          new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class },\n          new Object[] { resourceLoader, mpfArgs });\n    }\n\n    return mpf.getMergePolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d848516a5d0b23d183a2ceb4f4fb8634205956","date":1496408348,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  /**\n   * Builds a MergePolicy using the configured MergePolicyFactory\n   * or if no factory is configured uses the configured mergePolicy PluginInfo.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] { resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n\n","sourceOld":"  /**\n   * Builds a MergePolicy using the configured MergePolicyFactory\n   * or if no factory is configured uses the configured mergePolicy PluginInfo.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n    if (useMergePolicyInfo()) {\n      return buildMergePolicyFromInfo(schema);\n    }\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] { resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  /**\n   * Builds a MergePolicy using the configured MergePolicyFactory\n   * or if no factory is configured uses the configured mergePolicy PluginInfo.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] { resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n\n","sourceOld":"  /**\n   * Builds a MergePolicy using the configured MergePolicyFactory\n   * or if no factory is configured uses the configured mergePolicy PluginInfo.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n    if (useMergePolicyInfo()) {\n      return buildMergePolicyFromInfo(schema);\n    }\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] { resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  /**\n   * Builds a MergePolicy using the configured MergePolicyFactory\n   * or if no factory is configured uses the configured mergePolicy PluginInfo.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] { resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n\n","sourceOld":"  /**\n   * Builds a MergePolicy using the configured MergePolicyFactory\n   * or if no factory is configured uses the configured mergePolicy PluginInfo.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n    if (useMergePolicyInfo()) {\n      return buildMergePolicyFromInfo(schema);\n    }\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] { resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df151630bfbea5338a007b97bfd37e4ec94f873f","date":1553017904,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(SolrResourceLoader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergePolicy(IndexSchema).mjava","sourceNew":"  /**\n   * Builds a MergePolicy using the configured MergePolicyFactory\n   * or if no factory is configured uses the configured mergePolicy PluginInfo.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private MergePolicy buildMergePolicy(SolrResourceLoader resourceLoader, IndexSchema schema) {\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] {resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n\n","sourceOld":"  /**\n   * Builds a MergePolicy using the configured MergePolicyFactory\n   * or if no factory is configured uses the configured mergePolicy PluginInfo.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] { resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d0fc107895562138b4cc92eccac979d28579b98":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["088a7ef694fd43d5d9a4d200c4005865f773d1e7","0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["d02cd5e26c3667f84cdedfc0e6f9e92f381a9b5d"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"0b531d6853cf691cd84ab58193ce7a89a424289e":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"d02cd5e26c3667f84cdedfc0e6f9e92f381a9b5d":["0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["0b531d6853cf691cd84ab58193ce7a89a424289e"],"28288370235ed02234a64753cdbf0c6ec096304a":["0b531d6853cf691cd84ab58193ce7a89a424289e","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["0b531d6853cf691cd84ab58193ce7a89a424289e","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"df151630bfbea5338a007b97bfd37e4ec94f873f":["28288370235ed02234a64753cdbf0c6ec096304a"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"09517fe4d278fb37c05202d2a897d77a48f3e002":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["09517fe4d278fb37c05202d2a897d77a48f3e002"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e10d5539266ae943f9fa6befa6ac3481a2419c8":["6d0fc107895562138b4cc92eccac979d28579b98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df151630bfbea5338a007b97bfd37e4ec94f873f"]},"commit2Childs":{"6d0fc107895562138b4cc92eccac979d28579b98":["0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["0b531d6853cf691cd84ab58193ce7a89a424289e"],"c26f00b574427b55127e869b935845554afde1fa":["09517fe4d278fb37c05202d2a897d77a48f3e002"],"0b531d6853cf691cd84ab58193ce7a89a424289e":["70d848516a5d0b23d183a2ceb4f4fb8634205956","28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"d02cd5e26c3667f84cdedfc0e6f9e92f381a9b5d":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["df151630bfbea5338a007b97bfd37e4ec94f873f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["6d0fc107895562138b4cc92eccac979d28579b98","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"df151630bfbea5338a007b97bfd37e4ec94f873f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09517fe4d278fb37c05202d2a897d77a48f3e002":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"0e10d5539266ae943f9fa6befa6ac3481a2419c8":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d02cd5e26c3667f84cdedfc0e6f9e92f381a9b5d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","e9017cf144952056066919f1ebc7897ff9bd71b1","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}