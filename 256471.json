{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitByRouteKeyTest().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitByRouteKeyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitByRouteKeyTest().mjava","sourceNew":"  private void splitByRouteKeyTest() throws Exception {\n    log.info(\"Starting splitByRouteKeyTest\");\n    String collectionName = \"splitByRouteKeyTest\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n    waitForRecoveriesToFinish(false);\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n\n      String splitKey = \"b!\";\n\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      final DocRouter router = clusterState.getCollection(collectionName).getRouter();\n      Slice shard1 = clusterState.getCollection(collectionName).getSlice(SHARD1);\n      DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n      final List<DocRouter.Range> ranges = ((CompositeIdRouter) router).partitionRangeByKey(splitKey, shard1Range);\n      final int[] docCounts = new int[ranges.size()];\n\n      int uniqIdentifier = (1 << 12);\n      int splitKeyDocCount = 0;\n      for (int i = 100; i <= 200; i++) {\n        String shardKey = \"\" + (char) ('a' + (i % 26)); // See comment in ShardRoutingTest for hash distribution\n\n        String idStr = shardKey + \"!\" + i;\n        collectionClient.add(getDoc(id, idStr, \"n_ti\", (shardKey + \"!\").equals(splitKey) ? uniqIdentifier : i));\n        int idx = getHashRangeIdx(router, ranges, idStr);\n        if (idx != -1) {\n          docCounts[idx]++;\n        }\n        if (splitKey.equals(shardKey + \"!\"))\n          splitKeyDocCount++;\n      }\n\n      for (int i = 0; i < docCounts.length; i++) {\n        int docCount = docCounts[i];\n        log.info(\"Shard {} docCount = {}\", \"shard1_\" + i, docCount);\n      }\n      log.info(\"Route key doc count = {}\", splitKeyDocCount);\n\n      collectionClient.commit();\n\n      for (int i = 0; i < 3; i++) {\n        try {\n          splitShard(collectionName, null, null, splitKey);\n          break;\n        } catch (HttpSolrClient.RemoteSolrException e) {\n          if (e.code() != 500) {\n            throw e;\n          }\n          log.error(\"SPLITSHARD failed. \" + (i < 2 ? \" Retring split\" : \"\"), e);\n          if (i == 2) {\n            fail(\"SPLITSHARD was not successful even after three tries\");\n          }\n        }\n      }\n\n      waitForRecoveriesToFinish(collectionName, false);\n      SolrQuery solrQuery = new SolrQuery(\"*:*\");\n      assertEquals(\"DocCount on shard1_0 does not match\", docCounts[0], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_1 does not match\", docCounts[1], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_2 does not match\", docCounts[2], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n\n      solrQuery = new SolrQuery(\"n_ti:\" + uniqIdentifier);\n      assertEquals(\"shard1_0 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"Wrong number of docs on shard1_1 for route key: \" + splitKey, splitKeyDocCount, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"shard1_2 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void splitByRouteKeyTest() throws Exception {\n    log.info(\"Starting splitByRouteKeyTest\");\n    String collectionName = \"splitByRouteKeyTest\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES, numShards);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n    waitForRecoveriesToFinish(false);\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n\n      String splitKey = \"b!\";\n\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      final DocRouter router = clusterState.getCollection(collectionName).getRouter();\n      Slice shard1 = clusterState.getCollection(collectionName).getSlice(SHARD1);\n      DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n      final List<DocRouter.Range> ranges = ((CompositeIdRouter) router).partitionRangeByKey(splitKey, shard1Range);\n      final int[] docCounts = new int[ranges.size()];\n\n      int uniqIdentifier = (1 << 12);\n      int splitKeyDocCount = 0;\n      for (int i = 100; i <= 200; i++) {\n        String shardKey = \"\" + (char) ('a' + (i % 26)); // See comment in ShardRoutingTest for hash distribution\n\n        String idStr = shardKey + \"!\" + i;\n        collectionClient.add(getDoc(id, idStr, \"n_ti\", (shardKey + \"!\").equals(splitKey) ? uniqIdentifier : i));\n        int idx = getHashRangeIdx(router, ranges, idStr);\n        if (idx != -1) {\n          docCounts[idx]++;\n        }\n        if (splitKey.equals(shardKey + \"!\"))\n          splitKeyDocCount++;\n      }\n\n      for (int i = 0; i < docCounts.length; i++) {\n        int docCount = docCounts[i];\n        log.info(\"Shard {} docCount = {}\", \"shard1_\" + i, docCount);\n      }\n      log.info(\"Route key doc count = {}\", splitKeyDocCount);\n\n      collectionClient.commit();\n\n      for (int i = 0; i < 3; i++) {\n        try {\n          splitShard(collectionName, null, null, splitKey);\n          break;\n        } catch (HttpSolrClient.RemoteSolrException e) {\n          if (e.code() != 500) {\n            throw e;\n          }\n          log.error(\"SPLITSHARD failed. \" + (i < 2 ? \" Retring split\" : \"\"), e);\n          if (i == 2) {\n            fail(\"SPLITSHARD was not successful even after three tries\");\n          }\n        }\n      }\n\n      waitForRecoveriesToFinish(collectionName, false);\n      SolrQuery solrQuery = new SolrQuery(\"*:*\");\n      assertEquals(\"DocCount on shard1_0 does not match\", docCounts[0], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_1 does not match\", docCounts[1], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_2 does not match\", docCounts[2], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n\n      solrQuery = new SolrQuery(\"n_ti:\" + uniqIdentifier);\n      assertEquals(\"shard1_0 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"Wrong number of docs on shard1_1 for route key: \" + splitKey, splitKeyDocCount, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"shard1_2 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitByRouteKeyTest().mjava","pathOld":"/dev/null","sourceNew":"  private void splitByRouteKeyTest() throws Exception {\n    log.info(\"Starting splitByRouteKeyTest\");\n    String collectionName = \"splitByRouteKeyTest\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n    waitForRecoveriesToFinish(false);\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n\n      String splitKey = \"b!\";\n\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      final DocRouter router = clusterState.getCollection(collectionName).getRouter();\n      Slice shard1 = clusterState.getCollection(collectionName).getSlice(SHARD1);\n      DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n      final List<DocRouter.Range> ranges = ((CompositeIdRouter) router).partitionRangeByKey(splitKey, shard1Range);\n      final int[] docCounts = new int[ranges.size()];\n\n      int uniqIdentifier = (1 << 12);\n      int splitKeyDocCount = 0;\n      for (int i = 100; i <= 200; i++) {\n        String shardKey = \"\" + (char) ('a' + (i % 26)); // See comment in ShardRoutingTest for hash distribution\n\n        String idStr = shardKey + \"!\" + i;\n        collectionClient.add(getDoc(id, idStr, \"n_ti\", (shardKey + \"!\").equals(splitKey) ? uniqIdentifier : i));\n        int idx = getHashRangeIdx(router, ranges, idStr);\n        if (idx != -1) {\n          docCounts[idx]++;\n        }\n        if (splitKey.equals(shardKey + \"!\"))\n          splitKeyDocCount++;\n      }\n\n      for (int i = 0; i < docCounts.length; i++) {\n        int docCount = docCounts[i];\n        log.info(\"Shard {} docCount = {}\", \"shard1_\" + i, docCount);\n      }\n      log.info(\"Route key doc count = {}\", splitKeyDocCount);\n\n      collectionClient.commit();\n\n      for (int i = 0; i < 3; i++) {\n        try {\n          splitShard(collectionName, null, null, splitKey);\n          break;\n        } catch (HttpSolrClient.RemoteSolrException e) {\n          if (e.code() != 500) {\n            throw e;\n          }\n          log.error(\"SPLITSHARD failed. \" + (i < 2 ? \" Retring split\" : \"\"), e);\n          if (i == 2) {\n            fail(\"SPLITSHARD was not successful even after three tries\");\n          }\n        }\n      }\n\n      waitForRecoveriesToFinish(collectionName, false);\n      SolrQuery solrQuery = new SolrQuery(\"*:*\");\n      assertEquals(\"DocCount on shard1_0 does not match\", docCounts[0], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_1 does not match\", docCounts[1], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_2 does not match\", docCounts[2], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n\n      solrQuery = new SolrQuery(\"n_ti:\" + uniqIdentifier);\n      assertEquals(\"shard1_0 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"Wrong number of docs on shard1_1 for route key: \" + splitKey, splitKeyDocCount, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"shard1_2 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20c968c14aace7cf49843bf2c1fafc7fd3845659","date":1533133859,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitByRouteKeyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitByRouteKeyTest().mjava","sourceNew":"  private void splitByRouteKeyTest() throws Exception {\n    log.info(\"Starting splitByRouteKeyTest\");\n    String collectionName = \"splitByRouteKeyTest\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n    waitForRecoveriesToFinish(false);\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n\n      String splitKey = \"b!\";\n\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      final DocRouter router = clusterState.getCollection(collectionName).getRouter();\n      Slice shard1 = clusterState.getCollection(collectionName).getSlice(SHARD1);\n      DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n      final List<DocRouter.Range> ranges = ((CompositeIdRouter) router).partitionRangeByKey(splitKey, shard1Range);\n      final int[] docCounts = new int[ranges.size()];\n\n      int uniqIdentifier = (1 << 12);\n      int splitKeyDocCount = 0;\n      for (int i = 100; i <= 200; i++) {\n        String shardKey = \"\" + (char) ('a' + (i % 26)); // See comment in ShardRoutingTest for hash distribution\n\n        String idStr = shardKey + \"!\" + i;\n        collectionClient.add(getDoc(id, idStr, \"n_ti\", (shardKey + \"!\").equals(splitKey) ? uniqIdentifier : i));\n        int idx = getHashRangeIdx(router, ranges, idStr);\n        if (idx != -1) {\n          docCounts[idx]++;\n        }\n        if (splitKey.equals(shardKey + \"!\"))\n          splitKeyDocCount++;\n      }\n\n      for (int i = 0; i < docCounts.length; i++) {\n        int docCount = docCounts[i];\n        log.info(\"Shard {} docCount = {}\", \"shard1_\" + i, docCount);\n      }\n      log.info(\"Route key doc count = {}\", splitKeyDocCount);\n\n      collectionClient.commit();\n\n      for (int i = 0; i < 3; i++) {\n        try {\n          splitShard(collectionName, null, null, splitKey, false);\n          break;\n        } catch (HttpSolrClient.RemoteSolrException e) {\n          if (e.code() != 500) {\n            throw e;\n          }\n          log.error(\"SPLITSHARD failed. \" + (i < 2 ? \" Retring split\" : \"\"), e);\n          if (i == 2) {\n            fail(\"SPLITSHARD was not successful even after three tries\");\n          }\n        }\n      }\n\n      waitForRecoveriesToFinish(collectionName, false);\n      SolrQuery solrQuery = new SolrQuery(\"*:*\");\n      assertEquals(\"DocCount on shard1_0 does not match\", docCounts[0], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_1 does not match\", docCounts[1], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_2 does not match\", docCounts[2], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n\n      solrQuery = new SolrQuery(\"n_ti:\" + uniqIdentifier);\n      assertEquals(\"shard1_0 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"Wrong number of docs on shard1_1 for route key: \" + splitKey, splitKeyDocCount, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"shard1_2 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void splitByRouteKeyTest() throws Exception {\n    log.info(\"Starting splitByRouteKeyTest\");\n    String collectionName = \"splitByRouteKeyTest\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n    waitForRecoveriesToFinish(false);\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n\n      String splitKey = \"b!\";\n\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      final DocRouter router = clusterState.getCollection(collectionName).getRouter();\n      Slice shard1 = clusterState.getCollection(collectionName).getSlice(SHARD1);\n      DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n      final List<DocRouter.Range> ranges = ((CompositeIdRouter) router).partitionRangeByKey(splitKey, shard1Range);\n      final int[] docCounts = new int[ranges.size()];\n\n      int uniqIdentifier = (1 << 12);\n      int splitKeyDocCount = 0;\n      for (int i = 100; i <= 200; i++) {\n        String shardKey = \"\" + (char) ('a' + (i % 26)); // See comment in ShardRoutingTest for hash distribution\n\n        String idStr = shardKey + \"!\" + i;\n        collectionClient.add(getDoc(id, idStr, \"n_ti\", (shardKey + \"!\").equals(splitKey) ? uniqIdentifier : i));\n        int idx = getHashRangeIdx(router, ranges, idStr);\n        if (idx != -1) {\n          docCounts[idx]++;\n        }\n        if (splitKey.equals(shardKey + \"!\"))\n          splitKeyDocCount++;\n      }\n\n      for (int i = 0; i < docCounts.length; i++) {\n        int docCount = docCounts[i];\n        log.info(\"Shard {} docCount = {}\", \"shard1_\" + i, docCount);\n      }\n      log.info(\"Route key doc count = {}\", splitKeyDocCount);\n\n      collectionClient.commit();\n\n      for (int i = 0; i < 3; i++) {\n        try {\n          splitShard(collectionName, null, null, splitKey);\n          break;\n        } catch (HttpSolrClient.RemoteSolrException e) {\n          if (e.code() != 500) {\n            throw e;\n          }\n          log.error(\"SPLITSHARD failed. \" + (i < 2 ? \" Retring split\" : \"\"), e);\n          if (i == 2) {\n            fail(\"SPLITSHARD was not successful even after three tries\");\n          }\n        }\n      }\n\n      waitForRecoveriesToFinish(collectionName, false);\n      SolrQuery solrQuery = new SolrQuery(\"*:*\");\n      assertEquals(\"DocCount on shard1_0 does not match\", docCounts[0], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_1 does not match\", docCounts[1], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_2 does not match\", docCounts[2], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n\n      solrQuery = new SolrQuery(\"n_ti:\" + uniqIdentifier);\n      assertEquals(\"shard1_0 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"Wrong number of docs on shard1_1 for route key: \" + splitKey, splitKeyDocCount, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"shard1_2 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9be06eb0504cb6312c2a585959299e40280d9ba","date":1534415825,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitByRouteKeyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitByRouteKeyTest().mjava","sourceNew":"  private void splitByRouteKeyTest() throws Exception {\n    log.info(\"Starting splitByRouteKeyTest\");\n    String collectionName = \"splitByRouteKeyTest\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n    waitForRecoveriesToFinish(false);\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n\n      String splitKey = \"b!\";\n\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      final DocRouter router = clusterState.getCollection(collectionName).getRouter();\n      Slice shard1 = clusterState.getCollection(collectionName).getSlice(SHARD1);\n      DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n      final List<DocRouter.Range> ranges = ((CompositeIdRouter) router).partitionRangeByKey(splitKey, shard1Range);\n      final int[] docCounts = new int[ranges.size()];\n\n      int uniqIdentifier = (1 << 12);\n      int splitKeyDocCount = 0;\n      for (int i = 100; i <= 200; i++) {\n        String shardKey = \"\" + (char) ('a' + (i % 26)); // See comment in ShardRoutingTest for hash distribution\n\n        String idStr = shardKey + \"!\" + i;\n        collectionClient.add(getDoc(id, idStr, \"n_ti\", (shardKey + \"!\").equals(splitKey) ? uniqIdentifier : i));\n        int idx = getHashRangeIdx(router, ranges, idStr);\n        if (idx != -1) {\n          docCounts[idx]++;\n        }\n        if (splitKey.equals(shardKey + \"!\"))\n          splitKeyDocCount++;\n      }\n\n      for (int i = 0; i < docCounts.length; i++) {\n        int docCount = docCounts[i];\n        log.info(\"Shard {} docCount = {}\", \"shard1_\" + i, docCount);\n      }\n      log.info(\"Route key doc count = {}\", splitKeyDocCount);\n\n      collectionClient.commit();\n\n      trySplit(collectionName, splitKey, null, 3);\n\n      waitForRecoveriesToFinish(collectionName, false);\n      SolrQuery solrQuery = new SolrQuery(\"*:*\");\n      assertEquals(\"DocCount on shard1_0 does not match\", docCounts[0], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_1 does not match\", docCounts[1], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_2 does not match\", docCounts[2], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n\n      solrQuery = new SolrQuery(\"n_ti:\" + uniqIdentifier);\n      assertEquals(\"shard1_0 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"Wrong number of docs on shard1_1 for route key: \" + splitKey, splitKeyDocCount, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"shard1_2 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void splitByRouteKeyTest() throws Exception {\n    log.info(\"Starting splitByRouteKeyTest\");\n    String collectionName = \"splitByRouteKeyTest\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n    waitForRecoveriesToFinish(false);\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n\n      String splitKey = \"b!\";\n\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      final DocRouter router = clusterState.getCollection(collectionName).getRouter();\n      Slice shard1 = clusterState.getCollection(collectionName).getSlice(SHARD1);\n      DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n      final List<DocRouter.Range> ranges = ((CompositeIdRouter) router).partitionRangeByKey(splitKey, shard1Range);\n      final int[] docCounts = new int[ranges.size()];\n\n      int uniqIdentifier = (1 << 12);\n      int splitKeyDocCount = 0;\n      for (int i = 100; i <= 200; i++) {\n        String shardKey = \"\" + (char) ('a' + (i % 26)); // See comment in ShardRoutingTest for hash distribution\n\n        String idStr = shardKey + \"!\" + i;\n        collectionClient.add(getDoc(id, idStr, \"n_ti\", (shardKey + \"!\").equals(splitKey) ? uniqIdentifier : i));\n        int idx = getHashRangeIdx(router, ranges, idStr);\n        if (idx != -1) {\n          docCounts[idx]++;\n        }\n        if (splitKey.equals(shardKey + \"!\"))\n          splitKeyDocCount++;\n      }\n\n      for (int i = 0; i < docCounts.length; i++) {\n        int docCount = docCounts[i];\n        log.info(\"Shard {} docCount = {}\", \"shard1_\" + i, docCount);\n      }\n      log.info(\"Route key doc count = {}\", splitKeyDocCount);\n\n      collectionClient.commit();\n\n      for (int i = 0; i < 3; i++) {\n        try {\n          splitShard(collectionName, null, null, splitKey, false);\n          break;\n        } catch (HttpSolrClient.RemoteSolrException e) {\n          if (e.code() != 500) {\n            throw e;\n          }\n          log.error(\"SPLITSHARD failed. \" + (i < 2 ? \" Retring split\" : \"\"), e);\n          if (i == 2) {\n            fail(\"SPLITSHARD was not successful even after three tries\");\n          }\n        }\n      }\n\n      waitForRecoveriesToFinish(collectionName, false);\n      SolrQuery solrQuery = new SolrQuery(\"*:*\");\n      assertEquals(\"DocCount on shard1_0 does not match\", docCounts[0], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_1 does not match\", docCounts[1], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_2 does not match\", docCounts[2], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n\n      solrQuery = new SolrQuery(\"n_ti:\" + uniqIdentifier);\n      assertEquals(\"shard1_0 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"Wrong number of docs on shard1_1 for route key: \" + splitKey, splitKeyDocCount, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"shard1_2 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitByRouteKeyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitByRouteKeyTest().mjava","sourceNew":"  private void splitByRouteKeyTest() throws Exception {\n    log.info(\"Starting splitByRouteKeyTest\");\n    String collectionName = \"splitByRouteKeyTest\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n    waitForRecoveriesToFinish(false);\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n\n      String splitKey = \"b!\";\n\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      final DocRouter router = clusterState.getCollection(collectionName).getRouter();\n      Slice shard1 = clusterState.getCollection(collectionName).getSlice(SHARD1);\n      DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n      final List<DocRouter.Range> ranges = ((CompositeIdRouter) router).partitionRangeByKey(splitKey, shard1Range);\n      final int[] docCounts = new int[ranges.size()];\n\n      int uniqIdentifier = (1 << 12);\n      int splitKeyDocCount = 0;\n      for (int i = 100; i <= 200; i++) {\n        String shardKey = \"\" + (char) ('a' + (i % 26)); // See comment in ShardRoutingTest for hash distribution\n\n        String idStr = shardKey + \"!\" + i;\n        collectionClient.add(getDoc(id, idStr, \"n_ti\", (shardKey + \"!\").equals(splitKey) ? uniqIdentifier : i));\n        int idx = getHashRangeIdx(router, ranges, idStr);\n        if (idx != -1) {\n          docCounts[idx]++;\n        }\n        if (splitKey.equals(shardKey + \"!\"))\n          splitKeyDocCount++;\n      }\n\n      for (int i = 0; i < docCounts.length; i++) {\n        int docCount = docCounts[i];\n        log.info(\"Shard shard1_{} docCount = {}\", i, docCount);\n      }\n      log.info(\"Route key doc count = {}\", splitKeyDocCount);\n\n      collectionClient.commit();\n\n      trySplit(collectionName, splitKey, null, 3);\n\n      waitForRecoveriesToFinish(collectionName, false);\n      SolrQuery solrQuery = new SolrQuery(\"*:*\");\n      assertEquals(\"DocCount on shard1_0 does not match\", docCounts[0], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_1 does not match\", docCounts[1], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_2 does not match\", docCounts[2], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n\n      solrQuery = new SolrQuery(\"n_ti:\" + uniqIdentifier);\n      assertEquals(\"shard1_0 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"Wrong number of docs on shard1_1 for route key: \" + splitKey, splitKeyDocCount, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"shard1_2 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void splitByRouteKeyTest() throws Exception {\n    log.info(\"Starting splitByRouteKeyTest\");\n    String collectionName = \"splitByRouteKeyTest\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n    waitForRecoveriesToFinish(false);\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n\n      String splitKey = \"b!\";\n\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      final DocRouter router = clusterState.getCollection(collectionName).getRouter();\n      Slice shard1 = clusterState.getCollection(collectionName).getSlice(SHARD1);\n      DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n      final List<DocRouter.Range> ranges = ((CompositeIdRouter) router).partitionRangeByKey(splitKey, shard1Range);\n      final int[] docCounts = new int[ranges.size()];\n\n      int uniqIdentifier = (1 << 12);\n      int splitKeyDocCount = 0;\n      for (int i = 100; i <= 200; i++) {\n        String shardKey = \"\" + (char) ('a' + (i % 26)); // See comment in ShardRoutingTest for hash distribution\n\n        String idStr = shardKey + \"!\" + i;\n        collectionClient.add(getDoc(id, idStr, \"n_ti\", (shardKey + \"!\").equals(splitKey) ? uniqIdentifier : i));\n        int idx = getHashRangeIdx(router, ranges, idStr);\n        if (idx != -1) {\n          docCounts[idx]++;\n        }\n        if (splitKey.equals(shardKey + \"!\"))\n          splitKeyDocCount++;\n      }\n\n      for (int i = 0; i < docCounts.length; i++) {\n        int docCount = docCounts[i];\n        log.info(\"Shard {} docCount = {}\", \"shard1_\" + i, docCount);\n      }\n      log.info(\"Route key doc count = {}\", splitKeyDocCount);\n\n      collectionClient.commit();\n\n      trySplit(collectionName, splitKey, null, 3);\n\n      waitForRecoveriesToFinish(collectionName, false);\n      SolrQuery solrQuery = new SolrQuery(\"*:*\");\n      assertEquals(\"DocCount on shard1_0 does not match\", docCounts[0], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_1 does not match\", docCounts[1], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_2 does not match\", docCounts[2], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n\n      solrQuery = new SolrQuery(\"n_ti:\" + uniqIdentifier);\n      assertEquals(\"shard1_0 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"Wrong number of docs on shard1_1 for route key: \" + splitKey, splitKeyDocCount, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"shard1_2 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitByRouteKeyTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitByRouteKeyTest().mjava","sourceNew":"  private void splitByRouteKeyTest() throws Exception {\n    log.info(\"Starting splitByRouteKeyTest\");\n    String collectionName = \"splitByRouteKeyTest\";\n    int numShards = 4;\n    int replicationFactor = 2;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n    waitForRecoveriesToFinish(false);\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n\n      String splitKey = \"b!\";\n\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      final DocRouter router = clusterState.getCollection(collectionName).getRouter();\n      Slice shard1 = clusterState.getCollection(collectionName).getSlice(SHARD1);\n      DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n      final List<DocRouter.Range> ranges = ((CompositeIdRouter) router).partitionRangeByKey(splitKey, shard1Range);\n      final int[] docCounts = new int[ranges.size()];\n\n      int uniqIdentifier = (1 << 12);\n      int splitKeyDocCount = 0;\n      for (int i = 100; i <= 200; i++) {\n        String shardKey = \"\" + (char) ('a' + (i % 26)); // See comment in ShardRoutingTest for hash distribution\n\n        String idStr = shardKey + \"!\" + i;\n        collectionClient.add(getDoc(id, idStr, \"n_ti\", (shardKey + \"!\").equals(splitKey) ? uniqIdentifier : i));\n        int idx = getHashRangeIdx(router, ranges, idStr);\n        if (idx != -1) {\n          docCounts[idx]++;\n        }\n        if (splitKey.equals(shardKey + \"!\"))\n          splitKeyDocCount++;\n      }\n\n      for (int i = 0; i < docCounts.length; i++) {\n        int docCount = docCounts[i];\n        log.info(\"Shard shard1_{} docCount = {}\", i, docCount);\n      }\n      log.info(\"Route key doc count = {}\", splitKeyDocCount);\n\n      collectionClient.commit();\n\n      trySplit(collectionName, splitKey, null, 3);\n\n      waitForRecoveriesToFinish(collectionName, false);\n      SolrQuery solrQuery = new SolrQuery(\"*:*\");\n      assertEquals(\"DocCount on shard1_0 does not match\", docCounts[0], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_1 does not match\", docCounts[1], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_2 does not match\", docCounts[2], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n\n      solrQuery = new SolrQuery(\"n_ti:\" + uniqIdentifier);\n      assertEquals(\"shard1_0 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"Wrong number of docs on shard1_1 for route key: \" + splitKey, splitKeyDocCount, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"shard1_2 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void splitByRouteKeyTest() throws Exception {\n    log.info(\"Starting splitByRouteKeyTest\");\n    String collectionName = \"splitByRouteKeyTest\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n    waitForRecoveriesToFinish(false);\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n\n      String splitKey = \"b!\";\n\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      final DocRouter router = clusterState.getCollection(collectionName).getRouter();\n      Slice shard1 = clusterState.getCollection(collectionName).getSlice(SHARD1);\n      DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n      final List<DocRouter.Range> ranges = ((CompositeIdRouter) router).partitionRangeByKey(splitKey, shard1Range);\n      final int[] docCounts = new int[ranges.size()];\n\n      int uniqIdentifier = (1 << 12);\n      int splitKeyDocCount = 0;\n      for (int i = 100; i <= 200; i++) {\n        String shardKey = \"\" + (char) ('a' + (i % 26)); // See comment in ShardRoutingTest for hash distribution\n\n        String idStr = shardKey + \"!\" + i;\n        collectionClient.add(getDoc(id, idStr, \"n_ti\", (shardKey + \"!\").equals(splitKey) ? uniqIdentifier : i));\n        int idx = getHashRangeIdx(router, ranges, idStr);\n        if (idx != -1) {\n          docCounts[idx]++;\n        }\n        if (splitKey.equals(shardKey + \"!\"))\n          splitKeyDocCount++;\n      }\n\n      for (int i = 0; i < docCounts.length; i++) {\n        int docCount = docCounts[i];\n        log.info(\"Shard shard1_{} docCount = {}\", i, docCount);\n      }\n      log.info(\"Route key doc count = {}\", splitKeyDocCount);\n\n      collectionClient.commit();\n\n      trySplit(collectionName, splitKey, null, 3);\n\n      waitForRecoveriesToFinish(collectionName, false);\n      SolrQuery solrQuery = new SolrQuery(\"*:*\");\n      assertEquals(\"DocCount on shard1_0 does not match\", docCounts[0], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_1 does not match\", docCounts[1], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"DocCount on shard1_2 does not match\", docCounts[2], collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n\n      solrQuery = new SolrQuery(\"n_ti:\" + uniqIdentifier);\n      assertEquals(\"shard1_0 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_0\")).getResults().getNumFound());\n      assertEquals(\"Wrong number of docs on shard1_1 for route key: \" + splitKey, splitKeyDocCount, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_1\")).getResults().getNumFound());\n      assertEquals(\"shard1_2 must have 0 docs for route key: \" + splitKey, 0, collectionClient.query(solrQuery.setParam(\"shards\", \"shard1_2\")).getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["a9be06eb0504cb6312c2a585959299e40280d9ba"],"a9be06eb0504cb6312c2a585959299e40280d9ba":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a9be06eb0504cb6312c2a585959299e40280d9ba":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["a9be06eb0504cb6312c2a585959299e40280d9ba"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}