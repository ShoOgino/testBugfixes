{"path":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","pathOld":"src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Random,Directory,int,String,String,int,float).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","sourceNew":"  void addDocs(final Random random, Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermdocPerf#addDocs(Directory,int,String,String,int,float).mjava","sourceNew":null,"sourceOld":"  void addDocs(Directory dir, final int ndocs, String field, final String val, final int maxTF, final float percentDocs) throws IOException {\n    final Random random = newRandom();\n    final RepeatingTokenStream ts = new RepeatingTokenStream(val);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        if (random.nextFloat() < percentDocs) ts.num = random.nextInt(maxTF)+1;\n        else ts.num=0;\n        return ts;\n      }\n    };\n\n    Document doc = new Document();\n    doc.add(new Field(field,val, Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(100));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n    for (int i=0; i<ndocs; i++) {\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["7ab99e8c71442b92c320e218141dee04a9b91ce8","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}