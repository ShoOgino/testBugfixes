{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","commits":[{"id":"5675e0f2650c73759602570318a9d1f64cfa7fd1","date":1366150364,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests sorting on type double with +/- zero */\n  public void testDoubleSignedZero() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"+0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"-0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // numeric order\n    assertEquals(\"-0\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"+0\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","sourceNew":"  /** Tests sorting on type double with +/- zero */\n  public void testDoubleSignedZero() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleField(\"value\", +0d, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleField(\"value\", -0d, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // numeric order\n    double v0 = searcher.doc(td.scoreDocs[0].doc).getField(\"value\").numericValue().doubleValue();\n    double v1 = searcher.doc(td.scoreDocs[1].doc).getField(\"value\").numericValue().doubleValue();\n    assertEquals(0, v0, 0d);\n    assertEquals(0, v1, 0d);\n    // check sign bits\n    assertEquals(1, Double.doubleToLongBits(v0) >>> 63);\n    assertEquals(0, Double.doubleToLongBits(v1) >>> 63);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type double with +/- zero */\n  public void testDoubleSignedZero() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"+0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"-0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // numeric order\n    assertEquals(\"-0\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"+0\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","sourceNew":"  /** Tests sorting on type double with +/- zero */\n  public void testDoubleSignedZero() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleField(\"value\", +0d, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleField(\"value\", -0d, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // numeric order\n    double v0 = searcher.doc(td.scoreDocs[0].doc).getField(\"value\").numericValue().doubleValue();\n    double v1 = searcher.doc(td.scoreDocs[1].doc).getField(\"value\").numericValue().doubleValue();\n    assertEquals(0, v0, 0d);\n    assertEquals(0, v1, 0d);\n    // check sign bits\n    assertEquals(1, Double.doubleToLongBits(v0) >>> 63);\n    assertEquals(0, Double.doubleToLongBits(v1) >>> 63);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type double with +/- zero */\n  public void testDoubleSignedZero() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"+0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"-0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // numeric order\n    assertEquals(\"-0\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"+0\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","sourceNew":"  /** Tests sorting on type double with +/- zero */\n  public void testDoubleSignedZero() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleField(\"value\", +0d, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleField(\"value\", -0d, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // numeric order\n    double v0 = searcher.doc(td.scoreDocs[0].doc).getField(\"value\").numericValue().doubleValue();\n    double v1 = searcher.doc(td.scoreDocs[1].doc).getField(\"value\").numericValue().doubleValue();\n    assertEquals(0, v0, 0d);\n    assertEquals(0, v1, 0d);\n    // check sign bits\n    assertEquals(1, Double.doubleToLongBits(v0) >>> 63);\n    assertEquals(0, Double.doubleToLongBits(v1) >>> 63);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type double with +/- zero */\n  public void testDoubleSignedZero() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleField(\"value\", +0d, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleField(\"value\", -0d, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // numeric order\n    double v0 = searcher.doc(td.scoreDocs[0].doc).getField(\"value\").numericValue().doubleValue();\n    double v1 = searcher.doc(td.scoreDocs[1].doc).getField(\"value\").numericValue().doubleValue();\n    assertEquals(0, v0, 0d);\n    assertEquals(0, v1, 0d);\n    // check sign bits\n    assertEquals(1, Double.doubleToLongBits(v0) >>> 63);\n    assertEquals(0, Double.doubleToLongBits(v1) >>> 63);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","sourceNew":"  /** Tests sorting on type double with +/- zero */\n  public void testDoubleSignedZero() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", +0D));\n    doc.add(newStringField(\"value\", \"+0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", -0D));\n    doc.add(newStringField(\"value\", \"-0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // numeric order\n    assertEquals(\"-0\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"+0\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type double with +/- zero */\n  public void testDoubleSignedZero() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleField(\"value\", +0d, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleField(\"value\", -0d, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // numeric order\n    double v0 = searcher.doc(td.scoreDocs[0].doc).getField(\"value\").numericValue().doubleValue();\n    double v1 = searcher.doc(td.scoreDocs[1].doc).getField(\"value\").numericValue().doubleValue();\n    assertEquals(0, v0, 0d);\n    assertEquals(0, v1, 0d);\n    // check sign bits\n    assertEquals(1, Double.doubleToLongBits(v0) >>> 63);\n    assertEquals(0, Double.doubleToLongBits(v1) >>> 63);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","sourceNew":"  /** Tests sorting on type double with +/- zero */\n  public void testDoubleSignedZero() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", +0D));\n    doc.add(newStringField(\"value\", \"+0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", -0D));\n    doc.add(newStringField(\"value\", \"-0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // numeric order\n    assertEquals(\"-0\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"+0\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type double with +/- zero */\n  public void testDoubleSignedZero() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleField(\"value\", +0d, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleField(\"value\", -0d, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // numeric order\n    double v0 = searcher.doc(td.scoreDocs[0].doc).getField(\"value\").numericValue().doubleValue();\n    double v1 = searcher.doc(td.scoreDocs[1].doc).getField(\"value\").numericValue().doubleValue();\n    assertEquals(0, v0, 0d);\n    assertEquals(0, v1, 0d);\n    // check sign bits\n    assertEquals(1, Double.doubleToLongBits(v0) >>> 63);\n    assertEquals(0, Double.doubleToLongBits(v1) >>> 63);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","sourceNew":"  /** Tests sorting on type double with +/- zero */\n  public void testDoubleSignedZero() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", +0D));\n    doc.add(newStringField(\"value\", \"+0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", -0D));\n    doc.add(newStringField(\"value\", \"-0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // numeric order\n    assertEquals(\"-0\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"+0\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type double with +/- zero */\n  public void testDoubleSignedZero() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleField(\"value\", +0d, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleField(\"value\", -0d, Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // numeric order\n    double v0 = searcher.doc(td.scoreDocs[0].doc).getField(\"value\").numericValue().doubleValue();\n    double v1 = searcher.doc(td.scoreDocs[1].doc).getField(\"value\").numericValue().doubleValue();\n    assertEquals(0, v0, 0d);\n    assertEquals(0, v1, 0d);\n    // check sign bits\n    assertEquals(1, Double.doubleToLongBits(v0) >>> 63);\n    assertEquals(0, Double.doubleToLongBits(v1) >>> 63);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","sourceNew":"  /** Tests sorting on type double with +/- zero */\n  public void testDoubleSignedZero() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", +0D));\n    doc.add(newStringField(\"value\", \"+0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", -0D));\n    doc.add(newStringField(\"value\", \"-0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // numeric order\n    assertEquals(\"-0\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"+0\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type double with +/- zero */\n  public void testDoubleSignedZero() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", +0D));\n    doc.add(newStringField(\"value\", \"+0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", -0D));\n    doc.add(newStringField(\"value\", \"-0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // numeric order\n    assertEquals(\"-0\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"+0\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testDoubleSignedZero().mjava","sourceNew":"  /** Tests sorting on type double with +/- zero */\n  public void testDoubleSignedZero() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", +0D));\n    doc.add(newStringField(\"value\", \"+0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", -0D));\n    doc.add(newStringField(\"value\", \"-0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits.value);\n    // numeric order\n    assertEquals(\"-0\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"+0\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type double with +/- zero */\n  public void testDoubleSignedZero() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", +0D));\n    doc.add(newStringField(\"value\", \"+0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"value\", -0D));\n    doc.add(newStringField(\"value\", \"-0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.DOUBLE));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // numeric order\n    assertEquals(\"-0\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"+0\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["5675e0f2650c73759602570318a9d1f64cfa7fd1","59a0020b413d44dd79d85d7a66ed5004265fb453"],"5675e0f2650c73759602570318a9d1f64cfa7fd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["5675e0f2650c73759602570318a9d1f64cfa7fd1"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"5675e0f2650c73759602570318a9d1f64cfa7fd1":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["d0ef034a4f10871667ae75181537775ddcf8ade4","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5675e0f2650c73759602570318a9d1f64cfa7fd1"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}