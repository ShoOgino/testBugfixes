{"path":"src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","commits":[{"id":"0d2039f9b69cef7b394370ee828e100bc25233e1","date":1205614161,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param destField\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n\t  SchemaField f = getField(destField);\n\t  if (!isCopyFieldTarget(f)) {\n\t\t  return new SchemaField[0];\n\t  }\n\t  List<SchemaField> sf = new ArrayList<SchemaField>();\n\t  for (Map.Entry<String, SchemaField[]> cfs : copyFields.entrySet()) {\n\t\t  for (SchemaField cf : cfs.getValue()) {\n\t\t\t  if (cf.getName().equals(destField)) {\n\t\t\t\t  sf.add(getField(cfs.getKey()));\n\t\t\t  }\n\t\t  }\n\t  }\n\t  return sf.toArray(new SchemaField[1]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3f722aaea0c06773a393c2b0d41079ba5cb8b0a","date":1216417422,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param destField\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return new SchemaField[0];\n    }\n    List<SchemaField> sf = new ArrayList<SchemaField>();\n    for (Map.Entry<String, SchemaField[]> cfs : copyFields.entrySet()) {\n      for (SchemaField cf : cfs.getValue()) {\n        if (cf.getName().equals(destField)) {\n          sf.add(getField(cfs.getKey()));\n        }\n      }\n    }\n    return sf.toArray(new SchemaField[1]);\n  }\n\n","sourceOld":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param destField\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n\t  SchemaField f = getField(destField);\n\t  if (!isCopyFieldTarget(f)) {\n\t\t  return new SchemaField[0];\n\t  }\n\t  List<SchemaField> sf = new ArrayList<SchemaField>();\n\t  for (Map.Entry<String, SchemaField[]> cfs : copyFields.entrySet()) {\n\t\t  for (SchemaField cf : cfs.getValue()) {\n\t\t\t  if (cf.getName().equals(destField)) {\n\t\t\t\t  sf.add(getField(cfs.getKey()));\n\t\t\t  }\n\t\t  }\n\t  }\n\t  return sf.toArray(new SchemaField[1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55883d09343e80968c5e44b9c14da13238544a0a","date":1228020380,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param destField\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return new SchemaField[0];\n    }\n    List<SchemaField> sf = new ArrayList<SchemaField>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          sf.add(copyField.getSource());\n        }\n      }\n    }\n    return sf.toArray(new SchemaField[sf.size()]);\n  }\n\n","sourceOld":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param destField\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return new SchemaField[0];\n    }\n    List<SchemaField> sf = new ArrayList<SchemaField>();\n    for (Map.Entry<String, SchemaField[]> cfs : copyFields.entrySet()) {\n      for (SchemaField cf : cfs.getValue()) {\n        if (cf.getName().equals(destField)) {\n          sf.add(getField(cfs.getKey()));\n        }\n      }\n    }\n    return sf.toArray(new SchemaField[1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param destField\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return new SchemaField[0];\n    }\n    List<SchemaField> sf = new ArrayList<SchemaField>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          sf.add(copyField.getSource());\n        }\n      }\n    }\n    return sf.toArray(new SchemaField[sf.size()]);\n  }\n\n","sourceOld":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param destField\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return new SchemaField[0];\n    }\n    List<SchemaField> sf = new ArrayList<SchemaField>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          sf.add(copyField.getSource());\n        }\n      }\n    }\n    return sf.toArray(new SchemaField[sf.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d2039f9b69cef7b394370ee828e100bc25233e1":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c3f722aaea0c06773a393c2b0d41079ba5cb8b0a":["0d2039f9b69cef7b394370ee828e100bc25233e1"],"ad94625fb8d088209f46650c8097196fec67f00c":["55883d09343e80968c5e44b9c14da13238544a0a"],"55883d09343e80968c5e44b9c14da13238544a0a":["c3f722aaea0c06773a393c2b0d41079ba5cb8b0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0d2039f9b69cef7b394370ee828e100bc25233e1":["c3f722aaea0c06773a393c2b0d41079ba5cb8b0a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0d2039f9b69cef7b394370ee828e100bc25233e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3f722aaea0c06773a393c2b0d41079ba5cb8b0a":["55883d09343e80968c5e44b9c14da13238544a0a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"55883d09343e80968c5e44b9c14da13238544a0a":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}