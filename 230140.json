{"path":"solr/core/src/java/org/apache/solr/response/DocsStreamer#getDoc(Document,IndexSchema).mjava","commits":[{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#getDoc(Document,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#getDoc(StoredDocument,IndexSchema).mjava","sourceNew":"  public static SolrDocument getDoc(Document doc, final IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for (IndexableField f : doc.getFields()) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          vals.add(f);\n          out.setField(f.name(), vals);\n        } else {\n          out.setField(f.name(), f);\n        }\n      } else {\n        out.addField(f.name(), f);\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  public static SolrDocument getDoc(StoredDocument doc, final IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for (StorableField f : doc.getFields()) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          vals.add(f);\n          out.setField(f.name(), vals);\n        } else {\n          out.setField(f.name(), f);\n        }\n      } else {\n        out.addField(f.name(), f);\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#convertLuceneDocToSolrDoc(Document,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#getDoc(Document,IndexSchema).mjava","sourceNew":"  // TODO move to SolrDocumentFetcher ?  Refactor to also call docFetcher.decorateDocValueFields(...) ?\n  public static SolrDocument convertLuceneDocToSolrDoc(Document doc, final IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for (IndexableField f : doc.getFields()) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          vals.add(f);\n          out.setField(f.name(), vals);\n        } else {\n          out.setField(f.name(), f);\n        }\n      } else {\n        out.addField(f.name(), f);\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  public static SolrDocument getDoc(Document doc, final IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for (IndexableField f : doc.getFields()) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          vals.add(f);\n          out.setField(f.name(), vals);\n        } else {\n          out.setField(f.name(), f);\n        }\n      } else {\n        out.addField(f.name(), f);\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":["b5d3613911d665344055ef7970e1783b3348b5c0","b5d3613911d665344055ef7970e1783b3348b5c0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#convertLuceneDocToSolrDoc(Document,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#getDoc(Document,IndexSchema).mjava","sourceNew":"  // TODO move to SolrDocumentFetcher ?  Refactor to also call docFetcher.decorateDocValueFields(...) ?\n  public static SolrDocument convertLuceneDocToSolrDoc(Document doc, final IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for (IndexableField f : doc.getFields()) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          vals.add(f);\n          out.setField(f.name(), vals);\n        } else {\n          out.setField(f.name(), f);\n        }\n      } else {\n        out.addField(f.name(), f);\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  public static SolrDocument getDoc(Document doc, final IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for (IndexableField f : doc.getFields()) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          vals.add(f);\n          out.setField(f.name(), vals);\n        } else {\n          out.setField(f.name(), f);\n        }\n      } else {\n        out.addField(f.name(), f);\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de548de3ce5405595899f548152d4b93ac9eb9cc":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"de548de3ce5405595899f548152d4b93ac9eb9cc":[],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["de548de3ce5405595899f548152d4b93ac9eb9cc","63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de548de3ce5405595899f548152d4b93ac9eb9cc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}