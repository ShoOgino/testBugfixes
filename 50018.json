{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final String[] geoHashValues = FieldCache.DEFAULT.getStrings(reader, geoHashField);\n\n    final int docBase = nextDocBase;\n    nextDocBase += reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {\n      @Override\n      public boolean match(int doc) {\n        \n        String geoHash = geoHashValues[doc];\n        double[] coords = GeoHashUtils.decode(geoHash);\n        double x = coords[0];\n        double y = coords[1];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n        Double cachedDistance = distanceLookupCache.get(geoHash);\n        double d;\n      \n        if (cachedDistance != null) {\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(geoHash, d);\n        }\n\n        if (d < distance){\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final String[] geoHashValues = FieldCache.DEFAULT.getStrings(reader, geoHashField);\n\n    final int docBase = nextDocBase;\n    nextDocBase += reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {\n      @Override\n      public boolean match(int doc) {\n        \n        String geoHash = geoHashValues[doc];\n        double[] coords = GeoHashUtils.decode(geoHash);\n        double x = coords[0];\n        double y = coords[1];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n        Double cachedDistance = distanceLookupCache.get(geoHash);\n        double d;\n      \n        if (cachedDistance != null) {\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(geoHash, d);\n        }\n\n        if (d < distance){\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(IndexReader).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final DocTerms geoHashValues = FieldCache.DEFAULT.getTerms(reader, geoHashField);\n    final BytesRef br = new BytesRef();\n\n    final int docBase = nextDocBase;\n    nextDocBase += reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {\n      @Override\n      public boolean match(int doc) {\n\n        // TODO: cutover to BytesRef so we don't have to\n        // make String here\n        String geoHash = geoHashValues.getTerm(doc, br).utf8ToString();\n        double[] coords = GeoHashUtils.decode(geoHash);\n        double x = coords[0];\n        double y = coords[1];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n        Double cachedDistance = distanceLookupCache.get(geoHash);\n        double d;\n      \n        if (cachedDistance != null) {\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(geoHash, d);\n        }\n\n        if (d < distance){\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final String[] geoHashValues = FieldCache.DEFAULT.getStrings(reader, geoHashField);\n\n    final int docBase = nextDocBase;\n    nextDocBase += reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {\n      @Override\n      public boolean match(int doc) {\n        \n        String geoHash = geoHashValues[doc];\n        double[] coords = GeoHashUtils.decode(geoHash);\n        double x = coords[0];\n        double y = coords[1];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n        Double cachedDistance = distanceLookupCache.get(geoHash);\n        double d;\n      \n        if (cachedDistance != null) {\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(geoHash, d);\n        }\n\n        if (d < distance){\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(IndexReader).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final DocTerms geoHashValues = FieldCache.DEFAULT.getTerms(reader, geoHashField);\n    final BytesRef br = new BytesRef();\n\n    final int docBase = nextDocBase;\n    nextDocBase += reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {\n      @Override\n      public boolean match(int doc) {\n\n        // TODO: cutover to BytesRef so we don't have to\n        // make String here\n        String geoHash = geoHashValues.getTerm(doc, br).utf8ToString();\n        double[] coords = GeoHashUtils.decode(geoHash);\n        double x = coords[0];\n        double y = coords[1];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n        Double cachedDistance = distanceLookupCache.get(geoHash);\n        double d;\n      \n        if (cachedDistance != null) {\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(geoHash, d);\n        }\n\n        if (d < distance){\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final DocTerms geoHashValues = FieldCache.DEFAULT.getTerms(reader, geoHashField);\n    final BytesRef br = new BytesRef();\n\n    final int docBase = nextDocBase;\n    nextDocBase += reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {\n      @Override\n      public boolean match(int doc) {\n\n        // TODO: cutover to BytesRef so we don't have to\n        // make String here\n        String geoHash = geoHashValues.getTerm(doc, br).utf8ToString();\n        double[] coords = GeoHashUtils.decode(geoHash);\n        double x = coords[0];\n        double y = coords[1];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n        Double cachedDistance = distanceLookupCache.get(geoHash);\n        double d;\n      \n        if (cachedDistance != null) {\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(geoHash, d);\n        }\n\n        if (d < distance){\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(IndexReader).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final DocTerms geoHashValues = FieldCache.DEFAULT.getTerms(reader, geoHashField);\n    final BytesRef br = new BytesRef();\n\n    final int docBase = nextDocBase;\n    nextDocBase += reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {\n      @Override\n      public boolean match(int doc) {\n\n        // TODO: cutover to BytesRef so we don't have to\n        // make String here\n        String geoHash = geoHashValues.getTerm(doc, br).utf8ToString();\n        double[] coords = GeoHashUtils.decode(geoHash);\n        double x = coords[0];\n        double y = coords[1];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n        Double cachedDistance = distanceLookupCache.get(geoHash);\n        double d;\n      \n        if (cachedDistance != null) {\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(geoHash, d);\n        }\n\n        if (d < distance){\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final DocTerms geoHashValues = FieldCache.DEFAULT.getTerms(reader, geoHashField);\n    final BytesRef br = new BytesRef();\n\n    final int docBase = nextDocBase;\n    nextDocBase += reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {\n      @Override\n      public boolean match(int doc) {\n\n        // TODO: cutover to BytesRef so we don't have to\n        // make String here\n        String geoHash = geoHashValues.getTerm(doc, br).utf8ToString();\n        double[] coords = GeoHashUtils.decode(geoHash);\n        double x = coords[0];\n        double y = coords[1];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n        Double cachedDistance = distanceLookupCache.get(geoHash);\n        double d;\n      \n        if (cachedDistance != null) {\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(geoHash, d);\n        }\n\n        if (d < distance){\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(ReaderContext).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n\n    final DocTerms geoHashValues = FieldCache.DEFAULT.getTerms(context.reader, geoHashField);\n    final BytesRef br = new BytesRef();\n\n    final int docBase = nextDocBase;\n    nextDocBase += context.reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(context)) {\n      @Override\n      public boolean match(int doc) {\n\n        // TODO: cutover to BytesRef so we don't have to\n        // make String here\n        String geoHash = geoHashValues.getTerm(doc, br).utf8ToString();\n        double[] coords = GeoHashUtils.decode(geoHash);\n        double x = coords[0];\n        double y = coords[1];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n        Double cachedDistance = distanceLookupCache.get(geoHash);\n        double d;\n      \n        if (cachedDistance != null) {\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(geoHash, d);\n        }\n\n        if (d < distance){\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final DocTerms geoHashValues = FieldCache.DEFAULT.getTerms(reader, geoHashField);\n    final BytesRef br = new BytesRef();\n\n    final int docBase = nextDocBase;\n    nextDocBase += reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {\n      @Override\n      public boolean match(int doc) {\n\n        // TODO: cutover to BytesRef so we don't have to\n        // make String here\n        String geoHash = geoHashValues.getTerm(doc, br).utf8ToString();\n        double[] coords = GeoHashUtils.decode(geoHash);\n        double x = coords[0];\n        double y = coords[1];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n        Double cachedDistance = distanceLookupCache.get(geoHash);\n        double d;\n      \n        if (cachedDistance != null) {\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(geoHash, d);\n        }\n\n        if (d < distance){\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final DocTerms geoHashValues = FieldCache.DEFAULT.getTerms(reader, geoHashField);\n    final BytesRef br = new BytesRef();\n\n    final int docBase = nextDocBase;\n    nextDocBase += reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {\n      @Override\n      public boolean match(int doc) {\n\n        // TODO: cutover to BytesRef so we don't have to\n        // make String here\n        String geoHash = geoHashValues.getTerm(doc, br).utf8ToString();\n        double[] coords = GeoHashUtils.decode(geoHash);\n        double x = coords[0];\n        double y = coords[1];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n        Double cachedDistance = distanceLookupCache.get(geoHash);\n        double d;\n      \n        if (cachedDistance != null) {\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(geoHash, d);\n        }\n\n        if (d < distance){\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashDistanceFilter#getDocIdSet(IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final DocTerms geoHashValues = FieldCache.DEFAULT.getTerms(reader, geoHashField);\n    final BytesRef br = new BytesRef();\n\n    final int docBase = nextDocBase;\n    nextDocBase += reader.maxDoc();\n\n    return new FilteredDocIdSet(startingFilter.getDocIdSet(reader)) {\n      @Override\n      public boolean match(int doc) {\n\n        // TODO: cutover to BytesRef so we don't have to\n        // make String here\n        String geoHash = geoHashValues.getTerm(doc, br).utf8ToString();\n        double[] coords = GeoHashUtils.decode(geoHash);\n        double x = coords[0];\n        double y = coords[1];\n      \n        // round off lat / longs if necessary\n        //      x = DistanceHandler.getPrecision(x, precise);\n        //      y = DistanceHandler.getPrecision(y, precise);\n        Double cachedDistance = distanceLookupCache.get(geoHash);\n        double d;\n      \n        if (cachedDistance != null) {\n          d = cachedDistance.doubleValue();\n        } else {\n          d = DistanceUtils.getDistanceMi(lat, lng, x, y);\n          distanceLookupCache.put(geoHash, d);\n        }\n\n        if (d < distance){\n          distances.put(doc+docBase, d);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["5f4e87790277826a2aea119328600dfb07761f32","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","5f4e87790277826a2aea119328600dfb07761f32"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","5f4e87790277826a2aea119328600dfb07761f32"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}