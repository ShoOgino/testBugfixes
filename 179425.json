{"path":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(FieldInvertState,Norm).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(FieldInvertState,Norm).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(FieldInvertState,Norm).mjava","sourceNew":"  /**\n   * Implemented as <code> state.getBoost() *\n   * computeLengthNorm(numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public void computeNorm(FieldInvertState state, Norm norm) {\n    final int numTokens;\n\n    if (discountOverlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    norm.setByte(encodeNormValue(state.getBoost() * computeLengthNorm(numTokens)));\n  }\n\n","sourceOld":"  /**\n   * Implemented as <code> state.getBoost() *\n   * computeLengthNorm(numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public void computeNorm(FieldInvertState state, Norm norm) {\n    final int numTokens;\n\n    if (discountOverlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    norm.setByte(encodeNormValue(state.getBoost() * computeLengthNorm(numTokens)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"953ba6667d987c58964da9cad38c2d9d61cca920","date":1352255075,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(FieldInvertState).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(FieldInvertState,Norm).mjava","sourceNew":"  /**\n   * Implemented as <code> state.getBoost() *\n   * computeLengthNorm(numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public float lengthNorm(FieldInvertState state) {\n    final int numTokens;\n\n    if (discountOverlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * computeLengthNorm(numTokens);\n  }\n\n","sourceOld":"  /**\n   * Implemented as <code> state.getBoost() *\n   * computeLengthNorm(numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public void computeNorm(FieldInvertState state, Norm norm) {\n    final int numTokens;\n\n    if (discountOverlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    norm.setByte(encodeNormValue(state.getBoost() * computeLengthNorm(numTokens)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"953ba6667d987c58964da9cad38c2d9d61cca920":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["953ba6667d987c58964da9cad38c2d9d61cca920"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["953ba6667d987c58964da9cad38c2d9d61cca920"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"953ba6667d987c58964da9cad38c2d9d61cca920":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}