{"path":"lucene/core/src/java/org/apache/lucene/geo/Rectangle2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","commits":[{"id":"56c42be8d779573d0c86ba775117e17360dbf5a6","date":1583217404,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Rectangle2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/XYRectangle2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  public PointValues.Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                             double ax, double ay, double bx, double by, double cx, double cy) {\n\n\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return PointValues.Relation.CELL_OUTSIDE_QUERY;\n    }\n    int edgesContain = numberOfCorners(ax, ay, bx, by, cx, cy);\n    if (edgesContain == 3) {\n      return PointValues.Relation.CELL_INSIDE_QUERY;\n    } else if (edgesContain != 0) {\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    } else if (Component2D.pointInTriangle(minX, maxX, minY, maxY, this.minX, this.minY,ax, ay, bx, by, cx, cy)\n        || edgesIntersect(ax, ay, bx, by)\n        || edgesIntersect(bx, by, cx, cy)\n        || edgesIntersect(cx, cy, ax, ay)) {\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n    return PointValues.Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  @Override\n  public PointValues.Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                             double ax, double ay, double bx, double by, double cx, double cy) {\n\n\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return PointValues.Relation.CELL_OUTSIDE_QUERY;\n    }\n    int edgesContain = numberOfCorners(ax, ay, bx, by, cx, cy);\n    if (edgesContain == 3) {\n      return PointValues.Relation.CELL_INSIDE_QUERY;\n    } else if (edgesContain != 0) {\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    } else if (Component2D.pointInTriangle(minX, maxX, minY, maxY, this.minX, this.minY,ax, ay, bx, by, cx, cy)\n        || edgesIntersect(ax, ay, bx, by)\n        || edgesIntersect(bx, by, cx, cy)\n        || edgesIntersect(cx, cy, ax, ay)) {\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n    return PointValues.Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Rectangle2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  @Override\n  public PointValues.Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                             double ax, double ay, double bx, double by, double cx, double cy) {\n\n\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return PointValues.Relation.CELL_OUTSIDE_QUERY;\n    }\n    int edgesContain = numberOfCorners(ax, ay, bx, by, cx, cy);\n    if (edgesContain == 3) {\n      return PointValues.Relation.CELL_INSIDE_QUERY;\n    } else if (edgesContain != 0) {\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    } else if (Component2D.pointInTriangle(minX, maxX, minY, maxY, this.minX, this.minY,ax, ay, bx, by, cx, cy)\n        || edgesIntersect(ax, ay, bx, by)\n        || edgesIntersect(bx, by, cx, cy)\n        || edgesIntersect(cx, cy, ax, ay)) {\n      return PointValues.Relation.CELL_CROSSES_QUERY;\n    }\n    return PointValues.Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c568a1e2a5125c2245150eebb030a81baa158b31":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["c568a1e2a5125c2245150eebb030a81baa158b31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}