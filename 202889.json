{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#setupTest().mjava","commits":[{"id":"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","date":1522388336,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#setupTest().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    // ensure that exactly 2 jetty nodes are running\n    int numJetties = cluster.getJettySolrRunners().size();\n    log.info(\"Found {} jetty instances running\", numJetties);\n    for (int i = 2; i < numJetties; i++) {\n      int r = random().nextInt(cluster.getJettySolrRunners().size());\n      log.info(\"Shutdown extra jetty instance at port {}\", cluster.getJettySolrRunner(r).getLocalPort());\n      cluster.stopJettySolrRunner(r);\n    }\n    for (int i = cluster.getJettySolrRunners().size(); i < 2; i++) {\n      // start jetty instances\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(5);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread) overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    events.clear();\n\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#setupTest().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    // ensure that exactly 2 jetty nodes are running\n    int numJetties = cluster.getJettySolrRunners().size();\n    log.info(\"Found {} jetty instances running\", numJetties);\n    for (int i = 2; i < numJetties; i++) {\n      int r = random().nextInt(cluster.getJettySolrRunners().size());\n      log.info(\"Shutdown extra jetty instance at port {}\", cluster.getJettySolrRunner(r).getLocalPort());\n      cluster.stopJettySolrRunner(r);\n    }\n    for (int i = cluster.getJettySolrRunners().size(); i < 2; i++) {\n      // start jetty instances\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(5);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread) overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    events.clear();\n\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.getSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread) overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    events.clear();\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    // ensure that exactly 2 jetty nodes are running\n    int numJetties = cluster.getJettySolrRunners().size();\n    log.info(\"Found {} jetty instances running\", numJetties);\n    for (int i = 2; i < numJetties; i++) {\n      int r = random().nextInt(cluster.getJettySolrRunners().size());\n      log.info(\"Shutdown extra jetty instance at port {}\", cluster.getJettySolrRunner(r).getLocalPort());\n      cluster.stopJettySolrRunner(r);\n    }\n    for (int i = cluster.getJettySolrRunners().size(); i < 2; i++) {\n      // start jetty instances\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(5);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread) overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    // restart Overseer. Even though we reset the autoscaling config some already running\n    // trigger threads may still continue to execute and produce spurious events\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    events.clear();\n\n    while (cluster.getJettySolrRunners().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.startJettySolrRunner();\n    }\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","bugFix":["deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    \n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster.getOpenOverseer().getSolrCloudManager(), \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster.getOpenOverseer().getSolrCloudManager(), \".scheduled_maintenance\");\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread) overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    events.clear();\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.getSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread) overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    events.clear();\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"914270355efc1f9583010cb165bb031a1e698f84","date":1546908784,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    \n    final Overseer overseer = cluster.getOpenOverseer();\n    assertNotNull(overseer);\n    cloudManager = overseer.getSolrCloudManager();\n    assertNotNull(cloudManager);\n      \n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cloudManager, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cloudManager, \".scheduled_maintenance\");\n\n    // aggressively remove all active scheduled triggers\n    final ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread) overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // TODO: is this really safe? is it possible overseer is still in process of adding some to schedule?\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    events.clear();\n\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    \n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster.getOpenOverseer().getSolrCloudManager(), \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster.getOpenOverseer().getSolrCloudManager(), \".scheduled_maintenance\");\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    Overseer overseer = cluster.getJettySolrRunner(overseerLeaderIndex).getCoreContainer().getZkController().getOverseer();\n    ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread) overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // aggressively remove all active scheduled triggers\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    events.clear();\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    \n    final Overseer overseer = cluster.getOpenOverseer();\n    assertNotNull(overseer);\n    cloudManager = overseer.getSolrCloudManager();\n    assertNotNull(cloudManager);\n      \n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cloudManager, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cloudManager, \".scheduled_maintenance\");\n\n    // aggressively remove all active scheduled triggers\n    final ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread) overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // TODO: is this really safe? is it possible overseer is still in process of adding some to schedule?\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    if (log.isInfoEnabled()) {\n      log.info(\"{} reset, new znode version {}\", SOLR_AUTOSCALING_CONF_PATH, stat.getVersion());\n    }\n\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    events.clear();\n\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    \n    final Overseer overseer = cluster.getOpenOverseer();\n    assertNotNull(overseer);\n    cloudManager = overseer.getSolrCloudManager();\n    assertNotNull(cloudManager);\n      \n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cloudManager, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cloudManager, \".scheduled_maintenance\");\n\n    // aggressively remove all active scheduled triggers\n    final ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread) overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // TODO: is this really safe? is it possible overseer is still in process of adding some to schedule?\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    events.clear();\n\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#setupTest().mjava","sourceNew":null,"sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    \n    final Overseer overseer = cluster.getOpenOverseer();\n    assertNotNull(overseer);\n    cloudManager = overseer.getSolrCloudManager();\n    assertNotNull(cloudManager);\n      \n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cloudManager, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cloudManager, \".scheduled_maintenance\");\n\n    // aggressively remove all active scheduled triggers\n    final ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread) overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    // TODO: is this really safe? is it possible overseer is still in process of adding some to schedule?\n    scheduledTriggers.removeAll();\n\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    if (log.isInfoEnabled()) {\n      log.info(\"{} reset, new znode version {}\", SOLR_AUTOSCALING_CONF_PATH, stat.getVersion());\n    }\n\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    events.clear();\n\n    // clear any events or markers\n    // todo: consider the impact of such cleanup on regular cluster restarts\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"914270355efc1f9583010cb165bb031a1e698f84":["89948af0461fead48f44ba8fb7866f107ce83f22"],"3f504512a03d978990cbff30db0522b354e846db":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["914270355efc1f9583010cb165bb031a1e698f84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"914270355efc1f9583010cb165bb031a1e698f84":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"89948af0461fead48f44ba8fb7866f107ce83f22":["914270355efc1f9583010cb165bb031a1e698f84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}