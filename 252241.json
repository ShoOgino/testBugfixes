{"path":"src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","commits":[{"id":"66ab3886c1d845c59c9e5b23b2fb247b927db498","date":1193060587,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"/dev/null","sourceNew":"  public Query parse() throws ParseException {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  public Query parse() throws ParseException {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    // handle legacy \"query;sort\" syntax\n    if (getLocalParams() == null) {\n      String qstr = getString();\n      sortStr = getParams().get(CommonParams.SORT);\n      if (sortStr == null) {\n        // sort may be legacy form, included in the query string\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if (commands.size() == 2) {\n          qstr = commands.get(0);\n          sortStr = commands.get(1);\n        } else if (commands.size() == 1) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get(0);\n        }\n        else if (commands.size() > 2) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\");\n        }\n      }\n      setString(qstr);\n    }\n\n    return super.parse();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66ab3886c1d845c59c9e5b23b2fb247b927db498":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"66ab3886c1d845c59c9e5b23b2fb247b927db498":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}