{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","commits":[{"id":"abe5a5b55ce06226629251ec4c197c1d08c70b18","date":1341826007,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22659e4b60cbbd3c13216360578240ddeca2d8b4","date":1341827398,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e7f30683f53928b2fce016e6430c9795caff22","date":1341839598,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", text);\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\", text);\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", text);\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\", text);\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"field\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"special\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", text);\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\", text);\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":["182a54c797bc7bc946c631e8ebdb8bdf8807814b","a775c547c3519b47efd41c09cb47100ddb9604c7","74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","cf7efd82433f3f64684711c16edfd149db6af111","c83d6c4335f31cae14f625a222bc842f20073dcd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"field\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"special\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"field\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"special\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e6076d5869e894e98558285d9c9be9179d93921","date":1404559951,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String,Analyzer> analyzerPerField =\n        Collections.<String,Analyzer>singletonMap(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"field\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"special\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"field\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"special\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String,Analyzer> analyzerPerField =\n        Collections.<String,Analyzer>singletonMap(\"special\", new SimpleAnalyzer());\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), analyzerPerField);\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"field\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"special\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String,Analyzer> analyzerPerField =\n        Collections.<String,Analyzer>singletonMap(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"field\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"special\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String,Analyzer> analyzerPerField =\n        Collections.<String,Analyzer>singletonMap(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"field\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"special\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String,Analyzer> analyzerPerField =\n        Collections.<String,Analyzer>singletonMap(\"special\", new SimpleAnalyzer());\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), analyzerPerField);\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"field\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"special\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String,Analyzer> analyzerPerField =\n        Collections.<String,Analyzer>singletonMap(\"special\", new SimpleAnalyzer());\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), analyzerPerField);\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"field\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"special\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String,Analyzer> analyzerPerField =\n        Collections.<String,Analyzer>singletonMap(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"field\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"special\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String,Analyzer> analyzerPerField =\n        Collections.<String,Analyzer>singletonMap(\"special\", new SimpleAnalyzer());\n    \n    Analyzer defaultAnalyzer = new WhitespaceAnalyzer();\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(defaultAnalyzer, analyzerPerField);\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"field\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"special\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n    // TODO: fix this about PFAW, this is crazy\n    analyzer.close();\n    defaultAnalyzer.close();\n    IOUtils.close(analyzerPerField.values());    \n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String,Analyzer> analyzerPerField =\n        Collections.<String,Analyzer>singletonMap(\"special\", new SimpleAnalyzer());\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), analyzerPerField);\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"field\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"special\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String,Analyzer> analyzerPerField =\n        Collections.<String,Analyzer>singletonMap(\"special\", new SimpleAnalyzer());\n    \n    Analyzer defaultAnalyzer = new WhitespaceAnalyzer();\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(defaultAnalyzer, analyzerPerField);\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"field\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"special\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n    // TODO: fix this about PFAW, this is crazy\n    analyzer.close();\n    defaultAnalyzer.close();\n    IOUtils.close(analyzerPerField.values());    \n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String,Analyzer> analyzerPerField =\n        Collections.<String,Analyzer>singletonMap(\"special\", new SimpleAnalyzer());\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), analyzerPerField);\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"field\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(\"special\", text)) {\n      CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n\n      assertTrue(tokenStream.incrementToken());\n      assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n      assertFalse(tokenStream.incrementToken());\n      tokenStream.end();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["6e6076d5869e894e98558285d9c9be9179d93921"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"04e7f30683f53928b2fce016e6430c9795caff22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","abe5a5b55ce06226629251ec4c197c1d08c70b18"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["abe5a5b55ce06226629251ec4c197c1d08c70b18","c83d6c4335f31cae14f625a222bc842f20073dcd"],"abe5a5b55ce06226629251ec4c197c1d08c70b18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"6e6076d5869e894e98558285d9c9be9179d93921":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["abe5a5b55ce06226629251ec4c197c1d08c70b18"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","abe5a5b55ce06226629251ec4c197c1d08c70b18"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22659e4b60cbbd3c13216360578240ddeca2d8b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","abe5a5b55ce06226629251ec4c197c1d08c70b18"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6e6076d5869e894e98558285d9c9be9179d93921"],"04e7f30683f53928b2fce016e6430c9795caff22":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"abe5a5b55ce06226629251ec4c197c1d08c70b18":["04e7f30683f53928b2fce016e6430c9795caff22","37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd","fe33227f6805edab2036cbb80645cc4e2d1fa424","22659e4b60cbbd3c13216360578240ddeca2d8b4"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"6e6076d5869e894e98558285d9c9be9179d93921":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04e7f30683f53928b2fce016e6430c9795caff22","abe5a5b55ce06226629251ec4c197c1d08c70b18","fe33227f6805edab2036cbb80645cc4e2d1fa424","22659e4b60cbbd3c13216360578240ddeca2d8b4"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"22659e4b60cbbd3c13216360578240ddeca2d8b4":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["04e7f30683f53928b2fce016e6430c9795caff22","37a0f60745e53927c4c876cfe5b5a58170f0646c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fe33227f6805edab2036cbb80645cc4e2d1fa424","22659e4b60cbbd3c13216360578240ddeca2d8b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}