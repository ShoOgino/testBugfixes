{"path":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(SolrClassLoader,Node).mjava","commits":[{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(SolrClassLoader,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(SolrResourceLoader,Node).mjava","sourceNew":"  /**\n   * Initializes and registers a single plugin.\n   * \n   * Given a NodeList from XML in the form:\n   * <pre class=\"prettyprint\">\n   * {@code\n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>}\n   * </pre>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(SolrClassLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      if (log.isDebugEnabled()) {\n        log.debug(\"created {}: {}\", name, plugin.getClass().getName());\n      }\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","sourceOld":"  /**\n   * Initializes and registers a single plugin.\n   * \n   * Given a NodeList from XML in the form:\n   * <pre class=\"prettyprint\">\n   * {@code\n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>}\n   * </pre>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(SolrResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      if (log.isDebugEnabled()) {\n        log.debug(\"created {}: {}\", name, plugin.getClass().getName());\n      }\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"]},"commit2Childs":{"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}