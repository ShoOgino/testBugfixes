{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","commits":[{"id":"f18d4e1cdc7330101ca433af5e8564dfd894f2bf","date":1379041877,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","pathOld":"/dev/null","sourceNew":"    // $ANTLR start \"postfix\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) );\n    public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n        JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token ID47=null;\n        JavascriptParser.primary_return primary46 =null;\n\n        JavascriptParser.arguments_return arguments48 =null;\n\n\n        CommonTree ID47_tree=null;\n        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,\"token ID\");\n        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) )\n            int alt14=2;\n            int LA14_0 = input.LA(1);\n\n            if ( (LA14_0==ID) ) {\n                int LA14_1 = input.LA(2);\n\n                if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n                    alt14=1;\n                }\n                else if ( (LA14_1==AT_LPAREN) ) {\n                    alt14=2;\n                }\n                else {\n                    NoViableAltException nvae =\n                        new NoViableAltException(\"\", 14, 1, input);\n\n                    throw nvae;\n\n                }\n            }\n            else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n                alt14=1;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 14, 0, input);\n\n                throw nvae;\n\n            }\n            switch (alt14) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_primary_in_postfix1160);\n                    primary46=primary();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, primary46.getTree());\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: ID arguments\n                    {\n                    ID47=(Token)match(input,ID,FOLLOW_ID_in_postfix1168);  \n                    stream_ID.add(ID47);\n\n\n                    pushFollow(FOLLOW_arguments_in_postfix1170);\n                    arguments48=arguments();\n\n                    state._fsp--;\n\n                    stream_arguments.add(arguments48.getTree());\n\n                    // AST REWRITE\n                    // elements: arguments, ID\n                    // token labels: \n                    // rule labels: retval\n                    // token list labels: \n                    // rule list labels: \n                    // wildcard labels: \n                    retval.tree = root_0;\n                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                    root_0 = (CommonTree)adaptor.nil();\n                    // 312:20: -> ^( AT_CALL ID ( arguments )? )\n                    {\n                        // src/java/org/apache/lucene/expressions/js/Javascript.g:312:23: ^( AT_CALL ID ( arguments )? )\n                        {\n                        CommonTree root_1 = (CommonTree)adaptor.nil();\n                        root_1 = (CommonTree)adaptor.becomeRoot(\n                        (CommonTree)adaptor.create(AT_CALL, \"AT_CALL\")\n                        , root_1);\n\n                        adaptor.addChild(root_1, \n                        stream_ID.nextNode()\n                        );\n\n                        // src/java/org/apache/lucene/expressions/js/Javascript.g:312:36: ( arguments )?\n                        if ( stream_arguments.hasNext() ) {\n                            adaptor.addChild(root_1, stream_arguments.nextTree());\n\n                        }\n                        stream_arguments.reset();\n\n                        adaptor.addChild(root_0, root_1);\n                        }\n\n                    }\n\n\n                    retval.tree = root_0;\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n    \tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n        \t// do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"postfix\"\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3623d67605fbbdfce2fadea678e2f4bbe2ab2310","date":1379042933,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","sourceNew":"    // $ANTLR start \"postfix\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) );\n    public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n        JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token ID47=null;\n        JavascriptParser.primary_return primary46 =null;\n\n        JavascriptParser.arguments_return arguments48 =null;\n\n\n        CommonTree ID47_tree=null;\n        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,\"token ID\");\n        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) )\n            int alt14=2;\n            int LA14_0 = input.LA(1);\n\n            if ( (LA14_0==ID) ) {\n                int LA14_1 = input.LA(2);\n\n                if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n                    alt14=1;\n                }\n                else if ( (LA14_1==AT_LPAREN) ) {\n                    alt14=2;\n                }\n                else {\n                    NoViableAltException nvae =\n                        new NoViableAltException(\"\", 14, 1, input);\n\n                    throw nvae;\n\n                }\n            }\n            else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n                alt14=1;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 14, 0, input);\n\n                throw nvae;\n\n            }\n            switch (alt14) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_primary_in_postfix1160);\n                    primary46=primary();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, primary46.getTree());\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: ID arguments\n                    {\n                    ID47=(Token)match(input,ID,FOLLOW_ID_in_postfix1168);  \n                    stream_ID.add(ID47);\n\n\n                    pushFollow(FOLLOW_arguments_in_postfix1170);\n                    arguments48=arguments();\n\n                    state._fsp--;\n\n                    stream_arguments.add(arguments48.getTree());\n\n                    // AST REWRITE\n                    // elements: arguments, ID\n                    // token labels: \n                    // rule labels: retval\n                    // token list labels: \n                    // rule list labels: \n                    // wildcard labels: \n                    retval.tree = root_0;\n                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                    root_0 = (CommonTree)adaptor.nil();\n                    // 312:20: -> ^( AT_CALL ID ( arguments )? )\n                    {\n                        // src/java/org/apache/lucene/expressions/js/Javascript.g:312:23: ^( AT_CALL ID ( arguments )? )\n                        {\n                        CommonTree root_1 = (CommonTree)adaptor.nil();\n                        root_1 = (CommonTree)adaptor.becomeRoot(\n                        (CommonTree)adaptor.create(AT_CALL, \"AT_CALL\")\n                        , root_1);\n\n                        adaptor.addChild(root_1, \n                        stream_ID.nextNode()\n                        );\n\n                        // src/java/org/apache/lucene/expressions/js/Javascript.g:312:36: ( arguments )?\n                        if ( stream_arguments.hasNext() ) {\n                            adaptor.addChild(root_1, stream_arguments.nextTree());\n\n                        }\n                        stream_arguments.reset();\n\n                        adaptor.addChild(root_0, root_1);\n                        }\n\n                    }\n\n\n                    retval.tree = root_0;\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"postfix\"\n\n","sourceOld":"    // $ANTLR start \"postfix\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) );\n    public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n        JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token ID47=null;\n        JavascriptParser.primary_return primary46 =null;\n\n        JavascriptParser.arguments_return arguments48 =null;\n\n\n        CommonTree ID47_tree=null;\n        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,\"token ID\");\n        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) )\n            int alt14=2;\n            int LA14_0 = input.LA(1);\n\n            if ( (LA14_0==ID) ) {\n                int LA14_1 = input.LA(2);\n\n                if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n                    alt14=1;\n                }\n                else if ( (LA14_1==AT_LPAREN) ) {\n                    alt14=2;\n                }\n                else {\n                    NoViableAltException nvae =\n                        new NoViableAltException(\"\", 14, 1, input);\n\n                    throw nvae;\n\n                }\n            }\n            else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n                alt14=1;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 14, 0, input);\n\n                throw nvae;\n\n            }\n            switch (alt14) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_primary_in_postfix1160);\n                    primary46=primary();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, primary46.getTree());\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: ID arguments\n                    {\n                    ID47=(Token)match(input,ID,FOLLOW_ID_in_postfix1168);  \n                    stream_ID.add(ID47);\n\n\n                    pushFollow(FOLLOW_arguments_in_postfix1170);\n                    arguments48=arguments();\n\n                    state._fsp--;\n\n                    stream_arguments.add(arguments48.getTree());\n\n                    // AST REWRITE\n                    // elements: arguments, ID\n                    // token labels: \n                    // rule labels: retval\n                    // token list labels: \n                    // rule list labels: \n                    // wildcard labels: \n                    retval.tree = root_0;\n                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                    root_0 = (CommonTree)adaptor.nil();\n                    // 312:20: -> ^( AT_CALL ID ( arguments )? )\n                    {\n                        // src/java/org/apache/lucene/expressions/js/Javascript.g:312:23: ^( AT_CALL ID ( arguments )? )\n                        {\n                        CommonTree root_1 = (CommonTree)adaptor.nil();\n                        root_1 = (CommonTree)adaptor.becomeRoot(\n                        (CommonTree)adaptor.create(AT_CALL, \"AT_CALL\")\n                        , root_1);\n\n                        adaptor.addChild(root_1, \n                        stream_ID.nextNode()\n                        );\n\n                        // src/java/org/apache/lucene/expressions/js/Javascript.g:312:36: ( arguments )?\n                        if ( stream_arguments.hasNext() ) {\n                            adaptor.addChild(root_1, stream_arguments.nextTree());\n\n                        }\n                        stream_arguments.reset();\n\n                        adaptor.addChild(root_0, root_1);\n                        }\n\n                    }\n\n\n                    retval.tree = root_0;\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n    \tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n        \t// do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"postfix\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2","date":1379096281,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","sourceNew":"    // $ANTLR start \"postfix\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) );\n    public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n        JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n        retval.start = input.LT(1);\n\n        CommonTree root_0 = null;\n\n        Token ID47=null;\n        ParserRuleReturnScope primary46 =null;\n        ParserRuleReturnScope arguments48 =null;\n\n        CommonTree ID47_tree=null;\n        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,\"token ID\");\n        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) )\n            int alt14=2;\n            int LA14_0 = input.LA(1);\n            if ( (LA14_0==ID) ) {\n                int LA14_1 = input.LA(2);\n                if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n                    alt14=1;\n                }\n                else if ( (LA14_1==AT_LPAREN) ) {\n                    alt14=2;\n                }\n\n                else {\n                    int nvaeMark = input.mark();\n                    try {\n                        input.consume();\n                        NoViableAltException nvae =\n                            new NoViableAltException(\"\", 14, 1, input);\n                        throw nvae;\n                    } finally {\n                        input.rewind(nvaeMark);\n                    }\n                }\n\n            }\n            else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n                alt14=1;\n            }\n\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 14, 0, input);\n                throw nvae;\n            }\n\n            switch (alt14) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_primary_in_postfix1160);\n                    primary46=primary();\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, primary46.getTree());\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: ID arguments\n                    {\n                    ID47=(Token)match(input,ID,FOLLOW_ID_in_postfix1168);  \n                    stream_ID.add(ID47);\n\n                    pushFollow(FOLLOW_arguments_in_postfix1170);\n                    arguments48=arguments();\n                    state._fsp--;\n\n                    stream_arguments.add(arguments48.getTree());\n                    // AST REWRITE\n                    // elements: ID, arguments\n                    // token labels: \n                    // rule labels: retval\n                    // token list labels: \n                    // rule list labels: \n                    // wildcard labels: \n                    retval.tree = root_0;\n                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n                    root_0 = (CommonTree)adaptor.nil();\n                    // 312:20: -> ^( AT_CALL ID ( arguments )? )\n                    {\n                        // src/java/org/apache/lucene/expressions/js/Javascript.g:312:23: ^( AT_CALL ID ( arguments )? )\n                        {\n                        CommonTree root_1 = (CommonTree)adaptor.nil();\n                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL, \"AT_CALL\"), root_1);\n                        adaptor.addChild(root_1, stream_ID.nextNode());\n                        // src/java/org/apache/lucene/expressions/js/Javascript.g:312:36: ( arguments )?\n                        if ( stream_arguments.hasNext() ) {\n                            adaptor.addChild(root_1, stream_arguments.nextTree());\n                        }\n                        stream_arguments.reset();\n\n                        adaptor.addChild(root_0, root_1);\n                        }\n\n                    }\n\n\n                    retval.tree = root_0;\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n        }\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"postfix\"\n\n","sourceOld":"    // $ANTLR start \"postfix\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) );\n    public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n        JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token ID47=null;\n        JavascriptParser.primary_return primary46 =null;\n\n        JavascriptParser.arguments_return arguments48 =null;\n\n\n        CommonTree ID47_tree=null;\n        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,\"token ID\");\n        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) )\n            int alt14=2;\n            int LA14_0 = input.LA(1);\n\n            if ( (LA14_0==ID) ) {\n                int LA14_1 = input.LA(2);\n\n                if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n                    alt14=1;\n                }\n                else if ( (LA14_1==AT_LPAREN) ) {\n                    alt14=2;\n                }\n                else {\n                    NoViableAltException nvae =\n                        new NoViableAltException(\"\", 14, 1, input);\n\n                    throw nvae;\n\n                }\n            }\n            else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n                alt14=1;\n            }\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 14, 0, input);\n\n                throw nvae;\n\n            }\n            switch (alt14) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_primary_in_postfix1160);\n                    primary46=primary();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, primary46.getTree());\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: ID arguments\n                    {\n                    ID47=(Token)match(input,ID,FOLLOW_ID_in_postfix1168);  \n                    stream_ID.add(ID47);\n\n\n                    pushFollow(FOLLOW_arguments_in_postfix1170);\n                    arguments48=arguments();\n\n                    state._fsp--;\n\n                    stream_arguments.add(arguments48.getTree());\n\n                    // AST REWRITE\n                    // elements: arguments, ID\n                    // token labels: \n                    // rule labels: retval\n                    // token list labels: \n                    // rule list labels: \n                    // wildcard labels: \n                    retval.tree = root_0;\n                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                    root_0 = (CommonTree)adaptor.nil();\n                    // 312:20: -> ^( AT_CALL ID ( arguments )? )\n                    {\n                        // src/java/org/apache/lucene/expressions/js/Javascript.g:312:23: ^( AT_CALL ID ( arguments )? )\n                        {\n                        CommonTree root_1 = (CommonTree)adaptor.nil();\n                        root_1 = (CommonTree)adaptor.becomeRoot(\n                        (CommonTree)adaptor.create(AT_CALL, \"AT_CALL\")\n                        , root_1);\n\n                        adaptor.addChild(root_1, \n                        stream_ID.nextNode()\n                        );\n\n                        // src/java/org/apache/lucene/expressions/js/Javascript.g:312:36: ( arguments )?\n                        if ( stream_arguments.hasNext() ) {\n                            adaptor.addChild(root_1, stream_arguments.nextTree());\n\n                        }\n                        stream_arguments.reset();\n\n                        adaptor.addChild(root_0, root_1);\n                        }\n\n                    }\n\n\n                    retval.tree = root_0;\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"postfix\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1441eba4282a646ef88d12acb797483db37554e","date":1379096538,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","sourceNew":"  // $ANTLR start \"postfix\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) );\n  public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n    JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token ID47=null;\n    ParserRuleReturnScope primary46 =null;\n    ParserRuleReturnScope arguments48 =null;\n\n    CommonTree ID47_tree=null;\n    RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,\"token ID\");\n    RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) )\n      int alt14=2;\n      int LA14_0 = input.LA(1);\n      if ( (LA14_0==ID) ) {\n        int LA14_1 = input.LA(2);\n        if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n          alt14=1;\n        }\n        else if ( (LA14_1==AT_LPAREN) ) {\n          alt14=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 14, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n      else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n        alt14=1;\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 14, 0, input);\n        throw nvae;\n      }\n\n      switch (alt14) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_primary_in_postfix1160);\n          primary46=primary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, primary46.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: ID arguments\n          {\n          ID47=(Token)match(input,ID,FOLLOW_ID_in_postfix1168);  \n          stream_ID.add(ID47);\n\n          pushFollow(FOLLOW_arguments_in_postfix1170);\n          arguments48=arguments();\n          state._fsp--;\n\n          stream_arguments.add(arguments48.getTree());\n          // AST REWRITE\n          // elements: ID, arguments\n          // token labels: \n          // rule labels: retval\n          // token list labels: \n          // rule list labels: \n          // wildcard labels: \n          retval.tree = root_0;\n          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n          root_0 = (CommonTree)adaptor.nil();\n          // 312:20: -> ^( AT_CALL ID ( arguments )? )\n          {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:23: ^( AT_CALL ID ( arguments )? )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL, \"AT_CALL\"), root_1);\n            adaptor.addChild(root_1, stream_ID.nextNode());\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:36: ( arguments )?\n            if ( stream_arguments.hasNext() ) {\n              adaptor.addChild(root_1, stream_arguments.nextTree());\n            }\n            stream_arguments.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n          }\n\n\n          retval.tree = root_0;\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"postfix\"\n\n","sourceOld":"    // $ANTLR start \"postfix\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) );\n    public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n        JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n        retval.start = input.LT(1);\n\n        CommonTree root_0 = null;\n\n        Token ID47=null;\n        ParserRuleReturnScope primary46 =null;\n        ParserRuleReturnScope arguments48 =null;\n\n        CommonTree ID47_tree=null;\n        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,\"token ID\");\n        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) )\n            int alt14=2;\n            int LA14_0 = input.LA(1);\n            if ( (LA14_0==ID) ) {\n                int LA14_1 = input.LA(2);\n                if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n                    alt14=1;\n                }\n                else if ( (LA14_1==AT_LPAREN) ) {\n                    alt14=2;\n                }\n\n                else {\n                    int nvaeMark = input.mark();\n                    try {\n                        input.consume();\n                        NoViableAltException nvae =\n                            new NoViableAltException(\"\", 14, 1, input);\n                        throw nvae;\n                    } finally {\n                        input.rewind(nvaeMark);\n                    }\n                }\n\n            }\n            else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n                alt14=1;\n            }\n\n            else {\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 14, 0, input);\n                throw nvae;\n            }\n\n            switch (alt14) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_primary_in_postfix1160);\n                    primary46=primary();\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, primary46.getTree());\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: ID arguments\n                    {\n                    ID47=(Token)match(input,ID,FOLLOW_ID_in_postfix1168);  \n                    stream_ID.add(ID47);\n\n                    pushFollow(FOLLOW_arguments_in_postfix1170);\n                    arguments48=arguments();\n                    state._fsp--;\n\n                    stream_arguments.add(arguments48.getTree());\n                    // AST REWRITE\n                    // elements: ID, arguments\n                    // token labels: \n                    // rule labels: retval\n                    // token list labels: \n                    // rule list labels: \n                    // wildcard labels: \n                    retval.tree = root_0;\n                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n                    root_0 = (CommonTree)adaptor.nil();\n                    // 312:20: -> ^( AT_CALL ID ( arguments )? )\n                    {\n                        // src/java/org/apache/lucene/expressions/js/Javascript.g:312:23: ^( AT_CALL ID ( arguments )? )\n                        {\n                        CommonTree root_1 = (CommonTree)adaptor.nil();\n                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL, \"AT_CALL\"), root_1);\n                        adaptor.addChild(root_1, stream_ID.nextNode());\n                        // src/java/org/apache/lucene/expressions/js/Javascript.g:312:36: ( arguments )?\n                        if ( stream_arguments.hasNext() ) {\n                            adaptor.addChild(root_1, stream_arguments.nextTree());\n                        }\n                        stream_arguments.reset();\n\n                        adaptor.addChild(root_0, root_1);\n                        }\n\n                    }\n\n\n                    retval.tree = root_0;\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n        }\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"postfix\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f45b82814241f46ba52b4d3dc144ff25eac13a45","date":1379097642,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","sourceNew":"  // $ANTLR start \"postfix\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) );\n  public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n    JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token ID47=null;\n    ParserRuleReturnScope primary46 =null;\n    ParserRuleReturnScope arguments48 =null;\n\n    CommonTree ID47_tree=null;\n    RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,\"token ID\");\n    RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) )\n      int alt14=2;\n      int LA14_0 = input.LA(1);\n      if ( (LA14_0==ID) ) {\n        int LA14_1 = input.LA(2);\n        if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n          alt14=1;\n        }\n        else if ( (LA14_1==AT_LPAREN) ) {\n          alt14=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 14, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n      else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n        alt14=1;\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 14, 0, input);\n        throw nvae;\n      }\n\n      switch (alt14) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_primary_in_postfix1160);\n          primary46=primary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, primary46.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: ID arguments\n          {\n          ID47=(Token)match(input,ID,FOLLOW_ID_in_postfix1168);  \n          stream_ID.add(ID47);\n\n          pushFollow(FOLLOW_arguments_in_postfix1170);\n          arguments48=arguments();\n          state._fsp--;\n\n          stream_arguments.add(arguments48.getTree());\n          // AST REWRITE\n          // elements: arguments, ID\n          // token labels: \n          // rule labels: retval\n          // token list labels: \n          // rule list labels: \n          // wildcard labels: \n          retval.tree = root_0;\n          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n          root_0 = (CommonTree)adaptor.nil();\n          // 312:20: -> ^( AT_CALL ID ( arguments )? )\n          {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:23: ^( AT_CALL ID ( arguments )? )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL, \"AT_CALL\"), root_1);\n            adaptor.addChild(root_1, stream_ID.nextNode());\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:36: ( arguments )?\n            if ( stream_arguments.hasNext() ) {\n              adaptor.addChild(root_1, stream_arguments.nextTree());\n            }\n            stream_arguments.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n          }\n\n\n          retval.tree = root_0;\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"postfix\"\n\n","sourceOld":"  // $ANTLR start \"postfix\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) );\n  public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n    JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token ID47=null;\n    ParserRuleReturnScope primary46 =null;\n    ParserRuleReturnScope arguments48 =null;\n\n    CommonTree ID47_tree=null;\n    RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,\"token ID\");\n    RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) )\n      int alt14=2;\n      int LA14_0 = input.LA(1);\n      if ( (LA14_0==ID) ) {\n        int LA14_1 = input.LA(2);\n        if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n          alt14=1;\n        }\n        else if ( (LA14_1==AT_LPAREN) ) {\n          alt14=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 14, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n      else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n        alt14=1;\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 14, 0, input);\n        throw nvae;\n      }\n\n      switch (alt14) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_primary_in_postfix1160);\n          primary46=primary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, primary46.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: ID arguments\n          {\n          ID47=(Token)match(input,ID,FOLLOW_ID_in_postfix1168);  \n          stream_ID.add(ID47);\n\n          pushFollow(FOLLOW_arguments_in_postfix1170);\n          arguments48=arguments();\n          state._fsp--;\n\n          stream_arguments.add(arguments48.getTree());\n          // AST REWRITE\n          // elements: ID, arguments\n          // token labels: \n          // rule labels: retval\n          // token list labels: \n          // rule list labels: \n          // wildcard labels: \n          retval.tree = root_0;\n          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n          root_0 = (CommonTree)adaptor.nil();\n          // 312:20: -> ^( AT_CALL ID ( arguments )? )\n          {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:23: ^( AT_CALL ID ( arguments )? )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL, \"AT_CALL\"), root_1);\n            adaptor.addChild(root_1, stream_ID.nextNode());\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:36: ( arguments )?\n            if ( stream_arguments.hasNext() ) {\n              adaptor.addChild(root_1, stream_arguments.nextTree());\n            }\n            stream_arguments.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n          }\n\n\n          retval.tree = root_0;\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"postfix\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","pathOld":"/dev/null","sourceNew":"  // $ANTLR start \"postfix\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) );\n  public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n    JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token ID47=null;\n    ParserRuleReturnScope primary46 =null;\n    ParserRuleReturnScope arguments48 =null;\n\n    CommonTree ID47_tree=null;\n    RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,\"token ID\");\n    RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) )\n      int alt14=2;\n      int LA14_0 = input.LA(1);\n      if ( (LA14_0==ID) ) {\n        int LA14_1 = input.LA(2);\n        if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n          alt14=1;\n        }\n        else if ( (LA14_1==AT_LPAREN) ) {\n          alt14=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 14, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n      else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n        alt14=1;\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 14, 0, input);\n        throw nvae;\n      }\n\n      switch (alt14) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_primary_in_postfix1160);\n          primary46=primary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, primary46.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: ID arguments\n          {\n          ID47=(Token)match(input,ID,FOLLOW_ID_in_postfix1168);  \n          stream_ID.add(ID47);\n\n          pushFollow(FOLLOW_arguments_in_postfix1170);\n          arguments48=arguments();\n          state._fsp--;\n\n          stream_arguments.add(arguments48.getTree());\n          // AST REWRITE\n          // elements: arguments, ID\n          // token labels: \n          // rule labels: retval\n          // token list labels: \n          // rule list labels: \n          // wildcard labels: \n          retval.tree = root_0;\n          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n          root_0 = (CommonTree)adaptor.nil();\n          // 312:20: -> ^( AT_CALL ID ( arguments )? )\n          {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:23: ^( AT_CALL ID ( arguments )? )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL, \"AT_CALL\"), root_1);\n            adaptor.addChild(root_1, stream_ID.nextNode());\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:36: ( arguments )?\n            if ( stream_arguments.hasNext() ) {\n              adaptor.addChild(root_1, stream_arguments.nextTree());\n            }\n            stream_arguments.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n          }\n\n\n          retval.tree = root_0;\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"postfix\"\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d639dc27b5b3eae561ef321b06f3cad9280c529","date":1383945027,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","sourceNew":"  // $ANTLR start \"postfix\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) );\n  public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n    JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token NAMESPACE_ID47=null;\n    ParserRuleReturnScope primary46 =null;\n    ParserRuleReturnScope arguments48 =null;\n\n    CommonTree NAMESPACE_ID47_tree=null;\n    RewriteRuleTokenStream stream_NAMESPACE_ID=new RewriteRuleTokenStream(adaptor,\"token NAMESPACE_ID\");\n    RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) )\n      int alt14=2;\n      int LA14_0 = input.LA(1);\n      if ( (LA14_0==NAMESPACE_ID) ) {\n        int LA14_1 = input.LA(2);\n        if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n          alt14=1;\n        }\n        else if ( (LA14_1==AT_LPAREN) ) {\n          alt14=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 14, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n      else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n        alt14=1;\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 14, 0, input);\n        throw nvae;\n      }\n\n      switch (alt14) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_primary_in_postfix1160);\n          primary46=primary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, primary46.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: NAMESPACE_ID arguments\n          {\n          NAMESPACE_ID47=(Token)match(input,NAMESPACE_ID,FOLLOW_NAMESPACE_ID_in_postfix1168);  \n          stream_NAMESPACE_ID.add(NAMESPACE_ID47);\n\n          pushFollow(FOLLOW_arguments_in_postfix1170);\n          arguments48=arguments();\n          state._fsp--;\n\n          stream_arguments.add(arguments48.getTree());\n          // AST REWRITE\n          // elements: NAMESPACE_ID, arguments\n          // token labels: \n          // rule labels: retval\n          // token list labels: \n          // rule list labels: \n          // wildcard labels: \n          retval.tree = root_0;\n          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n          root_0 = (CommonTree)adaptor.nil();\n          // 312:30: -> ^( AT_CALL NAMESPACE_ID ( arguments )? )\n          {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:33: ^( AT_CALL NAMESPACE_ID ( arguments )? )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL, \"AT_CALL\"), root_1);\n            adaptor.addChild(root_1, stream_NAMESPACE_ID.nextNode());\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:56: ( arguments )?\n            if ( stream_arguments.hasNext() ) {\n              adaptor.addChild(root_1, stream_arguments.nextTree());\n            }\n            stream_arguments.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n          }\n\n\n          retval.tree = root_0;\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"postfix\"\n\n","sourceOld":"  // $ANTLR start \"postfix\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) );\n  public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n    JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token ID47=null;\n    ParserRuleReturnScope primary46 =null;\n    ParserRuleReturnScope arguments48 =null;\n\n    CommonTree ID47_tree=null;\n    RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,\"token ID\");\n    RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | ID arguments -> ^( AT_CALL ID ( arguments )? ) )\n      int alt14=2;\n      int LA14_0 = input.LA(1);\n      if ( (LA14_0==ID) ) {\n        int LA14_1 = input.LA(2);\n        if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n          alt14=1;\n        }\n        else if ( (LA14_1==AT_LPAREN) ) {\n          alt14=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 14, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n      else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n        alt14=1;\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 14, 0, input);\n        throw nvae;\n      }\n\n      switch (alt14) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_primary_in_postfix1160);\n          primary46=primary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, primary46.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: ID arguments\n          {\n          ID47=(Token)match(input,ID,FOLLOW_ID_in_postfix1168);  \n          stream_ID.add(ID47);\n\n          pushFollow(FOLLOW_arguments_in_postfix1170);\n          arguments48=arguments();\n          state._fsp--;\n\n          stream_arguments.add(arguments48.getTree());\n          // AST REWRITE\n          // elements: arguments, ID\n          // token labels: \n          // rule labels: retval\n          // token list labels: \n          // rule list labels: \n          // wildcard labels: \n          retval.tree = root_0;\n          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n          root_0 = (CommonTree)adaptor.nil();\n          // 312:20: -> ^( AT_CALL ID ( arguments )? )\n          {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:23: ^( AT_CALL ID ( arguments )? )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL, \"AT_CALL\"), root_1);\n            adaptor.addChild(root_1, stream_ID.nextNode());\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:36: ( arguments )?\n            if ( stream_arguments.hasNext() ) {\n              adaptor.addChild(root_1, stream_arguments.nextTree());\n            }\n            stream_arguments.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n          }\n\n\n          retval.tree = root_0;\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"postfix\"\n\n","bugFix":null,"bugIntro":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2284ec7b7c73174ca051dd51acdba799c2b5860c","date":1402649660,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","sourceNew":"  // $ANTLR start \"postfix\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) );\n  public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n    JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token NAMESPACE_ID47=null;\n    ParserRuleReturnScope primary46 =null;\n    ParserRuleReturnScope arguments48 =null;\n\n    CommonTree NAMESPACE_ID47_tree=null;\n    RewriteRuleTokenStream stream_NAMESPACE_ID=new RewriteRuleTokenStream(adaptor,\"token NAMESPACE_ID\");\n    RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) )\n      int alt14=2;\n      int LA14_0 = input.LA(1);\n      if ( (LA14_0==NAMESPACE_ID) ) {\n        int LA14_1 = input.LA(2);\n        if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n          alt14=1;\n        }\n        else if ( (LA14_1==AT_LPAREN) ) {\n          alt14=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 14, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n      else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n        alt14=1;\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 14, 0, input);\n        throw nvae;\n      }\n\n      switch (alt14) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_primary_in_postfix1160);\n          primary46=primary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, primary46.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: NAMESPACE_ID arguments\n          {\n          NAMESPACE_ID47=(Token)match(input,NAMESPACE_ID,FOLLOW_NAMESPACE_ID_in_postfix1168);  \n          stream_NAMESPACE_ID.add(NAMESPACE_ID47);\n\n          pushFollow(FOLLOW_arguments_in_postfix1170);\n          arguments48=arguments();\n          state._fsp--;\n\n          stream_arguments.add(arguments48.getTree());\n          // AST REWRITE\n          // elements: arguments, NAMESPACE_ID\n          // token labels: \n          // rule labels: retval\n          // token list labels: \n          // rule list labels: \n          // wildcard labels: \n          retval.tree = root_0;\n          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n          root_0 = (CommonTree)adaptor.nil();\n          // 312:30: -> ^( AT_CALL NAMESPACE_ID ( arguments )? )\n          {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:33: ^( AT_CALL NAMESPACE_ID ( arguments )? )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL, \"AT_CALL\"), root_1);\n            adaptor.addChild(root_1, stream_NAMESPACE_ID.nextNode());\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:56: ( arguments )?\n            if ( stream_arguments.hasNext() ) {\n              adaptor.addChild(root_1, stream_arguments.nextTree());\n            }\n            stream_arguments.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n          }\n\n\n          retval.tree = root_0;\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"postfix\"\n\n","sourceOld":"  // $ANTLR start \"postfix\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) );\n  public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n    JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token NAMESPACE_ID47=null;\n    ParserRuleReturnScope primary46 =null;\n    ParserRuleReturnScope arguments48 =null;\n\n    CommonTree NAMESPACE_ID47_tree=null;\n    RewriteRuleTokenStream stream_NAMESPACE_ID=new RewriteRuleTokenStream(adaptor,\"token NAMESPACE_ID\");\n    RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) )\n      int alt14=2;\n      int LA14_0 = input.LA(1);\n      if ( (LA14_0==NAMESPACE_ID) ) {\n        int LA14_1 = input.LA(2);\n        if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n          alt14=1;\n        }\n        else if ( (LA14_1==AT_LPAREN) ) {\n          alt14=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 14, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n      else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n        alt14=1;\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 14, 0, input);\n        throw nvae;\n      }\n\n      switch (alt14) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_primary_in_postfix1160);\n          primary46=primary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, primary46.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: NAMESPACE_ID arguments\n          {\n          NAMESPACE_ID47=(Token)match(input,NAMESPACE_ID,FOLLOW_NAMESPACE_ID_in_postfix1168);  \n          stream_NAMESPACE_ID.add(NAMESPACE_ID47);\n\n          pushFollow(FOLLOW_arguments_in_postfix1170);\n          arguments48=arguments();\n          state._fsp--;\n\n          stream_arguments.add(arguments48.getTree());\n          // AST REWRITE\n          // elements: NAMESPACE_ID, arguments\n          // token labels: \n          // rule labels: retval\n          // token list labels: \n          // rule list labels: \n          // wildcard labels: \n          retval.tree = root_0;\n          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n          root_0 = (CommonTree)adaptor.nil();\n          // 312:30: -> ^( AT_CALL NAMESPACE_ID ( arguments )? )\n          {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:33: ^( AT_CALL NAMESPACE_ID ( arguments )? )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL, \"AT_CALL\"), root_1);\n            adaptor.addChild(root_1, stream_NAMESPACE_ID.nextNode());\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:56: ( arguments )?\n            if ( stream_arguments.hasNext() ) {\n              adaptor.addChild(root_1, stream_arguments.nextTree());\n            }\n            stream_arguments.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n          }\n\n\n          retval.tree = root_0;\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"postfix\"\n\n","bugFix":null,"bugIntro":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","sourceNew":"  // $ANTLR start \"postfix\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) );\n  public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n    JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token NAMESPACE_ID47=null;\n    ParserRuleReturnScope primary46 =null;\n    ParserRuleReturnScope arguments48 =null;\n\n    CommonTree NAMESPACE_ID47_tree=null;\n    RewriteRuleTokenStream stream_NAMESPACE_ID=new RewriteRuleTokenStream(adaptor,\"token NAMESPACE_ID\");\n    RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) )\n      int alt14=2;\n      int LA14_0 = input.LA(1);\n      if ( (LA14_0==NAMESPACE_ID) ) {\n        int LA14_1 = input.LA(2);\n        if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n          alt14=1;\n        }\n        else if ( (LA14_1==AT_LPAREN) ) {\n          alt14=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 14, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n      else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n        alt14=1;\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 14, 0, input);\n        throw nvae;\n      }\n\n      switch (alt14) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_primary_in_postfix1160);\n          primary46=primary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, primary46.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: NAMESPACE_ID arguments\n          {\n          NAMESPACE_ID47=(Token)match(input,NAMESPACE_ID,FOLLOW_NAMESPACE_ID_in_postfix1168);  \n          stream_NAMESPACE_ID.add(NAMESPACE_ID47);\n\n          pushFollow(FOLLOW_arguments_in_postfix1170);\n          arguments48=arguments();\n          state._fsp--;\n\n          stream_arguments.add(arguments48.getTree());\n          // AST REWRITE\n          // elements: arguments, NAMESPACE_ID\n          // token labels: \n          // rule labels: retval\n          // token list labels: \n          // rule list labels: \n          // wildcard labels: \n          retval.tree = root_0;\n          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n          root_0 = (CommonTree)adaptor.nil();\n          // 312:30: -> ^( AT_CALL NAMESPACE_ID ( arguments )? )\n          {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:33: ^( AT_CALL NAMESPACE_ID ( arguments )? )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL, \"AT_CALL\"), root_1);\n            adaptor.addChild(root_1, stream_NAMESPACE_ID.nextNode());\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:56: ( arguments )?\n            if ( stream_arguments.hasNext() ) {\n              adaptor.addChild(root_1, stream_arguments.nextTree());\n            }\n            stream_arguments.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n          }\n\n\n          retval.tree = root_0;\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"postfix\"\n\n","sourceOld":"  // $ANTLR start \"postfix\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) );\n  public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n    JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token NAMESPACE_ID47=null;\n    ParserRuleReturnScope primary46 =null;\n    ParserRuleReturnScope arguments48 =null;\n\n    CommonTree NAMESPACE_ID47_tree=null;\n    RewriteRuleTokenStream stream_NAMESPACE_ID=new RewriteRuleTokenStream(adaptor,\"token NAMESPACE_ID\");\n    RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) )\n      int alt14=2;\n      int LA14_0 = input.LA(1);\n      if ( (LA14_0==NAMESPACE_ID) ) {\n        int LA14_1 = input.LA(2);\n        if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n          alt14=1;\n        }\n        else if ( (LA14_1==AT_LPAREN) ) {\n          alt14=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 14, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n      else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n        alt14=1;\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 14, 0, input);\n        throw nvae;\n      }\n\n      switch (alt14) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_primary_in_postfix1160);\n          primary46=primary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, primary46.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: NAMESPACE_ID arguments\n          {\n          NAMESPACE_ID47=(Token)match(input,NAMESPACE_ID,FOLLOW_NAMESPACE_ID_in_postfix1168);  \n          stream_NAMESPACE_ID.add(NAMESPACE_ID47);\n\n          pushFollow(FOLLOW_arguments_in_postfix1170);\n          arguments48=arguments();\n          state._fsp--;\n\n          stream_arguments.add(arguments48.getTree());\n          // AST REWRITE\n          // elements: NAMESPACE_ID, arguments\n          // token labels: \n          // rule labels: retval\n          // token list labels: \n          // rule list labels: \n          // wildcard labels: \n          retval.tree = root_0;\n          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n          root_0 = (CommonTree)adaptor.nil();\n          // 312:30: -> ^( AT_CALL NAMESPACE_ID ( arguments )? )\n          {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:33: ^( AT_CALL NAMESPACE_ID ( arguments )? )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL, \"AT_CALL\"), root_1);\n            adaptor.addChild(root_1, stream_NAMESPACE_ID.nextNode());\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:56: ( arguments )?\n            if ( stream_arguments.hasNext() ) {\n              adaptor.addChild(root_1, stream_arguments.nextTree());\n            }\n            stream_arguments.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n          }\n\n\n          retval.tree = root_0;\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"postfix\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c","date":1404947938,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","sourceNew":"  // $ANTLR start \"postfix\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | VARIABLE arguments -> ^( AT_CALL VARIABLE ( arguments )? ) );\n  public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n    JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token VARIABLE47=null;\n    ParserRuleReturnScope primary46 =null;\n    ParserRuleReturnScope arguments48 =null;\n\n    CommonTree VARIABLE47_tree=null;\n    RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,\"token VARIABLE\");\n    RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | VARIABLE arguments -> ^( AT_CALL VARIABLE ( arguments )? ) )\n      int alt14=2;\n      int LA14_0 = input.LA(1);\n      if ( (LA14_0==VARIABLE) ) {\n        int LA14_1 = input.LA(2);\n        if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n          alt14=1;\n        }\n        else if ( (LA14_1==AT_LPAREN) ) {\n          alt14=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 14, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n      else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n        alt14=1;\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 14, 0, input);\n        throw nvae;\n      }\n\n      switch (alt14) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_primary_in_postfix1160);\n          primary46=primary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, primary46.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: VARIABLE arguments\n          {\n          VARIABLE47=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_postfix1168);  \n          stream_VARIABLE.add(VARIABLE47);\n\n          pushFollow(FOLLOW_arguments_in_postfix1170);\n          arguments48=arguments();\n          state._fsp--;\n\n          stream_arguments.add(arguments48.getTree());\n          // AST REWRITE\n          // elements: VARIABLE, arguments\n          // token labels: \n          // rule labels: retval\n          // token list labels: \n          // rule list labels: \n          // wildcard labels: \n          retval.tree = root_0;\n          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n          root_0 = (CommonTree)adaptor.nil();\n          // 312:26: -> ^( AT_CALL VARIABLE ( arguments )? )\n          {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:29: ^( AT_CALL VARIABLE ( arguments )? )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL, \"AT_CALL\"), root_1);\n            adaptor.addChild(root_1, stream_VARIABLE.nextNode());\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:48: ( arguments )?\n            if ( stream_arguments.hasNext() ) {\n              adaptor.addChild(root_1, stream_arguments.nextTree());\n            }\n            stream_arguments.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n          }\n\n\n          retval.tree = root_0;\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"postfix\"\n\n","sourceOld":"  // $ANTLR start \"postfix\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) );\n  public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n    JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token NAMESPACE_ID47=null;\n    ParserRuleReturnScope primary46 =null;\n    ParserRuleReturnScope arguments48 =null;\n\n    CommonTree NAMESPACE_ID47_tree=null;\n    RewriteRuleTokenStream stream_NAMESPACE_ID=new RewriteRuleTokenStream(adaptor,\"token NAMESPACE_ID\");\n    RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | NAMESPACE_ID arguments -> ^( AT_CALL NAMESPACE_ID ( arguments )? ) )\n      int alt14=2;\n      int LA14_0 = input.LA(1);\n      if ( (LA14_0==NAMESPACE_ID) ) {\n        int LA14_1 = input.LA(2);\n        if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n          alt14=1;\n        }\n        else if ( (LA14_1==AT_LPAREN) ) {\n          alt14=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 14, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n      else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n        alt14=1;\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 14, 0, input);\n        throw nvae;\n      }\n\n      switch (alt14) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_primary_in_postfix1160);\n          primary46=primary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, primary46.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: NAMESPACE_ID arguments\n          {\n          NAMESPACE_ID47=(Token)match(input,NAMESPACE_ID,FOLLOW_NAMESPACE_ID_in_postfix1168);  \n          stream_NAMESPACE_ID.add(NAMESPACE_ID47);\n\n          pushFollow(FOLLOW_arguments_in_postfix1170);\n          arguments48=arguments();\n          state._fsp--;\n\n          stream_arguments.add(arguments48.getTree());\n          // AST REWRITE\n          // elements: arguments, NAMESPACE_ID\n          // token labels: \n          // rule labels: retval\n          // token list labels: \n          // rule list labels: \n          // wildcard labels: \n          retval.tree = root_0;\n          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n          root_0 = (CommonTree)adaptor.nil();\n          // 312:30: -> ^( AT_CALL NAMESPACE_ID ( arguments )? )\n          {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:33: ^( AT_CALL NAMESPACE_ID ( arguments )? )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL, \"AT_CALL\"), root_1);\n            adaptor.addChild(root_1, stream_NAMESPACE_ID.nextNode());\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:56: ( arguments )?\n            if ( stream_arguments.hasNext() ) {\n              adaptor.addChild(root_1, stream_arguments.nextTree());\n            }\n            stream_arguments.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n          }\n\n\n          retval.tree = root_0;\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"postfix\"\n\n","bugFix":["8d639dc27b5b3eae561ef321b06f3cad9280c529","2284ec7b7c73174ca051dd51acdba799c2b5860c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d23d4828afa583ebf35b4a541763af6206133458","date":1438931440,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#postfix().mjava","sourceNew":null,"sourceOld":"  // $ANTLR start \"postfix\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:310:1: postfix : ( primary | VARIABLE arguments -> ^( AT_CALL VARIABLE ( arguments )? ) );\n  public final JavascriptParser.postfix_return postfix() throws RecognitionException {\n    JavascriptParser.postfix_return retval = new JavascriptParser.postfix_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token VARIABLE47=null;\n    ParserRuleReturnScope primary46 =null;\n    ParserRuleReturnScope arguments48 =null;\n\n    CommonTree VARIABLE47_tree=null;\n    RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,\"token VARIABLE\");\n    RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,\"rule arguments\");\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:311:5: ( primary | VARIABLE arguments -> ^( AT_CALL VARIABLE ( arguments )? ) )\n      int alt14=2;\n      int LA14_0 = input.LA(1);\n      if ( (LA14_0==VARIABLE) ) {\n        int LA14_1 = input.LA(2);\n        if ( (LA14_1==EOF||(LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND)||(LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND)||LA14_1==AT_BOOL_OR||(LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE)||(LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY)||(LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT)) ) {\n          alt14=1;\n        }\n        else if ( (LA14_1==AT_LPAREN) ) {\n          alt14=2;\n        }\n\n        else {\n          int nvaeMark = input.mark();\n          try {\n            input.consume();\n            NoViableAltException nvae =\n              new NoViableAltException(\"\", 14, 1, input);\n            throw nvae;\n          } finally {\n            input.rewind(nvaeMark);\n          }\n        }\n\n      }\n      else if ( (LA14_0==AT_LPAREN||LA14_0==DECIMAL||LA14_0==HEX||LA14_0==OCTAL) ) {\n        alt14=1;\n      }\n\n      else {\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 14, 0, input);\n        throw nvae;\n      }\n\n      switch (alt14) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:311:7: primary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_primary_in_postfix1160);\n          primary46=primary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, primary46.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:312:7: VARIABLE arguments\n          {\n          VARIABLE47=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_postfix1168);  \n          stream_VARIABLE.add(VARIABLE47);\n\n          pushFollow(FOLLOW_arguments_in_postfix1170);\n          arguments48=arguments();\n          state._fsp--;\n\n          stream_arguments.add(arguments48.getTree());\n          // AST REWRITE\n          // elements: VARIABLE, arguments\n          // token labels: \n          // rule labels: retval\n          // token list labels: \n          // rule list labels: \n          // wildcard labels: \n          retval.tree = root_0;\n          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n          root_0 = (CommonTree)adaptor.nil();\n          // 312:26: -> ^( AT_CALL VARIABLE ( arguments )? )\n          {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:29: ^( AT_CALL VARIABLE ( arguments )? )\n            {\n            CommonTree root_1 = (CommonTree)adaptor.nil();\n            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL, \"AT_CALL\"), root_1);\n            adaptor.addChild(root_1, stream_VARIABLE.nextNode());\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:312:48: ( arguments )?\n            if ( stream_arguments.hasNext() ) {\n              adaptor.addChild(root_1, stream_arguments.nextTree());\n            }\n            stream_arguments.reset();\n\n            adaptor.addChild(root_0, root_1);\n            }\n\n          }\n\n\n          retval.tree = root_0;\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"postfix\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d23d4828afa583ebf35b4a541763af6206133458":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1441eba4282a646ef88d12acb797483db37554e":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"8d639dc27b5b3eae561ef321b06f3cad9280c529":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["8d639dc27b5b3eae561ef321b06f3cad9280c529","2284ec7b7c73174ca051dd51acdba799c2b5860c"],"3623d67605fbbdfce2fadea678e2f4bbe2ab2310":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf"],"2284ec7b7c73174ca051dd51acdba799c2b5860c":["8d639dc27b5b3eae561ef321b06f3cad9280c529"],"f45b82814241f46ba52b4d3dc144ff25eac13a45":["d1441eba4282a646ef88d12acb797483db37554e"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["3623d67605fbbdfce2fadea678e2f4bbe2ab2310"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["2284ec7b7c73174ca051dd51acdba799c2b5860c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d23d4828afa583ebf35b4a541763af6206133458"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f45b82814241f46ba52b4d3dc144ff25eac13a45"]},"commit2Childs":{"d23d4828afa583ebf35b4a541763af6206133458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["3623d67605fbbdfce2fadea678e2f4bbe2ab2310"],"d1441eba4282a646ef88d12acb797483db37554e":["f45b82814241f46ba52b4d3dc144ff25eac13a45"],"8d639dc27b5b3eae561ef321b06f3cad9280c529":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","2284ec7b7c73174ca051dd51acdba799c2b5860c"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"3623d67605fbbdfce2fadea678e2f4bbe2ab2310":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"2284ec7b7c73174ca051dd51acdba799c2b5860c":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"f45b82814241f46ba52b4d3dc144ff25eac13a45":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["d1441eba4282a646ef88d12acb797483db37554e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["d23d4828afa583ebf35b4a541763af6206133458"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["8d639dc27b5b3eae561ef321b06f3cad9280c529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}