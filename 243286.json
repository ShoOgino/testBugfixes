{"path":"solr/core/src/java/org/apache/solr/handler/ExportWriter.PriorityQueue#insertWithOverflow(T).mjava","commits":[{"id":"cbb7f1f4cf1e9a820364c090bb7e9a590f351339","date":1478603266,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter.PriorityQueue#insertWithOverflow(T).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SortingResponseWriter[ExportWriter].PriorityQueue#insertWithOverflow(T).mjava","sourceNew":"    /**\n     * Adds an Object to a PriorityQueue in log(size) time.\n     * It returns the object (if any) that was\n     * dropped off the heap because it was full. This can be\n     * the given parameter (in case it is smaller than the\n     * full heap's minimum, and couldn't be added), or another\n     * object that was previously the smallest value in the\n     * heap and now has been replaced by a larger one, or null\n     * if the queue wasn't yet full with maxSize elements.\n     */\n    public T insertWithOverflow(T element) {\n      if (size < maxSize) {\n        add(element);\n        return null;\n      } else if (size > 0 && !lessThan(element, heap[1])) {\n        T ret = heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","sourceOld":"    /**\n     * Adds an Object to a PriorityQueue in log(size) time.\n     * It returns the object (if any) that was\n     * dropped off the heap because it was full. This can be\n     * the given parameter (in case it is smaller than the\n     * full heap's minimum, and couldn't be added), or another\n     * object that was previously the smallest value in the\n     * heap and now has been replaced by a larger one, or null\n     * if the queue wasn't yet full with maxSize elements.\n     */\n    public T insertWithOverflow(T element) {\n      if (size < maxSize) {\n        add(element);\n        return null;\n      } else if (size > 0 && !lessThan(element, heap[1])) {\n        T ret = heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter.PriorityQueue#insertWithOverflow(T).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter.PriorityQueue#insertWithOverflow(T).mjava","sourceNew":"    /**\n     * Adds an Object to a PriorityQueue in log(size) time.\n     * It returns the object (if any) that was\n     * dropped off the heap because it was full. This can be\n     * the given parameter (in case it is smaller than the\n     * full heap's minimum, and couldn't be added), or another\n     * object that was previously the smallest value in the\n     * heap and now has been replaced by a larger one, or null\n     * if the queue wasn't yet full with maxSize elements.\n     */\n    public T insertWithOverflow(T element) {\n      if (size < maxSize) {\n        add(element);\n        return null;\n      } else if (size > 0 && !lessThan(element, heap[1])) {\n        T ret = heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","sourceOld":"    /**\n     * Adds an Object to a PriorityQueue in log(size) time.\n     * It returns the object (if any) that was\n     * dropped off the heap because it was full. This can be\n     * the given parameter (in case it is smaller than the\n     * full heap's minimum, and couldn't be added), or another\n     * object that was previously the smallest value in the\n     * heap and now has been replaced by a larger one, or null\n     * if the queue wasn't yet full with maxSize elements.\n     */\n    public T insertWithOverflow(T element) {\n      if (size < maxSize) {\n        add(element);\n        return null;\n      } else if (size > 0 && !lessThan(element, heap[1])) {\n        T ret = heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80","date":1532111887,"type":4,"author":"Varun Thacker","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/ExportWriter.PriorityQueue#insertWithOverflow(T).mjava","sourceNew":null,"sourceOld":"    /**\n     * Adds an Object to a PriorityQueue in log(size) time.\n     * It returns the object (if any) that was\n     * dropped off the heap because it was full. This can be\n     * the given parameter (in case it is smaller than the\n     * full heap's minimum, and couldn't be added), or another\n     * object that was previously the smallest value in the\n     * heap and now has been replaced by a larger one, or null\n     * if the queue wasn't yet full with maxSize elements.\n     */\n    public T insertWithOverflow(T element) {\n      if (size < maxSize) {\n        add(element);\n        return null;\n      } else if (size > 0 && !lessThan(element, heap[1])) {\n        T ret = heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cbb7f1f4cf1e9a820364c090bb7e9a590f351339":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["cbb7f1f4cf1e9a820364c090bb7e9a590f351339"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cbb7f1f4cf1e9a820364c090bb7e9a590f351339"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"]},"commit2Childs":{"cbb7f1f4cf1e9a820364c090bb7e9a590f351339":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cbb7f1f4cf1e9a820364c090bb7e9a590f351339","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}