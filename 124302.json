{"path":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testClose().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testClose().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testClose().mjava","sourceNew":"  public void testClose() throws IOException {\n    IndexReader r = IndexReader.open(userindex);\n    spellChecker.clearIndex();\n    String field = \"field1\";\n    addwords(r, spellChecker, \"field1\");\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    checkCommonSuggestions(r);\n    assertLastSearcherOpen(4);\n    spellChecker.close();\n    assertSearchersClosed();\n    try {\n      spellChecker.close();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    try {\n      checkCommonSuggestions(r);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.clearIndex();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.indexDictionary(new LuceneDictionary(r, field), newIndexWriterConfig(TEST_VERSION_CURRENT, null), false);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.setSpellIndex(spellindex);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    assertEquals(4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  public void testClose() throws IOException {\n    IndexReader r = IndexReader.open(userindex);\n    spellChecker.clearIndex();\n    String field = \"field1\";\n    addwords(r, spellChecker, \"field1\");\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    checkCommonSuggestions(r);\n    assertLastSearcherOpen(4);\n    spellChecker.close();\n    assertSearchersClosed();\n    try {\n      spellChecker.close();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    try {\n      checkCommonSuggestions(r);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.clearIndex();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.indexDictionary(new LuceneDictionary(r, field), newIndexWriterConfig(TEST_VERSION_CURRENT, null), false);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.setSpellIndex(spellindex);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    assertEquals(4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testClose().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testClose().mjava","sourceNew":"  public void testClose() throws IOException {\n    IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    String field = \"field1\";\n    addwords(r, spellChecker, \"field1\");\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    checkCommonSuggestions(r);\n    assertLastSearcherOpen(4);\n    spellChecker.close();\n    assertSearchersClosed();\n    try {\n      spellChecker.close();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    try {\n      checkCommonSuggestions(r);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.clearIndex();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.indexDictionary(new LuceneDictionary(r, field), newIndexWriterConfig(TEST_VERSION_CURRENT, null), false);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.setSpellIndex(spellindex);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    assertEquals(4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  public void testClose() throws IOException {\n    IndexReader r = IndexReader.open(userindex);\n    spellChecker.clearIndex();\n    String field = \"field1\";\n    addwords(r, spellChecker, \"field1\");\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    checkCommonSuggestions(r);\n    assertLastSearcherOpen(4);\n    spellChecker.close();\n    assertSearchersClosed();\n    try {\n      spellChecker.close();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    try {\n      checkCommonSuggestions(r);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.clearIndex();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.indexDictionary(new LuceneDictionary(r, field), newIndexWriterConfig(TEST_VERSION_CURRENT, null), false);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.setSpellIndex(spellindex);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    assertEquals(4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testClose().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testClose().mjava","sourceNew":"  public void testClose() throws IOException {\n    IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    String field = \"field1\";\n    addwords(r, spellChecker, \"field1\");\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    checkCommonSuggestions(r);\n    assertLastSearcherOpen(4);\n    spellChecker.close();\n    assertSearchersClosed();\n    try {\n      spellChecker.close();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    try {\n      checkCommonSuggestions(r);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.clearIndex();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.indexDictionary(new LuceneDictionary(r, field), newIndexWriterConfig(TEST_VERSION_CURRENT, null), false);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.setSpellIndex(spellindex);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    assertEquals(4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  public void testClose() throws IOException {\n    IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    String field = \"field1\";\n    addwords(r, spellChecker, \"field1\");\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    checkCommonSuggestions(r);\n    assertLastSearcherOpen(4);\n    spellChecker.close();\n    assertSearchersClosed();\n    try {\n      spellChecker.close();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    try {\n      checkCommonSuggestions(r);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.clearIndex();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.indexDictionary(new LuceneDictionary(r, field), newIndexWriterConfig(TEST_VERSION_CURRENT, null), false);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.setSpellIndex(spellindex);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    assertEquals(4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testClose().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testClose().mjava","sourceNew":"  public void testClose() throws IOException {\n    IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    String field = \"field1\";\n    addwords(r, spellChecker, \"field1\");\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    checkCommonSuggestions(r);\n    assertLastSearcherOpen(4);\n    spellChecker.close();\n    assertSearchersClosed();\n    try {\n      spellChecker.close();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    try {\n      checkCommonSuggestions(r);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.clearIndex();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.indexDictionary(new LuceneDictionary(r, field), newIndexWriterConfig(TEST_VERSION_CURRENT, null), false);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.setSpellIndex(spellindex);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    assertEquals(4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  public void testClose() throws IOException {\n    IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    String field = \"field1\";\n    addwords(r, spellChecker, \"field1\");\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    checkCommonSuggestions(r);\n    assertLastSearcherOpen(4);\n    spellChecker.close();\n    assertSearchersClosed();\n    try {\n      spellChecker.close();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    try {\n      checkCommonSuggestions(r);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.clearIndex();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.indexDictionary(new LuceneDictionary(r, field), newIndexWriterConfig(TEST_VERSION_CURRENT, null), false);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.setSpellIndex(spellindex);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    assertEquals(4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testClose().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testClose().mjava","sourceNew":"  public void testClose() throws IOException {\n    IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    String field = \"field1\";\n    addwords(r, spellChecker, \"field1\");\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    checkCommonSuggestions(r);\n    assertLastSearcherOpen(4);\n    spellChecker.close();\n    assertSearchersClosed();\n    try {\n      spellChecker.close();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    try {\n      checkCommonSuggestions(r);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.clearIndex();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.indexDictionary(new LuceneDictionary(r, field), newIndexWriterConfig(null), false);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.setSpellIndex(spellindex);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    assertEquals(4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  public void testClose() throws IOException {\n    IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    String field = \"field1\";\n    addwords(r, spellChecker, \"field1\");\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    checkCommonSuggestions(r);\n    assertLastSearcherOpen(4);\n    spellChecker.close();\n    assertSearchersClosed();\n    try {\n      spellChecker.close();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    try {\n      checkCommonSuggestions(r);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.clearIndex();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.indexDictionary(new LuceneDictionary(r, field), newIndexWriterConfig(TEST_VERSION_CURRENT, null), false);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.setSpellIndex(spellindex);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    assertEquals(4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testClose().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testClose().mjava","sourceNew":"  public void testClose() throws IOException {\n    IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    String field = \"field1\";\n    addwords(r, spellChecker, \"field1\");\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    checkCommonSuggestions(r);\n    assertLastSearcherOpen(4);\n    spellChecker.close();\n    assertSearchersClosed();\n\n    expectThrows(AlreadyClosedException.class, () -> {\n      spellChecker.close();\n    });\n\n    expectThrows(AlreadyClosedException.class, () -> {\n      checkCommonSuggestions(r);\n    });\n    \n    expectThrows(AlreadyClosedException.class, () -> {\n      spellChecker.clearIndex();\n    });\n    \n    expectThrows(AlreadyClosedException.class, () -> {\n      spellChecker.indexDictionary(new LuceneDictionary(r, field), newIndexWriterConfig(null), false);\n    });\n    \n    expectThrows(AlreadyClosedException.class, () -> {\n      spellChecker.setSpellIndex(spellindex);\n    });\n\n    assertEquals(4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  public void testClose() throws IOException {\n    IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    String field = \"field1\";\n    addwords(r, spellChecker, \"field1\");\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    checkCommonSuggestions(r);\n    assertLastSearcherOpen(4);\n    spellChecker.close();\n    assertSearchersClosed();\n    try {\n      spellChecker.close();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    try {\n      checkCommonSuggestions(r);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.clearIndex();\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.indexDictionary(new LuceneDictionary(r, field), newIndexWriterConfig(null), false);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    \n    try {\n      spellChecker.setSpellIndex(spellindex);\n      fail(\"spellchecker was already closed\");\n    } catch (AlreadyClosedException e) {\n      // expected\n    }\n    assertEquals(4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["05fe562aa248790944d43cdd478f512572835ba0"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}