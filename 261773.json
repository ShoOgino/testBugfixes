{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ZkNodeProps).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ZkNodeProps).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84e912c2c4e5b07395e8ee482c7551e076d60cc4","date":1507037249,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"84e912c2c4e5b07395e8ee482c7551e076d60cc4":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["84e912c2c4e5b07395e8ee482c7551e076d60cc4"],"84e912c2c4e5b07395e8ee482c7551e076d60cc4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["84e912c2c4e5b07395e8ee482c7551e076d60cc4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}