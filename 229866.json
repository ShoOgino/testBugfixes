{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes())) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8028ab7a24273833d53d35eb160dba5b57283cf5","date":1416767720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) { \n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes())) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) { \n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) { \n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) { \n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.FLAG_PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) { \n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, DocsAndPositionsEnum.FLAG_PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) { \n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) { \n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.FLAG_PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5311f0bff57ce15a23909f4cfb953773630534","date":1424827033,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) { \n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // nocommit: check\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) { \n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) {\n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n\n    if (state == null) { // term is not present in that reader\n      return null;\n    }\n\n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n\n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) { \n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"611f44c3f4f09e009cc5fcf28aad2343e541d849","date":1427824904,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        if (terms.hasPositions() == false) {\n          throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n        }\n\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) { \n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);\n    return new TermSpans(postings, term);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) { \n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // nocommit: check\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        if (terms.hasPositions() == false) {\n          throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n        }\n\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) {\n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n\n    if (state == null) { // term is not present in that reader\n      return null;\n    }\n\n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n\n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);\n    return new TermSpans(postings, term);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        if (terms.hasPositions() == false) {\n          throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n        }\n\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) { \n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);\n    return new TermSpans(postings, term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        if (terms.hasPositions() == false) {\n          throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n        }\n\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) {\n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n\n    if (state == null) { // term is not present in that reader\n      return null;\n    }\n\n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n\n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);\n    return new TermSpans(postings, term);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) {\n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n\n    if (state == null) { // term is not present in that reader\n      return null;\n    }\n\n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n\n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        if (terms.hasPositions() == false) {\n          throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n        }\n\n        final TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n\n    if (state == null) { // term is not present in that reader\n      return null;\n    }\n\n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();\n    termsEnum.seekExact(term.bytes(), state);\n\n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);\n    return new TermSpans(postings, term);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        if (terms.hasPositions() == false) {\n          throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n        }\n\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) {\n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n\n    if (state == null) { // term is not present in that reader\n      return null;\n    }\n\n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n\n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);\n    return new TermSpans(postings, term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext],SpanCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts, SpanCollector collector) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        if (terms.hasPositions() == false) {\n          throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n        }\n\n        final TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n\n    if (state == null) { // term is not present in that reader\n      return null;\n    }\n\n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();\n    termsEnum.seekExact(term.bytes(), state);\n\n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, collector.requiredPostings());\n    return new TermSpans(postings, term);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        if (terms.hasPositions() == false) {\n          throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n        }\n\n        final TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n\n    if (state == null) { // term is not present in that reader\n      return null;\n    }\n\n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();\n    termsEnum.seekExact(term.bytes(), state);\n\n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);\n    return new TermSpans(postings, term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"611f44c3f4f09e009cc5fcf28aad2343e541d849":["cb5311f0bff57ce15a23909f4cfb953773630534"],"51f5280f31484820499077f41fcdfe92d527d9dc":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb5311f0bff57ce15a23909f4cfb953773630534":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"8028ab7a24273833d53d35eb160dba5b57283cf5":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"fab172655716b96f7e42376116235017a922de3a":["611f44c3f4f09e009cc5fcf28aad2343e541d849","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d530e71ed32ab23b34ca3fc72b080a554a40404"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"611f44c3f4f09e009cc5fcf28aad2343e541d849":["fab172655716b96f7e42376116235017a922de3a"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"cb5311f0bff57ce15a23909f4cfb953773630534":["611f44c3f4f09e009cc5fcf28aad2343e541d849"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["51f5280f31484820499077f41fcdfe92d527d9dc"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["cb5311f0bff57ce15a23909f4cfb953773630534","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"8028ab7a24273833d53d35eb160dba5b57283cf5":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["6b4e3cd382d0d075a0f1725649c084bb6510c483","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}