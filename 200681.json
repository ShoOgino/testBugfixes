{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#parseComp(String,String).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#parseComp(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/CloudSolrStream#parseComp(String,Map).mjava","sourceNew":"  private Comparator<Tuple> parseComp(String sort, String fl) throws IOException {\n\n    String[] fls = fl.split(\",\");\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    Comparator[] comps = new Comparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n      \n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n      \n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n      \n      // if there's an alias for the field then use the alias\n      if(null != fieldMappings && fieldMappings.containsKey(fieldName)){\n        fieldName = fieldMappings.get(fieldName);\n      }\n      \n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    if(comps.length > 1) {\n      return new MultiComp(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","sourceOld":"  private Comparator<Tuple> parseComp(String sort, Map params) throws IOException {\n\n    String fl = (String)params.get(\"fl\");\n    String[] fls = fl.split(\",\");\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    Comparator[] comps = new Comparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n\n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n\n      if(spec[1].trim().equalsIgnoreCase(\"asc\")) {\n        comps[i] = new AscFieldComp(spec[0]);\n      } else {\n        comps[i] = new DescFieldComp(spec[0]);\n      }\n    }\n\n    if(comps.length > 1) {\n      return new MultiComp(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#parseComp(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#parseComp(String,String).mjava","sourceNew":"  private Comparator<Tuple> parseComp(String sort, String fl) throws IOException {\n\n    String[] fls = fl.split(\",\");\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    Comparator[] comps = new Comparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n      \n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n      \n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n      \n      // if there's an alias for the field then use the alias\n      if(null != fieldMappings && fieldMappings.containsKey(fieldName)){\n        fieldName = fieldMappings.get(fieldName);\n      }\n      \n      comps[i] = new StreamComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    if(comps.length > 1) {\n      return new MultiComp(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","sourceOld":"  private Comparator<Tuple> parseComp(String sort, String fl) throws IOException {\n\n    String[] fls = fl.split(\",\");\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    Comparator[] comps = new Comparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n      \n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n      \n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n      \n      // if there's an alias for the field then use the alias\n      if(null != fieldMappings && fieldMappings.containsKey(fieldName)){\n        fieldName = fieldMappings.get(fieldName);\n      }\n      \n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    if(comps.length > 1) {\n      return new MultiComp(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#parseComp(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#parseComp(String,String).mjava","sourceNew":"  private StreamComparator parseComp(String sort, String fl) throws IOException {\n\n    String[] fls = fl.split(\",\");\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    StreamComparator[] comps = new StreamComparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n      \n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n      \n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n      \n      // if there's an alias for the field then use the alias\n      if(null != fieldMappings && fieldMappings.containsKey(fieldName)){\n        fieldName = fieldMappings.get(fieldName);\n      }\n      \n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    if(comps.length > 1) {\n      return new MultipleFieldComparator(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","sourceOld":"  private Comparator<Tuple> parseComp(String sort, String fl) throws IOException {\n\n    String[] fls = fl.split(\",\");\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    Comparator[] comps = new Comparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n      \n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n      \n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n      \n      // if there's an alias for the field then use the alias\n      if(null != fieldMappings && fieldMappings.containsKey(fieldName)){\n        fieldName = fieldMappings.get(fieldName);\n      }\n      \n      comps[i] = new StreamComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    if(comps.length > 1) {\n      return new MultiComp(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1995299b5e59567746bc05dcf3ebdb2539f8407e","date":1483145731,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#parseComp(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#parseComp(String,String).mjava","sourceNew":"  private StreamComparator parseComp(String sort, String fl) throws IOException {\n\n    String[] fls = fl.split(\",\");\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    StreamComparator[] comps = new StreamComparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n      \n      if (spec.length != 2) {\n        throw new IOException(\"Invalid sort spec:\" + s);\n      }\n\n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n      \n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n      \n      // if there's an alias for the field then use the alias\n      if(null != fieldMappings && fieldMappings.containsKey(fieldName)){\n        fieldName = fieldMappings.get(fieldName);\n      }\n      \n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    if(comps.length > 1) {\n      return new MultipleFieldComparator(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","sourceOld":"  private StreamComparator parseComp(String sort, String fl) throws IOException {\n\n    String[] fls = fl.split(\",\");\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    StreamComparator[] comps = new StreamComparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n      \n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n      \n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n      \n      // if there's an alias for the field then use the alias\n      if(null != fieldMappings && fieldMappings.containsKey(fieldName)){\n        fieldName = fieldMappings.get(fieldName);\n      }\n      \n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    if(comps.length > 1) {\n      return new MultipleFieldComparator(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#parseComp(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#parseComp(String,String).mjava","sourceNew":"  private StreamComparator parseComp(String sort, String fl) throws IOException {\n\n    String[] fls = fl.split(\",\");\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    StreamComparator[] comps = new StreamComparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n      \n      if (spec.length != 2) {\n        throw new IOException(\"Invalid sort spec:\" + s);\n      }\n\n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n      \n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n      \n      // if there's an alias for the field then use the alias\n      if(null != fieldMappings && fieldMappings.containsKey(fieldName)){\n        fieldName = fieldMappings.get(fieldName);\n      }\n      \n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    if(comps.length > 1) {\n      return new MultipleFieldComparator(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","sourceOld":"  private StreamComparator parseComp(String sort, String fl) throws IOException {\n\n    String[] fls = fl.split(\",\");\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    StreamComparator[] comps = new StreamComparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n      \n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n      \n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n      \n      // if there's an alias for the field then use the alias\n      if(null != fieldMappings && fieldMappings.containsKey(fieldName)){\n        fieldName = fieldMappings.get(fieldName);\n      }\n      \n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    if(comps.length > 1) {\n      return new MultipleFieldComparator(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d9c44f68e848648da304352cf7c045c33148f4","date":1557331987,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#parseComp(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#parseComp(String,String).mjava","sourceNew":"  private StreamComparator parseComp(String sort, String fl) throws IOException {\n\n    String[] fls = fl.split(\",\");\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    StreamComparator[] comps = new StreamComparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n\n      if (spec.length != 2) {\n        throw new IOException(\"Invalid sort spec:\" + s);\n      }\n\n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n\n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n\n      // if there's an alias for the field then use the alias\n      if(null != fieldMappings && fieldMappings.containsKey(fieldName)){\n        fieldName = fieldMappings.get(fieldName);\n      }\n\n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    if(comps.length > 1) {\n      return new MultipleFieldComparator(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","sourceOld":"  private StreamComparator parseComp(String sort, String fl) throws IOException {\n\n    String[] fls = fl.split(\",\");\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    StreamComparator[] comps = new StreamComparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n      \n      if (spec.length != 2) {\n        throw new IOException(\"Invalid sort spec:\" + s);\n      }\n\n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n      \n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n      \n      // if there's an alias for the field then use the alias\n      if(null != fieldMappings && fieldMappings.containsKey(fieldName)){\n        fieldName = fieldMappings.get(fieldName);\n      }\n      \n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    if(comps.length > 1) {\n      return new MultipleFieldComparator(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#parseComp(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#parseComp(String,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private StreamComparator parseComp(String sort, String fl) throws IOException {\n\n    String[] fls = fl.split(\",\");\n    @SuppressWarnings({\"rawtypes\"})\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    StreamComparator[] comps = new StreamComparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n\n      if (spec.length != 2) {\n        throw new IOException(\"Invalid sort spec:\" + s);\n      }\n\n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n\n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n\n      // if there's an alias for the field then use the alias\n      if(null != fieldMappings && fieldMappings.containsKey(fieldName)){\n        fieldName = fieldMappings.get(fieldName);\n      }\n\n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    if(comps.length > 1) {\n      return new MultipleFieldComparator(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","sourceOld":"  private StreamComparator parseComp(String sort, String fl) throws IOException {\n\n    String[] fls = fl.split(\",\");\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    StreamComparator[] comps = new StreamComparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n\n      if (spec.length != 2) {\n        throw new IOException(\"Invalid sort spec:\" + s);\n      }\n\n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n\n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n\n      // if there's an alias for the field then use the alias\n      if(null != fieldMappings && fieldMappings.containsKey(fieldName)){\n        fieldName = fieldMappings.get(fieldName);\n      }\n\n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    if(comps.length > 1) {\n      return new MultipleFieldComparator(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["e431b0806b8db369da896b66a74e304a49953c7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["70d9c44f68e848648da304352cf7c045c33148f4"],"1995299b5e59567746bc05dcf3ebdb2539f8407e":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"e431b0806b8db369da896b66a74e304a49953c7b":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"70d9c44f68e848648da304352cf7c045c33148f4":["1995299b5e59567746bc05dcf3ebdb2539f8407e"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["0891a6931fc352fc7e61f2752ef9add758d3fb89","1995299b5e59567746bc05dcf3ebdb2539f8407e"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["e431b0806b8db369da896b66a74e304a49953c7b"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["1995299b5e59567746bc05dcf3ebdb2539f8407e","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1995299b5e59567746bc05dcf3ebdb2539f8407e":["70d9c44f68e848648da304352cf7c045c33148f4","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"e431b0806b8db369da896b66a74e304a49953c7b":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"70d9c44f68e848648da304352cf7c045c33148f4":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}