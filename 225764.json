{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateZkStates(ClusterState).mjava","commits":[{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateZkStates(ClusterState).mjava","pathOld":"/dev/null","sourceNew":"    private void updateZkStates(ClusterState clusterState) throws KeeperException, InterruptedException {\n      if(!updateNodes.isEmpty()) {\n        for (Entry<String, Object> e : updateNodes.entrySet()) {\n          if (e.getValue() == null) {\n            if (zkClient.exists(e.getKey(), true)) zkClient.delete(e.getKey(), 0, true);\n          } else {\n            if (zkClient.exists(e.getKey(), true)) {\n              log.info(\"going to update_collection\", e.getKey());\n              zkClient.setData(e.getKey(), ZkStateReader.toJSON(e.getValue()), true);\n            } else {\n              log.info(\"going to create_collection {}\", e.getValue());\n              zkClient.create(e.getKey(), ZkStateReader.toJSON(e.getValue()), CreateMode.PERSISTENT, true);\n            }\n          }\n        }\n        updateNodes.clear();\n      }\n\n      if(isClusterStateModified) {\n        lastUpdatedTime = System.nanoTime();\n        zkClient.setData(ZkStateReader.CLUSTER_STATE, ZkStateReader.toJSON(clusterState), true);\n        isClusterStateModified = false;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateZkStates(ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateZkStates(ClusterState).mjava","sourceNew":"    private void updateZkStates(ClusterState clusterState) throws KeeperException, InterruptedException {\n      lastUpdatedTime = System.nanoTime();\n      zkClient.setData(ZkStateReader.CLUSTER_STATE, ZkStateReader.toJSON(clusterState), true);\n\n    }\n\n","sourceOld":"    private void updateZkStates(ClusterState clusterState) throws KeeperException, InterruptedException {\n      if(!updateNodes.isEmpty()) {\n        for (Entry<String, Object> e : updateNodes.entrySet()) {\n          if (e.getValue() == null) {\n            if (zkClient.exists(e.getKey(), true)) zkClient.delete(e.getKey(), 0, true);\n          } else {\n            if (zkClient.exists(e.getKey(), true)) {\n              log.info(\"going to update_collection\", e.getKey());\n              zkClient.setData(e.getKey(), ZkStateReader.toJSON(e.getValue()), true);\n            } else {\n              log.info(\"going to create_collection {}\", e.getValue());\n              zkClient.create(e.getKey(), ZkStateReader.toJSON(e.getValue()), CreateMode.PERSISTENT, true);\n            }\n          }\n        }\n        updateNodes.clear();\n      }\n\n      if(isClusterStateModified) {\n        lastUpdatedTime = System.nanoTime();\n        zkClient.setData(ZkStateReader.CLUSTER_STATE, ZkStateReader.toJSON(clusterState), true);\n        isClusterStateModified = false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"337db0c9a917807fab1c4c08462fecb15b3cc409","date":1403794484,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateZkStates(ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateZkStates(ClusterState).mjava","sourceNew":"    private void updateZkStates(ClusterState clusterState) throws KeeperException, InterruptedException {\n      TimerContext timerContext = stats.time(\"update_state\");\n      boolean success = false;\n      try {\n        zkClient.setData(ZkStateReader.CLUSTER_STATE, ZkStateReader.toJSON(clusterState), true);\n        lastUpdatedTime = System.nanoTime();\n        success = true;\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"update_state\");\n        } else  {\n          stats.error(\"update_state\");\n        }\n      }\n    }\n\n","sourceOld":"    private void updateZkStates(ClusterState clusterState) throws KeeperException, InterruptedException {\n      lastUpdatedTime = System.nanoTime();\n      zkClient.setData(ZkStateReader.CLUSTER_STATE, ZkStateReader.toJSON(clusterState), true);\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateZkStates(ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateZkStates(ClusterState).mjava","sourceNew":"    private void updateZkStates(ClusterState clusterState) throws KeeperException, InterruptedException {\n      TimerContext timerContext = stats.time(\"update_state\");\n      boolean success = false;\n      try {\n        if(!updateNodes.isEmpty()) {\n          for (Entry<String, Object> e : updateNodes.entrySet()) {\n            if (e.getValue() == null) {\n              if (zkClient.exists(e.getKey(), true)) zkClient.delete(e.getKey(), 0, true);\n            } else {\n              if (zkClient.exists(e.getKey(), true)) {\n                log.info(\"going to update_collection {}\", e.getKey());\n                zkClient.setData(e.getKey(), ZkStateReader.toJSON(e.getValue()), true);\n              } else {\n                log.info(\"going to create_collection {}\", e.getValue());\n                zkClient.create(e.getKey(), ZkStateReader.toJSON(e.getValue()), CreateMode.PERSISTENT, true);\n              }\n            }\n          }\n          updateNodes.clear();\n        }\n\n        if(isClusterStateModified) {\n          lastUpdatedTime = System.nanoTime();\n          zkClient.setData(ZkStateReader.CLUSTER_STATE, ZkStateReader.toJSON(clusterState), true);\n          isClusterStateModified = false;\n        }\n        success = true;\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"update_state\");\n        } else  {\n          stats.error(\"update_state\");\n        }\n      }\n    }\n\n","sourceOld":"    private void updateZkStates(ClusterState clusterState) throws KeeperException, InterruptedException {\n      TimerContext timerContext = stats.time(\"update_state\");\n      boolean success = false;\n      try {\n        zkClient.setData(ZkStateReader.CLUSTER_STATE, ZkStateReader.toJSON(clusterState), true);\n        lastUpdatedTime = System.nanoTime();\n        success = true;\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"update_state\");\n        } else  {\n          stats.error(\"update_state\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateZkStates(ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateZkStates(ClusterState).mjava","sourceNew":"    private void updateZkStates(ClusterState clusterState) throws KeeperException, InterruptedException {\n      TimerContext timerContext = stats.time(\"update_state\");\n      boolean success = false;\n      try {\n        zkClient.setData(ZkStateReader.CLUSTER_STATE, ZkStateReader.toJSON(clusterState), true);\n        lastUpdatedTime = System.nanoTime();\n        success = true;\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"update_state\");\n        } else  {\n          stats.error(\"update_state\");\n        }\n      }\n    }\n\n","sourceOld":"    private void updateZkStates(ClusterState clusterState) throws KeeperException, InterruptedException {\n      TimerContext timerContext = stats.time(\"update_state\");\n      boolean success = false;\n      try {\n        if(!updateNodes.isEmpty()) {\n          for (Entry<String, Object> e : updateNodes.entrySet()) {\n            if (e.getValue() == null) {\n              if (zkClient.exists(e.getKey(), true)) zkClient.delete(e.getKey(), 0, true);\n            } else {\n              if (zkClient.exists(e.getKey(), true)) {\n                log.info(\"going to update_collection {}\", e.getKey());\n                zkClient.setData(e.getKey(), ZkStateReader.toJSON(e.getValue()), true);\n              } else {\n                log.info(\"going to create_collection {}\", e.getValue());\n                zkClient.create(e.getKey(), ZkStateReader.toJSON(e.getValue()), CreateMode.PERSISTENT, true);\n              }\n            }\n          }\n          updateNodes.clear();\n        }\n\n        if(isClusterStateModified) {\n          lastUpdatedTime = System.nanoTime();\n          zkClient.setData(ZkStateReader.CLUSTER_STATE, ZkStateReader.toJSON(clusterState), true);\n          isClusterStateModified = false;\n        }\n        success = true;\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"update_state\");\n        } else  {\n          stats.error(\"update_state\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateZkStates(ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateZkStates(ClusterState).mjava","sourceNew":"    private void updateZkStates(ClusterState clusterState) throws KeeperException, InterruptedException {\n      TimerContext timerContext = stats.time(\"update_state\");\n      boolean success = false;\n      try {\n        if (!updateNodes.isEmpty()) {\n          for (Entry<String,Object> e : updateNodes.entrySet()) {\n            if (e.getValue() == null) {\n              if (zkClient.exists(e.getKey(), true)) zkClient.delete(e.getKey(), 0, true);\n            } else {\n              byte[] data = ZkStateReader.toJSON(e.getValue());\n              if (zkClient.exists(e.getKey(), true)) {\n                log.info(\"going to update_collection {}\", e.getKey());\n                zkClient.setData(e.getKey(), data, true);\n              } else {\n                log.info(\"going to create_collection {}\", e.getKey(), new String(data));\n                zkClient.create(e.getKey(), data, CreateMode.PERSISTENT, true);\n              }\n            }\n          }\n          updateNodes.clear();\n        }\n        \n        if (isClusterStateModified) {\n          lastUpdatedTime = System.nanoTime();\n          zkClient.setData(ZkStateReader.CLUSTER_STATE,\n              ZkStateReader.toJSON(clusterState), true);\n          isClusterStateModified = false;\n        }\n        success = true;\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"update_state\");\n        } else  {\n          stats.error(\"update_state\");\n        }\n      }\n    }\n\n","sourceOld":"    private void updateZkStates(ClusterState clusterState) throws KeeperException, InterruptedException {\n      TimerContext timerContext = stats.time(\"update_state\");\n      boolean success = false;\n      try {\n        zkClient.setData(ZkStateReader.CLUSTER_STATE, ZkStateReader.toJSON(clusterState), true);\n        lastUpdatedTime = System.nanoTime();\n        success = true;\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"update_state\");\n        } else  {\n          stats.error(\"update_state\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67cc7881947f692518074d66115a71961eece56c","date":1410630059,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateZkStates(ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateZkStates(ClusterState).mjava","sourceNew":"    private void updateZkStates(ClusterState clusterState) throws KeeperException, InterruptedException {\n      TimerContext timerContext = stats.time(\"update_state\");\n      boolean success = false;\n      try {\n        if (!updateNodes.isEmpty()) {\n          for (Entry<String,Object> e : updateNodes.entrySet()) {\n            if (e.getValue() == null) {\n              if (zkClient.exists(e.getKey(), true)) zkClient.delete(e.getKey(), 0, true);\n            } else {\n              byte[] data = ZkStateReader.toJSON(e.getValue());\n              if (zkClient.exists(e.getKey(), true)) {\n                log.info(\"going to update_collection {}\", e.getKey());\n                zkClient.setData(e.getKey(), data, true);\n              } else {\n                log.info(\"going to create_collection {}\", e.getKey());\n                zkClient.create(e.getKey(), data, CreateMode.PERSISTENT, true);\n              }\n            }\n          }\n          updateNodes.clear();\n        }\n        \n        if (isClusterStateModified) {\n          lastUpdatedTime = System.nanoTime();\n          zkClient.setData(ZkStateReader.CLUSTER_STATE,\n              ZkStateReader.toJSON(clusterState), true);\n          isClusterStateModified = false;\n        }\n        success = true;\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"update_state\");\n        } else  {\n          stats.error(\"update_state\");\n        }\n      }\n    }\n\n","sourceOld":"    private void updateZkStates(ClusterState clusterState) throws KeeperException, InterruptedException {\n      TimerContext timerContext = stats.time(\"update_state\");\n      boolean success = false;\n      try {\n        if (!updateNodes.isEmpty()) {\n          for (Entry<String,Object> e : updateNodes.entrySet()) {\n            if (e.getValue() == null) {\n              if (zkClient.exists(e.getKey(), true)) zkClient.delete(e.getKey(), 0, true);\n            } else {\n              byte[] data = ZkStateReader.toJSON(e.getValue());\n              if (zkClient.exists(e.getKey(), true)) {\n                log.info(\"going to update_collection {}\", e.getKey());\n                zkClient.setData(e.getKey(), data, true);\n              } else {\n                log.info(\"going to create_collection {}\", e.getKey(), new String(data));\n                zkClient.create(e.getKey(), data, CreateMode.PERSISTENT, true);\n              }\n            }\n          }\n          updateNodes.clear();\n        }\n        \n        if (isClusterStateModified) {\n          lastUpdatedTime = System.nanoTime();\n          zkClient.setData(ZkStateReader.CLUSTER_STATE,\n              ZkStateReader.toJSON(clusterState), true);\n          isClusterStateModified = false;\n        }\n        success = true;\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"update_state\");\n        } else  {\n          stats.error(\"update_state\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0ab77ad54bfff3dadb9f0d6a2c988a2ad18e497","date":1415035804,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateZkStates(ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateZkStates(ClusterState).mjava","sourceNew":"    private void updateZkStates(ClusterState clusterState) throws KeeperException, InterruptedException {\n      TimerContext timerContext = stats.time(\"update_state\");\n      boolean success = false;\n      try {\n        if (!updateNodes.isEmpty()) {\n          for (Entry<String,Object> e : updateNodes.entrySet()) {\n            if (e.getValue() == null) {\n              if (zkClient.exists(e.getKey(), true)) zkClient.delete(e.getKey(), 0, true);\n            } else {\n              byte[] data = ZkStateReader.toJSON(e.getValue());\n              if (zkClient.exists(e.getKey(), true)) {\n                log.info(\"going to update_collection {}\", e.getKey());\n                zkClient.setData(e.getKey(), data, true);\n              } else {\n                log.info(\"going to create_collection {}\", e.getKey());\n                String parentPath = e.getKey().substring(0, e.getKey().lastIndexOf('/'));\n                if (!zkClient.exists(parentPath, true)) {\n                  // if the /collections/collection_name path doesn't exist then it means that\n                  // 1) the user invoked a DELETE collection API and the OverseerCollectionProcessor has deleted\n                  // this zk path.\n                  // 2) these are most likely old \"state\" messages which are only being processed now because\n                  // if they were new \"state\" messages then in legacy mode, a new collection would have been\n                  // created with stateFormat = 1 (which is the default state format)\n                  // 3) these can't be new \"state\" messages created for a new collection because\n                  // otherwise the OverseerCollectionProcessor would have already created this path\n                  // as part of the create collection API call -- which is the only way in which a collection\n                  // with stateFormat > 1 can possibly be created\n                  continue;\n                }\n                zkClient.create(e.getKey(), data, CreateMode.PERSISTENT, true);\n              }\n            }\n          }\n          updateNodes.clear();\n        }\n        \n        if (isClusterStateModified) {\n          lastUpdatedTime = System.nanoTime();\n          zkClient.setData(ZkStateReader.CLUSTER_STATE,\n              ZkStateReader.toJSON(clusterState), true);\n          isClusterStateModified = false;\n        }\n        success = true;\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"update_state\");\n        } else  {\n          stats.error(\"update_state\");\n        }\n      }\n    }\n\n","sourceOld":"    private void updateZkStates(ClusterState clusterState) throws KeeperException, InterruptedException {\n      TimerContext timerContext = stats.time(\"update_state\");\n      boolean success = false;\n      try {\n        if (!updateNodes.isEmpty()) {\n          for (Entry<String,Object> e : updateNodes.entrySet()) {\n            if (e.getValue() == null) {\n              if (zkClient.exists(e.getKey(), true)) zkClient.delete(e.getKey(), 0, true);\n            } else {\n              byte[] data = ZkStateReader.toJSON(e.getValue());\n              if (zkClient.exists(e.getKey(), true)) {\n                log.info(\"going to update_collection {}\", e.getKey());\n                zkClient.setData(e.getKey(), data, true);\n              } else {\n                log.info(\"going to create_collection {}\", e.getKey());\n                zkClient.create(e.getKey(), data, CreateMode.PERSISTENT, true);\n              }\n            }\n          }\n          updateNodes.clear();\n        }\n        \n        if (isClusterStateModified) {\n          lastUpdatedTime = System.nanoTime();\n          zkClient.setData(ZkStateReader.CLUSTER_STATE,\n              ZkStateReader.toJSON(clusterState), true);\n          isClusterStateModified = false;\n        }\n        success = true;\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"update_state\");\n        } else  {\n          stats.error(\"update_state\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateZkStates(ClusterState).mjava","sourceNew":null,"sourceOld":"    private void updateZkStates(ClusterState clusterState) throws KeeperException, InterruptedException {\n      TimerContext timerContext = stats.time(\"update_state\");\n      boolean success = false;\n      try {\n        if (!updateNodes.isEmpty()) {\n          for (Entry<String,Object> e : updateNodes.entrySet()) {\n            if (e.getValue() == null) {\n              if (zkClient.exists(e.getKey(), true)) zkClient.delete(e.getKey(), 0, true);\n            } else {\n              byte[] data = ZkStateReader.toJSON(e.getValue());\n              if (zkClient.exists(e.getKey(), true)) {\n                log.info(\"going to update_collection {}\", e.getKey());\n                zkClient.setData(e.getKey(), data, true);\n              } else {\n                log.info(\"going to create_collection {}\", e.getKey());\n                String parentPath = e.getKey().substring(0, e.getKey().lastIndexOf('/'));\n                if (!zkClient.exists(parentPath, true)) {\n                  // if the /collections/collection_name path doesn't exist then it means that\n                  // 1) the user invoked a DELETE collection API and the OverseerCollectionProcessor has deleted\n                  // this zk path.\n                  // 2) these are most likely old \"state\" messages which are only being processed now because\n                  // if they were new \"state\" messages then in legacy mode, a new collection would have been\n                  // created with stateFormat = 1 (which is the default state format)\n                  // 3) these can't be new \"state\" messages created for a new collection because\n                  // otherwise the OverseerCollectionProcessor would have already created this path\n                  // as part of the create collection API call -- which is the only way in which a collection\n                  // with stateFormat > 1 can possibly be created\n                  continue;\n                }\n                zkClient.create(e.getKey(), data, CreateMode.PERSISTENT, true);\n              }\n            }\n          }\n          updateNodes.clear();\n        }\n        \n        if (isClusterStateModified) {\n          lastUpdatedTime = System.nanoTime();\n          zkClient.setData(ZkStateReader.CLUSTER_STATE,\n              ZkStateReader.toJSON(clusterState), true);\n          isClusterStateModified = false;\n        }\n        success = true;\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"update_state\");\n        } else  {\n          stats.error(\"update_state\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["e0ab77ad54bfff3dadb9f0d6a2c988a2ad18e497"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["337db0c9a917807fab1c4c08462fecb15b3cc409"],"337db0c9a917807fab1c4c08462fecb15b3cc409":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"e0ab77ad54bfff3dadb9f0d6a2c988a2ad18e497":["67cc7881947f692518074d66115a71961eece56c"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"67cc7881947f692518074d66115a71961eece56c":["9279b175e5e66258442d2123a50f052219a9cc1b"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"]},"commit2Childs":{"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"337db0c9a917807fab1c4c08462fecb15b3cc409":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["337db0c9a917807fab1c4c08462fecb15b3cc409"],"e0ab77ad54bfff3dadb9f0d6a2c988a2ad18e497":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"67cc7881947f692518074d66115a71961eece56c":["e0ab77ad54bfff3dadb9f0d6a2c988a2ad18e497"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9279b175e5e66258442d2123a50f052219a9cc1b":["67cc7881947f692518074d66115a71961eece56c"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}