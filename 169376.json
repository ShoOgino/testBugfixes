{"path":"solr/core/src/java/org/apache/solr/update/processor/RegexReplaceProcessorFactory#init(NamedList).mjava","commits":[{"id":"be9a5d1846ac0beb625ba68da060e16119d9f51e","date":1328820081,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RegexReplaceProcessorFactory#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    String patternParam = args.remove(PATTERN_PARAM).toString();\n\n    if(patternParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + PATTERN_PARAM);\n    }\n    try {\n      pattern = Pattern.compile(patternParam);      \n    } catch (PatternSyntaxException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Invalid regex: \" + patternParam, e);\n    }                                \n\n    String replacementParam = args.remove(REPLACEMENT_PARAM).toString();\n    if(replacementParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + REPLACEMENT_PARAM);\n    }\n    replacement = Matcher.quoteReplacement(replacementParam);\n\n    super.init(args);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86da499af66a6c02fd1788a24356ed4e2b69cb7c","date":1341528661,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RegexReplaceProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/RegexReplaceProcessorFactory#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    Object patternParam = args.remove(PATTERN_PARAM);\n\n    if(patternParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + PATTERN_PARAM);\n    }\n    \n    try {\n      pattern = Pattern.compile(patternParam.toString());      \n    } catch (PatternSyntaxException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Invalid regex: \" + patternParam, e);\n    }                                \n\n    Object replacementParam = args.remove(REPLACEMENT_PARAM);\n    if(replacementParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + REPLACEMENT_PARAM);\n    }\n    replacement = Matcher.quoteReplacement(replacementParam.toString());\n\n    super.init(args);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    String patternParam = args.remove(PATTERN_PARAM).toString();\n\n    if(patternParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + PATTERN_PARAM);\n    }\n    try {\n      pattern = Pattern.compile(patternParam);      \n    } catch (PatternSyntaxException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Invalid regex: \" + patternParam, e);\n    }                                \n\n    String replacementParam = args.remove(REPLACEMENT_PARAM).toString();\n    if(replacementParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + REPLACEMENT_PARAM);\n    }\n    replacement = Matcher.quoteReplacement(replacementParam);\n\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e7f30683f53928b2fce016e6430c9795caff22","date":1341839598,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RegexReplaceProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/RegexReplaceProcessorFactory#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    Object patternParam = args.remove(PATTERN_PARAM);\n\n    if(patternParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + PATTERN_PARAM);\n    }\n    \n    try {\n      pattern = Pattern.compile(patternParam.toString());      \n    } catch (PatternSyntaxException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Invalid regex: \" + patternParam, e);\n    }                                \n\n    Object replacementParam = args.remove(REPLACEMENT_PARAM);\n    if(replacementParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + REPLACEMENT_PARAM);\n    }\n    replacement = Matcher.quoteReplacement(replacementParam.toString());\n\n    super.init(args);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    String patternParam = args.remove(PATTERN_PARAM).toString();\n\n    if(patternParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + PATTERN_PARAM);\n    }\n    try {\n      pattern = Pattern.compile(patternParam);      \n    } catch (PatternSyntaxException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Invalid regex: \" + patternParam, e);\n    }                                \n\n    String replacementParam = args.remove(REPLACEMENT_PARAM).toString();\n    if(replacementParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + REPLACEMENT_PARAM);\n    }\n    replacement = Matcher.quoteReplacement(replacementParam);\n\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RegexReplaceProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/RegexReplaceProcessorFactory#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    Object patternParam = args.remove(PATTERN_PARAM);\n\n    if(patternParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + PATTERN_PARAM);\n    }\n    \n    try {\n      pattern = Pattern.compile(patternParam.toString());      \n    } catch (PatternSyntaxException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Invalid regex: \" + patternParam, e);\n    }                                \n\n    Object replacementParam = args.remove(REPLACEMENT_PARAM);\n    if(replacementParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + REPLACEMENT_PARAM);\n    }\n    replacement = Matcher.quoteReplacement(replacementParam.toString());\n\n    super.init(args);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    String patternParam = args.remove(PATTERN_PARAM).toString();\n\n    if(patternParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + PATTERN_PARAM);\n    }\n    try {\n      pattern = Pattern.compile(patternParam);      \n    } catch (PatternSyntaxException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Invalid regex: \" + patternParam, e);\n    }                                \n\n    String replacementParam = args.remove(REPLACEMENT_PARAM).toString();\n    if(replacementParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + REPLACEMENT_PARAM);\n    }\n    replacement = Matcher.quoteReplacement(replacementParam);\n\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e651aca23d53b6305f5d82cdda52a4697284d0","date":1397071861,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RegexReplaceProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/RegexReplaceProcessorFactory#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    Object patternParam = args.remove(PATTERN_PARAM);\n\n    if (patternParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + PATTERN_PARAM);\n    }\n    \n    try {\n      pattern = Pattern.compile(patternParam.toString());      \n    } catch (PatternSyntaxException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Invalid regex: \" + patternParam, e);\n    }                                \n\n    Object replacementParam = args.remove(REPLACEMENT_PARAM);\n    if (replacementParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + REPLACEMENT_PARAM);\n    }\n\n    Boolean literalReplacement = args.removeBooleanArg(LITERAL_REPLACEMENT_PARAM);\n\n    if (literalReplacement != null) {\n      literalReplacementEnabled = literalReplacement;\n    }\n\n    if (literalReplacementEnabled) {\n      replacement = Matcher.quoteReplacement(replacementParam.toString());\n    } else {\n      replacement = replacementParam.toString();\n    }\n\n    super.init(args);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    Object patternParam = args.remove(PATTERN_PARAM);\n\n    if(patternParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + PATTERN_PARAM);\n    }\n    \n    try {\n      pattern = Pattern.compile(patternParam.toString());      \n    } catch (PatternSyntaxException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Invalid regex: \" + patternParam, e);\n    }                                \n\n    Object replacementParam = args.remove(REPLACEMENT_PARAM);\n    if(replacementParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + REPLACEMENT_PARAM);\n    }\n    replacement = Matcher.quoteReplacement(replacementParam.toString());\n\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RegexReplaceProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/RegexReplaceProcessorFactory#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n\n    Object patternParam = args.remove(PATTERN_PARAM);\n\n    if (patternParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + PATTERN_PARAM);\n    }\n    \n    try {\n      pattern = Pattern.compile(patternParam.toString());      \n    } catch (PatternSyntaxException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Invalid regex: \" + patternParam, e);\n    }                                \n\n    Object replacementParam = args.remove(REPLACEMENT_PARAM);\n    if (replacementParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + REPLACEMENT_PARAM);\n    }\n\n    Boolean literalReplacement = args.removeBooleanArg(LITERAL_REPLACEMENT_PARAM);\n\n    if (literalReplacement != null) {\n      literalReplacementEnabled = literalReplacement;\n    }\n\n    if (literalReplacementEnabled) {\n      replacement = Matcher.quoteReplacement(replacementParam.toString());\n    } else {\n      replacement = replacementParam.toString();\n    }\n\n    super.init(args);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    Object patternParam = args.remove(PATTERN_PARAM);\n\n    if (patternParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + PATTERN_PARAM);\n    }\n    \n    try {\n      pattern = Pattern.compile(patternParam.toString());      \n    } catch (PatternSyntaxException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Invalid regex: \" + patternParam, e);\n    }                                \n\n    Object replacementParam = args.remove(REPLACEMENT_PARAM);\n    if (replacementParam == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \n                              \"Missing required init parameter: \" + REPLACEMENT_PARAM);\n    }\n\n    Boolean literalReplacement = args.removeBooleanArg(LITERAL_REPLACEMENT_PARAM);\n\n    if (literalReplacement != null) {\n      literalReplacementEnabled = literalReplacement;\n    }\n\n    if (literalReplacementEnabled) {\n      replacement = Matcher.quoteReplacement(replacementParam.toString());\n    } else {\n      replacement = replacementParam.toString();\n    }\n\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04e7f30683f53928b2fce016e6430c9795caff22":["be9a5d1846ac0beb625ba68da060e16119d9f51e","86da499af66a6c02fd1788a24356ed4e2b69cb7c"],"be9a5d1846ac0beb625ba68da060e16119d9f51e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["b8e651aca23d53b6305f5d82cdda52a4697284d0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["be9a5d1846ac0beb625ba68da060e16119d9f51e","86da499af66a6c02fd1788a24356ed4e2b69cb7c"],"86da499af66a6c02fd1788a24356ed4e2b69cb7c":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b8e651aca23d53b6305f5d82cdda52a4697284d0":["86da499af66a6c02fd1788a24356ed4e2b69cb7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"]},"commit2Childs":{"04e7f30683f53928b2fce016e6430c9795caff22":[],"be9a5d1846ac0beb625ba68da060e16119d9f51e":["04e7f30683f53928b2fce016e6430c9795caff22","fe33227f6805edab2036cbb80645cc4e2d1fa424","86da499af66a6c02fd1788a24356ed4e2b69cb7c"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"86da499af66a6c02fd1788a24356ed4e2b69cb7c":["04e7f30683f53928b2fce016e6430c9795caff22","fe33227f6805edab2036cbb80645cc4e2d1fa424","b8e651aca23d53b6305f5d82cdda52a4697284d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"b8e651aca23d53b6305f5d82cdda52a4697284d0":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["04e7f30683f53928b2fce016e6430c9795caff22","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}