{"path":"solr/core/src/test/org/apache/solr/cloud/RoutingToNodesWithPropertiesTest#test().mjava","commits":[{"id":"033183e9e2da4609614733f0226a38c88c49ed36","date":1557334549,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RoutingToNodesWithPropertiesTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    final int NUM_TRY = 10;\n    CollectionAdminRequest\n        .setClusterProperty(ZkStateReader.DEFAULT_SHARD_PREFERENCES, ShardParams.SHARDS_PREFERENCE_NODE_WITH_SAME_SYSPROP +\":\"+PROP_NAME)\n        .process(cluster.getSolrClient());\n    {\n      TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeOut.waitFor(\"Timeout waiting for sysprops are cached in all nodes\", () -> {\n        int total = 0;\n        for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n          total += runner.getCoreContainer().getZkController().getSysPropsCacher().getCacheSize();\n        }\n        return total == cluster.getJettySolrRunners().size() * cluster.getJettySolrRunners().size();\n      });\n    }\n\n    for (int i = 0; i <  NUM_TRY; i++) {\n      SolrQuery qRequest = new SolrQuery(\"*:*\");\n      ModifiableSolrParams qParams = new ModifiableSolrParams();\n      qParams.add(ShardParams.SHARDS_INFO, \"true\");\n      qRequest.add(qParams);\n      QueryResponse qResponse = cluster.getSolrClient().query(COLLECTION, qRequest);\n\n      Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n      assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n      SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n      String firstReplicaAddr = ((SimpleOrderedMap) shardsInfoMap.getVal(0)).get(\"shardAddress\").toString();\n      String secondReplicaAddr = ((SimpleOrderedMap) shardsInfoMap.getVal(1)).get(\"shardAddress\").toString();\n      boolean firstReplicaInZone1 = false;\n      boolean secondReplicaInZone1 = false;\n      for (String zone1Node : ZONE1_NODES) {\n        zone1Node = zone1Node.replace(\"_solr\", \"\");\n        firstReplicaInZone1 = firstReplicaInZone1 || firstReplicaAddr.contains(zone1Node);\n        secondReplicaInZone1 = secondReplicaInZone1 || secondReplicaAddr.contains(zone1Node);\n      }\n\n      assertEquals(firstReplicaInZone1, secondReplicaInZone1);\n    }\n\n    // intense asserting using TrackingShardHandlerFactory\n    assertRoutingToSameZone();\n\n    // Cachers should be stop running\n    CollectionAdminRequest\n        .setClusterProperty(ZkStateReader.DEFAULT_SHARD_PREFERENCES, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE+\":PULL\")\n        .process(cluster.getSolrClient());\n    {\n      TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeOut.waitFor(\"Timeout waiting for sysPropsCache stop\", () -> {\n        int numNodeStillRunningCache = 0;\n        for (JettySolrRunner runner: cluster.getJettySolrRunners()) {\n          if (runner.getCoreContainer().getZkController().getSysPropsCacher().isRunning()) {\n            numNodeStillRunningCache++;\n          }\n        }\n        return numNodeStillRunningCache == 0;\n      });\n    }\n\n    // Testing disable default shard preferences\n    CollectionAdminRequest\n        .setClusterProperty(ZkStateReader.DEFAULT_SHARD_PREFERENCES, null)\n        .process(cluster.getSolrClient());\n    {\n      TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeOut.waitFor(\"Timeout waiting cluster properties get updated\", () -> {\n        int numNodeGetUpdatedPref = 0;\n        int numNodeStillRunningCache = 0;\n        for (JettySolrRunner runner: cluster.getJettySolrRunners()) {\n          if (runner.getCoreContainer().getZkController()\n              .getZkStateReader().getClusterProperties().containsKey(ZkStateReader.DEFAULT_SHARD_PREFERENCES)) {\n            numNodeGetUpdatedPref++;\n          }\n          if (runner.getCoreContainer().getZkController().getSysPropsCacher().isRunning()) {\n            numNodeStillRunningCache++;\n          }\n        }\n        return numNodeGetUpdatedPref == 0 && numNodeStillRunningCache == 0;\n      });\n    }\n\n    int totalTimeSameZoneGetHitted = 0;\n    for (int i = 0; i < NUM_TRY; i++) {\n      SolrQuery qRequest = new SolrQuery(\"*:*\");\n      ModifiableSolrParams qParams = new ModifiableSolrParams();\n      qParams.add(ShardParams.SHARDS_INFO, \"true\");\n      qRequest.add(qParams);\n      QueryResponse qResponse = cluster.getSolrClient().query(COLLECTION, qRequest);\n\n      Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n      assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n      SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n      String firstReplicaAddr = ((SimpleOrderedMap) shardsInfoMap.getVal(0)).get(\"shardAddress\").toString();\n      String secondReplicaAddr = ((SimpleOrderedMap) shardsInfoMap.getVal(1)).get(\"shardAddress\").toString();\n      boolean firstReplicaInZone1 = false;\n      boolean secondReplicaInZone1 = false;\n      for (String zone1Node : ZONE1_NODES) {\n        zone1Node = zone1Node.replace(\"_solr\", \"\");\n        firstReplicaInZone1 = firstReplicaInZone1 || firstReplicaAddr.contains(zone1Node);\n        secondReplicaInZone1 = secondReplicaInZone1 || secondReplicaAddr.contains(zone1Node);\n      }\n      totalTimeSameZoneGetHitted += firstReplicaInZone1 == secondReplicaInZone1 ? 1 : 0;\n    }\n    assertTrue(\"Hitting same zone after \" + NUM_TRY + \" queries\",\n        totalTimeSameZoneGetHitted < NUM_TRY);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f120dbe10eed66dd9e9db199ba0195a55ba2507","date":1557498354,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RoutingToNodesWithPropertiesTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RoutingToNodesWithPropertiesTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    final int NUM_TRY = 10;\n    CollectionAdminRequest\n        .setClusterProperty(ZkStateReader.DEFAULT_SHARD_PREFERENCES, ShardParams.SHARDS_PREFERENCE_NODE_WITH_SAME_SYSPROP +\":\"+PROP_NAME)\n        .process(cluster.getSolrClient());\n    {\n      TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeOut.waitFor(\"Timeout waiting for sysprops are cached in all nodes\", () -> {\n        int total = 0;\n        for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n          total += runner.getCoreContainer().getZkController().getSysPropsCacher().getCacheSize();\n        }\n        return total == cluster.getJettySolrRunners().size() * cluster.getJettySolrRunners().size();\n      });\n    }\n\n    for (int i = 0; i <  NUM_TRY; i++) {\n      SolrQuery qRequest = new SolrQuery(\"*:*\");\n      ModifiableSolrParams qParams = new ModifiableSolrParams();\n      qParams.add(ShardParams.SHARDS_INFO, \"true\");\n      qRequest.add(qParams);\n      QueryResponse qResponse = cluster.getSolrClient().query(COLLECTION, qRequest);\n\n      Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n      assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n      SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n      String firstReplicaAddr = ((SimpleOrderedMap) shardsInfoMap.getVal(0)).get(\"shardAddress\").toString();\n      String secondReplicaAddr = ((SimpleOrderedMap) shardsInfoMap.getVal(1)).get(\"shardAddress\").toString();\n      boolean firstReplicaInZone1 = false;\n      boolean secondReplicaInZone1 = false;\n      for (String zone1Node : zone1Nodes) {\n        zone1Node = zone1Node.replace(\"_solr\", \"\");\n        firstReplicaInZone1 = firstReplicaInZone1 || firstReplicaAddr.contains(zone1Node);\n        secondReplicaInZone1 = secondReplicaInZone1 || secondReplicaAddr.contains(zone1Node);\n      }\n\n      assertEquals(firstReplicaInZone1, secondReplicaInZone1);\n    }\n\n    // intense asserting using TrackingShardHandlerFactory\n    assertRoutingToSameZone();\n\n    // Cachers should be stop running\n    CollectionAdminRequest\n        .setClusterProperty(ZkStateReader.DEFAULT_SHARD_PREFERENCES, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE+\":PULL\")\n        .process(cluster.getSolrClient());\n    {\n      TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeOut.waitFor(\"Timeout waiting for sysPropsCache stop\", () -> {\n        int numNodeStillRunningCache = 0;\n        for (JettySolrRunner runner: cluster.getJettySolrRunners()) {\n          if (runner.getCoreContainer().getZkController().getSysPropsCacher().isRunning()) {\n            numNodeStillRunningCache++;\n          }\n        }\n        return numNodeStillRunningCache == 0;\n      });\n    }\n\n    // Testing disable default shard preferences\n    CollectionAdminRequest\n        .setClusterProperty(ZkStateReader.DEFAULT_SHARD_PREFERENCES, null)\n        .process(cluster.getSolrClient());\n    {\n      TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeOut.waitFor(\"Timeout waiting cluster properties get updated\", () -> {\n        int numNodeGetUpdatedPref = 0;\n        int numNodeStillRunningCache = 0;\n        for (JettySolrRunner runner: cluster.getJettySolrRunners()) {\n          if (runner.getCoreContainer().getZkController()\n              .getZkStateReader().getClusterProperties().containsKey(ZkStateReader.DEFAULT_SHARD_PREFERENCES)) {\n            numNodeGetUpdatedPref++;\n          }\n          if (runner.getCoreContainer().getZkController().getSysPropsCacher().isRunning()) {\n            numNodeStillRunningCache++;\n          }\n        }\n        return numNodeGetUpdatedPref == 0 && numNodeStillRunningCache == 0;\n      });\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    final int NUM_TRY = 10;\n    CollectionAdminRequest\n        .setClusterProperty(ZkStateReader.DEFAULT_SHARD_PREFERENCES, ShardParams.SHARDS_PREFERENCE_NODE_WITH_SAME_SYSPROP +\":\"+PROP_NAME)\n        .process(cluster.getSolrClient());\n    {\n      TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeOut.waitFor(\"Timeout waiting for sysprops are cached in all nodes\", () -> {\n        int total = 0;\n        for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n          total += runner.getCoreContainer().getZkController().getSysPropsCacher().getCacheSize();\n        }\n        return total == cluster.getJettySolrRunners().size() * cluster.getJettySolrRunners().size();\n      });\n    }\n\n    for (int i = 0; i <  NUM_TRY; i++) {\n      SolrQuery qRequest = new SolrQuery(\"*:*\");\n      ModifiableSolrParams qParams = new ModifiableSolrParams();\n      qParams.add(ShardParams.SHARDS_INFO, \"true\");\n      qRequest.add(qParams);\n      QueryResponse qResponse = cluster.getSolrClient().query(COLLECTION, qRequest);\n\n      Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n      assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n      SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n      String firstReplicaAddr = ((SimpleOrderedMap) shardsInfoMap.getVal(0)).get(\"shardAddress\").toString();\n      String secondReplicaAddr = ((SimpleOrderedMap) shardsInfoMap.getVal(1)).get(\"shardAddress\").toString();\n      boolean firstReplicaInZone1 = false;\n      boolean secondReplicaInZone1 = false;\n      for (String zone1Node : ZONE1_NODES) {\n        zone1Node = zone1Node.replace(\"_solr\", \"\");\n        firstReplicaInZone1 = firstReplicaInZone1 || firstReplicaAddr.contains(zone1Node);\n        secondReplicaInZone1 = secondReplicaInZone1 || secondReplicaAddr.contains(zone1Node);\n      }\n\n      assertEquals(firstReplicaInZone1, secondReplicaInZone1);\n    }\n\n    // intense asserting using TrackingShardHandlerFactory\n    assertRoutingToSameZone();\n\n    // Cachers should be stop running\n    CollectionAdminRequest\n        .setClusterProperty(ZkStateReader.DEFAULT_SHARD_PREFERENCES, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE+\":PULL\")\n        .process(cluster.getSolrClient());\n    {\n      TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeOut.waitFor(\"Timeout waiting for sysPropsCache stop\", () -> {\n        int numNodeStillRunningCache = 0;\n        for (JettySolrRunner runner: cluster.getJettySolrRunners()) {\n          if (runner.getCoreContainer().getZkController().getSysPropsCacher().isRunning()) {\n            numNodeStillRunningCache++;\n          }\n        }\n        return numNodeStillRunningCache == 0;\n      });\n    }\n\n    // Testing disable default shard preferences\n    CollectionAdminRequest\n        .setClusterProperty(ZkStateReader.DEFAULT_SHARD_PREFERENCES, null)\n        .process(cluster.getSolrClient());\n    {\n      TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeOut.waitFor(\"Timeout waiting cluster properties get updated\", () -> {\n        int numNodeGetUpdatedPref = 0;\n        int numNodeStillRunningCache = 0;\n        for (JettySolrRunner runner: cluster.getJettySolrRunners()) {\n          if (runner.getCoreContainer().getZkController()\n              .getZkStateReader().getClusterProperties().containsKey(ZkStateReader.DEFAULT_SHARD_PREFERENCES)) {\n            numNodeGetUpdatedPref++;\n          }\n          if (runner.getCoreContainer().getZkController().getSysPropsCacher().isRunning()) {\n            numNodeStillRunningCache++;\n          }\n        }\n        return numNodeGetUpdatedPref == 0 && numNodeStillRunningCache == 0;\n      });\n    }\n\n    int totalTimeSameZoneGetHitted = 0;\n    for (int i = 0; i < NUM_TRY; i++) {\n      SolrQuery qRequest = new SolrQuery(\"*:*\");\n      ModifiableSolrParams qParams = new ModifiableSolrParams();\n      qParams.add(ShardParams.SHARDS_INFO, \"true\");\n      qRequest.add(qParams);\n      QueryResponse qResponse = cluster.getSolrClient().query(COLLECTION, qRequest);\n\n      Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n      assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n      SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n      String firstReplicaAddr = ((SimpleOrderedMap) shardsInfoMap.getVal(0)).get(\"shardAddress\").toString();\n      String secondReplicaAddr = ((SimpleOrderedMap) shardsInfoMap.getVal(1)).get(\"shardAddress\").toString();\n      boolean firstReplicaInZone1 = false;\n      boolean secondReplicaInZone1 = false;\n      for (String zone1Node : ZONE1_NODES) {\n        zone1Node = zone1Node.replace(\"_solr\", \"\");\n        firstReplicaInZone1 = firstReplicaInZone1 || firstReplicaAddr.contains(zone1Node);\n        secondReplicaInZone1 = secondReplicaInZone1 || secondReplicaAddr.contains(zone1Node);\n      }\n      totalTimeSameZoneGetHitted += firstReplicaInZone1 == secondReplicaInZone1 ? 1 : 0;\n    }\n    assertTrue(\"Hitting same zone after \" + NUM_TRY + \" queries\",\n        totalTimeSameZoneGetHitted < NUM_TRY);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/RoutingToNodesWithPropertiesTest#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void test() throws Exception {\n    final int NUM_TRY = 10;\n    CollectionAdminRequest\n        .setClusterProperty(ZkStateReader.DEFAULT_SHARD_PREFERENCES, ShardParams.SHARDS_PREFERENCE_NODE_WITH_SAME_SYSPROP +\":\"+PROP_NAME)\n        .process(cluster.getSolrClient());\n    {\n      TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeOut.waitFor(\"Timeout waiting for sysprops are cached in all nodes\", () -> {\n        int total = 0;\n        for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n          total += runner.getCoreContainer().getZkController().getSysPropsCacher().getCacheSize();\n        }\n        return total == cluster.getJettySolrRunners().size() * cluster.getJettySolrRunners().size();\n      });\n    }\n\n    for (int i = 0; i <  NUM_TRY; i++) {\n      SolrQuery qRequest = new SolrQuery(\"*:*\");\n      ModifiableSolrParams qParams = new ModifiableSolrParams();\n      qParams.add(ShardParams.SHARDS_INFO, \"true\");\n      qRequest.add(qParams);\n      QueryResponse qResponse = cluster.getSolrClient().query(COLLECTION, qRequest);\n\n      Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n      assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n      SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n      String firstReplicaAddr = ((SimpleOrderedMap) shardsInfoMap.getVal(0)).get(\"shardAddress\").toString();\n      String secondReplicaAddr = ((SimpleOrderedMap) shardsInfoMap.getVal(1)).get(\"shardAddress\").toString();\n      boolean firstReplicaInZone1 = false;\n      boolean secondReplicaInZone1 = false;\n      for (String zone1Node : zone1Nodes) {\n        zone1Node = zone1Node.replace(\"_solr\", \"\");\n        firstReplicaInZone1 = firstReplicaInZone1 || firstReplicaAddr.contains(zone1Node);\n        secondReplicaInZone1 = secondReplicaInZone1 || secondReplicaAddr.contains(zone1Node);\n      }\n\n      assertEquals(firstReplicaInZone1, secondReplicaInZone1);\n    }\n\n    // intense asserting using TrackingShardHandlerFactory\n    assertRoutingToSameZone();\n\n    // Cachers should be stop running\n    CollectionAdminRequest\n        .setClusterProperty(ZkStateReader.DEFAULT_SHARD_PREFERENCES, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE+\":PULL\")\n        .process(cluster.getSolrClient());\n    {\n      TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeOut.waitFor(\"Timeout waiting for sysPropsCache stop\", () -> {\n        int numNodeStillRunningCache = 0;\n        for (JettySolrRunner runner: cluster.getJettySolrRunners()) {\n          if (runner.getCoreContainer().getZkController().getSysPropsCacher().isRunning()) {\n            numNodeStillRunningCache++;\n          }\n        }\n        return numNodeStillRunningCache == 0;\n      });\n    }\n\n    // Testing disable default shard preferences\n    CollectionAdminRequest\n        .setClusterProperty(ZkStateReader.DEFAULT_SHARD_PREFERENCES, null)\n        .process(cluster.getSolrClient());\n    {\n      TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeOut.waitFor(\"Timeout waiting cluster properties get updated\", () -> {\n        int numNodeGetUpdatedPref = 0;\n        int numNodeStillRunningCache = 0;\n        for (JettySolrRunner runner: cluster.getJettySolrRunners()) {\n          if (runner.getCoreContainer().getZkController()\n              .getZkStateReader().getClusterProperties().containsKey(ZkStateReader.DEFAULT_SHARD_PREFERENCES)) {\n            numNodeGetUpdatedPref++;\n          }\n          if (runner.getCoreContainer().getZkController().getSysPropsCacher().isRunning()) {\n            numNodeStillRunningCache++;\n          }\n        }\n        return numNodeGetUpdatedPref == 0 && numNodeStillRunningCache == 0;\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["1f120dbe10eed66dd9e9db199ba0195a55ba2507"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f120dbe10eed66dd9e9db199ba0195a55ba2507":["033183e9e2da4609614733f0226a38c88c49ed36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"033183e9e2da4609614733f0226a38c88c49ed36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["033183e9e2da4609614733f0226a38c88c49ed36"],"1f120dbe10eed66dd9e9db199ba0195a55ba2507":["3f504512a03d978990cbff30db0522b354e846db"],"033183e9e2da4609614733f0226a38c88c49ed36":["1f120dbe10eed66dd9e9db199ba0195a55ba2507"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}