{"path":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#nextDoc().mjava","commits":[{"id":"953de31d76c9d58f1e3f4e41ff8a48a1529226de","date":1277371072,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int nextDoc() throws IOException {\n    while(true) {\n\n      // first (rarest) term\n      final int doc = chunkStates[0].posEnum.nextDoc();\n      if (doc == DocsEnum.NO_MORE_DOCS) {\n        docID = doc;\n        return doc;\n      }\n\n      // not-first terms\n      int i = 1;\n      while(i < chunkStates.length) {\n        final ChunkState cs = chunkStates[i];\n        int doc2 = cs.posEnum.docID();\n        if (cs.useAdvance) {\n          if (doc2 < doc) {\n            doc2 = cs.posEnum.advance(doc);\n          }\n        } else {\n          int iter = 0;\n          while(doc2 < doc) {\n            // safety net -- fallback to .advance if we've\n            // done too many .nextDocs\n            if (++iter == 50) {\n              doc2 = cs.posEnum.advance(doc);\n              break;\n            } else {\n              doc2 = cs.posEnum.nextDoc();\n            }\n          }\n        }\n        if (doc2 > doc) {\n          break;\n        }\n        i++;\n      }\n\n      if (i == chunkStates.length) {\n        // this doc has all the terms -- now test whether\n        // phrase occurs\n        docID = doc;\n\n        freq = phraseFreq();\n        if (freq != 0) {\n          return docID;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int nextDoc() throws IOException {\n    while(true) {\n\n      // first (rarest) term\n      final int doc = chunkStates[0].posEnum.nextDoc();\n      if (doc == DocsEnum.NO_MORE_DOCS) {\n        docID = doc;\n        return doc;\n      }\n\n      // not-first terms\n      int i = 1;\n      while(i < chunkStates.length) {\n        final ChunkState cs = chunkStates[i];\n        int doc2 = cs.posEnum.docID();\n        if (cs.useAdvance) {\n          if (doc2 < doc) {\n            doc2 = cs.posEnum.advance(doc);\n          }\n        } else {\n          int iter = 0;\n          while(doc2 < doc) {\n            // safety net -- fallback to .advance if we've\n            // done too many .nextDocs\n            if (++iter == 50) {\n              doc2 = cs.posEnum.advance(doc);\n              break;\n            } else {\n              doc2 = cs.posEnum.nextDoc();\n            }\n          }\n        }\n        if (doc2 > doc) {\n          break;\n        }\n        i++;\n      }\n\n      if (i == chunkStates.length) {\n        // this doc has all the terms -- now test whether\n        // phrase occurs\n        docID = doc;\n\n        freq = phraseFreq();\n        if (freq != 0) {\n          return docID;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ExactPhraseScorer#nextDoc().mjava","sourceNew":"  @Override\n  public int nextDoc() throws IOException {\n    while(true) {\n\n      // first (rarest) term\n      final int doc = chunkStates[0].posEnum.nextDoc();\n      if (doc == DocsEnum.NO_MORE_DOCS) {\n        docID = doc;\n        return doc;\n      }\n\n      // not-first terms\n      int i = 1;\n      while(i < chunkStates.length) {\n        final ChunkState cs = chunkStates[i];\n        int doc2 = cs.posEnum.docID();\n        if (cs.useAdvance) {\n          if (doc2 < doc) {\n            doc2 = cs.posEnum.advance(doc);\n          }\n        } else {\n          int iter = 0;\n          while(doc2 < doc) {\n            // safety net -- fallback to .advance if we've\n            // done too many .nextDocs\n            if (++iter == 50) {\n              doc2 = cs.posEnum.advance(doc);\n              break;\n            } else {\n              doc2 = cs.posEnum.nextDoc();\n            }\n          }\n        }\n        if (doc2 > doc) {\n          break;\n        }\n        i++;\n      }\n\n      if (i == chunkStates.length) {\n        // this doc has all the terms -- now test whether\n        // phrase occurs\n        docID = doc;\n\n        freq = phraseFreq();\n        if (freq != 0) {\n          return docID;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public int nextDoc() throws IOException {\n    while(true) {\n\n      // first (rarest) term\n      final int doc = chunkStates[0].posEnum.nextDoc();\n      if (doc == DocsEnum.NO_MORE_DOCS) {\n        docID = doc;\n        return doc;\n      }\n\n      // not-first terms\n      int i = 1;\n      while(i < chunkStates.length) {\n        final ChunkState cs = chunkStates[i];\n        int doc2 = cs.posEnum.docID();\n        if (cs.useAdvance) {\n          if (doc2 < doc) {\n            doc2 = cs.posEnum.advance(doc);\n          }\n        } else {\n          int iter = 0;\n          while(doc2 < doc) {\n            // safety net -- fallback to .advance if we've\n            // done too many .nextDocs\n            if (++iter == 50) {\n              doc2 = cs.posEnum.advance(doc);\n              break;\n            } else {\n              doc2 = cs.posEnum.nextDoc();\n            }\n          }\n        }\n        if (doc2 > doc) {\n          break;\n        }\n        i++;\n      }\n\n      if (i == chunkStates.length) {\n        // this doc has all the terms -- now test whether\n        // phrase occurs\n        docID = doc;\n\n        freq = phraseFreq();\n        if (freq != 0) {\n          return docID;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"953de31d76c9d58f1e3f4e41ff8a48a1529226de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["953de31d76c9d58f1e3f4e41ff8a48a1529226de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","953de31d76c9d58f1e3f4e41ff8a48a1529226de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"953de31d76c9d58f1e3f4e41ff8a48a1529226de":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5f4e87790277826a2aea119328600dfb07761f32"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["953de31d76c9d58f1e3f4e41ff8a48a1529226de","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}