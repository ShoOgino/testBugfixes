{"path":"lucene/core/src/java/org/apache/lucene/search/DocIdSetIterator#range(int,int).mjava","commits":[{"id":"33519299a416f62c6a3c81fc4360ed8218bd2781","date":1530799313,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocIdSetIterator#range(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** A {@link DocIdSetIterator} that matches a range documents from\n   *  minDocID (inclusive) to maxDocID (exclusive). */\n  public static final DocIdSetIterator range(int minDoc, int maxDoc) {\n    if (minDoc >= maxDoc) {\n        throw new IllegalArgumentException(\"minDoc must be < maxDoc but got minDoc=\" + minDoc + \" maxDoc=\" + maxDoc);\n    }\n    if (minDoc < 0) {\n      throw new IllegalArgumentException(\"minDoc must be >= 0 but got minDoc=\" + minDoc);\n    }\n    return new DocIdSetIterator() {\n      private int doc = -1;\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target < minDoc) {\n            doc = minDoc;\n        } else if (target >= maxDoc) {\n            doc = NO_MORE_DOCS;\n        } else {\n            doc = target;\n        }\n        return doc;\n      }\n\n      @Override\n      public long cost() {\n        return maxDoc - minDoc;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocIdSetIterator#range(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** A {@link DocIdSetIterator} that matches a range documents from\n   *  minDocID (inclusive) to maxDocID (exclusive). */\n  public static final DocIdSetIterator range(int minDoc, int maxDoc) {\n    if (minDoc >= maxDoc) {\n        throw new IllegalArgumentException(\"minDoc must be < maxDoc but got minDoc=\" + minDoc + \" maxDoc=\" + maxDoc);\n    }\n    if (minDoc < 0) {\n      throw new IllegalArgumentException(\"minDoc must be >= 0 but got minDoc=\" + minDoc);\n    }\n    return new DocIdSetIterator() {\n      private int doc = -1;\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target < minDoc) {\n            doc = minDoc;\n        } else if (target >= maxDoc) {\n            doc = NO_MORE_DOCS;\n        } else {\n            doc = target;\n        }\n        return doc;\n      }\n\n      @Override\n      public long cost() {\n        return maxDoc - minDoc;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocIdSetIterator#range(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** A {@link DocIdSetIterator} that matches a range documents from\n   *  minDocID (inclusive) to maxDocID (exclusive). */\n  public static final DocIdSetIterator range(int minDoc, int maxDoc) {\n    if (minDoc >= maxDoc) {\n        throw new IllegalArgumentException(\"minDoc must be < maxDoc but got minDoc=\" + minDoc + \" maxDoc=\" + maxDoc);\n    }\n    if (minDoc < 0) {\n      throw new IllegalArgumentException(\"minDoc must be >= 0 but got minDoc=\" + minDoc);\n    }\n    return new DocIdSetIterator() {\n      private int doc = -1;\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target < minDoc) {\n            doc = minDoc;\n        } else if (target >= maxDoc) {\n            doc = NO_MORE_DOCS;\n        } else {\n            doc = target;\n        }\n        return doc;\n      }\n\n      @Override\n      public long cost() {\n        return maxDoc - minDoc;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33519299a416f62c6a3c81fc4360ed8218bd2781"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33519299a416f62c6a3c81fc4360ed8218bd2781":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["33519299a416f62c6a3c81fc4360ed8218bd2781"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33519299a416f62c6a3c81fc4360ed8218bd2781"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","33519299a416f62c6a3c81fc4360ed8218bd2781","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"33519299a416f62c6a3c81fc4360ed8218bd2781":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}