{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer#getNumericValues(NumericEntry).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer#getNumericValues(NumericEntry).mjava","pathOld":"/dev/null","sourceNew":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      if (entry.blockShift >= 0) {\n        return new LongValues() {\n          final VaryingBPVReader vBPVReader = new VaryingBPVReader(entry, slice);\n          @Override\n          public long get(long index) {\n            try {\n              return vBPVReader.getLongValue(index);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      } else {\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer#getNumericValues(NumericEntry).mjava","pathOld":"/dev/null","sourceNew":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      if (entry.blockShift >= 0) {\n        return new LongValues() {\n          final VaryingBPVReader vBPVReader = new VaryingBPVReader(entry, slice);\n          @Override\n          public long get(long index) {\n            try {\n              return vBPVReader.getLongValue(index);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      } else {\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}