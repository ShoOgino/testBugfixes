{"path":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","commits":[{"id":"6ebe528b0781ad625e6dd684272e383b49f57d1f","date":1057961593,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #maxFieldLength} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, similarity, maxFieldLength);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df","6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0fea872534d6ef91a1b497a238a935761aa51e64","date":1102883187,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #maxFieldLength} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, similarity, maxFieldLength);\n    dw.setInfoStream(infoStream);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #maxFieldLength} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, similarity, maxFieldLength);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3afaca6e0770734b01e3bc663bec3ffa71b6f87b","date":1110394706,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #maxFieldLength} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #maxFieldLength} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, similarity, maxFieldLength);\n    dw.setInfoStream(infoStream);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6","date":1117912671,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #maxFieldLength} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a34f23ad863179f1a3d973f561d76331e5dce92","date":1155457213,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      bufferedDocCount++;\n      maybeMergeSegments();\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7cf920bc70a57dc75d59acb55a7d893cc2924ad","date":1155538722,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      bufferedDocCount++;\n      maybeMergeSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1507a324c1f939ed71e01297733a49b9c36e5688","date":1155783141,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      singleDocSegmentsCount++;\n      maybeMergeSegments();\n    }\n    // testInvariants();\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeMergeSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7052f725a053aa55424f966831826f61b798bf1","date":1158258681,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newRAMSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      ramSegmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeFlushRamSegments();\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      segmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      singleDocSegmentsCount++;\n      maybeMergeSegments();\n    }\n    // testInvariants();\n  }\n\n","bugFix":null,"bugIntro":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newRAMSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      ramSegmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory, false));\n      maybeFlushRamSegments();\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newRAMSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      ramSegmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory));\n      maybeFlushRamSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eeefd99c477417e5c7c574228461ebafe92469d4","date":1166460329,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * See @link #addDocument(Document) for details on index\n   * state after an IOException.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newRAMSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      ramSegmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory, false));\n      maybeFlushRamSegments();\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newRAMSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      ramSegmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory, false));\n      maybeFlushRamSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a664b1395d4341b88e32d36297d7670f1a665ac","date":1166527887,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception.</p>\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newRAMSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      ramSegmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory, false));\n      maybeFlushRamSegments();\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * See @link #addDocument(Document) for details on index\n   * state after an IOException.\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newRAMSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      ramSegmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory, false));\n      maybeFlushRamSegments();\n    }\n  }\n\n","bugFix":["eeefd99c477417e5c7c574228461ebafe92469d4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f7478f1d67a81bf80f28067595be0383022d65b","date":1167857941,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newRAMSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      ramSegmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory, false));\n      maybeFlushRamSegments();\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception.</p>\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newRAMSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      ramSegmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory, false));\n      maybeFlushRamSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8969a184df55d25d61e85be785987fbf830d4028","date":1168143561,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newRAMSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      ramSegmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory, false, false));\n      maybeFlushRamSegments();\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newRAMSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      ramSegmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory, false));\n      maybeFlushRamSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b772434f9f358356f8eedc2e017b9ddfb2615ec","date":1170327312,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    SegmentInfo newSegmentInfo = buildSingleDocSegment(doc, analyzer);\n    synchronized (this) {\n      ramSegmentInfos.addElement(newSegmentInfo);\n      maybeFlushRamSegments();\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    DocumentWriter dw =\n      new DocumentWriter(ramDirectory, analyzer, this);\n    dw.setInfoStream(infoStream);\n    String segmentName = newRAMSegmentName();\n    dw.addDocument(segmentName, doc);\n    synchronized (this) {\n      ramSegmentInfos.addElement(new SegmentInfo(segmentName, 1, ramDirectory, false, false));\n      maybeFlushRamSegments();\n    }\n  }\n\n","bugFix":["d7052f725a053aa55424f966831826f61b798bf1","6ebe528b0781ad625e6dd684272e383b49f57d1f","0fea872534d6ef91a1b497a238a935761aa51e64","8969a184df55d25d61e85be785987fbf830d4028","3afaca6e0770734b01e3bc663bec3ffa71b6f87b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    SegmentInfo newSegmentInfo = buildSingleDocSegment(doc, analyzer);\n    synchronized (this) {\n      ramSegmentInfos.addElement(newSegmentInfo);\n      maybeFlushRamSegments();\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws IOException {\n    SegmentInfo newSegmentInfo = buildSingleDocSegment(doc, analyzer);\n    synchronized (this) {\n      ramSegmentInfos.addElement(newSegmentInfo);\n      maybeFlushRamSegments();\n    }\n  }\n\n","bugFix":["6ebe528b0781ad625e6dd684272e383b49f57d1f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    SegmentInfo newSegmentInfo = buildSingleDocSegment(doc, analyzer);\n    synchronized (this) {\n      ramSegmentInfos.addElement(newSegmentInfo);\n      maybeFlushRamSegments();\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    SegmentInfo newSegmentInfo = buildSingleDocSegment(doc, analyzer);\n    synchronized (this) {\n      ramSegmentInfos.addElement(newSegmentInfo);\n      maybeFlushRamSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (docWriter.addDocument(doc, analyzer))\n      flush(true, false);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    SegmentInfo newSegmentInfo = buildSingleDocSegment(doc, analyzer);\n    synchronized (this) {\n      ramSegmentInfos.addElement(newSegmentInfo);\n      maybeFlushRamSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":["5d01393ee15c09415a2d4d8610aef0ec780a5e5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d01393ee15c09415a2d4d8610aef0ec780a5e5f","date":1184714576,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n      success = docWriter.addDocument(doc, analyzer);\n    } catch (IOException ioe) {\n      deleter.refresh();\n      throw ioe;\n    }\n    if (success)\n      flush(true, false);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (docWriter.addDocument(doc, analyzer))\n      flush(true, false);\n  }\n\n","bugFix":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      doFlush = docWriter.addDocument(doc, analyzer);\n      success = true;\n    } finally {\n      if (!success) {\n\n        if (infoStream != null)\n          message(\"hit exception adding document\");\n\n        synchronized (this) {\n          // If docWriter has some aborted files that were\n          // never incref'd, then we clean them up here\n          final List files = docWriter.abortedFiles();\n          if (files != null)\n            deleter.deleteNewFiles(files);\n        }\n      }\n    }\n    if (doFlush)\n      flush(true, false);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n      success = docWriter.addDocument(doc, analyzer);\n    } catch (IOException ioe) {\n      deleter.refresh();\n      throw ioe;\n    }\n    if (success)\n      flush(true, false);\n  }\n\n","bugFix":null,"bugIntro":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"741a5cca05cabe1e7482410a29e563a08379251a","date":1196676550,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    int status = 0;\n    boolean success = false;\n    try {\n      status = docWriter.addDocument(doc, analyzer);\n      success = true;\n    } finally {\n      if (!success) {\n\n        if (infoStream != null)\n          message(\"hit exception adding document\");\n\n        synchronized (this) {\n          // If docWriter has some aborted files that were\n          // never incref'd, then we clean them up here\n          final List files = docWriter.abortedFiles();\n          if (files != null)\n            deleter.deleteNewFiles(files);\n        }\n      }\n    }\n    if ((status & 1) != 0)\n      flush(true, false);\n    checkMaxTermLength(status);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      doFlush = docWriter.addDocument(doc, analyzer);\n      success = true;\n    } finally {\n      if (!success) {\n\n        if (infoStream != null)\n          message(\"hit exception adding document\");\n\n        synchronized (this) {\n          // If docWriter has some aborted files that were\n          // never incref'd, then we clean them up here\n          final List files = docWriter.abortedFiles();\n          if (files != null)\n            deleter.deleteNewFiles(files);\n        }\n      }\n    }\n    if (doFlush)\n      flush(true, false);\n  }\n\n","bugFix":null,"bugIntro":["5a251aa47d1808cbae42c0e172d698c377430e60"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"346d5897e4c4e77ed5dbd31f7730ff30973d5971","date":1198317988,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    int status = 0;\n    boolean success = false;\n    try {\n      status = docWriter.addDocument(doc, analyzer);\n      success = true;\n    } finally {\n      if (!success) {\n\n        if (infoStream != null)\n          message(\"hit exception adding document\");\n\n        synchronized (this) {\n          // If docWriter has some aborted files that were\n          // never incref'd, then we clean them up here\n          if (docWriter != null) {\n            final List files = docWriter.abortedFiles();\n            if (files != null)\n              deleter.deleteNewFiles(files);\n          }\n        }\n      }\n    }\n    if ((status & 1) != 0)\n      flush(true, false);\n    checkMaxTermLength(status);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    int status = 0;\n    boolean success = false;\n    try {\n      status = docWriter.addDocument(doc, analyzer);\n      success = true;\n    } finally {\n      if (!success) {\n\n        if (infoStream != null)\n          message(\"hit exception adding document\");\n\n        synchronized (this) {\n          // If docWriter has some aborted files that were\n          // never incref'd, then we clean them up here\n          final List files = docWriter.abortedFiles();\n          if (files != null)\n            deleter.deleteNewFiles(files);\n        }\n      }\n    }\n    if ((status & 1) != 0)\n      flush(true, false);\n    checkMaxTermLength(status);\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a251aa47d1808cbae42c0e172d698c377430e60","date":1199375390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      doFlush = docWriter.addDocument(doc, analyzer);\n      success = true;\n    } finally {\n      if (!success) {\n\n        if (infoStream != null)\n          message(\"hit exception adding document\");\n\n        synchronized (this) {\n          // If docWriter has some aborted files that were\n          // never incref'd, then we clean them up here\n          if (docWriter != null) {\n            final List files = docWriter.abortedFiles();\n            if (files != null)\n              deleter.deleteNewFiles(files);\n          }\n        }\n      }\n    }\n    if (doFlush)\n      flush(true, false);\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    int status = 0;\n    boolean success = false;\n    try {\n      status = docWriter.addDocument(doc, analyzer);\n      success = true;\n    } finally {\n      if (!success) {\n\n        if (infoStream != null)\n          message(\"hit exception adding document\");\n\n        synchronized (this) {\n          // If docWriter has some aborted files that were\n          // never incref'd, then we clean them up here\n          if (docWriter != null) {\n            final List files = docWriter.abortedFiles();\n            if (files != null)\n              deleter.deleteNewFiles(files);\n          }\n        }\n      }\n    }\n    if ((status & 1) != 0)\n      flush(true, false);\n    checkMaxTermLength(status);\n  }\n\n","bugFix":["741a5cca05cabe1e7482410a29e563a08379251a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63","date":1204234542,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final List files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false);\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      doFlush = docWriter.addDocument(doc, analyzer);\n      success = true;\n    } finally {\n      if (!success) {\n\n        if (infoStream != null)\n          message(\"hit exception adding document\");\n\n        synchronized (this) {\n          // If docWriter has some aborted files that were\n          // never incref'd, then we clean them up here\n          if (docWriter != null) {\n            final List files = docWriter.abortedFiles();\n            if (files != null)\n              deleter.deleteNewFiles(files);\n          }\n        }\n      }\n    }\n    if (doFlush)\n      flush(true, false);\n  }\n\n","bugFix":null,"bugIntro":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final List files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final List files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false);\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final List files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9665d17707cc21b1db995118ff36129723139ab","date":1225384420,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd488f50316362b01a7f67b11a96796b9652e3e5","date":1241121034,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    }\n  }\n\n","bugFix":["01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["1b54a9bc667895a2095a886184bf69a3179e63df"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63"],"5a664b1395d4341b88e32d36297d7670f1a665ac":["eeefd99c477417e5c7c574228461ebafe92469d4"],"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6":["3afaca6e0770734b01e3bc663bec3ffa71b6f87b"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"6b772434f9f358356f8eedc2e017b9ddfb2615ec":["8969a184df55d25d61e85be785987fbf830d4028"],"eeefd99c477417e5c7c574228461ebafe92469d4":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"1507a324c1f939ed71e01297733a49b9c36e5688":["c7cf920bc70a57dc75d59acb55a7d893cc2924ad"],"8f7478f1d67a81bf80f28067595be0383022d65b":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"0fea872534d6ef91a1b497a238a935761aa51e64":["6ebe528b0781ad625e6dd684272e383b49f57d1f"],"ef82ff03e4016c705811b2658e81471a645c0e49":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a251aa47d1808cbae42c0e172d698c377430e60":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"5350389bf83287111f7760b9e3db3af8e3648474":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"c7cf920bc70a57dc75d59acb55a7d893cc2924ad":["1a34f23ad863179f1a3d973f561d76331e5dce92"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"],"d7052f725a053aa55424f966831826f61b798bf1":["1507a324c1f939ed71e01297733a49b9c36e5688"],"346d5897e4c4e77ed5dbd31f7730ff30973d5971":["741a5cca05cabe1e7482410a29e563a08379251a"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["5d01393ee15c09415a2d4d8610aef0ec780a5e5f"],"6ebe528b0781ad625e6dd684272e383b49f57d1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1b54a9bc667895a2095a886184bf69a3179e63df":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"1a34f23ad863179f1a3d973f561d76331e5dce92":["ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6"],"741a5cca05cabe1e7482410a29e563a08379251a":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"5d01393ee15c09415a2d4d8610aef0ec780a5e5f":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"e9665d17707cc21b1db995118ff36129723139ab":["5350389bf83287111f7760b9e3db3af8e3648474"],"cd488f50316362b01a7f67b11a96796b9652e3e5":["e9665d17707cc21b1db995118ff36129723139ab"],"01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63":["5a251aa47d1808cbae42c0e172d698c377430e60"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["d7052f725a053aa55424f966831826f61b798bf1"],"8969a184df55d25d61e85be785987fbf830d4028":["8f7478f1d67a81bf80f28067595be0383022d65b"],"3afaca6e0770734b01e3bc663bec3ffa71b6f87b":["0fea872534d6ef91a1b497a238a935761aa51e64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"commit2Childs":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["5350389bf83287111f7760b9e3db3af8e3648474"],"5a664b1395d4341b88e32d36297d7670f1a665ac":["8f7478f1d67a81bf80f28067595be0383022d65b"],"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6":["1a34f23ad863179f1a3d973f561d76331e5dce92"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["5d01393ee15c09415a2d4d8610aef0ec780a5e5f"],"6b772434f9f358356f8eedc2e017b9ddfb2615ec":["1b54a9bc667895a2095a886184bf69a3179e63df"],"eeefd99c477417e5c7c574228461ebafe92469d4":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"1507a324c1f939ed71e01297733a49b9c36e5688":["d7052f725a053aa55424f966831826f61b798bf1"],"8f7478f1d67a81bf80f28067595be0383022d65b":["8969a184df55d25d61e85be785987fbf830d4028"],"0fea872534d6ef91a1b497a238a935761aa51e64":["3afaca6e0770734b01e3bc663bec3ffa71b6f87b"],"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ebe528b0781ad625e6dd684272e383b49f57d1f"],"5a251aa47d1808cbae42c0e172d698c377430e60":["01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63"],"c7cf920bc70a57dc75d59acb55a7d893cc2924ad":["1507a324c1f939ed71e01297733a49b9c36e5688"],"5350389bf83287111f7760b9e3db3af8e3648474":["e9665d17707cc21b1db995118ff36129723139ab"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d7052f725a053aa55424f966831826f61b798bf1":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"346d5897e4c4e77ed5dbd31f7730ff30973d5971":["5a251aa47d1808cbae42c0e172d698c377430e60"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["741a5cca05cabe1e7482410a29e563a08379251a"],"6ebe528b0781ad625e6dd684272e383b49f57d1f":["0fea872534d6ef91a1b497a238a935761aa51e64"],"1b54a9bc667895a2095a886184bf69a3179e63df":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"1a34f23ad863179f1a3d973f561d76331e5dce92":["c7cf920bc70a57dc75d59acb55a7d893cc2924ad"],"741a5cca05cabe1e7482410a29e563a08379251a":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"5d01393ee15c09415a2d4d8610aef0ec780a5e5f":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"e9665d17707cc21b1db995118ff36129723139ab":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"cd488f50316362b01a7f67b11a96796b9652e3e5":["ef82ff03e4016c705811b2658e81471a645c0e49"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["eeefd99c477417e5c7c574228461ebafe92469d4"],"8969a184df55d25d61e85be785987fbf830d4028":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"3afaca6e0770734b01e3bc663bec3ffa71b6f87b":["ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}