{"path":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","commits":[{"id":"66f3dadb253a44f4cccc81c8a21b685b18b201fb","date":1247245699,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(10);\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 5*1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertTrue(indexThreads[x].ex == null);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(10);\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertTrue(indexThreads[x].ex == null);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(10);\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 5*1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertTrue(indexThreads[x].ex == null);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(10);\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertTrue(indexThreads[x].ex == null);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(10);\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertTrue(indexThreads[x].ex == null);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(10);\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertTrue(indexThreads[x].ex == null);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(10);\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertTrue(indexThreads[x].ex == null);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5ff9e61d5748484a6d8e00a9cb7689cb4841922","date":1266772579,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(10);\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(10);\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertTrue(indexThreads[x].ex == null);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(10);\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(10);\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(10);\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90cb6b3f4e5652555b614adc90204287fbebd27c":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["d5ff9e61d5748484a6d8e00a9cb7689cb4841922"],"d5ff9e61d5748484a6d8e00a9cb7689cb4841922":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90cb6b3f4e5652555b614adc90204287fbebd27c":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["d5ff9e61d5748484a6d8e00a9cb7689cb4841922"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"d5ff9e61d5748484a6d8e00a9cb7689cb4841922":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}