{"path":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","commits":[{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleBalanceLeaders(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  void execute() throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP);\n\n    String collectionName = req.getParams().get(COLLECTION_PROP);\n    if (StringUtils.isBlank(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The \" + COLLECTION_PROP + \" is required for the REASSIGNLEADERS command.\"));\n    }\n    coreContainer.getZkController().getZkStateReader().updateClusterState(true);\n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    DocCollection dc = clusterState.getCollection(collectionName);\n    if (dc == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection '\" + collectionName + \"' does not exist, no action taken.\");\n    }\n    Map<String, String> currentRequests = new HashMap<>();\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n    NamedList<Object> results = new NamedList<>();\n\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      insurePreferredIsLeader(results, slice, currentRequests);\n      if (currentRequests.size() == max) {\n        CollectionsHandler.log.info(\"Queued \" + max + \" leader reassignments, waiting for some to complete.\");\n        keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, false, results);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, true, results);\n    }\n    if (keepGoing == true) {\n      CollectionsHandler.log.info(\"All leader reassignments completed.\");\n    } else {\n      CollectionsHandler.log.warn(\"Exceeded specified timeout of .\" + maxWaitSecs + \"' all leaders may not have been reassigned\");\n    }\n\n    rsp.getValues().addAll(results);\n  }\n\n","sourceOld":"  private void handleBalanceLeaders(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP);\n\n    String collectionName = req.getParams().get(COLLECTION_PROP);\n    if (StringUtils.isBlank(collectionName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The \" + COLLECTION_PROP + \" is required for the REASSIGNLEADERS command.\"));\n    }\n    coreContainer.getZkController().getZkStateReader().updateClusterState(true);\n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    DocCollection dc = clusterState.getCollection(collectionName);\n    if (dc == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection '\" + collectionName + \"' does not exist, no action taken.\");\n    }\n    Map<String, String> currentRequests = new HashMap<>();\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n    NamedList<Object> results = new NamedList<>();\n\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      insurePreferredIsLeader(req, results, slice, currentRequests);\n      if (currentRequests.size() == max) {\n        log.info(\"Queued \" + max + \" leader reassignments, waiting for some to complete.\");\n        keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, false, results);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, true, results);\n    }\n    if (keepGoing == true) {\n      log.info(\"All leader reassignments completed.\");\n    } else {\n      log.warn(\"Exceeded specified timeout of .\" + maxWaitSecs + \"' all leaders may not have been reassigned\");\n    }\n\n    rsp.getValues().addAll(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","sourceNew":"  void execute() throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP);\n\n    String collectionName = req.getParams().get(COLLECTION_PROP);\n    if (StringUtils.isBlank(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The \" + COLLECTION_PROP + \" is required for the REASSIGNLEADERS command.\"));\n    }\n    coreContainer.getZkController().getZkStateReader().updateClusterState();\n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    DocCollection dc = clusterState.getCollection(collectionName);\n    if (dc == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection '\" + collectionName + \"' does not exist, no action taken.\");\n    }\n    Map<String, String> currentRequests = new HashMap<>();\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n    NamedList<Object> results = new NamedList<>();\n\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      insurePreferredIsLeader(results, slice, currentRequests);\n      if (currentRequests.size() == max) {\n        CollectionsHandler.log.info(\"Queued \" + max + \" leader reassignments, waiting for some to complete.\");\n        keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, false, results);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, true, results);\n    }\n    if (keepGoing == true) {\n      CollectionsHandler.log.info(\"All leader reassignments completed.\");\n    } else {\n      CollectionsHandler.log.warn(\"Exceeded specified timeout of .\" + maxWaitSecs + \"' all leaders may not have been reassigned\");\n    }\n\n    rsp.getValues().addAll(results);\n  }\n\n","sourceOld":"  void execute() throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP);\n\n    String collectionName = req.getParams().get(COLLECTION_PROP);\n    if (StringUtils.isBlank(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The \" + COLLECTION_PROP + \" is required for the REASSIGNLEADERS command.\"));\n    }\n    coreContainer.getZkController().getZkStateReader().updateClusterState(true);\n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    DocCollection dc = clusterState.getCollection(collectionName);\n    if (dc == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection '\" + collectionName + \"' does not exist, no action taken.\");\n    }\n    Map<String, String> currentRequests = new HashMap<>();\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n    NamedList<Object> results = new NamedList<>();\n\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      insurePreferredIsLeader(results, slice, currentRequests);\n      if (currentRequests.size() == max) {\n        CollectionsHandler.log.info(\"Queued \" + max + \" leader reassignments, waiting for some to complete.\");\n        keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, false, results);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, true, results);\n    }\n    if (keepGoing == true) {\n      CollectionsHandler.log.info(\"All leader reassignments completed.\");\n    } else {\n      CollectionsHandler.log.warn(\"Exceeded specified timeout of .\" + maxWaitSecs + \"' all leaders may not have been reassigned\");\n    }\n\n    rsp.getValues().addAll(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064","date":1441124018,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","sourceNew":"  void execute() throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP);\n\n    String collectionName = req.getParams().get(COLLECTION_PROP);\n    if (StringUtils.isBlank(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The \" + COLLECTION_PROP + \" is required for the Rebalance Leaders command.\"));\n    }\n    coreContainer.getZkController().getZkStateReader().updateClusterState();\n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    DocCollection dc = clusterState.getCollection(collectionName);\n    if (dc == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection '\" + collectionName + \"' does not exist, no action taken.\");\n    }\n    Map<String, String> currentRequests = new HashMap<>();\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n    NamedList<Object> results = new NamedList<>();\n\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      ensurePreferredIsLeader(results, slice, currentRequests);\n      if (currentRequests.size() == max) {\n        log.info(\"Queued \" + max + \" leader reassignments, waiting for some to complete.\");\n        keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, false, results);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, true, results);\n    }\n    if (keepGoing == true) {\n      log.info(\"All leader reassignments completed.\");\n    } else {\n      log.warn(\"Exceeded specified timeout of .\" + maxWaitSecs + \"' all leaders may not have been reassigned\");\n    }\n\n    rsp.getValues().addAll(results);\n  }\n\n","sourceOld":"  void execute() throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP);\n\n    String collectionName = req.getParams().get(COLLECTION_PROP);\n    if (StringUtils.isBlank(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The \" + COLLECTION_PROP + \" is required for the REASSIGNLEADERS command.\"));\n    }\n    coreContainer.getZkController().getZkStateReader().updateClusterState();\n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    DocCollection dc = clusterState.getCollection(collectionName);\n    if (dc == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection '\" + collectionName + \"' does not exist, no action taken.\");\n    }\n    Map<String, String> currentRequests = new HashMap<>();\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n    NamedList<Object> results = new NamedList<>();\n\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      insurePreferredIsLeader(results, slice, currentRequests);\n      if (currentRequests.size() == max) {\n        CollectionsHandler.log.info(\"Queued \" + max + \" leader reassignments, waiting for some to complete.\");\n        keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, false, results);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, true, results);\n    }\n    if (keepGoing == true) {\n      CollectionsHandler.log.info(\"All leader reassignments completed.\");\n    } else {\n      CollectionsHandler.log.warn(\"Exceeded specified timeout of .\" + maxWaitSecs + \"' all leaders may not have been reassigned\");\n    }\n\n    rsp.getValues().addAll(results);\n  }\n\n","bugFix":["5455c7b3fed6c1671990a44c19071cb0488c2c25","9ebd3a557326ef3eab85b73a8cff781f7d801248"],"bugIntro":["73fd358e8ec697393d56617f4d9cedaca74dca14"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","sourceNew":"  void execute() throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP);\n\n    String collectionName = req.getParams().get(COLLECTION_PROP);\n    if (StringUtils.isBlank(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The \" + COLLECTION_PROP + \" is required for the Rebalance Leaders command.\"));\n    }\n    coreContainer.getZkController().getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    DocCollection dc = clusterState.getCollection(collectionName);\n    if (dc == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection '\" + collectionName + \"' does not exist, no action taken.\");\n    }\n    Map<String, String> currentRequests = new HashMap<>();\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n    NamedList<Object> results = new NamedList<>();\n\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      ensurePreferredIsLeader(results, slice, currentRequests);\n      if (currentRequests.size() == max) {\n        log.info(\"Queued \" + max + \" leader reassignments, waiting for some to complete.\");\n        keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, false, results);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, true, results);\n    }\n    if (keepGoing == true) {\n      log.info(\"All leader reassignments completed.\");\n    } else {\n      log.warn(\"Exceeded specified timeout of .\" + maxWaitSecs + \"' all leaders may not have been reassigned\");\n    }\n\n    rsp.getValues().addAll(results);\n  }\n\n","sourceOld":"  void execute() throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP);\n\n    String collectionName = req.getParams().get(COLLECTION_PROP);\n    if (StringUtils.isBlank(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The \" + COLLECTION_PROP + \" is required for the Rebalance Leaders command.\"));\n    }\n    coreContainer.getZkController().getZkStateReader().updateClusterState();\n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    DocCollection dc = clusterState.getCollection(collectionName);\n    if (dc == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection '\" + collectionName + \"' does not exist, no action taken.\");\n    }\n    Map<String, String> currentRequests = new HashMap<>();\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n    NamedList<Object> results = new NamedList<>();\n\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      ensurePreferredIsLeader(results, slice, currentRequests);\n      if (currentRequests.size() == max) {\n        log.info(\"Queued \" + max + \" leader reassignments, waiting for some to complete.\");\n        keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, false, results);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, true, results);\n    }\n    if (keepGoing == true) {\n      log.info(\"All leader reassignments completed.\");\n    } else {\n      log.warn(\"Exceeded specified timeout of .\" + maxWaitSecs + \"' all leaders may not have been reassigned\");\n    }\n\n    rsp.getValues().addAll(results);\n  }\n\n","bugFix":null,"bugIntro":["73fd358e8ec697393d56617f4d9cedaca74dca14"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","sourceNew":"  void execute() throws KeeperException, InterruptedException {\n    DocCollection dc = checkParams();\n\n\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n\n\n    // If there are a maximum number of simultaneous requests specified, we have to pause when we have that many\n    // outstanding requests and wait for at least one to finish before going on the the next rebalance.\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      ensurePreferredIsLeader(slice);\n      if (asyncRequests.size() == max) {\n        log.info(\"Queued \" + max + \" leader reassignments, waiting for some to complete.\");\n        keepGoing = waitAsyncRequests(maxWaitSecs, false);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitAsyncRequests(maxWaitSecs, true);\n    }\n    if (keepGoing == true) {\n      log.info(\"All leader reassignments completed.\");\n    } else {\n      log.warn(\"Exceeded specified timeout of .\" + maxWaitSecs + \"' all leaders may not have been reassigned\");\n    }\n\n    checkLeaderStatus();\n    NamedList<Object> summary = new NamedList<>();\n    if (pendingOps.size() == 0) {\n      summary.add(\"Success\", \"All active replicas with the preferredLeader property set are leaders\");\n    } else {\n      summary.add(\"Failure\", \"Not all active replicas with preferredLeader property are leaders\");\n    }\n    rsp.getValues().add(SUMMARY, summary); // we want this first.\n\n    rsp.getValues().addAll(results);\n  }\n\n","sourceOld":"  void execute() throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP);\n\n    String collectionName = req.getParams().get(COLLECTION_PROP);\n    if (StringUtils.isBlank(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The \" + COLLECTION_PROP + \" is required for the Rebalance Leaders command.\"));\n    }\n    coreContainer.getZkController().getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    DocCollection dc = clusterState.getCollection(collectionName);\n    if (dc == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection '\" + collectionName + \"' does not exist, no action taken.\");\n    }\n    Map<String, String> currentRequests = new HashMap<>();\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n    NamedList<Object> results = new NamedList<>();\n\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      ensurePreferredIsLeader(results, slice, currentRequests);\n      if (currentRequests.size() == max) {\n        log.info(\"Queued \" + max + \" leader reassignments, waiting for some to complete.\");\n        keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, false, results);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, true, results);\n    }\n    if (keepGoing == true) {\n      log.info(\"All leader reassignments completed.\");\n    } else {\n      log.warn(\"Exceeded specified timeout of .\" + maxWaitSecs + \"' all leaders may not have been reassigned\");\n    }\n\n    rsp.getValues().addAll(results);\n  }\n\n","bugFix":["5455c7b3fed6c1671990a44c19071cb0488c2c25","9ebd3a557326ef3eab85b73a8cff781f7d801248","6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064","4e6b620c271c84c0f14919eec7b90083b292ee51","7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"bugIntro":["b5bc595f1199d40cd6ef2c886e48d10a41bf7e1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","sourceNew":"  void execute() throws KeeperException, InterruptedException {\n    DocCollection dc = checkParams();\n\n\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n\n\n    // If there are a maximum number of simultaneous requests specified, we have to pause when we have that many\n    // outstanding requests and wait for at least one to finish before going on the the next rebalance.\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      ensurePreferredIsLeader(slice);\n      if (asyncRequests.size() == max) {\n        log.info(\"Queued \" + max + \" leader reassignments, waiting for some to complete.\");\n        keepGoing = waitAsyncRequests(maxWaitSecs, false);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitAsyncRequests(maxWaitSecs, true);\n    }\n    if (keepGoing == true) {\n      log.info(\"All leader reassignments completed.\");\n    } else {\n      log.warn(\"Exceeded specified timeout of .\" + maxWaitSecs + \"' all leaders may not have been reassigned\");\n    }\n\n    checkLeaderStatus();\n    NamedList<Object> summary = new NamedList<>();\n    if (pendingOps.size() == 0) {\n      summary.add(\"Success\", \"All active replicas with the preferredLeader property set are leaders\");\n    } else {\n      summary.add(\"Failure\", \"Not all active replicas with preferredLeader property are leaders\");\n    }\n    rsp.getValues().add(SUMMARY, summary); // we want this first.\n\n    rsp.getValues().addAll(results);\n  }\n\n","sourceOld":"  void execute() throws KeeperException, InterruptedException {\n    req.getParams().required().check(COLLECTION_PROP);\n\n    String collectionName = req.getParams().get(COLLECTION_PROP);\n    if (StringUtils.isBlank(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The \" + COLLECTION_PROP + \" is required for the Rebalance Leaders command.\"));\n    }\n    coreContainer.getZkController().getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    DocCollection dc = clusterState.getCollection(collectionName);\n    if (dc == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection '\" + collectionName + \"' does not exist, no action taken.\");\n    }\n    Map<String, String> currentRequests = new HashMap<>();\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n    NamedList<Object> results = new NamedList<>();\n\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      ensurePreferredIsLeader(results, slice, currentRequests);\n      if (currentRequests.size() == max) {\n        log.info(\"Queued \" + max + \" leader reassignments, waiting for some to complete.\");\n        keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, false, results);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitForLeaderChange(currentRequests, maxWaitSecs, true, results);\n    }\n    if (keepGoing == true) {\n      log.info(\"All leader reassignments completed.\");\n    } else {\n      log.warn(\"Exceeded specified timeout of .\" + maxWaitSecs + \"' all leaders may not have been reassigned\");\n    }\n\n    rsp.getValues().addAll(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5bc595f1199d40cd6ef2c886e48d10a41bf7e1f","date":1548047599,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","sourceNew":"  void execute() throws KeeperException, InterruptedException {\n    DocCollection dc = checkParams();\n\n\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n\n\n    // If there are a maximum number of simultaneous requests specified, we have to pause when we have that many\n    // outstanding requests and wait for at least one to finish before going on the the next rebalance.\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      ensurePreferredIsLeader(slice);\n      if (asyncRequests.size() == max) {\n        log.info(\"Queued \" + max + \" leader reassignments, waiting for some to complete.\");\n        keepGoing = waitAsyncRequests(maxWaitSecs, false);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitAsyncRequests(maxWaitSecs, true);\n    }\n    if (keepGoing == true) {\n      log.info(\"All leader reassignments completed.\");\n    } else {\n      log.warn(\"Exceeded specified timeout of .\" + maxWaitSecs + \"' all leaders may not have been reassigned\");\n    }\n\n    checkLeaderStatus();\n    SimpleOrderedMap summary = new SimpleOrderedMap();\n    if (pendingOps.size() == 0) {\n      summary.add(\"Success\", \"All active replicas with the preferredLeader property set are leaders\");\n    } else {\n      summary.add(\"Failure\", \"Not all active replicas with preferredLeader property are leaders\");\n    }\n    rsp.getValues().add(SUMMARY, summary); // we want this first.\n\n    rsp.getValues().addAll(results);\n  }\n\n","sourceOld":"  void execute() throws KeeperException, InterruptedException {\n    DocCollection dc = checkParams();\n\n\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n\n\n    // If there are a maximum number of simultaneous requests specified, we have to pause when we have that many\n    // outstanding requests and wait for at least one to finish before going on the the next rebalance.\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      ensurePreferredIsLeader(slice);\n      if (asyncRequests.size() == max) {\n        log.info(\"Queued \" + max + \" leader reassignments, waiting for some to complete.\");\n        keepGoing = waitAsyncRequests(maxWaitSecs, false);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitAsyncRequests(maxWaitSecs, true);\n    }\n    if (keepGoing == true) {\n      log.info(\"All leader reassignments completed.\");\n    } else {\n      log.warn(\"Exceeded specified timeout of .\" + maxWaitSecs + \"' all leaders may not have been reassigned\");\n    }\n\n    checkLeaderStatus();\n    NamedList<Object> summary = new NamedList<>();\n    if (pendingOps.size() == 0) {\n      summary.add(\"Success\", \"All active replicas with the preferredLeader property set are leaders\");\n    } else {\n      summary.add(\"Failure\", \"Not all active replicas with preferredLeader property are leaders\");\n    }\n    rsp.getValues().add(SUMMARY, summary); // we want this first.\n\n    rsp.getValues().addAll(results);\n  }\n\n","bugFix":["73fd358e8ec697393d56617f4d9cedaca74dca14"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","sourceNew":"  void execute() throws KeeperException, InterruptedException {\n    DocCollection dc = checkParams();\n\n\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n\n\n    // If there are a maximum number of simultaneous requests specified, we have to pause when we have that many\n    // outstanding requests and wait for at least one to finish before going on the the next rebalance.\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      ensurePreferredIsLeader(slice);\n      if (asyncRequests.size() == max) {\n        log.info(\"Queued \" + max + \" leader reassignments, waiting for some to complete.\");\n        keepGoing = waitAsyncRequests(maxWaitSecs, false);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitAsyncRequests(maxWaitSecs, true);\n    }\n    if (keepGoing == true) {\n      log.info(\"All leader reassignments completed.\");\n    } else {\n      log.warn(\"Exceeded specified timeout of .\" + maxWaitSecs + \"' all leaders may not have been reassigned\");\n    }\n\n    checkLeaderStatus();\n    SimpleOrderedMap summary = new SimpleOrderedMap();\n    if (pendingOps.size() == 0) {\n      summary.add(\"Success\", \"All active replicas with the preferredLeader property set are leaders\");\n    } else {\n      summary.add(\"Failure\", \"Not all active replicas with preferredLeader property are leaders\");\n    }\n    rsp.getValues().add(SUMMARY, summary); // we want this first.\n\n    rsp.getValues().addAll(results);\n  }\n\n","sourceOld":"  void execute() throws KeeperException, InterruptedException {\n    DocCollection dc = checkParams();\n\n\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n\n\n    // If there are a maximum number of simultaneous requests specified, we have to pause when we have that many\n    // outstanding requests and wait for at least one to finish before going on the the next rebalance.\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      ensurePreferredIsLeader(slice);\n      if (asyncRequests.size() == max) {\n        log.info(\"Queued \" + max + \" leader reassignments, waiting for some to complete.\");\n        keepGoing = waitAsyncRequests(maxWaitSecs, false);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitAsyncRequests(maxWaitSecs, true);\n    }\n    if (keepGoing == true) {\n      log.info(\"All leader reassignments completed.\");\n    } else {\n      log.warn(\"Exceeded specified timeout of .\" + maxWaitSecs + \"' all leaders may not have been reassigned\");\n    }\n\n    checkLeaderStatus();\n    NamedList<Object> summary = new NamedList<>();\n    if (pendingOps.size() == 0) {\n      summary.add(\"Success\", \"All active replicas with the preferredLeader property set are leaders\");\n    } else {\n      summary.add(\"Failure\", \"Not all active replicas with preferredLeader property are leaders\");\n    }\n    rsp.getValues().add(SUMMARY, summary); // we want this first.\n\n    rsp.getValues().addAll(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","sourceNew":"  void execute() throws KeeperException, InterruptedException {\n    DocCollection dc = checkParams();\n\n\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n\n\n    // If there are a maximum number of simultaneous requests specified, we have to pause when we have that many\n    // outstanding requests and wait for at least one to finish before going on the the next rebalance.\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      ensurePreferredIsLeader(slice);\n      if (asyncRequests.size() == max) {\n        log.info(\"Queued {} leader reassignments, waiting for some to complete.\", max);\n        keepGoing = waitAsyncRequests(maxWaitSecs, false);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitAsyncRequests(maxWaitSecs, true);\n    }\n    if (keepGoing == true) {\n      log.info(\"All leader reassignments completed.\");\n    } else {\n      log.warn(\"Exceeded specified timeout of '{}' all leaders may not have been reassigned'\", maxWaitSecs);\n    }\n\n    checkLeaderStatus();\n    SimpleOrderedMap summary = new SimpleOrderedMap();\n    if (pendingOps.size() == 0) {\n      summary.add(\"Success\", \"All active replicas with the preferredLeader property set are leaders\");\n    } else {\n      summary.add(\"Failure\", \"Not all active replicas with preferredLeader property are leaders\");\n    }\n    rsp.getValues().add(SUMMARY, summary); // we want this first.\n\n    rsp.getValues().addAll(results);\n  }\n\n","sourceOld":"  void execute() throws KeeperException, InterruptedException {\n    DocCollection dc = checkParams();\n\n\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n\n\n    // If there are a maximum number of simultaneous requests specified, we have to pause when we have that many\n    // outstanding requests and wait for at least one to finish before going on the the next rebalance.\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      ensurePreferredIsLeader(slice);\n      if (asyncRequests.size() == max) {\n        log.info(\"Queued \" + max + \" leader reassignments, waiting for some to complete.\");\n        keepGoing = waitAsyncRequests(maxWaitSecs, false);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitAsyncRequests(maxWaitSecs, true);\n    }\n    if (keepGoing == true) {\n      log.info(\"All leader reassignments completed.\");\n    } else {\n      log.warn(\"Exceeded specified timeout of .\" + maxWaitSecs + \"' all leaders may not have been reassigned\");\n    }\n\n    checkLeaderStatus();\n    SimpleOrderedMap summary = new SimpleOrderedMap();\n    if (pendingOps.size() == 0) {\n      summary.add(\"Success\", \"All active replicas with the preferredLeader property set are leaders\");\n    } else {\n      summary.add(\"Failure\", \"Not all active replicas with preferredLeader property are leaders\");\n    }\n    rsp.getValues().add(SUMMARY, summary); // we want this first.\n\n    rsp.getValues().addAll(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#execute().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  void execute() throws KeeperException, InterruptedException {\n    DocCollection dc = checkParams();\n\n\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n\n\n    // If there are a maximum number of simultaneous requests specified, we have to pause when we have that many\n    // outstanding requests and wait for at least one to finish before going on the the next rebalance.\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      ensurePreferredIsLeader(slice);\n      if (asyncRequests.size() == max) {\n        log.info(\"Queued {} leader reassignments, waiting for some to complete.\", max);\n        keepGoing = waitAsyncRequests(maxWaitSecs, false);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitAsyncRequests(maxWaitSecs, true);\n    }\n    if (keepGoing == true) {\n      log.info(\"All leader reassignments completed.\");\n    } else {\n      log.warn(\"Exceeded specified timeout of '{}' all leaders may not have been reassigned'\", maxWaitSecs);\n    }\n\n    checkLeaderStatus();\n    SimpleOrderedMap summary = new SimpleOrderedMap();\n    if (pendingOps.size() == 0) {\n      summary.add(\"Success\", \"All active replicas with the preferredLeader property set are leaders\");\n    } else {\n      summary.add(\"Failure\", \"Not all active replicas with preferredLeader property are leaders\");\n    }\n    rsp.getValues().add(SUMMARY, summary); // we want this first.\n\n    rsp.getValues().addAll(results);\n  }\n\n","sourceOld":"  void execute() throws KeeperException, InterruptedException {\n    DocCollection dc = checkParams();\n\n\n    int max = req.getParams().getInt(MAX_AT_ONCE_PROP, Integer.MAX_VALUE);\n    if (max <= 0) max = Integer.MAX_VALUE;\n    int maxWaitSecs = req.getParams().getInt(MAX_WAIT_SECONDS_PROP, 60);\n\n\n    // If there are a maximum number of simultaneous requests specified, we have to pause when we have that many\n    // outstanding requests and wait for at least one to finish before going on the the next rebalance.\n    boolean keepGoing = true;\n    for (Slice slice : dc.getSlices()) {\n      ensurePreferredIsLeader(slice);\n      if (asyncRequests.size() == max) {\n        log.info(\"Queued {} leader reassignments, waiting for some to complete.\", max);\n        keepGoing = waitAsyncRequests(maxWaitSecs, false);\n        if (keepGoing == false) {\n          break; // If we've waited longer than specified, don't continue to wait!\n        }\n      }\n    }\n    if (keepGoing == true) {\n      keepGoing = waitAsyncRequests(maxWaitSecs, true);\n    }\n    if (keepGoing == true) {\n      log.info(\"All leader reassignments completed.\");\n    } else {\n      log.warn(\"Exceeded specified timeout of '{}' all leaders may not have been reassigned'\", maxWaitSecs);\n    }\n\n    checkLeaderStatus();\n    SimpleOrderedMap summary = new SimpleOrderedMap();\n    if (pendingOps.size() == 0) {\n      summary.add(\"Success\", \"All active replicas with the preferredLeader property set are leaders\");\n    } else {\n      summary.add(\"Failure\", \"Not all active replicas with preferredLeader property are leaders\");\n    }\n    rsp.getValues().add(SUMMARY, summary); // we want this first.\n\n    rsp.getValues().addAll(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","73fd358e8ec697393d56617f4d9cedaca74dca14"],"ba055e19afc289adcb5bedaf68513793a7254012":["575e66bd4b2349209027f6801184da7fc3cba13f"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["b5bc595f1199d40cd6ef2c886e48d10a41bf7e1f"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"b5bc595f1199d40cd6ef2c886e48d10a41bf7e1f":["73fd358e8ec697393d56617f4d9cedaca74dca14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","b5bc595f1199d40cd6ef2c886e48d10a41bf7e1f"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"575e66bd4b2349209027f6801184da7fc3cba13f":["ba055e19afc289adcb5bedaf68513793a7254012"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","b5bc595f1199d40cd6ef2c886e48d10a41bf7e1f"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"b5bc595f1199d40cd6ef2c886e48d10a41bf7e1f":["575e66bd4b2349209027f6801184da7fc3cba13f","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}