{"path":"lucene/backwards/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer();\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0 && \n            (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer();\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0 && \n            (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","sourceNew":null,"sourceOld":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer();\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0 && \n            (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}