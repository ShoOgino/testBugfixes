{"path":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testStaticOverloads().mjava","commits":[{"id":"dd6c9e9b1251473f465b0443b56046b2658402da","date":1332082750,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testStaticOverloads().mjava","pathOld":"/dev/null","sourceNew":"  public void testStaticOverloads() {\n    Random rnd = random;\n\n    {\n      byte[] array = new byte [rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n\n    {\n      boolean[] array = new boolean [rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n\n    {\n      char[] array = new char [rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n\n    {\n      short[] array = new short [rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n\n    {\n      int[] array = new int [rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n\n    {\n      float[] array = new float [rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n\n    {\n      long[] array = new long [rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n\n    {\n      double[] array = new double [rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10cd47aac3c4e8c583740a750335f8aab14555b3","date":1332522358,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testStaticOverloads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testStaticOverloads().mjava","sourceNew":"  public void testStaticOverloads() {\n    Random rnd = random;\n    {\n      byte[] array = new byte[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      boolean[] array = new boolean[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      char[] array = new char[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      short[] array = new short[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      int[] array = new int[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      float[] array = new float[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      long[] array = new long[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      double[] array = new double[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n  }\n\n","sourceOld":"  public void testStaticOverloads() {\n    Random rnd = random;\n\n    {\n      byte[] array = new byte [rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n\n    {\n      boolean[] array = new boolean [rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n\n    {\n      char[] array = new char [rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n\n    {\n      short[] array = new short [rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n\n    {\n      int[] array = new int [rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n\n    {\n      float[] array = new float [rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n\n    {\n      long[] array = new long [rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n\n    {\n      double[] array = new double [rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testStaticOverloads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testStaticOverloads().mjava","sourceNew":"  public void testStaticOverloads() {\n    Random rnd = random();\n    {\n      byte[] array = new byte[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      boolean[] array = new boolean[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      char[] array = new char[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      short[] array = new short[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      int[] array = new int[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      float[] array = new float[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      long[] array = new long[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      double[] array = new double[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n  }\n\n","sourceOld":"  public void testStaticOverloads() {\n    Random rnd = random;\n    {\n      byte[] array = new byte[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      boolean[] array = new boolean[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      char[] array = new char[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      short[] array = new short[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      int[] array = new int[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      float[] array = new float[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      long[] array = new long[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      double[] array = new double[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1263de2bb0042265cc21611cccdf11992274edcf","date":1393266507,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testStaticOverloads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testStaticOverloads().mjava","sourceNew":"  public void testStaticOverloads() {\n    Random rnd = random();\n    {\n      byte[] array = new byte[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      boolean[] array = new boolean[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      char[] array = new char[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      short[] array = new short[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      int[] array = new int[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      float[] array = new float[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      long[] array = new long[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      double[] array = new double[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    {\n      String s = RandomStrings.randomUnicodeOfCodepointLength(random(), random().nextInt(10));\n      assertEquals(sizeOf(s), sizeOf((Object) s));\n    }\n  }\n\n","sourceOld":"  public void testStaticOverloads() {\n    Random rnd = random();\n    {\n      byte[] array = new byte[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      boolean[] array = new boolean[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      char[] array = new char[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      short[] array = new short[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      int[] array = new int[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      float[] array = new float[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      long[] array = new long[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      double[] array = new double[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d69a38404c7c4cc457210f85de200556d49231d","date":1393285454,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testStaticOverloads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testStaticOverloads().mjava","sourceNew":"  public void testStaticOverloads() {\n    Random rnd = random();\n    {\n      byte[] array = new byte[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      boolean[] array = new boolean[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      char[] array = new char[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      short[] array = new short[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      int[] array = new int[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      float[] array = new float[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      long[] array = new long[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      double[] array = new double[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n  }\n\n","sourceOld":"  public void testStaticOverloads() {\n    Random rnd = random();\n    {\n      byte[] array = new byte[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      boolean[] array = new boolean[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      char[] array = new char[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      short[] array = new short[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      int[] array = new int[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      float[] array = new float[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      long[] array = new long[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    \n    {\n      double[] array = new double[rnd.nextInt(1024)];\n      assertEquals(sizeOf(array), sizeOf((Object) array));\n    }\n    {\n      String s = RandomStrings.randomUnicodeOfCodepointLength(random(), random().nextInt(10));\n      assertEquals(sizeOf(s), sizeOf((Object) s));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1263de2bb0042265cc21611cccdf11992274edcf":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd6c9e9b1251473f465b0443b56046b2658402da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d69a38404c7c4cc457210f85de200556d49231d":["1263de2bb0042265cc21611cccdf11992274edcf"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["dd6c9e9b1251473f465b0443b56046b2658402da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d69a38404c7c4cc457210f85de200556d49231d"]},"commit2Childs":{"1263de2bb0042265cc21611cccdf11992274edcf":["0d69a38404c7c4cc457210f85de200556d49231d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd6c9e9b1251473f465b0443b56046b2658402da"],"dd6c9e9b1251473f465b0443b56046b2658402da":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"0d69a38404c7c4cc457210f85de200556d49231d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["1263de2bb0042265cc21611cccdf11992274edcf"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}