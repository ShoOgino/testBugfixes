{"path":"src/test/org/apache/solr/client/solrj/SolrQueryTest#testSolrQueryMethods().mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/SolrQueryTest#testSolrQueryMethods().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/SolrQueryTest#testSolrQueryMethods().mjava","sourceNew":"  public void testSolrQueryMethods() {\n    SolrQuery q = new SolrQuery(\"dog\");\n    boolean b = false;\n    \n    q.setFacetLimit(10);\n    q.addFacetField(\"price\");\n    q.addFacetField(\"state\");\n    Assert.assertEquals(q.getFacetFields().length, 2);\n    q.addFacetQuery(\"instock:true\");\n    q.addFacetQuery(\"instock:false\");\n    q.addFacetQuery(\"a:b\");\n    Assert.assertEquals(q.getFacetQuery().length, 3);\n    \n    b = q.removeFacetField(\"price\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetField(\"price2\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetField(\"state\");\n    Assert.assertEquals(b, true);\n    Assert.assertEquals(null, q.getFacetFields());\n    \n    b = q.removeFacetQuery(\"instock:true\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetQuery(\"instock:false\");\n    b = q.removeFacetQuery(\"a:c\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetQuery(\"a:b\");\n    Assert.assertEquals(null, q.getFacetQuery());   \n    \n    q.addSortField(\"price\", SolrQuery.ORDER.asc);\n    q.addSortField(\"date\", SolrQuery.ORDER.desc);\n    q.addSortField(\"qty\", SolrQuery.ORDER.desc);\n    q.removeSortField(\"date\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(2, q.getSortFields().length);\n    q.removeSortField(\"price\", SolrQuery.ORDER.asc);\n    q.removeSortField(\"qty\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(null, q.getSortFields());\n    \n    q.addHighlightField(\"hl1\");\n    q.addHighlightField(\"hl2\");\n    q.setHighlightSnippets(2);\n    Assert.assertEquals(2, q.getHighlightFields().length);\n    Assert.assertEquals(100, q.getHighlightFragsize());\n    Assert.assertEquals(q.getHighlightSnippets(), 2);\n    q.removeHighlightField(\"hl1\");\n    q.removeHighlightField(\"hl3\");\n    Assert.assertEquals(1, q.getHighlightFields().length);\n    q.removeHighlightField(\"hl2\");\n    Assert.assertEquals(null, q.getHighlightFields());\n    \n    // check to see that the removes are properly clearing the cgi params\n    Assert.assertEquals(q.toString(), \"q=dog\");\n\n    //Add time allowed param\n    q.setTimeAllowed(1000);\n    Assert.assertEquals((Integer)1000, q.getTimeAllowed() );\n    //Adding a null should remove it\n    q.setTimeAllowed(null);\n    Assert.assertEquals(null, q.getTimeAllowed() ); \n    \n    System.out.println(q);\n  }\n\n","sourceOld":"  public void testSolrQueryMethods() {\n    SolrQuery q = new SolrQuery(\"dog\");\n    boolean b = false;\n    \n    q.setFacetLimit(10);\n    q.addFacetField(\"price\");\n    q.addFacetField(\"state\");\n    Assert.assertEquals(q.getFacetFields().length, 2);\n    q.addFacetQuery(\"instock:true\");\n    q.addFacetQuery(\"instock:false\");\n    q.addFacetQuery(\"a:b\");\n    Assert.assertEquals(q.getFacetQuery().length, 3);\n    \n    b = q.removeFacetField(\"price\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetField(\"price2\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetField(\"state\");\n    Assert.assertEquals(b, true);\n    Assert.assertEquals(null, q.getFacetFields());\n    \n    b = q.removeFacetQuery(\"instock:true\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetQuery(\"instock:false\");\n    b = q.removeFacetQuery(\"a:c\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetQuery(\"a:b\");\n    Assert.assertEquals(null, q.getFacetQuery());   \n    \n    q.addSortField(\"price\", SolrQuery.ORDER.asc);\n    q.addSortField(\"date\", SolrQuery.ORDER.desc);\n    q.addSortField(\"qty\", SolrQuery.ORDER.desc);\n    q.removeSortField(\"date\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(2, q.getSortFields().length);\n    q.removeSortField(\"price\", SolrQuery.ORDER.asc);\n    q.removeSortField(\"qty\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(null, q.getSortFields());\n    \n    q.addHighlightField(\"hl1\");\n    q.addHighlightField(\"hl2\");\n    q.setHighlightSnippets(2);\n    Assert.assertEquals(2, q.getHighlightFields().length);\n    Assert.assertEquals(100, q.getHighlightFragsize());\n    Assert.assertEquals(q.getHighlightSnippets(), 2);\n    q.removeHighlightField(\"hl1\");\n    q.removeHighlightField(\"hl3\");\n    Assert.assertEquals(1, q.getHighlightFields().length);\n    q.removeHighlightField(\"hl2\");\n    Assert.assertEquals(null, q.getHighlightFields());\n    \n    // check to see that the removes are properly clearing the cgi params\n    Assert.assertEquals(q.toString(), \"q=dog\");\n\n    //Add time allowed param\n    q.setTimeAllowed(1000);\n    Assert.assertEquals((Integer)1000, q.getTimeAllowed() );\n    //Adding a null should remove it\n    q.setTimeAllowed(null);\n    Assert.assertEquals(null, q.getTimeAllowed() ); \n    \n    System.out.println(q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSolrQueryMethods().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrQueryTest#testSolrQueryMethods().mjava","sourceNew":"  public void testSolrQueryMethods() {\n    SolrQuery q = new SolrQuery(\"dog\");\n    boolean b = false;\n    \n    q.setFacetLimit(10);\n    q.addFacetField(\"price\");\n    q.addFacetField(\"state\");\n    Assert.assertEquals(q.getFacetFields().length, 2);\n    q.addFacetQuery(\"instock:true\");\n    q.addFacetQuery(\"instock:false\");\n    q.addFacetQuery(\"a:b\");\n    Assert.assertEquals(q.getFacetQuery().length, 3);\n    \n    b = q.removeFacetField(\"price\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetField(\"price2\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetField(\"state\");\n    Assert.assertEquals(b, true);\n    Assert.assertEquals(null, q.getFacetFields());\n    \n    b = q.removeFacetQuery(\"instock:true\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetQuery(\"instock:false\");\n    b = q.removeFacetQuery(\"a:c\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetQuery(\"a:b\");\n    Assert.assertEquals(null, q.getFacetQuery());   \n    \n    q.addSortField(\"price\", SolrQuery.ORDER.asc);\n    q.addSortField(\"date\", SolrQuery.ORDER.desc);\n    q.addSortField(\"qty\", SolrQuery.ORDER.desc);\n    q.removeSortField(\"date\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(2, q.getSortFields().length);\n    q.removeSortField(\"price\", SolrQuery.ORDER.asc);\n    q.removeSortField(\"qty\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(null, q.getSortFields());\n    \n    q.addHighlightField(\"hl1\");\n    q.addHighlightField(\"hl2\");\n    q.setHighlightSnippets(2);\n    Assert.assertEquals(2, q.getHighlightFields().length);\n    Assert.assertEquals(100, q.getHighlightFragsize());\n    Assert.assertEquals(q.getHighlightSnippets(), 2);\n    q.removeHighlightField(\"hl1\");\n    q.removeHighlightField(\"hl3\");\n    Assert.assertEquals(1, q.getHighlightFields().length);\n    q.removeHighlightField(\"hl2\");\n    Assert.assertEquals(null, q.getHighlightFields());\n    \n    // check to see that the removes are properly clearing the cgi params\n    Assert.assertEquals(q.toString(), \"q=dog\");\n\n    //Add time allowed param\n    q.setTimeAllowed(1000);\n    Assert.assertEquals((Integer)1000, q.getTimeAllowed() );\n    //Adding a null should remove it\n    q.setTimeAllowed(null);\n    Assert.assertEquals(null, q.getTimeAllowed() ); \n    \n    System.out.println(q);\n  }\n\n","sourceOld":"  public void testSolrQueryMethods() {\n    SolrQuery q = new SolrQuery(\"dog\");\n    boolean b = false;\n    \n    q.setFacetLimit(10);\n    q.addFacetField(\"price\");\n    q.addFacetField(\"state\");\n    Assert.assertEquals(q.getFacetFields().length, 2);\n    q.addFacetQuery(\"instock:true\");\n    q.addFacetQuery(\"instock:false\");\n    q.addFacetQuery(\"a:b\");\n    Assert.assertEquals(q.getFacetQuery().length, 3);\n    \n    b = q.removeFacetField(\"price\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetField(\"price2\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetField(\"state\");\n    Assert.assertEquals(b, true);\n    Assert.assertEquals(null, q.getFacetFields());\n    \n    b = q.removeFacetQuery(\"instock:true\");\n    Assert.assertEquals(b, true);\n    b = q.removeFacetQuery(\"instock:false\");\n    b = q.removeFacetQuery(\"a:c\");\n    Assert.assertEquals(b, false);\n    b = q.removeFacetQuery(\"a:b\");\n    Assert.assertEquals(null, q.getFacetQuery());   \n    \n    q.addSortField(\"price\", SolrQuery.ORDER.asc);\n    q.addSortField(\"date\", SolrQuery.ORDER.desc);\n    q.addSortField(\"qty\", SolrQuery.ORDER.desc);\n    q.removeSortField(\"date\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(2, q.getSortFields().length);\n    q.removeSortField(\"price\", SolrQuery.ORDER.asc);\n    q.removeSortField(\"qty\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(null, q.getSortFields());\n    \n    q.addHighlightField(\"hl1\");\n    q.addHighlightField(\"hl2\");\n    q.setHighlightSnippets(2);\n    Assert.assertEquals(2, q.getHighlightFields().length);\n    Assert.assertEquals(100, q.getHighlightFragsize());\n    Assert.assertEquals(q.getHighlightSnippets(), 2);\n    q.removeHighlightField(\"hl1\");\n    q.removeHighlightField(\"hl3\");\n    Assert.assertEquals(1, q.getHighlightFields().length);\n    q.removeHighlightField(\"hl2\");\n    Assert.assertEquals(null, q.getHighlightFields());\n    \n    // check to see that the removes are properly clearing the cgi params\n    Assert.assertEquals(q.toString(), \"q=dog\");\n\n    //Add time allowed param\n    q.setTimeAllowed(1000);\n    Assert.assertEquals((Integer)1000, q.getTimeAllowed() );\n    //Adding a null should remove it\n    q.setTimeAllowed(null);\n    Assert.assertEquals(null, q.getTimeAllowed() ); \n    \n    System.out.println(q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}