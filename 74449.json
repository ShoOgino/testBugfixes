{"path":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","commits":[{"id":"b5c559c875836474bafae7243263d93b1b1965db","date":1289581659,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      ValuesEnum bytesEnum = bytesReader.getEnum();\n      assertNotNull(bytesEnum);\n      final ValuesAttribute attr = bytesEnum\n          .addAttribute(ValuesAttribute.class);\n      byte upto = 0;\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n        final BytesRef br = bytes.getBytes(i);\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          assertEquals(i, bytesEnum.advance(i));\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            bytes.getBytes(i);\n          }\n          assertEquals(\"expected empty bytes - \" + br.utf8ToString() + msg, 0,\n              br.length);\n        }\n      }\n      final BytesRef enumRef = attr.bytes();\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i);\n        if (bytesEnum.docID() != i)\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      ValuesEnum bytesEnum = bytesReader.getEnum();\n      assertNotNull(bytesEnum);\n      final ValuesAttribute attr = bytesEnum\n          .addAttribute(ValuesAttribute.class);\n      byte upto = 0;\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n        final BytesRef br = bytes.getBytes(i);\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          assertEquals(i, bytesEnum.advance(i));\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            bytes.getBytes(i);\n          }\n          assertEquals(\"expected empty bytes - \" + br.utf8ToString() + msg, 0,\n              br.length);\n        }\n      }\n      final BytesRef enumRef = attr.bytes();\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i);\n        if (bytesEnum.docID() != i)\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b28eea49e75cc98d5b2b3301999539352e3fdc","date":1290004199,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      ValuesEnum bytesEnum = bytesReader.getEnum();\n      assertNotNull(bytesEnum);\n      final ValuesAttribute attr = bytesEnum\n          .addAttribute(ValuesAttribute.class);\n      byte upto = 0;\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n        final BytesRef br = bytes.getBytes(i);\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          assertEquals(i, bytesEnum.advance(i));\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            bytes.getBytes(i);\n          }\n          assertEquals(\"expected empty bytes - \" + br.utf8ToString() + msg, 0,\n              br.length);\n        }\n      }\n      final BytesRef enumRef = attr.bytes();\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i);\n        if (bytesEnum.docID() != i)\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      ValuesEnum bytesEnum = bytesReader.getEnum();\n      assertNotNull(bytesEnum);\n      final ValuesAttribute attr = bytesEnum\n          .addAttribute(ValuesAttribute.class);\n      byte upto = 0;\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n        final BytesRef br = bytes.getBytes(i);\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          assertEquals(i, bytesEnum.advance(i));\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            bytes.getBytes(i);\n          }\n          assertEquals(\"expected empty bytes - \" + br.utf8ToString() + msg, 0,\n              br.length);\n        }\n      }\n      final BytesRef enumRef = attr.bytes();\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i);\n        if (bytesEnum.docID() != i)\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      MissingValues missing = bytes.getMissing();\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          if (missing.bytesValue != null) {\n            assertNotNull(\"expected none null - \" + msg, br);\n            if (br.length != 0) {\n              assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                  + msg, bytesSize, br.length);\n              for (int j = 0; j < br.length; j++) {\n                assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg,\n                    0, br.bytes[br.offset + j]);\n              }\n            }\n          } else {\n            assertNull(\"expected null - \" + msg + \" \" + br, br);\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNull(\"expected null - \" + msg + \" \" + br, br);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      ValuesEnum bytesEnum = bytesReader.getEnum();\n      assertNotNull(bytesEnum);\n      final ValuesAttribute attr = bytesEnum\n          .addAttribute(ValuesAttribute.class);\n      byte upto = 0;\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n        final BytesRef br = bytes.getBytes(i);\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          assertEquals(i, bytesEnum.advance(i));\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            bytes.getBytes(i);\n          }\n          assertEquals(\"expected empty bytes - \" + br.utf8ToString() + msg, 0,\n              br.length);\n        }\n      }\n      final BytesRef enumRef = attr.bytes();\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i);\n        if (bytesEnum.docID() != i)\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":["e9715fed7709e0c0b02163fee6ce9f2a48191eb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","date":1291128345,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      MissingValue missing = bytes.getMissing();\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          if (missing.bytesValue != null) {\n            assertNotNull(\"expected none null - \" + msg, br);\n            if (br.length != 0) {\n              assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                  + msg, bytesSize, br.length);\n              for (int j = 0; j < br.length; j++) {\n                assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg,\n                    0, br.bytes[br.offset + j]);\n              }\n            }\n          } else {\n            assertNull(\"expected null - \" + msg + \" \" + br, br);\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNull(\"expected null - \" + msg + \" \" + br, br);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      MissingValues missing = bytes.getMissing();\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          if (missing.bytesValue != null) {\n            assertNotNull(\"expected none null - \" + msg, br);\n            if (br.length != 0) {\n              assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                  + msg, bytesSize, br.length);\n              for (int j = 0; j < br.length; j++) {\n                assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg,\n                    0, br.bytes[br.offset + j]);\n              }\n            }\n          } else {\n            assertNull(\"expected null - \" + msg + \" \" + br, br);\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNull(\"expected null - \" + msg + \" \" + br, br);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      MissingValue missing = bytes.getMissing();\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          if (missing.bytesValue != null) {\n            assertNotNull(\"expected none null - \" + msg, br);\n            if (br.length != 0) {\n              assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                  + msg, bytesSize, br.length);\n              for (int j = 0; j < br.length; j++) {\n                assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg,\n                    0, br.bytes[br.offset + j]);\n              }\n            }\n          } else {\n            assertNull(\"expected null - \" + msg + \" \" + br, br);\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNull(\"expected null - \" + msg + \" \" + br, br);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(bytesEnum.getClass() + \" enumRef not initialized \" + msg, enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      MissingValue missing = bytes.getMissing();\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          if (missing.bytesValue != null) {\n            assertNotNull(\"expected none null - \" + msg, br);\n            if (br.length != 0) {\n              assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                  + msg, bytesSize, br.length);\n              for (int j = 0; j < br.length; j++) {\n                assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg,\n                    0, br.bytes[br.offset + j]);\n              }\n            }\n          } else {\n            assertNull(\"expected null - \" + msg + \" \" + br, br);\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNull(\"expected null - \" + msg + \" \" + br, br);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa2fc2eb37a1f19e90850f787d9e085950ebfa04","date":1291597075,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Type> byteVariantList = new ArrayList<Type>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Type byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      MissingValue missing = bytes.getMissing();\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          if (missing.bytesValue != null) {\n            assertNotNull(\"expected none null - \" + msg, br);\n            if (br.length != 0) {\n              assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                  + msg, bytesSize, br.length);\n              for (int j = 0; j < br.length; j++) {\n                assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg,\n                    0, br.bytes[br.offset + j]);\n              }\n            }\n          } else {\n            assertNull(\"expected null - \" + msg + \" \" + br, br);\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNull(\"expected null - \" + msg + \" \" + br, br);\n          // make sure we advance at least until base\n          DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n        }\n      }\n\n      DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(bytesEnum.getClass() + \" enumRef not initialized \" + msg, enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Values> byteVariantList = new ArrayList<Values>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Values byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      MissingValue missing = bytes.getMissing();\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          if (missing.bytesValue != null) {\n            assertNotNull(\"expected none null - \" + msg, br);\n            if (br.length != 0) {\n              assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                  + msg, bytesSize, br.length);\n              for (int j = 0; j < br.length; j++) {\n                assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg,\n                    0, br.bytes[br.offset + j]);\n              }\n            }\n          } else {\n            assertNull(\"expected null - \" + msg + \" \" + br, br);\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNull(\"expected null - \" + msg + \" \" + br, br);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(bytesEnum.getClass() + \" enumRef not initialized \" + msg, enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","date":1291778725,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Type> byteVariantList = new ArrayList<Type>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Type byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      MissingValue missing = bytes.getMissing();\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          if (missing.bytesValue != null) {\n            assertNotNull(\"expected none null - \" + msg, br);\n            if (br.length != 0) {\n              assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                  + msg, bytesSize, br.length);\n              for (int j = 0; j < br.length; j++) {\n                assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg,\n                    0, br.bytes[br.offset + j]);\n              }\n            }\n          } else {\n            assertNull(\"expected null - \" + msg + \" \" + br, br);\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNull(\"expected null - \" + msg + \" \" + br, br);\n          // make sure we advance at least until base\n          DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n        }\n      }\n\n      DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Type> byteVariantList = new ArrayList<Type>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Type byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      MissingValue missing = bytes.getMissing();\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          if (missing.bytesValue != null) {\n            assertNotNull(\"expected none null - \" + msg, br);\n            if (br.length != 0) {\n              assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                  + msg, bytesSize, br.length);\n              for (int j = 0; j < br.length; j++) {\n                assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg,\n                    0, br.bytes[br.offset + j]);\n              }\n            }\n          } else {\n            assertNull(\"expected null - \" + msg + \" \" + br, br);\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNull(\"expected null - \" + msg + \" \" + br, br);\n          // make sure we advance at least until base\n          DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n        }\n      }\n\n      DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(bytesEnum.getClass() + \" enumRef not initialized \" + msg, enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory2();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Type> byteVariantList = new ArrayList<Type>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Type byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      MissingValue missing = bytes.getMissing();\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          if (missing.bytesValue != null) {\n            assertNotNull(\"expected none null - \" + msg, br);\n            if (br.length != 0) {\n              assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                  + msg, bytesSize, br.length);\n              for (int j = 0; j < br.length; j++) {\n                assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg,\n                    0, br.bytes[br.offset + j]);\n              }\n            }\n          } else {\n            assertNull(\"expected null - \" + msg + \" \" + br, br);\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNull(\"expected null - \" + msg + \" \" + br, br);\n          // make sure we advance at least until base\n          DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n        }\n      }\n\n      DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Type> byteVariantList = new ArrayList<Type>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Type byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      MissingValue missing = bytes.getMissing();\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          if (missing.bytesValue != null) {\n            assertNotNull(\"expected none null - \" + msg, br);\n            if (br.length != 0) {\n              assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                  + msg, bytesSize, br.length);\n              for (int j = 0; j < br.length; j++) {\n                assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg,\n                    0, br.bytes[br.offset + j]);\n              }\n            }\n          } else {\n            assertNull(\"expected null - \" + msg + \" \" + br, br);\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNull(\"expected null - \" + msg + \" \" + br, br);\n          // make sure we advance at least until base\n          DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n        }\n      }\n\n      DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9235b9d4454a46c066cda47fed7ca0a34e614529","date":1304414372,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Type> byteVariantList = new ArrayList<Type>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Type byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      MissingValue missing = bytes.getMissing();\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          if (missing.bytesValue != null) {\n            assertNotNull(\"expected none null - \" + msg, br);\n            if (br.length != 0) {\n              assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                  + msg, bytesSize, br.length);\n              for (int j = 0; j < br.length; j++) {\n                assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg,\n                    0, br.bytes[br.offset + j]);\n              }\n            }\n          } else {\n            assertNull(\"expected null - \" + msg + \" \" + br, br);\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNull(\"expected null - \" + msg + \" \" + br, br);\n          // make sure we advance at least until base\n          DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n        }\n      }\n\n      DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory2();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Type> byteVariantList = new ArrayList<Type>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Type byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      MissingValue missing = bytes.getMissing();\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          if (missing.bytesValue != null) {\n            assertNotNull(\"expected none null - \" + msg, br);\n            if (br.length != 0) {\n              assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                  + msg, bytesSize, br.length);\n              for (int j = 0; j < br.length; j++) {\n                assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg,\n                    0, br.bytes[br.offset + j]);\n              }\n            }\n          } else {\n            assertNull(\"expected null - \" + msg + \" \" + br, br);\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNull(\"expected null - \" + msg + \" \" + br, br);\n          // make sure we advance at least until base\n          DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n        }\n      }\n\n      DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"39d51e9acac1e629cffe47855e85dc6dedc4754d","date":1305711497,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      MissingValue missing = bytes.getMissing();\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          if (missing.bytesValue != null) {\n            assertNotNull(\"expected none null - \" + msg, br);\n            if (br.length != 0) {\n              assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                  + msg, bytesSize, br.length);\n              for (int j = 0; j < br.length; j++) {\n                assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg,\n                    0, br.bytes[br.offset + j]);\n              }\n            }\n          } else {\n            assertNull(\"expected null - \" + msg + \" \" + br, br);\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNull(\"expected null - \" + msg + \" \" + br, br);\n          // make sure we advance at least until base\n          DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n        }\n      }\n\n      DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Type> byteVariantList = new ArrayList<Type>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (Type byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      MissingValue missing = bytes.getMissing();\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          if (missing.bytesValue != null) {\n            assertNotNull(\"expected none null - \" + msg, br);\n            if (br.length != 0) {\n              assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                  + msg, bytesSize, br.length);\n              for (int j = 0; j < br.length; j++) {\n                assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg,\n                    0, br.bytes[br.offset + j]);\n              }\n            }\n          } else {\n            assertNull(\"expected null - \" + msg + \" \" + br, br);\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNull(\"expected null - \" + msg + \" \" + br, br);\n          // make sure we advance at least until base\n          DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n        }\n      }\n\n      DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4034ca0f8f74fdf56e25be73822f2441fc1c1b46","date":1307111599,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          try {\n          \n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n          }catch(Throwable e) {\n            final int advancedTo = bytesEnum.advance(0);\n            assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n                + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n          }\n        }\n      }\n\n      DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      MissingValue missing = bytes.getMissing();\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          if (missing.bytesValue != null) {\n            assertNotNull(\"expected none null - \" + msg, br);\n            if (br.length != 0) {\n              assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                  + msg, bytesSize, br.length);\n              for (int j = 0; j < br.length; j++) {\n                assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg,\n                    0, br.bytes[br.offset + j]);\n              }\n            }\n          } else {\n            assertNull(\"expected null - \" + msg + \" \" + br, br);\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNull(\"expected null - \" + msg + \" \" + br, br);\n          // make sure we advance at least until base\n          DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n        }\n      }\n\n      DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":["e9715fed7709e0c0b02163fee6ce9f2a48191eb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"41e5bbad683f7546e96f08ffe8bc50cf447f2586","date":1307113213,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          try {\n          \n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n          }catch(Throwable e) {\n            final int advancedTo = bytesEnum.advance(0);\n            assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n                + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n          }\n        }\n      }\n\n      DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          try {\n          \n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n          }catch(Throwable e) {\n            final int advancedTo = bytesEnum.advance(0);\n            assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n                + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n          }\n        }\n      }\n\n      DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"605b061fadf71aa6458c0005eaae83a98350c403","date":1307117658,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          try {\n          \n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n          }catch(Throwable e) {\n            final int advancedTo = bytesEnum.advance(0);\n            assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n                + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n          }\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          try {\n          \n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n          }catch(Throwable e) {\n            final int advancedTo = bytesEnum.advance(0);\n            assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n                + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n          }\n        }\n      }\n\n      DocValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9715fed7709e0c0b02163fee6ce9f2a48191eb1","date":1307183419,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          try {\n          \n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n          }catch(Throwable e) {\n            final int advancedTo = bytesEnum.advance(0);\n            assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n                + \" advancedTo: \" + advancedTo, base <= advancedTo);\n\n          }\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46","2d84736c4614acce6720851cbd2c823d7cd516e4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a154343e160a5590f17dfdfad7e4c384fc22836","date":1308000861,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 1 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 1 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 7 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 1 + atLeast(10);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 1 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 1 + atLeast(10);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 1 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b7a068f550e13e49517c6899cc3b94c8eeb72e5","date":1309354772,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      final int bytesSize = 1 + atLeast(50);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg + br.utf8ToString(), bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        assertTrue(msg, br.length > 0);\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 1 + atLeast(10);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      final int bytesSize = 1 + atLeast(50);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg + br.utf8ToString(), bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        assertTrue(msg, br.length > 0);\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 1 + atLeast(10);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      final int bytesSize = 1 + atLeast(50);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg + br.utf8ToString(), bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        assertTrue(msg, br.length > 0);\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 179 + random.nextInt(151);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n\n      int bytesSize = 1 + random.nextInt(128);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg, bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      final int bytesSize = 1 + atLeast(50);\n      FixedBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg + br.utf8ToString(), bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        assertTrue(msg, br.length > 0);\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      final int bytesSize = 1 + atLeast(50);\n      OpenBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = (int) (numValues - deleted.cardinality());\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg + br.utf8ToString(), bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        assertTrue(msg, br.length > 0);\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      final int bytesSize = 1 + atLeast(50);\n      FixedBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg + br.utf8ToString(), bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(byteIndexValue + \"\", 0, br.length);\n          // make sure we advance at least until base\n        }\n      }\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        assertTrue(msg, br.length > 0);\n        for (int j = 0; j < br.length; j++, upto++) {\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      final int bytesSize = 1 + atLeast(50);\n      FixedBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg + br.utf8ToString(), bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(0, br.length);\n          // make sure we advance at least until base\n          ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n          final int advancedTo = bytesEnum.advance(0);\n          assertTrue(byteIndexValue.name() + \" advanced failed base:\" + base\n              + \" advancedTo: \" + advancedTo, base <= advancedTo);\n        }\n      }\n\n      ValuesEnum bytesEnum = getValuesEnum(bytesReader);\n      final BytesRef enumRef = bytesEnum.bytes();\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        if (bytesEnum.docID() != i) {\n          assertEquals(\"seek failed for index \" + i + \" \" + msg, i, bytesEnum\n              .advance(i));\n        }\n        assertTrue(msg, br.length > 0);\n        for (int j = 0; j < br.length; j++, upto++) {\n          assertTrue(\" enumRef not initialized \" + msg,\n              enumRef.bytes.length > 0);\n          assertEquals(\n              \"EnumRef Byte at index \" + j + \" doesn't match - \" + msg, upto,\n              enumRef.bytes[enumRef.offset + j]);\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Type> byteVariantList = new ArrayList<Type>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (Type byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      final int bytesSize = 1 + atLeast(50);\n      FixedBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg + br.utf8ToString(), bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(byteIndexValue + \"\", 0, br.length);\n          // make sure we advance at least until base\n        }\n      }\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        assertTrue(msg, br.length > 0);\n        for (int j = 0; j < br.length; j++, upto++) {\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      final int bytesSize = 1 + atLeast(50);\n      FixedBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg + br.utf8ToString(), bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(byteIndexValue + \"\", 0, br.length);\n          // make sure we advance at least until base\n        }\n      }\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        assertTrue(msg, br.length > 0);\n        for (int j = 0; j < br.length; j++, upto++) {\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Type> byteVariantList = new ArrayList<Type>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (Type byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      final int bytesSize = 1 + atLeast(50);\n      FixedBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg + br.utf8ToString(), bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(byteIndexValue + \"\", 0, br.length);\n          // make sure we advance at least until base\n        }\n      }\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        assertTrue(msg, br.length > 0);\n        for (int j = 0; j < br.length; j++, upto++) {\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<ValueType> byteVariantList = new ArrayList<ValueType>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (ValueType byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      final int bytesSize = 1 + atLeast(50);\n      FixedBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      IndexDocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg + br.utf8ToString(), bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(byteIndexValue + \"\", 0, br.length);\n          // make sure we advance at least until base\n        }\n      }\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        assertTrue(msg, br.length > 0);\n        for (int j = 0; j < br.length; j++, upto++) {\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#runTestIndexBytes(IndexWriterConfig,boolean).mjava","sourceNew":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Type> byteVariantList = new ArrayList<Type>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (Type byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      final int bytesSize = 1 + atLeast(50);\n      FixedBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg + br.utf8ToString(), bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(byteIndexValue + \"\", 0, br.length);\n          // make sure we advance at least until base\n        }\n      }\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        assertTrue(msg, br.length > 0);\n        for (int j = 0; j < br.length; j++, upto++) {\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void runTestIndexBytes(IndexWriterConfig cfg, boolean withDeletions)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    final Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, cfg);\n    final List<Type> byteVariantList = new ArrayList<Type>(BYTES);\n    // run in random order to test if fill works correctly during merges\n    Collections.shuffle(byteVariantList, random);\n    final int numValues = 50 + atLeast(10);\n    for (Type byteIndexValue : byteVariantList) {\n      List<Closeable> closeables = new ArrayList<Closeable>();\n      final int bytesSize = 1 + atLeast(50);\n      FixedBitSet deleted = indexValues(w, numValues, byteIndexValue,\n          byteVariantList, withDeletions, bytesSize);\n      final IndexReader r = IndexReader.open(w, withDeletions);\n      assertEquals(0, r.numDeletedDocs());\n      final int numRemainingValues = numValues - deleted.cardinality();\n      final int base = r.numDocs() - numRemainingValues;\n      DocValues bytesReader = getDocValues(r, byteIndexValue.name());\n      assertNotNull(\"field \" + byteIndexValue.name()\n          + \" returned null reader - maybe merged failed\", bytesReader);\n      Source bytes = getSource(bytesReader);\n      byte upto = 0;\n\n      // test the filled up slots for correctness\n      for (int i = 0; i < base; i++) {\n\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs();\n        switch (byteIndexValue) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n          // fixed straight returns bytesref with zero bytes all of fixed\n          // length\n          assertNotNull(\"expected none null - \" + msg, br);\n          if (br.length != 0) {\n            assertEquals(\"expected zero bytes of length \" + bytesSize + \" - \"\n                + msg + br.utf8ToString(), bytesSize, br.length);\n            for (int j = 0; j < br.length; j++) {\n              assertEquals(\"Byte at index \" + j + \" doesn't match - \" + msg, 0,\n                  br.bytes[br.offset + j]);\n            }\n          }\n          break;\n        default:\n          assertNotNull(\"expected none null - \" + msg, br);\n          assertEquals(byteIndexValue + \"\", 0, br.length);\n          // make sure we advance at least until base\n        }\n      }\n\n      // test the actual doc values added in this iteration\n      assertEquals(base + numRemainingValues, r.numDocs());\n      int v = 0;\n      for (int i = base; i < r.numDocs(); i++) {\n        String msg = \" field: \" + byteIndexValue.name() + \" at index: \" + i\n            + \" base: \" + base + \" numDocs:\" + r.numDocs() + \" bytesSize: \"\n            + bytesSize + \" src: \" + bytes;\n        while (withDeletions && deleted.get(v++)) {\n          upto += bytesSize;\n        }\n        BytesRef br = bytes.getBytes(i, new BytesRef());\n        assertTrue(msg, br.length > 0);\n        for (int j = 0; j < br.length; j++, upto++) {\n          if (!(br.bytes.length > br.offset + j))\n            br = bytes.getBytes(i, new BytesRef());\n          assertTrue(\"BytesRef index exceeded [\" + msg + \"] offset: \"\n              + br.offset + \" length: \" + br.length + \" index: \"\n              + (br.offset + j), br.bytes.length > br.offset + j);\n          assertEquals(\"SourceRef Byte at index \" + j + \" doesn't match - \"\n              + msg, upto, br.bytes[br.offset + j]);\n        }\n      }\n\n      // clean up\n      closeables.add(r);\n      for (Closeable toClose : closeables) {\n        toClose.close();\n      }\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"e9715fed7709e0c0b02163fee6ce9f2a48191eb1":["605b061fadf71aa6458c0005eaae83a98350c403"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["e128967bca58657bc0039d4bfe631e63e81f1977","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e9715fed7709e0c0b02163fee6ce9f2a48191eb1"],"39d51e9acac1e629cffe47855e85dc6dedc4754d":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a154343e160a5590f17dfdfad7e4c384fc22836":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2553b00f699380c64959ccb27991289aae87be2e":["9ed208afa1e7aa98899ddb1dedfddedddf898253","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["3bb13258feba31ab676502787ab2e1779f129b7a"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["8a154343e160a5590f17dfdfad7e4c384fc22836","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","8a154343e160a5590f17dfdfad7e4c384fc22836"],"23b28eea49e75cc98d5b2b3301999539352e3fdc":["b5c559c875836474bafae7243263d93b1b1965db"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"b5c559c875836474bafae7243263d93b1b1965db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["23b28eea49e75cc98d5b2b3301999539352e3fdc"],"605b061fadf71aa6458c0005eaae83a98350c403":["41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["8a154343e160a5590f17dfdfad7e4c384fc22836"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["39d51e9acac1e629cffe47855e85dc6dedc4754d"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["e128967bca58657bc0039d4bfe631e63e81f1977"],"e128967bca58657bc0039d4bfe631e63e81f1977":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"3bb13258feba31ab676502787ab2e1779f129b7a":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["3bb13258feba31ab676502787ab2e1779f129b7a"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"e9715fed7709e0c0b02163fee6ce9f2a48191eb1":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["e128967bca58657bc0039d4bfe631e63e81f1977"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["39d51e9acac1e629cffe47855e85dc6dedc4754d"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["8a154343e160a5590f17dfdfad7e4c384fc22836","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"39d51e9acac1e629cffe47855e85dc6dedc4754d":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e8d7ba2175f47e280231533f7d3016249cea88b","29ef99d61cda9641b6250bf9567329a6e65f901d","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","b5c559c875836474bafae7243263d93b1b1965db","3bb13258feba31ab676502787ab2e1779f129b7a"],"8a154343e160a5590f17dfdfad7e4c384fc22836":["d083e83f225b11e5fdd900e83d26ddb385b6955c","9ed208afa1e7aa98899ddb1dedfddedddf898253","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["605b061fadf71aa6458c0005eaae83a98350c403"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["9ed208afa1e7aa98899ddb1dedfddedddf898253"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["2553b00f699380c64959ccb27991289aae87be2e"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"23b28eea49e75cc98d5b2b3301999539352e3fdc":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"b5c559c875836474bafae7243263d93b1b1965db":["23b28eea49e75cc98d5b2b3301999539352e3fdc"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4"],"605b061fadf71aa6458c0005eaae83a98350c403":["e9715fed7709e0c0b02163fee6ce9f2a48191eb1"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["3b7a068f550e13e49517c6899cc3b94c8eeb72e5","2553b00f699380c64959ccb27991289aae87be2e"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"e128967bca58657bc0039d4bfe631e63e81f1977":["d638301ad1cfcae567b681b893bc8781f0ee48a5","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"3bb13258feba31ab676502787ab2e1779f129b7a":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}