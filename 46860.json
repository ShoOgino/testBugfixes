{"path":"solr/core/src/test/org/apache/solr/search/TestTrieFacet#beforeClass().mjava","commits":[{"id":"7249bf663236743660155abfc0941aebf4245391","date":1433953380,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestTrieFacet#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    initCore(\"solrconfig-tlog.xml\",\"schema.xml\");\n\n    // don't break the test\n    assertTrue(\"min value must be less then max value\", MIN_VALUE < MAX_VALUE);\n    assertTrue(\"min value must be greater then zero\", 0 < MIN_VALUE);\n    \n    // sanity check no one breaks the schema out from under us...\n    for (String f : M_VALUED) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertTrue(\"who changed the schema? test isn't valid: \" + f, sf.multiValued());\n    }\n    \n    for (String f : S_VALUED) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertFalse(\"who changed the schema? test isn't valid: \" + f, sf.multiValued());\n    }\n    \n    for (String f : P0) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertEquals(\"who changed the schema? test isn't valid: \" + f,\n                   0, assertCastFieldType(sf).getPrecisionStep());\n    }\n    for (String f : P8) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertEquals(\"who changed the schema? test isn't valid: \" + f,\n                   8, assertCastFieldType(sf).getPrecisionStep());\n    }\n\n    // we don't need a lot of docs -- at least one failure only had ~1000  \n    NUM_DOCS = TestUtil.nextInt(random(), 200, 1500);\n\n    { // ensure at least one doc has every valid value in the multivalued fields\n      SolrInputDocument doc = sdoc(\"id\", \"0\");\n      for (int val = MIN_VALUE; val <= MAX_VALUE; val++) {\n        for (String f : M_VALUED) {\n          doc.addField(f, val);\n        }\n      }\n      assertU(adoc(doc));\n    }\n\n    // randomized docs (note: starting at i=1)\n    for (int i=1; i < NUM_DOCS; i++) {\n      SolrInputDocument doc = sdoc(\"id\", i+\"\");\n      if (useField()) {\n        int val = TestUtil.nextInt(random(), MIN_VALUE, MAX_VALUE);\n        for (String f : S_VALUED) {\n          doc.addField(f, val);\n        }\n      }\n      if (useField()) {\n        int numMulti = atLeast(1);\n        while (0 < numMulti--) {\n          int val = TestUtil.nextInt(random(), MIN_VALUE, MAX_VALUE);\n          for (String f: M_VALUED) {\n            doc.addField(f, val);\n          }\n        }\n      }\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"351efe6fdecf9af62134d37ec2582e4a0331a4dc","date":1498149096,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestTrieFacet#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestTrieFacet#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we need DVs on point fields to compute stats & facets\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n\n    initCore(\"solrconfig-tlog.xml\",\"schema.xml\");\n\n    // don't break the test\n    assertTrue(\"min value must be less then max value\", MIN_VALUE < MAX_VALUE);\n    assertTrue(\"min value must be greater then zero\", 0 < MIN_VALUE);\n    \n    // sanity check no one breaks the schema out from under us...\n    for (String f : M_VALUED) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertTrue(\"who changed the schema? test isn't valid: \" + f, sf.multiValued());\n    }\n    \n    for (String f : S_VALUED) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertFalse(\"who changed the schema? test isn't valid: \" + f, sf.multiValued());\n    }\n\n    if (! Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) {\n      for (String f : P0) {\n        SchemaField sf = h.getCore().getLatestSchema().getField(f);\n        assertEquals(\"who changed the schema? test isn't valid: \" + f,\n                     0, assertCastFieldType(sf).getPrecisionStep());\n      }\n      for (String f : P8) {\n        SchemaField sf = h.getCore().getLatestSchema().getField(f);\n        assertEquals(\"who changed the schema? test isn't valid: \" + f,\n                     8, assertCastFieldType(sf).getPrecisionStep());\n      }\n    }\n    \n    // we don't need a lot of docs -- at least one failure only had ~1000  \n    NUM_DOCS = TestUtil.nextInt(random(), 200, 1500);\n\n    { // ensure at least one doc has every valid value in the multivalued fields\n      SolrInputDocument doc = sdoc(\"id\", \"0\");\n      for (int val = MIN_VALUE; val <= MAX_VALUE; val++) {\n        for (String f : M_VALUED) {\n          doc.addField(f, val);\n        }\n      }\n      assertU(adoc(doc));\n    }\n\n    // randomized docs (note: starting at i=1)\n    for (int i=1; i < NUM_DOCS; i++) {\n      SolrInputDocument doc = sdoc(\"id\", i+\"\");\n      if (useField()) {\n        int val = TestUtil.nextInt(random(), MIN_VALUE, MAX_VALUE);\n        for (String f : S_VALUED) {\n          doc.addField(f, val);\n        }\n      }\n      if (useField()) {\n        int numMulti = atLeast(1);\n        while (0 < numMulti--) {\n          int val = TestUtil.nextInt(random(), MIN_VALUE, MAX_VALUE);\n          for (String f: M_VALUED) {\n            doc.addField(f, val);\n          }\n        }\n      }\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    initCore(\"solrconfig-tlog.xml\",\"schema.xml\");\n\n    // don't break the test\n    assertTrue(\"min value must be less then max value\", MIN_VALUE < MAX_VALUE);\n    assertTrue(\"min value must be greater then zero\", 0 < MIN_VALUE);\n    \n    // sanity check no one breaks the schema out from under us...\n    for (String f : M_VALUED) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertTrue(\"who changed the schema? test isn't valid: \" + f, sf.multiValued());\n    }\n    \n    for (String f : S_VALUED) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertFalse(\"who changed the schema? test isn't valid: \" + f, sf.multiValued());\n    }\n    \n    for (String f : P0) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertEquals(\"who changed the schema? test isn't valid: \" + f,\n                   0, assertCastFieldType(sf).getPrecisionStep());\n    }\n    for (String f : P8) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertEquals(\"who changed the schema? test isn't valid: \" + f,\n                   8, assertCastFieldType(sf).getPrecisionStep());\n    }\n\n    // we don't need a lot of docs -- at least one failure only had ~1000  \n    NUM_DOCS = TestUtil.nextInt(random(), 200, 1500);\n\n    { // ensure at least one doc has every valid value in the multivalued fields\n      SolrInputDocument doc = sdoc(\"id\", \"0\");\n      for (int val = MIN_VALUE; val <= MAX_VALUE; val++) {\n        for (String f : M_VALUED) {\n          doc.addField(f, val);\n        }\n      }\n      assertU(adoc(doc));\n    }\n\n    // randomized docs (note: starting at i=1)\n    for (int i=1; i < NUM_DOCS; i++) {\n      SolrInputDocument doc = sdoc(\"id\", i+\"\");\n      if (useField()) {\n        int val = TestUtil.nextInt(random(), MIN_VALUE, MAX_VALUE);\n        for (String f : S_VALUED) {\n          doc.addField(f, val);\n        }\n      }\n      if (useField()) {\n        int numMulti = atLeast(1);\n        while (0 < numMulti--) {\n          int val = TestUtil.nextInt(random(), MIN_VALUE, MAX_VALUE);\n          for (String f: M_VALUED) {\n            doc.addField(f, val);\n          }\n        }\n      }\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestTrieFacet#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestTrieFacet#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we need DVs on point fields to compute stats & facets\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n\n    initCore(\"solrconfig-tlog.xml\",\"schema.xml\");\n\n    // don't break the test\n    assertTrue(\"min value must be less then max value\", MIN_VALUE < MAX_VALUE);\n    assertTrue(\"min value must be greater then zero\", 0 < MIN_VALUE);\n    \n    // sanity check no one breaks the schema out from under us...\n    for (String f : M_VALUED) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertTrue(\"who changed the schema? test isn't valid: \" + f, sf.multiValued());\n    }\n    \n    for (String f : S_VALUED) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertFalse(\"who changed the schema? test isn't valid: \" + f, sf.multiValued());\n    }\n\n    if (! Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) {\n      for (String f : P0) {\n        SchemaField sf = h.getCore().getLatestSchema().getField(f);\n        assertEquals(\"who changed the schema? test isn't valid: \" + f,\n                     0, assertCastFieldType(sf).getPrecisionStep());\n      }\n      for (String f : P8) {\n        SchemaField sf = h.getCore().getLatestSchema().getField(f);\n        assertEquals(\"who changed the schema? test isn't valid: \" + f,\n                     8, assertCastFieldType(sf).getPrecisionStep());\n      }\n    }\n    \n    // we don't need a lot of docs -- at least one failure only had ~1000  \n    NUM_DOCS = TestUtil.nextInt(random(), 200, 1500);\n\n    { // ensure at least one doc has every valid value in the multivalued fields\n      SolrInputDocument doc = sdoc(\"id\", \"0\");\n      for (int val = MIN_VALUE; val <= MAX_VALUE; val++) {\n        for (String f : M_VALUED) {\n          doc.addField(f, val);\n        }\n      }\n      assertU(adoc(doc));\n    }\n\n    // randomized docs (note: starting at i=1)\n    for (int i=1; i < NUM_DOCS; i++) {\n      SolrInputDocument doc = sdoc(\"id\", i+\"\");\n      if (useField()) {\n        int val = TestUtil.nextInt(random(), MIN_VALUE, MAX_VALUE);\n        for (String f : S_VALUED) {\n          doc.addField(f, val);\n        }\n      }\n      if (useField()) {\n        int numMulti = atLeast(1);\n        while (0 < numMulti--) {\n          int val = TestUtil.nextInt(random(), MIN_VALUE, MAX_VALUE);\n          for (String f: M_VALUED) {\n            doc.addField(f, val);\n          }\n        }\n      }\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    initCore(\"solrconfig-tlog.xml\",\"schema.xml\");\n\n    // don't break the test\n    assertTrue(\"min value must be less then max value\", MIN_VALUE < MAX_VALUE);\n    assertTrue(\"min value must be greater then zero\", 0 < MIN_VALUE);\n    \n    // sanity check no one breaks the schema out from under us...\n    for (String f : M_VALUED) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertTrue(\"who changed the schema? test isn't valid: \" + f, sf.multiValued());\n    }\n    \n    for (String f : S_VALUED) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertFalse(\"who changed the schema? test isn't valid: \" + f, sf.multiValued());\n    }\n    \n    for (String f : P0) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertEquals(\"who changed the schema? test isn't valid: \" + f,\n                   0, assertCastFieldType(sf).getPrecisionStep());\n    }\n    for (String f : P8) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertEquals(\"who changed the schema? test isn't valid: \" + f,\n                   8, assertCastFieldType(sf).getPrecisionStep());\n    }\n\n    // we don't need a lot of docs -- at least one failure only had ~1000  \n    NUM_DOCS = TestUtil.nextInt(random(), 200, 1500);\n\n    { // ensure at least one doc has every valid value in the multivalued fields\n      SolrInputDocument doc = sdoc(\"id\", \"0\");\n      for (int val = MIN_VALUE; val <= MAX_VALUE; val++) {\n        for (String f : M_VALUED) {\n          doc.addField(f, val);\n        }\n      }\n      assertU(adoc(doc));\n    }\n\n    // randomized docs (note: starting at i=1)\n    for (int i=1; i < NUM_DOCS; i++) {\n      SolrInputDocument doc = sdoc(\"id\", i+\"\");\n      if (useField()) {\n        int val = TestUtil.nextInt(random(), MIN_VALUE, MAX_VALUE);\n        for (String f : S_VALUED) {\n          doc.addField(f, val);\n        }\n      }\n      if (useField()) {\n        int numMulti = atLeast(1);\n        while (0 < numMulti--) {\n          int val = TestUtil.nextInt(random(), MIN_VALUE, MAX_VALUE);\n          for (String f: M_VALUED) {\n            doc.addField(f, val);\n          }\n        }\n      }\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestTrieFacet#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestTrieFacet#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we need DVs on point fields to compute stats & facets\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n\n    initCore(\"solrconfig-tlog.xml\",\"schema.xml\");\n\n    // don't break the test\n    assertTrue(\"min value must be less then max value\", MIN_VALUE < MAX_VALUE);\n    assertTrue(\"min value must be greater then zero\", 0 < MIN_VALUE);\n    \n    // sanity check no one breaks the schema out from under us...\n    for (String f : M_VALUED) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertTrue(\"who changed the schema? test isn't valid: \" + f, sf.multiValued());\n    }\n    \n    for (String f : S_VALUED) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertFalse(\"who changed the schema? test isn't valid: \" + f, sf.multiValued());\n    }\n\n    if (! Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) {\n      for (String f : P0) {\n        SchemaField sf = h.getCore().getLatestSchema().getField(f);\n        assertEquals(\"who changed the schema? test isn't valid: \" + f,\n                     0, assertCastFieldType(sf).getPrecisionStep());\n      }\n      for (String f : P8) {\n        SchemaField sf = h.getCore().getLatestSchema().getField(f);\n        assertEquals(\"who changed the schema? test isn't valid: \" + f,\n                     8, assertCastFieldType(sf).getPrecisionStep());\n      }\n    }\n    \n    // we don't need a lot of docs -- at least one failure only had ~1000  \n    NUM_DOCS = TestUtil.nextInt(random(), 200, 1500);\n\n    { // ensure at least one doc has every valid value in the multivalued fields\n      SolrInputDocument doc = sdoc(\"id\", \"0\");\n      for (int val = MIN_VALUE; val <= MAX_VALUE; val++) {\n        for (String f : M_VALUED) {\n          doc.addField(f, val);\n        }\n      }\n      assertU(adoc(doc));\n    }\n\n    // randomized docs (note: starting at i=1)\n    for (int i=1; i < NUM_DOCS; i++) {\n      SolrInputDocument doc = sdoc(\"id\", i+\"\");\n      if (useField()) {\n        int val = TestUtil.nextInt(random(), MIN_VALUE, MAX_VALUE);\n        for (String f : S_VALUED) {\n          doc.addField(f, val);\n        }\n      }\n      if (useField()) {\n        int numMulti = atLeast(1);\n        while (0 < numMulti--) {\n          int val = TestUtil.nextInt(random(), MIN_VALUE, MAX_VALUE);\n          for (String f: M_VALUED) {\n            doc.addField(f, val);\n          }\n        }\n      }\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    initCore(\"solrconfig-tlog.xml\",\"schema.xml\");\n\n    // don't break the test\n    assertTrue(\"min value must be less then max value\", MIN_VALUE < MAX_VALUE);\n    assertTrue(\"min value must be greater then zero\", 0 < MIN_VALUE);\n    \n    // sanity check no one breaks the schema out from under us...\n    for (String f : M_VALUED) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertTrue(\"who changed the schema? test isn't valid: \" + f, sf.multiValued());\n    }\n    \n    for (String f : S_VALUED) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertFalse(\"who changed the schema? test isn't valid: \" + f, sf.multiValued());\n    }\n    \n    for (String f : P0) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertEquals(\"who changed the schema? test isn't valid: \" + f,\n                   0, assertCastFieldType(sf).getPrecisionStep());\n    }\n    for (String f : P8) {\n      SchemaField sf = h.getCore().getLatestSchema().getField(f);\n      assertEquals(\"who changed the schema? test isn't valid: \" + f,\n                   8, assertCastFieldType(sf).getPrecisionStep());\n    }\n\n    // we don't need a lot of docs -- at least one failure only had ~1000  \n    NUM_DOCS = TestUtil.nextInt(random(), 200, 1500);\n\n    { // ensure at least one doc has every valid value in the multivalued fields\n      SolrInputDocument doc = sdoc(\"id\", \"0\");\n      for (int val = MIN_VALUE; val <= MAX_VALUE; val++) {\n        for (String f : M_VALUED) {\n          doc.addField(f, val);\n        }\n      }\n      assertU(adoc(doc));\n    }\n\n    // randomized docs (note: starting at i=1)\n    for (int i=1; i < NUM_DOCS; i++) {\n      SolrInputDocument doc = sdoc(\"id\", i+\"\");\n      if (useField()) {\n        int val = TestUtil.nextInt(random(), MIN_VALUE, MAX_VALUE);\n        for (String f : S_VALUED) {\n          doc.addField(f, val);\n        }\n      }\n      if (useField()) {\n        int numMulti = atLeast(1);\n        while (0 < numMulti--) {\n          int val = TestUtil.nextInt(random(), MIN_VALUE, MAX_VALUE);\n          for (String f: M_VALUED) {\n            doc.addField(f, val);\n          }\n        }\n      }\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["7249bf663236743660155abfc0941aebf4245391"],"7249bf663236743660155abfc0941aebf4245391":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["7249bf663236743660155abfc0941aebf4245391","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"28288370235ed02234a64753cdbf0c6ec096304a":["7249bf663236743660155abfc0941aebf4245391","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"7249bf663236743660155abfc0941aebf4245391":["351efe6fdecf9af62134d37ec2582e4a0331a4dc","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7249bf663236743660155abfc0941aebf4245391"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}