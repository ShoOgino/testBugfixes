{"path":"solr/core/src/test/org/apache/hadoop/fs/RawLocalFileSystem#createSymlink(Path,Path,boolean).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/RawLocalFileSystem#createSymlink(Path,Path,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  @Override\n  public void createSymlink(Path target, Path link, boolean createParent)\n      throws IOException {\n    if (!FileSystem.areSymlinksEnabled()) {\n      throw new UnsupportedOperationException(\"Symlinks not supported\");\n    }\n    final String targetScheme = target.toUri().getScheme();\n    if (targetScheme != null && !\"file\".equals(targetScheme)) {\n      throw new IOException(\"Unable to create symlink to non-local file \"+\n          \"system: \"+target.toString());\n    }\n    if (createParent) {\n      mkdirs(link.getParent());\n    }\n\n    // NB: Use createSymbolicLink in java.nio.file.Path once available\n    int result = FileUtil.symLink(target.toString(),\n        makeAbsolute(link).toString());\n    if (result != 0) {\n      throw new IOException(\"Error \" + result + \" creating symlink \" +\n          link + \" to \" + target);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/RawLocalFileSystem#createSymlink(Path,Path,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  @Override\n  public void createSymlink(Path target, Path link, boolean createParent)\n      throws IOException {\n    if (!FileSystem.areSymlinksEnabled()) {\n      throw new UnsupportedOperationException(\"Symlinks not supported\");\n    }\n    final String targetScheme = target.toUri().getScheme();\n    if (targetScheme != null && !\"file\".equals(targetScheme)) {\n      throw new IOException(\"Unable to create symlink to non-local file \"+\n          \"system: \"+target.toString());\n    }\n    if (createParent) {\n      mkdirs(link.getParent());\n    }\n\n    // NB: Use createSymbolicLink in java.nio.file.Path once available\n    int result = FileUtil.symLink(target.toString(),\n        makeAbsolute(link).toString());\n    if (result != 0) {\n      throw new IOException(\"Error \" + result + \" creating symlink \" +\n          link + \" to \" + target);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdf107cf16be0f22504ae184fed81596665a244"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}