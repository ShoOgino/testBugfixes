{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","sourceNew":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","sourceOld":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","sourceNew":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","sourceOld":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","sourceNew":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","sourceOld":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","sourceNew":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","sourceOld":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","bugFix":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","sourceNew":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","sourceOld":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f237ee05f4e8e1fae6614bce022e0dc66c5ed39e","date":1277411648,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","sourceNew":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          e.printStackTrace(System.out);\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","sourceOld":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","sourceNew":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          e.printStackTrace(System.out);\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","sourceOld":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","sourceNew":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          e.printStackTrace(System.out);\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","sourceOld":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          e.printStackTrace(System.out);\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","sourceNew":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        MockRAMDirectory dir = new MockRAMDirectory();\n        dir.setPreventDoubleWrite(false);\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          e.printStackTrace(System.out);\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","sourceOld":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          e.printStackTrace(System.out);\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","sourceNew":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        MockRAMDirectory dir = newDirectory(random);\n        dir.setPreventDoubleWrite(false);\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          e.printStackTrace(System.out);\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        MockRAMDirectory dir = new MockRAMDirectory();\n        dir.setPreventDoubleWrite(false);\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          e.printStackTrace(System.out);\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","sourceNew":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        MockDirectoryWrapper dir = newDirectory(random);\n        dir.setPreventDoubleWrite(false);\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          e.printStackTrace(System.out);\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        MockRAMDirectory dir = newDirectory(random);\n        dir.setPreventDoubleWrite(false);\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          e.printStackTrace(System.out);\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","sourceNew":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        MockDirectoryWrapper dir = newDirectory();\n        dir.setPreventDoubleWrite(false);\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          e.printStackTrace(System.out);\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        MockDirectoryWrapper dir = newDirectory(random);\n        dir.setPreventDoubleWrite(false);\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          e.printStackTrace(System.out);\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","sourceNew":null,"sourceOld":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        MockDirectoryWrapper dir = newDirectory();\n        dir.setPreventDoubleWrite(false);\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          e.printStackTrace(System.out);\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","sourceNew":null,"sourceOld":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        MockDirectoryWrapper dir = newDirectory();\n        dir.setPreventDoubleWrite(false);\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          e.printStackTrace(System.out);\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCrashedWriter().mjava","sourceNew":null,"sourceOld":"    // Simulate a writer that crashed while writing segments\n    // file: make sure we can still open the index (ie,\n    // gracefully fallback to the previous segments file),\n    // and that we can add to the index:\n    public void testSimulatedCrashedWriter() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n        // Make the next segments file, with last byte\n        // missing, to simulate a writer that crashed while\n        // writing segments file:\n        String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n        String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                   \"\",\n                                                                   1+gen);\n        IndexInput in = dir.openInput(fileNameIn);\n        IndexOutput out = dir.createOutput(fileNameOut);\n        long length = in.length();\n        for(int i=0;i<length-1;i++) {\n          out.writeByte(in.readByte());\n        }\n        in.close();\n        out.close();\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n        } catch (Exception e) {\n          fail(\"reader failed to open on a crashed index\");\n        }\n        reader.close();\n\n        try {\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        } catch (Exception e) {\n          e.printStackTrace(System.out);\n          fail(\"writer failed to open on a crashed index\");\n        }\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"85a883878c0af761245ab048babc63d099f835f3":["1f653cfcf159baeaafe5d01682a911e95bba4012","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"d572389229127c297dd1fa5ce4758e1cec41e799":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","f237ee05f4e8e1fae6614bce022e0dc66c5ed39e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["f237ee05f4e8e1fae6614bce022e0dc66c5ed39e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"f237ee05f4e8e1fae6614bce022e0dc66c5ed39e":["d572389229127c297dd1fa5ce4758e1cec41e799"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"85a883878c0af761245ab048babc63d099f835f3":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["5f4e87790277826a2aea119328600dfb07761f32","f237ee05f4e8e1fae6614bce022e0dc66c5ed39e"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["85a883878c0af761245ab048babc63d099f835f3","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"f237ee05f4e8e1fae6614bce022e0dc66c5ed39e":["5f4e87790277826a2aea119328600dfb07761f32","b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}