{"path":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","commits":[{"id":"eeefd99c477417e5c7c574228461ebafe92469d4","date":1166460329,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","pathOld":"/dev/null","sourceNew":"  public IndexOutput createOutput(String name) {\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d9d40c43a41eb2ee87c78ef5d4db212c8ec7c29c","67006a60923e2124212d3baa0d29b444bcbd8373","c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6a9c72bd2eb83901c17f22729e7a4d3d2b18c4b9","date":1172996731,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":"  public IndexOutput createOutput(String name) {\n    if (openFiles == null) {\n      openFiles = new HashMap();\n    }\n    synchronized(openFiles) {\n      if (noDeleteOpenFile && openFiles.containsKey(name)) {\n        // RuntimeException instead of IOException because\n        // super() does not throw IOException currently:\n        throw new RuntimeException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n      }\n    }\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file);\n  }\n\n","sourceOld":"  public IndexOutput createOutput(String name) {\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file);\n  }\n\n","bugFix":null,"bugIntro":["67006a60923e2124212d3baa0d29b444bcbd8373","c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67006a60923e2124212d3baa0d29b444bcbd8373","date":1191425052,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":"  public IndexOutput createOutput(String name) throws IOException {\n    if (openFiles == null) {\n      openFiles = new HashMap();\n    }\n    synchronized(openFiles) {\n      if (noDeleteOpenFile && openFiles.containsKey(name))\n       throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    }\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file);\n  }\n\n","sourceOld":"  public IndexOutput createOutput(String name) {\n    if (openFiles == null) {\n      openFiles = new HashMap();\n    }\n    synchronized(openFiles) {\n      if (noDeleteOpenFile && openFiles.containsKey(name)) {\n        // RuntimeException instead of IOException because\n        // super() does not throw IOException currently:\n        throw new RuntimeException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n      }\n    }\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file);\n  }\n\n","bugFix":["eeefd99c477417e5c7c574228461ebafe92469d4","6a9c72bd2eb83901c17f22729e7a4d3d2b18c4b9"],"bugIntro":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9d40c43a41eb2ee87c78ef5d4db212c8ec7c29c","date":1196806748,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":"  public IndexOutput createOutput(String name) throws IOException {\n    if (openFiles == null) {\n      openFiles = new HashMap();\n    }\n    synchronized(openFiles) {\n      if (noDeleteOpenFile && openFiles.containsKey(name))\n       throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    }\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          sizeInBytes -= existing.sizeInBytes;\n          existing.directory = null;\n        }\n\n        fileMap.put(name, file);\n      }\n    }\n\n    return new MockRAMOutputStream(this, file);\n  }\n\n","sourceOld":"  public IndexOutput createOutput(String name) throws IOException {\n    if (openFiles == null) {\n      openFiles = new HashMap();\n    }\n    synchronized(openFiles) {\n      if (noDeleteOpenFile && openFiles.containsKey(name))\n       throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    }\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file);\n  }\n\n","bugFix":["eeefd99c477417e5c7c574228461ebafe92469d4"],"bugIntro":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":"  public IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(openFiles) {\n      if (preventDoubleWrite && createdFiles.contains(name))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n      if (noDeleteOpenFile && openFiles.containsKey(name))\n       throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    }\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      if (crashed)\n        throw new IOException(\"cannot createOutput after crash\");\n      unSyncedFiles.add(name);\n      createdFiles.add(name);\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          sizeInBytes -= existing.sizeInBytes;\n          existing.directory = null;\n        }\n\n        fileMap.put(name, file);\n      }\n    }\n\n    return new MockRAMOutputStream(this, file);\n  }\n\n","sourceOld":"  public IndexOutput createOutput(String name) throws IOException {\n    if (openFiles == null) {\n      openFiles = new HashMap();\n    }\n    synchronized(openFiles) {\n      if (noDeleteOpenFile && openFiles.containsKey(name))\n       throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    }\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          sizeInBytes -= existing.sizeInBytes;\n          existing.directory = null;\n        }\n\n        fileMap.put(name, file);\n      }\n    }\n\n    return new MockRAMOutputStream(this, file);\n  }\n\n","bugFix":null,"bugIntro":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"455aeff4fef915340c5b19d71d5e147034e83093","date":1210099270,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":"  public IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(openFiles) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n      if (noDeleteOpenFile && openFiles.containsKey(name))\n       throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    }\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      if (crashed)\n        throw new IOException(\"cannot createOutput after crash\");\n      unSyncedFiles.add(name);\n      createdFiles.add(name);\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          sizeInBytes -= existing.sizeInBytes;\n          existing.directory = null;\n        }\n\n        fileMap.put(name, file);\n      }\n    }\n\n    return new MockRAMOutputStream(this, file);\n  }\n\n","sourceOld":"  public IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(openFiles) {\n      if (preventDoubleWrite && createdFiles.contains(name))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n      if (noDeleteOpenFile && openFiles.containsKey(name))\n       throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    }\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      if (crashed)\n        throw new IOException(\"cannot createOutput after crash\");\n      unSyncedFiles.add(name);\n      createdFiles.add(name);\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          sizeInBytes -= existing.sizeInBytes;\n          existing.directory = null;\n        }\n\n        fileMap.put(name, file);\n      }\n    }\n\n    return new MockRAMOutputStream(this, file);\n  }\n\n","bugFix":null,"bugIntro":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":"  public IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(openFiles) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n      if (noDeleteOpenFile && openFiles.containsKey(name))\n        throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    }\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      if (crashed)\n        throw new IOException(\"cannot createOutput after crash\");\n      unSyncedFiles.add(name);\n      createdFiles.add(name);\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          sizeInBytes -= existing.sizeInBytes;\n          existing.directory = null;\n        }\n\n        fileMap.put(name, file);\n      }\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","sourceOld":"  public IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(openFiles) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n      if (noDeleteOpenFile && openFiles.containsKey(name))\n       throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    }\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      if (crashed)\n        throw new IOException(\"cannot createOutput after crash\");\n      unSyncedFiles.add(name);\n      createdFiles.add(name);\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          sizeInBytes -= existing.sizeInBytes;\n          existing.directory = null;\n        }\n\n        fileMap.put(name, file);\n      }\n    }\n\n    return new MockRAMOutputStream(this, file);\n  }\n\n","bugFix":null,"bugIntro":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c65000dee855f8d7329bd4f6310cb44af4d63bd3","date":1242673652,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":"  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = (RAMFile)fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","sourceOld":"  public IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(openFiles) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n      if (noDeleteOpenFile && openFiles.containsKey(name))\n        throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    }\n    RAMFile file = new RAMFile(this);\n    synchronized (this) {\n      if (crashed)\n        throw new IOException(\"cannot createOutput after crash\");\n      unSyncedFiles.add(name);\n      createdFiles.add(name);\n      RAMFile existing = (RAMFile)fileMap.get(name);\n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          sizeInBytes -= existing.sizeInBytes;\n          existing.directory = null;\n        }\n\n        fileMap.put(name, file);\n      }\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","bugFix":["d9d40c43a41eb2ee87c78ef5d4db212c8ec7c29c","eeefd99c477417e5c7c574228461ebafe92469d4","6a9c72bd2eb83901c17f22729e7a4d3d2b18c4b9","67006a60923e2124212d3baa0d29b444bcbd8373","c4ff8864209d2e972cb4393600c26082f9a6533d","455aeff4fef915340c5b19d71d5e147034e83093","e82780afe6097066eb5befb86e9432f077667e3d"],"bugIntro":["15633975e2cb95a0c6eee9a600583708438ebd76"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15633975e2cb95a0c6eee9a600583708438ebd76","date":1243022273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":"  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = (RAMFile)fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","sourceOld":"  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = (RAMFile)fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","bugFix":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":"  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","sourceOld":"  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = (RAMFile)fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","sourceOld":"  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bedba8c41772c90fab237170d639e910d36f7755","date":1259780364,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes.getAndAdd(-existing.sizeInBytes);\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes -= existing.sizeInBytes;\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes.getAndAdd(-existing.sizeInBytes);\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes.getAndAdd(-existing.sizeInBytes);\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"455aeff4fef915340c5b19d71d5e147034e83093":["e82780afe6097066eb5befb86e9432f077667e3d"],"67006a60923e2124212d3baa0d29b444bcbd8373":["6a9c72bd2eb83901c17f22729e7a4d3d2b18c4b9"],"c65000dee855f8d7329bd4f6310cb44af4d63bd3":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["455aeff4fef915340c5b19d71d5e147034e83093"],"bedba8c41772c90fab237170d639e910d36f7755":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["ef82ff03e4016c705811b2658e81471a645c0e49"],"15633975e2cb95a0c6eee9a600583708438ebd76":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"d9d40c43a41eb2ee87c78ef5d4db212c8ec7c29c":["67006a60923e2124212d3baa0d29b444bcbd8373"],"6a9c72bd2eb83901c17f22729e7a4d3d2b18c4b9":["eeefd99c477417e5c7c574228461ebafe92469d4"],"eeefd99c477417e5c7c574228461ebafe92469d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef82ff03e4016c705811b2658e81471a645c0e49":["15633975e2cb95a0c6eee9a600583708438ebd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["d9d40c43a41eb2ee87c78ef5d4db212c8ec7c29c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["bedba8c41772c90fab237170d639e910d36f7755"]},"commit2Childs":{"455aeff4fef915340c5b19d71d5e147034e83093":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"67006a60923e2124212d3baa0d29b444bcbd8373":["d9d40c43a41eb2ee87c78ef5d4db212c8ec7c29c"],"c65000dee855f8d7329bd4f6310cb44af4d63bd3":["15633975e2cb95a0c6eee9a600583708438ebd76"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"bedba8c41772c90fab237170d639e910d36f7755":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["bedba8c41772c90fab237170d639e910d36f7755"],"15633975e2cb95a0c6eee9a600583708438ebd76":["ef82ff03e4016c705811b2658e81471a645c0e49"],"6a9c72bd2eb83901c17f22729e7a4d3d2b18c4b9":["67006a60923e2124212d3baa0d29b444bcbd8373"],"d9d40c43a41eb2ee87c78ef5d4db212c8ec7c29c":["e82780afe6097066eb5befb86e9432f077667e3d"],"eeefd99c477417e5c7c574228461ebafe92469d4":["6a9c72bd2eb83901c17f22729e7a4d3d2b18c4b9"],"ef82ff03e4016c705811b2658e81471a645c0e49":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeefd99c477417e5c7c574228461ebafe92469d4"],"e82780afe6097066eb5befb86e9432f077667e3d":["455aeff4fef915340c5b19d71d5e147034e83093"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}