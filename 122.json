{"path":"client/java/solrj/src/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#DocField(AccessibleObject).mjava","commits":[{"id":"ed6e0b4985bdfd7791bee5b0f15f9760568bc01f","date":1212680426,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#DocField(AccessibleObject).mjava","pathOld":"/dev/null","sourceNew":"    public DocField(AccessibleObject member) {\n      if (member instanceof java.lang.reflect.Field) {\n        field = (java.lang.reflect.Field) member;\n      } else {\n        setter = (Method) member;\n      }\n      Field annotation = member.getAnnotation(Field.class);\n      storeName(annotation);\n      storeType();\n      \n      // Look for a matching getter\n      if( setter != null ) {\n        String gname = setter.getName();\n        if( gname.startsWith(\"set\") ) {\n          gname = \"get\" + gname.substring(3);\n          try {\n            getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n          }\n          catch( Exception ex ) {\n            // no getter -- don't worry about it...\n            if( type == Boolean.class ) {\n              gname = \"is\" + setter.getName().substring( 3 );\n              try {\n                getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n              }\n              catch( Exception ex2 ) {\n                // no getter -- don't worry about it...\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#DocField(AccessibleObject).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#DocField(AccessibleObject).mjava","sourceNew":"    public DocField(AccessibleObject member) {\n      if (member instanceof java.lang.reflect.Field) {\n        field = (java.lang.reflect.Field) member;\n      } else {\n        setter = (Method) member;\n      }\n      Field annotation = member.getAnnotation(Field.class);\n      storeName(annotation);\n      storeType();\n      \n      // Look for a matching getter\n      if( setter != null ) {\n        String gname = setter.getName();\n        if( gname.startsWith(\"set\") ) {\n          gname = \"get\" + gname.substring(3);\n          try {\n            getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n          }\n          catch( Exception ex ) {\n            // no getter -- don't worry about it...\n            if( type == Boolean.class ) {\n              gname = \"is\" + setter.getName().substring( 3 );\n              try {\n                getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n              }\n              catch( Exception ex2 ) {\n                // no getter -- don't worry about it...\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public DocField(AccessibleObject member) {\n      if (member instanceof java.lang.reflect.Field) {\n        field = (java.lang.reflect.Field) member;\n      } else {\n        setter = (Method) member;\n      }\n      Field annotation = member.getAnnotation(Field.class);\n      storeName(annotation);\n      storeType();\n      \n      // Look for a matching getter\n      if( setter != null ) {\n        String gname = setter.getName();\n        if( gname.startsWith(\"set\") ) {\n          gname = \"get\" + gname.substring(3);\n          try {\n            getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n          }\n          catch( Exception ex ) {\n            // no getter -- don't worry about it...\n            if( type == Boolean.class ) {\n              gname = \"is\" + setter.getName().substring( 3 );\n              try {\n                getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n              }\n              catch( Exception ex2 ) {\n                // no getter -- don't worry about it...\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ed6e0b4985bdfd7791bee5b0f15f9760568bc01f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"e3602d5eab954caecc726ab136ad580ac1ceb917":["ed6e0b4985bdfd7791bee5b0f15f9760568bc01f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ed6e0b4985bdfd7791bee5b0f15f9760568bc01f":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ed6e0b4985bdfd7791bee5b0f15f9760568bc01f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}