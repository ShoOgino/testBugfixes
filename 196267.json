{"path":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSet(Query,Query,Sort,int,int).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSet(Query,Query,Sort,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.  Also returns the compete set of documents\n   * matching <code>query</code> and <code>filter</code> (regardless of <code>offset</code> and <code>len</code>).\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   * <p>\n   * The DocList and DocSet returned should <b>not</b> be modified.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return\n   * @throws IOException\n   */\n  public DocListAndSet getDocListAndSet(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    List<Query> filterList = null;\n    if (filter != null) {\n      filterList = new ArrayList<Query>(2);\n      filterList.add(filter);\n    }\n    return getDocListAndSet(query, filterList, lsort, offset, len);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c95084d8c6cb8cba5cfd0237ee923e01c236c34"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e96fd8a5ecee99fb518c16ceb03a6a11c01b5468","date":1148693744,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSet(Query,Query,Sort,int,int).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSet(Query,Query,Sort,int,int).mjava","sourceNew":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.  Also returns the compete set of documents\n   * matching <code>query</code> and <code>filter</code> (regardless of <code>offset</code> and <code>len</code>).\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   * <p>\n   * The DocList and DocSet returned should <b>not</b> be modified.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocListAndSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocListAndSet getDocListAndSet(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    List<Query> filterList = null;\n    if (filter != null) {\n      filterList = new ArrayList<Query>(2);\n      filterList.add(filter);\n    }\n    return getDocListAndSet(query, filterList, lsort, offset, len);\n\n  }\n\n","sourceOld":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.  Also returns the compete set of documents\n   * matching <code>query</code> and <code>filter</code> (regardless of <code>offset</code> and <code>len</code>).\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   * <p>\n   * The DocList and DocSet returned should <b>not</b> be modified.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return\n   * @throws IOException\n   */\n  public DocListAndSet getDocListAndSet(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    List<Query> filterList = null;\n    if (filter != null) {\n      filterList = new ArrayList<Query>(2);\n      filterList.add(filter);\n    }\n    return getDocListAndSet(query, filterList, lsort, offset, len);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c95084d8c6cb8cba5cfd0237ee923e01c236c34","date":1153874054,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSet(Query,Query,Sort,int,int).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSet(Query,Query,Sort,int,int).mjava","sourceNew":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.  Also returns the compete set of documents\n   * matching <code>query</code> and <code>filter</code> (regardless of <code>offset</code> and <code>len</code>).\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   * <p>\n   * The DocList and DocSet returned should <b>not</b> be modified.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocListAndSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocListAndSet getDocListAndSet(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    List<Query> filterList = buildQueryList(filter);\n    return getDocListAndSet(query, filterList, lsort, offset, len);\n\n  }\n\n","sourceOld":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.  Also returns the compete set of documents\n   * matching <code>query</code> and <code>filter</code> (regardless of <code>offset</code> and <code>len</code>).\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   * <p>\n   * The DocList and DocSet returned should <b>not</b> be modified.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocListAndSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocListAndSet getDocListAndSet(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    List<Query> filterList = null;\n    if (filter != null) {\n      filterList = new ArrayList<Query>(2);\n      filterList.add(filter);\n    }\n    return getDocListAndSet(query, filterList, lsort, offset, len);\n\n  }\n\n","bugFix":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db25c1f61b5ae826f10777da6551a832703967d5","date":1215306972,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSet(Query,Query,Sort,int,int).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSet(Query,Query,Sort,int,int).mjava","sourceNew":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.  Also returns the compete set of documents\n   * matching <code>query</code> and <code>filter</code> (regardless of <code>offset</code> and <code>len</code>).\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   * <p>\n   * The DocList and DocSet returned should <b>not</b> be modified.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocListAndSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocListAndSet getDocListAndSet(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n      .setFilterList(filter)\n      .setSort(lsort)\n      .setOffset(offset)\n      .setLen(len)\n      .setNeedDocSet(true);\n    QueryResult qr = new QueryResult();\n    search(qr,qc);\n    return qr.getDocListAndSet();\n  }\n\n","sourceOld":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.  Also returns the compete set of documents\n   * matching <code>query</code> and <code>filter</code> (regardless of <code>offset</code> and <code>len</code>).\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   * <p>\n   * The DocList and DocSet returned should <b>not</b> be modified.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocListAndSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocListAndSet getDocListAndSet(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    List<Query> filterList = buildQueryList(filter);\n    return getDocListAndSet(query, filterList, lsort, offset, len);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db82599f9830da86b21a32e9f85954405a6bf355","date":1219066866,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSet(Query,Query,Sort,int,int).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSet(Query,Query,Sort,int,int).mjava","sourceNew":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.  Also returns the complete set of documents\n   * matching <code>query</code> and <code>filter</code> (regardless of <code>offset</code> and <code>len</code>).\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   * <p>\n   * The DocList and DocSet returned should <b>not</b> be modified.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocListAndSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocListAndSet getDocListAndSet(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n      .setFilterList(filter)\n      .setSort(lsort)\n      .setOffset(offset)\n      .setLen(len)\n      .setNeedDocSet(true);\n    QueryResult qr = new QueryResult();\n    search(qr,qc);\n    return qr.getDocListAndSet();\n  }\n\n","sourceOld":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.  Also returns the compete set of documents\n   * matching <code>query</code> and <code>filter</code> (regardless of <code>offset</code> and <code>len</code>).\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   * <p>\n   * The DocList and DocSet returned should <b>not</b> be modified.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocListAndSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocListAndSet getDocListAndSet(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n      .setFilterList(filter)\n      .setSort(lsort)\n      .setOffset(offset)\n      .setLen(len)\n      .setNeedDocSet(true);\n    QueryResult qr = new QueryResult();\n    search(qr,qc);\n    return qr.getDocListAndSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSet(Query,Query,Sort,int,int).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocListAndSet(Query,Query,Sort,int,int).mjava","sourceNew":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.  Also returns the complete set of documents\n   * matching <code>query</code> and <code>filter</code> (regardless of <code>offset</code> and <code>len</code>).\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   * <p>\n   * The DocList and DocSet returned should <b>not</b> be modified.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocListAndSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocListAndSet getDocListAndSet(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n      .setFilterList(filter)\n      .setSort(lsort)\n      .setOffset(offset)\n      .setLen(len)\n      .setNeedDocSet(true);\n    QueryResult qr = new QueryResult();\n    search(qr,qc);\n    return qr.getDocListAndSet();\n  }\n\n","sourceOld":"  /**\n   * Returns documents matching both <code>query</code> and <code>filter</code>\n   * and sorted by <code>sort</code>.  Also returns the complete set of documents\n   * matching <code>query</code> and <code>filter</code> (regardless of <code>offset</code> and <code>len</code>).\n   * <p>\n   * This method is cache aware and may retrieve <code>filter</code> from\n   * the cache or make an insertion into the cache as a result of this call.\n   * <p>\n   * FUTURE: The returned DocList may be retrieved from a cache.\n   * <p>\n   * The DocList and DocSet returned should <b>not</b> be modified.\n   *\n   * @param query\n   * @param filter   may be null\n   * @param lsort    criteria by which to sort (if null, query relevance is used)\n   * @param offset   offset into the list of documents to return\n   * @param len      maximum number of documents to return\n   * @return DocListAndSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   * @throws IOException\n   */\n  public DocListAndSet getDocListAndSet(Query query, Query filter, Sort lsort, int offset, int len) throws IOException {\n    QueryCommand qc = new QueryCommand();\n    qc.setQuery(query)\n      .setFilterList(filter)\n      .setSort(lsort)\n      .setOffset(offset)\n      .setLen(len)\n      .setNeedDocSet(true);\n    QueryResult qr = new QueryResult();\n    search(qr,qc);\n    return qr.getDocListAndSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"db82599f9830da86b21a32e9f85954405a6bf355":["db25c1f61b5ae826f10777da6551a832703967d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c95084d8c6cb8cba5cfd0237ee923e01c236c34":["e96fd8a5ecee99fb518c16ceb03a6a11c01b5468"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"db25c1f61b5ae826f10777da6551a832703967d5":["1c95084d8c6cb8cba5cfd0237ee923e01c236c34"],"ad94625fb8d088209f46650c8097196fec67f00c":["db82599f9830da86b21a32e9f85954405a6bf355"],"e96fd8a5ecee99fb518c16ceb03a6a11c01b5468":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["e96fd8a5ecee99fb518c16ceb03a6a11c01b5468"],"db82599f9830da86b21a32e9f85954405a6bf355":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c95084d8c6cb8cba5cfd0237ee923e01c236c34":["db25c1f61b5ae826f10777da6551a832703967d5"],"db25c1f61b5ae826f10777da6551a832703967d5":["db82599f9830da86b21a32e9f85954405a6bf355"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"e96fd8a5ecee99fb518c16ceb03a6a11c01b5468":["1c95084d8c6cb8cba5cfd0237ee923e01c236c34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}