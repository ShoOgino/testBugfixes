{"path":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader was created by calling {@link #open},  \n   * then this method checks if any further commits \n   * (see {@link IndexWriter#commit}) have occurred in the \n   * directory.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commmit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  public abstract boolean isCurrent() throws CorruptIndexException, IOException;\n\n","sourceOld":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader was created by calling {@link #open},  \n   * then this method checks if any further commits \n   * (see {@link IndexWriter#commit}) have occurred in the \n   * directory.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commmit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  public abstract boolean isCurrent() throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75c530969ddebc3e0596993d3734a3d2ded28dcb","date":1335125333,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader was created by calling {@link #open},  \n   * then this method checks if any further commits \n   * (see {@link IndexWriter#commit}) have occurred in the \n   * directory.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexReader#open(IndexWriter,boolean)}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commmit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  public abstract boolean isCurrent() throws CorruptIndexException, IOException;\n\n","sourceOld":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader was created by calling {@link #open},  \n   * then this method checks if any further commits \n   * (see {@link IndexWriter#commit}) have occurred in the \n   * directory.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commmit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  public abstract boolean isCurrent() throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader was created by calling {@link #open},  \n   * then this method checks if any further commits \n   * (see {@link IndexWriter#commit}) have occurred in the \n   * directory.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * DirectoryReader#open(IndexWriter,boolean)}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  public abstract boolean isCurrent() throws CorruptIndexException, IOException;\n\n","sourceOld":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader was created by calling {@link #open},  \n   * then this method checks if any further commits \n   * (see {@link IndexWriter#commit}) have occurred in the \n   * directory.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexReader#open(IndexWriter,boolean)}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commmit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  public abstract boolean isCurrent() throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader was created by calling {@link #open},  \n   * then this method checks if any further commits \n   * (see {@link IndexWriter#commit}) have occurred in the \n   * directory.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * DirectoryReader#open(IndexWriter,boolean)}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws IOException           if there is a low-level IO error\n   */\n  public abstract boolean isCurrent() throws IOException;\n\n","sourceOld":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader was created by calling {@link #open},  \n   * then this method checks if any further commits \n   * (see {@link IndexWriter#commit}) have occurred in the \n   * directory.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * DirectoryReader#open(IndexWriter,boolean)}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  public abstract boolean isCurrent() throws CorruptIndexException, IOException;\n\n","bugFix":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3","e3cdd070cf13b49e73269d367706513b14821185"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader was created by calling {@link #open},  \n   * then this method checks if any further commits \n   * (see {@link IndexWriter#commit}) have occurred in the \n   * directory.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * DirectoryReader#open(IndexWriter,boolean)}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws IOException           if there is a low-level IO error\n   */\n  public abstract boolean isCurrent() throws IOException;\n\n","sourceOld":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader was created by calling {@link #open},  \n   * then this method checks if any further commits \n   * (see {@link IndexWriter#commit}) have occurred in the \n   * directory.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * DirectoryReader#open(IndexWriter,boolean)}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   */\n  public abstract boolean isCurrent() throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader was created by calling {@link #open},  \n   * then this method checks if any further commits \n   * (see {@link IndexWriter#commit}) have occurred in the \n   * directory.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * DirectoryReader#open(IndexWriter)}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws IOException           if there is a low-level IO error\n   */\n  public abstract boolean isCurrent() throws IOException;\n\n","sourceOld":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader was created by calling {@link #open},  \n   * then this method checks if any further commits \n   * (see {@link IndexWriter#commit}) have occurred in the \n   * directory.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * DirectoryReader#open(IndexWriter,boolean)}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws IOException           if there is a low-level IO error\n   */\n  public abstract boolean isCurrent() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a1862266772deb28cdcb7d996b64d2177022687":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["75c530969ddebc3e0596993d3734a3d2ded28dcb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"75c530969ddebc3e0596993d3734a3d2ded28dcb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a1862266772deb28cdcb7d996b64d2177022687"]},"commit2Childs":{"2a1862266772deb28cdcb7d996b64d2177022687":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["75c530969ddebc3e0596993d3734a3d2ded28dcb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["2a1862266772deb28cdcb7d996b64d2177022687","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"75c530969ddebc3e0596993d3734a3d2ded28dcb":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}