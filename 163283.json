{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#loadNumeric(FieldInfo).mjava","commits":[{"id":"96b29edfb831f9c0aeeca88ad2293b2a9cd529f6","date":1358196500,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleNormsProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    if (entry.tableized) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final long minValue = data.readLong();\n      assert minValue == 0;\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else {\n      final long minValue = data.readLong();\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return minValue + reader.get(docID);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    if (entry.tableized) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final long minValue = data.readLong();\n      assert minValue == 0;\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else {\n      final long minValue = data.readLong();\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return minValue + reader.get(docID);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f93c27491251c14ea21df71ebbf6feb9f891e6cb","date":1358211079,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    if (entry.tableized) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final long minValue = data.readLong();\n      assert minValue == 0;\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else {\n      final long minValue = data.readLong();\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return minValue + reader.get(docID);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    if (entry.tableized) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final long minValue = data.readLong();\n      assert minValue == 0;\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else {\n      final long minValue = data.readLong();\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return minValue + reader.get(docID);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f","date":1358522034,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesProducer#loadNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#loadNumeric(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    if (entry.tableized) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final long minValue = data.readLong();\n      assert minValue == 0;\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else {\n      final long minValue = data.readLong();\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return minValue + reader.get(docID);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.number);\n    data.seek(entry.offset);\n    if (entry.tableized) {\n      int size = data.readVInt();\n      final long decode[] = new long[size];\n      for (int i = 0; i < decode.length; i++) {\n        decode[i] = data.readLong();\n      }\n      final long minValue = data.readLong();\n      assert minValue == 0;\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return decode[(int)reader.get(docID)];\n        }\n      };\n    } else {\n      final long minValue = data.readLong();\n      final PackedInts.Reader reader = PackedInts.getReader(data);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return minValue + reader.get(docID);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f":["f93c27491251c14ea21df71ebbf6feb9f891e6cb"],"f93c27491251c14ea21df71ebbf6feb9f891e6cb":["96b29edfb831f9c0aeeca88ad2293b2a9cd529f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96b29edfb831f9c0aeeca88ad2293b2a9cd529f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f":[],"f93c27491251c14ea21df71ebbf6feb9f891e6cb":["d7bf953a8ab9ae7d92835bdf9cbe5a268448868f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96b29edfb831f9c0aeeca88ad2293b2a9cd529f6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96b29edfb831f9c0aeeca88ad2293b2a9cd529f6":["f93c27491251c14ea21df71ebbf6feb9f891e6cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d7bf953a8ab9ae7d92835bdf9cbe5a268448868f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}