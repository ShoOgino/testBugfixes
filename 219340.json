{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#policiesFromMap(Map[String,List[Map[String,Object]]],List[String]).mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#policiesFromMap(Map[String,List[Map[String,Object]]],List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static Map<String, List<Clause>> policiesFromMap(Map<String, List<Map<String, Object>>> map, List<String> newParams) {\n    Map<String, List<Clause>> newPolicies = new HashMap<>();\n    map.forEach((s, l1) ->\n        newPolicies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(newParams);\n              return true;\n            })\n            .sorted()\n            .collect(collectingAndThen(toList(), Collections::unmodifiableList))));\n    return newPolicies;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#policiesFromMap(Map[String,List[Map[String,Object]]],List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static Map<String, List<Clause>> policiesFromMap(Map<String, List<Map<String, Object>>> map, List<String> newParams) {\n    Map<String, List<Clause>> newPolicies = new HashMap<>();\n    map.forEach((s, l1) ->\n        newPolicies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(newParams);\n              return true;\n            })\n            .sorted()\n            .collect(collectingAndThen(toList(), Collections::unmodifiableList))));\n    return newPolicies;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#policiesFromMap(Map[String,List[Map[String,Object]]],List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static Map<String, List<Clause>> policiesFromMap(Map<String, List<Map<String, Object>>> map, List<String> newParams) {\n    Map<String, List<Clause>> newPolicies = new HashMap<>();\n    map.forEach((s, l1) ->\n        newPolicies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(newParams);\n              return true;\n            })\n            .sorted()\n            .collect(collectingAndThen(toList(), Collections::unmodifiableList))));\n    return newPolicies;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#policiesFromMap(Map[String,List[Map[String,Object]]],List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#policiesFromMap(Map[String,List[Map[String,Object]]],List[String]).mjava","sourceNew":"  public static Map<String, List<Clause>> policiesFromMap(Map<String, List<Map<String, Object>>> map, List<String> newParams) {\n    Map<String, List<Clause>> newPolicies = new HashMap<>();\n    map.forEach((s, l1) ->\n        newPolicies.put(s, l1.stream()\n            .map(Clause::create)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.getGlobalTag().name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(newParams);\n              return true;\n            })\n            .sorted()\n            .collect(collectingAndThen(toList(), Collections::unmodifiableList))));\n    return newPolicies;\n  }\n\n","sourceOld":"  public static Map<String, List<Clause>> policiesFromMap(Map<String, List<Map<String, Object>>> map, List<String> newParams) {\n    Map<String, List<Clause>> newPolicies = new HashMap<>();\n    map.forEach((s, l1) ->\n        newPolicies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(newParams);\n              return true;\n            })\n            .sorted()\n            .collect(collectingAndThen(toList(), Collections::unmodifiableList))));\n    return newPolicies;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#policiesFromMap(Map[String,List[Map[String,Object]]],List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#policiesFromMap(Map[String,List[Map[String,Object]]],List[String]).mjava","sourceNew":"  public static Map<String, List<Clause>> policiesFromMap(Map<String, List<Map<String, Object>>> map, List<String> newParams) {\n    Map<String, List<Clause>> newPolicies = new HashMap<>();\n    map.forEach((s, l1) ->\n        newPolicies.put(s, l1.stream()\n            .map(Clause::create)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.getGlobalTag().name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(newParams);\n              return true;\n            })\n            .sorted()\n            .collect(collectingAndThen(toList(), Collections::unmodifiableList))));\n    return newPolicies;\n  }\n\n","sourceOld":"  public static Map<String, List<Clause>> policiesFromMap(Map<String, List<Map<String, Object>>> map, List<String> newParams) {\n    Map<String, List<Clause>> newPolicies = new HashMap<>();\n    map.forEach((s, l1) ->\n        newPolicies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(newParams);\n              return true;\n            })\n            .sorted()\n            .collect(collectingAndThen(toList(), Collections::unmodifiableList))));\n    return newPolicies;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#policiesFromMap(Map[String,List[Map[String,Object]]],List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#policiesFromMap(Map[String,List[Map[String,Object]]],List[String]).mjava","sourceNew":"  public static Map<String, List<Clause>> policiesFromMap(Map<String, List<Map<String, Object>>> map, List<String> newParams) {\n    Map<String, List<Clause>> newPolicies = new HashMap<>();\n    map.forEach((s, l1) ->\n        newPolicies.put(s, l1.stream()\n            .map(Clause::create)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.getGlobalTag().name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(newParams);\n              return true;\n            })\n            .sorted()\n            .collect(collectingAndThen(toList(), Collections::unmodifiableList))));\n    return newPolicies;\n  }\n\n","sourceOld":"  public static Map<String, List<Clause>> policiesFromMap(Map<String, List<Map<String, Object>>> map, List<String> newParams) {\n    Map<String, List<Clause>> newPolicies = new HashMap<>();\n    map.forEach((s, l1) ->\n        newPolicies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(newParams);\n              return true;\n            })\n            .sorted()\n            .collect(collectingAndThen(toList(), Collections::unmodifiableList))));\n    return newPolicies;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f","date":1536587656,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#clausesFromMap(Map[String,List[Map[String,Object]]],List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#policiesFromMap(Map[String,List[Map[String,Object]]],List[String]).mjava","sourceNew":"  public static Map<String, List<Clause>> clausesFromMap(Map<String, List<Map<String, Object>>> map, List<String> newParams) {\n    Map<String, List<Clause>> newPolicies = new HashMap<>();\n    map.forEach((s, l1) ->\n        newPolicies.put(s, l1.stream()\n            .map(Clause::create)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.getGlobalTag().name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(newParams);\n              return true;\n            })\n            .sorted()\n            .collect(collectingAndThen(toList(), Collections::unmodifiableList))));\n    return newPolicies;\n  }\n\n","sourceOld":"  public static Map<String, List<Clause>> policiesFromMap(Map<String, List<Map<String, Object>>> map, List<String> newParams) {\n    Map<String, List<Clause>> newPolicies = new HashMap<>();\n    map.forEach((s, l1) ->\n        newPolicies.put(s, l1.stream()\n            .map(Clause::create)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.getGlobalTag().name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(newParams);\n              return true;\n            })\n            .sorted()\n            .collect(collectingAndThen(toList(), Collections::unmodifiableList))));\n    return newPolicies;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["560c18d71dad43d675158783c3840f8c80d6d39c","9837f40c922407d857991971de6def18eda0857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f":["9837f40c922407d857991971de6def18eda0857b"],"9837f40c922407d857991971de6def18eda0857b":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["560c18d71dad43d675158783c3840f8c80d6d39c","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9837f40c922407d857991971de6def18eda0857b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}