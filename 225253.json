{"path":"lucene/src/java/org/apache/lucene/util/CommandLineUtil#newFSDirectory(String,File).mjava","commits":[{"id":"768c48159710aa63efa67c049db149c35c4f423a","date":1323797698,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/CommandLineUtil#newFSDirectory(String,File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a specific FSDirectory instance starting from its class name\n   * @param className The name of the FSDirectory class to load\n   * @param file The file to be used as parameter constructor\n   * @return the new FSDirectory instance\n   */\n  public static FSDirectory newFSDirectory(String clazzName, File file) {\n    try {\n      final Class<? extends FSDirectory> clazz = loadFSDirectoryClass(clazzName);\n      return newFSDirectory(clazz, file);\n    } catch (ClassNotFoundException e) {\n      throw new IllegalArgumentException(FSDirectory.class.getSimpleName()\n          + \" implementation not found: \" + clazzName, e);\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(clazzName + \" is not a \" + FSDirectory.class.getSimpleName()\n          + \" implementation\", e);\n    } catch (NoSuchMethodException e) {\n      throw new IllegalArgumentException(clazzName + \" constructor with \"\n          + File.class.getSimpleName() + \" as parameter not found\", e);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Error creating \" + clazzName + \" instance\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cc550b3b9e2164a489a7830a7261bf69ec1e01e","date":1323797774,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/CommandLineUtil#newFSDirectory(String,File).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CommandLineUtil#newFSDirectory(String,File).mjava","sourceNew":"  /**\n   * Creates a specific FSDirectory instance starting from its class name\n   * @param clazzName The name of the FSDirectory class to load\n   * @param file The file to be used as parameter constructor\n   * @return the new FSDirectory instance\n   */\n  public static FSDirectory newFSDirectory(String clazzName, File file) {\n    try {\n      final Class<? extends FSDirectory> clazz = loadFSDirectoryClass(clazzName);\n      return newFSDirectory(clazz, file);\n    } catch (ClassNotFoundException e) {\n      throw new IllegalArgumentException(FSDirectory.class.getSimpleName()\n          + \" implementation not found: \" + clazzName, e);\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(clazzName + \" is not a \" + FSDirectory.class.getSimpleName()\n          + \" implementation\", e);\n    } catch (NoSuchMethodException e) {\n      throw new IllegalArgumentException(clazzName + \" constructor with \"\n          + File.class.getSimpleName() + \" as parameter not found\", e);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Error creating \" + clazzName + \" instance\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a specific FSDirectory instance starting from its class name\n   * @param className The name of the FSDirectory class to load\n   * @param file The file to be used as parameter constructor\n   * @return the new FSDirectory instance\n   */\n  public static FSDirectory newFSDirectory(String clazzName, File file) {\n    try {\n      final Class<? extends FSDirectory> clazz = loadFSDirectoryClass(clazzName);\n      return newFSDirectory(clazz, file);\n    } catch (ClassNotFoundException e) {\n      throw new IllegalArgumentException(FSDirectory.class.getSimpleName()\n          + \" implementation not found: \" + clazzName, e);\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(clazzName + \" is not a \" + FSDirectory.class.getSimpleName()\n          + \" implementation\", e);\n    } catch (NoSuchMethodException e) {\n      throw new IllegalArgumentException(clazzName + \" constructor with \"\n          + File.class.getSimpleName() + \" as parameter not found\", e);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Error creating \" + clazzName + \" instance\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/CommandLineUtil#newFSDirectory(String,File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a specific FSDirectory instance starting from its class name\n   * @param clazzName The name of the FSDirectory class to load\n   * @param file The file to be used as parameter constructor\n   * @return the new FSDirectory instance\n   */\n  public static FSDirectory newFSDirectory(String clazzName, File file) {\n    try {\n      final Class<? extends FSDirectory> clazz = loadFSDirectoryClass(clazzName);\n      return newFSDirectory(clazz, file);\n    } catch (ClassNotFoundException e) {\n      throw new IllegalArgumentException(FSDirectory.class.getSimpleName()\n          + \" implementation not found: \" + clazzName, e);\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(clazzName + \" is not a \" + FSDirectory.class.getSimpleName()\n          + \" implementation\", e);\n    } catch (NoSuchMethodException e) {\n      throw new IllegalArgumentException(clazzName + \" constructor with \"\n          + File.class.getSimpleName() + \" as parameter not found\", e);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Error creating \" + clazzName + \" instance\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CommandLineUtil#newFSDirectory(String,File).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CommandLineUtil#newFSDirectory(String,File).mjava","sourceNew":"  /**\n   * Creates a specific FSDirectory instance starting from its class name\n   * @param clazzName The name of the FSDirectory class to load\n   * @param file The file to be used as parameter constructor\n   * @return the new FSDirectory instance\n   */\n  public static FSDirectory newFSDirectory(String clazzName, File file) {\n    try {\n      final Class<? extends FSDirectory> clazz = loadFSDirectoryClass(clazzName);\n      return newFSDirectory(clazz, file);\n    } catch (ClassNotFoundException e) {\n      throw new IllegalArgumentException(FSDirectory.class.getSimpleName()\n          + \" implementation not found: \" + clazzName, e);\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(clazzName + \" is not a \" + FSDirectory.class.getSimpleName()\n          + \" implementation\", e);\n    } catch (NoSuchMethodException e) {\n      throw new IllegalArgumentException(clazzName + \" constructor with \"\n          + File.class.getSimpleName() + \" as parameter not found\", e);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Error creating \" + clazzName + \" instance\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a specific FSDirectory instance starting from its class name\n   * @param clazzName The name of the FSDirectory class to load\n   * @param file The file to be used as parameter constructor\n   * @return the new FSDirectory instance\n   */\n  public static FSDirectory newFSDirectory(String clazzName, File file) {\n    try {\n      final Class<? extends FSDirectory> clazz = loadFSDirectoryClass(clazzName);\n      return newFSDirectory(clazz, file);\n    } catch (ClassNotFoundException e) {\n      throw new IllegalArgumentException(FSDirectory.class.getSimpleName()\n          + \" implementation not found: \" + clazzName, e);\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(clazzName + \" is not a \" + FSDirectory.class.getSimpleName()\n          + \" implementation\", e);\n    } catch (NoSuchMethodException e) {\n      throw new IllegalArgumentException(clazzName + \" constructor with \"\n          + File.class.getSimpleName() + \" as parameter not found\", e);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Error creating \" + clazzName + \" instance\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ceb6a6c707ada1df8bde804e25c98668e699a18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7cc550b3b9e2164a489a7830a7261bf69ec1e01e"],"768c48159710aa63efa67c049db149c35c4f423a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7cc550b3b9e2164a489a7830a7261bf69ec1e01e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7cc550b3b9e2164a489a7830a7261bf69ec1e01e":["768c48159710aa63efa67c049db149c35c4f423a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"768c48159710aa63efa67c049db149c35c4f423a":["7cc550b3b9e2164a489a7830a7261bf69ec1e01e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ceb6a6c707ada1df8bde804e25c98668e699a18","768c48159710aa63efa67c049db149c35c4f423a"],"7cc550b3b9e2164a489a7830a7261bf69ec1e01e":["4ceb6a6c707ada1df8bde804e25c98668e699a18","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ceb6a6c707ada1df8bde804e25c98668e699a18","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}