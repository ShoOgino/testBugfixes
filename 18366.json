{"path":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        }\n        else {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        }\n        else {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0338c5052ce93e9692895f7d75717298b789a0c1","date":1228854513,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        }\n        else if (v != null) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        }\n        else {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8281d815c10235e2dab9ded85615ebe920dd3c22","date":1243323879,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }else if (v instanceof byte[]) {\n          byte[] bytes = (byte[]) v;\n          v = Base64.byteArrayToBase64(bytes, 0,bytes.length);\n        } else if (v instanceof ByteBuffer) {\n          ByteBuffer bytes = (ByteBuffer) v;\n          v = Base64.byteArrayToBase64(bytes.array(), bytes.position(),bytes.limit() - bytes.position());\n        }\n\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        } else if (v != null) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        }\n        else if (v != null) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/util/ClientUtils#writeXML(SolrInputDocument,Writer).mjava","sourceNew":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }else if (v instanceof byte[]) {\n          byte[] bytes = (byte[]) v;\n          v = Base64.byteArrayToBase64(bytes, 0,bytes.length);\n        } else if (v instanceof ByteBuffer) {\n          ByteBuffer bytes = (ByteBuffer) v;\n          v = Base64.byteArrayToBase64(bytes.array(), bytes.position(),bytes.limit() - bytes.position());\n        }\n\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        } else if (v != null) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public static void writeXML( SolrInputDocument doc, Writer writer ) throws IOException\n  {\n    writer.write(\"<doc boost=\\\"\"+doc.getDocumentBoost()+\"\\\">\");\n\n    for( SolrInputField field : doc ) {\n      float boost = field.getBoost();\n      String name = field.getName();\n      for( Object v : field ) {\n        if (v instanceof Date) {\n          v = DateUtil.getThreadLocalDateFormat().format( (Date)v );\n        }else if (v instanceof byte[]) {\n          byte[] bytes = (byte[]) v;\n          v = Base64.byteArrayToBase64(bytes, 0,bytes.length);\n        } else if (v instanceof ByteBuffer) {\n          ByteBuffer bytes = (ByteBuffer) v;\n          v = Base64.byteArrayToBase64(bytes.array(), bytes.position(),bytes.limit() - bytes.position());\n        }\n\n        if( boost != 1.0f ) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost );\n        } else if (v != null) {\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name );\n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f;\n      }\n    }\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"0338c5052ce93e9692895f7d75717298b789a0c1":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"8281d815c10235e2dab9ded85615ebe920dd3c22":["0338c5052ce93e9692895f7d75717298b789a0c1"],"ad94625fb8d088209f46650c8097196fec67f00c":["8281d815c10235e2dab9ded85615ebe920dd3c22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["0338c5052ce93e9692895f7d75717298b789a0c1"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0338c5052ce93e9692895f7d75717298b789a0c1":["8281d815c10235e2dab9ded85615ebe920dd3c22"],"8281d815c10235e2dab9ded85615ebe920dd3c22":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}