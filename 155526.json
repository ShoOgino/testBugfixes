{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TestDelimitedPayloadTokenFilterFactory#testEncoder().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TestDelimitedPayloadTokenFilterFactory#testEncoder().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestDelimitedPayloadTokenFilterFactory#testEncoder().mjava","sourceNew":"  public void testEncoder() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put(DelimitedPayloadTokenFilterFactory.ENCODER_ATTR, \"float\");\n    DelimitedPayloadTokenFilterFactory factory = new DelimitedPayloadTokenFilterFactory();\n    factory.init(args);\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    factory.inform(loader);\n\n    TokenStream input = new MockTokenizer(new StringReader(\"the|0.1 quick|0.1 red|0.1\"), MockTokenizer.WHITESPACE, false);\n    DelimitedPayloadTokenFilter tf = factory.create(input);\n    tf.reset();\n    while (tf.incrementToken()){\n      PayloadAttribute payAttr = tf.getAttribute(PayloadAttribute.class);\n      assertTrue(\"payAttr is null and it shouldn't be\", payAttr != null);\n      byte[] payData = payAttr.getPayload().bytes;\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      float payFloat = PayloadHelper.decodeFloat(payData);\n      assertTrue(payFloat + \" does not equal: \" + 0.1f, payFloat == 0.1f);\n    }\n  }\n\n","sourceOld":"  public void testEncoder() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put(DelimitedPayloadTokenFilterFactory.ENCODER_ATTR, \"float\");\n    DelimitedPayloadTokenFilterFactory factory = new DelimitedPayloadTokenFilterFactory();\n    factory.init(args);\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    factory.inform(loader);\n\n    TokenStream input = new MockTokenizer(new StringReader(\"the|0.1 quick|0.1 red|0.1\"), MockTokenizer.WHITESPACE, false);\n    DelimitedPayloadTokenFilter tf = factory.create(input);\n    tf.reset();\n    while (tf.incrementToken()){\n      PayloadAttribute payAttr = tf.getAttribute(PayloadAttribute.class);\n      assertTrue(\"payAttr is null and it shouldn't be\", payAttr != null);\n      byte[] payData = payAttr.getPayload().bytes;\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      float payFloat = PayloadHelper.decodeFloat(payData);\n      assertTrue(payFloat + \" does not equal: \" + 0.1f, payFloat == 0.1f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10ddcde450bb525af01593bf6aa68f1f67e81b0d","date":1343104612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TestDelimitedPayloadTokenFilterFactory#testEncoder().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TestDelimitedPayloadTokenFilterFactory#testEncoder().mjava","sourceNew":"  public void testEncoder() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put(DelimitedPayloadTokenFilterFactory.ENCODER_ATTR, \"float\");\n    DelimitedPayloadTokenFilterFactory factory = new DelimitedPayloadTokenFilterFactory();\n    factory.init(args);\n    ResourceLoader loader = new StringMockResourceLoader(\"solr/collection1\");\n    factory.inform(loader);\n\n    TokenStream input = new MockTokenizer(new StringReader(\"the|0.1 quick|0.1 red|0.1\"), MockTokenizer.WHITESPACE, false);\n    DelimitedPayloadTokenFilter tf = factory.create(input);\n    tf.reset();\n    while (tf.incrementToken()){\n      PayloadAttribute payAttr = tf.getAttribute(PayloadAttribute.class);\n      assertTrue(\"payAttr is null and it shouldn't be\", payAttr != null);\n      byte[] payData = payAttr.getPayload().bytes;\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      float payFloat = PayloadHelper.decodeFloat(payData);\n      assertTrue(payFloat + \" does not equal: \" + 0.1f, payFloat == 0.1f);\n    }\n  }\n\n","sourceOld":"  public void testEncoder() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put(DelimitedPayloadTokenFilterFactory.ENCODER_ATTR, \"float\");\n    DelimitedPayloadTokenFilterFactory factory = new DelimitedPayloadTokenFilterFactory();\n    factory.init(args);\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    factory.inform(loader);\n\n    TokenStream input = new MockTokenizer(new StringReader(\"the|0.1 quick|0.1 red|0.1\"), MockTokenizer.WHITESPACE, false);\n    DelimitedPayloadTokenFilter tf = factory.create(input);\n    tf.reset();\n    while (tf.incrementToken()){\n      PayloadAttribute payAttr = tf.getAttribute(PayloadAttribute.class);\n      assertTrue(\"payAttr is null and it shouldn't be\", payAttr != null);\n      byte[] payData = payAttr.getPayload().bytes;\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      float payFloat = PayloadHelper.decodeFloat(payData);\n      assertTrue(payFloat + \" does not equal: \" + 0.1f, payFloat == 0.1f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TestDelimitedPayloadTokenFilterFactory#testEncoder().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestDelimitedPayloadTokenFilterFactory#testEncoder().mjava","sourceNew":"  public void testEncoder() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put(DelimitedPayloadTokenFilterFactory.ENCODER_ATTR, \"float\");\n    DelimitedPayloadTokenFilterFactory factory = new DelimitedPayloadTokenFilterFactory();\n    factory.init(args);\n    ResourceLoader loader = new StringMockResourceLoader(\"solr/collection1\");\n    factory.inform(loader);\n\n    TokenStream input = new MockTokenizer(new StringReader(\"the|0.1 quick|0.1 red|0.1\"), MockTokenizer.WHITESPACE, false);\n    DelimitedPayloadTokenFilter tf = factory.create(input);\n    tf.reset();\n    while (tf.incrementToken()){\n      PayloadAttribute payAttr = tf.getAttribute(PayloadAttribute.class);\n      assertTrue(\"payAttr is null and it shouldn't be\", payAttr != null);\n      byte[] payData = payAttr.getPayload().bytes;\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      float payFloat = PayloadHelper.decodeFloat(payData);\n      assertTrue(payFloat + \" does not equal: \" + 0.1f, payFloat == 0.1f);\n    }\n  }\n\n","sourceOld":"  public void testEncoder() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put(DelimitedPayloadTokenFilterFactory.ENCODER_ATTR, \"float\");\n    DelimitedPayloadTokenFilterFactory factory = new DelimitedPayloadTokenFilterFactory();\n    factory.init(args);\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    factory.inform(loader);\n\n    TokenStream input = new MockTokenizer(new StringReader(\"the|0.1 quick|0.1 red|0.1\"), MockTokenizer.WHITESPACE, false);\n    DelimitedPayloadTokenFilter tf = factory.create(input);\n    tf.reset();\n    while (tf.incrementToken()){\n      PayloadAttribute payAttr = tf.getAttribute(PayloadAttribute.class);\n      assertTrue(\"payAttr is null and it shouldn't be\", payAttr != null);\n      byte[] payData = payAttr.getPayload().bytes;\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      float payFloat = PayloadHelper.decodeFloat(payData);\n      assertTrue(payFloat + \" does not equal: \" + 0.1f, payFloat == 0.1f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TestDelimitedPayloadTokenFilterFactory#testEncoder().mjava","pathOld":"/dev/null","sourceNew":"  public void testEncoder() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put(DelimitedPayloadTokenFilterFactory.ENCODER_ATTR, \"float\");\n    DelimitedPayloadTokenFilterFactory factory = new DelimitedPayloadTokenFilterFactory();\n    factory.init(args);\n    ResourceLoader loader = new StringMockResourceLoader(\"solr/collection1\");\n    factory.inform(loader);\n\n    TokenStream input = new MockTokenizer(new StringReader(\"the|0.1 quick|0.1 red|0.1\"), MockTokenizer.WHITESPACE, false);\n    DelimitedPayloadTokenFilter tf = factory.create(input);\n    tf.reset();\n    while (tf.incrementToken()){\n      PayloadAttribute payAttr = tf.getAttribute(PayloadAttribute.class);\n      assertTrue(\"payAttr is null and it shouldn't be\", payAttr != null);\n      byte[] payData = payAttr.getPayload().bytes;\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      float payFloat = PayloadHelper.decodeFloat(payData);\n      assertTrue(payFloat + \" does not equal: \" + 0.1f, payFloat == 0.1f);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TestDelimitedPayloadTokenFilterFactory#testEncoder().mjava","pathOld":"/dev/null","sourceNew":"  public void testEncoder() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put(DelimitedPayloadTokenFilterFactory.ENCODER_ATTR, \"float\");\n    DelimitedPayloadTokenFilterFactory factory = new DelimitedPayloadTokenFilterFactory();\n    factory.init(args);\n    ResourceLoader loader = new StringMockResourceLoader(\"solr/collection1\");\n    factory.inform(loader);\n\n    TokenStream input = new MockTokenizer(new StringReader(\"the|0.1 quick|0.1 red|0.1\"), MockTokenizer.WHITESPACE, false);\n    DelimitedPayloadTokenFilter tf = factory.create(input);\n    tf.reset();\n    while (tf.incrementToken()){\n      PayloadAttribute payAttr = tf.getAttribute(PayloadAttribute.class);\n      assertTrue(\"payAttr is null and it shouldn't be\", payAttr != null);\n      byte[] payData = payAttr.getPayload().bytes;\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      float payFloat = PayloadHelper.decodeFloat(payData);\n      assertTrue(payFloat + \" does not equal: \" + 0.1f, payFloat == 0.1f);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TestDelimitedPayloadTokenFilterFactory#testEncoder().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TestDelimitedPayloadTokenFilterFactory#testEncoder().mjava","sourceNew":"  public void testEncoder() throws Exception {\n    Reader reader = new StringReader(\"the|0.1 quick|0.1 red|0.1\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"DelimitedPayload\", \"encoder\", \"float\").create(stream);\n\n    stream.reset();\n    while (stream.incrementToken()) {\n      PayloadAttribute payAttr = stream.getAttribute(PayloadAttribute.class);\n      assertNotNull(payAttr);\n      byte[] payData = payAttr.getPayload().bytes;\n      assertNotNull(payData);\n      float payFloat = PayloadHelper.decodeFloat(payData);\n      assertEquals(0.1f, payFloat, 0.0f);\n    }\n    stream.end();\n    stream.close();\n  }\n\n","sourceOld":"  public void testEncoder() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put(DelimitedPayloadTokenFilterFactory.ENCODER_ATTR, \"float\");\n    DelimitedPayloadTokenFilterFactory factory = new DelimitedPayloadTokenFilterFactory();\n    factory.init(args);\n    ResourceLoader loader = new StringMockResourceLoader(\"solr/collection1\");\n    factory.inform(loader);\n\n    TokenStream input = new MockTokenizer(new StringReader(\"the|0.1 quick|0.1 red|0.1\"), MockTokenizer.WHITESPACE, false);\n    DelimitedPayloadTokenFilter tf = factory.create(input);\n    tf.reset();\n    while (tf.incrementToken()){\n      PayloadAttribute payAttr = tf.getAttribute(PayloadAttribute.class);\n      assertTrue(\"payAttr is null and it shouldn't be\", payAttr != null);\n      byte[] payData = payAttr.getPayload().bytes;\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      float payFloat = PayloadHelper.decodeFloat(payData);\n      assertTrue(payFloat + \" does not equal: \" + 0.1f, payFloat == 0.1f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TestDelimitedPayloadTokenFilterFactory#testEncoder().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TestDelimitedPayloadTokenFilterFactory#testEncoder().mjava","sourceNew":"  public void testEncoder() throws Exception {\n    Reader reader = new StringReader(\"the|0.1 quick|0.1 red|0.1\");\n    TokenStream stream = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    ((Tokenizer)stream).setReader(reader);\n    stream = tokenFilterFactory(\"DelimitedPayload\", \"encoder\", \"float\").create(stream);\n\n    stream.reset();\n    while (stream.incrementToken()) {\n      PayloadAttribute payAttr = stream.getAttribute(PayloadAttribute.class);\n      assertNotNull(payAttr);\n      byte[] payData = payAttr.getPayload().bytes;\n      assertNotNull(payData);\n      float payFloat = PayloadHelper.decodeFloat(payData);\n      assertEquals(0.1f, payFloat, 0.0f);\n    }\n    stream.end();\n    stream.close();\n  }\n\n","sourceOld":"  public void testEncoder() throws Exception {\n    Reader reader = new StringReader(\"the|0.1 quick|0.1 red|0.1\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"DelimitedPayload\", \"encoder\", \"float\").create(stream);\n\n    stream.reset();\n    while (stream.incrementToken()) {\n      PayloadAttribute payAttr = stream.getAttribute(PayloadAttribute.class);\n      assertNotNull(payAttr);\n      byte[] payData = payAttr.getPayload().bytes;\n      assertNotNull(payData);\n      float payFloat = PayloadHelper.decodeFloat(payData);\n      assertEquals(0.1f, payFloat, 0.0f);\n    }\n    stream.end();\n    stream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"10ddcde450bb525af01593bf6aa68f1f67e81b0d":["3241e06e642196396b80bb293acd9c0814d079e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","10ddcde450bb525af01593bf6aa68f1f67e81b0d"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10ddcde450bb525af01593bf6aa68f1f67e81b0d":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"3241e06e642196396b80bb293acd9c0814d079e0":["10ddcde450bb525af01593bf6aa68f1f67e81b0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}