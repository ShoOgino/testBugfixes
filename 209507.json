{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testBasic().mjava","commits":[{"id":"c784b25e28b81ddedff2b97738c8286773f00f15","date":1352150231,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#test().mjava","sourceNew":"  public void testBasic() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"foo\", 50),\n        new TermFreq(\"bar\", 10),\n        new TermFreq(\"barbar\", 12),\n        new TermFreq(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // make sure we don't get a dup exact suggestion:\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"foo\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"foo\", 50),\n        new TermFreq(\"bar\", 10),\n        new TermFreq(\"barbar\", 12),\n        new TermFreq(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // make sure we don't get a dup exact suggestion:\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"foo\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    TermFreqPayload keys[] = new TermFreqPayload[] {\n        new TermFreqPayload(\"foo\", 50),\n        new TermFreqPayload(\"bar\", 10),\n        new TermFreqPayload(\"barbar\", 12),\n        new TermFreqPayload(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // make sure we don't get a dup exact suggestion:\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"foo\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"foo\", 50),\n        new TermFreq(\"bar\", 10),\n        new TermFreq(\"barbar\", 12),\n        new TermFreq(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // make sure we don't get a dup exact suggestion:\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"foo\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"foo\", 50),\n        new Input(\"bar\", 10),\n        new Input(\"barbar\", 12),\n        new Input(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new InputArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // make sure we don't get a dup exact suggestion:\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"foo\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    TermFreqPayload keys[] = new TermFreqPayload[] {\n        new TermFreqPayload(\"foo\", 50),\n        new TermFreqPayload(\"bar\", 10),\n        new TermFreqPayload(\"barbar\", 12),\n        new TermFreqPayload(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // make sure we don't get a dup exact suggestion:\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"foo\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"foo\", 50),\n        new Input(\"bar\", 10),\n        new Input(\"barbar\", 12),\n        new Input(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new InputArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // make sure we don't get a dup exact suggestion:\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"foo\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"foo\", 50),\n        new Input(\"bar\", 10),\n        new Input(\"barbar\", 12),\n        new Input(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new InputArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // make sure we don't get a dup exact suggestion:\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"foo\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/WFSTCompletionTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"foo\", 50),\n        new Input(\"bar\", 10),\n        new Input(\"barbar\", 12),\n        new Input(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    Directory tempDir = getDirectory();\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup(tempDir, \"wfst\");\n    suggester.build(new InputArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // make sure we don't get a dup exact suggestion:\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"foo\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n    tempDir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"foo\", 50),\n        new Input(\"bar\", 10),\n        new Input(\"barbar\", 12),\n        new Input(\"barbara\", 6)\n    };\n    \n    Random random = new Random(random().nextLong());\n    WFSTCompletionLookup suggester = new WFSTCompletionLookup();\n    suggester.build(new InputArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"f\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // make sure we don't get a dup exact suggestion:\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"foo\", random), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // top N of 1 for 'bar': we return this even though barbar is higher\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"bar\", random), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"b\", random), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ba\", random), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"6613659748fe4411a7dcf85266e55db1f95f7315":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["c784b25e28b81ddedff2b97738c8286773f00f15"],"c784b25e28b81ddedff2b97738c8286773f00f15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c784b25e28b81ddedff2b97738c8286773f00f15"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c784b25e28b81ddedff2b97738c8286773f00f15":["ada2f7352a7f964fe49bccd13227c4ec38563d39"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}