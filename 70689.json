{"path":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#doTestTargetCollectionNotAvailable().mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#doTestTargetCollectionNotAvailable().mjava","pathOld":"/dev/null","sourceNew":"  public void doTestTargetCollectionNotAvailable() throws Exception {\n    this.clearSourceCollection();\n    this.clearTargetCollection();\n\n    // send start action to first shard\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    NamedList status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.ProcessState.STARTED.toLower(), status.get(CdcrParams.ProcessState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STARTED, CdcrParams.BufferState.ENABLED);\n\n    // Kill all the servers of the target\n    this.deleteCollection(TARGET_COLLECTION);\n\n    // Index a few documents to trigger the replication\n    index(SOURCE_COLLECTION, getDoc(id, \"a\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"b\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"c\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"d\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"e\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"f\"));\n\n    assertEquals(6, getNumDocs(SOURCE_COLLECTION));\n\n    Thread.sleep(1000); // wait a bit for the replicator thread to be triggered\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.ERRORS);\n    NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.ERRORS)).getVal(0);\n    NamedList errors = (NamedList) collections.get(TARGET_COLLECTION);\n    assertTrue(0 < (Long) errors.get(CdcrParams.CONSECUTIVE_ERRORS));\n    NamedList lastErrors = (NamedList) errors.get(CdcrParams.LAST);\n    assertNotNull(lastErrors);\n    assertTrue(0 < lastErrors.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testTargetCollectionNotAvailable().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#doTestTargetCollectionNotAvailable().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void testTargetCollectionNotAvailable() throws Exception {\n    // send start action to first shard\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    NamedList status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.ProcessState.STARTED.toLower(), status.get(CdcrParams.ProcessState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STARTED, CdcrParams.BufferState.ENABLED);\n\n    // Kill all the servers of the target\n    this.deleteCollection(TARGET_COLLECTION);\n\n    // Index a few documents to trigger the replication\n    index(SOURCE_COLLECTION, getDoc(id, \"a\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"b\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"c\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"d\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"e\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"f\"));\n\n    assertNumDocs(6, SOURCE_COLLECTION);\n\n    // we need to wait until the replicator thread is triggered\n    int cnt = 15; // timeout after 15 seconds\n    AssertionError lastAssertionError = null;\n    while (cnt > 0) {\n      try {\n        rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.ERRORS);\n        NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.ERRORS)).getVal(0);\n        NamedList errors = (NamedList) collections.get(TARGET_COLLECTION);\n        assertTrue(0 < (Long) errors.get(CdcrParams.CONSECUTIVE_ERRORS));\n        NamedList lastErrors = (NamedList) errors.get(CdcrParams.LAST);\n        assertNotNull(lastErrors);\n        assertTrue(0 < lastErrors.size());\n        return;\n      }\n      catch (AssertionError e) {\n        lastAssertionError = e;\n        cnt--;\n        Thread.sleep(1000);\n      }\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert replication errors\", lastAssertionError);\n  }\n\n","sourceOld":"  public void doTestTargetCollectionNotAvailable() throws Exception {\n    this.clearSourceCollection();\n    this.clearTargetCollection();\n\n    // send start action to first shard\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    NamedList status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.ProcessState.STARTED.toLower(), status.get(CdcrParams.ProcessState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STARTED, CdcrParams.BufferState.ENABLED);\n\n    // Kill all the servers of the target\n    this.deleteCollection(TARGET_COLLECTION);\n\n    // Index a few documents to trigger the replication\n    index(SOURCE_COLLECTION, getDoc(id, \"a\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"b\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"c\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"d\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"e\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"f\"));\n\n    assertEquals(6, getNumDocs(SOURCE_COLLECTION));\n\n    Thread.sleep(1000); // wait a bit for the replicator thread to be triggered\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.ERRORS);\n    NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.ERRORS)).getVal(0);\n    NamedList errors = (NamedList) collections.get(TARGET_COLLECTION);\n    assertTrue(0 < (Long) errors.get(CdcrParams.CONSECUTIVE_ERRORS));\n    NamedList lastErrors = (NamedList) errors.get(CdcrParams.LAST);\n    assertNotNull(lastErrors);\n    assertTrue(0 < lastErrors.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}