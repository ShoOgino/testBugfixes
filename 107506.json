{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#DistanceCount(String).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#DistanceCount(String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Constructor for the DistanceCount object\n     *\n     * @param filename         Description of the Parameter\n     * @exception IOException  Description of the Exception\n     */\n    public DistanceCount(String filename)\n        throws IOException\n    {\n        System.out.println(\"reading file...\");\n        long t1 = System.currentTimeMillis();\n        BufferedReader b = new BufferedReader(new FileReader(filename));\n        String line;\n        boolean firstNotFound = true;\n        Node firstNode = null;\n        int lines = 0;\n        while ((line = b.readLine()) != null)\n        {\n            lines++;\n            String title = null;\n            try\n            {\n                //StringTokenizer st = new StringTokenizer(line, \" \");\n                StringTokenizer st = new StringTokenizer(line, \"\\t\");\n                String from = st.nextToken();\n                if (from.endsWith(\"/\"))\n                {\n                    from = from.substring(0, from.length() - 1);\n                }\n                from = from.toLowerCase();\n                String to = st.nextToken();\n                if (to.endsWith(\"/\"))\n                {\n                    to = to.substring(0, to.length() - 1);\n                }\n                to = to.toLowerCase();\n                boolean isFrame = (Integer.parseInt(st.nextToken()) == 1);\n                if (st.countTokens() > 3)\n                {\n                    title = \"<untitled>\";\n                    //StringBuffer sb = new StringBuffer();\n                    st.nextToken();\n                    // result\n                    st.nextToken();\n                    // Mime Type\n                    st.nextToken();\n                    // Size\n                    /*\n                     *  while(st.hasMoreTokens())\n                     *  {\n                     *  sb.append(st.nextToken()).append(\" \");\n                     *  }\n                     */\n                    title = st.nextToken();\n                    if (title.length() > 2)\n                    {\n\n                        title = title.substring(1, title.length() - 1);\n                        int indexOfPara = title.indexOf(\"\\\"\");\n                        if (indexOfPara > -1)\n                        {\n                            title = title.substring(0, indexOfPara);\n                        }\n                    }\n                }\n                Node fromNode = getOrCreateNode(from, null);\n                Node toNode = getOrCreateNode(to, title);\n                Transition t = new Transition(fromNode, toNode, isFrame);\n                /*\n                 *  if(firstNotFound && to.equals(\"http://127.0.0.1\"))\n                 *  {\n                 *  firstNode = toNode;\n                 *  firstNotFound = false;\n                 *  }\n                 */\n                if (lines % 10000 == 0)\n                {\n                    System.out.println(\"\" + lines + \" Lines; \" + nodes.size() + \" nodes\");\n                }\n            }\n            catch (NoSuchElementException e)\n            {\n                System.out.println(\"Malformed line \" + lines + \": field number doesn't match\");\n            }\n            catch (NumberFormatException e)\n            {\n                System.out.println(\"Malformed line \" + lines + \": NumberFormat wrong\");\n            }\n        }\n        System.out.println(\"finished; b\" + lines + \" Lines; \" + nodes.size() + \" nodes\");\n        long t2 = System.currentTimeMillis();\n        System.out.println(\"\" + (t2 - t1) + \" ms\");\n\n        /*\n         *  if(firstNotFound)\n         *  {\n         *  System.out.println(\"Couldn't find start page\");\n         *  System.exit(-1);\n         *  }\n         */\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21b526e3e9974b2651365fbae52a976e6fc77aa4","date":1022108962,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#DistanceCount(String).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#DistanceCount(String).mjava","sourceNew":"    /**\n     * Constructor for the DistanceCount object\n     *\n     * @param filename         Description of the Parameter\n     * @exception IOException  Description of the Exception\n     */\n\n    public DistanceCount(String filename)\n        throws IOException\n    {\n\n        System.out.println(\"reading file...\");\n\n        long t1 = System.currentTimeMillis();\n\n        BufferedReader b = new BufferedReader(new FileReader(filename));\n\n        String line;\n\n        boolean firstNotFound = true;\n\n        Node firstNode = null;\n\n        int lines = 0;\n\n        while ((line = b.readLine()) != null)\n        {\n\n            lines++;\n\n            String title = null;\n\n            try\n            {\n\n                //StringTokenizer st = new StringTokenizer(line, \" \");\n\n                StringTokenizer st = new StringTokenizer(line, \"\\t\");\n\n                String from = st.nextToken();\n\n                if (from.endsWith(\"/\"))\n                {\n\n                    from = from.substring(0, from.length() - 1);\n\n                }\n\n                from = from.toLowerCase();\n\n                String to = st.nextToken();\n\n                if (to.endsWith(\"/\"))\n                {\n\n                    to = to.substring(0, to.length() - 1);\n\n                }\n\n                to = to.toLowerCase();\n\n                boolean isFrame = (Integer.parseInt(st.nextToken()) == 1);\n\n                if (st.countTokens() > 3)\n                {\n\n                    title = \"<untitled>\";\n\n                    //StringBuffer sb = new StringBuffer();\n\n                    st.nextToken();\n\n                    // result\n\n                    st.nextToken();\n\n                    // Mime Type\n\n                    st.nextToken();\n\n                    // Size\n\n                    /*\n                     *  while(st.hasMoreTokens())\n                     *  {\n                     *  sb.append(st.nextToken()).append(\" \");\n                     *  }\n                     */\n                    title = st.nextToken();\n\n                    if (title.length() > 2)\n                    {\n\n                        title = title.substring(1, title.length() - 1);\n\n                        int indexOfPara = title.indexOf(\"\\\"\");\n\n                        if (indexOfPara > -1)\n                        {\n\n                            title = title.substring(0, indexOfPara);\n\n                        }\n\n                    }\n\n                }\n\n                Node fromNode = getOrCreateNode(from, null);\n\n                Node toNode = getOrCreateNode(to, title);\n\n                Transition t = new Transition(fromNode, toNode, isFrame);\n\n                /*\n                 *  if(firstNotFound && to.equals(\"http://127.0.0.1\"))\n                 *  {\n                 *  firstNode = toNode;\n                 *  firstNotFound = false;\n                 *  }\n                 */\n                if (lines % 10000 == 0)\n                {\n\n                    System.out.println(\"\" + lines + \" Lines; \" + nodes.size() + \" nodes\");\n\n                }\n\n            }\n\n            catch (NoSuchElementException e)\n            {\n\n                System.out.println(\"Malformed line \" + lines + \": field number doesn't match\");\n\n            }\n\n            catch (NumberFormatException e)\n            {\n\n                System.out.println(\"Malformed line \" + lines + \": NumberFormat wrong\");\n\n            }\n\n        }\n\n        System.out.println(\"finished; b\" + lines + \" Lines; \" + nodes.size() + \" nodes\");\n\n        long t2 = System.currentTimeMillis();\n\n        System.out.println(\"\" + (t2 - t1) + \" ms\");\n\n        /*\n         *  if(firstNotFound)\n         *  {\n         *  System.out.println(\"Couldn't find start page\");\n         *  System.exit(-1);\n         *  }\n         */\n    }\n\n","sourceOld":"    /**\n     * Constructor for the DistanceCount object\n     *\n     * @param filename         Description of the Parameter\n     * @exception IOException  Description of the Exception\n     */\n    public DistanceCount(String filename)\n        throws IOException\n    {\n        System.out.println(\"reading file...\");\n        long t1 = System.currentTimeMillis();\n        BufferedReader b = new BufferedReader(new FileReader(filename));\n        String line;\n        boolean firstNotFound = true;\n        Node firstNode = null;\n        int lines = 0;\n        while ((line = b.readLine()) != null)\n        {\n            lines++;\n            String title = null;\n            try\n            {\n                //StringTokenizer st = new StringTokenizer(line, \" \");\n                StringTokenizer st = new StringTokenizer(line, \"\\t\");\n                String from = st.nextToken();\n                if (from.endsWith(\"/\"))\n                {\n                    from = from.substring(0, from.length() - 1);\n                }\n                from = from.toLowerCase();\n                String to = st.nextToken();\n                if (to.endsWith(\"/\"))\n                {\n                    to = to.substring(0, to.length() - 1);\n                }\n                to = to.toLowerCase();\n                boolean isFrame = (Integer.parseInt(st.nextToken()) == 1);\n                if (st.countTokens() > 3)\n                {\n                    title = \"<untitled>\";\n                    //StringBuffer sb = new StringBuffer();\n                    st.nextToken();\n                    // result\n                    st.nextToken();\n                    // Mime Type\n                    st.nextToken();\n                    // Size\n                    /*\n                     *  while(st.hasMoreTokens())\n                     *  {\n                     *  sb.append(st.nextToken()).append(\" \");\n                     *  }\n                     */\n                    title = st.nextToken();\n                    if (title.length() > 2)\n                    {\n\n                        title = title.substring(1, title.length() - 1);\n                        int indexOfPara = title.indexOf(\"\\\"\");\n                        if (indexOfPara > -1)\n                        {\n                            title = title.substring(0, indexOfPara);\n                        }\n                    }\n                }\n                Node fromNode = getOrCreateNode(from, null);\n                Node toNode = getOrCreateNode(to, title);\n                Transition t = new Transition(fromNode, toNode, isFrame);\n                /*\n                 *  if(firstNotFound && to.equals(\"http://127.0.0.1\"))\n                 *  {\n                 *  firstNode = toNode;\n                 *  firstNotFound = false;\n                 *  }\n                 */\n                if (lines % 10000 == 0)\n                {\n                    System.out.println(\"\" + lines + \" Lines; \" + nodes.size() + \" nodes\");\n                }\n            }\n            catch (NoSuchElementException e)\n            {\n                System.out.println(\"Malformed line \" + lines + \": field number doesn't match\");\n            }\n            catch (NumberFormatException e)\n            {\n                System.out.println(\"Malformed line \" + lines + \": NumberFormat wrong\");\n            }\n        }\n        System.out.println(\"finished; b\" + lines + \" Lines; \" + nodes.size() + \" nodes\");\n        long t2 = System.currentTimeMillis();\n        System.out.println(\"\" + (t2 - t1) + \" ms\");\n\n        /*\n         *  if(firstNotFound)\n         *  {\n         *  System.out.println(\"Couldn't find start page\");\n         *  System.exit(-1);\n         *  }\n         */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#DistanceCount(String).mjava","sourceNew":null,"sourceOld":"    /**\n     * Constructor for the DistanceCount object\n     *\n     * @param filename         Description of the Parameter\n     * @exception IOException  Description of the Exception\n     */\n\n    public DistanceCount(String filename)\n        throws IOException\n    {\n\n        System.out.println(\"reading file...\");\n\n        long t1 = System.currentTimeMillis();\n\n        BufferedReader b = new BufferedReader(new FileReader(filename));\n\n        String line;\n\n        boolean firstNotFound = true;\n\n        Node firstNode = null;\n\n        int lines = 0;\n\n        while ((line = b.readLine()) != null)\n        {\n\n            lines++;\n\n            String title = null;\n\n            try\n            {\n\n                //StringTokenizer st = new StringTokenizer(line, \" \");\n\n                StringTokenizer st = new StringTokenizer(line, \"\\t\");\n\n                String from = st.nextToken();\n\n                if (from.endsWith(\"/\"))\n                {\n\n                    from = from.substring(0, from.length() - 1);\n\n                }\n\n                from = from.toLowerCase();\n\n                String to = st.nextToken();\n\n                if (to.endsWith(\"/\"))\n                {\n\n                    to = to.substring(0, to.length() - 1);\n\n                }\n\n                to = to.toLowerCase();\n\n                boolean isFrame = (Integer.parseInt(st.nextToken()) == 1);\n\n                if (st.countTokens() > 3)\n                {\n\n                    title = \"<untitled>\";\n\n                    //StringBuffer sb = new StringBuffer();\n\n                    st.nextToken();\n\n                    // result\n\n                    st.nextToken();\n\n                    // Mime Type\n\n                    st.nextToken();\n\n                    // Size\n\n                    /*\n                     *  while(st.hasMoreTokens())\n                     *  {\n                     *  sb.append(st.nextToken()).append(\" \");\n                     *  }\n                     */\n                    title = st.nextToken();\n\n                    if (title.length() > 2)\n                    {\n\n                        title = title.substring(1, title.length() - 1);\n\n                        int indexOfPara = title.indexOf(\"\\\"\");\n\n                        if (indexOfPara > -1)\n                        {\n\n                            title = title.substring(0, indexOfPara);\n\n                        }\n\n                    }\n\n                }\n\n                Node fromNode = getOrCreateNode(from, null);\n\n                Node toNode = getOrCreateNode(to, title);\n\n                Transition t = new Transition(fromNode, toNode, isFrame);\n\n                /*\n                 *  if(firstNotFound && to.equals(\"http://127.0.0.1\"))\n                 *  {\n                 *  firstNode = toNode;\n                 *  firstNotFound = false;\n                 *  }\n                 */\n                if (lines % 10000 == 0)\n                {\n\n                    System.out.println(\"\" + lines + \" Lines; \" + nodes.size() + \" nodes\");\n\n                }\n\n            }\n\n            catch (NoSuchElementException e)\n            {\n\n                System.out.println(\"Malformed line \" + lines + \": field number doesn't match\");\n\n            }\n\n            catch (NumberFormatException e)\n            {\n\n                System.out.println(\"Malformed line \" + lines + \": NumberFormat wrong\");\n\n            }\n\n        }\n\n        System.out.println(\"finished; b\" + lines + \" Lines; \" + nodes.size() + \" nodes\");\n\n        long t2 = System.currentTimeMillis();\n\n        System.out.println(\"\" + (t2 - t1) + \" ms\");\n\n        /*\n         *  if(firstNotFound)\n         *  {\n         *  System.out.println(\"Couldn't find start page\");\n         *  System.exit(-1);\n         *  }\n         */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21b526e3e9974b2651365fbae52a976e6fc77aa4":["05d36e0b328ec96237035fbcca240e73631396e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["21b526e3e9974b2651365fbae52a976e6fc77aa4"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"21b526e3e9974b2651365fbae52a976e6fc77aa4":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["21b526e3e9974b2651365fbae52a976e6fc77aa4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}