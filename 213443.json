{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefList#testSort().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefList#testSort().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefList#testSort().mjava","sourceNew":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefList list = new BytesRefList();\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","sourceOld":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefList list = new BytesRefList();\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce73f585d17f53055185a19beb46db23d76e0ad9","date":1353077110,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefList#testSort().mjava","sourceNew":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray();\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","sourceOld":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefList list = new BytesRefList();\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefList#testSort().mjava","sourceNew":null,"sourceOld":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefList list = new BytesRefList();\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ce73f585d17f53055185a19beb46db23d76e0ad9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ce73f585d17f53055185a19beb46db23d76e0ad9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"ce73f585d17f53055185a19beb46db23d76e0ad9":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ce73f585d17f53055185a19beb46db23d76e0ad9","d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}