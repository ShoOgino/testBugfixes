{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addSortedSetField(FieldInfo,DocValuesProducer).mjava","commits":[{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addSortedSetField(FieldInfo,DocValuesProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n\n    Iterable<BytesRef> values = LegacyDocValuesIterables.valuesIterable(valuesProducer.getSortedSet(field));\n    Iterable<Number> docToOrdCount = LegacyDocValuesIterables.sortedSetOrdCountIterable(valuesProducer, field, maxDoc);\n    Iterable<Number> ords = LegacyDocValuesIterables.sortedSetOrdsIterable(valuesProducer, field);\n\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene70DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      final SortedSet<LongsRef> uniqueValueSets = uniqueValueSets(docToOrdCount, ords);\n      if (uniqueValueSets != null) {\n        meta.writeVInt(SORTED_SET_TABLE);\n\n        // write the set_id -> ords mapping\n        writeDictionary(uniqueValueSets);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the doc -> set_id as a numeric field\n        addNumericField(field, docToSetId(uniqueValueSets, docToOrdCount, ords), NumberType.ORDINAL);\n      } else {\n        meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the stream of ords as a numeric field\n        // NOTE: we could return an iterator that delta-encodes these within a doc\n        addNumericField(field, ords, NumberType.ORDINAL);\n\n        // write the doc -> ord count as a absolute index to the stream\n        addOrdIndex(field, docToOrdCount);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addSortedSetField(FieldInfo,DocValuesProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n\n    Iterable<BytesRef> values = LegacyDocValuesIterables.valuesIterable(valuesProducer.getSortedSet(field));\n    Iterable<Number> docToOrdCount = LegacyDocValuesIterables.sortedSetOrdCountIterable(valuesProducer, field, maxDoc);\n    Iterable<Number> ords = LegacyDocValuesIterables.sortedSetOrdsIterable(valuesProducer, field);\n\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene70DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      final SortedSet<LongsRef> uniqueValueSets = uniqueValueSets(docToOrdCount, ords);\n      if (uniqueValueSets != null) {\n        meta.writeVInt(SORTED_SET_TABLE);\n\n        // write the set_id -> ords mapping\n        writeDictionary(uniqueValueSets);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the doc -> set_id as a numeric field\n        addNumericField(field, docToSetId(uniqueValueSets, docToOrdCount, ords), NumberType.ORDINAL);\n      } else {\n        meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the stream of ords as a numeric field\n        // NOTE: we could return an iterator that delta-encodes these within a doc\n        addNumericField(field, ords, NumberType.ORDINAL);\n\n        // write the doc -> ord count as a absolute index to the stream\n        addOrdIndex(field, docToOrdCount);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addSortedSetField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addSortedSetField(FieldInfo,DocValuesProducer).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    meta.writeInt(field.number);\n    meta.writeByte(Lucene70DocValuesFormat.SORTED_SET);\n\n    SortedSetDocValues values = valuesProducer.getSortedSet(field);\n    int numDocsWithField = 0;\n    long numOrds = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithField++;\n      for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n        numOrds++;\n      }\n    }\n\n    if (numDocsWithField == numOrds) {\n      meta.writeByte((byte) 0);\n      doAddSortedField(field, new EmptyDocValuesProducer() {\n        @Override\n        public SortedDocValues getSorted(FieldInfo field) throws IOException {\n          return SortedSetSelector.wrap(valuesProducer.getSortedSet(field), SortedSetSelector.Type.MIN);\n        }\n      });\n      return;\n    }\n    meta.writeByte((byte) 1);\n\n    assert numDocsWithField != 0;\n    if (numDocsWithField == maxDoc) {\n      meta.writeLong(-1);\n      meta.writeLong(0L);\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset);\n      values = valuesProducer.getSortedSet(field);\n      IndexedDISI.writeBitSet(values, data);\n      meta.writeLong(data.getFilePointer() - offset);\n    }\n\n    int numberOfBitsPerOrd = DirectWriter.unsignedBitsRequired(values.getValueCount() - 1);\n    meta.writeByte((byte) numberOfBitsPerOrd);\n    long start = data.getFilePointer();\n    meta.writeLong(start);\n    DirectWriter writer = DirectWriter.getInstance(data, numOrds, numberOfBitsPerOrd);\n    values = valuesProducer.getSortedSet(field);\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n        writer.add(ord);\n      }\n    }\n    writer.finish();\n    meta.writeLong(data.getFilePointer() - start);\n\n    meta.writeInt(numDocsWithField);\n    start = data.getFilePointer();\n    meta.writeLong(start);\n    meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n    final DirectMonotonicWriter addressesWriter = DirectMonotonicWriter.getInstance(meta, data, numDocsWithField + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n    long addr = 0;\n    addressesWriter.add(addr);\n    values = valuesProducer.getSortedSet(field);\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      values.nextOrd();\n      addr++;\n      while (values.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n        addr++;\n      }\n      addressesWriter.add(addr);\n    }\n    addressesWriter.finish();\n    meta.writeLong(data.getFilePointer() - start);\n\n    addTermsDict(values);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n\n    Iterable<BytesRef> values = LegacyDocValuesIterables.valuesIterable(valuesProducer.getSortedSet(field));\n    Iterable<Number> docToOrdCount = LegacyDocValuesIterables.sortedSetOrdCountIterable(valuesProducer, field, maxDoc);\n    Iterable<Number> ords = LegacyDocValuesIterables.sortedSetOrdsIterable(valuesProducer, field);\n\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene70DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      final SortedSet<LongsRef> uniqueValueSets = uniqueValueSets(docToOrdCount, ords);\n      if (uniqueValueSets != null) {\n        meta.writeVInt(SORTED_SET_TABLE);\n\n        // write the set_id -> ords mapping\n        writeDictionary(uniqueValueSets);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the doc -> set_id as a numeric field\n        addNumericField(field, docToSetId(uniqueValueSets, docToOrdCount, ords), NumberType.ORDINAL);\n      } else {\n        meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the stream of ords as a numeric field\n        // NOTE: we could return an iterator that delta-encodes these within a doc\n        addNumericField(field, ords, NumberType.ORDINAL);\n\n        // write the doc -> ord count as a absolute index to the stream\n        addOrdIndex(field, docToOrdCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addSortedSetField(FieldInfo,DocValuesProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    meta.writeInt(field.number);\n    meta.writeByte(Lucene70DocValuesFormat.SORTED_SET);\n\n    SortedSetDocValues values = valuesProducer.getSortedSet(field);\n    int numDocsWithField = 0;\n    long numOrds = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithField++;\n      for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n        numOrds++;\n      }\n    }\n\n    if (numDocsWithField == numOrds) {\n      meta.writeByte((byte) 0);\n      doAddSortedField(field, new EmptyDocValuesProducer() {\n        @Override\n        public SortedDocValues getSorted(FieldInfo field) throws IOException {\n          return SortedSetSelector.wrap(valuesProducer.getSortedSet(field), SortedSetSelector.Type.MIN);\n        }\n      });\n      return;\n    }\n    meta.writeByte((byte) 1);\n\n    assert numDocsWithField != 0;\n    if (numDocsWithField == maxDoc) {\n      meta.writeLong(-1);\n      meta.writeLong(0L);\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset);\n      values = valuesProducer.getSortedSet(field);\n      IndexedDISI.writeBitSet(values, data);\n      meta.writeLong(data.getFilePointer() - offset);\n    }\n\n    int numberOfBitsPerOrd = DirectWriter.unsignedBitsRequired(values.getValueCount() - 1);\n    meta.writeByte((byte) numberOfBitsPerOrd);\n    long start = data.getFilePointer();\n    meta.writeLong(start);\n    DirectWriter writer = DirectWriter.getInstance(data, numOrds, numberOfBitsPerOrd);\n    values = valuesProducer.getSortedSet(field);\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n        writer.add(ord);\n      }\n    }\n    writer.finish();\n    meta.writeLong(data.getFilePointer() - start);\n\n    meta.writeInt(numDocsWithField);\n    start = data.getFilePointer();\n    meta.writeLong(start);\n    meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n    final DirectMonotonicWriter addressesWriter = DirectMonotonicWriter.getInstance(meta, data, numDocsWithField + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n    long addr = 0;\n    addressesWriter.add(addr);\n    values = valuesProducer.getSortedSet(field);\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      values.nextOrd();\n      addr++;\n      while (values.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n        addr++;\n      }\n      addressesWriter.add(addr);\n    }\n    addressesWriter.finish();\n    meta.writeLong(data.getFilePointer() - start);\n\n    addTermsDict(values);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":5,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addSortedSetField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addSortedSetField(FieldInfo,DocValuesProducer).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    meta.writeInt(field.number);\n    meta.writeByte(Lucene70DocValuesFormat.SORTED_SET);\n\n    SortedSetDocValues values = valuesProducer.getSortedSet(field);\n    int numDocsWithField = 0;\n    long numOrds = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithField++;\n      for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n        numOrds++;\n      }\n    }\n\n    if (numDocsWithField == numOrds) {\n      meta.writeByte((byte) 0);\n      doAddSortedField(field, new EmptyDocValuesProducer() {\n        @Override\n        public SortedDocValues getSorted(FieldInfo field) throws IOException {\n          return SortedSetSelector.wrap(valuesProducer.getSortedSet(field), SortedSetSelector.Type.MIN);\n        }\n      });\n      return;\n    }\n    meta.writeByte((byte) 1);\n\n    assert numDocsWithField != 0;\n    if (numDocsWithField == maxDoc) {\n      meta.writeLong(-1);\n      meta.writeLong(0L);\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset);\n      values = valuesProducer.getSortedSet(field);\n      IndexedDISI.writeBitSet(values, data);\n      meta.writeLong(data.getFilePointer() - offset);\n    }\n\n    int numberOfBitsPerOrd = DirectWriter.unsignedBitsRequired(values.getValueCount() - 1);\n    meta.writeByte((byte) numberOfBitsPerOrd);\n    long start = data.getFilePointer();\n    meta.writeLong(start);\n    DirectWriter writer = DirectWriter.getInstance(data, numOrds, numberOfBitsPerOrd);\n    values = valuesProducer.getSortedSet(field);\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n        writer.add(ord);\n      }\n    }\n    writer.finish();\n    meta.writeLong(data.getFilePointer() - start);\n\n    meta.writeInt(numDocsWithField);\n    start = data.getFilePointer();\n    meta.writeLong(start);\n    meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n    final DirectMonotonicWriter addressesWriter = DirectMonotonicWriter.getInstance(meta, data, numDocsWithField + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n    long addr = 0;\n    addressesWriter.add(addr);\n    values = valuesProducer.getSortedSet(field);\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      values.nextOrd();\n      addr++;\n      while (values.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n        addr++;\n      }\n      addressesWriter.add(addr);\n    }\n    addressesWriter.finish();\n    meta.writeLong(data.getFilePointer() - start);\n\n    addTermsDict(values);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    meta.writeInt(field.number);\n    meta.writeByte(Lucene70DocValuesFormat.SORTED_SET);\n\n    SortedSetDocValues values = valuesProducer.getSortedSet(field);\n    int numDocsWithField = 0;\n    long numOrds = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithField++;\n      for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n        numOrds++;\n      }\n    }\n\n    if (numDocsWithField == numOrds) {\n      meta.writeByte((byte) 0);\n      doAddSortedField(field, new EmptyDocValuesProducer() {\n        @Override\n        public SortedDocValues getSorted(FieldInfo field) throws IOException {\n          return SortedSetSelector.wrap(valuesProducer.getSortedSet(field), SortedSetSelector.Type.MIN);\n        }\n      });\n      return;\n    }\n    meta.writeByte((byte) 1);\n\n    assert numDocsWithField != 0;\n    if (numDocsWithField == maxDoc) {\n      meta.writeLong(-1);\n      meta.writeLong(0L);\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset);\n      values = valuesProducer.getSortedSet(field);\n      IndexedDISI.writeBitSet(values, data);\n      meta.writeLong(data.getFilePointer() - offset);\n    }\n\n    int numberOfBitsPerOrd = DirectWriter.unsignedBitsRequired(values.getValueCount() - 1);\n    meta.writeByte((byte) numberOfBitsPerOrd);\n    long start = data.getFilePointer();\n    meta.writeLong(start);\n    DirectWriter writer = DirectWriter.getInstance(data, numOrds, numberOfBitsPerOrd);\n    values = valuesProducer.getSortedSet(field);\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n        writer.add(ord);\n      }\n    }\n    writer.finish();\n    meta.writeLong(data.getFilePointer() - start);\n\n    meta.writeInt(numDocsWithField);\n    start = data.getFilePointer();\n    meta.writeLong(start);\n    meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n    final DirectMonotonicWriter addressesWriter = DirectMonotonicWriter.getInstance(meta, data, numDocsWithField + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n    long addr = 0;\n    addressesWriter.add(addr);\n    values = valuesProducer.getSortedSet(field);\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      values.nextOrd();\n      addr++;\n      while (values.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n        addr++;\n      }\n      addressesWriter.add(addr);\n    }\n    addressesWriter.finish();\n    meta.writeLong(data.getFilePointer() - start);\n\n    addTermsDict(values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addSortedSetField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addSortedSetField(FieldInfo,DocValuesProducer).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    meta.writeInt(field.number);\n    meta.writeByte(Lucene70DocValuesFormat.SORTED_SET);\n\n    SortedSetDocValues values = valuesProducer.getSortedSet(field);\n    int numDocsWithField = 0;\n    long numOrds = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithField++;\n      for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n        numOrds++;\n      }\n    }\n\n    if (numDocsWithField == numOrds) {\n      meta.writeByte((byte) 0);\n      doAddSortedField(field, new EmptyDocValuesProducer() {\n        @Override\n        public SortedDocValues getSorted(FieldInfo field) throws IOException {\n          return SortedSetSelector.wrap(valuesProducer.getSortedSet(field), SortedSetSelector.Type.MIN);\n        }\n      });\n      return;\n    }\n    meta.writeByte((byte) 1);\n\n    assert numDocsWithField != 0;\n    if (numDocsWithField == maxDoc) {\n      meta.writeLong(-1);\n      meta.writeLong(0L);\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset);\n      values = valuesProducer.getSortedSet(field);\n      IndexedDISI.writeBitSet(values, data);\n      meta.writeLong(data.getFilePointer() - offset);\n    }\n\n    int numberOfBitsPerOrd = DirectWriter.unsignedBitsRequired(values.getValueCount() - 1);\n    meta.writeByte((byte) numberOfBitsPerOrd);\n    long start = data.getFilePointer();\n    meta.writeLong(start);\n    DirectWriter writer = DirectWriter.getInstance(data, numOrds, numberOfBitsPerOrd);\n    values = valuesProducer.getSortedSet(field);\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n        writer.add(ord);\n      }\n    }\n    writer.finish();\n    meta.writeLong(data.getFilePointer() - start);\n\n    meta.writeInt(numDocsWithField);\n    start = data.getFilePointer();\n    meta.writeLong(start);\n    meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n    final DirectMonotonicWriter addressesWriter = DirectMonotonicWriter.getInstance(meta, data, numDocsWithField + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n    long addr = 0;\n    addressesWriter.add(addr);\n    values = valuesProducer.getSortedSet(field);\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      values.nextOrd();\n      addr++;\n      while (values.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n        addr++;\n      }\n      addressesWriter.add(addr);\n    }\n    addressesWriter.finish();\n    meta.writeLong(data.getFilePointer() - start);\n\n    addTermsDict(values);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    meta.writeInt(field.number);\n    meta.writeByte(Lucene70DocValuesFormat.SORTED_SET);\n\n    SortedSetDocValues values = valuesProducer.getSortedSet(field);\n    int numDocsWithField = 0;\n    long numOrds = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithField++;\n      for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n        numOrds++;\n      }\n    }\n\n    if (numDocsWithField == numOrds) {\n      meta.writeByte((byte) 0);\n      doAddSortedField(field, new EmptyDocValuesProducer() {\n        @Override\n        public SortedDocValues getSorted(FieldInfo field) throws IOException {\n          return SortedSetSelector.wrap(valuesProducer.getSortedSet(field), SortedSetSelector.Type.MIN);\n        }\n      });\n      return;\n    }\n    meta.writeByte((byte) 1);\n\n    assert numDocsWithField != 0;\n    if (numDocsWithField == maxDoc) {\n      meta.writeLong(-1);\n      meta.writeLong(0L);\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset);\n      values = valuesProducer.getSortedSet(field);\n      IndexedDISI.writeBitSet(values, data);\n      meta.writeLong(data.getFilePointer() - offset);\n    }\n\n    int numberOfBitsPerOrd = DirectWriter.unsignedBitsRequired(values.getValueCount() - 1);\n    meta.writeByte((byte) numberOfBitsPerOrd);\n    long start = data.getFilePointer();\n    meta.writeLong(start);\n    DirectWriter writer = DirectWriter.getInstance(data, numOrds, numberOfBitsPerOrd);\n    values = valuesProducer.getSortedSet(field);\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n        writer.add(ord);\n      }\n    }\n    writer.finish();\n    meta.writeLong(data.getFilePointer() - start);\n\n    meta.writeInt(numDocsWithField);\n    start = data.getFilePointer();\n    meta.writeLong(start);\n    meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n    final DirectMonotonicWriter addressesWriter = DirectMonotonicWriter.getInstance(meta, data, numDocsWithField + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n    long addr = 0;\n    addressesWriter.add(addr);\n    values = valuesProducer.getSortedSet(field);\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      values.nextOrd();\n      addr++;\n      while (values.nextOrd() != SortedSetDocValues.NO_MORE_ORDS) {\n        addr++;\n      }\n      addressesWriter.add(addr);\n    }\n    addressesWriter.finish();\n    meta.writeLong(data.getFilePointer() - start);\n\n    addTermsDict(values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["23e44daeaa8b89694d10df5999956c8e14a7dd09","03e17b020972a0d6e8d6823f545571a66646a167"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","084884d4602f4d1c7411eab29e897e349ce62675"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","23e44daeaa8b89694d10df5999956c8e14a7dd09"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"],"084884d4602f4d1c7411eab29e897e349ce62675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"1967bed916cc89da82a1c2085f27976da6d08cbd":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","084884d4602f4d1c7411eab29e897e349ce62675"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}