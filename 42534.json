{"path":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","commits":[{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists.\n     *\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator(null));\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists.\n     *\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator(null));\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists.\n     *\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator(null));\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists.\n     *\n     * @throws IOException\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator(null));\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists.\n     *\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator());\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists.\n     *\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator(null));\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9c5c0e8e826d8fd169840564bcf8606cf81d15b","date":1473715404,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":null,"sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists.\n     *\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator());\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":null,"sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists.\n     *\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator());\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":null,"sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists.\n     *\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator());\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#LinearFuzzyTermsEnum().mjava","sourceNew":null,"sourceOld":"    /**\n     * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n     * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n     * <code>minSimilarity</code>.\n     * <p>\n     * After calling the constructor the enumeration is already pointing to the first \n     * valid term if such a term exists.\n     *\n     * @throws IOException If there is a low-level I/O error.\n     */\n    public LinearFuzzyTermsEnum() throws IOException {\n      super(terms.iterator());\n\n      this.text = new int[termLength - realPrefixLength];\n      System.arraycopy(termText, realPrefixLength, text, 0, text.length);\n      final String prefix = UnicodeUtil.newString(termText, 0, realPrefixLength);\n      prefixBytesRef = new BytesRef(prefix);\n      this.d = new int[this.text.length + 1];\n      this.p = new int[this.text.length + 1];\n      \n      setInitialSeekTerm(prefixBytesRef);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","89424def13674ea17829b41c5883c54ecc31a132"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","b9c5c0e8e826d8fd169840564bcf8606cf81d15b"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","b9c5c0e8e826d8fd169840564bcf8606cf81d15b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}