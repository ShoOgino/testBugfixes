{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetImpl#ResultSetImpl(StatementImpl).mjava","commits":[{"id":"4bfa791a98ccf60d39ab77c21b92b710687fc3ac","date":1453238736,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetImpl#ResultSetImpl(StatementImpl).mjava","pathOld":"/dev/null","sourceNew":"  ResultSetImpl(StatementImpl statement) {\n    this.statement = statement;\n    this.solrStream = statement.getSolrStream();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec77e67e448734229255f16b8e0b1b4402f23095","date":1453748031,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetImpl#ResultSetImpl(StatementImpl).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetImpl#ResultSetImpl(StatementImpl).mjava","sourceNew":"  ResultSetImpl(StatementImpl statement) {\n    this.statement = statement;\n    this.solrStream = statement.getSolrStream();\n\n    // Read the first tuple so that metadata can be gathered\n    try {\n      this.metadataTuple = this.solrStream.read();\n\n      Object isMetadata = this.metadataTuple.get(\"isMetadata\");\n      if(isMetadata == null || !isMetadata.equals(true)) {\n        throw new RuntimeException(\"First tuple is not a metadata tuple\");\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Couldn't get metadata tuple\");\n    }\n\n    this.resultSetMetaData = new ResultSetMetaDataImpl(this);\n  }\n\n","sourceOld":"  ResultSetImpl(StatementImpl statement) {\n    this.statement = statement;\n    this.solrStream = statement.getSolrStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5097637ef592ed17c3125d5982c87b6629fcda6","date":1453823732,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetImpl#ResultSetImpl(StatementImpl).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetImpl#ResultSetImpl(StatementImpl).mjava","sourceNew":"  ResultSetImpl(StatementImpl statement) {\n    this.statement = statement;\n    this.solrStream = new PushBackStream(statement.getSolrStream());\n\n    // Read the first tuple so that metadata can be gathered\n    try {\n      this.metadataTuple = this.solrStream.read();\n\n      Object isMetadata = this.metadataTuple.get(\"isMetadata\");\n      if(isMetadata == null || !isMetadata.equals(true)) {\n        throw new RuntimeException(\"First tuple is not a metadata tuple\");\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Couldn't get metadata tuple\");\n    }\n\n    try {\n      this.firstTuple = this.solrStream.read();\n      this.solrStream.pushBack(firstTuple);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Couldn't get first tuple.\");\n    }\n\n    this.resultSetMetaData = new ResultSetMetaDataImpl(this);\n  }\n\n","sourceOld":"  ResultSetImpl(StatementImpl statement) {\n    this.statement = statement;\n    this.solrStream = statement.getSolrStream();\n\n    // Read the first tuple so that metadata can be gathered\n    try {\n      this.metadataTuple = this.solrStream.read();\n\n      Object isMetadata = this.metadataTuple.get(\"isMetadata\");\n      if(isMetadata == null || !isMetadata.equals(true)) {\n        throw new RuntimeException(\"First tuple is not a metadata tuple\");\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Couldn't get metadata tuple\");\n    }\n\n    this.resultSetMetaData = new ResultSetMetaDataImpl(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c39fd399a800c79eff2beaad702c9b6190d499fd","date":1453997311,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetImpl#ResultSetImpl(StatementImpl).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetImpl#ResultSetImpl(StatementImpl).mjava","sourceNew":"  ResultSetImpl(StatementImpl statement) {\n    this.statement = statement;\n    this.solrStream = new PushBackStream(statement.getSolrStream());\n\n    // Read the first tuple so that metadata can be gathered\n    try {\n      this.metadataTuple = this.solrStream.read();\n\n      Object isMetadata = this.metadataTuple.get(\"isMetadata\");\n      if(isMetadata == null || !isMetadata.equals(true)) {\n        throw new RuntimeException(\"First tuple is not a metadata tuple\");\n      }\n\n      this.firstTuple = this.solrStream.read();\n      this.solrStream.pushBack(firstTuple);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Couldn't read first tuple\", e);\n    }\n\n    this.resultSetMetaData = new ResultSetMetaDataImpl(this);\n  }\n\n","sourceOld":"  ResultSetImpl(StatementImpl statement) {\n    this.statement = statement;\n    this.solrStream = new PushBackStream(statement.getSolrStream());\n\n    // Read the first tuple so that metadata can be gathered\n    try {\n      this.metadataTuple = this.solrStream.read();\n\n      Object isMetadata = this.metadataTuple.get(\"isMetadata\");\n      if(isMetadata == null || !isMetadata.equals(true)) {\n        throw new RuntimeException(\"First tuple is not a metadata tuple\");\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Couldn't get metadata tuple\");\n    }\n\n    try {\n      this.firstTuple = this.solrStream.read();\n      this.solrStream.pushBack(firstTuple);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Couldn't get first tuple.\");\n    }\n\n    this.resultSetMetaData = new ResultSetMetaDataImpl(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetImpl#ResultSetImpl(StatementImpl).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetImpl#ResultSetImpl(StatementImpl).mjava","sourceNew":"  ResultSetImpl(StatementImpl statement) {\n    this.statement = statement;\n    this.solrStream = new PushBackStream(statement.getSolrStream());\n\n    // Read the first tuple so that metadata can be gathered\n    try {\n      this.metadataTuple = this.solrStream.read();\n\n      Object isMetadata = this.metadataTuple.get(\"isMetadata\");\n      if(isMetadata == null || !isMetadata.equals(true)) {\n        throw new RuntimeException(\"First tuple is not a metadata tuple\");\n      }\n\n      this.firstTuple = this.solrStream.read();\n      this.solrStream.pushBack(firstTuple);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Couldn't read first tuple\", e);\n    }\n\n    this.resultSetMetaData = new ResultSetMetaDataImpl(this);\n  }\n\n","sourceOld":"  ResultSetImpl(StatementImpl statement) {\n    this.statement = statement;\n    this.solrStream = new PushBackStream(statement.getSolrStream());\n\n    // Read the first tuple so that metadata can be gathered\n    try {\n      this.metadataTuple = this.solrStream.read();\n\n      Object isMetadata = this.metadataTuple.get(\"isMetadata\");\n      if(isMetadata == null || !isMetadata.equals(true)) {\n        throw new RuntimeException(\"First tuple is not a metadata tuple\");\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Couldn't get metadata tuple\");\n    }\n\n    try {\n      this.firstTuple = this.solrStream.read();\n      this.solrStream.pushBack(firstTuple);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Couldn't get first tuple.\");\n    }\n\n    this.resultSetMetaData = new ResultSetMetaDataImpl(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2af3708aa5f155e8f27905be60c119be0e39be8","date":1454361673,"type":5,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetImpl#ResultSetImpl(StatementImpl,SolrStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetImpl#ResultSetImpl(StatementImpl).mjava","sourceNew":"  ResultSetImpl(StatementImpl statement, SolrStream solrStream) throws SQLException {\n    this.statement = statement;\n\n    try {\n      this.solrStream = new PushBackStream(solrStream);\n\n      StreamContext context = new StreamContext();\n      context.setSolrClientCache(((ConnectionImpl)this.statement.getConnection()).getSolrClientCache());\n      this.solrStream.setStreamContext(context);\n\n      this.solrStream.open();\n\n      this.metadataTuple = this.solrStream.read();\n\n      Object isMetadata = this.metadataTuple.get(\"isMetadata\");\n      if(isMetadata == null || !isMetadata.equals(true)) {\n        throw new RuntimeException(\"First tuple is not a metadata tuple\");\n      }\n\n      this.firstTuple = this.solrStream.read();\n      this.solrStream.pushBack(firstTuple);\n    } catch (IOException e) {\n      throw new SQLException(\"Couldn't read first tuple\", e);\n    }\n\n    this.resultSetMetaData = new ResultSetMetaDataImpl(this);\n  }\n\n","sourceOld":"  ResultSetImpl(StatementImpl statement) {\n    this.statement = statement;\n    this.solrStream = new PushBackStream(statement.getSolrStream());\n\n    // Read the first tuple so that metadata can be gathered\n    try {\n      this.metadataTuple = this.solrStream.read();\n\n      Object isMetadata = this.metadataTuple.get(\"isMetadata\");\n      if(isMetadata == null || !isMetadata.equals(true)) {\n        throw new RuntimeException(\"First tuple is not a metadata tuple\");\n      }\n\n      this.firstTuple = this.solrStream.read();\n      this.solrStream.pushBack(firstTuple);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Couldn't read first tuple\", e);\n    }\n\n    this.resultSetMetaData = new ResultSetMetaDataImpl(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/ResultSetImpl#ResultSetImpl(StatementImpl).mjava","sourceNew":null,"sourceOld":"  ResultSetImpl(StatementImpl statement) {\n    this.statement = statement;\n    this.solrStream = statement.getSolrStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2af3708aa5f155e8f27905be60c119be0e39be8":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"d5097637ef592ed17c3125d5982c87b6629fcda6":["ec77e67e448734229255f16b8e0b1b4402f23095"],"c39fd399a800c79eff2beaad702c9b6190d499fd":["d5097637ef592ed17c3125d5982c87b6629fcda6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["4bfa791a98ccf60d39ab77c21b92b710687fc3ac","d2af3708aa5f155e8f27905be60c119be0e39be8"],"ec77e67e448734229255f16b8e0b1b4402f23095":["4bfa791a98ccf60d39ab77c21b92b710687fc3ac"],"4bfa791a98ccf60d39ab77c21b92b710687fc3ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["d5097637ef592ed17c3125d5982c87b6629fcda6","c39fd399a800c79eff2beaad702c9b6190d499fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2af3708aa5f155e8f27905be60c119be0e39be8"]},"commit2Childs":{"d2af3708aa5f155e8f27905be60c119be0e39be8":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5097637ef592ed17c3125d5982c87b6629fcda6":["c39fd399a800c79eff2beaad702c9b6190d499fd","8d15e34266d75e4e8b95da046cd0afc812367b38"],"c39fd399a800c79eff2beaad702c9b6190d499fd":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4bfa791a98ccf60d39ab77c21b92b710687fc3ac"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"ec77e67e448734229255f16b8e0b1b4402f23095":["d5097637ef592ed17c3125d5982c87b6629fcda6"],"4bfa791a98ccf60d39ab77c21b92b710687fc3ac":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","ec77e67e448734229255f16b8e0b1b4402f23095"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["d2af3708aa5f155e8f27905be60c119be0e39be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}