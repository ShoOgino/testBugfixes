{"path":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder#DistanceQueryBuilder(double,double,double,String,String,String,boolean).mjava","commits":[{"id":"c057d06d0103fe57745280be1f2e5da933210462","date":1230866483,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder#DistanceQueryBuilder(double,double,double,String,String,String,boolean).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder#DistanceQueryBuilder(double,double,double,String,String,boolean).mjava","sourceNew":"  /**\n   * Create a distance query using\n   * a boundary box wrapper around a more precise\n   * DistanceFilter.\n   * \n   * @see SerialChainFilter\n   * @param lat\n   * @param lng\n   * @param miles\n   */\n  public DistanceQueryBuilder (double lat, double lng, double miles, \n      String latField, String lngField, String tierFieldPrefix, boolean needPrecise){\n\n    this.lat = lat;\n    this.lng = lng;\n    this.miles = miles;\n    \n    \n    CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder(tierFieldPrefix);\n    cartesianFilter = cpf.getBoundingArea(lat, lng, (int)miles);\n\n    /* create precise distance filter */\n    if( needPrecise)\n    \tdistanceFilter = new DistanceFilter(lat, lng, miles, latField, lngField);\n    \n  }\n\n","sourceOld":"  /**\n   * Create a distance query using\n   * a boundary box wrapper around a more precise\n   * DistanceFilter.\n   * \n   * @see SerialChainFilter\n   * @param lat\n   * @param lng\n   * @param miles\n   */\n  public DistanceQueryBuilder (double lat, double lng, double miles, String latField, String lngField, boolean needPrecise){\n\n    this.lat = lat;\n    this.lng = lng;\n    this.miles = miles;\n    \n    \n    CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder();\n    cartesianFilter = cpf.getBoundingArea(lat, lng, (int)miles);\n\n    /* create precise distance filter */\n    if( needPrecise)\n    \tdistanceFilter = new DistanceFilter(lat, lng, miles, latField, lngField);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0584ee2be458044f19041ac184df00c69c632b4d","date":1231348258,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder#DistanceQueryBuilder(double,double,double,String,String,String,boolean).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder#DistanceQueryBuilder(double,double,double,String,String,String,boolean).mjava","sourceNew":"  /**\n   * Create a distance query using\n   * a boundary box wrapper around a more precise\n   * DistanceFilter.\n   * \n   * @see SerialChainFilter\n   * @param lat\n   * @param lng\n   * @param miles\n   */\n  public DistanceQueryBuilder (double lat, double lng, double miles, \n      String latField, String lngField, String tierFieldPrefix,boolean needPrecise){\n\n    this.lat = lat;\n    this.lng = lng;\n    this.miles = miles;\n    \n    \n    CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder(tierFieldPrefix);\n    cartesianFilter = cpf.getBoundingArea(lat, lng, (int)miles);\n\n    /* create precise distance filter */\n    if( needPrecise)\n    \tdistanceFilter = new LatLongDistanceFilter(lat, lng, miles, latField, lngField);\n    \n  }\n\n","sourceOld":"  /**\n   * Create a distance query using\n   * a boundary box wrapper around a more precise\n   * DistanceFilter.\n   * \n   * @see SerialChainFilter\n   * @param lat\n   * @param lng\n   * @param miles\n   */\n  public DistanceQueryBuilder (double lat, double lng, double miles, \n      String latField, String lngField, String tierFieldPrefix, boolean needPrecise){\n\n    this.lat = lat;\n    this.lng = lng;\n    this.miles = miles;\n    \n    \n    CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder(tierFieldPrefix);\n    cartesianFilter = cpf.getBoundingArea(lat, lng, (int)miles);\n\n    /* create precise distance filter */\n    if( needPrecise)\n    \tdistanceFilter = new DistanceFilter(lat, lng, miles, latField, lngField);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9b91c7ae03ba4798dc0c01130cd595eec8b1c8c","date":1237596387,"type":3,"author":"Patrick O'Leary","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder#DistanceQueryBuilder(double,double,double,String,String,String,boolean).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder#DistanceQueryBuilder(double,double,double,String,String,String,boolean).mjava","sourceNew":"  /**\n   * Create a distance query using\n   * a boundary box wrapper around a more precise\n   * DistanceFilter.\n   * \n   * @see SerialChainFilter\n   * @param lat\n   * @param lng\n   * @param miles\n   */\n  public DistanceQueryBuilder (double lat, double lng, double miles, \n      String latField, String lngField, String tierFieldPrefix,boolean needPrecise){\n\n    this.lat = lat;\n    this.lng = lng;\n    this.miles = miles;\n    this.needPrecision = needPrecise;\n    \n    \n    CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder(tierFieldPrefix);\n    cartesianFilter = cpf.getBoundingArea(lat, lng, (int)miles);\n\n    /* create precise distance filter */\n    if( needPrecise)\n    \tdistanceFilter = new LatLongDistanceFilter(lat, lng, miles, latField, lngField);\n    \n  }\n\n","sourceOld":"  /**\n   * Create a distance query using\n   * a boundary box wrapper around a more precise\n   * DistanceFilter.\n   * \n   * @see SerialChainFilter\n   * @param lat\n   * @param lng\n   * @param miles\n   */\n  public DistanceQueryBuilder (double lat, double lng, double miles, \n      String latField, String lngField, String tierFieldPrefix,boolean needPrecise){\n\n    this.lat = lat;\n    this.lng = lng;\n    this.miles = miles;\n    \n    \n    CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder(tierFieldPrefix);\n    cartesianFilter = cpf.getBoundingArea(lat, lng, (int)miles);\n\n    /* create precise distance filter */\n    if( needPrecise)\n    \tdistanceFilter = new LatLongDistanceFilter(lat, lng, miles, latField, lngField);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d41c10b9c61bc826acd344f499e062fb46bc42ae","date":1249408917,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder#DistanceQueryBuilder(double,double,double,String,String,String,boolean).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder#DistanceQueryBuilder(double,double,double,String,String,String,boolean).mjava","sourceNew":"  /**\n   * Create a distance query using\n   * a boundary box wrapper around a more precise\n   * DistanceFilter.\n   * \n   * @param lat\n   * @param lng\n   * @param miles\n   */\n  public DistanceQueryBuilder (double lat, double lng, double miles, \n      String latField, String lngField, String tierFieldPrefix, boolean needPrecise) {\n\n    this.lat = lat;\n    this.lng = lng;\n    this.miles = miles;\n    \n    CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder(tierFieldPrefix);\n    Filter cartesianFilter = cpf.getBoundingArea(lat, lng, miles);\n\n    /* create precise distance filter */\n    if (needPrecise) {\n      filter = distanceFilter = new LatLongDistanceFilter(cartesianFilter, lat, lng, miles, latField, lngField);\n    } else {\n      filter = cartesianFilter;\n      distanceFilter = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a distance query using\n   * a boundary box wrapper around a more precise\n   * DistanceFilter.\n   * \n   * @see SerialChainFilter\n   * @param lat\n   * @param lng\n   * @param miles\n   */\n  public DistanceQueryBuilder (double lat, double lng, double miles, \n      String latField, String lngField, String tierFieldPrefix,boolean needPrecise){\n\n    this.lat = lat;\n    this.lng = lng;\n    this.miles = miles;\n    this.needPrecision = needPrecise;\n    \n    \n    CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder(tierFieldPrefix);\n    cartesianFilter = cpf.getBoundingArea(lat, lng, (int)miles);\n\n    /* create precise distance filter */\n    if( needPrecise)\n    \tdistanceFilter = new LatLongDistanceFilter(lat, lng, miles, latField, lngField);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder#DistanceQueryBuilder(double,double,double,String,String,String,boolean).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder#DistanceQueryBuilder(double,double,double,String,String,String,boolean).mjava","sourceNew":"  /**\n   * Create a distance query using\n   * a boundary box wrapper around a more precise\n   * DistanceFilter.\n   * \n   * @param lat\n   * @param lng\n   * @param miles\n   */\n  public DistanceQueryBuilder (double lat, double lng, double miles, \n      String latField, String lngField, String tierFieldPrefix, boolean needPrecise) {\n\n    this.lat = lat;\n    this.lng = lng;\n    this.miles = miles;\n    \n    CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder(tierFieldPrefix);\n    Filter cartesianFilter = cpf.getBoundingArea(lat, lng, miles);\n\n    /* create precise distance filter */\n    if (needPrecise) {\n      filter = distanceFilter = new LatLongDistanceFilter(cartesianFilter, lat, lng, miles, latField, lngField);\n    } else {\n      filter = cartesianFilter;\n      distanceFilter = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a distance query using\n   * a boundary box wrapper around a more precise\n   * DistanceFilter.\n   * \n   * @param lat\n   * @param lng\n   * @param miles\n   */\n  public DistanceQueryBuilder (double lat, double lng, double miles, \n      String latField, String lngField, String tierFieldPrefix, boolean needPrecise) {\n\n    this.lat = lat;\n    this.lng = lng;\n    this.miles = miles;\n    \n    CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder(tierFieldPrefix);\n    Filter cartesianFilter = cpf.getBoundingArea(lat, lng, miles);\n\n    /* create precise distance filter */\n    if (needPrecise) {\n      filter = distanceFilter = new LatLongDistanceFilter(cartesianFilter, lat, lng, miles, latField, lngField);\n    } else {\n      filter = cartesianFilter;\n      distanceFilter = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e9b91c7ae03ba4798dc0c01130cd595eec8b1c8c":["0584ee2be458044f19041ac184df00c69c632b4d"],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["e9b91c7ae03ba4798dc0c01130cd595eec8b1c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d41c10b9c61bc826acd344f499e062fb46bc42ae"],"0584ee2be458044f19041ac184df00c69c632b4d":["c057d06d0103fe57745280be1f2e5da933210462"],"c057d06d0103fe57745280be1f2e5da933210462":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c057d06d0103fe57745280be1f2e5da933210462"],"e9b91c7ae03ba4798dc0c01130cd595eec8b1c8c":["d41c10b9c61bc826acd344f499e062fb46bc42ae"],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0584ee2be458044f19041ac184df00c69c632b4d":["e9b91c7ae03ba4798dc0c01130cd595eec8b1c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c057d06d0103fe57745280be1f2e5da933210462":["0584ee2be458044f19041ac184df00c69c632b4d"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}