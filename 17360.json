{"path":"src/test/org/apache/lucene/index/TestMultiReader#testIsCurrent().mjava","commits":[{"id":"09b1d6bb7960af6daf734195c6353ec14a0c95c0","date":1169589665,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiReader#testIsCurrent().mjava","pathOld":"/dev/null","sourceNew":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07ef68fd341288151fb0f6d34d3291ea006bb0f5","date":1169592880,"type":4,"author":"Daniel Naber","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestMultiReader#testIsCurrent().mjava","sourceNew":null,"sourceOld":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f2552b9f13037c62acd400d263d1e9262d6e4e","date":1185490328,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiReader#testIsCurrent().mjava","pathOld":"/dev/null","sourceNew":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiSegmentReader#testIsCurrent().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["07ef68fd341288151fb0f6d34d3291ea006bb0f5"],"09b1d6bb7960af6daf734195c6353ec14a0c95c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"07ef68fd341288151fb0f6d34d3291ea006bb0f5":["09b1d6bb7960af6daf734195c6353ec14a0c95c0"]},"commit2Childs":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09b1d6bb7960af6daf734195c6353ec14a0c95c0"],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"09b1d6bb7960af6daf734195c6353ec14a0c95c0":["07ef68fd341288151fb0f6d34d3291ea006bb0f5"],"07ef68fd341288151fb0f6d34d3291ea006bb0f5":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}