{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#tokenStream(String,Reader).mjava","commits":[{"id":"0d8c222875ac4ef7e08f3e25d40508b821d711ff","date":1257374221,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#tokenStream(String,Reader).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a token stream that tokenizes all the text in the given Reader;\n   * This implementation forwards to <code>tokenStream(String, String)</code> and is\n   * less efficient than <code>tokenStream(String, String)</code>.\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            the reader delivering the text\n   * @return a new token stream\n   */\n  public TokenStream tokenStream(String fieldName, Reader reader) {\n    if (reader instanceof FastStringReader) { // fast path\n      return tokenStream(fieldName, ((FastStringReader)reader).getString());\n    }\n    \n    try {\n      String text = toString(reader);\n      return tokenStream(fieldName, text);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream that tokenizes all the text in the given Reader;\n   * This implementation forwards to <code>tokenStream(String, String)</code> and is\n   * less efficient than <code>tokenStream(String, String)</code>.\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            the reader delivering the text\n   * @return a new token stream\n   */\n  public TokenStream tokenStream(String fieldName, Reader reader) {\n    if (reader instanceof FastStringReader) { // fast path\n      return tokenStream(fieldName, ((FastStringReader)reader).getString());\n    }\n    \n    try {\n      String text = toString(reader);\n      return tokenStream(fieldName, text);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#tokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a token stream that tokenizes all the text in the given Reader;\n   * This implementation forwards to <code>tokenStream(String, String)</code> and is\n   * less efficient than <code>tokenStream(String, String)</code>.\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            the reader delivering the text\n   * @return a new token stream\n   */\n  @Override\n  public TokenStream tokenStream(String fieldName, Reader reader) {\n    if (reader instanceof FastStringReader) { // fast path\n      return tokenStream(fieldName, ((FastStringReader)reader).getString());\n    }\n    \n    try {\n      String text = toString(reader);\n      return tokenStream(fieldName, text);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream that tokenizes all the text in the given Reader;\n   * This implementation forwards to <code>tokenStream(String, String)</code> and is\n   * less efficient than <code>tokenStream(String, String)</code>.\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            the reader delivering the text\n   * @return a new token stream\n   */\n  public TokenStream tokenStream(String fieldName, Reader reader) {\n    if (reader instanceof FastStringReader) { // fast path\n      return tokenStream(fieldName, ((FastStringReader)reader).getString());\n    }\n    \n    try {\n      String text = toString(reader);\n      return tokenStream(fieldName, text);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#tokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a token stream that tokenizes all the text in the given Reader;\n   * This implementation forwards to <code>tokenStream(String, String)</code> and is\n   * less efficient than <code>tokenStream(String, String)</code>.\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            the reader delivering the text\n   * @return a new token stream\n   */\n  @Override\n  public TokenStream tokenStream(String fieldName, Reader reader) {\n    if (reader instanceof FastStringReader) { // fast path\n      return tokenStream(fieldName, ((FastStringReader)reader).getString());\n    }\n    \n    try {\n      String text = toString(reader);\n      return tokenStream(fieldName, text);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream that tokenizes all the text in the given Reader;\n   * This implementation forwards to <code>tokenStream(String, String)</code> and is\n   * less efficient than <code>tokenStream(String, String)</code>.\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            the reader delivering the text\n   * @return a new token stream\n   */\n  @Override\n  public TokenStream tokenStream(String fieldName, Reader reader) {\n    if (reader instanceof FastStringReader) { // fast path\n      return tokenStream(fieldName, ((FastStringReader)reader).getString());\n    }\n    \n    try {\n      String text = toString(reader);\n      return tokenStream(fieldName, text);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d8c222875ac4ef7e08f3e25d40508b821d711ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["0d8c222875ac4ef7e08f3e25d40508b821d711ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"0d8c222875ac4ef7e08f3e25d40508b821d711ff":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d8c222875ac4ef7e08f3e25d40508b821d711ff"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}