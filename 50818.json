{"path":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(Terms,AttributeSource,Term,int,int,CompiledAutomaton[]).mjava","commits":[{"id":"3e99d92de6748e3bbd2dd7b72695cdb952b2d835","date":1579100291,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(Terms,AttributeSource,Term,int,int,CompiledAutomaton[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(Terms,AttributeSource,Term,int,int,boolean).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have at most {@code maxEdits} edits.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param terms Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   *              that contains information about competitive boosts during rewrite\n   * @param term Pattern term.\n   * @param maxEdits Maximum edit distance.\n   * @param automata An array of levenshtein automata to match against terms,\n   *                 see {@link #buildAutomata(String, int[], int, boolean, int)}\n   * @throws IOException if there is a low-level IO error\n   */\n  public FuzzyTermsEnum(Terms terms, AttributeSource atts, Term term, int termLength,\n      final int maxEdits, CompiledAutomaton[] automata) throws IOException {\n\n    this.maxEdits = maxEdits;\n    this.terms = terms;\n    this.term = term;\n    this.atts = atts;\n    this.termLength = termLength;\n\n    this.maxBoostAtt = atts.addAttribute(MaxNonCompetitiveBoostAttribute.class);\n    this.boostAtt = atts.addAttribute(BoostAttribute.class);\n\n    this.automata = automata;\n\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null);\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have at most {@code maxEdits} edits.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param terms Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param maxEdits Maximum edit distance.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException if there is a low-level IO error\n   */\n  public FuzzyTermsEnum(Terms terms, AttributeSource atts, Term term, \n      final int maxEdits, final int prefixLength, boolean transpositions) throws IOException {\n    if (maxEdits < 0 || maxEdits > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      throw new IllegalArgumentException(\"max edits must be 0..\" + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE + \", inclusive; got: \" + maxEdits);\n    }\n    if (prefixLength < 0) {\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    }\n    this.maxEdits = maxEdits;\n    this.terms = terms;\n    this.term = term;\n    \n    // convert the string into a utf32 int[] representation for fast comparisons\n    this.termText = stringToUTF32(term.text());\n    this.termLength = termText.length;\n\n    this.dfaAtt = atts.addAttribute(LevenshteinAutomataAttribute.class);\n    this.maxBoostAtt = atts.addAttribute(MaxNonCompetitiveBoostAttribute.class);\n\n    // NOTE: boostAtt must pulled from attributes() not from atts!  This is because TopTermsRewrite looks for boostAtt from this TermsEnum's\n    // private attributes() and not the global atts passed to us from MultiTermQuery:\n    this.boostAtt = attributes().addAttribute(BoostAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    this.transpositions = transpositions;\n\n    CompiledAutomaton[] prevAutomata = dfaAtt.automata();\n    if (prevAutomata == null) {\n      prevAutomata = new CompiledAutomaton[maxEdits+1];\n      Automaton[] automata = buildAutomata(termText, prefixLength, transpositions, maxEdits);\n      for (int i = 0; i <= maxEdits; i++) {\n        try {\n          prevAutomata[i] = new CompiledAutomaton(automata[i], true, false);\n        } catch (TooComplexToDeterminizeException e) {\n          throw new FuzzyTermsException(term.text(), e);\n        }\n      }\n      // first segment computes the automata, and we share with subsequent segments via this Attribute:\n      dfaAtt.setAutomata(prevAutomata);\n    }\n\n    this.automata = prevAutomata;\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad855e2f1f69c5e330d1027a5d54f8814e47a0d6","date":1588847334,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(Terms,AttributeSource,Term,int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(Terms,AttributeSource,Term,int,int,CompiledAutomaton[]).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have at most {@code maxEdits} edits.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first\n   * valid term if such a term exists.\n   *\n   * @param terms Delivers terms.\n   * @param atts An AttributeSource used to share automata between segments\n   * @param term Pattern term.\n   * @param maxEdits Maximum edit distance.\n   * @param prefixLength the length of the required common prefix\n   * @param transpositions whether transpositions should count as a single edit\n   * @throws IOException if there is a low-level IO error\n   */\n  FuzzyTermsEnum(Terms terms, AttributeSource atts, Term term, int maxEdits, int prefixLength, boolean transpositions) throws IOException {\n    this(terms, atts, term, () -> new FuzzyAutomatonBuilder(term.text(), maxEdits, prefixLength, transpositions));\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have at most {@code maxEdits} edits.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param terms Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   *              that contains information about competitive boosts during rewrite\n   * @param term Pattern term.\n   * @param maxEdits Maximum edit distance.\n   * @param automata An array of levenshtein automata to match against terms,\n   *                 see {@link #buildAutomata(String, int[], int, boolean, int)}\n   * @throws IOException if there is a low-level IO error\n   */\n  public FuzzyTermsEnum(Terms terms, AttributeSource atts, Term term, int termLength,\n      final int maxEdits, CompiledAutomaton[] automata) throws IOException {\n\n    this.maxEdits = maxEdits;\n    this.terms = terms;\n    this.term = term;\n    this.atts = atts;\n    this.termLength = termLength;\n\n    this.maxBoostAtt = atts.addAttribute(MaxNonCompetitiveBoostAttribute.class);\n    this.boostAtt = atts.addAttribute(BoostAttribute.class);\n\n    this.automata = automata;\n\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e99d92de6748e3bbd2dd7b72695cdb952b2d835":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad855e2f1f69c5e330d1027a5d54f8814e47a0d6":["3e99d92de6748e3bbd2dd7b72695cdb952b2d835"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad855e2f1f69c5e330d1027a5d54f8814e47a0d6"]},"commit2Childs":{"3e99d92de6748e3bbd2dd7b72695cdb952b2d835":["ad855e2f1f69c5e330d1027a5d54f8814e47a0d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e99d92de6748e3bbd2dd7b72695cdb952b2d835"],"ad855e2f1f69c5e330d1027a5d54f8814e47a0d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}