{"path":"lucene/backwards/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(reader, field, (FieldCache.ByteParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(reader, field, (FieldCache.ByteParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(reader, field, (FieldCache.ByteParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}