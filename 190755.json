{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder#getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder#getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder#getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double).mjava","sourceNew":"  public Shape getShapeLoop(Shape shape, CartesianTierPlotter ctp, double latX, double longX, double latY, double longY)\n  {  \n \n    //System.err.println(\"getShapeLoop:\"+latY+\",\" + longY);\n    //System.err.println(\"getShapeLoop:\"+latX+\",\" + longX);\n    double beginAt = ctp.getTierBoxId(latX, longX);\n    double endAt = ctp.getTierBoxId(latY, longY);\n    \n    double tierVert = ctp.getTierVerticalPosDivider();\n    //System.err.println(\" | \"+ beginAt+\" | \"+ endAt);\n    \n    double startX = beginAt - (beginAt %1);\n    double startY = beginAt - startX ; //should give a whole number\n    \n    double endX = endAt - (endAt %1);\n    double endY = endAt -endX; //should give a whole number\n    \n    int scale = (int)Math.log10(tierVert);\n    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    double xInc = 1.0d / tierVert;\n    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    \n    //System.err.println(\"go from startX:\"+startX+\" to:\" + endX);\n    for (; startX <= endX; startX++){\n      \n      double itY = startY;\n      //System.err.println(\"go from startY:\"+startY+\" to:\" + endY);\n      while (itY <= endY){\n        //create a boxId\n        // startX.startY\n        double boxId = startX + itY ;\n        shape.addBox(boxId);\n        //System.err.println(\"----\"+startX+\" and \"+itY);\n        //System.err.println(\"----\"+boxId);\n        itY += xInc;\n        \n        // java keeps 0.0001 as 1.0E-1\n        // which ends up as 0.00011111\n        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n      }\n    }\n    return shape;\n  }\n\n","sourceOld":"  public Shape getShapeLoop(Shape shape, CartesianTierPlotter ctp, double latX, double longX, double latY, double longY)\n  {  \n \n    //System.err.println(\"getShapeLoop:\"+latY+\",\" + longY);\n    //System.err.println(\"getShapeLoop:\"+latX+\",\" + longX);\n    double beginAt = ctp.getTierBoxId(latX, longX);\n    double endAt = ctp.getTierBoxId(latY, longY);\n    \n    double tierVert = ctp.getTierVerticalPosDivider();\n    //System.err.println(\" | \"+ beginAt+\" | \"+ endAt);\n    \n    double startX = beginAt - (beginAt %1);\n    double startY = beginAt - startX ; //should give a whole number\n    \n    double endX = endAt - (endAt %1);\n    double endY = endAt -endX; //should give a whole number\n    \n    int scale = (int)Math.log10(tierVert);\n    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    double xInc = 1.0d / tierVert;\n    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    \n    //System.err.println(\"go from startX:\"+startX+\" to:\" + endX);\n    for (; startX <= endX; startX++){\n      \n      double itY = startY;\n      //System.err.println(\"go from startY:\"+startY+\" to:\" + endY);\n      while (itY <= endY){\n        //create a boxId\n        // startX.startY\n        double boxId = startX + itY ;\n        shape.addBox(boxId);\n        //System.err.println(\"----\"+startX+\" and \"+itY);\n        //System.err.println(\"----\"+boxId);\n        itY += xInc;\n        \n        // java keeps 0.0001 as 1.0E-1\n        // which ends up as 0.00011111\n        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n      }\n    }\n    return shape;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"898a51f1e284c6a04897872ac91d1180e7216937","date":1270127087,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder#getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder#getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double).mjava","sourceNew":"  public Shape getShapeLoop(Shape shape, CartesianTierPlotter ctp, double latX, double longX, double latY, double longY)\n  {  \n \n    //System.err.println(\"getShapeLoop:\"+latY+\",\" + longY);\n    //System.err.println(\"getShapeLoop:\"+latX+\",\" + longX);\n    double beginAt = ctp.getTierBoxId(latX, longX);\n    double endAt = ctp.getTierBoxId(latY, longY);\n    if (beginAt > endAt){\n\t      double tmp = beginAt;\n\t      beginAt = endAt;\n\t      endAt = tmp;\n\t}\n    double tierVert = ctp.getTierVerticalPosDivider();\n    //System.err.println(\" | \"+ beginAt+\" | \"+ endAt);\n    \n    double startX = beginAt - (beginAt %1);\n    double startY = beginAt - startX ; //should give a whole number\n    \n    double endX = endAt - (endAt %1);\n    double endY = endAt -endX; //should give a whole number\n    \n    int scale = (int)Math.log10(tierVert);\n    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    double xInc = 1.0d / tierVert;\n    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    \n    //System.err.println(\"go from startX:\"+startX+\" to:\" + endX);\n    for (; startX <= endX; startX++){\n      \n      double itY = startY;\n      //System.err.println(\"go from startY:\"+startY+\" to:\" + endY);\n      while (itY <= endY){\n        //create a boxId\n        // startX.startY\n        double boxId = startX + itY ;\n        shape.addBox(boxId);\n        //System.err.println(\"----\"+startX+\" and \"+itY);\n        //System.err.println(\"----\"+boxId);\n        itY += xInc;\n        \n        // java keeps 0.0001 as 1.0E-1\n        // which ends up as 0.00011111\n        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n      }\n    }\n    return shape;\n  }\n\n","sourceOld":"  public Shape getShapeLoop(Shape shape, CartesianTierPlotter ctp, double latX, double longX, double latY, double longY)\n  {  \n \n    //System.err.println(\"getShapeLoop:\"+latY+\",\" + longY);\n    //System.err.println(\"getShapeLoop:\"+latX+\",\" + longX);\n    double beginAt = ctp.getTierBoxId(latX, longX);\n    double endAt = ctp.getTierBoxId(latY, longY);\n    \n    double tierVert = ctp.getTierVerticalPosDivider();\n    //System.err.println(\" | \"+ beginAt+\" | \"+ endAt);\n    \n    double startX = beginAt - (beginAt %1);\n    double startY = beginAt - startX ; //should give a whole number\n    \n    double endX = endAt - (endAt %1);\n    double endY = endAt -endX; //should give a whole number\n    \n    int scale = (int)Math.log10(tierVert);\n    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    double xInc = 1.0d / tierVert;\n    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    \n    //System.err.println(\"go from startX:\"+startX+\" to:\" + endX);\n    for (; startX <= endX; startX++){\n      \n      double itY = startY;\n      //System.err.println(\"go from startY:\"+startY+\" to:\" + endY);\n      while (itY <= endY){\n        //create a boxId\n        // startX.startY\n        double boxId = startX + itY ;\n        shape.addBox(boxId);\n        //System.err.println(\"----\"+startX+\" and \"+itY);\n        //System.err.println(\"----\"+boxId);\n        itY += xInc;\n        \n        // java keeps 0.0001 as 1.0E-1\n        // which ends up as 0.00011111\n        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n      }\n    }\n    return shape;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b6f51785c57651e9e1864b7b883037f24541c76","date":1271186480,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder#getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  public Shape getShapeLoop(Shape shape, CartesianTierPlotter ctp, double latX, double longX, double latY, double longY)\n  {  \n \n    //System.err.println(\"getShapeLoop:\"+latY+\",\" + longY);\n    //System.err.println(\"getShapeLoop:\"+latX+\",\" + longX);\n    double beginAt = ctp.getTierBoxId(latX, longX);\n    double endAt = ctp.getTierBoxId(latY, longY);\n    if (beginAt > endAt){\n\t      double tmp = beginAt;\n\t      beginAt = endAt;\n\t      endAt = tmp;\n\t}\n    double tierVert = ctp.getTierVerticalPosDivider();\n    //System.err.println(\" | \"+ beginAt+\" | \"+ endAt);\n    \n    double startX = beginAt - (beginAt %1);\n    double startY = beginAt - startX ; //should give a whole number\n    \n    double endX = endAt - (endAt %1);\n    double endY = endAt -endX; //should give a whole number\n    \n    int scale = (int)Math.log10(tierVert);\n    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    double xInc = 1.0d / tierVert;\n    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    \n    //System.err.println(\"go from startX:\"+startX+\" to:\" + endX);\n    for (; startX <= endX; startX++){\n      \n      double itY = startY;\n      //System.err.println(\"go from startY:\"+startY+\" to:\" + endY);\n      while (itY <= endY){\n        //create a boxId\n        // startX.startY\n        double boxId = startX + itY ;\n        shape.addBox(boxId);\n        //System.err.println(\"----\"+startX+\" and \"+itY);\n        //System.err.println(\"----\"+boxId);\n        itY += xInc;\n        \n        // java keeps 0.0001 as 1.0E-1\n        // which ends up as 0.00011111\n        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n      }\n    }\n    return shape;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e6ff1dd868eee0c9202357a60a5636ad62cb0c5","date":1271290552,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder#getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  public Shape getShapeLoop(Shape shape, CartesianTierPlotter ctp, double latX, double longX, double latY, double longY)\n  {  \n \n    //System.err.println(\"getShapeLoop:\"+latY+\",\" + longY);\n    //System.err.println(\"getShapeLoop:\"+latX+\",\" + longX);\n    double beginAt = ctp.getTierBoxId(latX, longX);\n    double endAt = ctp.getTierBoxId(latY, longY);\n    if (beginAt > endAt){\n\t      double tmp = beginAt;\n\t      beginAt = endAt;\n\t      endAt = tmp;\n\t}\n    double tierVert = ctp.getTierVerticalPosDivider();\n    //System.err.println(\" | \"+ beginAt+\" | \"+ endAt);\n    \n    double startX = beginAt - (beginAt %1);\n    double startY = beginAt - startX ; //should give a whole number\n    \n    double endX = endAt - (endAt %1);\n    double endY = endAt -endX; //should give a whole number\n    \n    int scale = (int)Math.log10(tierVert);\n    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    double xInc = 1.0d / tierVert;\n    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    \n    //System.err.println(\"go from startX:\"+startX+\" to:\" + endX);\n    for (; startX <= endX; startX++){\n      \n      double itY = startY;\n      //System.err.println(\"go from startY:\"+startY+\" to:\" + endY);\n      while (itY <= endY){\n        //create a boxId\n        // startX.startY\n        double boxId = startX + itY ;\n        shape.addBox(boxId);\n        //System.err.println(\"----\"+startX+\" and \"+itY);\n        //System.err.println(\"----\"+boxId);\n        itY += xInc;\n        \n        // java keeps 0.0001 as 1.0E-1\n        // which ends up as 0.00011111\n        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n      }\n    }\n    return shape;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"136b98ba17597f6320aebd8a1e7e997fae9e80d9","date":1271423734,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder#getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder#getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double).mjava","sourceNew":"  public Shape getShapeLoop(Shape shape, CartesianTierPlotter ctp, double latX, double longX, double latY, double longY) {\n\n    //System.err.println(\"getShapeLoop:\"+latY+\",\" + longY);\n    //System.err.println(\"getShapeLoop:\"+latX+\",\" + longX);\n    double beginAt = ctp.getTierBoxId(latX, longX);\n    double endAt = ctp.getTierBoxId(latY, longY);\n    if (beginAt > endAt) {\n      double tmp = beginAt;\n      beginAt = endAt;\n      endAt = tmp;\n    }\n    double tierVert = ctp.getTierVerticalPosDivider();\n    //System.err.println(\" | \"+ beginAt+\" | \"+ endAt);\n\n    double startX = beginAt - (beginAt % 1);\n    double startY = beginAt - startX; //should give a whole number\n\n    double endX = endAt - (endAt % 1);\n    double endY = endAt - endX; //should give a whole number\n\n    int scale = (int) Math.log10(tierVert);\n    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    double xInc = 1.0d / tierVert;\n    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n\n    //System.err.println(\"go from startX:\"+startX+\" to:\" + endX);\n    for (; startX <= endX; startX++) {\n\n      double itY = startY;\n      //System.err.println(\"go from startY:\"+startY+\" to:\" + endY);\n      while (itY <= endY) {\n        //create a boxId\n        // startX.startY\n        double boxId = startX + itY;\n        shape.addBox(boxId);\n        //System.err.println(\"----\"+startX+\" and \"+itY);\n        //System.err.println(\"----\"+boxId);\n        itY += xInc;\n\n        // java keeps 0.0001 as 1.0E-1\n        // which ends up as 0.00011111\n        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n      }\n    }\n    return shape;\n  }\n\n","sourceOld":"  public Shape getShapeLoop(Shape shape, CartesianTierPlotter ctp, double latX, double longX, double latY, double longY)\n  {  \n \n    //System.err.println(\"getShapeLoop:\"+latY+\",\" + longY);\n    //System.err.println(\"getShapeLoop:\"+latX+\",\" + longX);\n    double beginAt = ctp.getTierBoxId(latX, longX);\n    double endAt = ctp.getTierBoxId(latY, longY);\n    if (beginAt > endAt){\n\t      double tmp = beginAt;\n\t      beginAt = endAt;\n\t      endAt = tmp;\n\t}\n    double tierVert = ctp.getTierVerticalPosDivider();\n    //System.err.println(\" | \"+ beginAt+\" | \"+ endAt);\n    \n    double startX = beginAt - (beginAt %1);\n    double startY = beginAt - startX ; //should give a whole number\n    \n    double endX = endAt - (endAt %1);\n    double endY = endAt -endX; //should give a whole number\n    \n    int scale = (int)Math.log10(tierVert);\n    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    double xInc = 1.0d / tierVert;\n    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    \n    //System.err.println(\"go from startX:\"+startX+\" to:\" + endX);\n    for (; startX <= endX; startX++){\n      \n      double itY = startY;\n      //System.err.println(\"go from startY:\"+startY+\" to:\" + endY);\n      while (itY <= endY){\n        //create a boxId\n        // startX.startY\n        double boxId = startX + itY ;\n        shape.addBox(boxId);\n        //System.err.println(\"----\"+startX+\" and \"+itY);\n        //System.err.println(\"----\"+boxId);\n        itY += xInc;\n        \n        // java keeps 0.0001 as 1.0E-1\n        // which ends up as 0.00011111\n        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n      }\n    }\n    return shape;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fb7e38713d15939e085d376c6391e6e6262a81f","date":1329897272,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder#getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  public Shape getShapeLoop(Shape shape, CartesianTierPlotter ctp, double latX, double longX, double latY, double longY) {\n\n    //System.err.println(\"getShapeLoop:\"+latY+\",\" + longY);\n    //System.err.println(\"getShapeLoop:\"+latX+\",\" + longX);\n    double beginAt = ctp.getTierBoxId(latX, longX);\n    double endAt = ctp.getTierBoxId(latY, longY);\n    if (beginAt > endAt) {\n      double tmp = beginAt;\n      beginAt = endAt;\n      endAt = tmp;\n    }\n    double tierVert = ctp.getTierVerticalPosDivider();\n    //System.err.println(\" | \"+ beginAt+\" | \"+ endAt);\n\n    double startX = beginAt - (beginAt % 1);\n    double startY = beginAt - startX; //should give a whole number\n\n    double endX = endAt - (endAt % 1);\n    double endY = endAt - endX; //should give a whole number\n\n    int scale = (int) Math.log10(tierVert);\n    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    double xInc = 1.0d / tierVert;\n    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n\n    //System.err.println(\"go from startX:\"+startX+\" to:\" + endX);\n    for (; startX <= endX; startX++) {\n\n      double itY = startY;\n      //System.err.println(\"go from startY:\"+startY+\" to:\" + endY);\n      while (itY <= endY) {\n        //create a boxId\n        // startX.startY\n        double boxId = startX + itY;\n        shape.addBox(boxId);\n        //System.err.println(\"----\"+startX+\" and \"+itY);\n        //System.err.println(\"----\"+boxId);\n        itY += xInc;\n\n        // java keeps 0.0001 as 1.0E-1\n        // which ends up as 0.00011111\n        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n      }\n    }\n    return shape;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianPolyFilterBuilder#getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  public Shape getShapeLoop(Shape shape, CartesianTierPlotter ctp, double latX, double longX, double latY, double longY) {\n\n    //System.err.println(\"getShapeLoop:\"+latY+\",\" + longY);\n    //System.err.println(\"getShapeLoop:\"+latX+\",\" + longX);\n    double beginAt = ctp.getTierBoxId(latX, longX);\n    double endAt = ctp.getTierBoxId(latY, longY);\n    if (beginAt > endAt) {\n      double tmp = beginAt;\n      beginAt = endAt;\n      endAt = tmp;\n    }\n    double tierVert = ctp.getTierVerticalPosDivider();\n    //System.err.println(\" | \"+ beginAt+\" | \"+ endAt);\n\n    double startX = beginAt - (beginAt % 1);\n    double startY = beginAt - startX; //should give a whole number\n\n    double endX = endAt - (endAt % 1);\n    double endY = endAt - endX; //should give a whole number\n\n    int scale = (int) Math.log10(tierVert);\n    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n    double xInc = 1.0d / tierVert;\n    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n\n    //System.err.println(\"go from startX:\"+startX+\" to:\" + endX);\n    for (; startX <= endX; startX++) {\n\n      double itY = startY;\n      //System.err.println(\"go from startY:\"+startY+\" to:\" + endY);\n      while (itY <= endY) {\n        //create a boxId\n        // startX.startY\n        double boxId = startX + itY;\n        shape.addBox(boxId);\n        //System.err.println(\"----\"+startX+\" and \"+itY);\n        //System.err.println(\"----\"+boxId);\n        itY += xInc;\n\n        // java keeps 0.0001 as 1.0E-1\n        // which ends up as 0.00011111\n        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();\n      }\n    }\n    return shape;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b6f51785c57651e9e1864b7b883037f24541c76":["898a51f1e284c6a04897872ac91d1180e7216937"],"136b98ba17597f6320aebd8a1e7e997fae9e80d9":["8e6ff1dd868eee0c9202357a60a5636ad62cb0c5"],"898a51f1e284c6a04897872ac91d1180e7216937":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8e6ff1dd868eee0c9202357a60a5636ad62cb0c5":["3b6f51785c57651e9e1864b7b883037f24541c76"],"e47768b261c28e7e6032060e8331475c81057953":["136b98ba17597f6320aebd8a1e7e997fae9e80d9","2fb7e38713d15939e085d376c6391e6e6262a81f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e47768b261c28e7e6032060e8331475c81057953"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["136b98ba17597f6320aebd8a1e7e997fae9e80d9"]},"commit2Childs":{"3b6f51785c57651e9e1864b7b883037f24541c76":["8e6ff1dd868eee0c9202357a60a5636ad62cb0c5"],"136b98ba17597f6320aebd8a1e7e997fae9e80d9":["e47768b261c28e7e6032060e8331475c81057953","2fb7e38713d15939e085d376c6391e6e6262a81f"],"898a51f1e284c6a04897872ac91d1180e7216937":["3b6f51785c57651e9e1864b7b883037f24541c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8e6ff1dd868eee0c9202357a60a5636ad62cb0c5":["136b98ba17597f6320aebd8a1e7e997fae9e80d9"],"e47768b261c28e7e6032060e8331475c81057953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["898a51f1e284c6a04897872ac91d1180e7216937"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}