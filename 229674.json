{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getCollectionStatus(Map[String,Object],String,Set[String]).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getCollectionStatus(Map[String,Object],String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getCollectionStatus(Map[String,Object],String,Set[String]).mjava","sourceNew":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param collection collection map parsed from JSON-serialized {@link ClusterState}\n   * @param name  collection name\n   * @param requestedShards a set of shards to be returned in the status.\n   *                        An empty or null values indicates <b>all</b> shards.\n   * @return map of collection properties\n   */\n  @SuppressWarnings(\"unchecked\")\n  private Map<String, Object> getCollectionStatus(Map<String, Object> collection, String name, Set<String> requestedShards) {\n    if (collection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (requestedShards == null || requestedShards.isEmpty()) {\n      return collection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) collection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      for (String selectedShard : requestedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        collection.put(\"shards\", selected);\n      }\n      return collection;\n    }\n  }\n\n","sourceOld":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param collection collection map parsed from JSON-serialized {@link ClusterState}\n   * @param name  collection name\n   * @param requestedShards a set of shards to be returned in the status.\n   *                        An empty or null values indicates <b>all</b> shards.\n   * @return map of collection properties\n   */\n  @SuppressWarnings(\"unchecked\")\n  private Map<String, Object> getCollectionStatus(Map<String, Object> collection, String name, Set<String> requestedShards) {\n    if (collection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (requestedShards == null || requestedShards.isEmpty()) {\n      return collection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) collection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      for (String selectedShard : requestedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        collection.put(\"shards\", selected);\n      }\n      return collection;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#getCollectionStatus(Map[String,Object],String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getCollectionStatus(Map[String,Object],String,Set[String]).mjava","sourceNew":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param collection collection map parsed from JSON-serialized {@link ClusterState}\n   * @param name  collection name\n   * @param requestedShards a set of shards to be returned in the status.\n   *                        An empty or null values indicates <b>all</b> shards.\n   * @return map of collection properties\n   */\n  @SuppressWarnings(\"unchecked\")\n  private Map<String, Object> getCollectionStatus(Map<String, Object> collection, String name, Set<String> requestedShards) {\n    if (collection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (requestedShards == null || requestedShards.isEmpty()) {\n      return collection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) collection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      for (String selectedShard : requestedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        collection.put(\"shards\", selected);\n      }\n      return collection;\n    }\n  }\n\n","sourceOld":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param collection collection map parsed from JSON-serialized {@link ClusterState}\n   * @param name  collection name\n   * @param requestedShards a set of shards to be returned in the status.\n   *                        An empty or null values indicates <b>all</b> shards.\n   * @return map of collection properties\n   */\n  @SuppressWarnings(\"unchecked\")\n  private Map<String, Object> getCollectionStatus(Map<String, Object> collection, String name, Set<String> requestedShards) {\n    if (collection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (requestedShards == null || requestedShards.isEmpty()) {\n      return collection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) collection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      for (String selectedShard : requestedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        collection.put(\"shards\", selected);\n      }\n      return collection;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#getCollectionStatus(Map[String,Object],String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getCollectionStatus(Map[String,Object],String,Set[String]).mjava","sourceNew":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param collection collection map parsed from JSON-serialized {@link ClusterState}\n   * @param name  collection name\n   * @param requestedShards a set of shards to be returned in the status.\n   *                        An empty or null values indicates <b>all</b> shards.\n   * @return map of collection properties\n   */\n  @SuppressWarnings(\"unchecked\")\n  private Map<String, Object> getCollectionStatus(Map<String, Object> collection, String name, Set<String> requestedShards) {\n    if (collection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (requestedShards == null || requestedShards.isEmpty()) {\n      return collection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) collection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      for (String selectedShard : requestedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        collection.put(\"shards\", selected);\n      }\n      return collection;\n    }\n  }\n\n","sourceOld":"  /**\n   * Get collection status from cluster state.\n   * Can return collection status by given shard name.\n   *\n   *\n   * @param collection collection map parsed from JSON-serialized {@link ClusterState}\n   * @param name  collection name\n   * @param requestedShards a set of shards to be returned in the status.\n   *                        An empty or null values indicates <b>all</b> shards.\n   * @return map of collection properties\n   */\n  @SuppressWarnings(\"unchecked\")\n  private Map<String, Object> getCollectionStatus(Map<String, Object> collection, String name, Set<String> requestedShards) {\n    if (collection == null)  {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" not found\");\n    }\n    if (requestedShards == null || requestedShards.isEmpty()) {\n      return collection;\n    } else {\n      Map<String, Object> shards = (Map<String, Object>) collection.get(\"shards\");\n      Map<String, Object>  selected = new HashMap<>();\n      for (String selectedShard : requestedShards) {\n        if (!shards.containsKey(selectedShard)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + name + \" shard: \" + selectedShard + \" not found\");\n        }\n        selected.put(selectedShard, shards.get(selectedShard));\n        collection.put(\"shards\", selected);\n      }\n      return collection;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}