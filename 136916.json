{"path":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchHighlighter#testBasicUsage().mjava","commits":[{"id":"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0","date":1599736633,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchHighlighter#testBasicUsage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicUsage() throws IOException {\n    new IndexBuilder(this::toField)\n        .doc(FLD_TEXT1, \"foo bar baz\")\n        .doc(FLD_TEXT1, \"bar foo baz\")\n        .doc(fields -> {\n          fields.add(FLD_TEXT1, \"Very long content but not matching anything.\");\n          fields.add(FLD_TEXT2, \"no foo but bar\");\n        })\n        .build(analyzer, reader -> {\n          Query query = new BooleanQuery.Builder()\n              .add(new TermQuery(new Term(FLD_TEXT1, \"foo\")), BooleanClause.Occur.SHOULD)\n              .add(new TermQuery(new Term(FLD_TEXT2, \"bar\")), BooleanClause.Occur.SHOULD)\n              .build();\n\n          // In the most basic scenario, we run a search against a query, retrieve\n          // top docs...\n          IndexSearcher searcher = new IndexSearcher(reader);\n          Sort sortOrder = Sort.INDEXORDER; // So that results are consistently ordered.\n          TopDocs topDocs = searcher.search(query, 10, sortOrder);\n\n          // ...and would want a fixed set of fields from those documents, some of them\n          // possibly highlighted if they matched the query.\n          //\n          // This configures the highlighter so that the FLD_ID field is always returned verbatim,\n          // and FLD_TEXT1 is returned *only if it contained a query match*.\n          MatchHighlighter highlighter =\n              new MatchHighlighter(searcher, analyzer)\n                .appendFieldHighlighter(FieldValueHighlighters.verbatimValue(FLD_ID))\n                .appendFieldHighlighter(FieldValueHighlighters.highlighted(\n                    80 * 3, 1, new PassageFormatter(\"...\", \">\", \"<\"), FLD_TEXT1::equals))\n                .appendFieldHighlighter(FieldValueHighlighters.skipRemaining());\n\n          // Note document field highlights are a stream over documents in topDocs. In the remaining code we will just\n          // collect them on the fly into a preformatted string.\n          Stream<MatchHighlighter.DocHighlights> highlights = highlighter.highlight(topDocs, query);\n          assertHighlights(toDocList(highlights),\n                  \" 0. id: 0\",\n                  \"    text1: >foo< bar baz\",\n                  \" 1. id: 1\",\n                  \"    text1: bar >foo< baz\",\n                  \" 2. id: 2\");\n\n          // In a more realistic use case, you'd want to show the value of a given field *regardless* of whether it\n          // contained a highlight or not -- it is odd that document \"id: 2\" above doesn't have the 'text1' field\n          // shown because that field wasn't part of the query match.\n          //\n          // Let's say the field is also potentially long; if it contains a match,\n          // we would want to display the contextual snippet surrounding that match. If it does not contain any\n          // matches, we would want to display its content up to a given number of characters (lead lines).\n          //\n          // Let's do this by adding an appropriate field highlighter on FLD_TEXT1.\n          highlighter =\n              new MatchHighlighter(searcher, analyzer)\n                  .appendFieldHighlighter(FieldValueHighlighters.verbatimValue(FLD_ID))\n                  .appendFieldHighlighter(FieldValueHighlighters.highlighted(\n                      80 * 3, 1, new PassageFormatter(\"...\", \">\", \"<\"), FLD_TEXT1::equals))\n                  .appendFieldHighlighter(FieldValueHighlighters.maxLeadingCharacters(10, \"...\", Set.of(FLD_TEXT1)))\n                  .appendFieldHighlighter(FieldValueHighlighters.skipRemaining());\n\n          assertHighlights(toDocList(highlighter.highlight(topDocs, query)),\n              \" 0. id: 0\",\n              \"    text1: >foo< bar baz\",\n              \" 1. id: 1\",\n              \"    text1: bar >foo< baz\",\n              \" 2. id: 2\",\n              \"    text1: Very long...\");\n\n          // Field highlighters can apply to multiple fields and be chained for convenience.\n          // For example, this defines a combined highlighter over both FLD_TEXT1 and FLD_TEXT2.\n          Set<String> fields = Set.of(FLD_TEXT1, FLD_TEXT2);\n          MatchHighlighter.FieldValueHighlighter highlightedOrAbbreviated =\n              FieldValueHighlighters.highlighted(80 * 3, 1, new PassageFormatter(\"...\", \">\", \"<\"), fields::contains)\n                  .or(FieldValueHighlighters.maxLeadingCharacters(10, \"...\", fields));\n\n          highlighter =\n              new MatchHighlighter(searcher, analyzer)\n                  .appendFieldHighlighter(FieldValueHighlighters.verbatimValue(FLD_ID))\n                  .appendFieldHighlighter(highlightedOrAbbreviated)\n                  .appendFieldHighlighter(FieldValueHighlighters.skipRemaining());\n\n          assertHighlights(toDocList(highlighter.highlight(topDocs, query)),\n              \" 0. id: 0\",\n              \"    text1: >foo< bar baz\",\n              \" 1. id: 1\",\n              \"    text1: bar >foo< baz\",\n              \" 2. id: 2\",\n              \"    text1: Very long...\",\n              \"    text2: no foo but >bar<\");\n        });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}