{"path":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","pathOld":"solr/contrib/solr-morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","sourceNew":"  public DocumentLoader getLoader() {\n    if (context instanceof SolrMorphlineContext) {\n      DocumentLoader loader = ((SolrMorphlineContext)context).getDocumentLoader();\n      if (loader != null) {\n        return loader;\n      }\n    }\n    \n    if (zkHost != null && zkHost.length() > 0) {\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      try {\n        CloudSolrServer cloudSolrServer = new CloudSolrServer(zkHost);\n        cloudSolrServer.setDefaultCollection(collectionName);\n        cloudSolrServer.connect();\n        return new SolrServerDocumentLoader(cloudSolrServer, batchSize);\n      } catch (MalformedURLException e) {\n        throw new MorphlineRuntimeException(e);\n      }\n    } else {\n      if (solrUrl == null || solrUrl.length() == 0) {\n        throw new MorphlineCompilationException(\"Missing parameter 'solrUrl'\", config);\n      }\n      int solrServerNumThreads = 2;\n      int solrServerQueueLength = solrServerNumThreads;\n      SolrServer server = new SafeConcurrentUpdateSolrServer(solrUrl, solrServerQueueLength, solrServerNumThreads);\n      // SolrServer server = new HttpSolrServer(solrServerUrl);\n      // SolrServer server = new ConcurrentUpdateSolrServer(solrServerUrl, solrServerQueueLength, solrServerNumThreads);\n      // server.setParser(new XMLResponseParser()); // binary parser is used by default\n      return new SolrServerDocumentLoader(server, batchSize);\n    }\n  }\n\n","sourceOld":"  public DocumentLoader getLoader() {\n    if (context instanceof SolrMorphlineContext) {\n      DocumentLoader loader = ((SolrMorphlineContext)context).getDocumentLoader();\n      if (loader != null) {\n        return loader;\n      }\n    }\n    \n    if (zkHost != null && zkHost.length() > 0) {\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      try {\n        CloudSolrServer cloudSolrServer = new CloudSolrServer(zkHost);\n        cloudSolrServer.setDefaultCollection(collectionName);\n        cloudSolrServer.connect();\n        return new SolrServerDocumentLoader(cloudSolrServer, batchSize);\n      } catch (MalformedURLException e) {\n        throw new MorphlineRuntimeException(e);\n      }\n    } else {\n      if (solrUrl == null || solrUrl.length() == 0) {\n        throw new MorphlineCompilationException(\"Missing parameter 'solrUrl'\", config);\n      }\n      int solrServerNumThreads = 2;\n      int solrServerQueueLength = solrServerNumThreads;\n      SolrServer server = new SafeConcurrentUpdateSolrServer(solrUrl, solrServerQueueLength, solrServerNumThreads);\n      // SolrServer server = new HttpSolrServer(solrServerUrl);\n      // SolrServer server = new ConcurrentUpdateSolrServer(solrServerUrl, solrServerQueueLength, solrServerNumThreads);\n      // server.setParser(new XMLResponseParser()); // binary parser is used by default\n      return new SolrServerDocumentLoader(server, batchSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91fff4401b95144ad1b9863473e65208c1fbff7a","date":1386964026,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","sourceNew":"  public DocumentLoader getLoader() {\n    if (context instanceof SolrMorphlineContext) {\n      DocumentLoader loader = ((SolrMorphlineContext)context).getDocumentLoader();\n      if (loader != null) {\n        return loader;\n      }\n    }\n    \n    if (zkHost != null && zkHost.length() > 0) {\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      CloudSolrServer cloudSolrServer = new CloudSolrServer(zkHost);\n      cloudSolrServer.setDefaultCollection(collectionName);\n      cloudSolrServer.connect();\n      return new SolrServerDocumentLoader(cloudSolrServer, batchSize);\n    } else {\n      if (solrUrl == null || solrUrl.length() == 0) {\n        throw new MorphlineCompilationException(\"Missing parameter 'solrUrl'\", config);\n      }\n      int solrServerNumThreads = 2;\n      int solrServerQueueLength = solrServerNumThreads;\n      SolrServer server = new SafeConcurrentUpdateSolrServer(solrUrl, solrServerQueueLength, solrServerNumThreads);\n      // SolrServer server = new HttpSolrServer(solrServerUrl);\n      // SolrServer server = new ConcurrentUpdateSolrServer(solrServerUrl, solrServerQueueLength, solrServerNumThreads);\n      // server.setParser(new XMLResponseParser()); // binary parser is used by default\n      return new SolrServerDocumentLoader(server, batchSize);\n    }\n  }\n\n","sourceOld":"  public DocumentLoader getLoader() {\n    if (context instanceof SolrMorphlineContext) {\n      DocumentLoader loader = ((SolrMorphlineContext)context).getDocumentLoader();\n      if (loader != null) {\n        return loader;\n      }\n    }\n    \n    if (zkHost != null && zkHost.length() > 0) {\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      try {\n        CloudSolrServer cloudSolrServer = new CloudSolrServer(zkHost);\n        cloudSolrServer.setDefaultCollection(collectionName);\n        cloudSolrServer.connect();\n        return new SolrServerDocumentLoader(cloudSolrServer, batchSize);\n      } catch (MalformedURLException e) {\n        throw new MorphlineRuntimeException(e);\n      }\n    } else {\n      if (solrUrl == null || solrUrl.length() == 0) {\n        throw new MorphlineCompilationException(\"Missing parameter 'solrUrl'\", config);\n      }\n      int solrServerNumThreads = 2;\n      int solrServerQueueLength = solrServerNumThreads;\n      SolrServer server = new SafeConcurrentUpdateSolrServer(solrUrl, solrServerQueueLength, solrServerNumThreads);\n      // SolrServer server = new HttpSolrServer(solrServerUrl);\n      // SolrServer server = new ConcurrentUpdateSolrServer(solrServerUrl, solrServerQueueLength, solrServerNumThreads);\n      // server.setParser(new XMLResponseParser()); // binary parser is used by default\n      return new SolrServerDocumentLoader(server, batchSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","pathOld":"/dev/null","sourceNew":"  public DocumentLoader getLoader() {\n    if (context instanceof SolrMorphlineContext) {\n      DocumentLoader loader = ((SolrMorphlineContext)context).getDocumentLoader();\n      if (loader != null) {\n        return loader;\n      }\n    }\n    \n    if (zkHost != null && zkHost.length() > 0) {\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      CloudSolrServer cloudSolrServer = new CloudSolrServer(zkHost);\n      cloudSolrServer.setDefaultCollection(collectionName);\n      cloudSolrServer.connect();\n      return new SolrServerDocumentLoader(cloudSolrServer, batchSize);\n    } else {\n      if (solrUrl == null || solrUrl.length() == 0) {\n        throw new MorphlineCompilationException(\"Missing parameter 'solrUrl'\", config);\n      }\n      int solrServerNumThreads = 2;\n      int solrServerQueueLength = solrServerNumThreads;\n      SolrServer server = new SafeConcurrentUpdateSolrServer(solrUrl, solrServerQueueLength, solrServerNumThreads);\n      // SolrServer server = new HttpSolrServer(solrServerUrl);\n      // SolrServer server = new ConcurrentUpdateSolrServer(solrServerUrl, solrServerQueueLength, solrServerNumThreads);\n      // server.setParser(new XMLResponseParser()); // binary parser is used by default\n      return new SolrServerDocumentLoader(server, batchSize);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","sourceNew":"  public DocumentLoader getLoader() {\n    if (context instanceof SolrMorphlineContext) {\n      DocumentLoader loader = ((SolrMorphlineContext)context).getDocumentLoader();\n      if (loader != null) {\n        return loader;\n      }\n    }\n    \n    if (zkHost != null && zkHost.length() > 0) {\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost);\n      cloudSolrClient.setDefaultCollection(collectionName);\n      cloudSolrClient.connect();\n      return new SolrClientDocumentLoader(cloudSolrClient, batchSize);\n    } else {\n      if (solrUrl == null || solrUrl.length() == 0) {\n        throw new MorphlineCompilationException(\"Missing parameter 'solrUrl'\", config);\n      }\n      int solrServerNumThreads = 2;\n      int solrServerQueueLength = solrServerNumThreads;\n      SolrClient server = new SafeConcurrentUpdateSolrClient(solrUrl, solrServerQueueLength, solrServerNumThreads);\n      // SolrServer server = new HttpSolrServer(solrServerUrl);\n      // SolrServer server = new ConcurrentUpdateSolrServer(solrServerUrl, solrServerQueueLength, solrServerNumThreads);\n      // server.setParser(new XMLResponseParser()); // binary parser is used by default\n      return new SolrClientDocumentLoader(server, batchSize);\n    }\n  }\n\n","sourceOld":"  public DocumentLoader getLoader() {\n    if (context instanceof SolrMorphlineContext) {\n      DocumentLoader loader = ((SolrMorphlineContext)context).getDocumentLoader();\n      if (loader != null) {\n        return loader;\n      }\n    }\n    \n    if (zkHost != null && zkHost.length() > 0) {\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      CloudSolrServer cloudSolrServer = new CloudSolrServer(zkHost);\n      cloudSolrServer.setDefaultCollection(collectionName);\n      cloudSolrServer.connect();\n      return new SolrServerDocumentLoader(cloudSolrServer, batchSize);\n    } else {\n      if (solrUrl == null || solrUrl.length() == 0) {\n        throw new MorphlineCompilationException(\"Missing parameter 'solrUrl'\", config);\n      }\n      int solrServerNumThreads = 2;\n      int solrServerQueueLength = solrServerNumThreads;\n      SolrServer server = new SafeConcurrentUpdateSolrServer(solrUrl, solrServerQueueLength, solrServerNumThreads);\n      // SolrServer server = new HttpSolrServer(solrServerUrl);\n      // SolrServer server = new ConcurrentUpdateSolrServer(solrServerUrl, solrServerQueueLength, solrServerNumThreads);\n      // server.setParser(new XMLResponseParser()); // binary parser is used by default\n      return new SolrServerDocumentLoader(server, batchSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","sourceNew":"  public DocumentLoader getLoader() {\n    if (context instanceof SolrMorphlineContext) {\n      DocumentLoader loader = ((SolrMorphlineContext)context).getDocumentLoader();\n      if (loader != null) {\n        return loader;\n      }\n    }\n    \n    if (zkHost != null && zkHost.length() > 0) {\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      CloudSolrClient cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      cloudSolrClient.setDefaultCollection(collectionName);\n      cloudSolrClient.connect();\n      return new SolrClientDocumentLoader(cloudSolrClient, batchSize);\n    } else {\n      if (solrUrl == null || solrUrl.length() == 0) {\n        throw new MorphlineCompilationException(\"Missing parameter 'solrUrl'\", config);\n      }\n      int solrServerNumThreads = 2;\n      int solrServerQueueLength = solrServerNumThreads;\n      SolrClient server = new SafeConcurrentUpdateSolrClient(solrUrl, solrServerQueueLength, solrServerNumThreads);\n      // SolrServer server = new HttpSolrServer(solrServerUrl);\n      // SolrServer server = new ConcurrentUpdateSolrServer(solrServerUrl, solrServerQueueLength, solrServerNumThreads);\n      // server.setParser(new XMLResponseParser()); // binary parser is used by default\n      return new SolrClientDocumentLoader(server, batchSize);\n    }\n  }\n\n","sourceOld":"  public DocumentLoader getLoader() {\n    if (context instanceof SolrMorphlineContext) {\n      DocumentLoader loader = ((SolrMorphlineContext)context).getDocumentLoader();\n      if (loader != null) {\n        return loader;\n      }\n    }\n    \n    if (zkHost != null && zkHost.length() > 0) {\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost);\n      cloudSolrClient.setDefaultCollection(collectionName);\n      cloudSolrClient.connect();\n      return new SolrClientDocumentLoader(cloudSolrClient, batchSize);\n    } else {\n      if (solrUrl == null || solrUrl.length() == 0) {\n        throw new MorphlineCompilationException(\"Missing parameter 'solrUrl'\", config);\n      }\n      int solrServerNumThreads = 2;\n      int solrServerQueueLength = solrServerNumThreads;\n      SolrClient server = new SafeConcurrentUpdateSolrClient(solrUrl, solrServerQueueLength, solrServerNumThreads);\n      // SolrServer server = new HttpSolrServer(solrServerUrl);\n      // SolrServer server = new ConcurrentUpdateSolrServer(solrServerUrl, solrServerQueueLength, solrServerNumThreads);\n      // server.setParser(new XMLResponseParser()); // binary parser is used by default\n      return new SolrClientDocumentLoader(server, batchSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","sourceNew":"  public DocumentLoader getLoader() {\n    if (context instanceof SolrMorphlineContext) {\n      DocumentLoader loader = ((SolrMorphlineContext)context).getDocumentLoader();\n      if (loader != null) {\n        return loader;\n      }\n    }\n    \n    if (zkHost != null && zkHost.length() > 0) {\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      CloudSolrClient cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      cloudSolrClient.setDefaultCollection(collectionName);\n      cloudSolrClient.connect();\n      return new SolrClientDocumentLoader(cloudSolrClient, batchSize);\n    } else {\n      if (solrUrl == null || solrUrl.length() == 0) {\n        throw new MorphlineCompilationException(\"Missing parameter 'solrUrl'\", config);\n      }\n      int solrServerNumThreads = 2;\n      int solrServerQueueLength = solrServerNumThreads;\n      SolrClient server = new SafeConcurrentUpdateSolrClient(solrUrl, solrServerQueueLength, solrServerNumThreads);\n      // SolrServer server = new HttpSolrServer(solrServerUrl);\n      // SolrServer server = new ConcurrentUpdateSolrServer(solrServerUrl, solrServerQueueLength, solrServerNumThreads);\n      // server.setParser(new XMLResponseParser()); // binary parser is used by default\n      return new SolrClientDocumentLoader(server, batchSize);\n    }\n  }\n\n","sourceOld":"  public DocumentLoader getLoader() {\n    if (context instanceof SolrMorphlineContext) {\n      DocumentLoader loader = ((SolrMorphlineContext)context).getDocumentLoader();\n      if (loader != null) {\n        return loader;\n      }\n    }\n    \n    if (zkHost != null && zkHost.length() > 0) {\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost);\n      cloudSolrClient.setDefaultCollection(collectionName);\n      cloudSolrClient.connect();\n      return new SolrClientDocumentLoader(cloudSolrClient, batchSize);\n    } else {\n      if (solrUrl == null || solrUrl.length() == 0) {\n        throw new MorphlineCompilationException(\"Missing parameter 'solrUrl'\", config);\n      }\n      int solrServerNumThreads = 2;\n      int solrServerQueueLength = solrServerNumThreads;\n      SolrClient server = new SafeConcurrentUpdateSolrClient(solrUrl, solrServerQueueLength, solrServerNumThreads);\n      // SolrServer server = new HttpSolrServer(solrServerUrl);\n      // SolrServer server = new ConcurrentUpdateSolrServer(solrServerUrl, solrServerQueueLength, solrServerNumThreads);\n      // server.setParser(new XMLResponseParser()); // binary parser is used by default\n      return new SolrClientDocumentLoader(server, batchSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","sourceNew":null,"sourceOld":"  public DocumentLoader getLoader() {\n    if (context instanceof SolrMorphlineContext) {\n      DocumentLoader loader = ((SolrMorphlineContext)context).getDocumentLoader();\n      if (loader != null) {\n        return loader;\n      }\n    }\n    \n    if (zkHost != null && zkHost.length() > 0) {\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      CloudSolrClient cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      cloudSolrClient.setDefaultCollection(collectionName);\n      cloudSolrClient.connect();\n      return new SolrClientDocumentLoader(cloudSolrClient, batchSize);\n    } else {\n      if (solrUrl == null || solrUrl.length() == 0) {\n        throw new MorphlineCompilationException(\"Missing parameter 'solrUrl'\", config);\n      }\n      int solrServerNumThreads = 2;\n      int solrServerQueueLength = solrServerNumThreads;\n      SolrClient server = new SafeConcurrentUpdateSolrClient(solrUrl, solrServerQueueLength, solrServerNumThreads);\n      // SolrServer server = new HttpSolrServer(solrServerUrl);\n      // SolrServer server = new ConcurrentUpdateSolrServer(solrServerUrl, solrServerQueueLength, solrServerNumThreads);\n      // server.setParser(new XMLResponseParser()); // binary parser is used by default\n      return new SolrClientDocumentLoader(server, batchSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/SolrLocator#getLoader().mjava","sourceNew":null,"sourceOld":"  public DocumentLoader getLoader() {\n    if (context instanceof SolrMorphlineContext) {\n      DocumentLoader loader = ((SolrMorphlineContext)context).getDocumentLoader();\n      if (loader != null) {\n        return loader;\n      }\n    }\n    \n    if (zkHost != null && zkHost.length() > 0) {\n      if (collectionName == null || collectionName.length() == 0) {\n        throw new MorphlineCompilationException(\"Parameter 'zkHost' requires that you also pass parameter 'collection'\", config);\n      }\n      CloudSolrClient cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      cloudSolrClient.setDefaultCollection(collectionName);\n      cloudSolrClient.connect();\n      return new SolrClientDocumentLoader(cloudSolrClient, batchSize);\n    } else {\n      if (solrUrl == null || solrUrl.length() == 0) {\n        throw new MorphlineCompilationException(\"Missing parameter 'solrUrl'\", config);\n      }\n      int solrServerNumThreads = 2;\n      int solrServerQueueLength = solrServerNumThreads;\n      SolrClient server = new SafeConcurrentUpdateSolrClient(solrUrl, solrServerQueueLength, solrServerNumThreads);\n      // SolrServer server = new HttpSolrServer(solrServerUrl);\n      // SolrServer server = new ConcurrentUpdateSolrServer(solrServerUrl, solrServerQueueLength, solrServerNumThreads);\n      // server.setParser(new XMLResponseParser()); // binary parser is used by default\n      return new SolrClientDocumentLoader(server, batchSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"91fff4401b95144ad1b9863473e65208c1fbff7a":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["bafca15d8e408346a67f4282ad1143b88023893b","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91fff4401b95144ad1b9863473e65208c1fbff7a"],"bafca15d8e408346a67f4282ad1143b88023893b":["91fff4401b95144ad1b9863473e65208c1fbff7a"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["91fff4401b95144ad1b9863473e65208c1fbff7a"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91fff4401b95144ad1b9863473e65208c1fbff7a":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","bafca15d8e408346a67f4282ad1143b88023893b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bafca15d8e408346a67f4282ad1143b88023893b":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}