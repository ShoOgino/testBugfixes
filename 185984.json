{"path":"backwards/src/java/org/apache/lucene/index/CheckIndex#main(String[]).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/CheckIndex#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Command-line interface to check and fix an index.\n\n    <p>\n    Run it like this:\n    <pre>\n    java -ea:org.apache.lucene... org.apache.lucene.index.CheckIndex pathToIndex [-fix] [-segment X] [-segment Y]\n    </pre>\n    <ul>\n    <li><code>-fix</code>: actually write a new segments_N file, removing any problematic segments\n\n    <li><code>-segment X</code>: only check the specified\n    segment(s).  This can be specified multiple times,\n    to check more than one segment, eg <code>-segment _2\n    -segment _a</code>.  You can't use this with the -fix\n    option.\n    </ul>\n\n    <p><b>WARNING</b>: <code>-fix</code> should only be used on an emergency basis as it will cause\n                       documents (perhaps many) to be permanently removed from the index.  Always make\n                       a backup copy of your index before running this!  Do not run this tool on an index\n                       that is actively being written to.  You have been warned!\n\n    <p>                Run without -fix, this tool will open the index, report version information\n                       and report any exceptions it hits and what action it would take if -fix were\n                       specified.  With -fix, this tool will remove any segments that have issues and\n                       write a new segments_N file.  This means all documents contained in the affected\n                       segments will be removed.\n\n    <p>\n                       This tool exits with exit code 1 if the index cannot be opened or has any\n                       corruption, else 0.\n   */\n  public static void main(String[] args) throws IOException, InterruptedException {\n\n    boolean doFix = false;\n    List<String> onlySegments = new ArrayList<String>();\n    String indexPath = null;\n    int i = 0;\n    while(i < args.length) {\n      if (args[i].equals(\"-fix\")) {\n        doFix = true;\n        i++;\n      } else if (args[i].equals(\"-segment\")) {\n        if (i == args.length-1) {\n          System.out.println(\"ERROR: missing name for -segment option\");\n          System.exit(1);\n        }\n        onlySegments.add(args[i+1]);\n        i += 2;\n      } else {\n        if (indexPath != null) {\n          System.out.println(\"ERROR: unexpected extra argument '\" + args[i] + \"'\");\n          System.exit(1);\n        }\n        indexPath = args[i];\n        i++;\n      }\n    }\n\n    if (indexPath == null) {\n      System.out.println(\"\\nERROR: index path not specified\");\n      System.out.println(\"\\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-fix] [-segment X] [-segment Y]\\n\" +\n                         \"\\n\" +\n                         \"  -fix: actually write a new segments_N file, removing any problematic segments\\n\" +\n                         \"  -segment X: only check the specified segments.  This can be specified multiple\\n\" + \n                         \"              times, to check more than one segment, eg '-segment _2 -segment _a'.\\n\" +\n                         \"              You can't use this with the -fix option\\n\" +\n                         \"\\n\" + \n                         \"**WARNING**: -fix should only be used on an emergency basis as it will cause\\n\" +\n                         \"documents (perhaps many) to be permanently removed from the index.  Always make\\n\" +\n                         \"a backup copy of your index before running this!  Do not run this tool on an index\\n\" +\n                         \"that is actively being written to.  You have been warned!\\n\" +\n                         \"\\n\" +\n                         \"Run without -fix, this tool will open the index, report version information\\n\" +\n                         \"and report any exceptions it hits and what action it would take if -fix were\\n\" +\n                         \"specified.  With -fix, this tool will remove any segments that have issues and\\n\" + \n                         \"write a new segments_N file.  This means all documents contained in the affected\\n\" +\n                         \"segments will be removed.\\n\" +\n                         \"\\n\" +\n                         \"This tool exits with exit code 1 if the index cannot be opened or has any\\n\" +\n                         \"corruption, else 0.\\n\");\n      System.exit(1);\n    }\n\n    if (!assertsOn())\n      System.out.println(\"\\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled\");\n\n    if (onlySegments.size() == 0)\n      onlySegments = null;\n    else if (doFix) {\n      System.out.println(\"ERROR: cannot specify both -fix and -segment\");\n      System.exit(1);\n    }\n\n    System.out.println(\"\\nOpening index @ \" + indexPath + \"\\n\");\n    Directory dir = null;\n    try {\n      dir = FSDirectory.open(new File(indexPath));\n    } catch (Throwable t) {\n      System.out.println(\"ERROR: could not open directory \\\"\" + indexPath + \"\\\"; exiting\");\n      t.printStackTrace(System.out);\n      System.exit(1);\n    }\n\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(System.out);\n\n    Status result = checker.checkIndex(onlySegments);\n    if (result.missingSegments) {\n      System.exit(1);\n    }\n\n    if (!result.clean) {\n      if (!doFix) {\n        System.out.println(\"WARNING: would write new segments file, and \" + result.totLoseDocCount + \" documents would be lost, if -fix were specified\\n\");\n      } else {\n        System.out.println(\"WARNING: \" + result.totLoseDocCount + \" documents will be lost\\n\");\n        System.out.println(\"NOTE: will write new segments file in 5 seconds; this will remove \" + result.totLoseDocCount + \" docs from the index. THIS IS YOUR LAST CHANCE TO CTRL+C!\");\n        for(int s=0;s<5;s++) {\n          Thread.sleep(1000);\n          System.out.println(\"  \" + (5-s) + \"...\");\n        }\n        System.out.println(\"Writing...\");\n        checker.fixIndex(result);\n        System.out.println(\"OK\");\n        System.out.println(\"Wrote new segments file \\\"\" + result.newSegments.getCurrentSegmentFileName() + \"\\\"\");\n      }\n    }\n    System.out.println(\"\");\n\n    final int exitCode;\n    if (result != null && result.clean == true)\n      exitCode = 0;\n    else\n      exitCode = 1;\n    System.exit(exitCode);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/CheckIndex#main(String[]).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/CheckIndex#main(String[]).mjava","sourceNew":"  /** Command-line interface to check and fix an index.\n\n    <p>\n    Run it like this:\n    <pre>\n    java -ea:org.apache.lucene... org.apache.lucene.index.CheckIndex pathToIndex [-fix] [-segment X] [-segment Y]\n    </pre>\n    <ul>\n    <li><code>-fix</code>: actually write a new segments_N file, removing any problematic segments\n\n    <li><code>-segment X</code>: only check the specified\n    segment(s).  This can be specified multiple times,\n    to check more than one segment, eg <code>-segment _2\n    -segment _a</code>.  You can't use this with the -fix\n    option.\n    </ul>\n\n    <p><b>WARNING</b>: <code>-fix</code> should only be used on an emergency basis as it will cause\n                       documents (perhaps many) to be permanently removed from the index.  Always make\n                       a backup copy of your index before running this!  Do not run this tool on an index\n                       that is actively being written to.  You have been warned!\n\n    <p>                Run without -fix, this tool will open the index, report version information\n                       and report any exceptions it hits and what action it would take if -fix were\n                       specified.  With -fix, this tool will remove any segments that have issues and\n                       write a new segments_N file.  This means all documents contained in the affected\n                       segments will be removed.\n\n    <p>\n                       This tool exits with exit code 1 if the index cannot be opened or has any\n                       corruption, else 0.\n   */\n  public static void main(String[] args) throws IOException, InterruptedException {\n\n    boolean doFix = false;\n    List<String> onlySegments = new ArrayList<String>();\n    String indexPath = null;\n    int i = 0;\n    while(i < args.length) {\n      if (args[i].equals(\"-fix\")) {\n        doFix = true;\n        i++;\n      } else if (args[i].equals(\"-segment\")) {\n        if (i == args.length-1) {\n          System.out.println(\"ERROR: missing name for -segment option\");\n          System.exit(1);\n        }\n        onlySegments.add(args[i+1]);\n        i += 2;\n      } else {\n        if (indexPath != null) {\n          System.out.println(\"ERROR: unexpected extra argument '\" + args[i] + \"'\");\n          System.exit(1);\n        }\n        indexPath = args[i];\n        i++;\n      }\n    }\n\n    if (indexPath == null) {\n      System.out.println(\"\\nERROR: index path not specified\");\n      System.out.println(\"\\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-fix] [-segment X] [-segment Y]\\n\" +\n                         \"\\n\" +\n                         \"  -fix: actually write a new segments_N file, removing any problematic segments\\n\" +\n                         \"  -segment X: only check the specified segments.  This can be specified multiple\\n\" + \n                         \"              times, to check more than one segment, eg '-segment _2 -segment _a'.\\n\" +\n                         \"              You can't use this with the -fix option\\n\" +\n                         \"\\n\" + \n                         \"**WARNING**: -fix should only be used on an emergency basis as it will cause\\n\" +\n                         \"documents (perhaps many) to be permanently removed from the index.  Always make\\n\" +\n                         \"a backup copy of your index before running this!  Do not run this tool on an index\\n\" +\n                         \"that is actively being written to.  You have been warned!\\n\" +\n                         \"\\n\" +\n                         \"Run without -fix, this tool will open the index, report version information\\n\" +\n                         \"and report any exceptions it hits and what action it would take if -fix were\\n\" +\n                         \"specified.  With -fix, this tool will remove any segments that have issues and\\n\" + \n                         \"write a new segments_N file.  This means all documents contained in the affected\\n\" +\n                         \"segments will be removed.\\n\" +\n                         \"\\n\" +\n                         \"This tool exits with exit code 1 if the index cannot be opened or has any\\n\" +\n                         \"corruption, else 0.\\n\");\n      System.exit(1);\n    }\n\n    if (!assertsOn())\n      System.out.println(\"\\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled\");\n\n    if (onlySegments.size() == 0)\n      onlySegments = null;\n    else if (doFix) {\n      System.out.println(\"ERROR: cannot specify both -fix and -segment\");\n      System.exit(1);\n    }\n\n    System.out.println(\"\\nOpening index @ \" + indexPath + \"\\n\");\n    Directory dir = null;\n    try {\n      dir = FSDirectory.open(new File(indexPath));\n    } catch (Throwable t) {\n      System.out.println(\"ERROR: could not open directory \\\"\" + indexPath + \"\\\"; exiting\");\n      t.printStackTrace(System.out);\n      System.exit(1);\n    }\n\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(System.out);\n\n    Status result = checker.checkIndex(onlySegments);\n    if (result.missingSegments) {\n      System.exit(1);\n    }\n\n    if (!result.clean) {\n      if (!doFix) {\n        System.out.println(\"WARNING: would write new segments file, and \" + result.totLoseDocCount + \" documents would be lost, if -fix were specified\\n\");\n      } else {\n        System.out.println(\"WARNING: \" + result.totLoseDocCount + \" documents will be lost\\n\");\n        System.out.println(\"NOTE: will write new segments file in 5 seconds; this will remove \" + result.totLoseDocCount + \" docs from the index. THIS IS YOUR LAST CHANCE TO CTRL+C!\");\n        for(int s=0;s<5;s++) {\n          Thread.sleep(1000);\n          System.out.println(\"  \" + (5-s) + \"...\");\n        }\n        System.out.println(\"Writing...\");\n        checker.fixIndex(result);\n        System.out.println(\"OK\");\n        System.out.println(\"Wrote new segments file \\\"\" + result.newSegments.getCurrentSegmentFileName() + \"\\\"\");\n      }\n    }\n    System.out.println(\"\");\n\n    final int exitCode;\n    if (result != null && result.clean == true)\n      exitCode = 0;\n    else\n      exitCode = 1;\n    System.exit(exitCode);\n  }\n\n","sourceOld":"  /** Command-line interface to check and fix an index.\n\n    <p>\n    Run it like this:\n    <pre>\n    java -ea:org.apache.lucene... org.apache.lucene.index.CheckIndex pathToIndex [-fix] [-segment X] [-segment Y]\n    </pre>\n    <ul>\n    <li><code>-fix</code>: actually write a new segments_N file, removing any problematic segments\n\n    <li><code>-segment X</code>: only check the specified\n    segment(s).  This can be specified multiple times,\n    to check more than one segment, eg <code>-segment _2\n    -segment _a</code>.  You can't use this with the -fix\n    option.\n    </ul>\n\n    <p><b>WARNING</b>: <code>-fix</code> should only be used on an emergency basis as it will cause\n                       documents (perhaps many) to be permanently removed from the index.  Always make\n                       a backup copy of your index before running this!  Do not run this tool on an index\n                       that is actively being written to.  You have been warned!\n\n    <p>                Run without -fix, this tool will open the index, report version information\n                       and report any exceptions it hits and what action it would take if -fix were\n                       specified.  With -fix, this tool will remove any segments that have issues and\n                       write a new segments_N file.  This means all documents contained in the affected\n                       segments will be removed.\n\n    <p>\n                       This tool exits with exit code 1 if the index cannot be opened or has any\n                       corruption, else 0.\n   */\n  public static void main(String[] args) throws IOException, InterruptedException {\n\n    boolean doFix = false;\n    List<String> onlySegments = new ArrayList<String>();\n    String indexPath = null;\n    int i = 0;\n    while(i < args.length) {\n      if (args[i].equals(\"-fix\")) {\n        doFix = true;\n        i++;\n      } else if (args[i].equals(\"-segment\")) {\n        if (i == args.length-1) {\n          System.out.println(\"ERROR: missing name for -segment option\");\n          System.exit(1);\n        }\n        onlySegments.add(args[i+1]);\n        i += 2;\n      } else {\n        if (indexPath != null) {\n          System.out.println(\"ERROR: unexpected extra argument '\" + args[i] + \"'\");\n          System.exit(1);\n        }\n        indexPath = args[i];\n        i++;\n      }\n    }\n\n    if (indexPath == null) {\n      System.out.println(\"\\nERROR: index path not specified\");\n      System.out.println(\"\\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-fix] [-segment X] [-segment Y]\\n\" +\n                         \"\\n\" +\n                         \"  -fix: actually write a new segments_N file, removing any problematic segments\\n\" +\n                         \"  -segment X: only check the specified segments.  This can be specified multiple\\n\" + \n                         \"              times, to check more than one segment, eg '-segment _2 -segment _a'.\\n\" +\n                         \"              You can't use this with the -fix option\\n\" +\n                         \"\\n\" + \n                         \"**WARNING**: -fix should only be used on an emergency basis as it will cause\\n\" +\n                         \"documents (perhaps many) to be permanently removed from the index.  Always make\\n\" +\n                         \"a backup copy of your index before running this!  Do not run this tool on an index\\n\" +\n                         \"that is actively being written to.  You have been warned!\\n\" +\n                         \"\\n\" +\n                         \"Run without -fix, this tool will open the index, report version information\\n\" +\n                         \"and report any exceptions it hits and what action it would take if -fix were\\n\" +\n                         \"specified.  With -fix, this tool will remove any segments that have issues and\\n\" + \n                         \"write a new segments_N file.  This means all documents contained in the affected\\n\" +\n                         \"segments will be removed.\\n\" +\n                         \"\\n\" +\n                         \"This tool exits with exit code 1 if the index cannot be opened or has any\\n\" +\n                         \"corruption, else 0.\\n\");\n      System.exit(1);\n    }\n\n    if (!assertsOn())\n      System.out.println(\"\\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled\");\n\n    if (onlySegments.size() == 0)\n      onlySegments = null;\n    else if (doFix) {\n      System.out.println(\"ERROR: cannot specify both -fix and -segment\");\n      System.exit(1);\n    }\n\n    System.out.println(\"\\nOpening index @ \" + indexPath + \"\\n\");\n    Directory dir = null;\n    try {\n      dir = FSDirectory.open(new File(indexPath));\n    } catch (Throwable t) {\n      System.out.println(\"ERROR: could not open directory \\\"\" + indexPath + \"\\\"; exiting\");\n      t.printStackTrace(System.out);\n      System.exit(1);\n    }\n\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(System.out);\n\n    Status result = checker.checkIndex(onlySegments);\n    if (result.missingSegments) {\n      System.exit(1);\n    }\n\n    if (!result.clean) {\n      if (!doFix) {\n        System.out.println(\"WARNING: would write new segments file, and \" + result.totLoseDocCount + \" documents would be lost, if -fix were specified\\n\");\n      } else {\n        System.out.println(\"WARNING: \" + result.totLoseDocCount + \" documents will be lost\\n\");\n        System.out.println(\"NOTE: will write new segments file in 5 seconds; this will remove \" + result.totLoseDocCount + \" docs from the index. THIS IS YOUR LAST CHANCE TO CTRL+C!\");\n        for(int s=0;s<5;s++) {\n          Thread.sleep(1000);\n          System.out.println(\"  \" + (5-s) + \"...\");\n        }\n        System.out.println(\"Writing...\");\n        checker.fixIndex(result);\n        System.out.println(\"OK\");\n        System.out.println(\"Wrote new segments file \\\"\" + result.newSegments.getCurrentSegmentFileName() + \"\\\"\");\n      }\n    }\n    System.out.println(\"\");\n\n    final int exitCode;\n    if (result != null && result.clean == true)\n      exitCode = 0;\n    else\n      exitCode = 1;\n    System.exit(exitCode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}