{"path":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","commits":[{"id":"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb","date":1244526657,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents(SolrConfig).mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n\n    String xpath = \"searchComponent\";\n    NamedListPluginLoader<SearchComponent> loader = new NamedListPluginLoader<SearchComponent>( xpath, components );\n    loader.load( solrConfig.getResourceLoader(), (NodeList)solrConfig.evaluate( xpath, XPathConstants.NODESET ) );\n\n    final Map<String,Class<? extends SearchComponent>> standardcomponents \n        = new HashMap<String, Class<? extends SearchComponent>>();\n    standardcomponents.put( QueryComponent.COMPONENT_NAME,        QueryComponent.class        );\n    standardcomponents.put( FacetComponent.COMPONENT_NAME,        FacetComponent.class        );\n    standardcomponents.put( MoreLikeThisComponent.COMPONENT_NAME, MoreLikeThisComponent.class );\n    standardcomponents.put( HighlightComponent.COMPONENT_NAME,    HighlightComponent.class    );\n    standardcomponents.put( StatsComponent.COMPONENT_NAME,        StatsComponent.class        );\n    standardcomponents.put( DebugComponent.COMPONENT_NAME,        DebugComponent.class        );\n    for( Map.Entry<String, Class<? extends SearchComponent>> entry : standardcomponents.entrySet() ) {\n      if( components.get( entry.getKey() ) == null ) {\n        try {\n          SearchComponent comp = entry.getValue().newInstance();\n          comp.init( null ); // default components initialized with nothing\n          components.put( entry.getKey(), comp );\n        }\n        catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n        }\n      }\n    }\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents( SolrConfig config )\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n\n    String xpath = \"searchComponent\";\n    NamedListPluginLoader<SearchComponent> loader = new NamedListPluginLoader<SearchComponent>( xpath, components );\n    loader.load( config.getResourceLoader(), (NodeList)config.evaluate( xpath, XPathConstants.NODESET ) );\n\n    final Map<String,Class<? extends SearchComponent>> standardcomponents \n        = new HashMap<String, Class<? extends SearchComponent>>();\n    standardcomponents.put( QueryComponent.COMPONENT_NAME,        QueryComponent.class        );\n    standardcomponents.put( FacetComponent.COMPONENT_NAME,        FacetComponent.class        );\n    standardcomponents.put( MoreLikeThisComponent.COMPONENT_NAME, MoreLikeThisComponent.class );\n    standardcomponents.put( HighlightComponent.COMPONENT_NAME,    HighlightComponent.class    );\n    standardcomponents.put( StatsComponent.COMPONENT_NAME,        StatsComponent.class        );\n    standardcomponents.put( DebugComponent.COMPONENT_NAME,        DebugComponent.class        );\n    for( Map.Entry<String, Class<? extends SearchComponent>> entry : standardcomponents.entrySet() ) {\n      if( components.get( entry.getKey() ) == null ) {\n        try {\n          SearchComponent comp = entry.getValue().newInstance();\n          comp.init( null ); // default components initialized with nothing\n          components.put( entry.getKey(), comp );\n        }\n        catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n        }\n      }\n    }\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c6cddeaca06bbdbcc65b2c527e8e2d2a573772","date":1244536603,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    // there is something strange which makes the tests fail when the instance is created using SolrCore#createInstance\n    for (SolrConfig.PluginInfo info : solrConfig.getSearchComponentInfo()) {\n      SearchComponent sc = (SearchComponent) resourceLoader.newInstance(info.className);\n      sc.init(info.initArgs);\n      components.put(info.name, sc);\n    }\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n\n    String xpath = \"searchComponent\";\n    NamedListPluginLoader<SearchComponent> loader = new NamedListPluginLoader<SearchComponent>( xpath, components );\n    loader.load( solrConfig.getResourceLoader(), (NodeList)solrConfig.evaluate( xpath, XPathConstants.NODESET ) );\n\n    final Map<String,Class<? extends SearchComponent>> standardcomponents \n        = new HashMap<String, Class<? extends SearchComponent>>();\n    standardcomponents.put( QueryComponent.COMPONENT_NAME,        QueryComponent.class        );\n    standardcomponents.put( FacetComponent.COMPONENT_NAME,        FacetComponent.class        );\n    standardcomponents.put( MoreLikeThisComponent.COMPONENT_NAME, MoreLikeThisComponent.class );\n    standardcomponents.put( HighlightComponent.COMPONENT_NAME,    HighlightComponent.class    );\n    standardcomponents.put( StatsComponent.COMPONENT_NAME,        StatsComponent.class        );\n    standardcomponents.put( DebugComponent.COMPONENT_NAME,        DebugComponent.class        );\n    for( Map.Entry<String, Class<? extends SearchComponent>> entry : standardcomponents.entrySet() ) {\n      if( components.get( entry.getKey() ) == null ) {\n        try {\n          SearchComponent comp = entry.getValue().newInstance();\n          comp.init( null ); // default components initialized with nothing\n          components.put( entry.getKey(), comp );\n        }\n        catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n        }\n      }\n    }\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad24c978ce689b10db5f6f85e29479606848b27f","date":1244537766,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(solrConfig.getSearchComponentInfo(),components,SearchComponent.class);    \n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    // there is something strange which makes the tests fail when the instance is created using SolrCore#createInstance\n    for (SolrConfig.PluginInfo info : solrConfig.getSearchComponentInfo()) {\n      SearchComponent sc = (SearchComponent) resourceLoader.newInstance(info.className);\n      sc.init(info.initArgs);\n      components.put(info.name, sc);\n    }\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28a016ae2abf4934515e45810192aa4350e3092b","date":1252309557,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(solrConfig.getSearchComponentInfo(),components,SearchComponent.class);    \n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bad78684057afb0e5b908d6cebf7fb606a8b3b03","date":1263548630,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad24c978ce689b10db5f6f85e29479606848b27f":["89c6cddeaca06bbdbcc65b2c527e8e2d2a573772"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bad78684057afb0e5b908d6cebf7fb606a8b3b03":["28a016ae2abf4934515e45810192aa4350e3092b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"89c6cddeaca06bbdbcc65b2c527e8e2d2a573772":["a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb"],"ad94625fb8d088209f46650c8097196fec67f00c":["bad78684057afb0e5b908d6cebf7fb606a8b3b03"],"28a016ae2abf4934515e45810192aa4350e3092b":["ad24c978ce689b10db5f6f85e29479606848b27f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb":["89c6cddeaca06bbdbcc65b2c527e8e2d2a573772"],"ad24c978ce689b10db5f6f85e29479606848b27f":["28a016ae2abf4934515e45810192aa4350e3092b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bad78684057afb0e5b908d6cebf7fb606a8b3b03":["ad94625fb8d088209f46650c8097196fec67f00c"],"89c6cddeaca06bbdbcc65b2c527e8e2d2a573772":["ad24c978ce689b10db5f6f85e29479606848b27f"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"28a016ae2abf4934515e45810192aa4350e3092b":["bad78684057afb0e5b908d6cebf7fb606a8b3b03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}