{"path":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","pathOld":"/dev/null","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, indexReader, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","pathOld":"/dev/null","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, indexReader, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","pathOld":"/dev/null","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, indexReader, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, indexReader, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, indexReader, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}