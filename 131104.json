{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexQueryParsing().mjava","commits":[{"id":"cb09d349a44ec933e41f1cfa536d5efb2c207752","date":1338937039,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexQueryParsing().mjava","pathOld":"/dev/null","sourceNew":"  public void testRegexQueryParsing() throws Exception {\n    final String[] fields = {\"b\", \"t\"};\n\n    final StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    parser.setAnalyzer(new MockAnalyzer(random()));\n\n    BooleanQuery exp = new BooleanQuery();\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"b\", \"ab.+\")), BooleanClause.Occur.MUST));\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"t\", \"ab.+\")), BooleanClause.Occur.MUST));\n\n    assertEquals(exp, parser.parse(\"/ab.+/\", null));\n\n    RegexpQuery regexpQueryexp = new RegexpQuery(new Term(\"test\", \"[abc]?[0-9]\"));\n\n    assertEquals(regexpQueryexp, parser.parse(\"test:/[abc]?[0-9]/\", null));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexQueryParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexQueryParsing().mjava","sourceNew":"  public void testRegexQueryParsing() throws Exception {\n    final String[] fields = {\"b\", \"t\"};\n\n    final StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    parser.setAnalyzer(new MockAnalyzer(random()));\n\n    BooleanQuery exp = new BooleanQuery();\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"b\", \"ab.+\")), BooleanClause.Occur.SHOULD));//TODO spezification? was \"MUST\"\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"t\", \"ab.+\")), BooleanClause.Occur.SHOULD));//TODO spezification? was \"MUST\"\n\n    assertEquals(exp, parser.parse(\"/ab.+/\", null));\n\n    RegexpQuery regexpQueryexp = new RegexpQuery(new Term(\"test\", \"[abc]?[0-9]\"));\n\n    assertEquals(regexpQueryexp, parser.parse(\"test:/[abc]?[0-9]/\", null));\n\n  }\n\n","sourceOld":"  public void testRegexQueryParsing() throws Exception {\n    final String[] fields = {\"b\", \"t\"};\n\n    final StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    parser.setAnalyzer(new MockAnalyzer(random()));\n\n    BooleanQuery exp = new BooleanQuery();\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"b\", \"ab.+\")), BooleanClause.Occur.MUST));\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"t\", \"ab.+\")), BooleanClause.Occur.MUST));\n\n    assertEquals(exp, parser.parse(\"/ab.+/\", null));\n\n    RegexpQuery regexpQueryexp = new RegexpQuery(new Term(\"test\", \"[abc]?[0-9]\"));\n\n    assertEquals(regexpQueryexp, parser.parse(\"test:/[abc]?[0-9]/\", null));\n\n  }\n\n","bugFix":["cb09d349a44ec933e41f1cfa536d5efb2c207752"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexQueryParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexQueryParsing().mjava","sourceNew":"  public void testRegexQueryParsing() throws Exception {\n    final String[] fields = {\"b\", \"t\"};\n\n    final StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    parser.setAnalyzer(new MockAnalyzer(random()));\n\n    BooleanQuery exp = new BooleanQuery();\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"b\", \"ab.+\")), BooleanClause.Occur.SHOULD));//TODO spezification? was \"MUST\"\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"t\", \"ab.+\")), BooleanClause.Occur.SHOULD));//TODO spezification? was \"MUST\"\n\n    assertEquals(exp, parser.parse(\"/ab.+/\", null));\n\n    RegexpQuery regexpQueryexp = new RegexpQuery(new Term(\"test\", \"[abc]?[0-9]\"));\n\n    assertEquals(regexpQueryexp, parser.parse(\"test:/[abc]?[0-9]/\", null));\n\n  }\n\n","sourceOld":"  public void testRegexQueryParsing() throws Exception {\n    final String[] fields = {\"b\", \"t\"};\n\n    final StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    parser.setAnalyzer(new MockAnalyzer(random()));\n\n    BooleanQuery exp = new BooleanQuery();\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"b\", \"ab.+\")), BooleanClause.Occur.MUST));\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"t\", \"ab.+\")), BooleanClause.Occur.MUST));\n\n    assertEquals(exp, parser.parse(\"/ab.+/\", null));\n\n    RegexpQuery regexpQueryexp = new RegexpQuery(new Term(\"test\", \"[abc]?[0-9]\"));\n\n    assertEquals(regexpQueryexp, parser.parse(\"test:/[abc]?[0-9]/\", null));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexQueryParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexQueryParsing().mjava","sourceNew":"  public void testRegexQueryParsing() throws Exception {\n    final String[] fields = {\"b\", \"t\"};\n\n    final StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    parser.setAnalyzer(new MockAnalyzer(random()));\n\n    BooleanQuery exp = new BooleanQuery();\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"b\", \"ab.+\")), BooleanClause.Occur.SHOULD));//TODO spezification? was \"MUST\"\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"t\", \"ab.+\")), BooleanClause.Occur.SHOULD));//TODO spezification? was \"MUST\"\n\n    assertEquals(exp, parser.parse(\"/ab.+/\", null));\n\n    RegexpQuery regexpQueryexp = new RegexpQuery(new Term(\"test\", \"[abc]?[0-9]\"));\n\n    assertEquals(regexpQueryexp, parser.parse(\"test:/[abc]?[0-9]/\", null));\n\n  }\n\n","sourceOld":"  public void testRegexQueryParsing() throws Exception {\n    final String[] fields = {\"b\", \"t\"};\n\n    final StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    parser.setAnalyzer(new MockAnalyzer(random()));\n\n    BooleanQuery exp = new BooleanQuery();\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"b\", \"ab.+\")), BooleanClause.Occur.MUST));\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"t\", \"ab.+\")), BooleanClause.Occur.MUST));\n\n    assertEquals(exp, parser.parse(\"/ab.+/\", null));\n\n    RegexpQuery regexpQueryexp = new RegexpQuery(new Term(\"test\", \"[abc]?[0-9]\"));\n\n    assertEquals(regexpQueryexp, parser.parse(\"test:/[abc]?[0-9]/\", null));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexQueryParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexQueryParsing().mjava","sourceNew":"  public void testRegexQueryParsing() throws Exception {\n    final String[] fields = {\"b\", \"t\"};\n\n    final StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    parser.setAnalyzer(new MockAnalyzer(random()));\n\n    BooleanQuery.Builder exp = new BooleanQuery.Builder();\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"b\", \"ab.+\")), BooleanClause.Occur.SHOULD));//TODO spezification? was \"MUST\"\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"t\", \"ab.+\")), BooleanClause.Occur.SHOULD));//TODO spezification? was \"MUST\"\n\n    assertEquals(exp.build(), parser.parse(\"/ab.+/\", null));\n\n    RegexpQuery regexpQueryexp = new RegexpQuery(new Term(\"test\", \"[abc]?[0-9]\"));\n\n    assertEquals(regexpQueryexp, parser.parse(\"test:/[abc]?[0-9]/\", null));\n\n  }\n\n","sourceOld":"  public void testRegexQueryParsing() throws Exception {\n    final String[] fields = {\"b\", \"t\"};\n\n    final StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    parser.setAnalyzer(new MockAnalyzer(random()));\n\n    BooleanQuery exp = new BooleanQuery();\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"b\", \"ab.+\")), BooleanClause.Occur.SHOULD));//TODO spezification? was \"MUST\"\n    exp.add(new BooleanClause(new RegexpQuery(new Term(\"t\", \"ab.+\")), BooleanClause.Occur.SHOULD));//TODO spezification? was \"MUST\"\n\n    assertEquals(exp, parser.parse(\"/ab.+/\", null));\n\n    RegexpQuery regexpQueryexp = new RegexpQuery(new Term(\"test\", \"[abc]?[0-9]\"));\n\n    assertEquals(regexpQueryexp, parser.parse(\"test:/[abc]?[0-9]/\", null));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["cb09d349a44ec933e41f1cfa536d5efb2c207752"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["cb09d349a44ec933e41f1cfa536d5efb2c207752","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"cb09d349a44ec933e41f1cfa536d5efb2c207752":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["cb09d349a44ec933e41f1cfa536d5efb2c207752","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb09d349a44ec933e41f1cfa536d5efb2c207752"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"cb09d349a44ec933e41f1cfa536d5efb2c207752":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}