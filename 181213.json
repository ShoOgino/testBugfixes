{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#waitForStateSync(int,CoreContainer).mjava","commits":[{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#waitForStateSync(int,CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForStateSync(int expectedVersion, CoreContainer coreContainer) {\n    final RTimer timer = new RTimer();\n    int waitTimeSecs = 30;\n    // get a list of active replica cores to query for the schema zk version (skipping this core of course)\n    List<PerNodeCallable> concurrentTasks = new ArrayList<>();\n\n    ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n    for (String nodeName : zkStateReader.getClusterState().getLiveNodes()) {\n      PerNodeCallable e = new PerNodeCallable(zkStateReader.getBaseUrlForNodeName(nodeName), expectedVersion, waitTimeSecs);\n      concurrentTasks.add(e);\n    }\n    if (concurrentTasks.isEmpty()) return; // nothing to wait for ...\n\n    log.info(\"Waiting up to {} secs for {} nodes to update clusterprops to be of version {} \",\n        waitTimeSecs, concurrentTasks.size(), expectedVersion);\n    SolrConfigHandler.execInparallel(concurrentTasks, parallelExecutor -> {\n      try {\n        List<String> failedList = SolrConfigHandler.executeAll(expectedVersion, waitTimeSecs, concurrentTasks, parallelExecutor);\n\n        // if any tasks haven't completed within the specified timeout, it's an error\n        if (failedList != null)\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              formatString(\"{0} out of {1} the property {2} to be of version {3} within {4} seconds! Failed cores: {5}\",\n                  failedList.size(), concurrentTasks.size() + 1, expectedVersion, 30, failedList));\n      } catch (InterruptedException e) {\n        log.warn(formatString(\n            \"Request was interrupted . trying to set the clusterprops to version {0} to propagate to {1} nodes \",\n            expectedVersion, concurrentTasks.size()));\n        Thread.currentThread().interrupt();\n\n      }\n    });\n\n    log.info(\"Took {}ms to update the clusterprops to be of version {}  on {} nodes\",\n        timer.getTime(), expectedVersion, concurrentTasks.size());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#waitForStateSync(int,CoreContainer).mjava","sourceNew":null,"sourceOld":"  private void waitForStateSync(int expectedVersion, CoreContainer coreContainer) {\n    final RTimer timer = new RTimer();\n    int waitTimeSecs = 30;\n    // get a list of active replica cores to query for the schema zk version (skipping this core of course)\n    List<PerNodeCallable> concurrentTasks = new ArrayList<>();\n\n    ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n    for (String nodeName : zkStateReader.getClusterState().getLiveNodes()) {\n      PerNodeCallable e = new PerNodeCallable(zkStateReader.getBaseUrlForNodeName(nodeName), expectedVersion, waitTimeSecs);\n      concurrentTasks.add(e);\n    }\n    if (concurrentTasks.isEmpty()) return; // nothing to wait for ...\n\n    log.info(\"Waiting up to {} secs for {} nodes to update clusterprops to be of version {} \",\n        waitTimeSecs, concurrentTasks.size(), expectedVersion);\n    SolrConfigHandler.execInparallel(concurrentTasks, parallelExecutor -> {\n      try {\n        List<String> failedList = SolrConfigHandler.executeAll(expectedVersion, waitTimeSecs, concurrentTasks, parallelExecutor);\n\n        // if any tasks haven't completed within the specified timeout, it's an error\n        if (failedList != null)\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              formatString(\"{0} out of {1} the property {2} to be of version {3} within {4} seconds! Failed cores: {5}\",\n                  failedList.size(), concurrentTasks.size() + 1, expectedVersion, 30, failedList));\n      } catch (InterruptedException e) {\n        log.warn(formatString(\n            \"Request was interrupted . trying to set the clusterprops to version {0} to propagate to {1} nodes \",\n            expectedVersion, concurrentTasks.size()));\n        Thread.currentThread().interrupt();\n\n      }\n    });\n\n    log.info(\"Took {}ms to update the clusterprops to be of version {}  on {} nodes\",\n        timer.getTime(), expectedVersion, concurrentTasks.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#waitForStateSync(int,CoreContainer).mjava","sourceNew":null,"sourceOld":"  private void waitForStateSync(int expectedVersion, CoreContainer coreContainer) {\n    final RTimer timer = new RTimer();\n    int waitTimeSecs = 30;\n    // get a list of active replica cores to query for the schema zk version (skipping this core of course)\n    List<PerNodeCallable> concurrentTasks = new ArrayList<>();\n\n    ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n    for (String nodeName : zkStateReader.getClusterState().getLiveNodes()) {\n      PerNodeCallable e = new PerNodeCallable(zkStateReader.getBaseUrlForNodeName(nodeName), expectedVersion, waitTimeSecs);\n      concurrentTasks.add(e);\n    }\n    if (concurrentTasks.isEmpty()) return; // nothing to wait for ...\n\n    log.info(\"Waiting up to {} secs for {} nodes to update clusterprops to be of version {} \",\n        waitTimeSecs, concurrentTasks.size(), expectedVersion);\n    SolrConfigHandler.execInparallel(concurrentTasks, parallelExecutor -> {\n      try {\n        List<String> failedList = SolrConfigHandler.executeAll(expectedVersion, waitTimeSecs, concurrentTasks, parallelExecutor);\n\n        // if any tasks haven't completed within the specified timeout, it's an error\n        if (failedList != null)\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              formatString(\"{0} out of {1} the property {2} to be of version {3} within {4} seconds! Failed cores: {5}\",\n                  failedList.size(), concurrentTasks.size() + 1, expectedVersion, 30, failedList));\n      } catch (InterruptedException e) {\n        log.warn(formatString(\n            \"Request was interrupted . trying to set the clusterprops to version {0} to propagate to {1} nodes \",\n            expectedVersion, concurrentTasks.size()));\n        Thread.currentThread().interrupt();\n\n      }\n    });\n\n    log.info(\"Took {}ms to update the clusterprops to be of version {}  on {} nodes\",\n        timer.getTime(), expectedVersion, concurrentTasks.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb50877dc038c021eba3a70999fd1f6ed85001c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fb50877dc038c021eba3a70999fd1f6ed85001c1","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}