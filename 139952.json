{"path":"src/java/org/apache/lucene/search/TermScorer#next().mjava","commits":[{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#next().mjava","pathOld":"/dev/null","sourceNew":"  public boolean next() throws IOException {\n    pointer++;\n    if (pointer >= pointerMax) {\n      pointerMax = termDocs.read(docs, freqs);    // refill buffer\n      if (pointerMax != 0) {\n        pointer = 0;\n      } else {\n        termDocs.close();\t\t\t  // close stream\n        doc = Integer.MAX_VALUE;\t\t  // set to sentinel value\n        return false;\n      }\n    } \n    doc = docs[pointer];\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"591e76e4f4581ee94453dd46609d65b9c2e825ee","date":1092775126,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#next().mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#next().mjava","sourceNew":"  /** Advances to the next document matching the query.\n   * <br>The iterator over the matching documents is buffered using\n   * {@link TermDocs#read(int[],int[])}.\n   * @return true iff there is another document matching the query.\n   */\n  public boolean next() throws IOException {\n    pointer++;\n    if (pointer >= pointerMax) {\n      pointerMax = termDocs.read(docs, freqs);    // refill buffer\n      if (pointerMax != 0) {\n        pointer = 0;\n      } else {\n        termDocs.close();\t\t\t  // close stream\n        doc = Integer.MAX_VALUE;\t\t  // set to sentinel value\n        return false;\n      }\n    } \n    doc = docs[pointer];\n    return true;\n  }\n\n","sourceOld":"  public boolean next() throws IOException {\n    pointer++;\n    if (pointer >= pointerMax) {\n      pointerMax = termDocs.read(docs, freqs);    // refill buffer\n      if (pointerMax != 0) {\n        pointer = 0;\n      } else {\n        termDocs.close();\t\t\t  // close stream\n        doc = Integer.MAX_VALUE;\t\t  // set to sentinel value\n        return false;\n      }\n    } \n    doc = docs[pointer];\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a53bff5f7abfecc50821f3dfcdca3d4c445cf88","date":1095875760,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#next().mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#next().mjava","sourceNew":"  /** Advances to the next document matching the query.\n   * <br>The iterator over the matching documents is buffered using\n   * {@link TermDocs#read(int[],int[])}.\n   * @return true iff there is another document matching the query.\n   */\n  public boolean next() throws IOException {\n    pointer++;\n    if (pointer >= pointerMax) {\n      pointerMax = termDocs.read(docs, freqs);    // refill buffer\n      if (pointerMax != 0) {\n        pointer = 0;\n      } else {\n        termDocs.close();                         // close stream\n        doc = Integer.MAX_VALUE;                  // set to sentinel value\n        return false;\n      }\n    } \n    doc = docs[pointer];\n    return true;\n  }\n\n","sourceOld":"  /** Advances to the next document matching the query.\n   * <br>The iterator over the matching documents is buffered using\n   * {@link TermDocs#read(int[],int[])}.\n   * @return true iff there is another document matching the query.\n   */\n  public boolean next() throws IOException {\n    pointer++;\n    if (pointer >= pointerMax) {\n      pointerMax = termDocs.read(docs, freqs);    // refill buffer\n      if (pointerMax != 0) {\n        pointer = 0;\n      } else {\n        termDocs.close();\t\t\t  // close stream\n        doc = Integer.MAX_VALUE;\t\t  // set to sentinel value\n        return false;\n      }\n    } \n    doc = docs[pointer];\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#next().mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#next().mjava","sourceNew":"  /**\n   * Advances to the next document matching the query. <br>\n   * The iterator over the matching documents is buffered using\n   * {@link TermDocs#read(int[],int[])}.\n   * \n   * @return true iff there is another document matching the query.\n   * @deprecated use {@link #nextDoc()} instead.\n   */\n  public boolean next() throws IOException {\n    return nextDoc() != NO_MORE_DOCS;\n  }\n\n","sourceOld":"  /** Advances to the next document matching the query.\n   * <br>The iterator over the matching documents is buffered using\n   * {@link TermDocs#read(int[],int[])}.\n   * @return true iff there is another document matching the query.\n   */\n  public boolean next() throws IOException {\n    pointer++;\n    if (pointer >= pointerMax) {\n      pointerMax = termDocs.read(docs, freqs);    // refill buffer\n      if (pointerMax != 0) {\n        pointer = 0;\n      } else {\n        termDocs.close();                         // close stream\n        doc = Integer.MAX_VALUE;                  // set to sentinel value\n        return false;\n      }\n    } \n    doc = docs[pointer];\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438aef2dc00a23f2716882753fe225fbce4cfbfc","date":1255281460,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/TermScorer#next().mjava","sourceNew":null,"sourceOld":"  /**\n   * Advances to the next document matching the query. <br>\n   * The iterator over the matching documents is buffered using\n   * {@link TermDocs#read(int[],int[])}.\n   * \n   * @return true iff there is another document matching the query.\n   * @deprecated use {@link #nextDoc()} instead.\n   */\n  public boolean next() throws IOException {\n    return nextDoc() != NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["9a53bff5f7abfecc50821f3dfcdca3d4c445cf88"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9a53bff5f7abfecc50821f3dfcdca3d4c445cf88":["591e76e4f4581ee94453dd46609d65b9c2e825ee"],"591e76e4f4581ee94453dd46609d65b9c2e825ee":["15c469602973ef1a33c9a07367a380d278ffab20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["438aef2dc00a23f2716882753fe225fbce4cfbfc"],"15c469602973ef1a33c9a07367a380d278ffab20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["438aef2dc00a23f2716882753fe225fbce4cfbfc"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15c469602973ef1a33c9a07367a380d278ffab20"],"9a53bff5f7abfecc50821f3dfcdca3d4c445cf88":["30a558487f2298c2c19ceca9103c1b6865d64708"],"591e76e4f4581ee94453dd46609d65b9c2e825ee":["9a53bff5f7abfecc50821f3dfcdca3d4c445cf88"],"15c469602973ef1a33c9a07367a380d278ffab20":["591e76e4f4581ee94453dd46609d65b9c2e825ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}