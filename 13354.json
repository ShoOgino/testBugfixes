{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyAbstractAnalyticsFacetCloudTest#[T-extends-Comparable[T]]_calculateFacetedStat(ArrayList[ArrayList[T]],String).mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyAbstractAnalyticsFacetCloudTest#[T-extends-Comparable[T]]_calculateFacetedStat(ArrayList[ArrayList[T]],String).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n  public <T extends Comparable<T>> ArrayList calculateFacetedStat(ArrayList<ArrayList<T>> lists, String stat) {\n    ArrayList result;\n    if (stat.contains(\"perc_\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n        ArrayList<Integer> percs = new ArrayList<>(1);\n        percs.add(ord);\n        OrdinalCalculator.putOrdinalsInPosition(list, percs);\n        result.add(list.get(ord));\n      }\n    } else if (stat.equals(\"count\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        result.add((long)list.size());\n      }\n    } else if (stat.equals(\"missing\")) {\n      result = new ArrayList<Long>();\n      for (ArrayList<T> list : lists) {\n        result.add(calculateMissing(list,latestType));\n      }\n    } else if (stat.equals(\"unique\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        HashSet<T> set = new HashSet<>();\n        set.addAll(list);\n        result.add((long)set.size());\n      }\n    } else if (stat.equals(\"max\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(list.size()-1));\n      }\n    } else if (stat.equals(\"min\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort((List<T>)list);\n        result.add(list.get(0));\n      }\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyAbstractAnalyticsFacetCloudTest#[T-extends-Comparable[T]]_calculateFacetedStat(ArrayList[ArrayList[T]],String).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyAbstractAnalyticsFacetCloudTest#[T-extends-Comparable[T]]_calculateFacetedStat(ArrayList[ArrayList[T]],String).mjava","sourceNew":"  @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n  public <T extends Comparable<T>> ArrayList calculateFacetedStat(ArrayList<ArrayList<T>> lists, String stat) {\n    ArrayList result;\n    if (stat.contains(\"perc_\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n        ArrayList<Integer> percs = new ArrayList<>(1);\n        percs.add(ord);\n        OrdinalCalculator.putOrdinalsInPosition(list, percs);\n        result.add(list.get(ord));\n      }\n    } else if (stat.equals(\"count\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        result.add((long)list.size());\n      }\n    } else if (stat.equals(\"missing\")) {\n      result = new ArrayList<Long>();\n      for (ArrayList<T> list : lists) {\n        result.add(calculateMissing(list,latestType));\n      }\n    } else if (stat.equals(\"unique\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        HashSet<T> set = new HashSet<>();\n        set.addAll(list);\n        result.add((long)set.size());\n      }\n    } else if (stat.equals(\"max\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(list.size()-1));\n      }\n    } else if (stat.equals(\"min\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(0));\n      }\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","sourceOld":"  @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n  public <T extends Comparable<T>> ArrayList calculateFacetedStat(ArrayList<ArrayList<T>> lists, String stat) {\n    ArrayList result;\n    if (stat.contains(\"perc_\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n        ArrayList<Integer> percs = new ArrayList<>(1);\n        percs.add(ord);\n        OrdinalCalculator.putOrdinalsInPosition(list, percs);\n        result.add(list.get(ord));\n      }\n    } else if (stat.equals(\"count\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        result.add((long)list.size());\n      }\n    } else if (stat.equals(\"missing\")) {\n      result = new ArrayList<Long>();\n      for (ArrayList<T> list : lists) {\n        result.add(calculateMissing(list,latestType));\n      }\n    } else if (stat.equals(\"unique\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        HashSet<T> set = new HashSet<>();\n        set.addAll(list);\n        result.add((long)set.size());\n      }\n    } else if (stat.equals(\"max\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(list.size()-1));\n      }\n    } else if (stat.equals(\"min\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort((List<T>)list);\n        result.add(list.get(0));\n      }\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}