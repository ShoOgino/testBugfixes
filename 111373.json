{"path":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestSimplifications#testUnorderedOverlaps().mjava","commits":[{"id":"0aac4f97c29dc6e1ecc8c2143596fadfff1a4942","date":1551085126,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestSimplifications#testUnorderedOverlaps().mjava","pathOld":"/dev/null","sourceNew":"  public void testUnorderedOverlaps() {\n    IntervalsSource actual = Intervals.unordered(true, Intervals.term(\"term\"));\n    assertEquals(Intervals.term(\"term\"), actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd30b14e465b221a47cab8b72c44bb11edd6437f","date":1551085569,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestSimplifications#testUnorderedOverlaps().mjava","pathOld":"/dev/null","sourceNew":"  public void testUnorderedOverlaps() {\n    IntervalsSource actual = Intervals.unordered(true, Intervals.term(\"term\"));\n    assertEquals(Intervals.term(\"term\"), actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde","date":1553685823,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestSimplifications#testUnorderedOverlaps().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestSimplifications#testUnorderedOverlaps().mjava","sourceNew":"  public void testUnorderedOverlaps() {\n    // UNORDERED_NO_OVERLAPS(term) => term\n    IntervalsSource actual = Intervals.unordered(false, Intervals.term(\"term\"));\n    assertEquals(Intervals.term(\"term\"), actual);\n  }\n\n","sourceOld":"  public void testUnorderedOverlaps() {\n    IntervalsSource actual = Intervals.unordered(true, Intervals.term(\"term\"));\n    assertEquals(Intervals.term(\"term\"), actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d80eb3a3efa6c6d985fb5d0c464f95d2792ada53","date":1559915156,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestSimplifications#testUnorderedOverlaps().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestSimplifications#testUnorderedOverlaps().mjava","sourceNew":"  public void testUnorderedOverlaps() {\n    // UNORDERED_NO_OVERLAPS(term, term) => ORDERED(term, term)\n    IntervalsSource actual = Intervals.unorderedNoOverlaps(Intervals.term(\"term\"), Intervals.term(\"term\"));\n    assertEquals(Intervals.ordered(Intervals.term(\"term\"), Intervals.term(\"term\")), actual);\n  }\n\n","sourceOld":"  public void testUnorderedOverlaps() {\n    // UNORDERED_NO_OVERLAPS(term) => term\n    IntervalsSource actual = Intervals.unordered(false, Intervals.term(\"term\"));\n    assertEquals(Intervals.term(\"term\"), actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestSimplifications#testUnorderedOverlaps().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestSimplifications#testUnorderedOverlaps().mjava","sourceNew":"  public void testUnorderedOverlaps() {\n    // UNORDERED_NO_OVERLAPS(term, term) => ORDERED(term, term)\n    IntervalsSource actual = Intervals.unorderedNoOverlaps(Intervals.term(\"term\"), Intervals.term(\"term\"));\n    assertEquals(Intervals.ordered(Intervals.term(\"term\"), Intervals.term(\"term\")), actual);\n  }\n\n","sourceOld":"  public void testUnorderedOverlaps() {\n    // UNORDERED_NO_OVERLAPS(term, term) => ORDERED(term, term)\n    IntervalsSource actual = Intervals.unorderedNoOverlaps(Intervals.term(\"term\"), Intervals.term(\"term\"));\n    assertEquals(Intervals.ordered(Intervals.term(\"term\"), Intervals.term(\"term\")), actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d80eb3a3efa6c6d985fb5d0c464f95d2792ada53":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"],"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["d80eb3a3efa6c6d985fb5d0c464f95d2792ada53"],"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["dd30b14e465b221a47cab8b72c44bb11edd6437f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0aac4f97c29dc6e1ecc8c2143596fadfff1a4942":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd30b14e465b221a47cab8b72c44bb11edd6437f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0aac4f97c29dc6e1ecc8c2143596fadfff1a4942"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"d80eb3a3efa6c6d985fb5d0c464f95d2792ada53":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["d80eb3a3efa6c6d985fb5d0c464f95d2792ada53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0aac4f97c29dc6e1ecc8c2143596fadfff1a4942","dd30b14e465b221a47cab8b72c44bb11edd6437f"],"0aac4f97c29dc6e1ecc8c2143596fadfff1a4942":["dd30b14e465b221a47cab8b72c44bb11edd6437f"],"dd30b14e465b221a47cab8b72c44bb11edd6437f":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}