{"path":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,String,boolean).mjava","commits":[{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":1,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","sourceNew":"  private void testJoins(String toColl, String fromColl, String toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c^2\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","sourceOld":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c^2\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","sourceNew":"  private void testJoins(String toColl, String fromColl, String toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c^2\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","sourceOld":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c^2\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void testJoins(String toColl, String fromColl, String toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c^2\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,String,boolean).mjava","sourceNew":"  private void testJoins(String toColl, String fromColl, String toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException, InterruptedException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c^2\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.createAlias(alias, fromColl).process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","sourceOld":"  private void testJoins(String toColl, String fromColl, String toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c^2\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"]},"commit2Childs":{"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}