{"path":"lucene/core/src/java/org/apache/lucene/util/LongsRef#compareTo(LongsRef).mjava","commits":[{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongsRef#compareTo(LongsRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Signed int order comparison */\n  public int compareTo(LongsRef other) {\n    if (this == other) return 0;\n\n    final long[] aInts = this.longs;\n    int aUpto = this.offset;\n    final long[] bInts = other.longs;\n    int bUpto = other.offset;\n\n    final long aStop = aUpto + Math.min(this.length, other.length);\n\n    while(aUpto < aStop) {\n      long aInt = aInts[aUpto++];\n      long bInt = bInts[bUpto++];\n      if (aInt > bInt) {\n        return 1;\n      } else if (aInt < bInt) {\n        return -1;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongsRef#compareTo(LongsRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Signed int order comparison */\n  public int compareTo(LongsRef other) {\n    if (this == other) return 0;\n\n    final long[] aInts = this.longs;\n    int aUpto = this.offset;\n    final long[] bInts = other.longs;\n    int bUpto = other.offset;\n\n    final long aStop = aUpto + Math.min(this.length, other.length);\n\n    while(aUpto < aStop) {\n      long aInt = aInts[aUpto++];\n      long bInt = bInts[bUpto++];\n      if (aInt > bInt) {\n        return 1;\n      } else if (aInt < bInt) {\n        return -1;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongsRef#compareTo(LongsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LongsRef#compareTo(LongsRef).mjava","sourceNew":"  /** Signed int order comparison */\n  @Override\n  public int compareTo(LongsRef other) {\n    if (this == other) return 0;\n\n    final long[] aInts = this.longs;\n    int aUpto = this.offset;\n    final long[] bInts = other.longs;\n    int bUpto = other.offset;\n\n    final long aStop = aUpto + Math.min(this.length, other.length);\n\n    while(aUpto < aStop) {\n      long aInt = aInts[aUpto++];\n      long bInt = bInts[bUpto++];\n      if (aInt > bInt) {\n        return 1;\n      } else if (aInt < bInt) {\n        return -1;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","sourceOld":"  /** Signed int order comparison */\n  public int compareTo(LongsRef other) {\n    if (this == other) return 0;\n\n    final long[] aInts = this.longs;\n    int aUpto = this.offset;\n    final long[] bInts = other.longs;\n    int bUpto = other.offset;\n\n    final long aStop = aUpto + Math.min(this.length, other.length);\n\n    while(aUpto < aStop) {\n      long aInt = aInts[aUpto++];\n      long bInt = bInts[bUpto++];\n      if (aInt > bInt) {\n        return 1;\n      } else if (aInt < bInt) {\n        return -1;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongsRef#compareTo(LongsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LongsRef#compareTo(LongsRef).mjava","sourceNew":"  /** Signed int order comparison */\n  @Override\n  public int compareTo(LongsRef other) {\n    if (this == other) return 0;\n\n    final long[] aInts = this.longs;\n    int aUpto = this.offset;\n    final long[] bInts = other.longs;\n    int bUpto = other.offset;\n\n    final long aStop = aUpto + Math.min(this.length, other.length);\n\n    while(aUpto < aStop) {\n      long aInt = aInts[aUpto++];\n      long bInt = bInts[bUpto++];\n      if (aInt > bInt) {\n        return 1;\n      } else if (aInt < bInt) {\n        return -1;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","sourceOld":"  /** Signed int order comparison */\n  public int compareTo(LongsRef other) {\n    if (this == other) return 0;\n\n    final long[] aInts = this.longs;\n    int aUpto = this.offset;\n    final long[] bInts = other.longs;\n    int bUpto = other.offset;\n\n    final long aStop = aUpto + Math.min(this.length, other.length);\n\n    while(aUpto < aStop) {\n      long aInt = aInts[aUpto++];\n      long bInt = bInts[bUpto++];\n      if (aInt > bInt) {\n        return 1;\n      } else if (aInt < bInt) {\n        return -1;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongsRef#compareTo(LongsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LongsRef#compareTo(LongsRef).mjava","sourceNew":"  /** Signed int order comparison */\n  @Override\n  public int compareTo(LongsRef other) {\n    return FutureArrays.compare(this.longs, this.offset, this.offset + this.length, \n                                other.longs, other.offset, other.offset + other.length);\n  }\n\n","sourceOld":"  /** Signed int order comparison */\n  @Override\n  public int compareTo(LongsRef other) {\n    if (this == other) return 0;\n\n    final long[] aInts = this.longs;\n    int aUpto = this.offset;\n    final long[] bInts = other.longs;\n    int bUpto = other.offset;\n\n    final long aStop = aUpto + Math.min(this.length, other.length);\n\n    while(aUpto < aStop) {\n      long aInt = aInts[aUpto++];\n      long bInt = bInts[bUpto++];\n      if (aInt > bInt) {\n        return 1;\n      } else if (aInt < bInt) {\n        return -1;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongsRef#compareTo(LongsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LongsRef#compareTo(LongsRef).mjava","sourceNew":"  /** Signed int order comparison */\n  @Override\n  public int compareTo(LongsRef other) {\n    return Arrays.compare(this.longs, this.offset, this.offset + this.length, \n                                other.longs, other.offset, other.offset + other.length);\n  }\n\n","sourceOld":"  /** Signed int order comparison */\n  @Override\n  public int compareTo(LongsRef other) {\n    return FutureArrays.compare(this.longs, this.offset, this.offset + this.length, \n                                other.longs, other.offset, other.offset + other.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["55110eb60c5105294fc2ae7912d82b750865aa58","7530de27b87b961b51f01bd1299b7004d46e8823"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["456d7e7092cb043c740b4674301660ee8abc26fe"],"456d7e7092cb043c740b4674301660ee8abc26fe":["7530de27b87b961b51f01bd1299b7004d46e8823"],"55110eb60c5105294fc2ae7912d82b750865aa58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["55110eb60c5105294fc2ae7912d82b750865aa58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"456d7e7092cb043c740b4674301660ee8abc26fe":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"55110eb60c5105294fc2ae7912d82b750865aa58":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","456d7e7092cb043c740b4674301660ee8abc26fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}