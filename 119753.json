{"path":"solr/core/src/java/org/apache/solr/schema/EnumField#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","commits":[{"id":"0c81907bd971f786e378654d32b80da32b0e950d","date":1578330742,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Integer minValue = enumMapping.stringValueToIntValue(min);\n    Integer maxValue = enumMapping.stringValueToIntValue(max);\n\n    if (field.multiValued() && field.hasDocValues() && !field.indexed()) {\n      // for the multi-valued dv-case, the default rangeimpl over toInternal is correct\n      return super.getSpecializedRangeQuery(parser, field, minValue.toString(), maxValue.toString(), minInclusive, maxInclusive);\n    }\n    Query query = null;\n    final boolean matchOnly = field.hasDocValues() && !field.indexed();\n    if (matchOnly) {\n      long lowerValue = Long.MIN_VALUE;\n      long upperValue = Long.MAX_VALUE;\n      if (minValue != null) {\n        lowerValue = minValue.longValue();\n        if (minInclusive == false) {\n          ++lowerValue;\n        }\n      }\n      if (maxValue != null) {\n        upperValue = maxValue.longValue();\n        if (maxInclusive == false) {\n          --upperValue;\n        }\n      }\n      query = new ConstantScoreQuery(NumericDocValuesField.newSlowRangeQuery(field.getName(), lowerValue, upperValue));\n    } else {\n      query = LegacyNumericRangeQuery.newIntRange(field.getName(), DEFAULT_PRECISION_STEP,\n          min == null ? null : minValue,\n          max == null ? null : maxValue,\n          minInclusive, maxInclusive);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Integer minValue = enumMapping.stringValueToIntValue(min);\n    Integer maxValue = enumMapping.stringValueToIntValue(max);\n\n    if (field.multiValued() && field.hasDocValues() && !field.indexed()) {\n      // for the multi-valued dv-case, the default rangeimpl over toInternal is correct\n      return super.getRangeQuery(parser, field, minValue.toString(), maxValue.toString(), minInclusive, maxInclusive);\n    }\n    Query query = null;\n    final boolean matchOnly = field.hasDocValues() && !field.indexed();\n    if (matchOnly) {\n      long lowerValue = Long.MIN_VALUE;\n      long upperValue = Long.MAX_VALUE;\n      if (minValue != null) {\n        lowerValue = minValue.longValue();\n        if (minInclusive == false) {\n          ++lowerValue;\n        }\n      }\n      if (maxValue != null) {\n        upperValue = maxValue.longValue();\n        if (maxInclusive == false) {\n          --upperValue;\n        }\n      }\n      query = new ConstantScoreQuery(NumericDocValuesField.newSlowRangeQuery(field.getName(), lowerValue, upperValue));\n    } else {\n      query = LegacyNumericRangeQuery.newIntRange(field.getName(), DEFAULT_PRECISION_STEP,\n          min == null ? null : minValue,\n          max == null ? null : maxValue,\n          minInclusive, maxInclusive);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Integer minValue = enumMapping.stringValueToIntValue(min);\n    Integer maxValue = enumMapping.stringValueToIntValue(max);\n\n    if (field.multiValued() && field.hasDocValues() && !field.indexed()) {\n      // for the multi-valued dv-case, the default rangeimpl over toInternal is correct\n      return super.getSpecializedRangeQuery(parser, field, minValue.toString(), maxValue.toString(), minInclusive, maxInclusive);\n    }\n    Query query = null;\n    final boolean matchOnly = field.hasDocValues() && !field.indexed();\n    if (matchOnly) {\n      long lowerValue = Long.MIN_VALUE;\n      long upperValue = Long.MAX_VALUE;\n      if (minValue != null) {\n        lowerValue = minValue.longValue();\n        if (minInclusive == false) {\n          ++lowerValue;\n        }\n      }\n      if (maxValue != null) {\n        upperValue = maxValue.longValue();\n        if (maxInclusive == false) {\n          --upperValue;\n        }\n      }\n      query = new ConstantScoreQuery(NumericDocValuesField.newSlowRangeQuery(field.getName(), lowerValue, upperValue));\n    } else {\n      query = LegacyNumericRangeQuery.newIntRange(field.getName(), DEFAULT_PRECISION_STEP,\n          min == null ? null : minValue,\n          max == null ? null : maxValue,\n          minInclusive, maxInclusive);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Integer minValue = enumMapping.stringValueToIntValue(min);\n    Integer maxValue = enumMapping.stringValueToIntValue(max);\n\n    if (field.multiValued() && field.hasDocValues() && !field.indexed()) {\n      // for the multi-valued dv-case, the default rangeimpl over toInternal is correct\n      return super.getRangeQuery(parser, field, minValue.toString(), maxValue.toString(), minInclusive, maxInclusive);\n    }\n    Query query = null;\n    final boolean matchOnly = field.hasDocValues() && !field.indexed();\n    if (matchOnly) {\n      long lowerValue = Long.MIN_VALUE;\n      long upperValue = Long.MAX_VALUE;\n      if (minValue != null) {\n        lowerValue = minValue.longValue();\n        if (minInclusive == false) {\n          ++lowerValue;\n        }\n      }\n      if (maxValue != null) {\n        upperValue = maxValue.longValue();\n        if (maxInclusive == false) {\n          --upperValue;\n        }\n      }\n      query = new ConstantScoreQuery(NumericDocValuesField.newSlowRangeQuery(field.getName(), lowerValue, upperValue));\n    } else {\n      query = LegacyNumericRangeQuery.newIntRange(field.getName(), DEFAULT_PRECISION_STEP,\n          min == null ? null : minValue,\n          max == null ? null : maxValue,\n          minInclusive, maxInclusive);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381df1a98f2a399bf06d747fc8cea1b2a17ae38","date":1578526395,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Integer minValue = enumMapping.stringValueToIntValue(min);\n    Integer maxValue = enumMapping.stringValueToIntValue(max);\n\n    if (field.multiValued() && field.hasDocValues() && !field.indexed()) {\n      // for the multi-valued dv-case, the default rangeimpl over toInternal is correct\n      return super.getRangeQuery(parser, field, minValue.toString(), maxValue.toString(), minInclusive, maxInclusive);\n    }\n    Query query = null;\n    final boolean matchOnly = field.hasDocValues() && !field.indexed();\n    if (matchOnly) {\n      long lowerValue = Long.MIN_VALUE;\n      long upperValue = Long.MAX_VALUE;\n      if (minValue != null) {\n        lowerValue = minValue.longValue();\n        if (minInclusive == false) {\n          ++lowerValue;\n        }\n      }\n      if (maxValue != null) {\n        upperValue = maxValue.longValue();\n        if (maxInclusive == false) {\n          --upperValue;\n        }\n      }\n      query = new ConstantScoreQuery(NumericDocValuesField.newSlowRangeQuery(field.getName(), lowerValue, upperValue));\n    } else {\n      query = LegacyNumericRangeQuery.newIntRange(field.getName(), DEFAULT_PRECISION_STEP,\n          min == null ? null : minValue,\n          max == null ? null : maxValue,\n          minInclusive, maxInclusive);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Integer minValue = enumMapping.stringValueToIntValue(min);\n    Integer maxValue = enumMapping.stringValueToIntValue(max);\n\n    if (field.multiValued() && field.hasDocValues() && !field.indexed()) {\n      // for the multi-valued dv-case, the default rangeimpl over toInternal is correct\n      return super.getSpecializedRangeQuery(parser, field, minValue.toString(), maxValue.toString(), minInclusive, maxInclusive);\n    }\n    Query query = null;\n    final boolean matchOnly = field.hasDocValues() && !field.indexed();\n    if (matchOnly) {\n      long lowerValue = Long.MIN_VALUE;\n      long upperValue = Long.MAX_VALUE;\n      if (minValue != null) {\n        lowerValue = minValue.longValue();\n        if (minInclusive == false) {\n          ++lowerValue;\n        }\n      }\n      if (maxValue != null) {\n        upperValue = maxValue.longValue();\n        if (maxInclusive == false) {\n          --upperValue;\n        }\n      }\n      query = new ConstantScoreQuery(NumericDocValuesField.newSlowRangeQuery(field.getName(), lowerValue, upperValue));\n    } else {\n      query = LegacyNumericRangeQuery.newIntRange(field.getName(), DEFAULT_PRECISION_STEP,\n          min == null ? null : minValue,\n          max == null ? null : maxValue,\n          minInclusive, maxInclusive);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Integer minValue = enumMapping.stringValueToIntValue(min);\n    Integer maxValue = enumMapping.stringValueToIntValue(max);\n\n    if (field.multiValued() && field.hasDocValues() && !field.indexed()) {\n      // for the multi-valued dv-case, the default rangeimpl over toInternal is correct\n      return super.getRangeQuery(parser, field, minValue.toString(), maxValue.toString(), minInclusive, maxInclusive);\n    }\n    Query query = null;\n    final boolean matchOnly = field.hasDocValues() && !field.indexed();\n    if (matchOnly) {\n      long lowerValue = Long.MIN_VALUE;\n      long upperValue = Long.MAX_VALUE;\n      if (minValue != null) {\n        lowerValue = minValue.longValue();\n        if (minInclusive == false) {\n          ++lowerValue;\n        }\n      }\n      if (maxValue != null) {\n        upperValue = maxValue.longValue();\n        if (maxInclusive == false) {\n          --upperValue;\n        }\n      }\n      query = new ConstantScoreQuery(NumericDocValuesField.newSlowRangeQuery(field.getName(), lowerValue, upperValue));\n    } else {\n      query = LegacyNumericRangeQuery.newIntRange(field.getName(), DEFAULT_PRECISION_STEP,\n          min == null ? null : minValue,\n          max == null ? null : maxValue,\n          minInclusive, maxInclusive);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Integer minValue = enumMapping.stringValueToIntValue(min);\n    Integer maxValue = enumMapping.stringValueToIntValue(max);\n\n    if (field.multiValued() && field.hasDocValues() && !field.indexed()) {\n      // for the multi-valued dv-case, the default rangeimpl over toInternal is correct\n      return super.getSpecializedRangeQuery(parser, field, minValue.toString(), maxValue.toString(), minInclusive, maxInclusive);\n    }\n    Query query = null;\n    final boolean matchOnly = field.hasDocValues() && !field.indexed();\n    if (matchOnly) {\n      long lowerValue = Long.MIN_VALUE;\n      long upperValue = Long.MAX_VALUE;\n      if (minValue != null) {\n        lowerValue = minValue.longValue();\n        if (minInclusive == false) {\n          ++lowerValue;\n        }\n      }\n      if (maxValue != null) {\n        upperValue = maxValue.longValue();\n        if (maxInclusive == false) {\n          --upperValue;\n        }\n      }\n      query = new ConstantScoreQuery(NumericDocValuesField.newSlowRangeQuery(field.getName(), lowerValue, upperValue));\n    } else {\n      query = LegacyNumericRangeQuery.newIntRange(field.getName(), DEFAULT_PRECISION_STEP,\n          min == null ? null : minValue,\n          max == null ? null : maxValue,\n          minInclusive, maxInclusive);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7ba457c7f2595139254fab54362be336c5c355","date":1579734055,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Integer minValue = enumMapping.stringValueToIntValue(min);\n    Integer maxValue = enumMapping.stringValueToIntValue(max);\n\n    if (field.multiValued() && field.hasDocValues() && !field.indexed()) {\n      // for the multi-valued dv-case, the default rangeimpl over toInternal is correct\n      return super.getSpecializedRangeQuery(parser, field, minValue.toString(), maxValue.toString(), minInclusive, maxInclusive);\n    }\n    Query query = null;\n    final boolean matchOnly = field.hasDocValues() && !field.indexed();\n    if (matchOnly) {\n      long lowerValue = Long.MIN_VALUE;\n      long upperValue = Long.MAX_VALUE;\n      if (minValue != null) {\n        lowerValue = minValue.longValue();\n        if (minInclusive == false) {\n          ++lowerValue;\n        }\n      }\n      if (maxValue != null) {\n        upperValue = maxValue.longValue();\n        if (maxInclusive == false) {\n          --upperValue;\n        }\n      }\n      query = new ConstantScoreQuery(NumericDocValuesField.newSlowRangeQuery(field.getName(), lowerValue, upperValue));\n    } else {\n      query = LegacyNumericRangeQuery.newIntRange(field.getName(), DEFAULT_PRECISION_STEP,\n          min == null ? null : minValue,\n          max == null ? null : maxValue,\n          minInclusive, maxInclusive);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Integer minValue = enumMapping.stringValueToIntValue(min);\n    Integer maxValue = enumMapping.stringValueToIntValue(max);\n\n    if (field.multiValued() && field.hasDocValues() && !field.indexed()) {\n      // for the multi-valued dv-case, the default rangeimpl over toInternal is correct\n      return super.getRangeQuery(parser, field, minValue.toString(), maxValue.toString(), minInclusive, maxInclusive);\n    }\n    Query query = null;\n    final boolean matchOnly = field.hasDocValues() && !field.indexed();\n    if (matchOnly) {\n      long lowerValue = Long.MIN_VALUE;\n      long upperValue = Long.MAX_VALUE;\n      if (minValue != null) {\n        lowerValue = minValue.longValue();\n        if (minInclusive == false) {\n          ++lowerValue;\n        }\n      }\n      if (maxValue != null) {\n        upperValue = maxValue.longValue();\n        if (maxInclusive == false) {\n          --upperValue;\n        }\n      }\n      query = new ConstantScoreQuery(NumericDocValuesField.newSlowRangeQuery(field.getName(), lowerValue, upperValue));\n    } else {\n      query = LegacyNumericRangeQuery.newIntRange(field.getName(), DEFAULT_PRECISION_STEP,\n          min == null ? null : minValue,\n          max == null ? null : maxValue,\n          minInclusive, maxInclusive);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["0c81907bd971f786e378654d32b80da32b0e950d"],"0c81907bd971f786e378654d32b80da32b0e950d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1da93834e39ce341a13e42b611d0a83bd3114bba":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"5c7ba457c7f2595139254fab54362be336c5c355":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0c81907bd971f786e378654d32b80da32b0e950d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c7ba457c7f2595139254fab54362be336c5c355"]},"commit2Childs":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["1da93834e39ce341a13e42b611d0a83bd3114bba","5c7ba457c7f2595139254fab54362be336c5c355"],"0c81907bd971f786e378654d32b80da32b0e950d":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c81907bd971f786e378654d32b80da32b0e950d","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"5c7ba457c7f2595139254fab54362be336c5c355":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["1da93834e39ce341a13e42b611d0a83bd3114bba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}