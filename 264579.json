{"path":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosWriter#writeInfos(Directory,String,String,SegmentInfos,IOContext).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosWriter#writeInfos(Directory,String,String,SegmentInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextSegmentInfosWriter#writeInfos(Directory,String,String,SegmentInfos,IOContext).mjava","sourceNew":"  @Override\n  public IndexOutput writeInfos(Directory dir, String segmentsFileName, String codecID, SegmentInfos infos, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    IndexOutput out = new ChecksumIndexOutput(dir.createOutput(segmentsFileName, new IOContext(new FlushInfo(infos.size(), infos.totalDocCount()))));\n    boolean success = false;\n    try {\n      // required preamble:\n      out.writeInt(SegmentInfos.FORMAT_CURRENT); // write FORMAT\n      out.writeString(codecID); // write codecID\n      // end preamble\n      \n      // version\n      SimpleTextUtil.write(out, VERSION);\n      SimpleTextUtil.write(out, Long.toString(infos.version), scratch);\n      SimpleTextUtil.writeNewline(out);\n\n      // counter\n      SimpleTextUtil.write(out, COUNTER);\n      SimpleTextUtil.write(out, Integer.toString(infos.counter), scratch);\n      SimpleTextUtil.writeNewline(out);\n\n      // user data\n      int numUserDataEntries = infos.getUserData() == null ? 0 : infos.getUserData().size();\n      SimpleTextUtil.write(out, NUM_USERDATA);\n      SimpleTextUtil.write(out, Integer.toString(numUserDataEntries), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      if (numUserDataEntries > 0) {\n        for (Map.Entry<String,String> userEntry : infos.getUserData().entrySet()) {\n          SimpleTextUtil.write(out, USERDATA_KEY);\n          SimpleTextUtil.write(out, userEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(out);\n          \n          SimpleTextUtil.write(out, USERDATA_VALUE);\n          SimpleTextUtil.write(out, userEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n      }\n      \n      // infos size\n      SimpleTextUtil.write(out, NUM_SEGMENTS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n\n      for (SegmentInfo si : infos) {\n        writeInfo(out, si);\n      } \n\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public IndexOutput writeInfos(Directory dir, String segmentsFileName, String codecID, SegmentInfos infos, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    IndexOutput out = new ChecksumIndexOutput(dir.createOutput(segmentsFileName, new IOContext(new FlushInfo(infos.size(), infos.totalDocCount()))));\n    boolean success = false;\n    try {\n      // required preamble:\n      out.writeInt(SegmentInfos.FORMAT_CURRENT); // write FORMAT\n      out.writeString(codecID); // write codecID\n      // end preamble\n      \n      // version\n      SimpleTextUtil.write(out, VERSION);\n      SimpleTextUtil.write(out, Long.toString(infos.version), scratch);\n      SimpleTextUtil.writeNewline(out);\n\n      // counter\n      SimpleTextUtil.write(out, COUNTER);\n      SimpleTextUtil.write(out, Integer.toString(infos.counter), scratch);\n      SimpleTextUtil.writeNewline(out);\n\n      // user data\n      int numUserDataEntries = infos.getUserData() == null ? 0 : infos.getUserData().size();\n      SimpleTextUtil.write(out, NUM_USERDATA);\n      SimpleTextUtil.write(out, Integer.toString(numUserDataEntries), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      if (numUserDataEntries > 0) {\n        for (Map.Entry<String,String> userEntry : infos.getUserData().entrySet()) {\n          SimpleTextUtil.write(out, USERDATA_KEY);\n          SimpleTextUtil.write(out, userEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(out);\n          \n          SimpleTextUtil.write(out, USERDATA_VALUE);\n          SimpleTextUtil.write(out, userEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n      }\n      \n      // infos size\n      SimpleTextUtil.write(out, NUM_SEGMENTS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n\n      for (SegmentInfo si : infos) {\n        writeInfo(out, si);\n      } \n\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosWriter#writeInfos(Directory,String,String,SegmentInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosWriter#writeInfos(Directory,String,String,SegmentInfos,IOContext).mjava","sourceNew":"  @Override\n  public IndexOutput writeInfos(Directory dir, String segmentsFileName, String codecID, SegmentInfos infos, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    IndexOutput out = new ChecksumIndexOutput(dir.createOutput(segmentsFileName, new IOContext(new FlushInfo(infos.size(), infos.totalDocCount()))));\n    boolean success = false;\n    try {\n      // required preamble:\n      out.writeInt(SegmentInfos.FORMAT_CURRENT); // write FORMAT\n      out.writeString(codecID); // write codecID\n      // end preamble\n      \n      // version\n      SimpleTextUtil.write(out, VERSION);\n      SimpleTextUtil.write(out, Long.toString(infos.version), scratch);\n      SimpleTextUtil.writeNewline(out);\n\n      // counter\n      SimpleTextUtil.write(out, COUNTER);\n      SimpleTextUtil.write(out, Integer.toString(infos.counter), scratch);\n      SimpleTextUtil.writeNewline(out);\n\n      // user data\n      int numUserDataEntries = infos.getUserData() == null ? 0 : infos.getUserData().size();\n      SimpleTextUtil.write(out, NUM_USERDATA);\n      SimpleTextUtil.write(out, Integer.toString(numUserDataEntries), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      if (numUserDataEntries > 0) {\n        for (Map.Entry<String,String> userEntry : infos.getUserData().entrySet()) {\n          SimpleTextUtil.write(out, USERDATA_KEY);\n          SimpleTextUtil.write(out, userEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(out);\n          \n          SimpleTextUtil.write(out, USERDATA_VALUE);\n          SimpleTextUtil.write(out, userEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n      }\n      \n      // infos size\n      SimpleTextUtil.write(out, NUM_SEGMENTS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n\n      for (SegmentInfo si : infos) {\n        writeInfo(out, si);\n      } \n\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public IndexOutput writeInfos(Directory dir, String segmentsFileName, String codecID, SegmentInfos infos, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    IndexOutput out = new ChecksumIndexOutput(dir.createOutput(segmentsFileName, new IOContext(new FlushInfo(infos.size(), infos.totalDocCount()))));\n    boolean success = false;\n    try {\n      // required preamble:\n      out.writeInt(SegmentInfos.FORMAT_CURRENT); // write FORMAT\n      out.writeString(codecID); // write codecID\n      // end preamble\n      \n      // version\n      SimpleTextUtil.write(out, VERSION);\n      SimpleTextUtil.write(out, Long.toString(infos.version), scratch);\n      SimpleTextUtil.writeNewline(out);\n\n      // counter\n      SimpleTextUtil.write(out, COUNTER);\n      SimpleTextUtil.write(out, Integer.toString(infos.counter), scratch);\n      SimpleTextUtil.writeNewline(out);\n\n      // user data\n      int numUserDataEntries = infos.getUserData() == null ? 0 : infos.getUserData().size();\n      SimpleTextUtil.write(out, NUM_USERDATA);\n      SimpleTextUtil.write(out, Integer.toString(numUserDataEntries), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      if (numUserDataEntries > 0) {\n        for (Map.Entry<String,String> userEntry : infos.getUserData().entrySet()) {\n          SimpleTextUtil.write(out, USERDATA_KEY);\n          SimpleTextUtil.write(out, userEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(out);\n          \n          SimpleTextUtil.write(out, USERDATA_VALUE);\n          SimpleTextUtil.write(out, userEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n      }\n      \n      // infos size\n      SimpleTextUtil.write(out, NUM_SEGMENTS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n\n      for (SegmentInfo si : infos) {\n        writeInfo(out, si);\n      } \n\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}