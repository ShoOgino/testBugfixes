{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SubmissionReport#report(QualityQuery,TopDocs,String,IndexSearcher).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SubmissionReport#report(QualityQuery,TopDocs,String,IndexSearcher).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SubmissionReport#report(QualityQuery,TopDocs,String,Searcher).mjava","sourceNew":"  /**\n   * Report a search result for a certain quality query.\n   * @param qq quality query for which the results are reported.\n   * @param td search results for the query.\n   * @param docNameField stored field used for fetching the result doc name.  \n   * @param searcher index access for fetching doc name.\n   * @throws IOException in case of a problem.\n   */\n  public void report(QualityQuery qq, TopDocs td, String docNameField, IndexSearcher searcher) throws IOException {\n    if (logger==null) {\n      return;\n    }\n    ScoreDoc sd[] = td.scoreDocs;\n    String sep = \" \\t \";\n    DocNameExtractor xt = new DocNameExtractor(docNameField);\n    for (int i=0; i<sd.length; i++) {\n      String docName = xt.docName(searcher,sd[i].doc);\n      logger.println(\n          qq.getQueryID()       + sep +\n          \"Q0\"                   + sep +\n          format(docName,20)    + sep +\n          format(\"\"+i,7)        + sep +\n          nf.format(sd[i].score) + sep +\n          name\n          );\n    }\n  }\n\n","sourceOld":"  /**\n   * Report a search result for a certain quality query.\n   * @param qq quality query for which the results are reported.\n   * @param td search results for the query.\n   * @param docNameField stored field used for fetching the result doc name.  \n   * @param searcher index access for fetching doc name.\n   * @throws IOException in case of a problem.\n   */\n  public void report(QualityQuery qq, TopDocs td, String docNameField, Searcher searcher) throws IOException {\n    if (logger==null) {\n      return;\n    }\n    ScoreDoc sd[] = td.scoreDocs;\n    String sep = \" \\t \";\n    DocNameExtractor xt = new DocNameExtractor(docNameField);\n    for (int i=0; i<sd.length; i++) {\n      String docName = xt.docName(searcher,sd[i].doc);\n      logger.println(\n          qq.getQueryID()       + sep +\n          \"Q0\"                   + sep +\n          format(docName,20)    + sep +\n          format(\"\"+i,7)        + sep +\n          nf.format(sd[i].score) + sep +\n          name\n          );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SubmissionReport#report(QualityQuery,TopDocs,String,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Report a search result for a certain quality query.\n   * @param qq quality query for which the results are reported.\n   * @param td search results for the query.\n   * @param docNameField stored field used for fetching the result doc name.  \n   * @param searcher index access for fetching doc name.\n   * @throws IOException in case of a problem.\n   */\n  public void report(QualityQuery qq, TopDocs td, String docNameField, IndexSearcher searcher) throws IOException {\n    if (logger==null) {\n      return;\n    }\n    ScoreDoc sd[] = td.scoreDocs;\n    String sep = \" \\t \";\n    DocNameExtractor xt = new DocNameExtractor(docNameField);\n    for (int i=0; i<sd.length; i++) {\n      String docName = xt.docName(searcher,sd[i].doc);\n      logger.println(\n          qq.getQueryID()       + sep +\n          \"Q0\"                   + sep +\n          format(docName,20)    + sep +\n          format(\"\"+i,7)        + sep +\n          nf.format(sd[i].score) + sep +\n          name\n          );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SubmissionReport#report(QualityQuery,TopDocs,String,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Report a search result for a certain quality query.\n   * @param qq quality query for which the results are reported.\n   * @param td search results for the query.\n   * @param docNameField stored field used for fetching the result doc name.  \n   * @param searcher index access for fetching doc name.\n   * @throws IOException in case of a problem.\n   */\n  public void report(QualityQuery qq, TopDocs td, String docNameField, IndexSearcher searcher) throws IOException {\n    if (logger==null) {\n      return;\n    }\n    ScoreDoc sd[] = td.scoreDocs;\n    String sep = \" \\t \";\n    DocNameExtractor xt = new DocNameExtractor(docNameField);\n    for (int i=0; i<sd.length; i++) {\n      String docName = xt.docName(searcher,sd[i].doc);\n      logger.println(\n          qq.getQueryID()       + sep +\n          \"Q0\"                   + sep +\n          format(docName,20)    + sep +\n          format(\"\"+i,7)        + sep +\n          nf.format(sd[i].score) + sep +\n          name\n          );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SubmissionReport#report(QualityQuery,TopDocs,String,IndexSearcher).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SubmissionReport#report(QualityQuery,TopDocs,String,IndexSearcher).mjava","sourceNew":"  /**\n   * Report a search result for a certain quality query.\n   * @param qq quality query for which the results are reported.\n   * @param td search results for the query.\n   * @param docNameField stored field used for fetching the result doc name.  \n   * @param searcher index access for fetching doc name.\n   * @throws IOException in case of a problem.\n   */\n  public void report(QualityQuery qq, TopDocs td, String docNameField, IndexSearcher searcher) throws IOException {\n    if (logger==null) {\n      return;\n    }\n    ScoreDoc sd[] = td.scoreDocs;\n    String sep = \" \\t \";\n    DocNameExtractor xt = new DocNameExtractor(docNameField);\n    for (int i=0; i<sd.length; i++) {\n      String docName = xt.docName(searcher,sd[i].doc);\n      logger.println(\n          qq.getQueryID()       + sep +\n          \"Q0\"                   + sep +\n          format(docName,20)    + sep +\n          format(\"\"+i,7)        + sep +\n          nf.format(sd[i].score) + sep +\n          name\n          );\n    }\n  }\n\n","sourceOld":"  /**\n   * Report a search result for a certain quality query.\n   * @param qq quality query for which the results are reported.\n   * @param td search results for the query.\n   * @param docNameField stored field used for fetching the result doc name.  \n   * @param searcher index access for fetching doc name.\n   * @throws IOException in case of a problem.\n   */\n  public void report(QualityQuery qq, TopDocs td, String docNameField, IndexSearcher searcher) throws IOException {\n    if (logger==null) {\n      return;\n    }\n    ScoreDoc sd[] = td.scoreDocs;\n    String sep = \" \\t \";\n    DocNameExtractor xt = new DocNameExtractor(docNameField);\n    for (int i=0; i<sd.length; i++) {\n      String docName = xt.docName(searcher,sd[i].doc);\n      logger.println(\n          qq.getQueryID()       + sep +\n          \"Q0\"                   + sep +\n          format(docName,20)    + sep +\n          format(\"\"+i,7)        + sep +\n          nf.format(sd[i].score) + sep +\n          name\n          );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","b89678825b68eccaf09e6ab71675fc0b0af1e099","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}