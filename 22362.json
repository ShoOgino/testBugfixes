{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosReader#read(Directory,String,String,IOContext).mjava","commits":[{"id":"500867f0f15393f6b2c38c3366e414fccba04ed6","date":1411520390,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosReader#read(Directory,String,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene50FieldInfosFormat.EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      FieldInfo infos[] = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50FieldInfosFormat.CODEC_NAME, \n                                     Lucene50FieldInfosFormat.FORMAT_START, \n                                     Lucene50FieldInfosFormat.FORMAT_CURRENT);\n        \n        final int size = input.readVInt(); //read in the size\n        infos = new FieldInfo[size];\n        \n        for (int i = 0; i < size; i++) {\n          String name = input.readString();\n          final int fieldNumber = input.readVInt();\n          if (fieldNumber < 0) {\n            throw new CorruptIndexException(\"invalid field number for field: \" + name + \", fieldNumber=\" + fieldNumber, input);\n          }\n          byte bits = input.readByte();\n          boolean isIndexed = (bits & Lucene50FieldInfosFormat.IS_INDEXED) != 0;\n          boolean storeTermVector = (bits & Lucene50FieldInfosFormat.STORE_TERMVECTOR) != 0;\n          boolean omitNorms = (bits & Lucene50FieldInfosFormat.OMIT_NORMS) != 0;\n          boolean storePayloads = (bits & Lucene50FieldInfosFormat.STORE_PAYLOADS) != 0;\n          final IndexOptions indexOptions;\n          if (!isIndexed) {\n            indexOptions = null;\n          } else if ((bits & Lucene50FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n            indexOptions = IndexOptions.DOCS_ONLY;\n          } else if ((bits & Lucene50FieldInfosFormat.OMIT_POSITIONS) != 0) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else if ((bits & Lucene50FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n          } else {\n            indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n          }\n          \n          // DV Types are packed in one byte\n          byte val = input.readByte();\n          final DocValuesType docValuesType = getDocValuesType(input, (byte) (val & 0x0F));\n          final DocValuesType normsType = getDocValuesType(input, (byte) ((val >>> 4) & 0x0F));\n          final long dvGen = input.readLong();\n          final Map<String,String> attributes = input.readStringStringMap();\n          try {\n            infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, omitNorms, storePayloads, \n                                     indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(attributes));\n            infos[i].checkConsistency();\n          } catch (IllegalStateException e) {\n            throw new CorruptIndexException(\"invalid fieldinfo for field: \" + name + \", fieldNumber=\" + fieldNumber, input, e);\n          }\n        }\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return new FieldInfos(infos);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb","date":1411653326,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosReader#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene50FieldInfosFormat.EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      FieldInfo infos[] = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50FieldInfosFormat.CODEC_NAME, \n                                     Lucene50FieldInfosFormat.FORMAT_START, \n                                     Lucene50FieldInfosFormat.FORMAT_CURRENT);\n        String id = input.readString();\n        if (!id.equals(segmentInfo.getId())) {\n          throw new CorruptIndexException(\"file mismatch, expected segment id=\" + segmentInfo.getId() + \", got=\" + id, input);\n        }\n        \n        final int size = input.readVInt(); //read in the size\n        infos = new FieldInfo[size];\n        \n        for (int i = 0; i < size; i++) {\n          String name = input.readString();\n          final int fieldNumber = input.readVInt();\n          if (fieldNumber < 0) {\n            throw new CorruptIndexException(\"invalid field number for field: \" + name + \", fieldNumber=\" + fieldNumber, input);\n          }\n          byte bits = input.readByte();\n          boolean isIndexed = (bits & Lucene50FieldInfosFormat.IS_INDEXED) != 0;\n          boolean storeTermVector = (bits & Lucene50FieldInfosFormat.STORE_TERMVECTOR) != 0;\n          boolean omitNorms = (bits & Lucene50FieldInfosFormat.OMIT_NORMS) != 0;\n          boolean storePayloads = (bits & Lucene50FieldInfosFormat.STORE_PAYLOADS) != 0;\n          final IndexOptions indexOptions;\n          if (!isIndexed) {\n            indexOptions = null;\n          } else if ((bits & Lucene50FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n            indexOptions = IndexOptions.DOCS_ONLY;\n          } else if ((bits & Lucene50FieldInfosFormat.OMIT_POSITIONS) != 0) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else if ((bits & Lucene50FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n          } else {\n            indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n          }\n          \n          // DV Types are packed in one byte\n          byte val = input.readByte();\n          final DocValuesType docValuesType = getDocValuesType(input, (byte) (val & 0x0F));\n          final DocValuesType normsType = getDocValuesType(input, (byte) ((val >>> 4) & 0x0F));\n          final long dvGen = input.readLong();\n          final Map<String,String> attributes = input.readStringStringMap();\n          try {\n            infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, omitNorms, storePayloads, \n                                     indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(attributes));\n            infos[i].checkConsistency();\n          } catch (IllegalStateException e) {\n            throw new CorruptIndexException(\"invalid fieldinfo for field: \" + name + \", fieldNumber=\" + fieldNumber, input, e);\n          }\n        }\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return new FieldInfos(infos);\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene50FieldInfosFormat.EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      FieldInfo infos[] = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50FieldInfosFormat.CODEC_NAME, \n                                     Lucene50FieldInfosFormat.FORMAT_START, \n                                     Lucene50FieldInfosFormat.FORMAT_CURRENT);\n        \n        final int size = input.readVInt(); //read in the size\n        infos = new FieldInfo[size];\n        \n        for (int i = 0; i < size; i++) {\n          String name = input.readString();\n          final int fieldNumber = input.readVInt();\n          if (fieldNumber < 0) {\n            throw new CorruptIndexException(\"invalid field number for field: \" + name + \", fieldNumber=\" + fieldNumber, input);\n          }\n          byte bits = input.readByte();\n          boolean isIndexed = (bits & Lucene50FieldInfosFormat.IS_INDEXED) != 0;\n          boolean storeTermVector = (bits & Lucene50FieldInfosFormat.STORE_TERMVECTOR) != 0;\n          boolean omitNorms = (bits & Lucene50FieldInfosFormat.OMIT_NORMS) != 0;\n          boolean storePayloads = (bits & Lucene50FieldInfosFormat.STORE_PAYLOADS) != 0;\n          final IndexOptions indexOptions;\n          if (!isIndexed) {\n            indexOptions = null;\n          } else if ((bits & Lucene50FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n            indexOptions = IndexOptions.DOCS_ONLY;\n          } else if ((bits & Lucene50FieldInfosFormat.OMIT_POSITIONS) != 0) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else if ((bits & Lucene50FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n          } else {\n            indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n          }\n          \n          // DV Types are packed in one byte\n          byte val = input.readByte();\n          final DocValuesType docValuesType = getDocValuesType(input, (byte) (val & 0x0F));\n          final DocValuesType normsType = getDocValuesType(input, (byte) ((val >>> 4) & 0x0F));\n          final long dvGen = input.readLong();\n          final Map<String,String> attributes = input.readStringStringMap();\n          try {\n            infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, omitNorms, storePayloads, \n                                     indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(attributes));\n            infos[i].checkConsistency();\n          } catch (IllegalStateException e) {\n            throw new CorruptIndexException(\"invalid fieldinfo for field: \" + name + \", fieldNumber=\" + fieldNumber, input, e);\n          }\n        }\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return new FieldInfos(infos);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosReader#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene50FieldInfosFormat.EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      FieldInfo infos[] = null;\n      try {\n        CodecUtil.checkSegmentHeader(input, Lucene50FieldInfosFormat.CODEC_NAME, \n                                     Lucene50FieldInfosFormat.FORMAT_START, \n                                     Lucene50FieldInfosFormat.FORMAT_CURRENT,\n                                     segmentInfo.getId());\n        \n        final int size = input.readVInt(); //read in the size\n        infos = new FieldInfo[size];\n        \n        for (int i = 0; i < size; i++) {\n          String name = input.readString();\n          final int fieldNumber = input.readVInt();\n          if (fieldNumber < 0) {\n            throw new CorruptIndexException(\"invalid field number for field: \" + name + \", fieldNumber=\" + fieldNumber, input);\n          }\n          byte bits = input.readByte();\n          boolean isIndexed = (bits & Lucene50FieldInfosFormat.IS_INDEXED) != 0;\n          boolean storeTermVector = (bits & Lucene50FieldInfosFormat.STORE_TERMVECTOR) != 0;\n          boolean omitNorms = (bits & Lucene50FieldInfosFormat.OMIT_NORMS) != 0;\n          boolean storePayloads = (bits & Lucene50FieldInfosFormat.STORE_PAYLOADS) != 0;\n          final IndexOptions indexOptions;\n          if (!isIndexed) {\n            indexOptions = null;\n          } else if ((bits & Lucene50FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n            indexOptions = IndexOptions.DOCS_ONLY;\n          } else if ((bits & Lucene50FieldInfosFormat.OMIT_POSITIONS) != 0) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else if ((bits & Lucene50FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n          } else {\n            indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n          }\n          \n          // DV Types are packed in one byte\n          byte val = input.readByte();\n          final DocValuesType docValuesType = getDocValuesType(input, (byte) (val & 0x0F));\n          final DocValuesType normsType = getDocValuesType(input, (byte) ((val >>> 4) & 0x0F));\n          final long dvGen = input.readLong();\n          final Map<String,String> attributes = input.readStringStringMap();\n          try {\n            infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, omitNorms, storePayloads, \n                                     indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(attributes));\n            infos[i].checkConsistency();\n          } catch (IllegalStateException e) {\n            throw new CorruptIndexException(\"invalid fieldinfo for field: \" + name + \", fieldNumber=\" + fieldNumber, input, e);\n          }\n        }\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return new FieldInfos(infos);\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene50FieldInfosFormat.EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      FieldInfo infos[] = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50FieldInfosFormat.CODEC_NAME, \n                                     Lucene50FieldInfosFormat.FORMAT_START, \n                                     Lucene50FieldInfosFormat.FORMAT_CURRENT);\n        \n        final int size = input.readVInt(); //read in the size\n        infos = new FieldInfo[size];\n        \n        for (int i = 0; i < size; i++) {\n          String name = input.readString();\n          final int fieldNumber = input.readVInt();\n          if (fieldNumber < 0) {\n            throw new CorruptIndexException(\"invalid field number for field: \" + name + \", fieldNumber=\" + fieldNumber, input);\n          }\n          byte bits = input.readByte();\n          boolean isIndexed = (bits & Lucene50FieldInfosFormat.IS_INDEXED) != 0;\n          boolean storeTermVector = (bits & Lucene50FieldInfosFormat.STORE_TERMVECTOR) != 0;\n          boolean omitNorms = (bits & Lucene50FieldInfosFormat.OMIT_NORMS) != 0;\n          boolean storePayloads = (bits & Lucene50FieldInfosFormat.STORE_PAYLOADS) != 0;\n          final IndexOptions indexOptions;\n          if (!isIndexed) {\n            indexOptions = null;\n          } else if ((bits & Lucene50FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n            indexOptions = IndexOptions.DOCS_ONLY;\n          } else if ((bits & Lucene50FieldInfosFormat.OMIT_POSITIONS) != 0) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else if ((bits & Lucene50FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n          } else {\n            indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n          }\n          \n          // DV Types are packed in one byte\n          byte val = input.readByte();\n          final DocValuesType docValuesType = getDocValuesType(input, (byte) (val & 0x0F));\n          final DocValuesType normsType = getDocValuesType(input, (byte) ((val >>> 4) & 0x0F));\n          final long dvGen = input.readLong();\n          final Map<String,String> attributes = input.readStringStringMap();\n          try {\n            infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, omitNorms, storePayloads, \n                                     indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(attributes));\n            infos[i].checkConsistency();\n          } catch (IllegalStateException e) {\n            throw new CorruptIndexException(\"invalid fieldinfo for field: \" + name + \", fieldNumber=\" + fieldNumber, input, e);\n          }\n        }\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return new FieldInfos(infos);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["500867f0f15393f6b2c38c3366e414fccba04ed6","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["500867f0f15393f6b2c38c3366e414fccba04ed6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["5f6bd27530a2846413fe2d00030493c0e2d3a072","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}