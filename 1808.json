{"path":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","commits":[{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n   if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    return new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes.getAndAdd(-existing.sizeInBytes);\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71122e5efb3fd9ad29e81a7682dc45a8852bd53c","date":1282667345,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n   if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    files.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    return io;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n   if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    return new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n  }\n\n","bugFix":null,"bugIntro":["2a186ae8733084223c22044e935e4ef848a143d1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a186ae8733084223c22044e935e4ef848a143d1","date":1289694819,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n   if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    files.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    return io;\n  }\n\n","bugFix":["71122e5efb3fd9ad29e81a7682dc45a8852bd53c","a05409176bd65129d67a785ee70e881e238a9aef"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c498d3f8d75170b121f5eda2c6210ac5beb5d411","date":1289726298,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n   if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    files.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    return io;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2a186ae8733084223c22044e935e4ef848a143d1":["71122e5efb3fd9ad29e81a7682dc45a8852bd53c"],"53a31399f2471493d67b19a95c028a74e0113b6a":["2a186ae8733084223c22044e935e4ef848a143d1"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","53a31399f2471493d67b19a95c028a74e0113b6a"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["71122e5efb3fd9ad29e81a7682dc45a8852bd53c","2a186ae8733084223c22044e935e4ef848a143d1"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53a31399f2471493d67b19a95c028a74e0113b6a"],"71122e5efb3fd9ad29e81a7682dc45a8852bd53c":["a05409176bd65129d67a785ee70e881e238a9aef"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["53a31399f2471493d67b19a95c028a74e0113b6a"]},"commit2Childs":{"2a186ae8733084223c22044e935e4ef848a143d1":["53a31399f2471493d67b19a95c028a74e0113b6a","c498d3f8d75170b121f5eda2c6210ac5beb5d411"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a05409176bd65129d67a785ee70e881e238a9aef","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a05409176bd65129d67a785ee70e881e238a9aef":["71122e5efb3fd9ad29e81a7682dc45a8852bd53c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"71122e5efb3fd9ad29e81a7682dc45a8852bd53c":["2a186ae8733084223c22044e935e4ef848a143d1","c498d3f8d75170b121f5eda2c6210ac5beb5d411"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}