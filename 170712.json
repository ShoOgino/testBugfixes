{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRefuseToCacheTooLargeEntries().mjava","commits":[{"id":"f24c20ef0735cfb643ce2b0309b9e94aaf75f16a","date":1430251781,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRefuseToCacheTooLargeEntries().mjava","pathOld":"/dev/null","sourceNew":"  public void testRefuseToCacheTooLargeEntries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 100; ++i) {\n      w.addDocument(new Document());\n    }\n    IndexReader reader = w.getReader();\n\n    // size of 1 byte\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 1);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.count(new MatchAllDocsQuery());\n    assertEquals(0, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aac61ee5b4492f174e60bd54939aba9539906edf","date":1461245473,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRefuseToCacheTooLargeEntries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRefuseToCacheTooLargeEntries().mjava","sourceNew":"  public void testRefuseToCacheTooLargeEntries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 100; ++i) {\n      w.addDocument(new Document());\n    }\n    IndexReader reader = w.getReader();\n\n    // size of 1 byte\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 1, context -> random().nextBoolean());\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.count(new MatchAllDocsQuery());\n    assertEquals(0, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRefuseToCacheTooLargeEntries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 100; ++i) {\n      w.addDocument(new Document());\n    }\n    IndexReader reader = w.getReader();\n\n    // size of 1 byte\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 1);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.count(new MatchAllDocsQuery());\n    assertEquals(0, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRefuseToCacheTooLargeEntries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRefuseToCacheTooLargeEntries().mjava","sourceNew":"  public void testRefuseToCacheTooLargeEntries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 100; ++i) {\n      w.addDocument(new Document());\n    }\n    IndexReader reader = w.getReader();\n\n    // size of 1 byte\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 1, context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.count(new MatchAllDocsQuery());\n    assertEquals(0, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRefuseToCacheTooLargeEntries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 100; ++i) {\n      w.addDocument(new Document());\n    }\n    IndexReader reader = w.getReader();\n\n    // size of 1 byte\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 1, context -> random().nextBoolean());\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.count(new MatchAllDocsQuery());\n    assertEquals(0, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRefuseToCacheTooLargeEntries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRefuseToCacheTooLargeEntries().mjava","sourceNew":"  public void testRefuseToCacheTooLargeEntries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 100; ++i) {\n      w.addDocument(new Document());\n    }\n    IndexReader reader = w.getReader();\n\n    // size of 1 byte\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 1, context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.count(new MatchAllDocsQuery());\n    assertEquals(0, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRefuseToCacheTooLargeEntries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 100; ++i) {\n      w.addDocument(new Document());\n    }\n    IndexReader reader = w.getReader();\n\n    // size of 1 byte\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 1, context -> random().nextBoolean());\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.count(new MatchAllDocsQuery());\n    assertEquals(0, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"789fb338d3c53b4478938723d60f6623e764ca38","date":1521535944,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRefuseToCacheTooLargeEntries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRefuseToCacheTooLargeEntries().mjava","sourceNew":"  public void testRefuseToCacheTooLargeEntries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 100; ++i) {\n      w.addDocument(new Document());\n    }\n    IndexReader reader = w.getReader();\n\n    // size of 1 byte\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 1, context -> random().nextBoolean());\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.count(new MatchAllDocsQuery());\n    assertEquals(0, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRefuseToCacheTooLargeEntries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 100; ++i) {\n      w.addDocument(new Document());\n    }\n    IndexReader reader = w.getReader();\n\n    // size of 1 byte\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 1, context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.count(new MatchAllDocsQuery());\n    assertEquals(0, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRefuseToCacheTooLargeEntries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRefuseToCacheTooLargeEntries().mjava","sourceNew":"  public void testRefuseToCacheTooLargeEntries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 100; ++i) {\n      w.addDocument(new Document());\n    }\n    IndexReader reader = w.getReader();\n\n    // size of 1 byte\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 1, context -> random().nextBoolean());\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.count(new MatchAllDocsQuery());\n    assertEquals(0, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRefuseToCacheTooLargeEntries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 100; ++i) {\n      w.addDocument(new Document());\n    }\n    IndexReader reader = w.getReader();\n\n    // size of 1 byte\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 1, context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.count(new MatchAllDocsQuery());\n    assertEquals(0, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c9d00c591703058371b3dc36f4957a6f24ca302","date":1527233410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRefuseToCacheTooLargeEntries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRefuseToCacheTooLargeEntries().mjava","sourceNew":"  public void testRefuseToCacheTooLargeEntries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 100; ++i) {\n      w.addDocument(new Document());\n    }\n    IndexReader reader = w.getReader();\n\n    // size of 1 byte\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 1, context -> random().nextBoolean());\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    searcher.count(new MatchAllDocsQuery());\n    assertEquals(0, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRefuseToCacheTooLargeEntries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 100; ++i) {\n      w.addDocument(new Document());\n    }\n    IndexReader reader = w.getReader();\n\n    // size of 1 byte\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 1, context -> random().nextBoolean());\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    searcher.count(new MatchAllDocsQuery());\n    assertEquals(0, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5754bd6f04f13b67e9575f8b226a0303c31c7d5","date":1573506453,"type":3,"author":"ginger","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRefuseToCacheTooLargeEntries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRefuseToCacheTooLargeEntries().mjava","sourceNew":"  public void testRefuseToCacheTooLargeEntries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 100; ++i) {\n      w.addDocument(new Document());\n    }\n    IndexReader reader = w.getReader();\n\n    // size of 1 byte\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 1, context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    searcher.count(new MatchAllDocsQuery());\n    assertEquals(0, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRefuseToCacheTooLargeEntries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 100; ++i) {\n      w.addDocument(new Document());\n    }\n    IndexReader reader = w.getReader();\n\n    // size of 1 byte\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 1, context -> random().nextBoolean());\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    searcher.count(new MatchAllDocsQuery());\n    assertEquals(0, queryCache.getCacheCount());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["aac61ee5b4492f174e60bd54939aba9539906edf"],"f24c20ef0735cfb643ce2b0309b9e94aaf75f16a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["aac61ee5b4492f174e60bd54939aba9539906edf","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["1aad05eeff7818b0833c02ac6b743aa72054963b","789fb338d3c53b4478938723d60f6623e764ca38"],"aac61ee5b4492f174e60bd54939aba9539906edf":["f24c20ef0735cfb643ce2b0309b9e94aaf75f16a"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"789fb338d3c53b4478938723d60f6623e764ca38":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"]},"commit2Childs":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"f24c20ef0735cfb643ce2b0309b9e94aaf75f16a":["aac61ee5b4492f174e60bd54939aba9539906edf"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","789fb338d3c53b4478938723d60f6623e764ca38"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"aac61ee5b4492f174e60bd54939aba9539906edf":["c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f24c20ef0735cfb643ce2b0309b9e94aaf75f16a"],"789fb338d3c53b4478938723d60f6623e764ca38":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}