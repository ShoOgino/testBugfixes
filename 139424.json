{"path":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer innerScorer = innerWeight.scorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          final float score = score();\n          return new FilterScorer(innerScorer) {\n            @Override\n            public float score() throws IOException {\n              return score;\n            }\n            @Override\n            public int freq() throws IOException {\n              return 1;\n            }\n            @Override\n            public Collection<ChildScorer> getChildren() {\n              return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n            }\n          };\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false);\n    if (needsScores) {\n      return new ConstantScoreWeight(this) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer innerScorer = innerWeight.scorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          final float score = score();\n          return new FilterScorer(innerScorer) {\n            @Override\n            public float score() throws IOException {\n              return score;\n            }\n            @Override\n            public int freq() throws IOException {\n              return 1;\n            }\n            @Override\n            public Collection<ChildScorer> getChildren() {\n              return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n            }\n          };\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer innerScorer = innerWeight.scorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          final float score = score();\n          return new FilterScorer(innerScorer) {\n            @Override\n            public float score() throws IOException {\n              return score;\n            }\n            @Override\n            public int freq() throws IOException {\n              return 1;\n            }\n            @Override\n            public Collection<ChildScorer> getChildren() {\n              return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n            }\n          };\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(randomAccess);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public int freq() throws IOException {\n                  return 1;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(false);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer innerScorer = innerWeight.scorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          final float score = score();\n          return new FilterScorer(innerScorer) {\n            @Override\n            public float score() throws IOException {\n              return score;\n            }\n            @Override\n            public int freq() throws IOException {\n              return 1;\n            }\n            @Override\n            public Collection<ChildScorer> getChildren() {\n              return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n            }\n          };\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(randomAccess);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public int freq() throws IOException {\n                  return 1;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(false);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer innerScorer = innerWeight.scorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          final float score = score();\n          return new FilterScorer(innerScorer) {\n            @Override\n            public float score() throws IOException {\n              return score;\n            }\n            @Override\n            public int freq() throws IOException {\n              return 1;\n            }\n            @Override\n            public Collection<ChildScorer> getChildren() {\n              return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n            }\n          };\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f3e9c0fc20b3107388ec853a6fbad9f891b461","date":1502359844,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public int freq() throws IOException {\n                  return 1;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(randomAccess);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public int freq() throws IOException {\n                  return 1;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(false);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6ba405c7c8192661bdf7ce782181d12f3162a6","date":1502361392,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public int freq() throws IOException {\n                  return 1;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(randomAccess);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public int freq() throws IOException {\n                  return 1;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(false);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public int freq() throws IOException {\n                  return 1;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(randomAccess);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public int freq() throws IOException {\n                  return 1;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(false);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public int freq() throws IOException {\n                  return 1;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(boolean randomAccess) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(randomAccess);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public int freq() throws IOException {\n                  return 1;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(false);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public int freq() throws IOException {\n                  return 1;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return innerWeight.getCacheHelper(context);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public int freq() throws IOException {\n                  return 1;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public int freq() throws IOException {\n                  return 1;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return innerWeight.getCacheHelper(context);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public int freq() throws IOException {\n                  return 1;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public int freq() throws IOException {\n                  return 1;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public int freq() throws IOException {\n                  return 1;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return innerWeight.getCacheHelper(context);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public int freq() throws IOException {\n                  return 1;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    if (scoreMode.needsScores()) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public float maxScore() {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    if (scoreMode.needsScores()) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public float maxScore() {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight innerWeight = searcher.createWeight(query, false, 1f);\n    if (needsScores) {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n          final BulkScorer innerScorer = innerWeight.bulkScorer(context);\n          if (innerScorer == null) {\n            return null;\n          }\n          return new ConstantBulkScorer(innerScorer, this, score());\n        }\n\n        @Override\n        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n          ScorerSupplier innerScorerSupplier = innerWeight.scorerSupplier(context);\n          if (innerScorerSupplier == null) {\n            return null;\n          }\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              final Scorer innerScorer = innerScorerSupplier.get(leadCost);\n              final float score = score();\n              return new FilterScorer(innerScorer) {\n                @Override\n                public float score() throws IOException {\n                  return score;\n                }\n                @Override\n                public Collection<ChildScorer> getChildren() {\n                  return Collections.singleton(new ChildScorer(innerScorer, \"constant\"));\n                }\n              };\n            }\n\n            @Override\n            public long cost() {\n              return innerScorerSupplier.cost();\n            }\n          };\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          ScorerSupplier scorerSupplier = scorerSupplier(context);\n          if (scorerSupplier == null) {\n            return null;\n          }\n          return scorerSupplier.get(Long.MAX_VALUE);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return innerWeight.isCacheable(ctx);\n        }\n\n      };\n    } else {\n      return innerWeight;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","706a7a3396c030cc66dda92a0492eb492131c4c0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"417142ff08fda9cf0b72d5133e63097a166c6458":["dc14da055888b63b4f8c922d0e1579f3cb315ad7","9fc47cb7b4346802411bb432f501ed0673d7119e"],"302d34f2c66e8d489ee13078305c330cbf67b226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","dca67e06c96e95a8d9ef07418b6299bfd981523b"],"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["dca67e06c96e95a8d9ef07418b6299bfd981523b","24f3e9c0fc20b3107388ec853a6fbad9f891b461"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["dca67e06c96e95a8d9ef07418b6299bfd981523b","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["dca67e06c96e95a8d9ef07418b6299bfd981523b","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["302d34f2c66e8d489ee13078305c330cbf67b226"],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"302d34f2c66e8d489ee13078305c330cbf67b226":[],"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["24f3e9c0fc20b3107388ec853a6fbad9f891b461","302d34f2c66e8d489ee13078305c330cbf67b226","7d6ba405c7c8192661bdf7ce782181d12f3162a6","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","dca67e06c96e95a8d9ef07418b6299bfd981523b"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["302d34f2c66e8d489ee13078305c330cbf67b226","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}