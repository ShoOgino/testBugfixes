{"path":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    SolrIndexSearcher srchr = h.getCore().getSearcher().get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":null,"sourceOld":"  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    SolrIndexSearcher srchr = h.getCore().getSearcher().get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    SolrIndexSearcher srchr = h.getCore().getSearcher().get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n\n  }\n\n","sourceOld":"  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    SolrIndexSearcher srchr = h.getCore().getSearcher().get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    SolrIndexSearcher srchr = h.getCore().getSearcher().get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    SolrIndexSearcher srchr = h.getCore().getSearcher().get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n\n  }\n\n","sourceOld":"  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    SolrIndexSearcher srchr = h.getCore().getSearcher().get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95b97fbacb8853d833be31f2907edd32e1d2df99","date":1287343076,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    SolrIndexSearcher srchr = h.getCore().getSearcher().get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    srchr.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    SolrIndexSearcher srchr = h.getCore().getSearcher().get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"057119d0666f2a2674ad4bba71baca71cb200801","date":1287510147,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    SolrIndexSearcher srchr = h.getCore().getSearcher().get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    srchr.close();\n  }\n\n","bugFix":null,"bugIntro":["cfa31dc111e7187af45764aea5c8f9ab89275e8a","cfa31dc111e7187af45764aea5c8f9ab89275e8a","cfa31dc111e7187af45764aea5c8f9ab89275e8a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"528227c934991a1449fd96c61cd28e91200b0f72","date":1287519746,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.close();\n  }\n\n","bugFix":null,"bugIntro":["cfa31dc111e7187af45764aea5c8f9ab89275e8a","cfa31dc111e7187af45764aea5c8f9ab89275e8a","cfa31dc111e7187af45764aea5c8f9ab89275e8a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    SolrIndexSearcher srchr = h.getCore().getSearcher().get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    SolrIndexSearcher srchr = h.getCore().getSearcher().get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_t\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_t\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_t\", \"quick brown fox\"));\n    commit();\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    SolrIndexSearcher srchr = holder.get();\n    SolrIndexSearcher.QueryResult qr = new SolrIndexSearcher.QueryResult();\n    SolrIndexSearcher.QueryCommand cmd = new SolrIndexSearcher.QueryCommand();\n    cmd.setQuery(new MatchAllDocsQuery());\n    qr = srchr.search(qr, cmd);\n\n    DocList docs = qr.getDocList();\n    Set<String> fields = new HashSet<String>();\n    fields.add(\"val_t\");\n\n\n    SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n    assertTrue(\"list Size: \" + list.size() + \" is not: \" + docs.size(), list.size() == docs.size());\n    for (SolrDocument document : list) {\n      assertNotNull(document.get(\"val_t\"));\n    }\n    holder.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["528227c934991a1449fd96c61cd28e91200b0f72","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["afeb033b2bd36d8ce9d82142b197da4dde13068b","528227c934991a1449fd96c61cd28e91200b0f72"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"528227c934991a1449fd96c61cd28e91200b0f72":["057119d0666f2a2674ad4bba71baca71cb200801"],"95b97fbacb8853d833be31f2907edd32e1d2df99":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["528227c934991a1449fd96c61cd28e91200b0f72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["1da8d55113b689b06716246649de6f62430f15c0"],"057119d0666f2a2674ad4bba71baca71cb200801":["95b97fbacb8853d833be31f2907edd32e1d2df99"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["528227c934991a1449fd96c61cd28e91200b0f72"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["afeb033b2bd36d8ce9d82142b197da4dde13068b","528227c934991a1449fd96c61cd28e91200b0f72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"528227c934991a1449fd96c61cd28e91200b0f72":["c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"95b97fbacb8853d833be31f2907edd32e1d2df99":["057119d0666f2a2674ad4bba71baca71cb200801"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","95b97fbacb8853d833be31f2907edd32e1d2df99","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"057119d0666f2a2674ad4bba71baca71cb200801":["528227c934991a1449fd96c61cd28e91200b0f72"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}