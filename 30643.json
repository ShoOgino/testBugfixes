{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","sourceNew":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      int termStartOffset = offsetAtt.startOffset();\n      int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = offsetAtt.startOffset();\n            matchEndOffset = offsetAtt.endOffset();\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n      Token token = new Token(termStartOffset, termEndOffset);\n      token.setTermBuffer(termAtt.term());\n      tokens[numTokens] = token;\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","sourceOld":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      int termStartOffset = offsetAtt.startOffset();\n      int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = offsetAtt.startOffset();\n            matchEndOffset = offsetAtt.endOffset();\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n      Token token = new Token(termStartOffset, termEndOffset);\n      token.setTermBuffer(termAtt.term());\n      tokens[numTokens] = token;\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","sourceNew":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      int termStartOffset = offsetAtt.startOffset();\n      int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = offsetAtt.startOffset();\n            matchEndOffset = offsetAtt.endOffset();\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n      Token token = new Token(termStartOffset, termEndOffset);\n      token.setEmpty().append(termAtt);\n      tokens[numTokens] = token;\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","sourceOld":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      int termStartOffset = offsetAtt.startOffset();\n      int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = offsetAtt.startOffset();\n            matchEndOffset = offsetAtt.endOffset();\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n      Token token = new Token(termStartOffset, termEndOffset);\n      token.setTermBuffer(termAtt.term());\n      tokens[numTokens] = token;\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup#addToken(float).mjava","sourceNew":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      int termStartOffset = offsetAtt.startOffset();\n      int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = offsetAtt.startOffset();\n            matchEndOffset = offsetAtt.endOffset();\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n      Token token = new Token(termStartOffset, termEndOffset);\n      token.setEmpty().append(termAtt);\n      tokens[numTokens] = token;\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","sourceOld":"  void addToken(float score) {\n    if (numTokens < MAX_NUM_TOKENS_PER_GROUP) {\n      int termStartOffset = offsetAtt.startOffset();\n      int termEndOffset = offsetAtt.endOffset();\n      if (numTokens == 0) {\n        startOffset = matchStartOffset = termStartOffset;\n        endOffset = matchEndOffset = termEndOffset;\n        tot += score;\n      } else {\n        startOffset = Math.min(startOffset, termStartOffset);\n        endOffset = Math.max(endOffset, termEndOffset);\n        if (score > 0) {\n          if (tot == 0) {\n            matchStartOffset = offsetAtt.startOffset();\n            matchEndOffset = offsetAtt.endOffset();\n          } else {\n            matchStartOffset = Math.min(matchStartOffset, termStartOffset);\n            matchEndOffset = Math.max(matchEndOffset, termEndOffset);\n          }\n          tot += score;\n        }\n      }\n      Token token = new Token(termStartOffset, termEndOffset);\n      token.setEmpty().append(termAtt);\n      tokens[numTokens] = token;\n      scores[numTokens] = score;\n      numTokens++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}