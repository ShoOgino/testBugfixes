{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#pushLeft().mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#pushLeft().mjava","pathOld":"/dev/null","sourceNew":"    public void pushLeft() {\n      nodeID *= 2;\n      level++;\n      if (splitPackedValueStack[level] == null) {\n        splitPackedValueStack[level] = new byte[packedBytesLength];\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#pushLeft().mjava","pathOld":"/dev/null","sourceNew":"    public void pushLeft() {\n      nodeID *= 2;\n      level++;\n      if (splitPackedValueStack[level] == null) {\n        splitPackedValueStack[level] = new byte[packedBytesLength];\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0e7448656541edc407546460641f47950451b16","date":1519150500,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#pushLeft().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#pushLeft().mjava","sourceNew":"    public void pushLeft() {\n      int nodePosition = leftNodePositions[level];\n      nodeID *= 2;\n      level++;\n      if (splitPackedValueStack[level] == null) {\n        splitPackedValueStack[level] = new byte[packedBytesLength];\n      }\n      System.arraycopy(negativeDeltas, (level-1)*numDims, negativeDeltas, level*numDims, numDims);\n      assert splitDim != -1;\n      negativeDeltas[level*numDims+splitDim] = true;\n      in.setPosition(nodePosition);\n      readNodeData(true);\n    }\n\n","sourceOld":"    public void pushLeft() {\n      nodeID *= 2;\n      level++;\n      if (splitPackedValueStack[level] == null) {\n        splitPackedValueStack[level] = new byte[packedBytesLength];\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#pushLeft().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#pushLeft().mjava","sourceNew":"    public void pushLeft() {\n      int nodePosition = leftNodePositions[level];\n      nodeID *= 2;\n      level++;\n      if (splitPackedValueStack[level] == null) {\n        splitPackedValueStack[level] = new byte[packedIndexBytesLength];\n      }\n      System.arraycopy(negativeDeltas, (level-1)*numIndexDims, negativeDeltas, level*numIndexDims, numIndexDims);\n      assert splitDim != -1;\n      negativeDeltas[level*numIndexDims+splitDim] = true;\n      in.setPosition(nodePosition);\n      readNodeData(true);\n    }\n\n","sourceOld":"    public void pushLeft() {\n      int nodePosition = leftNodePositions[level];\n      nodeID *= 2;\n      level++;\n      if (splitPackedValueStack[level] == null) {\n        splitPackedValueStack[level] = new byte[packedBytesLength];\n      }\n      System.arraycopy(negativeDeltas, (level-1)*numDims, negativeDeltas, level*numDims, numDims);\n      assert splitDim != -1;\n      negativeDeltas[level*numDims+splitDim] = true;\n      in.setPosition(nodePosition);\n      readNodeData(true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbc55bb1f9b4422860b0f903e6af8082280e7b72","date":1571986943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#pushLeft().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#pushLeft().mjava","sourceNew":"    public void pushLeft() {\n      int nodePosition = leftNodePositions[level];\n      nodeID *= 2;\n      level++;\n      if (splitPackedValueStack[level] == null) {\n        splitPackedValueStack[level] = new byte[packedIndexBytesLength];\n      }\n      System.arraycopy(negativeDeltas, (level-1)*numIndexDims, negativeDeltas, level*numIndexDims, numIndexDims);\n      assert splitDim != -1;\n      negativeDeltas[level*numIndexDims+splitDim] = true;\n      try {\n        in.setPosition(nodePosition);\n      } catch (IOException e) {\n        throw new UncheckedIOException(e);\n      }\n      readNodeData(true);\n    }\n\n","sourceOld":"    public void pushLeft() {\n      int nodePosition = leftNodePositions[level];\n      nodeID *= 2;\n      level++;\n      if (splitPackedValueStack[level] == null) {\n        splitPackedValueStack[level] = new byte[packedIndexBytesLength];\n      }\n      System.arraycopy(negativeDeltas, (level-1)*numIndexDims, negativeDeltas, level*numIndexDims, numIndexDims);\n      assert splitDim != -1;\n      negativeDeltas[level*numIndexDims+splitDim] = true;\n      in.setPosition(nodePosition);\n      readNodeData(true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6b1fd50f847900ca47783ea832846d60e81f990","date":1591769592,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#pushLeft().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#pushLeft().mjava","sourceNew":"    public void pushLeft() {\n      nodeID *= 2;\n      level++;\n      readNodeData(true);\n    }\n\n","sourceOld":"    public void pushLeft() {\n      int nodePosition = leftNodePositions[level];\n      nodeID *= 2;\n      level++;\n      if (splitPackedValueStack[level] == null) {\n        splitPackedValueStack[level] = new byte[packedIndexBytesLength];\n      }\n      System.arraycopy(negativeDeltas, (level-1)*numIndexDims, negativeDeltas, level*numIndexDims, numIndexDims);\n      assert splitDim != -1;\n      negativeDeltas[level*numIndexDims+splitDim] = true;\n      try {\n        in.setPosition(nodePosition);\n      } catch (IOException e) {\n        throw new UncheckedIOException(e);\n      }\n      readNodeData(true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0e7448656541edc407546460641f47950451b16":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbc55bb1f9b4422860b0f903e6af8082280e7b72":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["c0e7448656541edc407546460641f47950451b16"],"d6b1fd50f847900ca47783ea832846d60e81f990":["cbc55bb1f9b4422860b0f903e6af8082280e7b72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d6b1fd50f847900ca47783ea832846d60e81f990"]},"commit2Childs":{"c0e7448656541edc407546460641f47950451b16":["f6652c943595e92c187ee904c382863013eae28f"],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["c0e7448656541edc407546460641f47950451b16","9856095f7afb5a607bf5e65077615ed91273508c"],"cbc55bb1f9b4422860b0f903e6af8082280e7b72":["d6b1fd50f847900ca47783ea832846d60e81f990"],"f6652c943595e92c187ee904c382863013eae28f":["cbc55bb1f9b4422860b0f903e6af8082280e7b72"],"d6b1fd50f847900ca47783ea832846d60e81f990":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}