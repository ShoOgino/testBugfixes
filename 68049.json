{"path":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SimpleQParser#SimpleQParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","commits":[{"id":"ee9efffeff762194ca606ff91a43e2f6f56a430f","date":1390409407,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SimpleQParser#SimpleQParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"    public SimpleQParser (String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n      super(qstr, localParams, params, req);\n      // Some of the parameters may come in through localParams, so combine them with params.\n      SolrParams defaultParams = SolrParams.wrapDefaults(localParams, params);\n\n      // This will be used to specify what fields and boosts will be used by SimpleQueryParser.\n      Map<String, Float> queryFields = SolrPluginUtils.parseFieldBoosts(defaultParams.get(SimpleParams.QF));\n\n      if (queryFields.isEmpty()) {\n        // It qf is not specified setup up the queryFields map to use the defaultField.\n        String defaultField = QueryParsing.getDefaultField(req.getSchema(), defaultParams.get(CommonParams.DF));\n\n        if (defaultField == null) {\n          // A query cannot be run without having a field or set of fields to run against.\n          throw new IllegalStateException(\"Neither \" + SimpleParams.QF + \", \" + CommonParams.DF\n              + \", nor the default search field are present.\");\n        }\n\n        queryFields.put(defaultField, 1.0F);\n      }\n      else {\n        for (Map.Entry<String, Float> queryField : queryFields.entrySet()) {\n          if (queryField.getValue() == null) {\n            // Some fields may be specified without a boost, so default the boost to 1.0 since a null value\n            // will not be accepted by SimpleQueryParser.\n            queryField.setValue(1.0F);\n          }\n        }\n      }\n\n      // Setup the operations that are enabled for the query.\n      int enabledOps = 0;\n      String opParam = defaultParams.get(SimpleParams.QO);\n\n      if (opParam == null) {\n        // All operations will be enabled.\n        enabledOps = -1;\n      } else {\n        // Parse the specified enabled operations to be used by the query.\n        String[] operations = opParam.split(\",\");\n\n        for (String operation : operations) {\n          Integer enabledOp = OPERATORS.get(operation.trim().toUpperCase(Locale.ROOT));\n\n          if (enabledOp != null) {\n            enabledOps |= enabledOp;\n          }\n        }\n      }\n\n      // Create a SimpleQueryParser using the analyzer from the schema.\n      final IndexSchema schema = req.getSchema();\n      parser = new SolrSimpleQueryParser(req.getSchema().getAnalyzer(), queryFields, enabledOps, this, schema);\n\n      // Set the default operator to be either 'AND' or 'OR' for the query.\n      QueryParser.Operator defaultOp = QueryParsing.getQueryParserDefaultOperator(req.getSchema(), defaultParams.get(QueryParsing.OP));\n\n      if (defaultOp == QueryParser.Operator.AND) {\n        parser.setDefaultOperator(BooleanClause.Occur.MUST);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1947f918feb323bd75a3bef71ab8651657a4ab76"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1947f918feb323bd75a3bef71ab8651657a4ab76","date":1398464304,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SimpleQParser#SimpleQParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SimpleQParser#SimpleQParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public SimpleQParser (String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n      super(qstr, localParams, params, req);\n      // Some of the parameters may come in through localParams, so combine them with params.\n      SolrParams defaultParams = SolrParams.wrapDefaults(localParams, params);\n\n      // This will be used to specify what fields and boosts will be used by SimpleQueryParser.\n      Map<String, Float> queryFields = SolrPluginUtils.parseFieldBoosts(defaultParams.get(SimpleParams.QF));\n\n      if (queryFields.isEmpty()) {\n        // It qf is not specified setup up the queryFields map to use the defaultField.\n        String defaultField = QueryParsing.getDefaultField(req.getSchema(), defaultParams.get(CommonParams.DF));\n\n        if (defaultField == null) {\n          // A query cannot be run without having a field or set of fields to run against.\n          throw new IllegalStateException(\"Neither \" + SimpleParams.QF + \", \" + CommonParams.DF\n              + \", nor the default search field are present.\");\n        }\n\n        queryFields.put(defaultField, 1.0F);\n      }\n      else {\n        for (Map.Entry<String, Float> queryField : queryFields.entrySet()) {\n          if (queryField.getValue() == null) {\n            // Some fields may be specified without a boost, so default the boost to 1.0 since a null value\n            // will not be accepted by SimpleQueryParser.\n            queryField.setValue(1.0F);\n          }\n        }\n      }\n\n      // Setup the operations that are enabled for the query.\n      int enabledOps = 0;\n      String opParam = defaultParams.get(SimpleParams.QO);\n\n      if (opParam == null) {\n        // All operations will be enabled.\n        enabledOps = -1;\n      } else {\n        // Parse the specified enabled operations to be used by the query.\n        String[] operations = opParam.split(\",\");\n\n        for (String operation : operations) {\n          Integer enabledOp = OPERATORS.get(operation.trim().toUpperCase(Locale.ROOT));\n\n          if (enabledOp != null) {\n            enabledOps |= enabledOp;\n          }\n        }\n      }\n\n      // Create a SimpleQueryParser using the analyzer from the schema.\n      final IndexSchema schema = req.getSchema();\n      parser = new SolrSimpleQueryParser(req.getSchema().getQueryAnalyzer(), queryFields, enabledOps, this, schema);\n\n      // Set the default operator to be either 'AND' or 'OR' for the query.\n      QueryParser.Operator defaultOp = QueryParsing.getQueryParserDefaultOperator(req.getSchema(), defaultParams.get(QueryParsing.OP));\n\n      if (defaultOp == QueryParser.Operator.AND) {\n        parser.setDefaultOperator(BooleanClause.Occur.MUST);\n      }\n    }\n\n","sourceOld":"    public SimpleQParser (String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n      super(qstr, localParams, params, req);\n      // Some of the parameters may come in through localParams, so combine them with params.\n      SolrParams defaultParams = SolrParams.wrapDefaults(localParams, params);\n\n      // This will be used to specify what fields and boosts will be used by SimpleQueryParser.\n      Map<String, Float> queryFields = SolrPluginUtils.parseFieldBoosts(defaultParams.get(SimpleParams.QF));\n\n      if (queryFields.isEmpty()) {\n        // It qf is not specified setup up the queryFields map to use the defaultField.\n        String defaultField = QueryParsing.getDefaultField(req.getSchema(), defaultParams.get(CommonParams.DF));\n\n        if (defaultField == null) {\n          // A query cannot be run without having a field or set of fields to run against.\n          throw new IllegalStateException(\"Neither \" + SimpleParams.QF + \", \" + CommonParams.DF\n              + \", nor the default search field are present.\");\n        }\n\n        queryFields.put(defaultField, 1.0F);\n      }\n      else {\n        for (Map.Entry<String, Float> queryField : queryFields.entrySet()) {\n          if (queryField.getValue() == null) {\n            // Some fields may be specified without a boost, so default the boost to 1.0 since a null value\n            // will not be accepted by SimpleQueryParser.\n            queryField.setValue(1.0F);\n          }\n        }\n      }\n\n      // Setup the operations that are enabled for the query.\n      int enabledOps = 0;\n      String opParam = defaultParams.get(SimpleParams.QO);\n\n      if (opParam == null) {\n        // All operations will be enabled.\n        enabledOps = -1;\n      } else {\n        // Parse the specified enabled operations to be used by the query.\n        String[] operations = opParam.split(\",\");\n\n        for (String operation : operations) {\n          Integer enabledOp = OPERATORS.get(operation.trim().toUpperCase(Locale.ROOT));\n\n          if (enabledOp != null) {\n            enabledOps |= enabledOp;\n          }\n        }\n      }\n\n      // Create a SimpleQueryParser using the analyzer from the schema.\n      final IndexSchema schema = req.getSchema();\n      parser = new SolrSimpleQueryParser(req.getSchema().getAnalyzer(), queryFields, enabledOps, this, schema);\n\n      // Set the default operator to be either 'AND' or 'OR' for the query.\n      QueryParser.Operator defaultOp = QueryParsing.getQueryParserDefaultOperator(req.getSchema(), defaultParams.get(QueryParsing.OP));\n\n      if (defaultOp == QueryParser.Operator.AND) {\n        parser.setDefaultOperator(BooleanClause.Occur.MUST);\n      }\n    }\n\n","bugFix":["ee9efffeff762194ca606ff91a43e2f6f56a430f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SimpleQParser#SimpleQParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SimpleQParser#SimpleQParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public SimpleQParser (String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n      super(qstr, localParams, params, req);\n      // Some of the parameters may come in through localParams, so combine them with params.\n      SolrParams defaultParams = SolrParams.wrapDefaults(localParams, params);\n\n      // This will be used to specify what fields and boosts will be used by SimpleQueryParser.\n      Map<String, Float> queryFields = SolrPluginUtils.parseFieldBoosts(defaultParams.get(SimpleParams.QF));\n\n      if (queryFields.isEmpty()) {\n        // It qf is not specified setup up the queryFields map to use the defaultField.\n        String defaultField = QueryParsing.getDefaultField(req.getSchema(), defaultParams.get(CommonParams.DF));\n\n        if (defaultField == null) {\n          // A query cannot be run without having a field or set of fields to run against.\n          throw new IllegalStateException(\"Neither \" + SimpleParams.QF + \", \" + CommonParams.DF\n              + \", nor the default search field are present.\");\n        }\n\n        queryFields.put(defaultField, 1.0F);\n      }\n      else {\n        for (Map.Entry<String, Float> queryField : queryFields.entrySet()) {\n          if (queryField.getValue() == null) {\n            // Some fields may be specified without a boost, so default the boost to 1.0 since a null value\n            // will not be accepted by SimpleQueryParser.\n            queryField.setValue(1.0F);\n          }\n        }\n      }\n\n      // Setup the operations that are enabled for the query.\n      int enabledOps = 0;\n      String opParam = defaultParams.get(SimpleParams.QO);\n\n      if (opParam == null) {\n        // All operations will be enabled.\n        enabledOps = -1;\n      } else {\n        // Parse the specified enabled operations to be used by the query.\n        String[] operations = opParam.split(\",\");\n\n        for (String operation : operations) {\n          Integer enabledOp = OPERATORS.get(operation.trim().toUpperCase(Locale.ROOT));\n\n          if (enabledOp != null) {\n            enabledOps |= enabledOp;\n          }\n        }\n      }\n\n      // Create a SimpleQueryParser using the analyzer from the schema.\n      final IndexSchema schema = req.getSchema();\n      parser = new SolrSimpleQueryParser(req.getSchema().getQueryAnalyzer(), queryFields, enabledOps, this, schema);\n\n      // Set the default operator to be either 'AND' or 'OR' for the query.\n      QueryParser.Operator defaultOp = QueryParsing.getQueryParserDefaultOperator(req.getSchema(), defaultParams.get(QueryParsing.OP));\n\n      if (defaultOp == QueryParser.Operator.AND) {\n        parser.setDefaultOperator(BooleanClause.Occur.MUST);\n      }\n    }\n\n","sourceOld":"    public SimpleQParser (String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n      super(qstr, localParams, params, req);\n      // Some of the parameters may come in through localParams, so combine them with params.\n      SolrParams defaultParams = SolrParams.wrapDefaults(localParams, params);\n\n      // This will be used to specify what fields and boosts will be used by SimpleQueryParser.\n      Map<String, Float> queryFields = SolrPluginUtils.parseFieldBoosts(defaultParams.get(SimpleParams.QF));\n\n      if (queryFields.isEmpty()) {\n        // It qf is not specified setup up the queryFields map to use the defaultField.\n        String defaultField = QueryParsing.getDefaultField(req.getSchema(), defaultParams.get(CommonParams.DF));\n\n        if (defaultField == null) {\n          // A query cannot be run without having a field or set of fields to run against.\n          throw new IllegalStateException(\"Neither \" + SimpleParams.QF + \", \" + CommonParams.DF\n              + \", nor the default search field are present.\");\n        }\n\n        queryFields.put(defaultField, 1.0F);\n      }\n      else {\n        for (Map.Entry<String, Float> queryField : queryFields.entrySet()) {\n          if (queryField.getValue() == null) {\n            // Some fields may be specified without a boost, so default the boost to 1.0 since a null value\n            // will not be accepted by SimpleQueryParser.\n            queryField.setValue(1.0F);\n          }\n        }\n      }\n\n      // Setup the operations that are enabled for the query.\n      int enabledOps = 0;\n      String opParam = defaultParams.get(SimpleParams.QO);\n\n      if (opParam == null) {\n        // All operations will be enabled.\n        enabledOps = -1;\n      } else {\n        // Parse the specified enabled operations to be used by the query.\n        String[] operations = opParam.split(\",\");\n\n        for (String operation : operations) {\n          Integer enabledOp = OPERATORS.get(operation.trim().toUpperCase(Locale.ROOT));\n\n          if (enabledOp != null) {\n            enabledOps |= enabledOp;\n          }\n        }\n      }\n\n      // Create a SimpleQueryParser using the analyzer from the schema.\n      final IndexSchema schema = req.getSchema();\n      parser = new SolrSimpleQueryParser(req.getSchema().getAnalyzer(), queryFields, enabledOps, this, schema);\n\n      // Set the default operator to be either 'AND' or 'OR' for the query.\n      QueryParser.Operator defaultOp = QueryParsing.getQueryParserDefaultOperator(req.getSchema(), defaultParams.get(QueryParsing.OP));\n\n      if (defaultOp == QueryParser.Operator.AND) {\n        parser.setDefaultOperator(BooleanClause.Occur.MUST);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c418b5fb43bf7b591b636df532dd1ac44296469a","date":1494834249,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SimpleQParser#SimpleQParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SimpleQParser#SimpleQParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public SimpleQParser (String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n      super(qstr, localParams, params, req);\n      // Some of the parameters may come in through localParams, so combine them with params.\n      SolrParams defaultParams = SolrParams.wrapDefaults(localParams, params);\n\n      // This will be used to specify what fields and boosts will be used by SimpleQueryParser.\n      Map<String, Float> queryFields = SolrPluginUtils.parseFieldBoosts(defaultParams.get(SimpleParams.QF));\n\n      if (queryFields.isEmpty()) {\n        // It qf is not specified setup up the queryFields map to use the defaultField.\n        String defaultField = QueryParsing.getDefaultField(req.getSchema(), defaultParams.get(CommonParams.DF));\n\n        if (defaultField == null) {\n          // A query cannot be run without having a field or set of fields to run against.\n          throw new IllegalStateException(\"Neither \" + SimpleParams.QF + \", \" + CommonParams.DF\n              + \", nor the default search field are present.\");\n        }\n\n        queryFields.put(defaultField, 1.0F);\n      }\n      else {\n        for (Map.Entry<String, Float> queryField : queryFields.entrySet()) {\n          if (queryField.getValue() == null) {\n            // Some fields may be specified without a boost, so default the boost to 1.0 since a null value\n            // will not be accepted by SimpleQueryParser.\n            queryField.setValue(1.0F);\n          }\n        }\n      }\n\n      // Setup the operations that are enabled for the query.\n      int enabledOps = 0;\n      String opParam = defaultParams.get(SimpleParams.QO);\n\n      if (opParam == null) {\n        // All operations will be enabled.\n        enabledOps = -1;\n      } else {\n        // Parse the specified enabled operations to be used by the query.\n        String[] operations = opParam.split(\",\");\n\n        for (String operation : operations) {\n          Integer enabledOp = OPERATORS.get(operation.trim().toUpperCase(Locale.ROOT));\n\n          if (enabledOp != null) {\n            enabledOps |= enabledOp;\n          }\n        }\n      }\n\n      // Create a SimpleQueryParser using the analyzer from the schema.\n      final IndexSchema schema = req.getSchema();\n      parser = new SolrSimpleQueryParser(req.getSchema().getQueryAnalyzer(), queryFields, enabledOps, this, schema);\n\n      // Set the default operator to be either 'AND' or 'OR' for the query.\n      QueryParser.Operator defaultOp = QueryParsing.parseOP(defaultParams.get(QueryParsing.OP));\n\n      if (defaultOp == QueryParser.Operator.AND) {\n        parser.setDefaultOperator(BooleanClause.Occur.MUST);\n      }\n    }\n\n","sourceOld":"    public SimpleQParser (String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n      super(qstr, localParams, params, req);\n      // Some of the parameters may come in through localParams, so combine them with params.\n      SolrParams defaultParams = SolrParams.wrapDefaults(localParams, params);\n\n      // This will be used to specify what fields and boosts will be used by SimpleQueryParser.\n      Map<String, Float> queryFields = SolrPluginUtils.parseFieldBoosts(defaultParams.get(SimpleParams.QF));\n\n      if (queryFields.isEmpty()) {\n        // It qf is not specified setup up the queryFields map to use the defaultField.\n        String defaultField = QueryParsing.getDefaultField(req.getSchema(), defaultParams.get(CommonParams.DF));\n\n        if (defaultField == null) {\n          // A query cannot be run without having a field or set of fields to run against.\n          throw new IllegalStateException(\"Neither \" + SimpleParams.QF + \", \" + CommonParams.DF\n              + \", nor the default search field are present.\");\n        }\n\n        queryFields.put(defaultField, 1.0F);\n      }\n      else {\n        for (Map.Entry<String, Float> queryField : queryFields.entrySet()) {\n          if (queryField.getValue() == null) {\n            // Some fields may be specified without a boost, so default the boost to 1.0 since a null value\n            // will not be accepted by SimpleQueryParser.\n            queryField.setValue(1.0F);\n          }\n        }\n      }\n\n      // Setup the operations that are enabled for the query.\n      int enabledOps = 0;\n      String opParam = defaultParams.get(SimpleParams.QO);\n\n      if (opParam == null) {\n        // All operations will be enabled.\n        enabledOps = -1;\n      } else {\n        // Parse the specified enabled operations to be used by the query.\n        String[] operations = opParam.split(\",\");\n\n        for (String operation : operations) {\n          Integer enabledOp = OPERATORS.get(operation.trim().toUpperCase(Locale.ROOT));\n\n          if (enabledOp != null) {\n            enabledOps |= enabledOp;\n          }\n        }\n      }\n\n      // Create a SimpleQueryParser using the analyzer from the schema.\n      final IndexSchema schema = req.getSchema();\n      parser = new SolrSimpleQueryParser(req.getSchema().getQueryAnalyzer(), queryFields, enabledOps, this, schema);\n\n      // Set the default operator to be either 'AND' or 'OR' for the query.\n      QueryParser.Operator defaultOp = QueryParsing.getQueryParserDefaultOperator(req.getSchema(), defaultParams.get(QueryParsing.OP));\n\n      if (defaultOp == QueryParser.Operator.AND) {\n        parser.setDefaultOperator(BooleanClause.Occur.MUST);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","date":1495081498,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SimpleQParser#SimpleQParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SimpleQParser#SimpleQParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public SimpleQParser (String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n      super(qstr, localParams, params, req);\n      // Some of the parameters may come in through localParams, so combine them with params.\n      SolrParams defaultParams = SolrParams.wrapDefaults(localParams, params);\n\n      // This will be used to specify what fields and boosts will be used by SimpleQueryParser.\n      Map<String, Float> queryFields = SolrPluginUtils.parseFieldBoosts(defaultParams.get(SimpleParams.QF));\n\n      if (queryFields.isEmpty()) {\n        // It qf is not specified setup up the queryFields map to use the defaultField.\n        String defaultField = QueryParsing.getDefaultField(req.getSchema(), defaultParams.get(CommonParams.DF));\n\n        if (defaultField == null) {\n          // A query cannot be run without having a field or set of fields to run against.\n          throw new IllegalStateException(\"Neither \" + SimpleParams.QF + \", \" + CommonParams.DF\n              + \", nor the default search field are present.\");\n        }\n\n        queryFields.put(defaultField, 1.0F);\n      }\n      else {\n        for (Map.Entry<String, Float> queryField : queryFields.entrySet()) {\n          if (queryField.getValue() == null) {\n            // Some fields may be specified without a boost, so default the boost to 1.0 since a null value\n            // will not be accepted by SimpleQueryParser.\n            queryField.setValue(1.0F);\n          }\n        }\n      }\n\n      // Setup the operations that are enabled for the query.\n      int enabledOps = 0;\n      String opParam = defaultParams.get(SimpleParams.QO);\n\n      if (opParam == null) {\n        // All operations will be enabled.\n        enabledOps = -1;\n      } else {\n        // Parse the specified enabled operations to be used by the query.\n        String[] operations = opParam.split(\",\");\n\n        for (String operation : operations) {\n          Integer enabledOp = OPERATORS.get(operation.trim().toUpperCase(Locale.ROOT));\n\n          if (enabledOp != null) {\n            enabledOps |= enabledOp;\n          }\n        }\n      }\n\n      // Create a SimpleQueryParser using the analyzer from the schema.\n      final IndexSchema schema = req.getSchema();\n      parser = new SolrSimpleQueryParser(req.getSchema().getQueryAnalyzer(), queryFields, enabledOps, this, schema);\n\n      // Set the default operator to be either 'AND' or 'OR' for the query.\n      QueryParser.Operator defaultOp = QueryParsing.parseOP(defaultParams.get(QueryParsing.OP));\n\n      if (defaultOp == QueryParser.Operator.AND) {\n        parser.setDefaultOperator(BooleanClause.Occur.MUST);\n      }\n    }\n\n","sourceOld":"    public SimpleQParser (String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n      super(qstr, localParams, params, req);\n      // Some of the parameters may come in through localParams, so combine them with params.\n      SolrParams defaultParams = SolrParams.wrapDefaults(localParams, params);\n\n      // This will be used to specify what fields and boosts will be used by SimpleQueryParser.\n      Map<String, Float> queryFields = SolrPluginUtils.parseFieldBoosts(defaultParams.get(SimpleParams.QF));\n\n      if (queryFields.isEmpty()) {\n        // It qf is not specified setup up the queryFields map to use the defaultField.\n        String defaultField = QueryParsing.getDefaultField(req.getSchema(), defaultParams.get(CommonParams.DF));\n\n        if (defaultField == null) {\n          // A query cannot be run without having a field or set of fields to run against.\n          throw new IllegalStateException(\"Neither \" + SimpleParams.QF + \", \" + CommonParams.DF\n              + \", nor the default search field are present.\");\n        }\n\n        queryFields.put(defaultField, 1.0F);\n      }\n      else {\n        for (Map.Entry<String, Float> queryField : queryFields.entrySet()) {\n          if (queryField.getValue() == null) {\n            // Some fields may be specified without a boost, so default the boost to 1.0 since a null value\n            // will not be accepted by SimpleQueryParser.\n            queryField.setValue(1.0F);\n          }\n        }\n      }\n\n      // Setup the operations that are enabled for the query.\n      int enabledOps = 0;\n      String opParam = defaultParams.get(SimpleParams.QO);\n\n      if (opParam == null) {\n        // All operations will be enabled.\n        enabledOps = -1;\n      } else {\n        // Parse the specified enabled operations to be used by the query.\n        String[] operations = opParam.split(\",\");\n\n        for (String operation : operations) {\n          Integer enabledOp = OPERATORS.get(operation.trim().toUpperCase(Locale.ROOT));\n\n          if (enabledOp != null) {\n            enabledOps |= enabledOp;\n          }\n        }\n      }\n\n      // Create a SimpleQueryParser using the analyzer from the schema.\n      final IndexSchema schema = req.getSchema();\n      parser = new SolrSimpleQueryParser(req.getSchema().getQueryAnalyzer(), queryFields, enabledOps, this, schema);\n\n      // Set the default operator to be either 'AND' or 'OR' for the query.\n      QueryParser.Operator defaultOp = QueryParsing.getQueryParserDefaultOperator(req.getSchema(), defaultParams.get(QueryParsing.OP));\n\n      if (defaultOp == QueryParser.Operator.AND) {\n        parser.setDefaultOperator(BooleanClause.Occur.MUST);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d057970b5f9fcaabc49d2f54c59a5d2a09da1769","date":1495200448,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SimpleQParser#SimpleQParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SimpleQParser#SimpleQParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public SimpleQParser (String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n      super(qstr, localParams, params, req);\n      // Some of the parameters may come in through localParams, so combine them with params.\n      SolrParams defaultParams = SolrParams.wrapDefaults(localParams, params);\n\n      // This will be used to specify what fields and boosts will be used by SimpleQueryParser.\n      Map<String, Float> queryFields = SolrPluginUtils.parseFieldBoosts(defaultParams.get(SimpleParams.QF));\n\n      if (queryFields.isEmpty()) {\n        // It qf is not specified setup up the queryFields map to use the defaultField.\n        String defaultField = defaultParams.get(CommonParams.DF);\n\n        if (defaultField == null) {\n          // A query cannot be run without having a field or set of fields to run against.\n          throw new IllegalStateException(\"Neither \" + SimpleParams.QF + \" nor \" + CommonParams.DF\n              + \" are present.\");\n        }\n\n        queryFields.put(defaultField, 1.0F);\n      }\n      else {\n        for (Map.Entry<String, Float> queryField : queryFields.entrySet()) {\n          if (queryField.getValue() == null) {\n            // Some fields may be specified without a boost, so default the boost to 1.0 since a null value\n            // will not be accepted by SimpleQueryParser.\n            queryField.setValue(1.0F);\n          }\n        }\n      }\n\n      // Setup the operations that are enabled for the query.\n      int enabledOps = 0;\n      String opParam = defaultParams.get(SimpleParams.QO);\n\n      if (opParam == null) {\n        // All operations will be enabled.\n        enabledOps = -1;\n      } else {\n        // Parse the specified enabled operations to be used by the query.\n        String[] operations = opParam.split(\",\");\n\n        for (String operation : operations) {\n          Integer enabledOp = OPERATORS.get(operation.trim().toUpperCase(Locale.ROOT));\n\n          if (enabledOp != null) {\n            enabledOps |= enabledOp;\n          }\n        }\n      }\n\n      // Create a SimpleQueryParser using the analyzer from the schema.\n      final IndexSchema schema = req.getSchema();\n      parser = new SolrSimpleQueryParser(req.getSchema().getQueryAnalyzer(), queryFields, enabledOps, this, schema);\n\n      // Set the default operator to be either 'AND' or 'OR' for the query.\n      QueryParser.Operator defaultOp = QueryParsing.parseOP(defaultParams.get(QueryParsing.OP));\n\n      if (defaultOp == QueryParser.Operator.AND) {\n        parser.setDefaultOperator(BooleanClause.Occur.MUST);\n      }\n    }\n\n","sourceOld":"    public SimpleQParser (String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n      super(qstr, localParams, params, req);\n      // Some of the parameters may come in through localParams, so combine them with params.\n      SolrParams defaultParams = SolrParams.wrapDefaults(localParams, params);\n\n      // This will be used to specify what fields and boosts will be used by SimpleQueryParser.\n      Map<String, Float> queryFields = SolrPluginUtils.parseFieldBoosts(defaultParams.get(SimpleParams.QF));\n\n      if (queryFields.isEmpty()) {\n        // It qf is not specified setup up the queryFields map to use the defaultField.\n        String defaultField = QueryParsing.getDefaultField(req.getSchema(), defaultParams.get(CommonParams.DF));\n\n        if (defaultField == null) {\n          // A query cannot be run without having a field or set of fields to run against.\n          throw new IllegalStateException(\"Neither \" + SimpleParams.QF + \", \" + CommonParams.DF\n              + \", nor the default search field are present.\");\n        }\n\n        queryFields.put(defaultField, 1.0F);\n      }\n      else {\n        for (Map.Entry<String, Float> queryField : queryFields.entrySet()) {\n          if (queryField.getValue() == null) {\n            // Some fields may be specified without a boost, so default the boost to 1.0 since a null value\n            // will not be accepted by SimpleQueryParser.\n            queryField.setValue(1.0F);\n          }\n        }\n      }\n\n      // Setup the operations that are enabled for the query.\n      int enabledOps = 0;\n      String opParam = defaultParams.get(SimpleParams.QO);\n\n      if (opParam == null) {\n        // All operations will be enabled.\n        enabledOps = -1;\n      } else {\n        // Parse the specified enabled operations to be used by the query.\n        String[] operations = opParam.split(\",\");\n\n        for (String operation : operations) {\n          Integer enabledOp = OPERATORS.get(operation.trim().toUpperCase(Locale.ROOT));\n\n          if (enabledOp != null) {\n            enabledOps |= enabledOp;\n          }\n        }\n      }\n\n      // Create a SimpleQueryParser using the analyzer from the schema.\n      final IndexSchema schema = req.getSchema();\n      parser = new SolrSimpleQueryParser(req.getSchema().getQueryAnalyzer(), queryFields, enabledOps, this, schema);\n\n      // Set the default operator to be either 'AND' or 'OR' for the query.\n      QueryParser.Operator defaultOp = QueryParsing.parseOP(defaultParams.get(QueryParsing.OP));\n\n      if (defaultOp == QueryParser.Operator.AND) {\n        parser.setDefaultOperator(BooleanClause.Occur.MUST);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SimpleQParser#SimpleQParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.SimpleQParser#SimpleQParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"    public SimpleQParser (String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n      super(qstr, localParams, params, req);\n      // Some of the parameters may come in through localParams, so combine them with params.\n      SolrParams defaultParams = SolrParams.wrapDefaults(localParams, params);\n\n      // This will be used to specify what fields and boosts will be used by SimpleQueryParser.\n      Map<String, Float> queryFields = SolrPluginUtils.parseFieldBoosts(defaultParams.get(SimpleParams.QF));\n\n      if (queryFields.isEmpty()) {\n        // It qf is not specified setup up the queryFields map to use the defaultField.\n        String defaultField = defaultParams.get(CommonParams.DF);\n\n        if (defaultField == null) {\n          // A query cannot be run without having a field or set of fields to run against.\n          throw new IllegalStateException(\"Neither \" + SimpleParams.QF + \" nor \" + CommonParams.DF\n              + \" are present.\");\n        }\n\n        queryFields.put(defaultField, 1.0F);\n      }\n      else {\n        for (Map.Entry<String, Float> queryField : queryFields.entrySet()) {\n          if (queryField.getValue() == null) {\n            // Some fields may be specified without a boost, so default the boost to 1.0 since a null value\n            // will not be accepted by SimpleQueryParser.\n            queryField.setValue(1.0F);\n          }\n        }\n      }\n\n      // Setup the operations that are enabled for the query.\n      int enabledOps = 0;\n      String opParam = defaultParams.get(SimpleParams.QO);\n\n      if (opParam == null) {\n        // All operations will be enabled.\n        enabledOps = -1;\n      } else {\n        // Parse the specified enabled operations to be used by the query.\n        String[] operations = opParam.split(\",\");\n\n        for (String operation : operations) {\n          Integer enabledOp = OPERATORS.get(operation.trim().toUpperCase(Locale.ROOT));\n\n          if (enabledOp != null) {\n            enabledOps |= enabledOp;\n          }\n        }\n      }\n\n      // Create a SimpleQueryParser using the analyzer from the schema.\n      final IndexSchema schema = req.getSchema();\n      parser = new SolrSimpleQueryParser(req.getSchema().getQueryAnalyzer(), queryFields, enabledOps, this, schema);\n\n      // Set the default operator to be either 'AND' or 'OR' for the query.\n      QueryParser.Operator defaultOp = QueryParsing.parseOP(defaultParams.get(QueryParsing.OP));\n\n      if (defaultOp == QueryParser.Operator.AND) {\n        parser.setDefaultOperator(BooleanClause.Occur.MUST);\n      }\n    }\n\n","sourceOld":"    public SimpleQParser (String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n      super(qstr, localParams, params, req);\n      // Some of the parameters may come in through localParams, so combine them with params.\n      SolrParams defaultParams = SolrParams.wrapDefaults(localParams, params);\n\n      // This will be used to specify what fields and boosts will be used by SimpleQueryParser.\n      Map<String, Float> queryFields = SolrPluginUtils.parseFieldBoosts(defaultParams.get(SimpleParams.QF));\n\n      if (queryFields.isEmpty()) {\n        // It qf is not specified setup up the queryFields map to use the defaultField.\n        String defaultField = QueryParsing.getDefaultField(req.getSchema(), defaultParams.get(CommonParams.DF));\n\n        if (defaultField == null) {\n          // A query cannot be run without having a field or set of fields to run against.\n          throw new IllegalStateException(\"Neither \" + SimpleParams.QF + \", \" + CommonParams.DF\n              + \", nor the default search field are present.\");\n        }\n\n        queryFields.put(defaultField, 1.0F);\n      }\n      else {\n        for (Map.Entry<String, Float> queryField : queryFields.entrySet()) {\n          if (queryField.getValue() == null) {\n            // Some fields may be specified without a boost, so default the boost to 1.0 since a null value\n            // will not be accepted by SimpleQueryParser.\n            queryField.setValue(1.0F);\n          }\n        }\n      }\n\n      // Setup the operations that are enabled for the query.\n      int enabledOps = 0;\n      String opParam = defaultParams.get(SimpleParams.QO);\n\n      if (opParam == null) {\n        // All operations will be enabled.\n        enabledOps = -1;\n      } else {\n        // Parse the specified enabled operations to be used by the query.\n        String[] operations = opParam.split(\",\");\n\n        for (String operation : operations) {\n          Integer enabledOp = OPERATORS.get(operation.trim().toUpperCase(Locale.ROOT));\n\n          if (enabledOp != null) {\n            enabledOps |= enabledOp;\n          }\n        }\n      }\n\n      // Create a SimpleQueryParser using the analyzer from the schema.\n      final IndexSchema schema = req.getSchema();\n      parser = new SolrSimpleQueryParser(req.getSchema().getQueryAnalyzer(), queryFields, enabledOps, this, schema);\n\n      // Set the default operator to be either 'AND' or 'OR' for the query.\n      QueryParser.Operator defaultOp = QueryParsing.getQueryParserDefaultOperator(req.getSchema(), defaultParams.get(QueryParsing.OP));\n\n      if (defaultOp == QueryParser.Operator.AND) {\n        parser.setDefaultOperator(BooleanClause.Occur.MUST);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c418b5fb43bf7b591b636df532dd1ac44296469a":["1947f918feb323bd75a3bef71ab8651657a4ab76"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["1947f918feb323bd75a3bef71ab8651657a4ab76","d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"ee9efffeff762194ca606ff91a43e2f6f56a430f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["ee9efffeff762194ca606ff91a43e2f6f56a430f","1947f918feb323bd75a3bef71ab8651657a4ab76"],"1947f918feb323bd75a3bef71ab8651657a4ab76":["ee9efffeff762194ca606ff91a43e2f6f56a430f"],"d057970b5f9fcaabc49d2f54c59a5d2a09da1769":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["1947f918feb323bd75a3bef71ab8651657a4ab76","c418b5fb43bf7b591b636df532dd1ac44296469a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d057970b5f9fcaabc49d2f54c59a5d2a09da1769"]},"commit2Childs":{"c418b5fb43bf7b591b636df532dd1ac44296469a":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"ee9efffeff762194ca606ff91a43e2f6f56a430f":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","1947f918feb323bd75a3bef71ab8651657a4ab76"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"1947f918feb323bd75a3bef71ab8651657a4ab76":["c418b5fb43bf7b591b636df532dd1ac44296469a","e9017cf144952056066919f1ebc7897ff9bd71b1","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"d057970b5f9fcaabc49d2f54c59a5d2a09da1769":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee9efffeff762194ca606ff91a43e2f6f56a430f"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}