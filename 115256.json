{"path":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","commits":[{"id":"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235","date":1435150219,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","pathOld":"/dev/null","sourceNew":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f1f31880696765d6aec499d3b01fa501129af45","date":1474287317,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","sourceNew":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double) val).doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","sourceNew":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double) val).doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","sourceNew":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double) val).doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","sourceNew":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, val.floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, val.doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else if (val instanceof AtomicInteger) {\n      writeInt(name, ((AtomicInteger) val).get());\n    } else if (val instanceof AtomicLong) {\n      writeLong(name, ((AtomicLong) val).get());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double) val).doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","sourceNew":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, val.floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, val.doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else if (val instanceof AtomicInteger) {\n      writeInt(name, ((AtomicInteger) val).get());\n    } else if (val instanceof AtomicLong) {\n      writeLong(name, ((AtomicLong) val).get());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double) val).doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","sourceNew":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, val.floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, val.doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else if (val instanceof AtomicInteger) {\n      writeInt(name, ((AtomicInteger) val).get());\n    } else if (val instanceof AtomicLong) {\n      writeLong(name, ((AtomicLong) val).get());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double) val).doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","sourceNew":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, val.floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, val.doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else if (val instanceof AtomicInteger) {\n      writeInt(name, ((AtomicInteger) val).get());\n    } else if (val instanceof AtomicLong) {\n      writeLong(name, ((AtomicLong) val).get());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double) val).doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26dad91f15019714a045b4d8c5f40162b2058b54","date":1528551655,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeNumber(String,Number).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","sourceNew":"  default void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, val.floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, val.doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else if (val instanceof AtomicInteger) {\n      writeInt(name, ((AtomicInteger) val).get());\n    } else if (val instanceof AtomicLong) {\n      writeLong(name, ((AtomicLong) val).get());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, val.floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, val.doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else if (val instanceof AtomicInteger) {\n      writeInt(name, ((AtomicInteger) val).get());\n    } else if (val instanceof AtomicLong) {\n      writeLong(name, ((AtomicLong) val).get());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","sourceNew":null,"sourceOld":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, val.floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, val.doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else if (val instanceof AtomicInteger) {\n      writeInt(name, ((AtomicInteger) val).get());\n    } else if (val instanceof AtomicLong) {\n      writeLong(name, ((AtomicLong) val).get());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","sourceNew":null,"sourceOld":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, val.floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, val.doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else if (val instanceof AtomicInteger) {\n      writeInt(name, ((AtomicInteger) val).get());\n    } else if (val instanceof AtomicLong) {\n      writeLong(name, ((AtomicLong) val).get());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"26dad91f15019714a045b4d8c5f40162b2058b54":["28288370235ed02234a64753cdbf0c6ec096304a"],"1f1f31880696765d6aec499d3b01fa501129af45":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235"],"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["28288370235ed02234a64753cdbf0c6ec096304a","26dad91f15019714a045b4d8c5f40162b2058b54"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235","1f1f31880696765d6aec499d3b01fa501129af45"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["26dad91f15019714a045b4d8c5f40162b2058b54"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["28288370235ed02234a64753cdbf0c6ec096304a","26dad91f15019714a045b4d8c5f40162b2058b54"]},"commit2Childs":{"26dad91f15019714a045b4d8c5f40162b2058b54":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1f1f31880696765d6aec499d3b01fa501129af45":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235":["1f1f31880696765d6aec499d3b01fa501129af45","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"28288370235ed02234a64753cdbf0c6ec096304a":["26dad91f15019714a045b4d8c5f40162b2058b54","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}