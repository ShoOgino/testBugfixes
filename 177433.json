{"path":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() throws IOException {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0)\n      return;\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() throws IOException {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0)\n      return;\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() throws IOException {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0) {\n      return;\n    }\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() throws IOException {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0)\n      return;\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() throws IOException {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0) {\n      return;\n    }\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() throws IOException {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0)\n      return;\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0) {\n      return;\n    }\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() throws IOException {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0) {\n      return;\n    }\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","bugFix":["5350389bf83287111f7760b9e3db3af8e3648474"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0) {\n      return;\n    }\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() throws IOException {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0) {\n      return;\n    }\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() {\n    if (!doVectors || bytesHash.size() == 0) {\n      return;\n    }\n    termsWriter.addFieldToFlush(this);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0) {\n      return;\n    }\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() {\n    if (!doVectors || bytesHash.size() == 0) {\n      return;\n    }\n    termsWriter.addFieldToFlush(this);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0) {\n      return;\n    }\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() {\n    if (!doVectors || bytesHash.size() == 0) {\n      return;\n    }\n    termsWriter.addFieldToFlush(this);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0) {\n      return;\n    }\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3cc3fa1ecad75b99ec55169e44628808f9866ad","date":1592311545,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() {\n    if (!doVectors || getNumTerms() == 0) {\n      return;\n    }\n    termsWriter.addFieldToFlush(this);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() {\n    if (!doVectors || bytesHash.size() == 0) {\n      return;\n    }\n    termsWriter.addFieldToFlush(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","52c7e49be259508735752fba88085255014a6ecf"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4356000e349e38c9fb48034695b7c309abd54557"],"4356000e349e38c9fb48034695b7c309abd54557":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","3394716f52b34ab259ad5247e7595d9f9db6e935"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"52c7e49be259508735752fba88085255014a6ecf":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d3cc3fa1ecad75b99ec55169e44628808f9866ad":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3cc3fa1ecad75b99ec55169e44628808f9866ad"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","d3cc3fa1ecad75b99ec55169e44628808f9866ad"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4356000e349e38c9fb48034695b7c309abd54557":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4356000e349e38c9fb48034695b7c309abd54557"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","fe33227f6805edab2036cbb80645cc4e2d1fa424","52c7e49be259508735752fba88085255014a6ecf"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"d3cc3fa1ecad75b99ec55169e44628808f9866ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}