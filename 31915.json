{"path":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_04_multiWords_incorrectWords().mjava","commits":[{"id":"071bae97f774d86dca206e837de23a56b71c8b29","date":1194291554,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_04_multiWords_incorrectWords().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test for correct spelling of a single word at various accuracy levels\n   * to see how the suggestions vary.\n   */\n  public void testSpellCheck_04_multiWords_incorrectWords() {\n    \n    buildSpellCheckIndex();\n\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n    \n    assertQ(\"Confirm the index is still valid\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n    \n    \n    // Enable multiWords formatting:\n    lrf.args.put(\"sp.query.extendedResults\", \"true\");\n    \n    \n    assertQ(\"Failed to spell check\",\n            req(\"coat\")\n            ,\"//lst[@name='coat']\"\n            ,\"//lst[@name='coat']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions' and count(lst)=0]\"\n            );\n \n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"coat\")\n            ,\"//lst[@name='coat']\"\n            ,\"//lst[@name='coat']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cot']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cat']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='corn']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cart']\"\n            );\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"coat\")\n            ,\"//lst[@name='coat']\"\n            ,\"//lst[@name='coat']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cot']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cat']\"\n            );\n\n  \n  \n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n        req(\"cet cert corp\")\n        ,\"//lst[@name='cet']\"\n        ,\"//lst[@name='cet']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='cet']/lst[@name='suggestions']/lst[1]\"\n        ,\"//lst[@name='cet']/lst[@name='suggestions']/lst[2]\"\n  \n        ,\"//lst[@name='cert']\"\n        ,\"//lst[@name='cert']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='cert']/lst[@name='suggestions']/lst[1]\"\n        ,\"//lst[@name='cert']/lst[@name='suggestions']/lst[2]\"\n  \n        ,\"//lst[@name='corp']\"\n        ,\"//lst[@name='corp']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='corp']/lst[@name='suggestions']/lst[1]\"\n        ,\"//lst[@name='corp']/lst[@name='suggestions']/lst[2]\"\n  \n      );\n  \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560d9ff06b001421d5b77a46b7595c913deef74e","date":1195092229,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_04_multiWords_incorrectWords().mjava","pathOld":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_04_multiWords_incorrectWords().mjava","sourceNew":"  /**\n   * Test for correct spelling of a single word at various accuracy levels\n   * to see how the suggestions vary.\n   */\n  public void testSpellCheck_04_multiWords_incorrectWords() {\n    \n    buildSpellCheckIndex();\n\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n    \n    assertQ(\"Confirm the index is still valid\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n    \n    \n    // Enable multiWords formatting:\n    lrf.args.put(\"sp.query.extendedResults\", \"true\");\n    \n    \n    assertQ(\"Failed to spell check\",\n            req(\"coat\")\n            ,\"//int[@name='numDocs'][.=10]\"\n            ,\"//lst[@name='coat']\"\n            ,\"//lst[@name='coat']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions' and count(lst)=0]\"\n            );\n \n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"coat\")\n            ,\"//lst[@name='coat']\"\n            ,\"//lst[@name='coat']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cot']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cat']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='corn']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cart']\"\n            );\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"coat\")\n            ,\"//lst[@name='coat']\"\n            ,\"//lst[@name='coat']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cot']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cat']\"\n            );\n\n  \n  \n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n        req(\"cet cert corp\")\n        ,\"//int[@name='numDocs'][.=10]\"\n        ,\"//lst[@name='cet']\"\n        ,\"//lst[@name='cet']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='cet']/lst[@name='suggestions']/lst[1]\"\n        ,\"//lst[@name='cet']/lst[@name='suggestions']/lst[2]\"\n  \n        ,\"//lst[@name='cert']\"\n        ,\"//lst[@name='cert']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='cert']/lst[@name='suggestions']/lst[1]\"\n        ,\"//lst[@name='cert']/lst[@name='suggestions']/lst[2]\"\n  \n        ,\"//lst[@name='corp']\"\n        ,\"//lst[@name='corp']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='corp']/lst[@name='suggestions']/lst[1]\"\n        ,\"//lst[@name='corp']/lst[@name='suggestions']/lst[2]\"\n  \n      );\n  \n  }\n\n","sourceOld":"  /**\n   * Test for correct spelling of a single word at various accuracy levels\n   * to see how the suggestions vary.\n   */\n  public void testSpellCheck_04_multiWords_incorrectWords() {\n    \n    buildSpellCheckIndex();\n\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n    \n    assertQ(\"Confirm the index is still valid\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n    \n    \n    // Enable multiWords formatting:\n    lrf.args.put(\"sp.query.extendedResults\", \"true\");\n    \n    \n    assertQ(\"Failed to spell check\",\n            req(\"coat\")\n            ,\"//lst[@name='coat']\"\n            ,\"//lst[@name='coat']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions' and count(lst)=0]\"\n            );\n \n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"coat\")\n            ,\"//lst[@name='coat']\"\n            ,\"//lst[@name='coat']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cot']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cat']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='corn']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cart']\"\n            );\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"coat\")\n            ,\"//lst[@name='coat']\"\n            ,\"//lst[@name='coat']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cot']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cat']\"\n            );\n\n  \n  \n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n        req(\"cet cert corp\")\n        ,\"//lst[@name='cet']\"\n        ,\"//lst[@name='cet']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='cet']/lst[@name='suggestions']/lst[1]\"\n        ,\"//lst[@name='cet']/lst[@name='suggestions']/lst[2]\"\n  \n        ,\"//lst[@name='cert']\"\n        ,\"//lst[@name='cert']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='cert']/lst[@name='suggestions']/lst[1]\"\n        ,\"//lst[@name='cert']/lst[@name='suggestions']/lst[2]\"\n  \n        ,\"//lst[@name='corp']\"\n        ,\"//lst[@name='corp']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='corp']/lst[@name='suggestions']/lst[1]\"\n        ,\"//lst[@name='corp']/lst[@name='suggestions']/lst[2]\"\n  \n      );\n  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_04_multiWords_incorrectWords().mjava","pathOld":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_04_multiWords_incorrectWords().mjava","sourceNew":"  /**\n   * Test for correct spelling of a single word at various accuracy levels\n   * to see how the suggestions vary.\n   */\n  public void testSpellCheck_04_multiWords_incorrectWords() {\n    \n    buildSpellCheckIndex();\n\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n    \n    assertQ(\"Confirm the index is still valid\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n    \n    \n    // Enable multiWords formatting:\n    lrf.args.put(\"sp.query.extendedResults\", \"true\");\n    \n    \n    assertQ(\"Failed to spell check\",\n            req(\"coat\")\n            ,\"//int[@name='numDocs'][.=10]\"\n            ,\"//lst[@name='coat']\"\n            ,\"//lst[@name='coat']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions' and count(lst)=0]\"\n            );\n \n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"coat\")\n            ,\"//lst[@name='coat']\"\n            ,\"//lst[@name='coat']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cot']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cat']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='corn']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cart']\"\n            );\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"coat\")\n            ,\"//lst[@name='coat']\"\n            ,\"//lst[@name='coat']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cot']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cat']\"\n            );\n\n  \n  \n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n        req(\"cet cert corp\")\n        ,\"//int[@name='numDocs'][.=10]\"\n        ,\"//lst[@name='cet']\"\n        ,\"//lst[@name='cet']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='cet']/lst[@name='suggestions']/lst[1]\"\n        ,\"//lst[@name='cet']/lst[@name='suggestions']/lst[2]\"\n  \n        ,\"//lst[@name='cert']\"\n        ,\"//lst[@name='cert']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='cert']/lst[@name='suggestions']/lst[1]\"\n        ,\"//lst[@name='cert']/lst[@name='suggestions']/lst[2]\"\n  \n        ,\"//lst[@name='corp']\"\n        ,\"//lst[@name='corp']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='corp']/lst[@name='suggestions']/lst[1]\"\n        ,\"//lst[@name='corp']/lst[@name='suggestions']/lst[2]\"\n  \n      );\n  \n  }\n\n","sourceOld":"  /**\n   * Test for correct spelling of a single word at various accuracy levels\n   * to see how the suggestions vary.\n   */\n  public void testSpellCheck_04_multiWords_incorrectWords() {\n    \n    buildSpellCheckIndex();\n\n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n    \n    assertQ(\"Confirm the index is still valid\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n    \n    \n    // Enable multiWords formatting:\n    lrf.args.put(\"sp.query.extendedResults\", \"true\");\n    \n    \n    assertQ(\"Failed to spell check\",\n            req(\"coat\")\n            ,\"//int[@name='numDocs'][.=10]\"\n            ,\"//lst[@name='coat']\"\n            ,\"//lst[@name='coat']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions' and count(lst)=0]\"\n            );\n \n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"coat\")\n            ,\"//lst[@name='coat']\"\n            ,\"//lst[@name='coat']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cot']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cat']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='corn']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cart']\"\n            );\n\n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n            req(\"coat\")\n            ,\"//lst[@name='coat']\"\n            ,\"//lst[@name='coat']/int[@name='frequency'][.=0]\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cot']\"\n            ,\"//lst[@name='coat']/lst[@name='suggestions']/lst[@name='cat']\"\n            );\n\n  \n  \n    lrf.args.put(\"sp.query.suggestionCount\", \"2\");\n    lrf.args.put(\"sp.query.accuracy\",\".2\");\n    assertQ(\"Failed to spell check\",\n        req(\"cet cert corp\")\n        ,\"//int[@name='numDocs'][.=10]\"\n        ,\"//lst[@name='cet']\"\n        ,\"//lst[@name='cet']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='cet']/lst[@name='suggestions']/lst[1]\"\n        ,\"//lst[@name='cet']/lst[@name='suggestions']/lst[2]\"\n  \n        ,\"//lst[@name='cert']\"\n        ,\"//lst[@name='cert']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='cert']/lst[@name='suggestions']/lst[1]\"\n        ,\"//lst[@name='cert']/lst[@name='suggestions']/lst[2]\"\n  \n        ,\"//lst[@name='corp']\"\n        ,\"//lst[@name='corp']/int[@name='frequency'][.=0]\"\n        ,\"//lst[@name='corp']/lst[@name='suggestions']/lst[1]\"\n        ,\"//lst[@name='corp']/lst[@name='suggestions']/lst[2]\"\n  \n      );\n  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"071bae97f774d86dca206e837de23a56b71c8b29":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"560d9ff06b001421d5b77a46b7595c913deef74e":["071bae97f774d86dca206e837de23a56b71c8b29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["560d9ff06b001421d5b77a46b7595c913deef74e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"071bae97f774d86dca206e837de23a56b71c8b29":["560d9ff06b001421d5b77a46b7595c913deef74e"],"560d9ff06b001421d5b77a46b7595c913deef74e":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["071bae97f774d86dca206e837de23a56b71c8b29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}