{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,DocValuesProducer).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedNumericField(FieldInfo field, final DocValuesProducer valuesProducer) throws IOException {\n\n    final Iterable<Number> docToValueCount = LegacyDocValuesIterables.sortedNumericToDocCount(valuesProducer, field, numDocs);\n    final Iterable<Number> values = LegacyDocValuesIterables.sortedNumericToValues(valuesProducer, field);\n\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinary(field, new Iterable<BytesRef>() {     \n      @Override\n      public Iterator<BytesRef> iterator() {\n        final StringBuilder builder = new StringBuilder();\n        final BytesRefBuilder scratch = new BytesRefBuilder();\n        final Iterator<Number> counts = docToValueCount.iterator();\n        final Iterator<Number> numbers = values.iterator();\n        \n        return new Iterator<BytesRef>() {\n\n          @Override\n          public boolean hasNext() {\n            return counts.hasNext();\n          }\n\n          @Override\n          public BytesRef next() {\n            builder.setLength(0);\n            long count = counts.next().longValue();\n            for (int i = 0; i < count; i++) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(numbers.next().longValue()));\n            }\n            scratch.copyChars(builder);\n            return scratch.get();\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void addSortedNumericField(FieldInfo field, final Iterable<Number> docToValueCount, final Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinary(field, new Iterable<BytesRef>() {     \n      @Override\n      public Iterator<BytesRef> iterator() {\n        final StringBuilder builder = new StringBuilder();\n        final BytesRefBuilder scratch = new BytesRefBuilder();\n        final Iterator<Number> counts = docToValueCount.iterator();\n        final Iterator<Number> numbers = values.iterator();\n        \n        return new Iterator<BytesRef>() {\n\n          @Override\n          public boolean hasNext() {\n            return counts.hasNext();\n          }\n\n          @Override\n          public BytesRef next() {\n            builder.setLength(0);\n            long count = counts.next().longValue();\n            for (int i = 0; i < count; i++) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(numbers.next().longValue()));\n            }\n            scratch.copyChars(builder);\n            return scratch.get();\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,DocValuesProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedNumericField(FieldInfo field, final DocValuesProducer valuesProducer) throws IOException {\n\n    final Iterable<Number> docToValueCount = LegacyDocValuesIterables.sortedNumericToDocCount(valuesProducer, field, numDocs);\n    final Iterable<Number> values = LegacyDocValuesIterables.sortedNumericToValues(valuesProducer, field);\n\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinary(field, new Iterable<BytesRef>() {     \n      @Override\n      public Iterator<BytesRef> iterator() {\n        final StringBuilder builder = new StringBuilder();\n        final BytesRefBuilder scratch = new BytesRefBuilder();\n        final Iterator<Number> counts = docToValueCount.iterator();\n        final Iterator<Number> numbers = values.iterator();\n        \n        return new Iterator<BytesRef>() {\n\n          @Override\n          public boolean hasNext() {\n            return counts.hasNext();\n          }\n\n          @Override\n          public BytesRef next() {\n            builder.setLength(0);\n            long count = counts.next().longValue();\n            for (int i = 0; i < count; i++) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(numbers.next().longValue()));\n            }\n            scratch.copyChars(builder);\n            return scratch.get();\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,DocValuesProducer).mjava","sourceNew":"  @Override\n  public void addSortedNumericField(FieldInfo field, final DocValuesProducer valuesProducer) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinaryField(field, new EmptyDocValuesProducer() {\n      @Override\n      public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n        SortedNumericDocValues values = valuesProducer.getSortedNumeric(field);\n        return new BinaryDocValues() {\n\n          @Override\n          public int nextDoc() throws IOException {\n            int doc = values.nextDoc();\n            setCurrentDoc();\n            return doc;\n          }\n\n          @Override\n          public int docID() {\n            return values.docID();\n          }\n\n          @Override\n          public long cost() {\n            return values.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            int doc = values.advance(target);\n            setCurrentDoc();\n            return doc;\n          }\n\n          final StringBuilder builder = new StringBuilder();\n          BytesRef binaryValue;\n\n          private void setCurrentDoc() throws IOException {\n            if (docID() == NO_MORE_DOCS) {\n              return;\n            }\n            builder.setLength(0);\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(values.nextValue()));\n            }\n            binaryValue = new BytesRef(builder.toString());\n          }\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            return binaryValue;\n          }\n        };\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void addSortedNumericField(FieldInfo field, final DocValuesProducer valuesProducer) throws IOException {\n\n    final Iterable<Number> docToValueCount = LegacyDocValuesIterables.sortedNumericToDocCount(valuesProducer, field, numDocs);\n    final Iterable<Number> values = LegacyDocValuesIterables.sortedNumericToValues(valuesProducer, field);\n\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinary(field, new Iterable<BytesRef>() {     \n      @Override\n      public Iterator<BytesRef> iterator() {\n        final StringBuilder builder = new StringBuilder();\n        final BytesRefBuilder scratch = new BytesRefBuilder();\n        final Iterator<Number> counts = docToValueCount.iterator();\n        final Iterator<Number> numbers = values.iterator();\n        \n        return new Iterator<BytesRef>() {\n\n          @Override\n          public boolean hasNext() {\n            return counts.hasNext();\n          }\n\n          @Override\n          public BytesRef next() {\n            builder.setLength(0);\n            long count = counts.next().longValue();\n            for (int i = 0; i < count; i++) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(numbers.next().longValue()));\n            }\n            scratch.copyChars(builder);\n            return scratch.get();\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    });\n  }\n\n","bugFix":["6652c74b2358a0b13223817a6a793bf1c9d0749d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,DocValuesProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedNumericField(FieldInfo field, final DocValuesProducer valuesProducer) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinaryField(field, new EmptyDocValuesProducer() {\n      @Override\n      public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n        SortedNumericDocValues values = valuesProducer.getSortedNumeric(field);\n        return new BinaryDocValues() {\n\n          @Override\n          public int nextDoc() throws IOException {\n            int doc = values.nextDoc();\n            setCurrentDoc();\n            return doc;\n          }\n\n          @Override\n          public int docID() {\n            return values.docID();\n          }\n\n          @Override\n          public long cost() {\n            return values.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            int doc = values.advance(target);\n            setCurrentDoc();\n            return doc;\n          }\n\n          final StringBuilder builder = new StringBuilder();\n          BytesRef binaryValue;\n\n          private void setCurrentDoc() throws IOException {\n            if (docID() == NO_MORE_DOCS) {\n              return;\n            }\n            builder.setLength(0);\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(values.nextValue()));\n            }\n            binaryValue = new BytesRef(builder.toString());\n          }\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            return binaryValue;\n          }\n        };\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,DocValuesProducer).mjava","sourceNew":"  @Override\n  public void addSortedNumericField(FieldInfo field, final DocValuesProducer valuesProducer) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinaryField(field, new EmptyDocValuesProducer() {\n      @Override\n      public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n        SortedNumericDocValues values = valuesProducer.getSortedNumeric(field);\n        return new BinaryDocValues() {\n\n          @Override\n          public int nextDoc() throws IOException {\n            int doc = values.nextDoc();\n            setCurrentDoc();\n            return doc;\n          }\n\n          @Override\n          public int docID() {\n            return values.docID();\n          }\n\n          @Override\n          public long cost() {\n            return values.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            int doc = values.advance(target);\n            setCurrentDoc();\n            return doc;\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            if (values.advanceExact(target)) {\n              setCurrentDoc();\n              return true;\n            }\n            return false;\n          }\n          \n          final StringBuilder builder = new StringBuilder();\n          BytesRef binaryValue;\n\n          private void setCurrentDoc() throws IOException {\n            if (docID() == NO_MORE_DOCS) {\n              return;\n            }\n            builder.setLength(0);\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(values.nextValue()));\n            }\n            binaryValue = new BytesRef(builder.toString());\n          }\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            return binaryValue;\n          }\n        };\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void addSortedNumericField(FieldInfo field, final DocValuesProducer valuesProducer) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinaryField(field, new EmptyDocValuesProducer() {\n      @Override\n      public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n        SortedNumericDocValues values = valuesProducer.getSortedNumeric(field);\n        return new BinaryDocValues() {\n\n          @Override\n          public int nextDoc() throws IOException {\n            int doc = values.nextDoc();\n            setCurrentDoc();\n            return doc;\n          }\n\n          @Override\n          public int docID() {\n            return values.docID();\n          }\n\n          @Override\n          public long cost() {\n            return values.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            int doc = values.advance(target);\n            setCurrentDoc();\n            return doc;\n          }\n\n          final StringBuilder builder = new StringBuilder();\n          BytesRef binaryValue;\n\n          private void setCurrentDoc() throws IOException {\n            if (docID() == NO_MORE_DOCS) {\n              return;\n            }\n            builder.setLength(0);\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(values.nextValue()));\n            }\n            binaryValue = new BytesRef(builder.toString());\n          }\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            return binaryValue;\n          }\n        };\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,DocValuesProducer).mjava","sourceNew":"  @Override\n  public void addSortedNumericField(FieldInfo field, final DocValuesProducer valuesProducer) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinaryField(field, new EmptyDocValuesProducer() {\n      @Override\n      public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n        SortedNumericDocValues values = valuesProducer.getSortedNumeric(field);\n        return new BinaryDocValues() {\n\n          @Override\n          public int nextDoc() throws IOException {\n            int doc = values.nextDoc();\n            setCurrentDoc();\n            return doc;\n          }\n\n          @Override\n          public int docID() {\n            return values.docID();\n          }\n\n          @Override\n          public long cost() {\n            return values.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            int doc = values.advance(target);\n            setCurrentDoc();\n            return doc;\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            if (values.advanceExact(target)) {\n              setCurrentDoc();\n              return true;\n            }\n            return false;\n          }\n          \n          final StringBuilder builder = new StringBuilder();\n          BytesRef binaryValue;\n\n          private void setCurrentDoc() throws IOException {\n            if (docID() == NO_MORE_DOCS) {\n              return;\n            }\n            builder.setLength(0);\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(values.nextValue()));\n            }\n            binaryValue = new BytesRef(builder.toString());\n          }\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            return binaryValue;\n          }\n        };\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void addSortedNumericField(FieldInfo field, final DocValuesProducer valuesProducer) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinaryField(field, new EmptyDocValuesProducer() {\n      @Override\n      public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n        SortedNumericDocValues values = valuesProducer.getSortedNumeric(field);\n        return new BinaryDocValues() {\n\n          @Override\n          public int nextDoc() throws IOException {\n            int doc = values.nextDoc();\n            setCurrentDoc();\n            return doc;\n          }\n\n          @Override\n          public int docID() {\n            return values.docID();\n          }\n\n          @Override\n          public long cost() {\n            return values.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            int doc = values.advance(target);\n            setCurrentDoc();\n            return doc;\n          }\n\n          final StringBuilder builder = new StringBuilder();\n          BytesRef binaryValue;\n\n          private void setCurrentDoc() throws IOException {\n            if (docID() == NO_MORE_DOCS) {\n              return;\n            }\n            builder.setLength(0);\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(values.nextValue()));\n            }\n            binaryValue = new BytesRef(builder.toString());\n          }\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            return binaryValue;\n          }\n        };\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,DocValuesProducer).mjava","sourceNew":"  @Override\n  public void addSortedNumericField(FieldInfo field, final DocValuesProducer valuesProducer) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinaryField(field, new EmptyDocValuesProducer() {\n      @Override\n      public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n        SortedNumericDocValues values = valuesProducer.getSortedNumeric(field);\n        return new BinaryDocValues() {\n\n          @Override\n          public int nextDoc() throws IOException {\n            int doc = values.nextDoc();\n            setCurrentDoc();\n            return doc;\n          }\n\n          @Override\n          public int docID() {\n            return values.docID();\n          }\n\n          @Override\n          public long cost() {\n            return values.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            int doc = values.advance(target);\n            setCurrentDoc();\n            return doc;\n          }\n\n          @Override\n          public boolean advanceExact(int target) throws IOException {\n            if (values.advanceExact(target)) {\n              setCurrentDoc();\n              return true;\n            }\n            return false;\n          }\n          \n          final StringBuilder builder = new StringBuilder();\n          BytesRef binaryValue;\n\n          private void setCurrentDoc() throws IOException {\n            if (docID() == NO_MORE_DOCS) {\n              return;\n            }\n            builder.setLength(0);\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(values.nextValue()));\n            }\n            binaryValue = new BytesRef(builder.toString());\n          }\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            return binaryValue;\n          }\n        };\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void addSortedNumericField(FieldInfo field, final DocValuesProducer valuesProducer) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinaryField(field, new EmptyDocValuesProducer() {\n      @Override\n      public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n        SortedNumericDocValues values = valuesProducer.getSortedNumeric(field);\n        return new BinaryDocValues() {\n\n          @Override\n          public int nextDoc() throws IOException {\n            int doc = values.nextDoc();\n            setCurrentDoc();\n            return doc;\n          }\n\n          @Override\n          public int docID() {\n            return values.docID();\n          }\n\n          @Override\n          public long cost() {\n            return values.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            int doc = values.advance(target);\n            setCurrentDoc();\n            return doc;\n          }\n\n          final StringBuilder builder = new StringBuilder();\n          BytesRef binaryValue;\n\n          private void setCurrentDoc() throws IOException {\n            if (docID() == NO_MORE_DOCS) {\n              return;\n            }\n            builder.setLength(0);\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(values.nextValue()));\n            }\n            binaryValue = new BytesRef(builder.toString());\n          }\n\n          @Override\n          public BytesRef binaryValue() throws IOException {\n            return binaryValue;\n          }\n        };\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["f7558b5077dd4abd457be151475f13b541f4f13e","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}