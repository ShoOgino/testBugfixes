{"path":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testDropFullySoftDeletedSegment().mjava","commits":[{"id":"15e716649e2bd79a98b5e68c464154ea4c44677a","date":1523975212,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testDropFullySoftDeletedSegment().mjava","pathOld":"/dev/null","sourceNew":"  public void testDropFullySoftDeletedSegment() throws Exception {\n    Directory dir = newDirectory();\n    String softDelete = random().nextBoolean() ? null : \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(softDelete);\n    config.setMergePolicy(newMergePolicy(random(), true));\n    if (softDelete != null && random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(softDelete,\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    assertEquals(1, writer.segmentInfos.asList().size());\n\n    if (softDelete != null) {\n      // the newly created segment should be dropped as it is fully deleted (i.e. only contains deleted docs).\n      if (random().nextBoolean()) {\n        Document tombstone = new Document();\n        tombstone.add(new NumericDocValuesField(softDelete, 1));\n        writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(softDelete, 1));\n      } else {\n        Document doc = new Document();\n        doc.add(new StringField(\"id\", Integer.toString(1), Field.Store.YES));\n        if (random().nextBoolean()) {\n          writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, new NumericDocValuesField(softDelete, 1));\n        } else {\n          writer.addDocument(doc);\n        }\n        writer.updateDocValues(new Term(\"id\", \"1\"), new NumericDocValuesField(softDelete, 1));\n      }\n    } else {\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      writer.addDocument(d);\n      writer.deleteDocuments(new Term(\"id\", \"1\"));\n    }\n    writer.commit();\n    IndexReader reader = writer.getReader();\n    assertEquals(reader.numDocs(), 1);\n    reader.close();\n    assertEquals(1, writer.segmentInfos.asList().size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["631ea3d1607299c59f33edef140ffc19a81f07a0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"631ea3d1607299c59f33edef140ffc19a81f07a0","date":1532450367,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testDropFullySoftDeletedSegment().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testDropFullySoftDeletedSegment().mjava","sourceNew":"  public void testDropFullySoftDeletedSegment() throws Exception {\n    Directory dir = newDirectory();\n    String softDelete = random().nextBoolean() ? null : \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(softDelete);\n    config.setMergePolicy(newMergePolicy(random(), true));\n    if (softDelete != null && random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(softDelete,\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    assertEquals(1, writer.listOfSegmentCommitInfos().size());\n\n    if (softDelete != null) {\n      // the newly created segment should be dropped as it is fully deleted (i.e. only contains deleted docs).\n      if (random().nextBoolean()) {\n        Document tombstone = new Document();\n        tombstone.add(new NumericDocValuesField(softDelete, 1));\n        writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(softDelete, 1));\n      } else {\n        Document doc = new Document();\n        doc.add(new StringField(\"id\", Integer.toString(1), Field.Store.YES));\n        if (random().nextBoolean()) {\n          writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, new NumericDocValuesField(softDelete, 1));\n        } else {\n          writer.addDocument(doc);\n        }\n        writer.updateDocValues(new Term(\"id\", \"1\"), new NumericDocValuesField(softDelete, 1));\n      }\n    } else {\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      writer.addDocument(d);\n      writer.deleteDocuments(new Term(\"id\", \"1\"));\n    }\n    writer.commit();\n    IndexReader reader = writer.getReader();\n    assertEquals(reader.numDocs(), 1);\n    reader.close();\n    assertEquals(1, writer.listOfSegmentCommitInfos().size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDropFullySoftDeletedSegment() throws Exception {\n    Directory dir = newDirectory();\n    String softDelete = random().nextBoolean() ? null : \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(softDelete);\n    config.setMergePolicy(newMergePolicy(random(), true));\n    if (softDelete != null && random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(softDelete,\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    assertEquals(1, writer.segmentInfos.asList().size());\n\n    if (softDelete != null) {\n      // the newly created segment should be dropped as it is fully deleted (i.e. only contains deleted docs).\n      if (random().nextBoolean()) {\n        Document tombstone = new Document();\n        tombstone.add(new NumericDocValuesField(softDelete, 1));\n        writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(softDelete, 1));\n      } else {\n        Document doc = new Document();\n        doc.add(new StringField(\"id\", Integer.toString(1), Field.Store.YES));\n        if (random().nextBoolean()) {\n          writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, new NumericDocValuesField(softDelete, 1));\n        } else {\n          writer.addDocument(doc);\n        }\n        writer.updateDocValues(new Term(\"id\", \"1\"), new NumericDocValuesField(softDelete, 1));\n      }\n    } else {\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      writer.addDocument(d);\n      writer.deleteDocuments(new Term(\"id\", \"1\"));\n    }\n    writer.commit();\n    IndexReader reader = writer.getReader();\n    assertEquals(reader.numDocs(), 1);\n    reader.close();\n    assertEquals(1, writer.segmentInfos.asList().size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testDropFullySoftDeletedSegment().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testDropFullySoftDeletedSegment().mjava","sourceNew":"  public void testDropFullySoftDeletedSegment() throws Exception {\n    Directory dir = newDirectory();\n    String softDelete = random().nextBoolean() ? null : \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(softDelete);\n    config.setMergePolicy(newMergePolicy(random(), true));\n    if (softDelete != null && random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(softDelete,\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    assertEquals(1, writer.cloneSegmentInfos().size());\n\n    if (softDelete != null) {\n      // the newly created segment should be dropped as it is fully deleted (i.e. only contains deleted docs).\n      if (random().nextBoolean()) {\n        Document tombstone = new Document();\n        tombstone.add(new NumericDocValuesField(softDelete, 1));\n        writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(softDelete, 1));\n      } else {\n        Document doc = new Document();\n        doc.add(new StringField(\"id\", Integer.toString(1), Field.Store.YES));\n        if (random().nextBoolean()) {\n          writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, new NumericDocValuesField(softDelete, 1));\n        } else {\n          writer.addDocument(doc);\n        }\n        writer.updateDocValues(new Term(\"id\", \"1\"), new NumericDocValuesField(softDelete, 1));\n      }\n    } else {\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      writer.addDocument(d);\n      writer.deleteDocuments(new Term(\"id\", \"1\"));\n    }\n    writer.commit();\n    IndexReader reader = writer.getReader();\n    assertEquals(reader.numDocs(), 1);\n    reader.close();\n    assertEquals(1, writer.cloneSegmentInfos().size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDropFullySoftDeletedSegment() throws Exception {\n    Directory dir = newDirectory();\n    String softDelete = random().nextBoolean() ? null : \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(softDelete);\n    config.setMergePolicy(newMergePolicy(random(), true));\n    if (softDelete != null && random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(softDelete,\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    assertEquals(1, writer.listOfSegmentCommitInfos().size());\n\n    if (softDelete != null) {\n      // the newly created segment should be dropped as it is fully deleted (i.e. only contains deleted docs).\n      if (random().nextBoolean()) {\n        Document tombstone = new Document();\n        tombstone.add(new NumericDocValuesField(softDelete, 1));\n        writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(softDelete, 1));\n      } else {\n        Document doc = new Document();\n        doc.add(new StringField(\"id\", Integer.toString(1), Field.Store.YES));\n        if (random().nextBoolean()) {\n          writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, new NumericDocValuesField(softDelete, 1));\n        } else {\n          writer.addDocument(doc);\n        }\n        writer.updateDocValues(new Term(\"id\", \"1\"), new NumericDocValuesField(softDelete, 1));\n      }\n    } else {\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      writer.addDocument(d);\n      writer.deleteDocuments(new Term(\"id\", \"1\"));\n    }\n    writer.commit();\n    IndexReader reader = writer.getReader();\n    assertEquals(reader.numDocs(), 1);\n    reader.close();\n    assertEquals(1, writer.listOfSegmentCommitInfos().size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"631ea3d1607299c59f33edef140ffc19a81f07a0":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["631ea3d1607299c59f33edef140ffc19a81f07a0"],"15e716649e2bd79a98b5e68c464154ea4c44677a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"631ea3d1607299c59f33edef140ffc19a81f07a0":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15e716649e2bd79a98b5e68c464154ea4c44677a":["631ea3d1607299c59f33edef140ffc19a81f07a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}