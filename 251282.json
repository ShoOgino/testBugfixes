{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","commits":[{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  protected ZkWriteCommand updateState(final ClusterState prevState, ZkNodeProps message) {\n    final String cName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    Integer numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, null);\n    log.info(\"Update state numShards={} message={}\", numShards, message);\n\n    List<String> shardNames = new ArrayList<>();\n\n    ZkWriteCommand writeCommand = null;\n    ClusterState newState = null;\n\n    //collection does not yet exist, create placeholders if num shards is specified\n    boolean collectionExists = prevState.hasCollection(cName);\n    if (!collectionExists && numShards != null) {\n      ClusterStateMutator.getShardNames(numShards, shardNames);\n      Map<String, Object> createMsg = ZkNodeProps.makeMap(\"name\", cName);\n      createMsg.putAll(message.getProperties());\n      writeCommand = new ClusterStateMutator(zkStateReader).createCollection(prevState, new ZkNodeProps(createMsg));\n      DocCollection collection = writeCommand.collection;\n      newState = ClusterStateMutator.newState(prevState, cName, collection);\n    }\n    return updateState(newState != null ? newState : prevState,\n        message, cName, numShards, collectionExists);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","sourceNew":"  protected ZkWriteCommand updateState(final ClusterState prevState, ZkNodeProps message) {\n    final String cName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    Integer numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, null);\n    log.info(\"Update state numShards={} message={}\", numShards, message);\n\n    List<String> shardNames = new ArrayList<>();\n\n    ZkWriteCommand writeCommand = null;\n    ClusterState newState = null;\n\n    //collection does not yet exist, create placeholders if num shards is specified\n    boolean collectionExists = prevState.hasCollection(cName);\n    if (!collectionExists && numShards != null) {\n      ClusterStateMutator.getShardNames(numShards, shardNames);\n      Map<String, Object> createMsg = ZkNodeProps.makeMap(NAME, cName);\n      createMsg.putAll(message.getProperties());\n      writeCommand = new ClusterStateMutator(zkStateReader).createCollection(prevState, new ZkNodeProps(createMsg));\n      DocCollection collection = writeCommand.collection;\n      newState = ClusterStateMutator.newState(prevState, cName, collection);\n    }\n    return updateState(newState != null ? newState : prevState,\n        message, cName, numShards, collectionExists);\n  }\n\n","sourceOld":"  protected ZkWriteCommand updateState(final ClusterState prevState, ZkNodeProps message) {\n    final String cName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    Integer numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, null);\n    log.info(\"Update state numShards={} message={}\", numShards, message);\n\n    List<String> shardNames = new ArrayList<>();\n\n    ZkWriteCommand writeCommand = null;\n    ClusterState newState = null;\n\n    //collection does not yet exist, create placeholders if num shards is specified\n    boolean collectionExists = prevState.hasCollection(cName);\n    if (!collectionExists && numShards != null) {\n      ClusterStateMutator.getShardNames(numShards, shardNames);\n      Map<String, Object> createMsg = ZkNodeProps.makeMap(\"name\", cName);\n      createMsg.putAll(message.getProperties());\n      writeCommand = new ClusterStateMutator(zkStateReader).createCollection(prevState, new ZkNodeProps(createMsg));\n      DocCollection collection = writeCommand.collection;\n      newState = ClusterStateMutator.newState(prevState, cName, collection);\n    }\n    return updateState(newState != null ? newState : prevState,\n        message, cName, numShards, collectionExists);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","sourceNew":"  protected ZkWriteCommand updateState(final ClusterState prevState, ZkNodeProps message) {\n    final String cName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    Integer numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, null);\n    log.info(\"Update state numShards={} message={}\", numShards, message);\n\n    List<String> shardNames = new ArrayList<>();\n\n    ZkWriteCommand writeCommand = null;\n    ClusterState newState = null;\n\n    //collection does not yet exist, create placeholders if num shards is specified\n    boolean collectionExists = prevState.hasCollection(cName);\n    if (!collectionExists && numShards != null) {\n      ClusterStateMutator.getShardNames(numShards, shardNames);\n      Map<String, Object> createMsg = ZkNodeProps.makeMap(NAME, cName);\n      createMsg.putAll(message.getProperties());\n      writeCommand = new ClusterStateMutator(zkStateReader).createCollection(prevState, new ZkNodeProps(createMsg));\n      DocCollection collection = writeCommand.collection;\n      newState = ClusterStateMutator.newState(prevState, cName, collection);\n    }\n    return updateState(newState != null ? newState : prevState,\n        message, cName, numShards, collectionExists);\n  }\n\n","sourceOld":"  protected ZkWriteCommand updateState(final ClusterState prevState, ZkNodeProps message) {\n    final String cName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    Integer numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, null);\n    log.info(\"Update state numShards={} message={}\", numShards, message);\n\n    List<String> shardNames = new ArrayList<>();\n\n    ZkWriteCommand writeCommand = null;\n    ClusterState newState = null;\n\n    //collection does not yet exist, create placeholders if num shards is specified\n    boolean collectionExists = prevState.hasCollection(cName);\n    if (!collectionExists && numShards != null) {\n      ClusterStateMutator.getShardNames(numShards, shardNames);\n      Map<String, Object> createMsg = ZkNodeProps.makeMap(\"name\", cName);\n      createMsg.putAll(message.getProperties());\n      writeCommand = new ClusterStateMutator(zkStateReader).createCollection(prevState, new ZkNodeProps(createMsg));\n      DocCollection collection = writeCommand.collection;\n      newState = ClusterStateMutator.newState(prevState, cName, collection);\n    }\n    return updateState(newState != null ? newState : prevState,\n        message, cName, numShards, collectionExists);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","sourceNew":"  protected ZkWriteCommand updateState(final ClusterState prevState, ZkNodeProps message) {\n    final String cName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    Integer numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, null);\n    log.info(\"Update state numShards={} message={}\", numShards, message);\n\n    List<String> shardNames = new ArrayList<>();\n\n    ZkWriteCommand writeCommand = null;\n    ClusterState newState = null;\n\n    //collection does not yet exist, create placeholders if num shards is specified\n    boolean collectionExists = prevState.hasCollection(cName);\n    if (!collectionExists && numShards != null) {\n      ClusterStateMutator.getShardNames(numShards, shardNames);\n      Map<String, Object> createMsg = Utils.makeMap(NAME, cName);\n      createMsg.putAll(message.getProperties());\n      writeCommand = new ClusterStateMutator(zkStateReader).createCollection(prevState, new ZkNodeProps(createMsg));\n      DocCollection collection = writeCommand.collection;\n      newState = ClusterStateMutator.newState(prevState, cName, collection);\n    }\n    return updateState(newState != null ? newState : prevState,\n        message, cName, numShards, collectionExists);\n  }\n\n","sourceOld":"  protected ZkWriteCommand updateState(final ClusterState prevState, ZkNodeProps message) {\n    final String cName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    Integer numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, null);\n    log.info(\"Update state numShards={} message={}\", numShards, message);\n\n    List<String> shardNames = new ArrayList<>();\n\n    ZkWriteCommand writeCommand = null;\n    ClusterState newState = null;\n\n    //collection does not yet exist, create placeholders if num shards is specified\n    boolean collectionExists = prevState.hasCollection(cName);\n    if (!collectionExists && numShards != null) {\n      ClusterStateMutator.getShardNames(numShards, shardNames);\n      Map<String, Object> createMsg = ZkNodeProps.makeMap(NAME, cName);\n      createMsg.putAll(message.getProperties());\n      writeCommand = new ClusterStateMutator(zkStateReader).createCollection(prevState, new ZkNodeProps(createMsg));\n      DocCollection collection = writeCommand.collection;\n      newState = ClusterStateMutator.newState(prevState, cName, collection);\n    }\n    return updateState(newState != null ? newState : prevState,\n        message, cName, numShards, collectionExists);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","sourceNew":"  protected ZkWriteCommand updateState(final ClusterState prevState, ZkNodeProps message) {\n    final String cName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    Integer numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, null);\n    log.debug(\"Update state numShards={} message={}\", numShards, message);\n\n    List<String> shardNames = new ArrayList<>();\n\n    ZkWriteCommand writeCommand = null;\n    ClusterState newState = null;\n\n    //collection does not yet exist, create placeholders if num shards is specified\n    boolean collectionExists = prevState.hasCollection(cName);\n    if (!collectionExists && numShards != null) {\n      ClusterStateMutator.getShardNames(numShards, shardNames);\n      Map<String, Object> createMsg = Utils.makeMap(NAME, cName);\n      createMsg.putAll(message.getProperties());\n      writeCommand = new ClusterStateMutator(zkStateReader).createCollection(prevState, new ZkNodeProps(createMsg));\n      DocCollection collection = writeCommand.collection;\n      newState = ClusterStateMutator.newState(prevState, cName, collection);\n    }\n    return updateState(newState != null ? newState : prevState,\n        message, cName, numShards, collectionExists);\n  }\n\n","sourceOld":"  protected ZkWriteCommand updateState(final ClusterState prevState, ZkNodeProps message) {\n    final String cName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    Integer numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, null);\n    log.info(\"Update state numShards={} message={}\", numShards, message);\n\n    List<String> shardNames = new ArrayList<>();\n\n    ZkWriteCommand writeCommand = null;\n    ClusterState newState = null;\n\n    //collection does not yet exist, create placeholders if num shards is specified\n    boolean collectionExists = prevState.hasCollection(cName);\n    if (!collectionExists && numShards != null) {\n      ClusterStateMutator.getShardNames(numShards, shardNames);\n      Map<String, Object> createMsg = Utils.makeMap(NAME, cName);\n      createMsg.putAll(message.getProperties());\n      writeCommand = new ClusterStateMutator(zkStateReader).createCollection(prevState, new ZkNodeProps(createMsg));\n      DocCollection collection = writeCommand.collection;\n      newState = ClusterStateMutator.newState(prevState, cName, collection);\n    }\n    return updateState(newState != null ? newState : prevState,\n        message, cName, numShards, collectionExists);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","sourceNew":"  protected ZkWriteCommand updateState(final ClusterState prevState, ZkNodeProps message) {\n    final String cName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    Integer numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, null);\n    log.debug(\"Update state numShards={} message={}\", numShards, message);\n\n    List<String> shardNames = new ArrayList<>();\n\n    ZkWriteCommand writeCommand = null;\n    ClusterState newState = null;\n\n    //collection does not yet exist, create placeholders if num shards is specified\n    boolean collectionExists = prevState.hasCollection(cName);\n    if (!collectionExists && numShards != null) {\n      ClusterStateMutator.getShardNames(numShards, shardNames);\n      Map<String, Object> createMsg = Utils.makeMap(NAME, cName);\n      createMsg.putAll(message.getProperties());\n      writeCommand = new ClusterStateMutator(zkStateReader).createCollection(prevState, new ZkNodeProps(createMsg));\n      DocCollection collection = writeCommand.collection;\n      newState = ClusterStateMutator.newState(prevState, cName, collection);\n    }\n    return updateState(newState != null ? newState : prevState,\n        message, cName, numShards, collectionExists);\n  }\n\n","sourceOld":"  protected ZkWriteCommand updateState(final ClusterState prevState, ZkNodeProps message) {\n    final String cName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    Integer numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, null);\n    log.info(\"Update state numShards={} message={}\", numShards, message);\n\n    List<String> shardNames = new ArrayList<>();\n\n    ZkWriteCommand writeCommand = null;\n    ClusterState newState = null;\n\n    //collection does not yet exist, create placeholders if num shards is specified\n    boolean collectionExists = prevState.hasCollection(cName);\n    if (!collectionExists && numShards != null) {\n      ClusterStateMutator.getShardNames(numShards, shardNames);\n      Map<String, Object> createMsg = Utils.makeMap(NAME, cName);\n      createMsg.putAll(message.getProperties());\n      writeCommand = new ClusterStateMutator(zkStateReader).createCollection(prevState, new ZkNodeProps(createMsg));\n      DocCollection collection = writeCommand.collection;\n      newState = ClusterStateMutator.newState(prevState, cName, collection);\n    }\n    return updateState(newState != null ? newState : prevState,\n        message, cName, numShards, collectionExists);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","sourceNew":"  protected ZkWriteCommand updateState(final ClusterState prevState, ZkNodeProps message) {\n    final String cName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    Integer numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, null);\n    log.debug(\"Update state numShards={} message={}\", numShards, message);\n\n    List<String> shardNames = new ArrayList<>();\n\n    ZkWriteCommand writeCommand = null;\n    ClusterState newState = null;\n\n    //collection does not yet exist, create placeholders if num shards is specified\n    boolean collectionExists = prevState.hasCollection(cName);\n    if (!collectionExists && numShards != null) {\n      ClusterStateMutator.getShardNames(numShards, shardNames);\n      Map<String, Object> createMsg = Utils.makeMap(NAME, cName);\n      createMsg.putAll(message.getProperties());\n      writeCommand = new ClusterStateMutator(zkStateReader).createCollection(prevState, new ZkNodeProps(createMsg));\n      DocCollection collection = writeCommand.collection;\n      newState = ClusterStateMutator.newState(prevState, cName, collection);\n    }\n    return updateState(newState != null ? newState : prevState,\n        message, cName, numShards, collectionExists);\n  }\n\n","sourceOld":"  protected ZkWriteCommand updateState(final ClusterState prevState, ZkNodeProps message) {\n    final String cName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    Integer numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, null);\n    log.info(\"Update state numShards={} message={}\", numShards, message);\n\n    List<String> shardNames = new ArrayList<>();\n\n    ZkWriteCommand writeCommand = null;\n    ClusterState newState = null;\n\n    //collection does not yet exist, create placeholders if num shards is specified\n    boolean collectionExists = prevState.hasCollection(cName);\n    if (!collectionExists && numShards != null) {\n      ClusterStateMutator.getShardNames(numShards, shardNames);\n      Map<String, Object> createMsg = Utils.makeMap(NAME, cName);\n      createMsg.putAll(message.getProperties());\n      writeCommand = new ClusterStateMutator(zkStateReader).createCollection(prevState, new ZkNodeProps(createMsg));\n      DocCollection collection = writeCommand.collection;\n      newState = ClusterStateMutator.newState(prevState, cName, collection);\n    }\n    return updateState(newState != null ? newState : prevState,\n        message, cName, numShards, collectionExists);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","sourceNew":"  protected ZkWriteCommand updateState(final ClusterState prevState, ZkNodeProps message) {\n    final String cName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    Integer numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, null);\n    log.debug(\"Update state numShards={} message={}\", numShards, message);\n\n    List<String> shardNames = new ArrayList<>();\n\n    ZkWriteCommand writeCommand = null;\n    ClusterState newState = null;\n\n    //collection does not yet exist, create placeholders if num shards is specified\n    boolean collectionExists = prevState.hasCollection(cName);\n    if (!collectionExists && numShards != null) {\n      ClusterStateMutator.getShardNames(numShards, shardNames);\n      Map<String, Object> createMsg = Utils.makeMap(NAME, cName);\n      createMsg.putAll(message.getProperties());\n      writeCommand = new ClusterStateMutator(dataProvider).createCollection(prevState, new ZkNodeProps(createMsg));\n      DocCollection collection = writeCommand.collection;\n      newState = ClusterStateMutator.newState(prevState, cName, collection);\n    }\n    return updateState(newState != null ? newState : prevState,\n        message, cName, numShards, collectionExists);\n  }\n\n","sourceOld":"  protected ZkWriteCommand updateState(final ClusterState prevState, ZkNodeProps message) {\n    final String cName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    Integer numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, null);\n    log.debug(\"Update state numShards={} message={}\", numShards, message);\n\n    List<String> shardNames = new ArrayList<>();\n\n    ZkWriteCommand writeCommand = null;\n    ClusterState newState = null;\n\n    //collection does not yet exist, create placeholders if num shards is specified\n    boolean collectionExists = prevState.hasCollection(cName);\n    if (!collectionExists && numShards != null) {\n      ClusterStateMutator.getShardNames(numShards, shardNames);\n      Map<String, Object> createMsg = Utils.makeMap(NAME, cName);\n      createMsg.putAll(message.getProperties());\n      writeCommand = new ClusterStateMutator(zkStateReader).createCollection(prevState, new ZkNodeProps(createMsg));\n      DocCollection collection = writeCommand.collection;\n      newState = ClusterStateMutator.newState(prevState, cName, collection);\n    }\n    return updateState(newState != null ? newState : prevState,\n        message, cName, numShards, collectionExists);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20c968c14aace7cf49843bf2c1fafc7fd3845659","date":1533133859,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateState(ClusterState,ZkNodeProps).mjava","sourceNew":"  protected ZkWriteCommand updateState(final ClusterState prevState, ZkNodeProps message) {\n    final String cName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    Integer numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, null);\n    log.debug(\"Update state numShards={} message={}\", numShards, message);\n\n    List<String> shardNames = new ArrayList<>();\n\n    ZkWriteCommand writeCommand = null;\n    ClusterState newState = null;\n\n    //collection does not yet exist, create placeholders if num shards is specified\n    boolean collectionExists = prevState.hasCollection(cName);\n    if (!collectionExists && numShards != null) {\n      ClusterStateMutator.getShardNames(numShards, shardNames);\n      Map<String, Object> createMsg = Utils.makeMap(NAME, cName);\n      createMsg.putAll(message.getProperties());\n      writeCommand = new ClusterStateMutator(cloudManager).createCollection(prevState, new ZkNodeProps(createMsg));\n      DocCollection collection = writeCommand.collection;\n      newState = ClusterStateMutator.newState(prevState, cName, collection);\n    }\n    return updateState(newState != null ? newState : prevState,\n        message, cName, numShards, collectionExists);\n  }\n\n","sourceOld":"  protected ZkWriteCommand updateState(final ClusterState prevState, ZkNodeProps message) {\n    final String cName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    Integer numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, null);\n    log.debug(\"Update state numShards={} message={}\", numShards, message);\n\n    List<String> shardNames = new ArrayList<>();\n\n    ZkWriteCommand writeCommand = null;\n    ClusterState newState = null;\n\n    //collection does not yet exist, create placeholders if num shards is specified\n    boolean collectionExists = prevState.hasCollection(cName);\n    if (!collectionExists && numShards != null) {\n      ClusterStateMutator.getShardNames(numShards, shardNames);\n      Map<String, Object> createMsg = Utils.makeMap(NAME, cName);\n      createMsg.putAll(message.getProperties());\n      writeCommand = new ClusterStateMutator(dataProvider).createCollection(prevState, new ZkNodeProps(createMsg));\n      DocCollection collection = writeCommand.collection;\n      newState = ClusterStateMutator.newState(prevState, cName, collection);\n    }\n    return updateState(newState != null ? newState : prevState,\n        message, cName, numShards, collectionExists);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"962cd4f5e313777f35da8f521265323e84184929":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b693a83132c9e45afcd564fd65a25b60ed80388b","962cd4f5e313777f35da8f521265323e84184929"],"d2638f781be724518ff6c2263d14a48cf6e68017":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","1390137e395d2f07f9ba5b8c43d293befe84d563"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b693a83132c9e45afcd564fd65a25b60ed80388b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20c968c14aace7cf49843bf2c1fafc7fd3845659"]},"commit2Childs":{"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["d2638f781be724518ff6c2263d14a48cf6e68017","b693a83132c9e45afcd564fd65a25b60ed80388b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}