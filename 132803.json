{"path":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#getTermsEnum(Terms,AttributeSource).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyQuery#getTermsEnum(Terms,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (!termLongEnough) {  // can only match if it's exact\n      return new SingleTermsEnum(terms.iterator(null), term.bytes());\n    }\n    // TODO: should we expose the transpositions option to this query?\n    // maybe move the old/slowish stuff (lev without transpositions, n > 2, etc) all to contrib,\n    // deprecate it, and just have a faster/simpler/better one in core?\n    return new FuzzyTermsEnum(terms, atts, getTerm(), minimumSimilarity, prefixLength, false);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (!termLongEnough) {  // can only match if it's exact\n      return new SingleTermsEnum(terms.iterator(null), term.bytes());\n    }\n    // TODO: should we expose the transpositions option to this query?\n    // maybe move the old/slowish stuff (lev without transpositions, n > 2, etc) all to contrib,\n    // deprecate it, and just have a faster/simpler/better one in core?\n    return new FuzzyTermsEnum(terms, atts, getTerm(), minimumSimilarity, prefixLength, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#getTermsEnum(Terms,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (maxEdits == 0 || prefixLength >= term.text().length()) {  // can only match if it's exact\n      return new SingleTermsEnum(terms.iterator(null), term.bytes());\n    }\n    return new FuzzyTermsEnum(terms, atts, getTerm(), maxEdits, prefixLength, transpositions);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (!termLongEnough) {  // can only match if it's exact\n      return new SingleTermsEnum(terms.iterator(null), term.bytes());\n    }\n    // TODO: should we expose the transpositions option to this query?\n    // maybe move the old/slowish stuff (lev without transpositions, n > 2, etc) all to contrib,\n    // deprecate it, and just have a faster/simpler/better one in core?\n    return new FuzzyTermsEnum(terms, atts, getTerm(), minimumSimilarity, prefixLength, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#getTermsEnum(Terms,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (maxEdits == 0 || prefixLength >= term.text().length()) {  // can only match if it's exact\n      return new SingleTermsEnum(terms.iterator(), term.bytes());\n    }\n    return new FuzzyTermsEnum(terms, atts, getTerm(), maxEdits, prefixLength, transpositions);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (maxEdits == 0 || prefixLength >= term.text().length()) {  // can only match if it's exact\n      return new SingleTermsEnum(terms.iterator(null), term.bytes());\n    }\n    return new FuzzyTermsEnum(terms, atts, getTerm(), maxEdits, prefixLength, transpositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e99d92de6748e3bbd2dd7b72695cdb952b2d835","date":1579100291,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#getTermsEnum(Terms,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (maxEdits == 0 || prefixLength >= term.text().length()) {  // can only match if it's exact\n      return new SingleTermsEnum(terms.iterator(), term.bytes());\n    }\n    return new FuzzyTermsEnum(terms, atts, getTerm(), termLength, maxEdits, automata);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (maxEdits == 0 || prefixLength >= term.text().length()) {  // can only match if it's exact\n      return new SingleTermsEnum(terms.iterator(), term.bytes());\n    }\n    return new FuzzyTermsEnum(terms, atts, getTerm(), maxEdits, prefixLength, transpositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad855e2f1f69c5e330d1027a5d54f8814e47a0d6","date":1588847334,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#getTermsEnum(Terms,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (maxEdits == 0 || prefixLength >= term.text().length()) {  // can only match if it's exact\n      return new SingleTermsEnum(terms.iterator(), term.bytes());\n    }\n    return new FuzzyTermsEnum(terms, atts, getTerm(), maxEdits, prefixLength, transpositions);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (maxEdits == 0 || prefixLength >= term.text().length()) {  // can only match if it's exact\n      return new SingleTermsEnum(terms.iterator(), term.bytes());\n    }\n    return new FuzzyTermsEnum(terms, atts, getTerm(), termLength, maxEdits, automata);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"053cf7ba50bf1e4ce3e6a8f92a24a016fb7a72a5","date":1591215570,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#getTermsEnum(Terms,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (maxEdits == 0) { // can only match if it's exact\n      return new SingleTermsEnum(terms.iterator(), term.bytes());\n    }\n    return new FuzzyTermsEnum(terms, atts, getTerm(), maxEdits, prefixLength, transpositions);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (maxEdits == 0 || prefixLength >= term.text().length()) {  // can only match if it's exact\n      return new SingleTermsEnum(terms.iterator(), term.bytes());\n    }\n    return new FuzzyTermsEnum(terms, atts, getTerm(), maxEdits, prefixLength, transpositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e99d92de6748e3bbd2dd7b72695cdb952b2d835":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"053cf7ba50bf1e4ce3e6a8f92a24a016fb7a72a5":["ad855e2f1f69c5e330d1027a5d54f8814e47a0d6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad855e2f1f69c5e330d1027a5d54f8814e47a0d6":["3e99d92de6748e3bbd2dd7b72695cdb952b2d835"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["053cf7ba50bf1e4ce3e6a8f92a24a016fb7a72a5"]},"commit2Childs":{"3e99d92de6748e3bbd2dd7b72695cdb952b2d835":["ad855e2f1f69c5e330d1027a5d54f8814e47a0d6"],"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["3e99d92de6748e3bbd2dd7b72695cdb952b2d835"],"053cf7ba50bf1e4ce3e6a8f92a24a016fb7a72a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ad855e2f1f69c5e330d1027a5d54f8814e47a0d6":["053cf7ba50bf1e4ce3e6a8f92a24a016fb7a72a5"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}