{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","commits":[{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene410/TestLucene410DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","sourceNew":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf;\n    switch (random().nextInt(2)) {\n      case 0: pf = new Lucene41WithOrds();\n              break;\n      case 1: pf = new Ords41PostingsFormat();\n              break;\n      // TODO: these don't actually support ords!\n      //case 2: pf = new FSTOrdPostingsFormat();\n      //        break;\n      default: throw new AssertionError();\n    }\n    final DocValuesFormat dv = new Lucene50DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        assertEquals(terms.size(), r.getSortedSetDocValues(\"dv\").getValueCount());\n        TermsEnum expected = terms.iterator(null);\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator(null);\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf;\n    switch (random().nextInt(2)) {\n      case 0: pf = new Lucene41WithOrds();\n              break;\n      case 1: pf = new Ords41PostingsFormat();\n              break;\n      // TODO: these don't actually support ords!\n      //case 2: pf = new FSTOrdPostingsFormat();\n      //        break;\n      default: throw new AssertionError();\n    }\n    final DocValuesFormat dv = new Lucene410DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        assertEquals(terms.size(), r.getSortedSetDocValues(\"dv\").getValueCount());\n        TermsEnum expected = terms.iterator(null);\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator(null);\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","sourceNew":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene50DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        assertEquals(terms.size(), r.getSortedSetDocValues(\"dv\").getValueCount());\n        TermsEnum expected = terms.iterator(null);\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator(null);\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf;\n    switch (random().nextInt(2)) {\n      case 0: pf = new Lucene41WithOrds();\n              break;\n      case 1: pf = new Ords41PostingsFormat();\n              break;\n      // TODO: these don't actually support ords!\n      //case 2: pf = new FSTOrdPostingsFormat();\n      //        break;\n      default: throw new AssertionError();\n    }\n    final DocValuesFormat dv = new Lucene50DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        assertEquals(terms.size(), r.getSortedSetDocValues(\"dv\").getValueCount());\n        TermsEnum expected = terms.iterator(null);\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator(null);\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":2,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene410/TestLucene410DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","sourceNew":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene50DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        assertEquals(terms.size(), r.getSortedSetDocValues(\"dv\").getValueCount());\n        TermsEnum expected = terms.iterator(null);\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator(null);\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf;\n    switch (random().nextInt(2)) {\n      case 0: pf = new Lucene41WithOrds();\n              break;\n      case 1: pf = new Ords41PostingsFormat();\n              break;\n      // TODO: these don't actually support ords!\n      //case 2: pf = new FSTOrdPostingsFormat();\n      //        break;\n      default: throw new AssertionError();\n    }\n    final DocValuesFormat dv = new Lucene410DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        assertEquals(terms.size(), r.getSortedSetDocValues(\"dv\").getValueCount());\n        TermsEnum expected = terms.iterator(null);\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator(null);\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ef73c510372b59af0c76c1094b374e44ac159d0","date":1422543368,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","sourceNew":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene50DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        SortedSetDocValues ssdv = r.getSortedSetDocValues(\"dv\");\n        assertEquals(terms.size(), ssdv.getValueCount());\n        TermsEnum expected = terms.iterator(null);\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n\n        doTestSortedSetEnumAdvanceIndependently(ssdv);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator(null);\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene50DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        assertEquals(terms.size(), r.getSortedSetDocValues(\"dv\").getValueCount());\n        TermsEnum expected = terms.iterator(null);\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator(null);\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["0ccb77914199b22bfac3f1ed4d77fe0b96527a62"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","sourceNew":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene50DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        SortedSetDocValues ssdv = r.getSortedSetDocValues(\"dv\");\n        assertEquals(terms.size(), ssdv.getValueCount());\n        TermsEnum expected = terms.iterator();\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n\n        doTestSortedSetEnumAdvanceIndependently(ssdv);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator();\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene50DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        SortedSetDocValues ssdv = r.getSortedSetDocValues(\"dv\");\n        assertEquals(terms.size(), ssdv.getValueCount());\n        TermsEnum expected = terms.iterator(null);\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n\n        doTestSortedSetEnumAdvanceIndependently(ssdv);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator(null);\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestLucene50DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","sourceNew":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene50DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        SortedSetDocValues ssdv = r.getSortedSetDocValues(\"dv\");\n        assertEquals(terms.size(), ssdv.getValueCount());\n        TermsEnum expected = terms.iterator();\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n\n        doTestSortedSetEnumAdvanceIndependently(ssdv);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator();\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene50DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        SortedSetDocValues ssdv = r.getSortedSetDocValues(\"dv\");\n        assertEquals(terms.size(), ssdv.getValueCount());\n        TermsEnum expected = terms.iterator();\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n\n        doTestSortedSetEnumAdvanceIndependently(ssdv);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator();\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["3ef73c510372b59af0c76c1094b374e44ac159d0"],"3ef73c510372b59af0c76c1094b374e44ac159d0":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"99eb4a732d1a908f4636ace52928876136bf1896":["d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"a870f9917149dc600c4ad4417d615c1795de5864":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a870f9917149dc600c4ad4417d615c1795de5864"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["a870f9917149dc600c4ad4417d615c1795de5864"],"3ef73c510372b59af0c76c1094b374e44ac159d0":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["3ef73c510372b59af0c76c1094b374e44ac159d0"],"a870f9917149dc600c4ad4417d615c1795de5864":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}