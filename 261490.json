{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof DirectoryReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof DirectoryReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11f75174865a8734695cd60a4093339a4e63fcbb","date":1323039567,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof DirectoryReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof DirectoryReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof DirectoryReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof DirectoryReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof DirectoryReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof DirectoryReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef53d1d25057e41eff3dce2a7f3e880a78ed7069","date":1323523707,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof DirectoryReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof DirectoryReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof DirectoryReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof DirectoryReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40b62adb64d8f7b2f85ee849349cfb0bef03f45","date":1327855938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof AtomicIndexReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders && reader instanceof CompositeIndexReader) {\n      IndexReader[] subReaders = ((CompositeIndexReader) reader).getSequentialSubReaders();\n      for (int i = 0; i < subReaders.length; i++) {\n        assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n      }\n    }\n  }\n\n","sourceOld":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof DirectoryReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof AtomicReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (int i = 0; i < subReaders.length; i++) {\n        assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n      }\n    }\n  }\n\n","sourceOld":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof AtomicIndexReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders && reader instanceof CompositeIndexReader) {\n      IndexReader[] subReaders = ((CompositeIndexReader) reader).getSequentialSubReaders();\n      for (int i = 0; i < subReaders.length; i++) {\n        assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof AtomicReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (int i = 0; i < subReaders.length; i++) {\n        assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n      }\n    }\n  }\n\n","sourceOld":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof DirectoryReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof AtomicReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (int i = 0; i < subReaders.length; i++) {\n        assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n      }\n    }\n  }\n\n","sourceOld":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof AtomicReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (int i = 0; i < subReaders.length; i++) {\n        assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11f75174865a8734695cd60a4093339a4e63fcbb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["9454a6510e2db155fb01faa5c049b06ece95fab9","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["9454a6510e2db155fb01faa5c049b06ece95fab9","11f75174865a8734695cd60a4093339a4e63fcbb"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["ef53d1d25057e41eff3dce2a7f3e880a78ed7069"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","ef53d1d25057e41eff3dce2a7f3e880a78ed7069"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["ef53d1d25057e41eff3dce2a7f3e880a78ed7069","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ef53d1d25057e41eff3dce2a7f3e880a78ed7069":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"11f75174865a8734695cd60a4093339a4e63fcbb":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","ef53d1d25057e41eff3dce2a7f3e880a78ed7069"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["11f75174865a8734695cd60a4093339a4e63fcbb","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ef53d1d25057e41eff3dce2a7f3e880a78ed7069":["d40b62adb64d8f7b2f85ee849349cfb0bef03f45","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}