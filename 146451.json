{"path":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testIllegalAdvancementOfSubIteratorsTripsAssertion().mjava","commits":[{"id":"73beab9372f571bc3dc060fcc658d2879ce20d67","date":1601905097,"type":0,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testIllegalAdvancementOfSubIteratorsTripsAssertion().mjava","pathOld":"/dev/null","sourceNew":"  public void testIllegalAdvancementOfSubIteratorsTripsAssertion() throws IOException {\n    assumeTrue(\"Assertions must be enabled for this test!\", LuceneTestCase.assertsAreEnabled);\n    int maxDoc = 100;\n    final int numIterators = TestUtil.nextInt(random(), 2, 5);\n    FixedBitSet set = randomSet(maxDoc);\n\n    DocIdSetIterator[] iterators = new DocIdSetIterator[numIterators];\n    for (int i = 0; i < iterators.length; ++i) {\n      iterators[i] = new BitDocIdSet(set).iterator();\n    }\n    final DocIdSetIterator conjunction = ConjunctionDISI.intersectIterators(Arrays.asList(iterators));\n    int idx = TestUtil.nextInt(random() , 0, iterators.length-1);\n    iterators[idx].nextDoc(); // illegally advancing one of the sub-iterators outside of the conjunction iterator\n    AssertionError ex = expectThrows(AssertionError.class, () -> conjunction.nextDoc());\n    assertEquals(\"Sub-iterators of ConjunctionDISI are not on the same document!\", ex.getMessage());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14eadbcde31ef1b984ca353239772e18e1dcf667","date":1601909725,"type":4,"author":"Mayya Sharipova","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testIllegalAdvancementOfSubIteratorsTripsAssertion().mjava","sourceNew":null,"sourceOld":"  public void testIllegalAdvancementOfSubIteratorsTripsAssertion() throws IOException {\n    assumeTrue(\"Assertions must be enabled for this test!\", LuceneTestCase.assertsAreEnabled);\n    int maxDoc = 100;\n    final int numIterators = TestUtil.nextInt(random(), 2, 5);\n    FixedBitSet set = randomSet(maxDoc);\n\n    DocIdSetIterator[] iterators = new DocIdSetIterator[numIterators];\n    for (int i = 0; i < iterators.length; ++i) {\n      iterators[i] = new BitDocIdSet(set).iterator();\n    }\n    final DocIdSetIterator conjunction = ConjunctionDISI.intersectIterators(Arrays.asList(iterators));\n    int idx = TestUtil.nextInt(random() , 0, iterators.length-1);\n    iterators[idx].nextDoc(); // illegally advancing one of the sub-iterators outside of the conjunction iterator\n    AssertionError ex = expectThrows(AssertionError.class, () -> conjunction.nextDoc());\n    assertEquals(\"Sub-iterators of ConjunctionDISI are not on the same document!\", ex.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9f411fcb966d871aaa550f0ad1e328ce71df018","date":1602004981,"type":0,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testIllegalAdvancementOfSubIteratorsTripsAssertion().mjava","pathOld":"/dev/null","sourceNew":"  public void testIllegalAdvancementOfSubIteratorsTripsAssertion() throws IOException {\n    assumeTrue(\"Assertions must be enabled for this test!\", LuceneTestCase.assertsAreEnabled);\n    int maxDoc = 100;\n    final int numIterators = TestUtil.nextInt(random(), 2, 5);\n    FixedBitSet set = randomSet(maxDoc);\n\n    DocIdSetIterator[] iterators = new DocIdSetIterator[numIterators];\n    for (int i = 0; i < iterators.length; ++i) {\n      iterators[i] = new BitDocIdSet(set).iterator();\n    }\n    final DocIdSetIterator conjunction = ConjunctionDISI.intersectIterators(Arrays.asList(iterators));\n    int idx = TestUtil.nextInt(random() , 0, iterators.length-1);\n    iterators[idx].nextDoc(); // illegally advancing one of the sub-iterators outside of the conjunction iterator\n    AssertionError ex = expectThrows(AssertionError.class, () -> conjunction.nextDoc());\n    assertEquals(\"Sub-iterators of ConjunctionDISI are not on the same document!\", ex.getMessage());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9f411fcb966d871aaa550f0ad1e328ce71df018":["14eadbcde31ef1b984ca353239772e18e1dcf667"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73beab9372f571bc3dc060fcc658d2879ce20d67":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"14eadbcde31ef1b984ca353239772e18e1dcf667":["73beab9372f571bc3dc060fcc658d2879ce20d67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9f411fcb966d871aaa550f0ad1e328ce71df018"]},"commit2Childs":{"a9f411fcb966d871aaa550f0ad1e328ce71df018":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73beab9372f571bc3dc060fcc658d2879ce20d67"],"73beab9372f571bc3dc060fcc658d2879ce20d67":["14eadbcde31ef1b984ca353239772e18e1dcf667"],"14eadbcde31ef1b984ca353239772e18e1dcf667":["a9f411fcb966d871aaa550f0ad1e328ce71df018"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}