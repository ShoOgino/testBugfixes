{"path":"src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneSubreaders().mjava","commits":[{"id":"3688ee2a200d89c6fad03ca69c9c795834ce3209","date":1234695396,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneSubreaders().mjava","pathOld":"/dev/null","sourceNew":"  public void testCloneSubreaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n \n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader = IndexReader.open(dir1);\n    reader.deleteDocument(1); // acquire write lock\n    IndexReader[] subs = reader.getSequentialSubReaders();\n    assert subs.length > 1;\n    \n    IndexReader[] clones = new IndexReader[subs.length];\n    for (int x=0; x < subs.length; x++) {\n      clones[x] = (IndexReader) subs[x].clone();\n    }\n    reader.close();\n    for (int x=0; x < subs.length; x++) {\n      clones[x].close();\n    }\n    dir1.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneSubreaders().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneSubreaders().mjava","sourceNew":"  public void testCloneSubreaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n \n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader = IndexReader.open(dir1, false);\n    reader.deleteDocument(1); // acquire write lock\n    IndexReader[] subs = reader.getSequentialSubReaders();\n    assert subs.length > 1;\n    \n    IndexReader[] clones = new IndexReader[subs.length];\n    for (int x=0; x < subs.length; x++) {\n      clones[x] = (IndexReader) subs[x].clone();\n    }\n    reader.close();\n    for (int x=0; x < subs.length; x++) {\n      clones[x].close();\n    }\n    dir1.close();\n  }\n\n","sourceOld":"  public void testCloneSubreaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n \n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader = IndexReader.open(dir1);\n    reader.deleteDocument(1); // acquire write lock\n    IndexReader[] subs = reader.getSequentialSubReaders();\n    assert subs.length > 1;\n    \n    IndexReader[] clones = new IndexReader[subs.length];\n    for (int x=0; x < subs.length; x++) {\n      clones[x] = (IndexReader) subs[x].clone();\n    }\n    reader.close();\n    for (int x=0; x < subs.length; x++) {\n      clones[x].close();\n    }\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneSubreaders().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneSubreaders().mjava","sourceNew":"  public void testCloneSubreaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n \n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader = IndexReader.open(dir1, false);\n    reader.deleteDocument(1); // acquire write lock\n    IndexReader[] subs = reader.getSequentialSubReaders();\n    assert subs.length > 1;\n    \n    IndexReader[] clones = new IndexReader[subs.length];\n    for (int x=0; x < subs.length; x++) {\n      clones[x] = (IndexReader) subs[x].clone();\n    }\n    reader.close();\n    for (int x=0; x < subs.length; x++) {\n      clones[x].close();\n    }\n    dir1.close();\n  }\n\n","sourceOld":"  public void testCloneSubreaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n \n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader = IndexReader.open(dir1);\n    reader.deleteDocument(1); // acquire write lock\n    IndexReader[] subs = reader.getSequentialSubReaders();\n    assert subs.length > 1;\n    \n    IndexReader[] clones = new IndexReader[subs.length];\n    for (int x=0; x < subs.length; x++) {\n      clones[x] = (IndexReader) subs[x].clone();\n    }\n    reader.close();\n    for (int x=0; x < subs.length; x++) {\n      clones[x].close();\n    }\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneSubreaders().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testCloneSubreaders().mjava","sourceNew":"  public void testCloneSubreaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n \n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader = IndexReader.open(dir1, false);\n    reader.deleteDocument(1); // acquire write lock\n    IndexReader[] subs = reader.getSequentialSubReaders();\n    assert subs.length > 1;\n    \n    IndexReader[] clones = new IndexReader[subs.length];\n    for (int x=0; x < subs.length; x++) {\n      clones[x] = (IndexReader) subs[x].clone();\n    }\n    reader.close();\n    for (int x=0; x < subs.length; x++) {\n      clones[x].close();\n    }\n    dir1.close();\n  }\n\n","sourceOld":"  public void testCloneSubreaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n \n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader = IndexReader.open(dir1, false);\n    reader.deleteDocument(1); // acquire write lock\n    IndexReader[] subs = reader.getSequentialSubReaders();\n    assert subs.length > 1;\n    \n    IndexReader[] clones = new IndexReader[subs.length];\n    for (int x=0; x < subs.length; x++) {\n      clones[x] = (IndexReader) subs[x].clone();\n    }\n    reader.close();\n    for (int x=0; x < subs.length; x++) {\n      clones[x].close();\n    }\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["3688ee2a200d89c6fad03ca69c9c795834ce3209"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["3688ee2a200d89c6fad03ca69c9c795834ce3209","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3688ee2a200d89c6fad03ca69c9c795834ce3209":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3688ee2a200d89c6fad03ca69c9c795834ce3209"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3688ee2a200d89c6fad03ca69c9c795834ce3209":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}