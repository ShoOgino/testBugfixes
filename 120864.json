{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#addResult(int,boolean,long).mjava","commits":[{"id":"df2d68685a69bd82bf79243e28623c0775eb7bd8","date":1185567892,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#addResult(int,boolean,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a (possibly relevant) doc.\n   * @param n rank of the added doc (its ordinal position within the query results).\n   * @param isRelevant true if the added doc is relevant, false otherwise.\n   */\n  public void addResult(int n, boolean isRelevant, long docNameExtractTime) {\n    if (Math.abs(numPoints+1 - n) > 1E-6) {\n      throw new IllegalArgumentException(\"point \"+n+\" illegal after \"+numPoints+\" points!\");\n    }\n    if (isRelevant) {\n      numGoodPoints+=1;\n      recallPoints.add(new RecallPoint(n,numGoodPoints));\n    }\n    numPoints = n;\n    double p = numGoodPoints / numPoints;\n    if (isRelevant) {\n      pReleventSum += p;\n    }\n    if (n<pAt.length) {\n      pAt[n] = p;\n    }\n    recall = maxGoodPoints<=0 ? p : numGoodPoints/maxGoodPoints;\n    docNamesExtractTime += docNameExtractTime;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05d64184e4c44205b1dfa1cdf3869230c4025dc9","date":1199346280,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#addResult(int,boolean,long).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#addResult(int,boolean,long).mjava","sourceNew":"  /**\n   * Add a (possibly relevant) doc.\n   * @param n rank of the added doc (its ordinal position within the query results).\n   * @param isRelevant true if the added doc is relevant, false otherwise.\n   */\n  public void addResult(int n, boolean isRelevant, long docNameExtractTime) {\n    if (Math.abs(numPoints+1 - n) > 1E-6) {\n      throw new IllegalArgumentException(\"point \"+n+\" illegal after \"+numPoints+\" points!\");\n    }\n    if (isRelevant) {\n      numGoodPoints+=1;\n      recallPoints.add(new RecallPoint(n,numGoodPoints));\n      if (recallPoints.size()==1 && n<=5) { // first point, but only within 5 top scores. \n        mrr =  1.0 / n;\n      }\n    }\n    numPoints = n;\n    double p = numGoodPoints / numPoints;\n    if (isRelevant) {\n      pReleventSum += p;\n    }\n    if (n<pAt.length) {\n      pAt[n] = p;\n    }\n    recall = maxGoodPoints<=0 ? p : numGoodPoints/maxGoodPoints;\n    docNamesExtractTime += docNameExtractTime;\n  }\n\n","sourceOld":"  /**\n   * Add a (possibly relevant) doc.\n   * @param n rank of the added doc (its ordinal position within the query results).\n   * @param isRelevant true if the added doc is relevant, false otherwise.\n   */\n  public void addResult(int n, boolean isRelevant, long docNameExtractTime) {\n    if (Math.abs(numPoints+1 - n) > 1E-6) {\n      throw new IllegalArgumentException(\"point \"+n+\" illegal after \"+numPoints+\" points!\");\n    }\n    if (isRelevant) {\n      numGoodPoints+=1;\n      recallPoints.add(new RecallPoint(n,numGoodPoints));\n    }\n    numPoints = n;\n    double p = numGoodPoints / numPoints;\n    if (isRelevant) {\n      pReleventSum += p;\n    }\n    if (n<pAt.length) {\n      pAt[n] = p;\n    }\n    recall = maxGoodPoints<=0 ? p : numGoodPoints/maxGoodPoints;\n    docNamesExtractTime += docNameExtractTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#addResult(int,boolean,long).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#addResult(int,boolean,long).mjava","sourceNew":"  /**\n   * Add a (possibly relevant) doc.\n   * @param n rank of the added doc (its ordinal position within the query results).\n   * @param isRelevant true if the added doc is relevant, false otherwise.\n   */\n  public void addResult(int n, boolean isRelevant, long docNameExtractTime) {\n    if (Math.abs(numPoints+1 - n) > 1E-6) {\n      throw new IllegalArgumentException(\"point \"+n+\" illegal after \"+numPoints+\" points!\");\n    }\n    if (isRelevant) {\n      numGoodPoints+=1;\n      recallPoints.add(new RecallPoint(n,numGoodPoints));\n      if (recallPoints.size()==1 && n<=5) { // first point, but only within 5 top scores. \n        mrr =  1.0 / n;\n      }\n    }\n    numPoints = n;\n    double p = numGoodPoints / numPoints;\n    if (isRelevant) {\n      pReleventSum += p;\n    }\n    if (n<pAt.length) {\n      pAt[n] = p;\n    }\n    recall = maxGoodPoints<=0 ? p : numGoodPoints/maxGoodPoints;\n    docNamesExtractTime += docNameExtractTime;\n  }\n\n","sourceOld":"  /**\n   * Add a (possibly relevant) doc.\n   * @param n rank of the added doc (its ordinal position within the query results).\n   * @param isRelevant true if the added doc is relevant, false otherwise.\n   */\n  public void addResult(int n, boolean isRelevant, long docNameExtractTime) {\n    if (Math.abs(numPoints+1 - n) > 1E-6) {\n      throw new IllegalArgumentException(\"point \"+n+\" illegal after \"+numPoints+\" points!\");\n    }\n    if (isRelevant) {\n      numGoodPoints+=1;\n      recallPoints.add(new RecallPoint(n,numGoodPoints));\n      if (recallPoints.size()==1 && n<=5) { // first point, but only within 5 top scores. \n        mrr =  1.0 / n;\n      }\n    }\n    numPoints = n;\n    double p = numGoodPoints / numPoints;\n    if (isRelevant) {\n      pReleventSum += p;\n    }\n    if (n<pAt.length) {\n      pAt[n] = p;\n    }\n    recall = maxGoodPoints<=0 ? p : numGoodPoints/maxGoodPoints;\n    docNamesExtractTime += docNameExtractTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df2d68685a69bd82bf79243e28623c0775eb7bd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05d64184e4c44205b1dfa1cdf3869230c4025dc9":["df2d68685a69bd82bf79243e28623c0775eb7bd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["05d64184e4c44205b1dfa1cdf3869230c4025dc9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df2d68685a69bd82bf79243e28623c0775eb7bd8"],"df2d68685a69bd82bf79243e28623c0775eb7bd8":["05d64184e4c44205b1dfa1cdf3869230c4025dc9"],"05d64184e4c44205b1dfa1cdf3869230c4025dc9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}