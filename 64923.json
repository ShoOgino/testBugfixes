{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#testOpenRangeNumericQuery().mjava","commits":[{"id":"e91b7614171e0a6a82351457c2870d2a0124ba9a","date":1312225025,"type":0,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#testOpenRangeNumericQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOpenRangeNumericQuery() throws Exception {\n    assertOpenRangeQuery(NumberType.ZERO, \"<\", 1);\n    assertOpenRangeQuery(NumberType.POSITIVE, \"<\", 2);\n    assertOpenRangeQuery(NumberType.NEGATIVE, \"<\", 0);\n    \n    assertOpenRangeQuery(NumberType.ZERO, \"<=\", 2);\n    assertOpenRangeQuery(NumberType.POSITIVE, \"<=\", 3);\n    assertOpenRangeQuery(NumberType.NEGATIVE, \"<=\", 1);\n    \n    assertOpenRangeQuery(NumberType.ZERO, \">\", 1);\n    assertOpenRangeQuery(NumberType.POSITIVE, \">\", 0);\n    assertOpenRangeQuery(NumberType.NEGATIVE, \">\", 2);\n    \n    assertOpenRangeQuery(NumberType.ZERO, \">=\", 2);\n    assertOpenRangeQuery(NumberType.POSITIVE, \">=\", 1);\n    assertOpenRangeQuery(NumberType.NEGATIVE, \">=\", 3);\n    \n    assertOpenRangeQuery(NumberType.NEGATIVE, \"=\", 1);\n    assertOpenRangeQuery(NumberType.ZERO, \"=\", 1);\n    assertOpenRangeQuery(NumberType.POSITIVE, \"=\", 1);\n    \n    assertRangeQuery(NumberType.NEGATIVE, null, true, true, 3);\n    assertRangeQuery(NumberType.NEGATIVE, null, false, true, 2);\n    assertRangeQuery(NumberType.POSITIVE, null, true, false, 1);\n    assertRangeQuery(NumberType.ZERO, null, false, false, 1);\n\n    assertRangeQuery(null, NumberType.POSITIVE, true, true, 3);\n    assertRangeQuery(null, NumberType.POSITIVE, true, false, 2);\n    assertRangeQuery(null, NumberType.NEGATIVE, false, true, 1);\n    assertRangeQuery(null, NumberType.ZERO, false, false, 1);\n    \n    assertRangeQuery(null, null, false, false, 3);\n    assertRangeQuery(null, null, true, true, 3);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#testOpenRangeNumericQuery().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#testOpenRangeNumericQuery().mjava","sourceNew":"  @Test\n  public void testOpenRangeNumericQuery() throws Exception {\n    assertOpenRangeQuery(NumberType.ZERO, \"<\", 1);\n    assertOpenRangeQuery(NumberType.POSITIVE, \"<\", 2);\n    assertOpenRangeQuery(NumberType.NEGATIVE, \"<\", 0);\n    \n    assertOpenRangeQuery(NumberType.ZERO, \"<=\", 2);\n    assertOpenRangeQuery(NumberType.POSITIVE, \"<=\", 3);\n    assertOpenRangeQuery(NumberType.NEGATIVE, \"<=\", 1);\n    \n    assertOpenRangeQuery(NumberType.ZERO, \">\", 1);\n    assertOpenRangeQuery(NumberType.POSITIVE, \">\", 0);\n    assertOpenRangeQuery(NumberType.NEGATIVE, \">\", 2);\n    \n    assertOpenRangeQuery(NumberType.ZERO, \">=\", 2);\n    assertOpenRangeQuery(NumberType.POSITIVE, \">=\", 1);\n    assertOpenRangeQuery(NumberType.NEGATIVE, \">=\", 3);\n    \n    assertOpenRangeQuery(NumberType.NEGATIVE, \"=\", 1);\n    assertOpenRangeQuery(NumberType.ZERO, \"=\", 1);\n    assertOpenRangeQuery(NumberType.POSITIVE, \"=\", 1);\n    \n    assertRangeQuery(NumberType.NEGATIVE, null, true, true, 3);\n    assertRangeQuery(NumberType.NEGATIVE, null, false, true, 2);\n    assertRangeQuery(NumberType.POSITIVE, null, true, false, 1);\n    assertRangeQuery(NumberType.ZERO, null, false, false, 1);\n\n    assertRangeQuery(null, NumberType.POSITIVE, true, true, 3);\n    assertRangeQuery(null, NumberType.POSITIVE, true, false, 2);\n    assertRangeQuery(null, NumberType.NEGATIVE, false, true, 1);\n    assertRangeQuery(null, NumberType.ZERO, false, false, 1);\n    \n    assertRangeQuery(null, null, false, false, 3);\n    assertRangeQuery(null, null, true, true, 3);\n    \n  }\n\n","sourceOld":"  @Test\n  public void testOpenRangeNumericQuery() throws Exception {\n    assertOpenRangeQuery(NumberType.ZERO, \"<\", 1);\n    assertOpenRangeQuery(NumberType.POSITIVE, \"<\", 2);\n    assertOpenRangeQuery(NumberType.NEGATIVE, \"<\", 0);\n    \n    assertOpenRangeQuery(NumberType.ZERO, \"<=\", 2);\n    assertOpenRangeQuery(NumberType.POSITIVE, \"<=\", 3);\n    assertOpenRangeQuery(NumberType.NEGATIVE, \"<=\", 1);\n    \n    assertOpenRangeQuery(NumberType.ZERO, \">\", 1);\n    assertOpenRangeQuery(NumberType.POSITIVE, \">\", 0);\n    assertOpenRangeQuery(NumberType.NEGATIVE, \">\", 2);\n    \n    assertOpenRangeQuery(NumberType.ZERO, \">=\", 2);\n    assertOpenRangeQuery(NumberType.POSITIVE, \">=\", 1);\n    assertOpenRangeQuery(NumberType.NEGATIVE, \">=\", 3);\n    \n    assertOpenRangeQuery(NumberType.NEGATIVE, \"=\", 1);\n    assertOpenRangeQuery(NumberType.ZERO, \"=\", 1);\n    assertOpenRangeQuery(NumberType.POSITIVE, \"=\", 1);\n    \n    assertRangeQuery(NumberType.NEGATIVE, null, true, true, 3);\n    assertRangeQuery(NumberType.NEGATIVE, null, false, true, 2);\n    assertRangeQuery(NumberType.POSITIVE, null, true, false, 1);\n    assertRangeQuery(NumberType.ZERO, null, false, false, 1);\n\n    assertRangeQuery(null, NumberType.POSITIVE, true, true, 3);\n    assertRangeQuery(null, NumberType.POSITIVE, true, false, 2);\n    assertRangeQuery(null, NumberType.NEGATIVE, false, true, 1);\n    assertRangeQuery(null, NumberType.ZERO, false, false, 1);\n    \n    assertRangeQuery(null, null, false, false, 3);\n    assertRangeQuery(null, null, true, true, 3);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}