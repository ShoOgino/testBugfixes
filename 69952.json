{"path":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE);\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3741149a89925c02f14dbeef8365b896798d91fc","date":1303483574,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = _TestUtil.getTempDir(\"lazyDir\" + userName);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":["66b12ba4967665216eeb706b58d424c51fb3641a","1d16275d75dfe0b780ed62df4c811d083187c71a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = _TestUtil.getTempDir(\"lazyDir\" + userName);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = _TestUtil.getTempDir(\"lazyDir\" + userName);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = _TestUtil.getTempDir(\"lazyDir\" + userName);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = _TestUtil.getTempDir(\"lazyDir\" + userName);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 10;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = _TestUtil.getTempDir(\"lazyDir\" + userName);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = _TestUtil.getTempDir(\"lazyDir\" + userName);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 10;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = _TestUtil.getTempDir(\"lazyDir\" + userName);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = _TestUtil.getTempDir(\"lazyDir\" + userName);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 10;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = _TestUtil.getTempDir(\"lazyDir\" + userName);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestContribFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = _TestUtil.getTempDir(\"lazyDir\" + userName);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 10;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      IndexReader reader = IndexReader.open(tmpDir);\n\n      Document doc;\n      doc = reader.document(0);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      IndexableField field = doc.getField(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertFalse(\"field is lazy\", field.getClass().getSimpleName().equals(\"LazyField\"));\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = IndexReader.open(tmpDir);\n      doc = getDocument(reader, 0, fieldSelector);\n      field = doc.getField(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.getClass().getSimpleName().equals(\"LazyField\"));\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = _TestUtil.getTempDir(\"lazyDir\" + userName);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 10;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["3741149a89925c02f14dbeef8365b896798d91fc"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","3741149a89925c02f14dbeef8365b896798d91fc"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["962d04139994fce5193143ef35615499a9a96d78","3741149a89925c02f14dbeef8365b896798d91fc"],"c19f985e36a65cc969e8e564fe337a0d41512075":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","c19f985e36a65cc969e8e564fe337a0d41512075"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","3741149a89925c02f14dbeef8365b896798d91fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3741149a89925c02f14dbeef8365b896798d91fc":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"962d04139994fce5193143ef35615499a9a96d78":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["962d04139994fce5193143ef35615499a9a96d78","3741149a89925c02f14dbeef8365b896798d91fc"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3741149a89925c02f14dbeef8365b896798d91fc":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a3776dccca01c11e7046323cfad46a3b4a471233"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d493718201f0d0c54c773fb323d87bbd2fbffe41","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}