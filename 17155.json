{"path":"lucene/core/src/java/org/apache/lucene/geo/SimpleGeoJSONPolygonParser#parse().mjava","commits":[{"id":"928077c840ee09456eee199964d886c73fc53314","date":1468594268,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/SimpleGeoJSONPolygonParser#parse().mjava","pathOld":"/dev/null","sourceNew":"  public Polygon[] parse() throws ParseException {\n    // parse entire object\n    parseObject(\"\");\n\n    // make sure there's nothing left:\n    readEnd();\n\n    // The order of JSON object keys (type, geometry, coordinates in our case) can be arbitrary, so we wait until we are done parsing to\n    // put the pieces together here:\n\n    if (coordinates == null) {\n      throw newParseException(\"did not see any polygon coordinates\");\n    }\n\n    if (polyType == null) {\n      throw newParseException(\"did not see type: Polygon or MultiPolygon\");\n    }\n\n    if (polyType.equals(\"Polygon\")) {\n      return new Polygon[] {parsePolygon(coordinates)};\n    } else {\n      List<Polygon> polygons = new ArrayList<>();\n      for(int i=0;i<coordinates.size();i++) {\n        Object o = coordinates.get(i);\n        if (o instanceof List == false) {\n          throw newParseException(\"elements of coordinates array should be an array, but got: \" + o.getClass());\n        }\n        polygons.add(parsePolygon((List<Object>) o));\n      }\n\n      return polygons.toArray(new Polygon[polygons.size()]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/SimpleGeoJSONPolygonParser#parse().mjava","pathOld":"/dev/null","sourceNew":"  public Polygon[] parse() throws ParseException {\n    // parse entire object\n    parseObject(\"\");\n\n    // make sure there's nothing left:\n    readEnd();\n\n    // The order of JSON object keys (type, geometry, coordinates in our case) can be arbitrary, so we wait until we are done parsing to\n    // put the pieces together here:\n\n    if (coordinates == null) {\n      throw newParseException(\"did not see any polygon coordinates\");\n    }\n\n    if (polyType == null) {\n      throw newParseException(\"did not see type: Polygon or MultiPolygon\");\n    }\n\n    if (polyType.equals(\"Polygon\")) {\n      return new Polygon[] {parsePolygon(coordinates)};\n    } else {\n      List<Polygon> polygons = new ArrayList<>();\n      for(int i=0;i<coordinates.size();i++) {\n        Object o = coordinates.get(i);\n        if (o instanceof List == false) {\n          throw newParseException(\"elements of coordinates array should be an array, but got: \" + o.getClass());\n        }\n        polygons.add(parsePolygon((List<Object>) o));\n      }\n\n      return polygons.toArray(new Polygon[polygons.size()]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"928077c840ee09456eee199964d886c73fc53314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","928077c840ee09456eee199964d886c73fc53314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["928077c840ee09456eee199964d886c73fc53314"]},"commit2Childs":{"928077c840ee09456eee199964d886c73fc53314":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["928077c840ee09456eee199964d886c73fc53314","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}